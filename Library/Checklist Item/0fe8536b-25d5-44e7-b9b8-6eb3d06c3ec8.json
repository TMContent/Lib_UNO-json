{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1077805753",
      "Content_Hash": "529566895"
    },
    "Metadata": [
      {
        "Id": [
          "0fe8536b-25d5-44e7-b9b8-6eb3d06c3ec8"
        ],
        "Id_History": [
          "0fe8536b-25d5-44e7-b9b8-6eb3d06c3ec8,bccb7d27-40ba-427a-9d12-ca780a24199a,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Sensitive Data Is Encrypted During Transmission"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive Data Is Encrypted During Transmission"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Ensure that encryption is used to protect sensitive data that is transmitted over the network.</p>\r\n  <h1>Why</h1>\r\n  <p>When data is sent over the network, it typically passes through several intermediate relays on its way towards some final destination. Using a safe protocol to transmit information is important because it adds protection against a Network Eavesdropping Attack or Man in the Middle Attack during transport.</p>\r\n  <h1>How To Check</h1>\r\n  <p>When an application transmits sensitive data over the network, it is necessary to ensure that it is encrypted to protect the data from being stolen or modified in transit. To ensure this, follow the steps outlined below:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive information.</strong> Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>\r\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\r\n        <li>Information that comes from an external trusted source that is not designed to be shared with users</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that sensitive data is securely transmitted.</strong> Ensure that your application transmits sensitive data in a secured fashion. Check if your application uses the following approaches:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Encrypting the communication links.</strong> Using the \"All sensitive communications are encrypted\" checklist, check if your application's communication links are properly secured. </p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Encrypting application data.</strong> If your application encrypts its application data, check if your application securely transforms its application data before transmitting it over the network: </p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Hashing.</strong> Hashing is a one-way mechanism for storing sensitive data in a non-retrievable way. If your application uses hashing as means for storing sensitive data, verify that the following pieces are in place:</p>\r\n          <ul>\r\n            <li>\r\n              <strong>Salt:</strong> Check if your application generates its salt using the <em>RNGCryptoServiceProvider</em> class. </li>\r\n            <li>\r\n              <strong>Function:</strong> Check if your application uses SHA-256, SHA-384, or SHA-512 as its hash function. </li>\r\n            <li>\r\n              <strong>Invocation:</strong> Check if your application invokes the <em>HMAC.ComputeHash</em> method to perform the hashing procedure. </li>\r\n            <li>\r\n              <strong>Clean-up:</strong> Check if your application securely cleans-up all instances of the sensitive data after the hashing procedure has been completed. </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Encryption.</strong> Encryption is a mechanism for storing and transmitting sensitive data in a retrievable way. If your application uses encryption as means for storing sensitive data, verify that the following pieces are in place:</p>\r\n          <ul>\r\n            <li>\r\n              <strong>Encryption Key:</strong> Verify that your application's encryption keys are securely stored inside your application's key store.&nbsp; </li>\r\n            <li>\r\n              <strong>Function:</strong> Check if your application uses AES, AES256, or a similar modern strong symmetric encryption function. 3DES and other, older algorithms should be avoided for new development. </li>\r\n            <li>\r\n              <strong>Invocation:</strong> Check if your application invokes the <em>SymmetricAlgorithm.Create</em> and <em>ICryptoTransform.TransformFinalBlock</em> methods to perform the encryption procedure. </li>\r\n            <li>\r\n              <strong>Clean-up:</strong> Check if your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed.</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <h1>How To Fix</h1>\r\n  <p>Use the following steps to protect sensitive data over the network:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive information.</strong> Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>\r\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\r\n        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Choose an appropriate protection mechanism.</strong> Choosing the appropriate protection mechanism may depend on various conditions: purpose of the sensitive data, role of the other network party, infrastructure, and supported technologies. Because sensitive data must be encrypted when in transit, there are two potential strategies â€” Encrypt the application data or Encrypt the communication channel:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Encrypt the communication channel.</strong> Depending on the current infrastructure and the other network party, it is possible to encrypt the connections using SSL, IPSec, or any technologies supported by the remote party. </p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Encrypt the application data.</strong> If your application's communication channels cannot be encrypted, encrypt the application data. Hashing or encryption should be used when protecting the application data. Use hashing if the sensitive data will be used only for comparison purposes and the actual contents of the data will never need to be recovered. Use encryption if the sensitive data will need be retrieved at a later stage.</p>\r\n          <ul>\r\n            <li>\r\n              <p>\r\n                <strong>Hashing</strong>: If hashing is used, choose a longer salt, 16 or more bits. The salt is random data that is known only by the application; to guess the value of the original data given the hash, an attacker also has to guess the salt. It is recommended to have a longer salt because it provides a bigger input to the hash function. Assuming that the produced hash is compromised, longer salts makes it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Use RNGCryptoServiceProvider to generate the salt. Example:</p>\r\n              <pre>public static byte[] GenerateSalt()<br />{<br />    byte[] randBytes = new byte[4];<br />    RNGCryptoServiceProvider gen =<br />     new RNGCryptoServiceProvider();<br />    gen.GetNonZeroBytes(randBytes);<br />    return randBytes;<br />}</pre>\r\n              <p>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-256 or stronger.</p>\r\n              <pre>public byte[] HashCredentials(byte[] pass, byte[] salt)<br />{<br />    HMACSHA512 md;<br />    byte[] digest; <br />    md = new HMACSHA256(salt);<br />    md.Initialize();<br />    digest = md.ComputeHash(pass);<br />    md.Clear();<br />    return digest;<br />}</pre>\r\n            </li>\r\n            <li>\r\n              <p>\r\n                <strong>Encrypting</strong>: If encryption is used, use a key size of 256-bit or higher for symmetric encryption and 2048-bit or higher for public/private key encryption. Use AES for symmetric encryption or RSA for public/private key encryption. You should use symmetric encryption if and only if your application is the only entity that will access the encrypted data. If the data will be accessed by more than one party, use public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key.</p>\r\n              <pre>Rijndael encMD;ICryptoTransform encCT;<br />byte[] digest;<br />// The following code obtains the encryption key and initialization vector<br />// from the application's key repository. <br />encMD = Rijndael.Create();<br />encMD.Key = MyApp.Crypto.GetEncryptionKey();<br />encMD.IV = MyApp.Crypto.GetEncryptionIV();<br />encCT = encMD.CreateEncryptor(); <br />// Note that sensitiveData is of type byte[] and contains<br />// data that is sensitive in nature<br />digest = encCT.TransformFinalBlock(sensitiveData, 0, sensitiveData.Length);<br />encMD.Clear();</pre>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Apply the appropriate protection mechanism</strong>: Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location. For instance, if your application processes credit card transactions across a hostile network environment, encrypt the credit card information before transmitting it to the appropriate network entity:</p>\r\n      <pre>void ProcessPayment(byte[] ccInfo, float amount)<br />{<br />    byte[] ccDigest = MyApp.Crypto.EncryptCCInfo(ccInfo);<br />    SqlConnection connection;<br />    SqlCommand command;<br />    SqlDataReader result;<br />    string query = \"execute QueuePayment @ccDigest @amount;\";<br />    connection = MyApp.DBManager.GetDBConnection();<br />    command = new SqlCommand(query, connection);<br />    command.Parameters.Add(\"@ccDigest\", System.Data.SqlDbType.Binary);<br />    command.Parameters[\"@ccDigest\"].Value = ccDigest;<br />    command.Parameters.Add(\"@amount\", System.Data.SqlDbType.Float);<br />    command.Parameters[\"@amount\"].Value = amount;<br />    ...<br />}</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <em>You may find these additional articles useful</em>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/508f4130-96fd-40b8-9358-552795b810e3\">Encrypt Sensitive Data During Transmission</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\r\n  <h1>\r\n  </h1>\r\n  <h1>\r\n  </h1>"
        ]
      }
    ]
  }
}