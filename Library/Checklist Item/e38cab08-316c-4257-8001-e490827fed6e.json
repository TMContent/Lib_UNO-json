{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1244807625",
      "Content_Hash": "633076039"
    },
    "Metadata": [
      {
        "Id": [
          "e38cab08-316c-4257-8001-e490827fed6e"
        ],
        "Id_History": [
          "e38cab08-316c-4257-8001-e490827fed6e,02088ae6-83e6-4ea7-ad75-9cf868a5dd18,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Role-based Authorization Is Used"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Role-based Authorization Is Used"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that role-based authorization is used.</p>\r\n  <h1>Why</h1>\r\n  <p>Role-based authorization is simple to manage for a large amount of users, yet effective for enforcing access control.</p>\r\n  <h1>How To Check</h1>\r\n  <p>To verify that role-based authorization is used:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that forms authentication is used.</strong> To make sure that forms authentication is used, search <em>Web.config</em> files for the following string:</p>\r\n      <pre>&lt;authentication mode=\"Forms\"&gt;</pre>\r\n      <p>It is a good idea to review application code to make sure it takes full advantage of the functionality provided by forms authentication.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive pages.</strong> Make a list of pages that require authorization, including all pages that handle sensitive or private data.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Examine authorization settings.</strong> Examine <em>Web.config</em> files to make sure that all sensitive pages have an appropriately configured &lt;<em>authorization</em>&gt; section.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>How To Fix</h1>\r\n  <p>Use the following steps when designing the role-based security:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Understand the different types of users.</strong> Enumerate the different types of users needed for the application. Understand how they will use the application and to which resources they will need access. Create a matrix mapping the actions each role is authorized to perform with the corresponding system components. Use this matrix to identify the different types of users according to the functionality they need. Creating a threat model may be a useful step to ensure that you correctly understand the implications of this matrix.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Establish the roles.</strong> Define which resources can be accessed by each role. There are two approaches when enforcing role-based security - programmatic and declarative.</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>The programmatic approach.</strong> The programmatic approach to role-based security is written inside the code and provides additional runtime flexibility. It allows your application to dynamically create and assign roles so that user privileges can be granted and revoked without the need of restarting your application. When using the programmatic approach to role-based security, place access control checks at the appropriate locations in your application. For example, the following code requires users to be shareholders in order to generate a financial report:</p>\r\n          <pre>public void GenerateFinancialReport(DateTime startDate, DateTime endDate)<br />{<br />    if (HttpContext.Current.User.IsInRole(\"ShareHolders\"))<br />    {<br />        // Generate the relevant financial report<br />    }<br />}</pre>\r\n          <p>Additionally, your application can programmatically check if a user is member of a local Windows group.</p>\r\n          <pre>public void RetrieveLogs(ref Hashtable logTable)<br />{<br />    WindowsPrincipal user =<br />     new WindowsPrincipal((WindowsIdentity)HttpContext.Current.User.Identity);<br />    if (user.IsInRole(WindowsBuiltInRole.Administrator))<br />    {<br />        // Add logic for retrieving logs<br />    }<br />}</pre>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>The declarative approach.</strong>&nbsp;The declarative approach to role-based security is done via the configuration files. It allows easy manageability as the declarations can be modified without having to recompile. By using the declarative approach, you can easily manage the security settings for large portions of the application without changing the source code. ASP.NET applications that use declarative security specify the appropriate roles inside <em>Web.config</em>. The following elements enforce role-based security through <em>Web.config</em>:</p>\r\n          <ul>\r\n            <li>\r\n              <p>\r\n                <strong>roleManager</strong>: Configures the ASP.NET role manager. Applicable only if form-based authentication is used. Example:</p>\r\n              <pre>&lt;connectionStrings&gt;<br />  &lt;add name=\"MyAppSqlConnection\"<br />       connectionString=\"Server=serv02.example.com;<br />        Database=myapp; Integrated Security=SSPI;\"<br />       providerName=\"System.Data.SqlClient\"/&gt;<br /> ...<br /> &lt;system.web&gt;<br />   &lt;roleManager enabled=\"true\" cacheRolesInCookie=\"false\"<br />     defaultProvider =\"ProjectRoleProvider\"&gt;<br />    &lt;providers&gt;<br />      &lt;clear /&gt;<br />      &lt;add name=\"MyAppRoleProvider\"<br />            type=\"System.Web.Security.SqlRoleProvider\"<br />            connectionStringName=\"MyAppSqlConnection\"<br />            applicationName=\"MyApp\"/&gt;</pre>\r\n            </li>\r\n            <li>\r\n              <p>\r\n                <strong>authorization</strong>: Encapsulates the authorization settings for a resource.</p>\r\n            </li>\r\n            <li>\r\n              <p>\r\n                <strong>allow</strong>: Represents the users and roles that are allowed access to the given resource.</p>\r\n            </li>\r\n            <li>\r\n              <p>\r\n                <strong>deny</strong>: Represents the users and roles that are denied access to the given resource.</p>\r\n            </li>\r\n          </ul>\r\n          <p>For example:</p>\r\n          <pre>&lt;!-- web.config --&gt;<br />&lt;system.web&gt;<br />   &lt;authentication mode=\"Windows\" /&gt;<br />   &lt;authorization&gt;<br />    &lt;allow roles=\"BUILTIN\\Administrators\"/&gt;<br />    &lt;deny users=\"*\"/&gt;<br />  &lt;/authorization&gt;<br />&lt;/system.web&gt;</pre>\r\n          <p>Additionally, if your application uses form-based authentication, you can configure your application's access controls through Visual Studio's ASP.NET Configuration, available by accessing the <em>Website -&gt; ASP.NET Configuration</em> menu.</p>\r\n          <p>\r\n            <strong>Note:</strong>&nbsp;if you use Windows authentication, you will need to manage your application's users and user roles through managing Windows users and groups.</p>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Manage the users.</strong> Assign the users into their respective user roles. The application should enforce the security policy according to the user roles instead of the actual user. Based on your application's mechanism to enforce role-based access controls, use one of the following techniques to manage your application's users:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>The programmatic approach.</strong> ASP.NET allows you to manage your application's users through the <em>Roles</em> class.</p>\r\n          <p>Use the following methods to assign users into roles:</p>\r\n          <ul>\r\n            <li>\r\n              <em>AddUserToRole </em>\r\n            </li>\r\n            <li>\r\n              <em>AddUserToRoles </em>\r\n            </li>\r\n            <li>\r\n              <em>AddUsersToRole </em>\r\n            </li>\r\n            <li>\r\n              <em>AddUsersToRoles</em>\r\n            </li>\r\n          </ul>\r\n          <p>Example:</p>\r\n          <pre>Roles.AddUserToRole(\"eric\", \"ShareHolders\");</pre>\r\n          <p>Use the following methods to remove users from roles:</p>\r\n          <ul>\r\n            <li>\r\n              <em>RemoveUserFromRole </em>\r\n            </li>\r\n            <li>\r\n              <em>RemoveUserFromRoles </em>\r\n            </li>\r\n            <li>\r\n              <em>RemoveUsersFromRole </em>\r\n            </li>\r\n            <li>\r\n              <em>RemoveUsersFromRoles</em>\r\n            </li>\r\n          </ul>\r\n          <p>Example:</p>\r\n          <pre>Roles.RemoveUserFromRole(\"eric\", \"ShareHolders\");</pre>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>The declarative approach.</strong> Use the ASP.NET Role Manager to manage your application's users. If your application uses form-based authentication, you can configure your application's access controls through Visual Studio's ASP.NET Configuration, available by accessing the <em>Website -&gt; ASP.NET Configuration</em> menu.</p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Windows authentication.</strong>&nbsp;If your application uses Windows authentication, use the Windows<strong><em></em></strong>Local Users and Groups service to manage your application's users. If your server is connected to your organization's NT Domain or Active Directory forest, user and role management will be performed by your organization's network administrators.</p>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <em>You may find these additional articles useful</em>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/b0a206b5-61c4-4d9f-8c06-057783ebf249\">Use Role-based Authorization</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\r\n  <h1>\r\n  </h1>\r\n  <h1>\r\n  </h1>"
        ]
      }
    ]
  }
}