{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1582963022",
      "Content_Hash": "87494325"
    },
    "Metadata": [
      {
        "Id": [
          "c8e5ad95-edef-44fb-9dd4-9bac52064024"
        ],
        "Id_History": [
          "c8e5ad95-edef-44fb-9dd4-9bac52064024,a61d98c0-6053-4ff3-916a-121d5aa4f7f4,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "The Chosen Trust Level Does Not Exceed Your Application's Requirement"
        ],
        "Category": [
          "Code Access Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Ensure that your application's trust level does not exceed the operating permissions required. </p>\n  <h1>Why</h1>\n  <p>An attacker can only cause damage within the bounds defined by the trust level set on the application. The less privilege your application has, the less damage potential an attacker will have. </p>\n  <h1>How to Check</h1>\n  <p>Use the following steps to check your application's trust level:</p>\n  <ol>\n    <div>\n      <li>Identify the precise set of code access security permissions that your application requires. You can do this by manually reviewing your code or by using the Permissions Calculator tool (Permcalc.exe). <li>Evaluate whether the permissions required for your application match those provided by any of the standard trust levels. To see the permissions each trust level provides, examine each trust level policy file in the <strong>&#37;windir&#37;\\Microsoft.NET\\Framework\\&#123;version&#125;\\CONFIG</strong> directory, beginning with the High trust policy file, web_hightrust.config. <li>Check that your application's trust level is set to the policy that is closest to the required permissions.</li></li></li>\n    </div>\n  </ol>\n  <p>You can find your application's trust policy defined in its web.config file:</p>\n  <pre>&lt;system.web&gt;<br />&nbsp; ...<br />&nbsp; &lt;trust level=\"Medium\" originUrl=\"\" /&gt;<br />&nbsp; ...<br />&lt;/system.web&gt; </pre>\n  <h1>How to Fix</h1>\n  <p>To select the most appropriate trust level take the following steps: </p>\n  <ol>\n    <li>Identify the precise set of code access security permissions that your application requires. You can do this by manually reviewing your code or by using the Permissions Calculator tool (Permcalc.exe). <li>Evaluate whether the permissions required for your application match those provided by any of the standard trust levels. To see the permissions each trust level provides, examine each trust level policy file in the&nbsp;<strong>&#37;windir&#37;\\Microsoft.NET\\Framework\\&#123;version&#125;\\CONFIG</strong> directory, beginning with the High trust policy, file web_hightrust.config. <li>If your application requires fewer code access security permissions than those provided by the High trust level, move on to consider Medium trust. Repeat the process, moving from Medium to Low to Minimal, and keep evaluating the partial trust levels until you reach an exact match to your application's requirements or until your application's required permissions slightly exceed a partial trust level. </li><li>If your application needs more permissions than are granted by one level, but requires fewer than are provided by the next level, consider creating a custom trust policy. <li>Set the trust level by adding an xml directive to the web config file: <pre>&lt;system.web&gt;<br />&nbsp; ...<br />&nbsp; &lt;trust level=\"Medium\" originUrl=\"\" /&gt;<br />&nbsp; ...<br />&lt;/system.web&gt; </pre></li></li></li></li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>A developer creates&nbsp;an ASP.NET&nbsp;application that requires file system access&nbsp;outside of the&nbsp;directory that is allocated for&nbsp;the application. The default Full Trust level does allow for file system access in the way that the application needs; however, it also&nbsp;gives several unnecessary privileges such as socket access and the ability to call unmanaged code.&nbsp;These additional privileges increase the amount of damage an attacker can do if the application is compromised. </p>\n  <h1>Solution Example</h1>\n  <p>A developer creates&nbsp;an ASP.NET&nbsp;application that requires file system access&nbsp;outside of the&nbsp;directory that is allocated for&nbsp;the application. The developer does not want to give full permissions to the application, so the developer runs permcalc.exe on the assembly, which generates an xml report that identifies&nbsp;the precise permissions that the application requires, which are:</p>\n  <ul>\n    <li>\n      <strong>SMTP access:</strong> Emails are sent on behalf of the application to notify users when important events occur, such as&nbsp;password reset acknowledgment responses&nbsp;and welcome emails for new users. <li><strong>Managed code only:</strong> The application is very modern and relies on no unmanaged libraries to perform tasks. The application does not need to call unmanaged (native) code. <li><strong>Socket Access:</strong> The application relies on an older auditing package that employs a custom, socket-based communication protocol. The application needs the ability to create a socket connection and read/write data from/to it.</li></li></li>\n  </ul>\n  <p>The developer looks at the Predefined trust levels and determines that the lowest level of trust that the application can use and still satisfy its requirements is the high trust level. The trust level is set&nbsp;by adding an xml directive to the web config file:</p>\n  <pre>&lt;system.web&gt;<br />&nbsp; ...<br />&nbsp; &lt;trust level=\"High\" originUrl=\"\" /&gt;<br />&nbsp; ...<br />&lt;/system.web&gt; </pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>\n      <a href=\"http://msdn2.microsoft.com/en-us/library/ms165077.aspx\">Permission Calculator Tool (PermCalc.exe)</a>\n    </li>\n  </ul>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/5a4ca787-30a1-487c-be5d-9d849aaaca36\">Choose a Trust Level That Does Not Exceed the Application's Requirements</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}