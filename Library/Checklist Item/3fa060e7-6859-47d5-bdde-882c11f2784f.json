{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1456595576",
      "Content_Hash": "1644400649"
    },
    "Metadata": [
      {
        "Id": [
          "3fa060e7-6859-47d5-bdde-882c11f2784f"
        ],
        "Id_History": [
          "3fa060e7-6859-47d5-bdde-882c11f2784f,458f51ed-9b57-4f33-8a87-a87ffe757daa,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Appropriate ACLs Are Configured on Web Site Files"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Appropriate ACLs Are Configured on Web Site Files"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Check to ensure that your application configures right access control lists (ACLs) for the right identities on its Web site files.</p>\n  <h1>How to Fix</h1>\n  <p>You need to configure the right access control lists (ACLs) for the right identities on your Web site files so that IIS and also ASP.NET file authorization control access to these files appropriately. You need to grant access to the following identities: </p>\n  <ul>\n    <li>\n      <b>Your Web application identity.</b> If you are using a custom service account to run your ASP.NET application, you can grant the appropriate permissions to the IIS metabase and to the file system by running Aspnet_regiis.exe with the -<b>ga</b> switch. <li><b>Your application's users.</b> ASP.NET file authorization performs access checks for file types mapped by IIS to the ASP.NET ISAPI extension (Aspnet_isapi.dll). If you are using Windows authentication, the authenticated user's Windows access token (which may be IUSR_MACHINE for anonymous users) is checked against the ACL attached to the requested ASP.NET file. If you are using forms authentication, access is checked against IUSR_MACHINE. </li></li>\n  </ul>\n  <p>File authorization works automatically when using Windows authentication, and there is no need to impersonate the original user. The <b>FileAuthorizationModule</b> only performs access checks against the requested file. For example, if you request Default.aspx and it contains an embedded user control (Usercontrol.ascx), which in turn includes an image tag (pointing to Image.gif), the <b>FileAuthorizationModule</b> performs an access check for Default.aspx and Usercontrol.ascx, because these file types are mapped by IIS to the ASP.NET ISAPI extension. The <b>FileAuthorizationModule</b> does not perform a check for Image.gif, because this is a static file handled internally by IIS. However, because access checks for static files are performed by IIS, the authenticated user must still be granted read permission to the file with an appropriately configured ACL.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}