{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "375850771",
      "Content_Hash": "193826307"
    },
    "Metadata": [
      {
        "Id": [
          "78d58c9a-f1e8-45ba-9fbd-56ab1f6b804a"
        ],
        "Id_History": [
          "78d58c9a-f1e8-45ba-9fbd-56ab1f6b804a,7b57e779-f010-46a0-943c-68486194c82c,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Impersonation Is Reverted by Using Finally Blocks"
        ],
        "Category": [
          "Impersonation and Delegation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Impersonation Is Reverted by Using Finally Blocks"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that impersonation is reverted by using structured exception handling&nbsp;in programmatic impersonation.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>If you must use programmatic impersonation, use structured exception handling and put the impersonation code inside <b>try</b> blocks. Use a <b>catch</b> block to handle exceptions and use a <b>finally</b> block to ensure that the impersonation is reverted as shown here:</p>\r\n  <p>\r\n    <pre>using System.Security.Principal;<br />...<br />WindowsIdentity winIdentity = new WindowsIdentity(<a href=\"mailto:username&#64;domainName\">username&#64;domainName</a>);<br />WindowsImpersonationContext ctx = winIdentity.Impersonate();<br />try<br />&#123;<br />  // Do work<br />&#125;<br />catch(Exception ex)<br />&#123;<br />  // Stop impersonating  ctx.Undo();<br />&#125;<br />finally<br />&#123;<br />  // Stop impersonating<br />  ctx.Undo();<br />&#125;</pre>\r\n  </p>\r\n  <p>By using a <b>finally</b> block, you ensure that the impersonation token is removed from the current thread whether an exception is generated or not. Also be aware that if your code fails to catch exceptions, a malicious user could use exception filters to execute code that runs under the impersonated security context. This is particularly serious if your code impersonates a privileged account.If your code does not catch the exception, exception filters higher in the call stack are executed before code in your <b>finally</b> block is executed.</p>\r\n  <blockquote>\r\n    <b>Note</b>&nbsp;&nbsp;Exception filters are supported by Microsoft Intermediate Language (MSIL) and Visual Basic .NET.<b></b></blockquote>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information, see <a href=\"http://msdn2.microsoft.com/en-us/library/ms998351.aspx\">How To: Use Impersonation and Delegation in ASP.NET</a>.</li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}