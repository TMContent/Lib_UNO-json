{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1909373708",
      "Content_Hash": "-1855894329"
    },
    "Metadata": [
      {
        "Id": [
          "8fb399eb-218c-4a50-9630-7dbf6d1ec088"
        ],
        "Id_History": [
          "8fb399eb-218c-4a50-9630-7dbf6d1ec088,263c4e67-fc32-4eec-9c0a-1bd34d86edda,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Application Logs to a Separate Protected Server"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Application Logs to a Separate Protected Server"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Ensure that&amp;nbsp;your application logs application events to a seperate protected server.</p>\n  <h1>Why</h1>\n  <p>This helps to ensure that attackers cannot tamper with logs.</p>\n  <h1>How to Check</h1>\n  <p>Review the web.config file for your application to ensure logs are being sent to a seperate server.&amp;nbsp;Use the following steps:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Make sure you are reviewing the correct config file. </strong>Look at both application-level web.config and machine-level web.config. Application-level settings override machine-level settings.</p>\n      <li>\n        <p>\n          <strong>Make sure&amp;nbsp;your application uses HealthMonitoring. </strong>If your application is using HealthMonitoring, you&amp;nbsp;should find a &lt;<strong>HealthMonitoring</strong>&gt; element in web.config with the&amp;nbsp;<strong>enabled </strong>attribute set to true: </p>\n        <pre>&lt;healthMonitoring heartbeatInterval=\"0\" enabled=\"true\"&gt;</pre>\n        <li>\n          <p>\n            <strong>Check for SqlWebEventProvider. </strong>Within the &lt;<strong>HealthMonitoring</strong>&gt; element, look for the &lt;<strong>Providers</strong>&gt; element configured to send events to the SqlWebEventProvider: </p>\n          <pre>&lt;providers&gt;<br />   &lt;add connectionStringName=\"MySqlConnection\"<br />      maxEventDetailsLength=\"1073741823\"<br />      buffer=\"true\"<br />      bufferMode=\"Extra Critical Notification\"<br />       name=\"MySqlWebEventProvider\"<br />       type=\"System.Web.Management.SqlWebEventProvider,System.Web,<br />&amp;#9;&amp;#9;Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a\" /&gt;<br />&lt;/providers&gt; </pre>\n          <li>\n            <p>\n              <strong>Check the&amp;nbsp;connection string. </strong>For the SqlWebEventProvider to work, there must be a valid connection string within web.config. Check the &lt;<strong>ConnectionStrings</strong>&gt; element to ensure the ConnectionStringName attribute value within the &lt;<strong>Providers</strong>&gt; element described above maps to a valid connection string instance. </p>\n            <li>\n              <p>\n                <strong>Check the remote server. </strong>Start the application and perform some functionality that will generate logs.&amp;nbsp;Check the remote server to ensure the logs show up.</p>\n            </li>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>Use the following steps to log to a seperate server:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Ensure your application uses Health Monitoring.&amp;nbsp; </strong>By default, health monitoring is enabled for ASP.NET applications. You can see the default configuration in the machine-level Web.config.comments file in the <b>&amp;#37;windir&amp;#37;\\Microsoft .NET\\Framework\\&amp;#123;version&amp;#125;\\CONFIG </b>configuration file directory. </p>\n      <li>\n        <p>\n          <strong>Configure SqlWebEventProvider. </strong>If you want to configure an event provider that writes to a SQL Server, for&amp;nbsp;instance, you must create the database used by the <strong>SqlWebEventProvider</strong>, configure a connection string, and configure a provider definition.</p>\n        <ol>\n          <li>\n            <p>Install the Web event database by running the following command from the Visual Studio 2005 command prompt:</p>\n            <p>\n              <b>aspnet_regsql.exe -E -S </b>&lt;<b>ServerName</b>&gt;<b> -A w</b></p>\n            <p>This command uses the following switches: </p>\n            <ul>\n              <li>\n                <b>-E</b> This switch indicates use of Windows authentication to connect to the database. <li><b>-S</b> &lt;<b>ServerName</b>&gt; This switch indicates the name of the server where the database will be installed or is already installed. <li><b>-A w </b>This switch indicates to add Web event support. This creates the relevant tables and stored procedures required by the <b>SqlWebEventProvider</b>. </li></li></li>\n            </ul>\n            <li>\n              <p>Create a SQL Server logon for your Web application's identity. For example, create a network service and then create a database user for this logon in the Aspnetdb database. </p>\n              <li>\n                <p>Grant the database user <b>execute</b> permission on the <b>aspnet_WebEvent_LogEvent</b> stored procedure. </p>\n                <li>\n                  <p />Add the following connection string to your application's Web.config file: <pre>&lt;connectionStrings&gt;<br />&amp;nbsp;&amp;nbsp; &lt;add name=\"MySqlConnection\" connectionString=\"Data Source=remotehost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\"/&gt;<br />&lt;/connectionStrings&gt;</pre><li><p>Add the following &lt;<b>providers</b>&gt; configuration within the &lt;<b>healthMonitoring</b>&gt; section in Web.config:</p><pre>&lt;providers&gt;<br />&amp;nbsp;&amp;nbsp; &lt;add connectionStringName=\"MySqlConnection\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxEventDetailsLength=\"1073741823\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; buffer=\"true\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bufferMode=\"Extra Critical Notification\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=\"MySqlWebEventProvider\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type=\"System.Web.Management.SqlWebEventProvider,System.Web,Version=2.0.0 .0,<br />Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a\"/&gt;<br />&lt;/providers&gt;</pre><p />The following list describes the most important attributes you can set when configuring event providers: <ul><li><b>name: </b>This is a name for the buffer mode used to reference it from other elements. <li><b>type:</b> This is a fully-qualified assembly reference to the provider class. This class should implement the <b>System.Configuration.Provider.ProviderBase</b> class. <li><b>buffer:</b> If you are using the <b>SqlWebEventProvider</b>, use this attribute to enable event buffering. If this attribute is <b>true</b>, you must configure the <b>bufferMode</b> attribute. The default value is <b>false</b>. <li><b>bufferMode:</b> If you are using the <b>SqlWebEventProvider</b>, use this attribute to specify the friendly name of the buffer mode to be used for buffering the events. <li><b>connectionStringName:</b> If you are using the <b>SqlWebEventProvider</b>, use this attribute to specify the friendly name of the connection string used for connecting to the SQL Server database. <li><b>maxEventDetailsLength:</b> This is the maximum length of the event details. </li></li></li></li></li></li></ul><blockquote><b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;If you want to use the <b>SqlWebEventProvider</b> to write to a local or remote SQL Server instance, use the Aspnet_regsql tool to configure the necessary database tables and roles.</blockquote></li></li>\n              </li>\n            </li>\n          </li>\n        </ol>\n      </li>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>An e-commerce site with a two-tier web server/database model is built using file-based logging, and each machine keeps its logs on local disk. When several of the web servers are compromised, the attackers wipe the logs and the owners are unable to determine how they got in. The attacks re-occur several times before the hole is finally found and patched.</p>\n  <h1>Solution Example</h1>\n  <p>An e-commerce site with a two-tier web server/database model is built using remote logging server with communication occuring over an encrypted channel.&amp;nbsp; When several of the web servers are compromised, the attackers are unable to break into the remote logging machine and cannot wipe the logs. The owners find the hole quickly thanks to the information in the log files, and the machines are patched immediately.</p>\n  <pre>&lt;healthMonitoring heartbeatInterval=\"0\" enabled=\"true\"&gt;<br /> &lt;providers&gt;<br />    &lt;add connectionStringName=\"MySqlConnection\"<br />       maxEventDetailsLength=\"1073741823\"<br />       buffer=\"true\"<br />       bufferMode=\"Extra Critical Notification\"<br />        name=\"MySqlWebEventProvider\"<br />        type=\"System.Web.Management.SqlWebEventProvider,System.Web,Version=2.0.0 .0,<br />&amp;#9;&amp;#9;Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a\"/&gt;<br />  &lt;/providers&gt;<br />&lt;/healthMonitoring&gt; </pre>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <div>\n        <a href=\"/article/bf02bb27-01e9-4968-847b-82fb74280b26\">Guideline: Put Logs on a Separate Server</a>\n      </div>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}