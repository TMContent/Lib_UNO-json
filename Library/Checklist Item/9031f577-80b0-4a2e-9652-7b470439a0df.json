{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1054577588",
      "Content_Hash": "1307533231"
    },
    "Metadata": [
      {
        "Id": [
          "9031f577-80b0-4a2e-9652-7b470439a0df"
        ],
        "Id_History": [
          "9031f577-80b0-4a2e-9652-7b470439a0df,21cc9434-6945-41e1-8f85-c49bbe6ddff1,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Access to the Credential Store Is Limited"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Access to the Credential Store Is Limited"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that access to the credential store is limited to administrators with the correct privileges. </p>\r\n  <h1>Why</h1>\r\n  <p>Unauthorized access to the credential store can lead to users' credentials being overwritten; therefore, allowing the attacker to gain access to application resources without obtaining valid credentials prior to the attack.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Follow these steps to ensure that the credential store is properly secured: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all routines that access the store. </strong>Locate all routines within your application that access the credential store. Such routines include:</p>\r\n      <ul>\r\n        <li>Authenticating users </li>\r\n        <li>Creating users </li>\r\n        <li>Modifying users </li>\r\n        <li>Changing user passwords</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that credentials for accessing the store are secured. </strong>Ensure that your application's access credentials and connection strings are not hard-coded into your application's code base. </p>\r\n      <ul>\r\n        <li>If your application <strong>uses a database</strong> for its credential repository, ensure that access credentials and connection strings are secured properly. </li>\r\n        <li>If your application <strong>does not use a database</strong> for its credential repository, verify that only the appropriate components of your application are able to access the credential store.<br /><br />Example of how <strong>not</strong> to handle access to the credential store: </li>\r\n      </ul>\r\n      <p />\r\n      <blockquote>\r\n        <pre>// The application discloses the credentials necessary for accessing the user database<br />DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());<br />Connection cn = DriverManager.getConnection(\"jdbc:oracle:thin:@testbox:1521:orcl2\", \"myapp\", \"pass\"); </pre>\r\n      </blockquote>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Check the access controls for your credential store.</strong> Ensure that your application's credential store has the appropriate security in place. For instance, if your application uses a database for its credential store, verify that the database server is secured properly.</p>\r\n    </li>\r\n  </ol>\r\n  <ol>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Follow these steps to limit the access to the credential store: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Avoid disclosing the location of the store. </strong>Do not disclose the location of the store within your application. Do not let&nbsp;regular application users know where the store is located. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Secure credentials required for accessing the store. </strong>Store your credentials within a configuration file and encrypt them. Place the encryption key within a keystore that is encrypted using a local account password.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Restrict access to repository. </strong>Limit the number of users that can access the store. If it is a file on the local file system, set the appropriate permissions to restrict the read/write access. If it is a database, restrict the accounts that can access the database server.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code authenticates a user based on their credentials. Because the code discloses the credentials to the user database, anybody with access to the code also has access to the credential store. </p>\r\n  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      boolean valid;<br />      Connection cn;<br /><br />      // Prepare credentials before querying the credential store<br />      ...<br />      try<br />      {<br />            // The application discloses the credentials necessary for<br />            // accessing the user database<br />            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());<br />            cn = DriverManager.getConnection(\"jdbc:oracle:thin:@testbox:1521:orcl2\",<br />                                             \"myapp\", \"pass\");<br />            // Query the credential store and perform the rest<br />            // of the authentication steps<br />            ...<br />      }<br />      catch (SQLException se)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br /><br />      return valid;<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code authenticates a user based on their credentials. The code relies on other parts of the application to handle database connectivity. Therefore, the code does not reveal the application's credentials to the credential store. </p>\r\n  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      boolean valid;<br />      // Prepare credentials before querying the credential store<br />      ...<br />      try<br />      {<br />            // The credentials to the application's user database<br />            // are not hard-coded in the authentication routine<br />            cn = MyApp.getDBConnection();<br />            // Query the credential store and perform the rest<br />            // of the authentication steps<br />            ...<br />      }<br />      catch (SQLException se)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />      return valid;<br />}</pre>\r\n  <br />"
        ]
      }
    ]
  }
}