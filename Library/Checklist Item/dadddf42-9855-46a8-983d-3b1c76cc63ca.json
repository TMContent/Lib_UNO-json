{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "690920857",
      "Content_Hash": "-333547730"
    },
    "Metadata": [
      {
        "Id": [
          "dadddf42-9855-46a8-983d-3b1c76cc63ca"
        ],
        "Id_History": [
          "dadddf42-9855-46a8-983d-3b1c76cc63ca,127c2140-c3bc-4c86-8836-a06600846782,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Multithreaded Code Does Not Cache the Results of Security Checks"
        ],
        "Category": [
          "Concurrency"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Multithreaded Code Does Not Cache the Results of Security Checks."
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Check to ensure that multithreaded code does not cache the results of security checks as it is vulnerable.</p>\n  <p />\n  <h1>How to Fix</h1>\n  <p>If your multithreaded code caches the results of a security check, perhaps in a static variable, the code is potentially vulnerable, as shown in the following example.</p>\n  <div>\n    <pre>public void AccessSecureResource()&amp;#123;<br />  callerOK = PerformSecurityDemand();<br />  OpenAndWorkWithResource();<br />  callerOK = false;<br />&amp;#125;<br />private void OpenAndWorkWithResource()&amp;#123;<br />  if (callerOK)<br />    PerformTrustedOperation();<br />  else<br />  &amp;#123;<br />    PerformSecurityDemand();<br />    PerformTrustedOperation();<br />  &amp;#125;<br />&amp;#125;</pre>\n  </div>\n  <p>If your code has other paths to <b>OpenAndWorkWithResource</b>, and a separate thread calls the method on the same object, it is possible for the second thread to omit the security demand because it encounters <b>callerOK=true</b>, set by another thread.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}