{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1230377398",
      "Content_Hash": "830330412"
    },
    "Metadata": [
      {
        "Id": [
          "6f9fefbf-ecdd-465a-a09c-0769166a3ce0"
        ],
        "Id_History": [
          "6f9fefbf-ecdd-465a-a09c-0769166a3ce0,8cb66210-fdc5-4760-90c9-b9e096185f5e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Processes Are Created Safely with CreateProcess()"
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Processes Are Created Safely with CreateProcess()"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;<li>Windows</li></li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Verify that processes are created safely.</p>\n  <h1>Why</h1>\n  <p>Improperly creating processes may allow an attacker to execute arbitrary code.</p>\n  <h1>How to Check</h1>\n  <p>Use the following steps to check if processes are created safely:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify code the creates processes.</strong> Search code for the following functions that may be used to create processes: <em>CreateProcess(), CreateProcessAsUser(), CreateProcessWithLogon(), ShellExecute(), ShellExecuteEx(), exec(), spawn().</em></p>\n      <li>\n        <p>\n          <strong>Verify that shell or CRT APIs are not used.</strong> Review code to make sure the following APIs are not used unless absolutely necessary:<em> ShellExecute(), ShellExecuteEx(), exec(), spawn()</em>.</p>\n        <li>\n          <p>\n            <strong>Verify that CreateProcess() is used with fully-qualified names.</strong> Review code to make sure that either <em>lpApplicationName</em> or <em>lpCommandLine</em> is fully-qualified in calls to <em>CreateProcess(), CreateProcessAsUser(), or CreateProcessWithLogon()</em>.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>Perform the following actions to create processes securely:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify code the creates processes.</strong> Search code for the following functions that may be used to create processes: <em>CreateProcess(), CreateProcessAsUser(), CreateProcessWithLogon(), ShellExecute(), ShellExecuteEx(), exec(), spawn()</em>.</p>\n      <li>\n        <p>\n          <strong>Replace shell and CRT APIs with base APIs.</strong> Shell APIs and CRT functions all wrap <em>CreateProcess()</em> at some point while adding additional threats. Use <em>CreateProcess()</em> as often as possible. Shell and CRT APIs are: <em>ShellExecute(), ShellExecuteEx(), exec(), spawn()</em>.</p>\n        <li>\n          <p>\n            <strong>Use fully qualified paths with CreateProcess().</strong> Either <em>lpApplicationName</em> or <em>lpCommandLine</em> should be fully qualified. If neither of them are fully-qualified, an attacker may place an executable with the same name as the one being launched by <em>CreateProcess()</em> into the current folder and <em>CreateProcess()</em> will run it instead.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/2314618a-47ce-4ff0-9641-365fb3e262e4\">Create Processes Securely with CreateProcess()<br /></a>\n    </li>\n  </ul>"
        ]
      }
    ]
  }
}