{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2017093455",
      "Content_Hash": "613330835"
    },
    "Metadata": [
      {
        "Id": [
          "e75f4a58-8ee4-4fda-8ed0-2be0a8a337cf"
        ],
        "Id_History": [
          "e75f4a58-8ee4-4fda-8ed0-2be0a8a337cf,d16200a7-f8ab-43c2-9a77-7da29974b3ca,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Locks Are Used with Mutexes to Avoid Deadlocks"
        ],
        "Category": [
          "Concurrency"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Locks Are Used with Mutexes to Avoid Deadlocks"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that locks are used with mutexes, instead of manual locking and unlocking.</p>\r\n  <h1>Why</h1>\r\n  <p>Using std::lock_guard makes it simpler to prevent deadlocks, because it unlocks mutexes automaticaly when a function exits.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to check if locks are used with mutexes:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Locate mutexes.</strong> Search code for declarations of std::mutex objects and their subsequent use to make sure mutexes are being used.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that locks are used.</strong> Locate functions that use mutexes and make sure they use std::lock_guard instead of calling lock() and unlock().</p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Perform the following actions to use locks with mutexes:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify unsafe code. </strong>Search for code that manually locks and unlocks mutexes by calling lock() and unlock() functions.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Add locks.</strong> Add locks to functions that manuall lock() and unlock() mutexes by declaring them in a manner such as const std::lock_guard&lt;std::mutex&gt;(mutex);</p>\r\n        <li>\r\n          <p>\r\n            <strong>Remove old code.</strong> Remove calls to lock() and unlock() from the functions where a lock is now being used.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following example, a lock is being used with the mutex. Notice that nothing else is necessary to assure concurrency when using a lock. Yes, it really is that simple.</p>\r\n  <pre>static std::mutex mutex;</pre>\r\n  <pre>void function()&#123;</pre>\r\n  <pre>  const std::lock_guard&lt;std::mutex&gt;(mutex);</pre>\r\n  <pre>  //do stuff<br />&#125;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about using locks with mutexes, please see <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.&#43;Use&#43;lock&#43;classes&#43;for&#43;mutex&#43;management\">https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.&#43;Use&#43;lock&#43;classes&#43;for&#43;mutex&#43;management</a></li>\r\n  </ul>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/41b5df05-32be-44df-93b6-f3cb4117f676\">Use Locks with Mutexes to Avoid Deadlocks</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}