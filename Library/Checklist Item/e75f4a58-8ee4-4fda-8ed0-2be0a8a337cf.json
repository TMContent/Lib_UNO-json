{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2017093455",
      "Content_Hash": "613330835"
    },
    "Metadata": [
      {
        "Id": [
          "e75f4a58-8ee4-4fda-8ed0-2be0a8a337cf"
        ],
        "Id_History": [
          "e75f4a58-8ee4-4fda-8ed0-2be0a8a337cf,d16200a7-f8ab-43c2-9a77-7da29974b3ca,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Locks Are Used with Mutexes to Avoid Deadlocks"
        ],
        "Category": [
          "Concurrency"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Locks Are Used with Mutexes to Avoid Deadlocks"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* C++\r\n\r\n\r\n## What to Check For ##\r\n\r\nVerify that locks are used with mutexes, instead of manual locking and unlocking.\r\n\r\n\r\n## Why ##\r\n\r\nUsing `std::lock_guard` makes it simpler to prevent deadlocks, because it unlocks mutexes automaticaly when a function exits.\r\n\r\n\r\n## How to Check ##\r\n\r\nUse the following steps to check if locks are used with mutexes:\r\n\r\n1. **Locate mutexes.** Search code for declarations of `std::mutex` objects and their subsequent use to make sure mutexes are being used.\r\n\r\n2. **Verify that locks are used.** Locate functions that use mutexes and make sure they use `std::lock_guard` instead of calling `lock()` and `unlock()`.\r\n\r\n\r\n## How to Fix ##\r\n\r\nPerform the following actions to use locks with mutexes:\r\n\r\n1. **Identify unsafe code.** Search for code that manually locks and unlocks mutexes by calling `lock()` and `unlock()` functions.\r\n\r\n2. **Add locks.** Add locks to functions that manually `lock()` and `unlock()` mutexes by declaring them in a manner such as `const std::lock_guard<std::mutex>(mutex);`\r\n\r\n3. **Remove old code.** Remove calls to `lock()` and `unlock()` from the functions where a lock is now being used.\r\n\r\n\r\n## Solution Example ##\r\n\r\nIn the following example, a lock is being used with the mutex. Notice that nothing else is necessary to assure concurrency when using a lock. Yes, it really is that simple.\r\n\r\n    static std::mutex mutex;\r\n    \r\n    void function(){\r\n    \r\n    const std::lock_guard<std::mutex>(mutex);\r\n    \r\n    //do stuff\r\n    }\r\n\r\n\r\n## Additional Resources ##\r\n\r\n* For more information about using locks with mutexes, see [https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management](https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management)\r\n"
        ]
      }
    ]
  }
}