{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-502493572",
      "Content_Hash": "414075719"
    },
    "Metadata": [
      {
        "Id": [
          "71b6e5f2-d236-43b1-8b6c-bd6b3d144899"
        ],
        "Id_History": [
          "71b6e5f2-d236-43b1-8b6c-bd6b3d144899,fda18d46-1dad-4632-9c95-2270d45bc25c,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "The ISerializable Interface Or the NonSerialized Attribute Are Used to Control Serialization of Sensitive Data."
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "The ISerializable Interface Or the NonSerialized Attribute Are Used to Control Serialization of Sensitive Data."
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Check to ensure that your application avoids serializing the fields in the classes that contain the sensitive data.</p>\r\n  <p />\r\n  <h1>How to Fix</h1>\r\n  <p>Either implement <b>ISerializable</b> to control the serialization behavior or decorate fields that contain sensitive data with the &#91;<b>NonSerialized</b>&#93; attribute. By default, all private and public fields are serialized. This is important because serialization places the data in memory, often in preparation for sending it over a network, making it easier for an attacker to gain access to it.</p>\r\n  <p>The following example shows how to use the <b>&#91;NonSerialized&#93;</b> attribute to ensure that a specific field which contains sensitive data cannot be serialized.</p>\r\n  <div>\r\n    <pre> &#91;Serializable&#93;public class Employee<br /> &#123;<br />  // OK for name to be serialized  private string name;<br />  // Prevent salary being serialized<br /> &#91;NonSerialized&#93;<br /> private double annualSalary;<br />  . . .<br />&#125;</pre>\r\n  </div>\r\n  <p>Alternatively, implement the <b>ISerializable</b> interface and explicitly control the serialization process. If you must serialize the sensitive item or items of data, consider encrypting the data first. The code that de-serializes your object must have access to the decryption key.</p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}