{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1816172112",
      "Content_Hash": "-907942304"
    },
    "Metadata": [
      {
        "Id": [
          "d898d2a2-f20a-45bb-b232-6713cb618de8"
        ],
        "Id_History": [
          "d898d2a2-f20a-45bb-b232-6713cb618de8,f9d3692a-b0ac-4140-9d87-12f349a06a04,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "All Output Data Is Encoded"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "All Output Data Is Encoded"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "1"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that input is not echoed back to the user without first validating and/or encoding the data. Data which can be modified by a user must be treated as untrusted data.</p>\r\n  <h1>Why</h1>\r\n  <p>Echoing input directly back to the user makes your application susceptible to some code injection attacks, such as the Cross Site Scripting Attack. What constitutes malicious input varies widely depending on the system in question. On the web, it normally means some kind of JavaScript.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to ensure that input which can be modified by a user is properly validated and encoded before being echoed back to the user:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sources of user input.</strong> At design time and again at the code review stage during development, determine all the possible tainted inputs to the application. Determine the intended characteristics of each input (length, format, etc.) and create validators for them. The following list includes some common input sources:</p>\r\n      <ul>\r\n        <li>Form Fields </li>\r\n        <li>Query strings </li>\r\n        <li>Databases and data access methods </li>\r\n        <li>Cookie collection </li>\r\n        <li>Session and application variables</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all output that includes user input.</strong> At design time and again at the code review stage during development, trace all inputs to the system though and determine all of the places where they may be output. In each case, identify the context in which the output occurs.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure all user-controllable data is properly encoded before being sent as output.</strong> In each location where data is output, it must be encoded according the the context of the output.</p>\r\n      <ul>\r\n        <li>Do not rely on the <strong>Server.HtmlEncode</strong> function to protect your application against cross-site scripting attacks.</li>\r\n        <li>Do not attempt to use a character block list; when taking into account Unicode characters, etc., along with new emerging attack forms, block lists are guaranteed to be ineffective. </li>\r\n        <li>Ensure that allow list encoding is performed so that all non-alphanumeric characters are encoded instead of certain specific characters like '&lt;', '&gt;, etc. </li>\r\n        <li>Encoding must be selected appropriately based upon how the output is returned to the client- either as HTML content or in a URL. Verify the context in which the output is used and ensure it is properly encoded. </li>\r\n        <li>If you are using the Microsoft Anti-Cross Site Scripting Library, ensure that the <strong>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</strong> method is being used to encode HTML tags and their attributes. Similarly, in case your application constructs certain URLs from input data or data from a shared database, ensure that the <strong>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</strong> method is being used to make them safe. </li>\r\n        <li>Make sure that you encode data at the last possible opportunity before the data is returned to the client. If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into. Also, early encoding of some data can result in double encoding problems.</li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <p>If data is being written out into an HTML context, the following code will ensure that only known safe characters get through and guard against all possible XSS attacks. It will increase the size of the resulting HTML and does require more processing overhead, but it is definitely safe:</p>\r\n  <pre>public static string HtmlEncode(string x){<br />  if (x == null)<br />  {<br />      return x;<br />  }<br />  return Regex.Replace(x, \"[^a-zA-Z0-9]+\", new MatchEvaluator(WebUtility.EncodeMatch));<br />}</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>As it uses user input directly from the query string, the following ASP.NET code is vulnerable:</p>\r\n  <pre>&lt;img id='img&lt;%=Server.HtmlEncode(Request.QueryString[\"userId\"]) %&gt;' src='/image.gif' /&gt;</pre>\r\n  <p>Since this page does not encode the output which depends upon the user supplied query string parameter <strong>userID</strong>, malicious user input will lead to cross site scripting attacks.</p>\r\n  <p>\r\n    <strong>Note:</strong> While simple XSS attacks will not work for this webpage as ASP.NET enables request validation by default, many more complex attack will be successful. <br /></p>\r\n  <h1>Related Guideline</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/d6ae90bf-1b44-4a89-b22e-55ea97e52ba5\">Guideline: Encode All Output Data (ASP.NET)</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}