{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1152465263",
      "Content_Hash": "1179424205"
    },
    "Metadata": [
      {
        "Id": [
          "7401862f-ae81-4f31-9340-981b0ec5a854"
        ],
        "Id_History": [
          "7401862f-ae81-4f31-9340-981b0ec5a854,a684e543-8cf6-48d7-bd72-2043dc5183e4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Strong Passwords Are Enforced"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Strong Passwords Are Enforced"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that your application enforces strong passwords. </p>\r\n  <h1>Why</h1>\r\n  <p>Enforcing strong passwords minimizes the risk of a Credentials Dictionary Attack or guessing another user's password.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to ensure that your application enforces strong passwords: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify password management routines. </strong>Locate all routines inside your application that are responsible for managing user passwords. Potential areas to examine within your application include:</p>\r\n      <ul>\r\n        <li>Modifying accounts </li>\r\n        <li>Creating new users </li>\r\n        <li>Changing passwords</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Review your application's password policy. </strong>Verify that your application provides a password policy. Ensure that the password policy addresses the following considerations that define a strong password:</p>\r\n      <ul>\r\n        <li>\r\n          <strong>Length</strong>: The policy provides length requirements for passwords. For example, require that a password must be at least 10 characters long. </li>\r\n        <li>\r\n          <strong>Input Set</strong>: The policy provides requirements regarding the input set of passwords. For instance, a password must contain letters, numbers and special characters. If your organization has special restrictions for passwords,&nbsp;verify that&nbsp;the policy adopts these requirements. For example, require that a password must not match the user's&nbsp;six previous passwords. </li>\r\n        <li>\r\n          <strong>Expiration</strong>: The policy provides requirements for a password's lifetime. For example, require that a password will expire after 45 days.&nbsp; </li>\r\n        <li>\r\n          <strong>Extra Requirements</strong>:&nbsp;Enumerate&nbsp;extra policy requirements for passwords, such as&nbsp;a password must not be trivial and easily guessed.</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that the password policy is enforced. </strong>Ensure that your application has implemented the password policy. Verify that all password management routines execute your application's implementation of the password policy before executing their own functionality. Example:</p>\r\n      <pre>public void addUser(String user, char[] pass) throws AddUserException<br /><br /><br />{<br />      String salt = MyApp.generateSalt();<br />      String passHash;<br />      Connection cn;<br />      PreparedStatement st;<br />      // The application verifies that the given<br />      // password meets the password requirements<br />      if (!goodPassword(pass))<br />      {<br />            String errMsg = \"User's password does not meet the password requirements\";<br />            throw new AddUserException(errMsg);<br />      }<br />      ...<br /> }</pre>\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    <strong>Note:</strong> PCI DSS requirements state that passwords should be at least seven characters long, have both letters and numbers and&nbsp;should expire after no more than 90 days.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>What constitutes a strong password varies from organization to organization; however, there are minimum requirements for length and input character sets. Minimum requirements for a strong password are:</p>\r\n  <ul>\r\n    <li>The password must be at least 10 characters long. </li>\r\n    <li>It must contain letters, numbers, and special characters.</li>\r\n  </ul>\r\n  <p>The following steps are required for enforcing strong passwords:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Define password requirements. </strong>Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).</p>\r\n    </li>\r\n    <li>\r\n      <strong>Enforce password requirements. </strong>The password requirements should be enforced while creating and modifying accounts. </li>\r\n    <li>\r\n      <p>\r\n        <strong>Enforce password lifetime. </strong>Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes.</p>\r\n      <p>Additionally users might be asked to not use previously used passwords. The following example illustrates checking if the user has used the new password in her&nbsp;six previous password changes:</p>\r\n      <pre>select passDigest from<br />   (select passDigest from passHistory<br />    where userID = 'jill' and rownum &lt; 7<br />    order by passID desc)<br />    where passDigest = {{pass digest}};</pre>\r\n      <p>If the query returns a result, then the user has used the password as one of her last passwords. Because the table contains important user information, it should be treated with the same security measures as the user repository.<br /><br /><strong>Note</strong>: The statement above uses Oracle syntax. Please consult your database manual if you use different database engine.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code creates a new user to the application. It stores the username and password into the credential repository. Unfortunately, the password is not being verified against a password policy.</p>\r\n  <pre>public void addUser(String user, char[] pass)<br />{<br />      // Check if user exists in the user database<br />      // The application fails to check that the<br />      // given password meets the password policy<br />      // Add user to the application's user database<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code adds a new user to the application. Before it stores the user's credentials into the repository, it verifies that the password meets the application's password requirements.</p>\r\n  <pre>public void addUser(String user, char[] pass)<br />{      <br />      // Check if user exists in the user database<br />      // The application verifies that the given<br />      // password meets the password requirements<br />      if (!goodPassword(pass))<br />      {<br />            String errMsg = \"User's password does not meet\"<br />                           + \" the password requirements\";<br />            throw new AddUserException(errMsg);<br />      }<br /><br />      // Add user to the application's user database<br />      ...<br />}<br /><br /><br />public boolean goodPassword(char[] pass)<br />{<br />      boolean alpha = false;<br />      boolean num = false;<br />      boolean sp = false;<br /><br />      if (pass.length &lt; 10)<br />      {<br />            return false;<br />      }<br /><br />      for (int i = 0; i &lt; pass.length; i++)<br />      {<br />            if (!alpha && Character.isLetter(pass[i]))<br />            {<br />                  alpha = true;<br />            }<br /><br />            if (!num && Character.isDigit(pass[i]))<br />            {<br />                  num = true;<br />            }<br /><br />            if (!sp && (pass[i] == '!' ||<br />                  pass[i] == '@' || pass[i] == '#' ||<br />                  pass[i] == '$' || pass[i] == '%' ||<br />                  pass[i] == '^'))<br />            {<br />                  sp = true;<br />            }<br />      }<br /><br />      return (alpha & num) & sp;<br />}</pre>\r\n  <br />"
        ]
      }
    ]
  }
}