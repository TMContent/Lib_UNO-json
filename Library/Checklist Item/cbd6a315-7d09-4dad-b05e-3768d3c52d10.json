{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1459876340",
      "Content_Hash": "1822172922"
    },
    "Metadata": [
      {
        "Id": [
          "cbd6a315-7d09-4dad-b05e-3768d3c52d10"
        ],
        "Id_History": [
          "cbd6a315-7d09-4dad-b05e-3768d3c52d10,f3ff76b4-2958-4154-8a3c-6cc0aae8f959,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "The Exposure of Secrets in Memory Is Minimized"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "The Exposure of Secrets in Memory Is Minimized"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Verify that the exposure of secrets in memory is minimized.</p>\n  <h1>Why</h1>\n  <p>Clear text secrets held in your process address space are vulnerable if an attacker is able to probe your application's address space. Also, if the page of memory containing the secret is swapped out to the page file, the secret data is vulnerable if someone gains access to the page file. Similarly, clear text secrets held in memory appear in the crash dump file if a process crashes.</p>\n  <h1>How to Check</h1>\n  <p>Use the following steps to verify that the exposure of secrets in memory is minimized:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify secrets.</strong> Identify sensitive information handled by your application.</p>\n      <li>\n        <p>\n          <strong>Review code.</strong> Identify application code that handles sensitive data in your application.</p>\n        <li>\n          <p>\n            <strong>Check if secrets are encrypted.</strong> Verify that code encrypts secrets stored in memory, only decrypts them when necessary, and deletes the unencrypted versions from memory immediately after use.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>To minimize the exposure of secrets in memory, consider the following measures: </p>\n  <ol>\n    <li>\n      <p>\n        <strong>Avoid creating multiple copies of the secret.</strong> Having multiple copies of the secret data increases your attack surface. Pass references to secret data instead of making copies of the data. </p>\n      <li>\n        <p>\n          <strong>Keep the secret encrypted for as long as possible.</strong> Decrypt the data at the last possible moment before you need to use the secret. </p>\n        <li>\n          <p>\n            <strong>Clean the clear text version of the secret as soon as you can.</strong> Replace the clear text copy of the secret data with zeros as soon as you have finished with it.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/53c570b1-0628-404e-ae77-7045b05d6f33\">Minimize the Exposure of Secrets in Memory</a>\n    </li>\n  </ul>"
        ]
      }
    ]
  }
}