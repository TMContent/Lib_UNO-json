{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1135052223",
      "Content_Hash": "15474628"
    },
    "Metadata": [
      {
        "Id": [
          "a61487db-d1e1-4304-89b1-44bb8c88b1e3"
        ],
        "Id_History": [
          "a61487db-d1e1-4304-89b1-44bb8c88b1e3,a5256e2d-27bd-4915-8e41-c36ea3b7bfa9,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Validate JNI Data"
        ],
        "Category": [
          "Unmanaged Code"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "All Data Passed Between Native And Java Code Is Validated"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following segment shows a JNI code that utilizes a COM object. Making the assumption that the Java code will handle data validation, the JNI segment does not verify that the passed input is a valid GUID. Since invalid GUIDs may cause unhandled exceptions, an attacker can force the application to disclose its call stack and possibly its source filenames.\r\n\r\n~~~~\r\n#include <jni.h>\r\n#include <sys/types.h>\r\n#include <fcntl.h>\r\n#include <stdio.h>\r\n#include <atlbase.h>\r\n#include <windows.h>\r\n#include <wtypes.h>\r\nJNIEXPORT jboolean\r\nJNICALL Java_Identifier_invokeObject\r\n      (JNIEnv * env, jobject jobj, jstring jguid)\r\n{\r\n      HRESULT result;\r\n      CLSID clsid;\r\n      IUnknown *pIunkn;\r\n      LPWSTR guid;\r\n      jboolean iscopy;\r\n      jboolean ret = false;\r\n      char* temp_guid = (*env)->GetStringUTFChars(env, jguid, &iscopy);\r\n      //The application fails to verify that the GUID is valid\r\n      guid = SysAllocStringLen(0, 38);\r\n      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);\r\n      result = GUIDFromString(guid, &clsid);\r\n      ...\r\n      return ret;\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following segment shows a JNI code that utilizes a COM object. Because the passed input is validated as being a GUID, the application reduces the risk of unhandled exceptions.\r\n\r\n~~~~\r\n#include <jni.h>\r\n#include <sys/types.h>\r\n#include <fcntl.h>\r\n#include <stdio.h>\r\n#include <atlbase.h>\r\n#include <windows.h>\r\n#include <wtypes.h>  \r\nJNIEXPORT jboolean \r\nJNICALL Java_Identifier_invokeObject\r\n      (JNIEnv * env, jobject jobj, jstring jguid)\r\n{\r\n      HRESULT result;\r\n      CLSID clsid;\r\n      IUnknown *pIunkn;\r\n      LPWSTR guid;\r\n      jboolean iscopy;\r\n      jboolean ret = false;\r\n      char* temp_guid = (*env)->GetStringUTFChars(env, jguid, &iscopy);\r\n      // The application verifies that the input matches the criteria for a GUID\r\n      if(!validGUID(temp_guid))\r\n      {\r\n            return ret;\r\n      }\r\n      guid = SysAllocStringLen(0, 38);\r\n      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);\r\n      result = GUIDFromString(guid, &clsid);\r\n       ...\r\n      return ret;\r\n}\r\n\r\nbool validGUID(char *guid)\r\n{\r\n      // Check that GUID is of right length\r\n      if(strlen(guid) != 38) return false;\r\n      // Sample GUID: {1EF4A023-143A-4e0e-AD72-69C2C68C2D70\r\n}\r\n      if(guid[0]  != '{') return false;\r\n      if(guid[9]  != '-') return false;\r\n      if(guid[14] != '-') return false;\r\n      if(guid[19] != '-') return false;\r\n      if(guid[24] != '-') return false;\r\n      if(guid[37] != '}') return false;\r\n      int i=1;\r\n      while(i<37)\r\n      {\r\n            if((guid[i] >= 'a' && guid[i] <= 'f')\r\n                  || (guid[i] >= 'A' && guid[i] <= 'F')\r\n                  || (guid[i] >= '0' && guid[i] <= '9')\r\n            {\r\n                  // GUID is valid\r\n            }\r\n            else\r\n            {\r\n                  return false;\r\n            }\r\n            i++;\r\n            if(i == 9 || i == 14 || i == 19 || i == 24)\r\n            {\r\n                  i++;\r\n            }\r\n      }\r\n\r\n      return true;\r\n}\r\n~~~~\r\n"
        ]
      }
    ]
  }
}