{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-185590267",
      "Content_Hash": "2013046759"
    },
    "Metadata": [
      {
        "Id": [
          "4d3f994b-3be7-4e3d-8183-e213612cf5c4"
        ],
        "Id_History": [
          "4d3f994b-3be7-4e3d-8183-e213612cf5c4,ab1f9c5a-cb9e-4552-b2ca-479b9fc0ef78,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "A Global Exception Handler Is Used for Unhandled Exceptions"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "A Global Exception Handler Is Used for Unhandled Exceptions"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASP.NET 3.5"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<br />\r\n  <h1>What to Check For</h1>\r\n  <p>A global exception handler is used to catch any unhandled exceptions. A global exception handler improves the application's robustness and minimizes the risk of information disclosure.</p>\r\n  <h1>Why</h1>\r\n  <p>Unhandled exceptions can be a serious stumbling block to an application's performance and security. Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to verify a global exception handler is used for unhandled exceptions:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that the application defines a global error handler in Global.asax</strong> to catch any exceptions that are not handled in code. The following code gives an example of how this might be done:</p>\r\n      <pre>&lt;%@ Application Language=\"C#\" %&gt;<br />&lt;%@ Import Namespace=\"System.Diagnostics\" %&gt;<br /> &lt;script language=\"C#\" runat=\"server\"&gt;<br /> void Application_Error(object sender, EventArgs e) {<br />     // Add the appropriate logging code<br />        Response.Write(\"We are sorry, but we cannot complete your request. Please try again later!\");<br />    Server.ClearError();<br />}<br /> &lt;/script&gt;</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that all exceptions are logged in the application event log.</strong> While testing the application, analyze the event log regularly, looking for unhandled exceptions.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>An ASP.NET application has code to connect to a SQL database. However, the application does not have a generic error handler specified. As a result, when the connection times out application details are revealed to the client in the exception: </p>\r\n  <p>\r\n    <strong>Description:</strong> An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.</p>\r\n  <p>\r\n    <strong>Exception Details:</strong> System.Data.SqlClient.SqlException: An error has occurred while establishing a connection to the server. When connecting to SQL Server, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)</p>\r\n  <p>\r\n    <strong>Source Error:</strong>\r\n  </p>\r\n  <table>\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          <pre>Line 216:<br />Line 217:            if (conn.State != ConnectionState.Open)<br />Line 218:                conn.Open();<br />Line 219:<br />Line 220:            cmd.Connection = conn;</pre>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about creating custom errors in ASP.NET, visit <a href=\"http://support.microsoft.com/kb/306355\">http://support.microsoft.com/kb/306355</a></li>\r\n  </ul>\r\n  <h1>Related Guideline</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/33a894ce-2061-4741-be92-1d063c9cf057\">Guideline: Use a Global Exception Handler for Unhandled Exceptions (ASP.NET)</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}