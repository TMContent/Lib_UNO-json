{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1923847463",
      "Content_Hash": "-335717791"
    },
    "Metadata": [
      {
        "Id": [
          "ffc885ad-2250-462f-b42e-497e22966f5c"
        ],
        "Id_History": [
          "ffc885ad-2250-462f-b42e-497e22966f5c,bc4f6ad9-88ea-4e4b-888a-428bf0d1538c,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Debug Assertions Are Not Used for Error Handling"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Debug Assertions Are Not Used for Error Handling"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <p>C&#43;&#43;</p>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that debug assertions are not used for error handling.</p>\r\n  <h1>Why</h1>\r\n  <p>Debug assertions are compiled out of production code, so they should not be relied on for error handling in a production environment.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Search code for the \"assert\" operator. Verify that assertions are not used for error handling.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>Identify code that uses the \"assert\" operator. Rewrite code to implement functional error handling without using the debug assertion.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following example, the read API is called and then the return value is checked for errors in an assertion. </p>\r\n  <pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />&nbsp; //first read from the socket<br />&nbsp; int ret = read(socket, recvBuffer, len, 0);<br />&nbsp; assert(ret &gt;= 0)<br />&nbsp; return parseBuffer(recvBuffer, len);<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following example, the read API is called and then the return value is checked for errors. </p>\r\n  <pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />&nbsp; //first read from the socket<br />&nbsp; int ret = read(socket, recvBuffer, len, 0);<br />&nbsp; if (ret &gt;= 0)<br />&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //now parse the buffer<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return parseBuffer(recvBuffer, len);<br />&nbsp; &#125;<br />&nbsp; else<br />&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //can call WSAGetLastError if we need error details<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp; &#125;<br />&#125;</pre>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/b2050dca-6329-4360-b218-070305fe6890\">Do Not Use Asserts for Error Handling</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}