{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1161466432",
      "Content_Hash": "21926121"
    },
    "Metadata": [
      {
        "Id": [
          "a4e7f10a-b051-43d6-8bc3-3495773450b8"
        ],
        "Id_History": [
          "a4e7f10a-b051-43d6-8bc3-3495773450b8,8ca4cdc3-84ba-4e99-90a7-5c61bf69f67c,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Type Safe SQL Parameters Are Used"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Type Safe SQL Parameters Are Used"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "1"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that type-safe parameters are used when constructing dynamic SQL queries or when passing parameters to stored procedures.</p>\r\n  <h1>Why</h1>\r\n  <p>If you use the Parameters collection, SQL treats the input is as a literal value rather then as executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception.</p>\r\n  <p>If type-safe SQL parameters are not used, attackers might be able to execute injection attacks that are embedded in the unfiltered input.</p>\r\n  <h1>How to Check</h1>\r\n  <p>To check if parameterized queries are used:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all database transactions. </strong>Locate all SQL queries throughout your application. Example:</p>\r\n      <pre>\"select user from myappUsers where user = ? and pass = ?;\"</pre>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that each transaction uses Stored Procedures where possible. </strong>Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:</p>\r\n        <pre>SqlCommand myCommand = new SqlCommand(\"sp_SelectUser\", myConnection);<br />//Specify our command is a stored procedure<br />myCommand.CommandType = CommandType.StoredProcedure; </pre>\r\n        <p>and not like:</p>\r\n        <pre>string SQLstr = \"SELECT &amp;#42; from users<br />&amp;#9; WHERE username = '\" &amp;#43; un.Text &amp;#43; \"'<br />&amp;#9; AND password = '\" &amp;#43; pass.Text &amp;#43; \"'\";<br />SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);</pre>\r\n        <li>\r\n          <p>\r\n            <strong>Verify that type-safe parameters are used. </strong>Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:</p>\r\n          <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />&amp;#123;<br />  connection.Open();<br />  SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />         \"SELECT &amp;#42; from users WHERE username = '&amp;#64;uname' AND password = '&amp;#64;pwd'\", connection);<br />  myCommand.SelectCommand.Parameters.Add(\"&amp;#64;uname\", SqlDbType.VarChar, 24);<br />  myCommand.SelectCommand.Parameters.Add(\"&amp;#64;pwd\", SqlDbType.VarChar, 16);<br />  myCommand.SelectCommand.Parameters&amp;#91;\"&amp;#64;uname\"&amp;#93;.Value = un.Text;<br />  myCommand.SelectCommand.Parameters&amp;#91;\"&amp;#64;pwd\"&amp;#93;.Value = pass.Text;<br />  myDataAdapter.Fill(userDataset);  ...  connection.Close();<br />&amp;#125;</pre>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application created an SQL SELECT query to accomplish said task:</p>\r\n  <pre>using (SqlConnection myConnection = new SqlConnection(connectionString))<br />&amp;#123;<br />  connection.Open();<br />  string SQLstr = \"SELECT &amp;#42; from users WHERE username = '\" &amp;#43; un.Text &amp;#43; \"'<br />&amp;#9; AND password = '\" &amp;#43; pass.Text &amp;#43; \"'\";<br />  SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);<br />  SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);<br />  myCommand.Connection.Open();<br />  SqlDataReader myReader = myCommand.ExecuteReader();<br />  ...<br />&amp;#125;</pre>\r\n  <p>In the preceding example, the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:</p>\r\n  <pre>mjones' AND 1=1; -- </pre>\r\n  <p>This will result in the SQL statement being executed at the database level:</p>\r\n  <pre>SELECT &amp;#42; from users WHERE username = 'mjones' AND 1=1; --'  AND password = '1234';</pre>\r\n  <p>This will allow the person entering data into the dialog box to select the account details of mjones without the correct password.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about SQL injection, see: <a href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL Injection</a> in Wikipedia. <li>To learn more about countering SQL injection in ASP.NET, visit: <a href=\"http://msdn2.microsoft.com/en-us/library/ms998271.aspx\">How To: Protect From SQL Injection in ASP.NET</a>. <li>To learn more about countering injection-based attacks in ASP.NET, see: <a href=\"http://msdn2.microsoft.com/en-us/library/bb355989.aspx\">How To: Protect From Injection Attacks in ASP.NET</a>.</li></li></li>\r\n  </ul>\r\n  <h1>Related Guideline</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/4be4ed09-ed2f-4f05-9e63-e20708807542\">Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}