{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1369137134",
      "Content_Hash": "-1706834572"
    },
    "Metadata": [
      {
        "Id": [
          "485451e1-c9c0-48a0-a832-05e3190ada79"
        ],
        "Id_History": [
          "485451e1-c9c0-48a0-a832-05e3190ada79,694c2bbe-d412-4b28-b4d2-d5b6809ae238,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Accounts Are Locked After Consecutive Failed Login Attempts"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Accounts Are Locked After Consecutive Failed Login Attempts"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Ensure that accounts will be locked after consecutive failed login attempts.</p>\r\n  <h1>Why</h1>\r\n  <p>Multiple consecutive failed authentication attempts over a short period of time are an indication of a brute force attack on that account. Locking the account prevents an attacker from compromising and accessing the account at the expense of a potential denial of service condition for the legitimate account owner.</p>\r\n  <h1>How To Check</h1>\r\n  <p>Take the following steps to ensure your application will lock out an account after consecutive failed login attempts:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Verify your application has a lockout policy. </strong>An account lockout policy is typically application specific. Review your application's requirements and design specifications. Check for the following basic functionality:</p>\r\n      <ul>\r\n        <li>A mechanism for determining failed authentication attempts </li>\r\n        <li>A mechanism for locking accounts that have exceeded the maximum number of allowed authentication attempts </li>\r\n        <li>A mechanism for unlocking accounts that have exceeded the maximum number of allowed authentication attempts</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure your application enforces the lockout policy. </strong>Ensure that all authentication procedures implement your application's lockout policy. Verify that the implementation matches the lockout policy as the business requirements of your organization may change over time. If your application uses the ASP.NET membership providers, verify that the following attributes are set in your provider's configuration:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>maxInvalidPasswordAttempts</strong>: Ensure that the maximum number of authentication attempts before an account is locked out is specified.</p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>passwordAttemptWindow</strong>: Ensure that the time period that identifies a login attempt window is specified in minutes.</p>\r\n        </li>\r\n        <li>\r\n          <p />\r\n          <strong>passwordAnswerAttemptLockoutDuration</strong>: If supported by the membership provider, such as ActiveDirectoryMembershipProvider, ensure that the duration of an account lockout is specified. Setting a duration for the lockout can foil brute-force attackers while preventing legitimate users from getting locked out of their accounts for long periods of time.<p />Example:<pre><membership defaultprovider=\"SqlProvider\" userisonlinetimewindow=\"30\">&nbsp; <br />&nbsp; <providers>&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; <add name=\"MyAppMembershipProvider\" _26_nbsp3b_26_nbsp3b_26_nbsp3b_26_nbsp3b_26_nbsp3b_=\"\"></add><br />&nbsp;&nbsp;&nbsp; type=\"System.Web.Security.SqlMembershipProvider\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; connectionStringName=\"MyAppMembershipDatabase\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; enablePasswordRetrieval=\"false\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; enablePasswordReset=\"true\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; requiresQuestionAndAnswer=\"true\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; passwordFormat=\"Hashed\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; maxInvalidPasswordAttempts = \"4\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; passwordAttemptWindow = \"10\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; applicationName=\"MyApp\" /&gt;&nbsp; <br />&nbsp; </providers><br /></membership></pre></li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <h1>How To Fix</h1>\r\n  <p>Use the following steps to successfully lock accounts after consecutive failed login attempts:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Determine a lockout policy: </strong>There are two variables to consider when determining a lockout policy:</p>\r\n      <ul>\r\n        <li>Number of allowed consecutive failed login attempts </li>\r\n        <li>Amount of time that a locked account will remain locked</li>\r\n      </ul>\r\n      <p>A simple policy would be to lock an account after 5 failed login attempts for the duration of 15 minutes. Although this is an effective method for blocking a brute force attack, it exposes your application to denial of service as an attacker can easily keep an account locked through a small stream of authentication requests. When determining the lockout policy, it is important to evaluate the risk of attacks against the user and the support costs associated with reactivating a locked account. For example, requiring the user to contact your organization's support personnel to reactivate a locked account will have a direct impact on support costs and would add general user frustration. Add extra care when designing more sophisticated variations, such as correlating a single or multiple user login attempts with a source IP, of your application's lockout policy. When adding extra levels of complexity, carefully consider and evaluate the scenarios where your application's lockout policy can be circumvented, or can harm your business. For instance, consider scenarios where an attacker would attempt to compromise a user through the use of multiple hosts, or multiple users would authenticate using a shared office IP.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Enforce the lockout policy:</strong> The lockout policy should be enforced at all points in the application where authentication is necessary. If your application uses membership providers, specify the following attributes in your provider's configuration: </p>\r\n      <ul>\r\n        <li>\r\n          <strong>maxInvalidPasswordAttempts</strong>: provides the maximum number of invalid password attempts before an account is locked out </li>\r\n        <li>\r\n          <strong>passwordAttemptWindow</strong>: provides the time window, in minutes, during which a user must successfully authenticate without reaching the maximum allowed authentication attempts </li>\r\n        <li>\r\n          <strong>passwordAnswerAttemptLockoutDuration</strong>: if supported by the membership provider, this attribute specifies the duration of a lockout due to invalid password attempts</li>\r\n      </ul>\r\n      <p>Example:</p>\r\n      <pre>\r\n        <membership defaultprovider=\"SqlProvider\" userisonlinetimewindow=\"30\">\r\n          <br />\r\n          <providers>\r\n            <br />\r\n            <add name=\"MyAppMembershipProvider\">\r\n            </add>\r\n            <br />      type=\"System.Web.Security.SqlMembershipProvider\"<br />      connectionStringName=\"MyAppMembershipDatabase\"<br />      enablePasswordRetrieval=\"false\"<br />      enablePasswordReset=\"true\"<br />      requiresQuestionAndAnswer=\"true\"<br />      passwordFormat=\"Hashed\"<br /><strong>      maxInvalidPasswordAttempts = \"4\"<br /></strong><strong>passwordAttemptWindow = \"10\"<br /></strong>      applicationName=\"MyApp\" /&gt;<br /></providers>\r\n          <br />\r\n        </membership>\r\n      </pre>\r\n      <p>Be aware that the standard .NET membership providers handle user passwords as System.string objects, which are immutable and can expose your application's user accounts. </p>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/dc86e42f-0009-42f0-8a32-ce47e0f86753\">Lock Accounts After Consecutive Failed Login Attempts</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\r\n  <h1>\r\n  </h1>\r\n  <h1>\r\n  </h1>"
        ]
      }
    ]
  }
}