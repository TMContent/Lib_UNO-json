{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-626131811",
      "Content_Hash": "1768611078"
    },
    "Metadata": [
      {
        "Id": [
          "4c4c6b17-c40f-4710-bd98-03693304ae78"
        ],
        "Id_History": [
          "4c4c6b17-c40f-4710-bd98-03693304ae78,33f20e09-8bd4-43b3-84f1-4026ba7e49e9,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Role Manager Is Used for Roles Authorization Rather than Custom Code"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Role Manager Is Used for Roles Authorization Rather than Custom Code"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that&nbsp;the ASP.NET Role Manager is used for role-based authorization&nbsp;rather than&nbsp;custom code.</p>\r\n  <h1>Why</h1>\r\n  <p>ASP.NET provides a role manager feature that automatically creates, manages and looks up roles for the authenticated user. Role managers reduce the possibilities&nbsp;of serious security issues from programmer errors&nbsp;as well as&nbsp;reduce the amount of custom code needed for an application. </p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to check if your application is using the Role Manager:</p>\r\n  <ol>\r\n    <li>Check for the existence of the &lt;<strong>roleManager</strong>&gt; element beneath the &lt;<b>system.web</b>&gt; section of your application's Web.config file and make sure the <b>enabled</b> attribute is set to <b>true.</b><li>Ensure there is a connection string in the &lt;<strong>connectionStrings</strong>&gt; section that points to your roles store. <li>Ensure there is a specific provider configured in the &lt;<b>roleManager</b>&gt;<b></b>element. <li>Check that the <b>defaultProvider</b> attribute on the &lt;<b>roleManager</b>&gt; element points to your chosen role provider. <li>Check your application's code and ensure it is using the Role Manager API (for example <b>Roles.IsUserInRole </b>and <strong>Roles.CreateRole</strong>) whenever a roles check takes place.</li></li></li></li></li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <ol>\r\n    <li>User authentication access checks <li>Role access from the configured role store by the <strong>RoleManager</strong> HTTP module using the configured role provider <li>URL and file authorization <li>Programmatic role checks</li></li></li></li>\r\n  </ol>\r\n  <p>This order means that role information cannot be used for an unauthenticated user. It also means that role access can be used for URL and file authorization.</p>\r\n  <p />To use the role manager feature in an ASP.NET application, you need to do the following: <ol><li>Add a &lt;<b>roleManager</b>&gt; element beneath the &lt;<b>system.web</b>&gt; section of your application's Web.config file and enable role manager by setting its <b>enabled</b> attribute to <b>true</b>. <li>Add a connection string to the &lt;<b>connectionStrings</b>&gt; section to point to your roles store. If you are using the <b>AuthorizationStoreRoleProvider</b>, this is an LDAP query string pointing to your Authorization Manager Policy store in Active Directory or ADAM. If you are using the <b>SqlRoleProvider</b>, this is a database connection string that points to your role store database. <li>Configure the specific provider in the &lt;<b>roleManager</b>&gt;<b></b>element in your application's Web.config file. The role manager system supports the following providers: <li>If your application roles are in an Authorization Manager Policy store in Active Directory or ADAM, use the <b>AuthorizationStoreRoleProvider</b>. <li>If your application roles are in a SQL Server database, use the <b>SqlRoleProvider.</b><li>If your application uses Windows groups as roles, use the <b>WindowsTokenRoleProvider</b>. Note that this is recommended to be used with Windows Authentication only. <li>If your application roles are in a store other than those previously listed, create a custom roles provider inheriting <b>RoleProvider</b> base class. <li>Set the <b>defaultProvider</b> attribute on the &lt;<b>roleManager</b>&gt; element to the chosen role provider. </li></li></li></li></li></li></li></li></ol><p>To check roles and manage roles, use the Role Manager API (for example <b>Roles.IsUserInRole </b>and <b>Roles.CreateRole</b>). </p><h1>Related Items</h1><ul><li><a href=\"/article/86e905f3-25a9-438c-bdc6-5b242584be2a\">Use ASP.NET Role Manager for Roles Authorization</a></li></ul><hr /><p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}