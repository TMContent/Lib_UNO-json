{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "490519237",
      "Content_Hash": "-1686854077"
    },
    "Metadata": [
      {
        "Id": [
          "4f516756-cca0-4b52-a70f-cdc234fa246d"
        ],
        "Id_History": [
          "4f516756-cca0-4b52-a70f-cdc234fa246d,c6a1acf4-0bfd-4664-935b-16f9e71c94ac,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Logging Is Throttled So an Attacker Can't Overwhelm the Logs"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Logging Is Throttled So an Attacker Can't Overwhelm the Logs"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Check to ensure your application cannot be overwhelmed by excessive logging driven by malicious activity.</p>\r\n  <h1>Why</h1>\r\n  <p>If an attacker is able to overwhelm your log buffers they could accomplish the following:</p>\r\n  <ul>\r\n    <li>Degrade the performance of your application to the point that it is no longer able to serve your customers (Denial of Service) </li>\r\n    <li>Cause your application to drop logs and cover up evidence of an attack</li>\r\n  </ul>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to check for this problem:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Review your code for promiscuous logging. </strong>Your application should be instrumented well enough that you can determine if unusual activity is occurring.&nbsp; However, do not instrument in such a way that an attacker can easily drive a large number of events to be logged.&nbsp; For instance, if you log an event every time you recieve an unexpected parameter value an attacker could sent a large number of requests and quickly generate a large number of log entries.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Review log buffering in your configuration files. </strong>By default ASP.NET sets the following buffer settings for Health Monitoring:</p>\r\n      <pre>&lt;bufferModes&gt;     <br />&lt;add name=\"Critical Notification\" maxBufferSize=\"100\" maxFlushSize=\"20\"           <br />\turgentFlushThreshold=\"1\" regularFlushInterval=\"Infinite\" urgentFlushInterval=\"00:01:00\"<br />           maxBufferThreads=\"1\" /&gt;     <br />&lt;add name=\"Notification\" maxBufferSize=\"300\" maxFlushSize=\"20\"          <br />\turgentFlushThreshold=\"1\" regularFlushInterval=\"Infinite\" urgentFlushInterval=\"00:01:00\" <br />          maxBufferThreads=\"1\" /&gt;     <br />&lt;add name=\"Analysis\" maxBufferSize=\"1000\" maxFlushSize=\"100\" urgentFlushThreshold=\"100\"           <br />\tregularFlushInterval=\"00:05:00\" urgentFlushInterval=\"00:01:00\" maxBufferThreads=\"1\" /&gt;     <br />&lt;add name=\"Logging\" maxBufferSize=\"1000\" maxFlushSize=\"200\" urgentFlushThreshold=\"800\"           <br />\tregularFlushInterval=\"00:30:00\" urgentFlushInterval=\"00:05:00\" maxBufferThreads=\"1\" /&gt;<br />&lt;/bufferModes&gt;</pre>\r\n      <p>These default settings provide a reasonable balance between performance and buffer size that is appropriate for most applications.&nbsp; However, pay special attention to the maxBufferSize and urgentFlushInterval attribute values.&nbsp; If an attacker can drive the maxBufferSize to be attained before the urgentFlushInterval time limit, logs will be dropped from the buffer before they are sent to be recorded in the event log.</p>\r\n      <p>Also pay particular attention if the settings have been changed from default, or new rules have been added for additional event providers.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>If you've determined that an attacker can drive a large number of log entries thereby consuming excessive resources on your server you can do the following:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Control log thresholds with the Profiles element. </strong>You use the &lt;<b>profiles</b>&gt; element to specify sets of parameters to use when configuring events. These parameters indicate the minimum number instances after which the event should be logged, the maximum number of instances, and the minimum interval between logging two similar events. This element can be critical in controlling the amount of information generated by defining when monitoring begins and when it ends by setting thresholds. </p>\r\n      <p>You can use this element to throttle the event occurrences. It can help prevent an attack against the eventing system itself or an event sink such as SQL Server or the event log. You can review the default settings in the machine-level Web.config file. The following code example shows the default settings from the machine-level Web.config.default file</p>\r\n      <pre>&lt;profiles&gt;  <br />&lt;add name=\"Default\" minInstances=\"1\" maxLimit=\"Infinite\" minInterval=\"00:01:00\" custom=\"\" /&gt;  <br />&lt;add name=\"Critical\" minInstances=\"1\" maxLimit=\"Infinite\" minInterval=\"00:00:00\"  custom=\"\" /&gt;<br />&lt;/profiles&gt;</pre>\r\n      <p>You can use the default profiles in your own health monitoring configuration, and you can create new profiles. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Log to a seperate server. </strong>Logging to a seperate server not only reduces the load on your application server, it also makes it more difficult for an attacker to steal or alter your log entries.&nbsp;</p>\r\n      <p>To log to a seperate server&nbsp;set up SQL server on the logging host and designate it as the <b>SqlWebEventProvider</b>.&nbsp; The logging machine shouldn't have any other services or roles assigned to it, to ensure that its attack surface is as small as possible.&nbsp; Make sure that you connect to the SQL server securely, preferably by using integrated authentication.&nbsp; Also, ensure that the account connecting to the database has permissions only to the stored procedures it needs and nothing else, including direct table access.&nbsp;</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Modify your code's use of custom events. </strong>If you have defined and are using custom events, modify your code so that an attacker cannot control the frequency of the event being raised.&nbsp; For instance, if you raise a custom event every time your application recieves a malformed parameter, you can modify this code to only log the number of malformed parameters recieved in the last 60 seconds.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Modify BufferModes. </strong>Modify maxBufferSize and urgentFlushInterval attribute values so that the maximum size cannot be attained within the urgentFlushInterval.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>An ASP.NET application has added the following buffermodes element to control buffering for logging to a SQL event provider:</p>\r\n  <pre>&lt;bufferModes&gt;    <br />&lt;add name=\"Analysis\" maxBufferSize=\"1000\" maxFlushSize=\"100\" urgentFlushThreshold=\"100\"<br />\tregularFlushInterval=\"00:05:00\" urgentFlushInterval=\"00:01:00\" maxBufferThreads=\"1\" /&gt;  <br />&lt;/bufferModes&gt;</pre>\r\n  <p>However, if an attacker can generate more than 1000 logs in less than 5 minutes, some of the logs will be dropped.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"http://msdn.microsoft.com/en-us/library/ms178708(VS.80).aspx\">Buffering ASP.NET Health Monitoring Events</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}