{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1290166815",
      "Content_Hash": "1667692197"
    },
    "Metadata": [
      {
        "Id": [
          "560ad3e1-e656-4e7f-9a31-58e673343674"
        ],
        "Id_History": [
          "560ad3e1-e656-4e7f-9a31-58e673343674,94292dae-aa16-4639-8837-632a0f6eb5d8,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Full Assembly Names Are Used When Activator.CreateInstance Loads Add-ins."
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Full Assembly Names Are Used When Activator.CreateInstance Loads Add-ins."
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Check to ensure that full assembly names are used when Activator.CreateInstance to prevent loading a malicious assembly.</p>\r\n  <p />\r\n  <h1>How to Fix</h1>\r\n  <p>If your code supports the dynamic loading of assemblies and you load the assembly by calling <b>Activator.CreateInstance</b>, make sure to refer to the assembly by using its strong name. This prevents your application from accidentally loading a malicious assembly with the same name as a legitimate assembly. The strong name of an assembly contains the public-key token that the assembly was signed with, providing evidence of the author.</p>\r\n  <p>The following example shows how to find the strong name for an assembly.</p>\r\n  <div>\r\n    <pre>\r\n      <pre>public static StrongName GetStrongName(Assembly assembly)&#123;<br />    if(assembly == null)<br />        throw new ArgumentNullException(\"assembly\");<br />    AssemblyName assemblyName = assembly.GetName();<br />            // get the public key blob<br />    byte&#91;&#93; publicKey = assemblyName.GetPublicKey();<br />    if(publicKey == null &#124;&#124; publicKey.Length == 0)<br />        throw new InvalidOperationException(<br />            String.Format(\"&#123;0&#125; is not strongly named\",<br />             assembly));<br />        StrongNamePublicKeyBlob keyBlob = new StrongNamePublicKeyBlob(publicKey);<br />    // create the StrongName<br />    return new StrongName(<br />        keyBlob, assemblyName.Name, assemblyName.Version);<br />&#125;</pre>\r\n    </pre>\r\n  </div>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}