{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "325329194",
      "Content_Hash": "-2107921525"
    },
    "Metadata": [
      {
        "Id": [
          "672f9a65-5e5b-428b-ae2a-7a51f37b9cb3"
        ],
        "Id_History": [
          "672f9a65-5e5b-428b-ae2a-7a51f37b9cb3,7f44ca36-24b0-4762-a444-a162fd2c2798,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Security Activities Are Integrated into the Development Lifecycle"
        ],
        "Category": [
          "Security Engineering"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Security Activities Are Integrated into the Development Lifecycle"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Verify that security activities are integrated into the development lifecycle.</p>\n  <h1>Why</h1>\n  <p>Integrate security into your application development life cycle to design, build, and deploy secure applications.</p>\n  <h1>How to Check</h1>\n  <p>There are a number of distinct security-related activities that should be an integral part of your application life cycle. These are:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Security Objectives.</strong> If you do not know the security objectives for your application, it will be difficult to be successful with any other security activity.</p>\n      <li>\n        <p>\n          <strong>Design Guidelines for Security.</strong> To avoid many of the vulnerabilities introduced by poor design choices, your design activity should use proven design practices, patterns, and principles. By organizing these design patterns and practices into common vulnerability categories, you can focus on those areas where security mistakes are most often made.</p>\n        <li>\n          <p>\n            <strong>Threat Modeling.</strong> Threat modeling helps you to understand and identify the threats and vulnerabilities relevant to your specific application scenario.</p>\n          <li>\n            <p>\n              <strong>Architecture and Design for Security.</strong> The architecture and design review process analyzes the architecture and design from a security perspective. It examines a number of aspects including deployment and infrastructure, overall application architecture and design, and each tier in the application.</p>\n            <li>\n              <p>\n                <strong>Code Review for Security.</strong> All code should be subject to code inspections where the emphasis is on identifying security vulnerabilities. This should be a continuous activity during the development and test phases of the application life cycle.</p>\n              <li>\n                <p>\n                  <strong>Security Testing.</strong> Testing should be used to validate designed mitigations and ensure nothing has slipped through the cracks.</p>\n                <li>\n                  <p>\n                    <strong>Deployment Review for Security.</strong> When your application is deployed, you need to be sure that weak or inappropriate configuration settings do not introduce security vulnerabilities.</p>\n                </li>\n              </li>\n            </li>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>For most organizations, the best results will come from adopting the activities in the following order:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Security Objectives.</strong> Define security objectives and requirements early in the process. Security objectives are goals and constraints that affect the confidentiality, integrity, and availability of your data and application.</p>\n      <li>\n        <p>\n          <strong>Architecture and Design Review for Security.</strong> Bugs introduced in the design phase are the most expensive to deal with later. Introduce architecture and design reviews focused on security to avoid the need for costly rework later in the life cycle.</p>\n        <li>\n          <p>\n            <strong>Threat Modeling.</strong> Adopt threat modeling to help you focus your security development efforts, improve the overall quality of your software engineering, ensure that you address relevant threats, and help your test teams create plans to test for specific vulnerabilities. Threat models also serve as a focus for communication among the various roles and help to ensure that developers and IT professionals alike really understand the application.</p>\n          <li>\n            <p>\n              <strong>Code Review for Security.</strong> Inspect all code with emphasis on identifying security vulnerabilities. While design bugs are the most expensive, implementation bugs are the most common. Reviewing your code for security vulnerabilities can save you later rework or help avoid costly exploits.</p>\n            <li>\n              <p>\n                <strong>Security Review for Deployment.</strong> Verify that weak or inappropriate configuration settings do not introduce security vulnerabilities when your application is being deployed. An application is only as secure as its weakest link. Even a highly effective process can be undone by a configuration error during deployment.</p>\n              <li>\n                <p>\n                  <strong>Design Guidelines for Security.</strong> Use proven design practices, patterns, and principles to avoid many of the vulnerabilities introduced by poor design choices. By adopting proven design principles and learning from others mistakes you can ensure your application is secure from the start.</p>\n                <li>\n                  <p>\n                    <strong>Security Testing.</strong> Use a risk-based approach and use the output from the threat modeling activity to help establish the scope of your testing activities and define your test plans.</p>\n                </li>\n              </li>\n            </li>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ol>"
        ]
      }
    ]
  }
}