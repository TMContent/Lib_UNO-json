{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1170549366",
      "Content_Hash": "-463117592"
    },
    "Metadata": [
      {
        "Id": [
          "f8586505-72f9-4c14-a365-3e5049e5ca57"
        ],
        "Id_History": [
          "f8586505-72f9-4c14-a365-3e5049e5ca57,c4a5a0c1-b9fc-423d-80fe-e31d0e2b3d90,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Usernames Are Validated Before Use"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Usernames Are Validated Before Use"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure user credentials are validated before processing them.</p>\r\n  <h1>Why</h1>\r\n  <p>Failure to validate user credentials could cause improper authentication. This can allow an attacker to authenticate as another user without the need to steal credentials.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Follow these steps to ensure that your application validates user credentials before use: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Locate all code that handles user credentials. </strong>Examine your application and identify all places inside its code base that handle user credentials. Common places include:</p>\r\n      <ul>\r\n        <li>Creating new users </li>\r\n        <li>Modifying existing users </li>\r\n        <li>Changing credentials for existing users </li>\r\n        <li>Retrieving information related to existing users </li>\r\n        <li>Removing existing users </li>\r\n        <li>Authenticating users</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that validation is handled properly. </strong>Ensure that your application addresses username validation throughout the different stages of your application's development lifecycle:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Policy Requirements</strong>:&nbsp;Verify that&nbsp;your application's security requirements have established a policy regarding acceptable usernames. Such policy should state the length and input set for valid usernames as well as password requirements. <br /></p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Design</strong>:&nbsp;Verify that&nbsp;all username validation routines are positioned properly at the trust boundaries of all of your application's routines that handle user credentials. For instance, all validation should occur before the username is processed by any component within your application.</p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Implementation:</strong>&nbsp;Verify that&nbsp;all username validation routines implement your application's username&nbsp;policy. Verify that the implementation is using whitelist and not blacklist validation techniques. Example:</p>\r\n          <pre>public boolean validateUsername(String input)<br />{<br />      String goodPattern = \"(\\\\w|\\\\d)+\";<br />      int goodLength = 6;<br />      if(input.length() &lt; goodLength)<br />      {<br />           return false;<br />      }<br />      Pattern p = Pattern.compile(goodPattern);<br />      Matcher m = p.matcher(input);<br />                if(!m.matches())<br />      {<br />            return false;<br />      }<br />      return true;<br />}</pre>\r\n          <p>Ensure that all error or exception conditions are handled correctly. Verify that all authentication procedures exit immediately in a graceful manner upon failed username validation.<br /></p>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Use the following steps when validating user credentials:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Establish username requirements. </strong>Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least&nbsp;six characters long and must contain alpha-numeric characters only.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use whitelist validation. </strong>Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:</p>\r\n      <pre>public boolean validateUsername(String input)<br />{<br />      String goodPattern = \"(\\\\w|\\\\d)+\";<br />      int goodLength = 6;<br />      if(input.length() &lt; goodLength)<br />      {<br />            return false;<br />      }<br />      Pattern p = Pattern.compile(goodPattern);<br />      Matcher m = p.matcher(input);<br /><br />      if(!m.matches())<br />      {<br />            return false;<br />      }<br /><br /><br />      return true;<br />}</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>A tutorial on regular expressions is available at <a href=\"http://www.regular-expressions.info/\">Regular-Expressions.info</a>. </li>\r\n    <li>For more information on using regular expression in Java, see: <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html\">Class Pattern</a> in Java SDK.</li>\r\n  </ul>\r\n  <br />"
        ]
      }
    ]
  }
}