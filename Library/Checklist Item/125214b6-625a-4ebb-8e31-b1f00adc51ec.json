{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1279628643",
      "Content_Hash": "172749481"
    },
    "Metadata": [
      {
        "Id": [
          "125214b6-625a-4ebb-8e31-b1f00adc51ec"
        ],
        "Id_History": [
          "125214b6-625a-4ebb-8e31-b1f00adc51ec,6e61a534-822e-4725-87e9-f80924237be2,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Input Validation Is Centralized"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Input Validation Is Centralized"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Verify that input validation functions are organized in a dedicated class or library.</p>\r\n  <h1>Why</h1>\r\n  <p>Centralizing input validation helps ensure that data is validated in a consistent way throughout the application and provides a single point of maintenance.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to verify that input validation is centralized:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Find the input validation subsystem.</strong> Examine the application structure with a&nbsp;focus on input and data validation functions to verify that a dedicated class or library exists for input and data validation functions. </p>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that input is constrained, rejected, and sanitized.</strong> Examine the validation functions to make sure they constrain known valid input first, then reject known bad input, and sanitize the resulting data.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Verify that trust boundaries are identified.</strong> Examine documentation to verify that trust boundaries between components are identified. Use this information to verify that all input is explicitly validated at the boundaries.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Perform the following actions to assure that all input is validated:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Centralize validation.</strong> When you develop an input- and data-validation architecture for your application, consider developing a library of validation routines in all but the smallest applications. This will help ensure that data is validated in a consistent way throughout the application and provide a single point of maintenance. You need to trace data from entry point to exit point to know how it should be validated. A good library includes routines for all of the different types of validation you need to apply, and these can be used in combination if necessary. </p>\r\n      <li>\r\n        <p>\r\n          <strong>Constrain, reject, and sanitize input.</strong> Constrain what you allow from the beginning. It is much easier to validate data for known valid types, patterns, and ranges (using a white list) than it is to validate data by looking for known bad characters (using a black list). When you design your application, you know what your application expects. The range of valid data is generally a more finite set than the range of potentially malicious input. However, for added defense you might want to reject known bad input and then sanitize the input. Constrain input for type, length, format, and range. Use regular expressions to help constrain text input. Use strong data typing where possible. </p>\r\n        <li>\r\n          <p>\r\n            <strong>Identify trust boundaries.</strong> Ensure that entry points between trust boundaries validate all input data explicitly. Make no assumptions about the data. The only exception is inside a routine that you know can only be called by other routines within the same trust boundary. </p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>"
        ]
      }
    ]
  }
}