{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1673962291",
      "Content_Hash": "-827361841"
    },
    "Metadata": [
      {
        "Id": [
          "edb7f620-21a6-4599-aebd-2966c47ec2e3"
        ],
        "Id_History": [
          "edb7f620-21a6-4599-aebd-2966c47ec2e3,1c48512b-1dce-4aa0-9fab-547472842fd6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Exception Details Are Not Disclosed to the Client"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Exception Details Are Not Disclosed to the Client"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Ensure that internal application details are not allowed to be sent to the client.</p>\n  <h1>Why</h1>\n  <p>Exceptions contain sensitive information about the application (e.g. call stack, fragments of code, etc.). Disclosing such information to an attacker could aid them with attacking the system.</p>\n  <h1>How to Check</h1>\n  <p>Use the following steps to verify exception details are not disclosed to the client:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Verify that all expected exceptions are caught. </strong>Verifying that all expected exceptions are handled minimizes the risk of such an exception surfacing to the root of the execution stack.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that a global exception handler is used. </strong>Global exception handling prevents unhandled exceptions from surfacing to the client.&amp;nbsp;The following code gives an example of how this might be done:</p>\n      <pre> &lt;%@ Application Language=\"C#\" %&gt;<br /> &lt;%@ Import Namespace=\"System.Diagnostics\" %&gt;<br /> &lt;script language=\"C#\" runat=\"server\"&gt;<br /> void Application_Error(object sender, EventArgs e)<br /> {<br />     // Add the appropriate logging code<br />     Response.Write(\"We are sorry, but we cannot complete your request. Please try again later!\");<br />     Server.ClearError();<br /> }<br /> &lt;/script&gt;</pre>\n    </li>\n    <li>\n      <p>\n        <strong>Verify dynamically generated error messages are sufficiently generic</strong>:Dynamically generated error messages should not disclose detailed information about the inner-workings of the application and should not display user-supplied data without first properly encoding the data.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Verify error pages are sufficiently generic</strong>: The application error pages should be designed to not reveal detailed information about the inner-workings of the application and should not display user-supplied data without first properly encoding the data. Ensure that the <strong>customErrors</strong> element in your application's web.config sets the <strong>mode</strong> attribute to <strong>On</strong> or <strong>RemoteOnly</strong>. For example:</p>\n      <pre>&lt;customErrors mode=\"On\" defaultRedirect=\"ErrDefault.aspx\"&gt;<br /><br />    &lt;error statusCode=\"401\" redirect=\"ErrUnauthorized.aspx\" /&gt;<br />    &lt;error statusCode=\"404\" redirect=\"ErrPageNotFound.aspx\" /&gt;<br />    &lt;error statusCode=\"500\" redirect=\"ErrServer.htm\" /&gt;<br />&lt;/customErrors&gt; </pre>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The developers of an ASP.NET application change the <strong>mode</strong> attribute of the &lt;<strong>CustomErrors</strong>&gt; element to <strong>Off </strong>in order to display detailed error messages on both the local machine and remote clients for debugging purposes. When the application goes into production, this setting remains and detailed error messages are displayed to all users. An attacker investigating the site sees the error messages and finds sufficient information to exploit the application:</p>\n  <p>\n    <strong>Access to the path 'c:\\myapp\\docs\\resource.txt' is denied.</strong>\n  </p>\n  <p>\n    <strong>Description: </strong>An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. </p>\n  <p>\n    <strong>Exception Details: </strong>System.UnauthorizedAccessException: Access to the path 'c:\\myapp\\docs\\resource.txt' is denied. </p>\n  <p>ASP.NET is not authorized to access the requested resource. Consider granting access rights to the resource to the ASP.NET request identity. ASP.NET has a base process identity (typically {MACHINE}\\ASPNET on IIS 5 or Network Service on IIS 6) that is used if the application is not impersonating. If the application is impersonating via &lt;identity impersonate=\"true\"/&gt;, the identity will be the anonymous user (typically IUSR_MACHINENAME) or the authenticated request user. </p>\n  <p>To grant ASP.NET access to a file, right-click the file in Explorer, choose \"Properties\" and select the Security tab. Click \"Add\" to add the appropriate user or group. Highlight the ASP.NET account, and check the boxes for the desired access.</p>\n  <p>\n    <strong>Source Error:</strong>\n  </p>\n  <p>\n  </p>\n  <table>\n    <tbody>\n      <tr>\n        <td>&lt;CODE&gt;An unhandled exception was generated during the execution of the current web request. Information regarding the origin and location of the exception can be identified using the exception stack trace below.&lt;/CODE&gt; </td>\n      </tr>\n    </tbody>\n  </table>\n  <p />\n  <p>\n    <strong>Stack Trace:</strong>\n  </p>\n  <p>\n  </p>\n  <table>\n    <tbody>\n      <tr>\n        <td>\n          <pre>[UnauthorizedAccessException: Access to the path 'c:\\myapp\\docs\\resource.txt' is denied.]<br />   System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) +2014403<br />   System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share,<br />                              Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy) +998<br />   System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) +114<br />   System.IO.File.Open(String path, FileMode mode) +42<br />   Crypto.TestDPAPI(FileInfo reportFile, Literal&amp; textField) +310<br />   _Default.Page_Load(Object sender, EventArgs e) +201<br />   System.Web.Util.CalliHelper.EventArgFunctionCaller(IntPtr fp, Object o, Object t, EventArgs e) +15<br />   System.Web.Util.CalliEventHandlerDelegateProxy.Callback(Object sender, EventArgs e) +34<br />   System.Web.UI.Control.OnLoad(EventArgs e) +99<br />   System.Web.UI.Control.LoadRecursive() +47<br />   System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint) +1061</pre>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <p />\n  <hr />\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>To learn more about creating custom errors in ASP.NET, see <a href=\"http://support.microsoft.com/kb/306355\">How to create custom error reporting pages in ASP.NET by using Visual C# .NET</a>.</li>\n  </ul>\n  <br />\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}