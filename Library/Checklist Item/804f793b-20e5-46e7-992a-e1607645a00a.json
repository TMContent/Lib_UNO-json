{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "500096586",
      "Content_Hash": "-1263800125"
    },
    "Metadata": [
      {
        "Id": [
          "804f793b-20e5-46e7-992a-e1607645a00a"
        ],
        "Id_History": [
          "804f793b-20e5-46e7-992a-e1607645a00a,24196572-1d62-4e16-8bd6-6c9a2a9eeaa5,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] User Management Events Are Logged"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "User Management Events Are Logged"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Check to ensure your application is instrumented for all user management events, including authentication successes and failures, password resets, password&amp;nbsp;changes, and account lockouts.</p>\n  <h1>Why</h1>\n  <p>Instrumenting for user management events&amp;nbsp;helps you to detect and react to potentially suspicious behavior. It also enables you to gather operations data such as&amp;nbsp;tracking who&amp;nbsp;accesses your application and when user account passwords need to be reset. </p>\n  <h1>How to Check</h1>\n  <p>ASP.NET health monitoring will log many user management events by default.&amp;nbsp;Use the following steps to ensure user management events are being logged for your application:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Check to ensure that ASP.NET health monitoring is being used by your application. </strong>Health Monitoring is turned on by default in the machine level Web.Config file: </p>\n      <pre>&lt;healthMonitoring heartbeatInterval=\"0\" enabled=\"true\"&gt;<br />  &lt;bufferModes/&gt;<br />  &lt;providers/&gt;<br />  &lt;profiles/&gt;<br />  &lt;rules/&gt;<br />  &lt;eventMappings/&gt;<br />&lt;/healthMonitoring&gt;</pre>\n      <p>If the <strong>Enabled</strong> attribute is set to <strong>false</strong> in your machine or application level config file, then health monitoring has been turned off.&amp;nbsp; </p>\n    </li>\n    <li>\n      <strong>Check to ensure health monitoring rules are enabled. </strong>By default the rules element is configured so that all errors and failure audits are logged: <pre>&lt;rules&gt;<br /> &lt;add name=\"All Errors Default\" eventName=\"All Errors\" provider=\"EventLogProvider\"<br />      profile=\"Default\" minInstances=\"1\" maxLimit=\"Infinite\"<br />      minInterval=\"00:01:00\" custom=\"\" /&gt;<br /> &lt;add name=\"Failure Audits Default\" eventName=\"Failure Audits\"<br />      provider=\"EventLogProvider\" profile=\"Default\" minInstances=\"1\"<br />      maxLimit=\"Infinite\" minInterval=\"00:01:00\" custom=\"\" /&gt;<br />&lt;/rules&gt;</pre><p>If there are no rules in the rules element, then health monitoring will not log any events.</p></li>\n    <li>\n      <p>\n        <strong>Check for additional non-default user management events. </strong>The following events are not logged by default but can be turned on for additional information:</p>\n      <p>\n        <strong>Forms Authentication Events:</strong>\n      </p>\n      <p>For additional forms authentication information, log the following events: </p>\n      <ul>\n        <li>\n          <b>AuditFormsAuthenticationSuccess</b> (code 4001): This is used to maintain an&amp;nbsp;audit trail of successful forms authentication, which can then be retraced if the system is compromised when using forms authentication classes. </li>\n        <li>\n          <b>AuditMembershipAuthenticationSuccess</b> (code 4002): This is used to maintain an&amp;nbsp;audit trail of successful authentications in the ASP.NET membership system, which can then be retraced if the system is compromised when using the membership feature. </li>\n      </ul>\n    </li>\n  </ol>\n  <blockquote>\n    <p>\n      <strong>Authorization Events</strong>\n    </p>\n    <p />To provide additional authorization information, log the following events: <ul><li><b>AuditFileAuthorizationSuccess</b> (code 4004). This is used to maintain an audit trail, which can then be retraced to identify all successful file accesses by an attacker if the system is compromised. </li><li><b>AuditUrlAuthorizationSuccess</b> (code 4003). This is used to maintain an audit trail, which can then be retraced to identify all successful URL and path accesses by an attacker if the system is compromised. </li></ul></blockquote>\n  <h1>How to Fix</h1>\n  <p>Instrument your application and monitor user management events such as password resets, password changes, account lockout, user registration, and authentication events. Doing this helps you to detect and react to potentially suspicious behavior. It also enables you to gather operations data; for example, to track who is accessing your application and when user account passwords need to be reset.</p>\n  <p>By default, ASP.NET health monitoring records all <b>WebFailureAuditEvents</b>, which ASP.NET raises when user authentication fails in forms authentication with the membership system. ASP.NET also raises a <b>WebFailureAuditEvent</b> when authorization is not granted to a resource protected by file authorization and URL authorization.</p>\n  <p>\n    <strong>Note: </strong>If you are using integrity checks to ensure data from the client has not been tampered with, you can use health monitoring to log any instances of tampered data. <br /></p>\n  <h1>Problem Example</h1>\n  <p>An ASP.NET application has turned off Health Monitoring and is not logging user management events:</p>\n  <pre>&lt;healthMonitoring heartbeatInterval=\"0\" enabled=\"false\"&gt;</pre>\n  <p>An malicous attacker is trying to brute force their way into the application through use of a dictionary attack on forms authentication. Since forms authentication failures are not logged, the attack is not detected until it is&amp;nbsp;too late and the exploit has succeeded.</p>\n  <h1>Solution Example</h1>\n  <p>An ASP.NET application has left Health Monitoring on:</p>\n  <pre>&lt;healthMonitoring heartbeatInterval=\"0\" enabled=\"false\"&gt;</pre>\n  <p>And has left default event logging on:</p>\n  <pre>&lt;rules&gt;<br />&lt;add name=\"All Errors Default\" eventName=\"All Errors\" provider=\"EventLogProvider\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; profile=\"Default\" minInstances=\"1\" maxLimit=\"Infinite\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minInterval=\"00:01:00\" custom=\"\" /&gt;<br />&lt;add name=\"Failure Audits Default\" eventName=\"Failure Audits\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; provider=\"EventLogProvider\" profile=\"Default\" minInstances=\"1\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxLimit=\"Infinite\" minInterval=\"00:01:00\" custom=\"\" /&gt;<br />&lt;/rules&gt;</pre>\n  <p>An malicous attacker is trying to brute force their way into the application through use of a dictionary attack on forms authentication. Since forms authentication failures are logged, the attack is detected and prevented before the attacker is able to break in.</p>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/a22be7b2-d1d9-44ad-8741-c75d70d03d1c\">Instrument Application for User Management Events</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}