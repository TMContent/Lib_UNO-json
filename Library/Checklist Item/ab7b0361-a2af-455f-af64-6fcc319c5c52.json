{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1673138019",
      "Content_Hash": "-420403510"
    },
    "Metadata": [
      {
        "Id": [
          "ab7b0361-a2af-455f-af64-6fcc319c5c52"
        ],
        "Id_History": [
          "ab7b0361-a2af-455f-af64-6fcc319c5c52,63c043f8-ddd9-4472-a2cc-122c17b2ffbf,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Debug Data Is Not Included in Output"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Debug Data Is Not Included in Output"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that debug data is removed from any output that an attacker may have access to. Check all error messages or other output data for any debug information that an attacker could use to leverage a further attack. </p>\r\n  <h1>Why</h1>\r\n  <p>Attackers can use debug data to learn crucial information about your web application, which they can then use to leverage further attacks. Debug data may inform an attacker what modules your application is using. The attacker can use this information to research latent security bugs in those specific modules or to see how your application is handling certain input, which may allow them to bypass security modules such as encoding, encryption, authentication, etc. </p>\r\n  <h1>How to Check</h1>\r\n  <p>Debug information is often displayed in error messages during development in order to speed up the debugging process. After deployment, such output can greatly aid an attacker by revealing details about your application that normally would not be accessible. In order to prevent such information disclosure, verify the following:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure debugging is disabled. </strong>Verify that the debug flag in your application's web.config is set to false:</p>\r\n      <pre>&lt;configuration&gt;&lt;system.Web&gt;&lt;compilation debug=\"false\"&gt;</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that debug information is not disclosed in error messages. </strong>See the Valuable Information is Not Disclosed in Error Messages checklist for detailed steps on how to check for debuging information in error messages.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure that exception details are not disclosed to the client. </strong>Identify all <strong>catch</strong> and <strong>finally</strong> clauses, and ensure that debug messages are not sent to the client.</p>\r\n      <ol>\r\n        <li>Verify that all expected exceptions are caught. </li>\r\n        <li>Verify that a global exception handler is used. </li>\r\n        <li>Verify dynamically generated error messages are sufficiently generic. </li>\r\n        <li>Verify error pages are sufficiently generic.</li>\r\n      </ol>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use a logging mechanism to collect debug information when appropriate. </strong>If it is necessary to collect debug information for later analysis, use a logging mechanism to reduce the risk of an attacker gaining access to the information. </p>\r\n      <ol>\r\n        <li>Consult your application's designs to determine the appropriate framework for logging debug messages. </li>\r\n        <li>Verify that the identified information is collected via your application's logging framework. </li>\r\n        <li>Check that only neccesary users have access to the log files with the Log Files are Protected checklist.</li>\r\n      </ol>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure access to trace facilities is restricted. </strong>If your application uses ASP.NET tracing, ensure that the <strong>trace</strong> element inside your application's <strong>web.config</strong> has the <strong>localOnly</strong> attribute set to <strong>true</strong>:</p>\r\n      <pre>&lt;trace enabled=\"true\" pageOutput=\"false\" traceMode=\"SortByTime\" <strong>localOnly=\"true\"</strong>/&gt;</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following entries in a web.config file will compile debug information into the final project and enable application tracing. Furthermore, it allows remote hosts to observe the application traces; therefore, an attacker can retrieve the Trace.axd file in the application root directory and obtain internal information about the application.</p>\r\n  <pre>&lt;configuration&gt;<br />   &lt;system.Web&gt;<br />      ...<br />      &lt;compilation debug=\"true\"&gt;<br />      ...<br />      &lt;trace enabled=\"true\" localOnly=\"false\" ... /&gt;<br />      ...</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}