{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1879217227",
      "Content_Hash": "1416055273"
    },
    "Metadata": [
      {
        "Id": [
          "72bb474e-80c6-4533-b363-0195c2c74196"
        ],
        "Id_History": [
          "72bb474e-80c6-4533-b363-0195c2c74196,da489122-c52a-4298-9f5b-3a90c738bf03,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Stored Procedures with Type-safe Parameters Are Used for SQL Queries"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Stored Procedures with Type-safe Parameters Are Used for SQL Queries"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- ASP.NET 4.0\r\n\r\n\r\n## What to Check For ##\r\n\r\nVerify that stored procedures with type-safe parameters are used for SQL queries.\r\n\r\n\r\n## Why ##\r\n\r\nUsing stored procedures with type-safe parameters helps prevent SQL injection attacks.\r\n\r\n\r\n## How To Check ##\r\n\r\nTo verify that stored procedures with type-safe parameters are used for SQL queries:\r\n\r\n1. **Identify all SQL queries used by the application.** Review code to find all functions that query the database.\r\n\r\n2. **Make sure that stored procedures are used.** Examine each function that queries the database to make sure that it uses stored procedures.\r\n\r\n3. **Review stored procedures.** Examine stored procedures used by the application to make sure they do not concatenate untrusted data into SQL syntax, but use parameters instead.\r\n\r\n\r\n## How To Fix ##\r\n\r\nFirst the stored procedure will have to be created on the database. Here is an example of a stored procedure:\r\n\r\n\tCREATE PROCEDURE sp_AddNewUser (@UserName nvarchar(255), @Email  nvarchar(255), @FirstName nvarchar(255), @LastName nvarchar(255)) AS\r\n\t-- INSERT the new user\r\n\tINSERT INTO Users_Table(UserName, Email, FirstName, LastName) VALUES(@UserName, @Email, @FirstName, @LastName);\r\n\r\nNow to call the stored procedure we can use the following .NET code:\r\n\r\n\t//create a new connection using our connection string\r\n\tSqlConnection myConnection = new SqlConnection(connection string);\r\n\tmyConnection.Open();\r\n\t//create a new command that specifies our store procedure\r\n\tSqlCommand myCommand = new SqlCommand(\"sp_AddNewUser\", myConnection);\r\n\t//Specify our command is a stored proceduremy\r\n\tCommand.CommandType = CommandType.StoredProcedure;\r\n\t//Create a new parameter to carry the username\r\n\tSqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);\r\n\tUserParameter.Direction = ParameterDirection.Input;\r\n\tUserParameter.Value = \"TestUser\";\r\n\t//Add the parameter to the command\r\n\tmyCommand.Parameters.Add(UserParameter);\r\n\t//Repeat this code to add commands for each parameter in the SPROC\r\n\t//Execute the command on the Database\r\n\tmyCommand.ExecuteNonQuery();\r\n\r\n---\r\n\r\nAdapted from Microsoft patterns & practices guidance. "
        ]
      }
    ]
  }
}