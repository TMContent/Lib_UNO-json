{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1879217227",
      "Content_Hash": "1416055273"
    },
    "Metadata": [
      {
        "Id": [
          "72bb474e-80c6-4533-b363-0195c2c74196"
        ],
        "Id_History": [
          "72bb474e-80c6-4533-b363-0195c2c74196,da489122-c52a-4298-9f5b-3a90c738bf03,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Stored Procedures with Type-safe Parameters Are Used for SQL Queries"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Stored Procedures with Type-safe Parameters Are Used for SQL Queries"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\n  <ul>\n    <li>ASP.NET 4.0</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Verify that stored procedures with type-safe parameters are used for SQL queries.</p>\n  <h1>Why</h1>\n  <p>Using stored procedures with type-safe parameters helps prevent SQL injection attacks.</p>\n  <h1>How To Check</h1>\n  <p>To verify that stored procedures with type-safe parameters&nbsp;are used for SQL queries:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify all SQL queries used by the application. </strong>Review code to find all functions that query the database.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Make sure that stored procedures are used.</strong> Examine each function that queries the database to make sure that it uses stored procedures.</p>\n    </li>\n  </ol>\n  <h1>How To Fix</h1>\n  <p>First the stored procedure will have to be created on the database, this can be done using the following SQL syntax:</p>\n  <pre>CREATE PROCEDURE <br />sp_AddNewUser( @UserName nvarchar(255), @Email  nvarchar(255), <br />@FirstName nvarchar(255), @LastName nvarchar(255)) AS</pre>\n  <pre>-- INSERT the new user<br />INSERT INTO Users_Table(UserName, Email, FirstName, LastName)<br />VALUES(@UserName, @Email, @FirstName, @LastName)<br />--This will return the new userâ€™s IDSELECT SCOPE_IDENTITY()</pre>\n  <p>Now to call the stored procedure we can use the following .NET code:</p>\n  <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br /><br /><br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand(\"sp_AddNewUser\", myConnection);<br /><br /><br />//Specify our command is a stored proceduremy<br />Command.CommandType = CommandType.StoredProcedure;<br /><br /><br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);<br />UserParameter.Direction = ParameterDirection.Input;<br />UserParameter.Value = \"TestUser\";<br /><br /><br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br /><br /><br />//Repeat this code to add commands for each parameter in the SPROC<br />//Execute the command on the Database<br />myCommand.ExecuteNonQuery();</pre>\n  <h1>Related Items</h1>\n  <em>You may find these additional articles useful</em>\n  <ul>\n    <li>\n      <a href=\"/article/0949fe39-0723-49ec-970b-a914bb722695\">Use Stored Procedures for SQL Queries</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\n  <h1>\n  </h1>\n  <h1>\n  </h1>"
        ]
      }
    ]
  }
}