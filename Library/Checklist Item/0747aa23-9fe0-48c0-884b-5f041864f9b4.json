{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1853127269",
      "Content_Hash": "2023857724"
    },
    "Metadata": [
      {
        "Id": [
          "0747aa23-9fe0-48c0-884b-5f041864f9b4"
        ],
        "Id_History": [
          "0747aa23-9fe0-48c0-884b-5f041864f9b4,964bac8c-a0d9-4f84-b847-f0a9e6c907f4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] GenerateKey Is Used to Generate Random Keys for a Managed Symmetric Cryptographic Class."
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "GenerateKey Is Used to Generate Random Keys for a Managed Symmetric Cryptographic Class."
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Check to ensure that your application uses GenerateKey method to generate random keys for a managed symmetric cryptographic class.</p>\n  <p />\n  <h1>How to Fix</h1>\n  <p>When you use a default constructor to create a new instance of a managed symmetric cryptographic class, a new key and initialization vector are automatically created. You should call the <b>GenerateKey</b> method on the symmetric algorithm instance. <b>GenerateKey</b> creates a random strong key and sets it to the algorithm.</p>\n  <p>When you use symmetric algorithms, creating and managing keys is an important part of cryptographic process. If you use weak keys, you increase the likelihood that an attacker can compromise the key and access your encrypted data. The following example shows how to use the <b>GenerateKey</b> method.</p>\n  <div>\n    <pre>using System.Security.Cryptography;<br />  // create instance of AES encryption algorithm and set the key value<br />RijndaelManaged aesEncryptionAlgorithm = new RijndaelManaged();<br />//Generate IV and Key for the instance<br />aesEncryptionAlgorithm.GenerateIV();<br />aesEncryptionAlgorithm.GenerateKey();<br />// Retrieve the IV and Key and encrypt and safeguard it.</pre>\n  </div>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}