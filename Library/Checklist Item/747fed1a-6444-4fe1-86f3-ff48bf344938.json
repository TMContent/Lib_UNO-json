{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1118943986",
      "Content_Hash": "-1885358826"
    },
    "Metadata": [
      {
        "Id": [
          "747fed1a-6444-4fe1-86f3-ff48bf344938"
        ],
        "Id_History": [
          "747fed1a-6444-4fe1-86f3-ff48bf344938,cee3bcfe-eaaa-4b4e-8c91-f7c9a9b87a48,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Unsigned Integers Don't Wrap"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Unsigned Integers Don't Wrap"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Verify that operations using unsigned integers do not result in values that are higher than the maximum or minimum allowed for the integer type.</p>\n  <h1>Why</h1>\n  <p>When the result of an unsigned integer operation exceeds the maximum or the minimum values allowed for that integer type, the stored value of that operation will be different than expected. If this value is used to contol program flow, for array indexing, or memory operations, an arbitrary code execution vulnerability may result.</p>\n  <h1>How to Check</h1>\n  <p>Identify all operations that assign values to unsigned integers. Verify that range checks are performed before assigning values to unsigned integers.</p>\n  <h1>How to Fix</h1>\n  <p>Identify all operations that assign values to unsigned integers. Add code to perform range checks before assigning values to unsigned integers. Use constants, such as UINT_MAX, defined by the platform for range checks. The minimum valid value for unsigned integers is of course 0.</p>\n  <h1>Problem Example</h1>\n  <p>The following code may result in an unexpected value of a. If the value of variable a is then used to control program flow, index arrays, or perform memory operations, an arbitrary code execution vulnerability may result.</p>\n  <pre>unsigned short a, b, c;<br />// assign values to b and c<br />a = b &#43; c;</pre>\n  <h1>Solution Example</h1>\n  <p>To prevent integer wrapping, perform checks to make sure the resulting value is valid for the unsigned integer type. For the problem example above, the following code implements the correct range check:</p>\n  <pre>unsigned short a, b, c;<br />// assign values to b and c<br />if((b&#43;c) &lt; UINT_MAX) a = b &#43; c;<br />else &#123;/&#42;handle error&#42;/&#125;</pre>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/2f6f114a-7be0-4f92-8a45-23a6029dbcf1\">Prevent Unsigned Integers from Wrapping</a>\n      <li>\n        <a href=\"/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345\">Protect Against Integer Overflows</a>\n      </li>\n    </li>\n  </ul>"
        ]
      }
    ]
  }
}