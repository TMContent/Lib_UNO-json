{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1258373607",
      "Content_Hash": "-379817706"
    },
    "Metadata": [
      {
        "Id": [
          "79cb6dbb-6c58-4c15-9c96-4a7b3f450d3c"
        ],
        "Id_History": [
          "79cb6dbb-6c58-4c15-9c96-4a7b3f450d3c,3cd97c5d-ba5e-4065-a1b5-606021d26c1a,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Sensitive Data Is Not Placed in Parameters"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive Data Is Not Placed in Parameters"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Ensure that sensitive data is not placed in unprotected parameters.</p>\n  <h1>Why</h1>\n  <p>Sensitive data stored in unprotected parameters may be sent over the network in plain-text and can be easily stolen by an attacker with a network sniffer or by the operator of a web proxy.</p>\n  <h1>How to Check</h1>\n  <p>Sensitive data may be transmitted between a user's browser and your application for the following purposes:</p>\n  <ul>\n    <li>\n      <p>\n        <strong>Submitting input to your application:</strong> A user can provide input to your application via URL and form-based parameters. </p>\n      <li>\n        <p>\n          <strong>Tracking user activity:</strong> Your application may use cookies or hidden fields to track user activity. </p>\n      </li>\n    </li>\n  </ul>\n  <p>Since HTTP-based parameters are handled in plaintext form, use the following steps to ensure your application's proper use of HTTP-based parameters when handling sensitive data:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify sensitive data. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>\n      <ul>\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. <li>Information that a user provides that they would not want shared with other users of the application. <li>Information that comes from an external trusted source that is not designed to be shared with users.</li></li></li>\n      </ul>\n      <li>\n        <p>\n          <strong>Ensure that you application uses SSL when handling sensitive data. </strong>Without SSL, all sensitive data can be trivially read out of an HTTP session by a network sniffer or web proxy. See <a href=\"/article/a92aca4f-314d-40fe-9ecd-e3bbe19a555b\">Protect Sensitive Data Over the Network</a> and <a href=\"/article/b070122f-f1d1-47da-a378-57f845d5db61\">Encrypt Communication Links</a> for more information.</p>\n        <li>\n          <p>\n            <strong>Verify your application uses POST requests. </strong>Even when using SSL, HTTP parameters are still accessible to some proxies and will appear in web server logs and browser histories. Ensure that your application accepts sensitive data only via HTTP POST requests. Verify that the following items are in place:</p>\n          <ul>\n            <li>\n              <p>\n                <strong>HTML Forms</strong>: Verify that all forms that submit sensitive data explicitly specify that the user's browser should use POST requests.</p>\n              <blockquote>\n                <pre>&lt;form <strong><u>method=\"POST\"</u></strong> action=\"https://login.example.com/myapp/login.aspx\"&gt;<br />  &lt;input type=\"text\" name=\"user\" size=25&gt;&lt;br&gt;<br />  &lt;input type=\"password\" name=\"pass\" size=25&gt;&lt;br&gt;<br />  &lt;input type=\"submit\" name=\"submit\" value=\"log in\"&gt;<br />&lt;/form&gt;</pre>\n              </blockquote>\n              <li>\n                <p>\n                  <strong>Server-Side Code</strong>: Verify that your application accepts sensitive data only over a POST method.</p>\n                <blockquote>\n                  <pre>string sensitiveData = Request.Form&amp;#91;\"sensitiveParam\"&amp;#93;; </pre>\n                </blockquote>\n              </li>\n            </li>\n          </ul>\n          <li>\n            <p>\n              <strong>Verify that no sensitive data is stored in HTTP parameters or cookies. </strong>Ensure that your application does not store sensitive data in HTTP parameters or cookies. Verify that all sensitive data is stored into sessions. Consult the <a href=\"/article/5e086fea-df5c-4958-9b8f-e6f175b458f7\">Sensitive Data is Not Cached</a> checklist for additional information.</p>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>In the following page, the credentials are sent using a GET request. When the page is submitted, the credentials will be available in the URL. As the request is sent unencrypted, it is possible for a malicious user to obtain the credentials by sniffing the HTTP traffic. The credentials will also be present in both the server logs and the client's browser history, a serious problem on a public terminal.</p>\n  <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;login form&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;form method=\"GET\" action=\"<a href=\"http://login.example.com/myapp/login\">http://login.example.com/myapp/login</a>\"&gt;<br />    &lt;input type=\"text\" name=\"user\" size=25&gt;&lt;br&gt;<br />    &lt;input type=\"password\" name=\"pass\" size=25&gt;&lt;br&gt;<br />    &lt;input type=\"submit\" name=\"submit\" value=\"log in\"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information about POST HTTP method, visit: <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">HTTP/1.1 Method Definitions</a>.</li>\n  </ul>\n  <h1>Related Guideline</h1>\n  <ul>\n    <li>\n      <a href=\"/article/a96eaddb-5fb2-458e-b5ca-fde05a9a3a06\">Guideline: Do Not Place Sensitive Data in Parameters </a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}