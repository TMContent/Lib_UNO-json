{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-557073785",
      "Content_Hash": "-591037464"
    },
    "Metadata": [
      {
        "Id": [
          "3daed10e-b47a-40fe-b75d-3c68532c1f0d"
        ],
        "Id_History": [
          "3daed10e-b47a-40fe-b75d-3c68532c1f0d,7b9ae95e-0950-4e6f-99ff-af69f6c54943,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Passwords Are Stored Securely"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Passwords Are Stored Securely"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* PHP\r\n\r\n==What to Check For==\r\n\r\nVerify that iterative hashing is used to protect stored passwords.\r\n\r\n==Why==\r\n\r\nStoring hashes instead of plain-text passwords assures that an attacker cannot easily recover the passwords if he gains access to the password files. Adding salt to hashed files makes hashes much harder to break with dictionary attacks. Hashing should be applied multiple times to make hashing take longer and thus increase the computational resources required to attack the hashes. Iterative hashing applies a hashing function multiple times to a password and a salt, drastically increasing the time required to perform dictionary attacks.\r\n\r\n==When==\r\n\r\nUse iterative hashing when storing passwords.\r\n\r\n==How to Check==\r\n\r\nTo verify that iterative hashing is used to protect stored passwords:\r\n\r\n# **Identify code that stores passwords.** Find code that stores passwords. Search for {{{ password_hash }}} to find code that uses the new password hashing API. If this API is used, then the application will almost certainly pass this checklist, but there might be some applications that use older APIs to do the same thing. If searching for {{{ password_hash }}} does not find the code that is used to store passwords, review the application to find the code that stores passwords.\r\n# **Examine code that stores passwords.** Review code that stores passwords to make sure it uses {{{ password_hash }}} to store passwords. If that API is not used, then make sure that the password is hashed iteratively at least ten times using a strong hashing algorithm.\r\n\r\n==How to Fix==\r\n\r\nThe following steps show how to use iterative hashing:\r\n\r\n# **Define password storage requirements.** Most applications with a database back-end store the passwords in a database table. Another option is to store the passwords in files. If your application implements the policy of preventing users from entering previously used passwords, then the salted hashes of the previously used passwords have to be stored also. If the amount of the previously used passwords that cannot be used is configurable, it is recommended to use a separate table or file to store the hashes and salts of the previously used passwords.\r\n# **Hash the password and the salt using multiple iterations.** Use the {{{ password_hash }}} function to hash and salt the password using multiple iterations. The amount of iterations has to be the same when storing the password and when checking the password during authentication. The value returned by the {{{ password_hash }}} function includes the hash and the salt.\r\n# **Store the hash and the salt.** Store the hash and the salt in the file or database of your choosing. \r\n# **Implement password verification.** During authentication, the password entered by the user should be checked against the value calculated using the {{{ password_verify }}} function. Supply the password that the user has entered as the first argument to the {{{ password_verify }}} function. Retrieve the stored hash and supply it as the second argument to the {{{password_verify }}} function. If the {{{ password_verify }}} function returns {{{ true }}}, then the user has entered the correct password.\r\n\r\n==Additional Resources==\r\n\r\n* For information about the {{{ password_hash }}} function, see http://www.php.net/manual/en/function.password-hash.php\r\n* For information about the {{{ password_verify }}} function, see http://php.net/manual/en/function.password-verify.php"
        ]
      }
    ]
  }
}