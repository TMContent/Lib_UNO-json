{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1701374995",
      "Content_Hash": "-1002802107"
    },
    "Metadata": [
      {
        "Id": [
          "6adf267f-db7d-4770-86c6-292f9b126874"
        ],
        "Id_History": [
          "6adf267f-db7d-4770-86c6-292f9b126874,5eed31f9-57c1-4811-8223-4a1a023bb43c,"
        ],
        "Library_Id": [
          "c4b9cb6a-4561-4451-9b6c-4e59d73584f6"
        ],
        "Title": [
          "Sensitive Data Is Not Placed in Parameters"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive Data Is Not Placed in Parameters"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that sensitive data is not placed in unprotected parameters.</p>\r\n  <h1>Why</h1>\r\n  <p>Sensitive data stored in unprotected parameters is sent on the network in plaintext and can be easily&nbsp;read by an attacker who steals it&nbsp;using a network sniffer.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Sensitive data may be transmitted between a user's browser and your application for the following purposes:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Submitting input to your application:</strong> A user can provide input to your application via URL and form-based parameters.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Tracking user activity:</strong> Your application may use cookies or hidden fields to track user activity. </p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <p>Since HTTP-based parameters are handled in plaintext form, use the following steps to ensure your application's proper use of HTTP-based parameters when handling sensitive data:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive data. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. <li>Information that a user provides that they would not want shared with other users of the application. <li>Information that comes from an external trusted source that is not designed to be shared with users.</li></li></li>\r\n      </ul>\r\n      <li>\r\n        <strong>Verify that your application uses HTTPS for all sensitive pages.</strong> Identify all sensitive pages and use a web browser to navigate through them, using the facilities built-into the web browser to make sure that all sensitive pages are protected with SSL.<li><p><strong>Verify your application uses POST requests. </strong>Ensure that your application accepts sensitive data via only&nbsp;HTTP POST requests. Verify that the following items are in place:</p><ul><li><p><strong>HTML Forms</strong>: Verify that all forms that submit sensitive data explicitly specify that the user's browser should use POST requests.</p><pre>&lt;form method=\"POST\" action=\"https://login.example.com/myapp/login\"&gt;<br />  &lt;input type=\"text\" name=\"user\" size=25&gt;&lt;br&gt;<br />  &lt;input type=\"password\" name=\"pass\" size=25&gt;&lt;br&gt;<br />  &lt;input type=\"submit\" name=\"submit\" value=\"log in\"&gt;<br />&lt;/form&gt;</pre><li><p><strong>Server-Side Code</strong>: Verify that your application accepts sensitive data only over a POST method.</p><pre>public final class MainLoginServlet extends HttpServlet<br />&#123;<br />      public void doPost(HttpServletRequest request, HttpServletResponse response)<br /><br />            throws ServletException, IOException<br />      &#123;<br />            ...<br />      &#125;<br />&#125;</pre></li></li></ul><li><p><strong>Verify that no sensitive data is stored in HTTP parameters or cookies. </strong>Ensure that your application does not store sensitive data in HTTP parameters or cookies. Verify that all sensitive data is stored into sessions. Consult the <a href=\"/article/5e086fea-df5c-4958-9b8f-e6f175b458f7\">Sensitive Data is Not Cached</a> checklist for additional information.</p></li></li></li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Follow these steps when handling sensitive data via parameters:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the parameters.</strong> Parameters can be used as both entry points and storage places. Locating your application's parameters helps identify potential sources of input. Because parameters are easily accessible by the client, they should be considered untrusted. Different types of parameters include:</p>\r\n      <ul>\r\n        <li>URL-based parameters <li>Form-based parameters <li>Hidden fields <li>Cookies</li></li></li></li>\r\n      </ul>\r\n      <li>\r\n        <p>\r\n          <strong>Identify the use. </strong>Parameters can be used for several purposes. If you are using parameters to send sensitive data, use the steps below to find a work around:</p>\r\n        <ul>\r\n          <li>\r\n            <p>\r\n              <strong>Submitting input</strong>: Submitting sensitive data using parameters should always be done through an encrypted channel and always using a POST request. Use SSL to ensure encryption. Avoid using hidden fields when gathering information from the user. Allowing the user to enter all information about their account ensures that they are aware of all data that is being sent. Any information regarding the user's client environment can be gathered via the HTTP headers.</p>\r\n            <li>\r\n              <p>\r\n                <strong>User tracking</strong>: User tracking should always be done server-side using sessions. Avoid storing sensitive information in hidden fields and cookies. If it is necessary to store sensitive data using parameters, encrypt the data using a key that is known only by your application. If encrypted sensitive data is stored inside a cookie, avoid setting the cookie as persistent.</p>\r\n            </li>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following page, the credentials are sent using a GET request. When the page is submitted, the credentials will be available in the URL. Therefore, it is possible for a malicious user to obtain the credentials via the server's access logs or by sniffing the HTTP referrer header.</p>\r\n  <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;login form&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;form method=\"GET\" action=\"https://login.example.com/myapp/login\"&gt;<br />    &lt;input type=\"text\" name=\"user\" size=25&gt;&lt;br&gt;<br />    &lt;input type=\"password\" name=\"pass\" size=25&gt;&lt;br&gt;<br />    &lt;input type=\"submit\" name=\"submit\" value=\"log in\"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following page, the credentials are sent using a POST request over SSL. When the page is submitted, the credentials will not be shown in the URL.</p>\r\n  <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;login form&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;form method=\"POST\" action=\"https://login.example.com/myapp/login\"&gt;<br />    &lt;input type=\"text\" name=\"user\" size=25&gt;&lt;br&gt;<br />    &lt;input type=\"password\" name=\"pass\" size=25&gt;&lt;br&gt;<br />    &lt;input type=\"submit\" name=\"submit\" value=\"log in\"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>\r\n  <h1>Java Communication Security Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/172c224e-c3e5-4a5f-bf7a-26fe2db406a4\">Encrypt Communication Links</a>\r\n      <li>\r\n        <a href=\"/article/32fb66b7-7055-4fa0-a9e3-168cfc829aa2\">Protect Sensitive Data Over the Network</a>\r\n        <li>\r\n          <a href=\"/article/c317a2fc-cf4b-4b21-8523-4c911afca161\">Use SSL</a>\r\n          <li>\r\n            <a href=\"/article/7cf7a8ea-d06a-4442-a2e1-3f01a86b8e8b\">Use SSL for All Sensitive Pages</a>\r\n            <li>\r\n              <a href=\"/article/076f39f5-6055-4309-a459-6072adc6d36d\">Use SSL When Transmitting Credentials</a>\r\n              <li>\r\n                <a href=\"/article/8684d833-6d1c-4b61-958f-2c6e120c5355\">Use Valid SSL Certificates</a>\r\n                <li>\r\n                  <a href=\"/article/6db5af3a-1346-4cea-931f-d0400f3f87ef\">Use Only Strong SSL Algorithms</a>\r\n                  <li>\r\n                    <a href=\"/article/e3bdbea7-92cb-4407-998a-eaa95cb955e9\">Do Not Cache Sensitive Data</a>\r\n                    <li>\r\n                      <a href=\"/article/19a025b8-9242-4ef5-896b-932828f5f654\">Do Not Place Sensitive Data in Parameters</a>\r\n                    </li>\r\n                  </li>\r\n                </li>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Communication Security Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/abd1c0b2-5557-4114-b381-f47f00a70f76\">Communication Links are Encrypted</a>\r\n      <li>\r\n        <a href=\"/article/0d1b6821-8652-43a9-922e-07e38dc07421\">Sensitive Data Is Protected Over the Network</a>\r\n        <li>\r\n          <a href=\"/article/b473157f-aa07-4822-8d35-53ec73da44f4\">SSL Is Used</a>\r\n          <li>\r\n            <a href=\"/article/2fa26367-e627-456d-8931-ac0e86a8e237\">SSL Is Used for All Sensitive Pages</a>\r\n            <li>\r\n              <a href=\"/article/a2000630-b077-45b2-9c05-5b9e2fe7dc13\">SSL is Used When Transmitting Credentials</a>\r\n              <li>\r\n                <a href=\"/article/bcc3bb74-7cdf-4704-99fd-e396c11ce3e1\">Valid SSL Certificates Are Used</a>\r\n                <li>\r\n                  <a href=\"/article/c4219e9d-09b1-404c-8390-15f6b0fd3929\">Only Strong SSL Algorithms Are Used</a>\r\n                  <li>\r\n                    <a href=\"/article/0b672255-10f6-4eb9-a886-e8ee50a927bc\">Sensitive Data Is Not Cached</a>\r\n                    <li>\r\n                      <a href=\"/article/6adf267f-db7d-4770-86c6-292f9b126874\">Sensitive Data Is Not Placed in Parameters</a>\r\n                    </li>\r\n                  </li>\r\n                </li>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Communication Security Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/1d2ac8cc-b706-4f4f-84b4-773a525a6c8d\">How to Test for Network Credential Sniffing Bugs in Java</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}