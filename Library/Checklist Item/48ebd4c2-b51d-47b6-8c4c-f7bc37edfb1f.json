{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1340936895",
      "Content_Hash": "1449615154"
    },
    "Metadata": [
      {
        "Id": [
          "48ebd4c2-b51d-47b6-8c4c-f7bc37edfb1f"
        ],
        "Id_History": [
          "48ebd4c2-b51d-47b6-8c4c-f7bc37edfb1f,ccf50b91-4cf2-4528-afb3-641cf14f9b9e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Sensitive Data Is Cleared from Memory When No Longer Used"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive Data Is Cleared from Memory When No Longer Used"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that sensitive data, such as encryption keys or private information, is maintained in memory for the bare minimum amount of time required. Check that as soon as the data is no longer used, it is purged from memory and all traces of it are eradicated, so it does not end up leaking to the swap file.</p>\r\n  <h1>Why</h1>\r\n  <p>Sensitive data residing in memory for more time than is strictly necessary is at high risk to be swapped out to disk. This could leave fragments of data available well after the application has terminated. Such data may be gathered by inspecting the contents of the disk, temporary files or the swap file.</p>\r\n  <h1>How to Check</h1>\r\n  <p>If the application handles sensitive data of any kind, use the following steps to ensure that your application properly handles sensitive data in memory: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. <li>Information that a user provides that they would not want shared with other users of the application. <li>Information that comes from an external trusted source that is not designed to be shared with users.</li></li></li>\r\n      </ul>\r\n      <li>\r\n        <p>\r\n          <strong>Identify all code that handles sensitive data. </strong>Examine your application's code base. Identify all functionality that handles sensitive data. Common places include:</p>\r\n        <ul>\r\n          <li>Authentication mechanisms <li>User management <li>All user transactions of sensitive nature</li></li></li>\r\n        </ul>\r\n        <li>\r\n          <p>\r\n            <strong>Verify that sensitive data is stored in mutable objects. </strong>Each identified piece of sensitive data should be stored in a mutable object, such as a character array. This allows the sensitive data to be overwritten in memory and not rely on the garbage collector. Verify that sensitive data is not stored in immutable objects, such as .NET strings, that do not allow their memory space to be modified after being allocated. Ensure that the memory containing the sensitive data is overwritten as quickly after use as possible. Ensure that sensitive data is not passed between function, class, or object boundaries except when absolutely necessary. Note in the examples below the difference between <strong>Byte</strong> and <strong>byte</strong>. .NET cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a <strong>Byte</strong>. However, if you overwrite a <strong>byte</strong> variable or an element inside a <strong>byte&#91;&#93;</strong>, then you have overwritten the same memory location that contains the actual data. </p>Examples of Mutable objects: <ul><li>char <li>char&#91;&#93; <li>byte <li>byte&#91;&#93;</li></li></li></li></ul>Examples of Immutable objects: <ul><li>string <li>Byte <li>Byte&#91;&#93; <li>Char</li></li></li></li></ul><li><p><strong>Verify that all instances of sensitive data are cleared. </strong>Ensure that all the memory locations where sensitive data has been stored are cleared or overwritten after their use. Setting a pointer to NULL does not clear or overwrite the memory - a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory. Example of improper removal of sensitive data:</p><pre>char&#91;&#93; ssn = GetSocialSecurity();<br />...<br />//insufficient for removing sensitive data from memory<br />ssn = null;</pre><p>Example of proper removal of sensitive data:</p><pre>char&#91;&#93; ssn = GetSocialSecurity();<br />...<br />//proper clearing of character array to remove sensitive data from memoryfor(int i=0; i&lt;ssn.Length; i&#43;&#43;)<br />&#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ssn&#91;i&#93; = ' ';<br />&#125;<br />ssn = null;</pre></li></li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code makes a use of a password. Although the pointer to the string is removed and garbage collection is called, .NET does not guarantee the data will be erased.</p>\r\n  <p />\r\n  <pre>string pass = GetPassword();<br />...<br />pass = null;GC.Collect();</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about .NET data types, visit: <a href=\"http://msdn.microsoft.com/en-us/magazine/cc301569.aspx\">.NET: Type Fundamentals</a>.</li>\r\n  </ul>\r\n  <h1>Related Guideline</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/23c21386-b64a-4872-8727-714977ba84a4\">Guideline: Clear Sensitive Data from Memory when No Longer Used </a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}