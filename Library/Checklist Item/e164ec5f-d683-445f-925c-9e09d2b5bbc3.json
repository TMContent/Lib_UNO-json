{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-409264567",
      "Content_Hash": "-126102272"
    },
    "Metadata": [
      {
        "Id": [
          "e164ec5f-d683-445f-925c-9e09d2b5bbc3"
        ],
        "Id_History": [
          "e164ec5f-d683-445f-925c-9e09d2b5bbc3,15f546cd-ecfd-4da7-a206-a4225b735dce,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "All Database Input Is Validated"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "All Database Input Is Validated"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure all input is validated before it is passed to the database.</p>\r\n  <h1>Why</h1>\r\n  <p>Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities&nbsp;that could allow an attacker to gain unauthorized access to sensitive data.</p>\r\n  <h1>How To Check</h1>\r\n  <p>Follow these steps to ensure that all input passed to database is validated:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sources of input to the database. </strong>An application can have various sources of input. Each of these sources is an entry point to your application and can potentially be used to break your application's security model. Determine all sources of input&nbsp;that&nbsp;are eventually pushed to the database.</p>\r\n      <p>Potential sources of input in a web application typically include:</p>\r\n      <ul>\r\n        <li>URL based parameters </li>\r\n        <li>Form based parameters </li>\r\n        <li>Hidden fields </li>\r\n        <li>Query string parameters </li>\r\n        <li>Cookies </li>\r\n        <li>HTTP headers </li>\r\n        <li>Data stored on the local filesystem </li>\r\n        <li>Database </li>\r\n        <li>Other related services</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that validators have been used to check the input. </strong>Check that a content-specific validator has been placed at each entry point.<br />Each database input source should have a data validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing. If a database input source does not have a validation routine associated with it, flag it for fixing.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure that type-safe parameters are used with stored procedures and/or queries. </strong>Check that type-safe parameters are used with stored procedures and queries, instead of using the input values directly in constructing dynamic SQL queries as the latter is highly prone to SQL injection. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure that database entry paths have been audited. </strong>Get a 3rd party reviewer to verify that all the database input paths have been identified and that validators have been correctly implemented for all entry points.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>How To Fix</h1>\r\n  <p>To properly validate input passed to database:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify application inputs.</strong> Potential sources of input include:</p>\r\n      <ul>\r\n        <li>URL based parameters </li>\r\n        <li>Form based parameters </li>\r\n        <li>Hidden fields </li>\r\n        <li>Cookies </li>\r\n        <li>Local filesystem </li>\r\n        <li>JavaScript variables</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify database entry points.</strong> Find all the locations in the system where data is pushed into the database, either directly via queries, or indirectly (via log entries, etc). Trace all database entry points to find all the paths which can contain external input.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Create a set of validators.</strong> Build a set of validators that work with the data in question and fit into the system architecture, including your general validation scheme for other data and the way the system interacts with the database. Using the Validate Input for Length, Range, Format, and Type guideline, determine the appropriate validation at each validator. Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the system, and allows for easy auditing. Place the validators along the database input paths, ideally as close to the initial data input as possible. All data should pass through the validators before being transmitted to the database servers.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use Type-Safe parameters in SQL statements.</strong> Stored procedures and Parameterized queries improve your application's robustness against SQL injection based attacks. Consult the guideline Use Type Safe SQL Parameters When Constructing SQL Queries.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Audit your entry paths.</strong> Before going into production, have a reviewer who was not responsible for the development of the code in question check all the input paths to ensure that the validators are correctly implemented, that they are correctly applied, and that all input paths are checked.</p>\r\n    </li>\r\n  </ol>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}