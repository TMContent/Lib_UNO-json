{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1717983536",
      "Content_Hash": "883267910"
    },
    "Metadata": [
      {
        "Id": [
          "9fdc12bc-4208-4d0e-a56c-62e12b660bc0"
        ],
        "Id_History": [
          "9fdc12bc-4208-4d0e-a56c-62e12b660bc0,a7204a85-0829-4327-8990-9c53f106f538,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Connection Strings Are Protected"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Connection Strings Are Protected"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Secure database connection strings so they are not readily accessible to application users or attackers. Store these strings into configuration files and secure them.</p>\r\n  <h1>Why</h1>\r\n  <p>Connection strings include the location of the backend database, associated credentials and all other information that assists in establishing the connection between the application and its backend database server. Compromising the connection strings can aid an attacker&nbsp;in accessing&nbsp;the database server on behalf of the application.</p>\r\n  <h1>How to Check</h1>\r\n  <p>If your application connects to a backend database server, it is essential to protect your application's connection strings. Follow these steps to ensure that your application's connection strings are secured:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that connection strings are stored securely. </strong>Ensure that connection strings are handled securely throughout your application's code base. Focus your attention on the following:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Strings are not hard-coded</strong>: Verify that no connection strings are hard-coded throughout your application's code base. The following is an example of a hard-coded connection string:</p>\r\n          <pre>Connection cn = DriverManager.getConnection(\"jdbc:oracle:thin:&#64;testbox:1521:orcl2\",<br />                                            \"myapp\", \"password\");</pre>\r\n          <li>\r\n            <p>\r\n              <strong>Strings are stored into configuration file</strong>: Ensure that your application stores its connection strings into a configuration file.</p>\r\n            <li>\r\n              <p>\r\n                <strong>Configuration file is encrypted</strong>: Verify that the following pieces are in place when encrypting the configuration file:</p>\r\n              <ul>\r\n                <li>\r\n                  <p>\r\n                    <strong>Encryption Key</strong>: The encryption key is securely stored inside your application's key store. It is recommended to place the&nbsp;password for the keystore in a file separate from the other application&nbsp;properties files. This way it can have additional security compared to other application files.&nbsp;</p>\r\n                  <li>\r\n                    <p>\r\n                      <strong>Function</strong>: Your application uses AES, 3DES or any other strong symmetric encryption function.</p>\r\n                    <li>\r\n                      <p>\r\n                        <strong>Invocation</strong>: Your application invokes the <em>Cipher.init</em> and <em>Cipher.doFinal</em> methods to perform the encryption procedure.</p>\r\n                    </li>\r\n                  </li>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </ul>\r\n      <li>\r\n        <p>\r\n          <strong>Ensure configuration file has the appropriate filesystem permissions. </strong>Ensure that the configuration file can be accessed only by your application and its administrators.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Verify configuration directory is not web accessible. </strong>Verify that the configuration file is not placed into a web-accessible directory.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>To secure connection strings:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Store connection strings in a configuration file. </strong>Locate all connection strings throughout your application. Structure the code such that database connectivity is not scattered throughout your application and is handled in a centralized fashion. If possible, avoid hard-coding the connection strings. Instead, place them into a configuration file.</p>\r\n      <p>Example of a hard-coded connection string in source code:</p>\r\n      <blockquote>\r\n        <pre>Connection cn = DriverManager.getConnection(\"jdbc:oracle:thin:&#64;testbox:1521:orcl2\",<br />                                            \"myapp\", \"password\");</pre>\r\n      </blockquote>\r\n      <p>Sample configuration file in plaintext:</p>\r\n      <blockquote>\r\n        <pre>#Test config file#Tue Oct 15 13:35:01 EDT 2006connection=jdbc:oracle:thin:&#64;testbox:1521:orcl2user=myapppassword=password</pre>\r\n      </blockquote>\r\n      <p>The code for accessing the sample configuration file:</p>\r\n      <blockquote>\r\n        <pre>public Properties loadDatabaseCredentials() throws IOException&#123;<br />      Properties prop = new Properties();<br />      InputStream propStream = new FileInputStream(\"../../config/testProp.config\");<br />      prop.load(propStream);<br />      propStream.close();<br /><br />      return prop;&#125;<br /><br />public String getConnectionUrl() throws IOException&#123;<br />      Properties prop = new Properties();<br />      InputStream propStream = new FileInputStream(\"../../config/testProp.config\");<br />      prop.load(propStream);<br />      propStream.close();<br /><br />      return prop.getProperty(\"connection\");<br />&#125;</pre>\r\n      </blockquote>\r\n      <li>\r\n        <p>\r\n          <strong>Encrypt connection strings. </strong>Encrypt connection strings within the configuration file to ensure they are not exposed if the file is compromised. It is recommended to place the&nbsp;password for the keystore in a file separate from the other application&nbsp;properties files. This way it can have additional security compared to other application files.&nbsp;Example:</p>\r\n        <blockquote>\r\n          <pre>Connection cn = DriverManager.getConnection(getConnectionUrl(),<br />                                             loadDatabaseCredentials());<br /> ... <br />public static String getConnectionUrl()<br />       throws GeneralSecurityException, IOException&#123;<br />      // Set the decryption mechanism<br />      byte&#91;&#93; rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");<br />      Cipher cipher = Cipher.getInstance(\"AES\");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File(\"../../config/testProp.config\");<br />      byte&#91;&#93; tempBuff = new byte&#91;(int)configFile.length()&#93;;<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop.getProperty(\"connection\");<br />&#125;<br /><br />public Properties loadDatabaseCredentials()<br />      throws GeneralSecurityException, IOException&#123;<br />      // Set the decryption mechanism<br />      byte&#91;&#93; rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");<br />      Cipher cipher = Cipher.getInstance(\"AES\");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File(\"../../config/testProp.config\");<br />      byte&#91;&#93; tempBuff = new byte&#91;(int)configFile.length()&#93;;<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop;&#125;</pre>\r\n        </blockquote>\r\n        <li>\r\n          <p>\r\n            <strong>Protect configuration files. </strong>Make sure that appropriate security measures are taken when storing the configuration files.</p>\r\n          <ul>\r\n            <li>\r\n              <strong>Choose a configuration directory</strong>: Dedicate a directory for storing your application's configuration files. Make sure the directory is not web-accessible. This limits the scope of users&nbsp;who can potentially compromise the contents inside the directory. <li><strong>Set appropriate permissions</strong>: Apply the appropriate filesystem permissions such that the configuration files can only be accessed by your application and its administrators.</li></li>\r\n          </ul>\r\n          <li>\r\n            <p>\r\n              <strong>Encrypt the connection to the database server. </strong>Encrypting the connection between your application and the database server protects the database credentials when your application initially authenticates to the backend database. Because the implementation varies between the different brands of database servers, it is recommended to consult the server manual on how to utilize such functionality.</p>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following snippet shows the application initiating a connection with a backend database server. Because the credentials are hard-coded as parameters to the connection API, anybody with access to the source code can access the database on behalf of the application.</p>\r\n  <blockquote>\r\n    <pre>DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());<br />Connection cn = DriverManager.getConnection(getConnectionUrl(),<br />                                          \"myapp\", \"password\");</pre>\r\n  </blockquote>\r\n  <h1>Solution Example</h1>\r\n  <p>The following snippet shows the application initiating a connection with a backend database server. The application loads the database credentials from a configuration file. If an attacker compromises the source code, he cannot access the database on behalf of the application.</p>\r\n  <blockquote>\r\n    <pre>Properties prop = loadDatabaseCredentials();<br />DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());<br />Connection cn = DriverManager.getConnection(getConnectionUrl(), prop);<br /> ... <br />public Properties loadDatabaseCredentials()<br />      throws GeneralSecurityException, IOException&#123;<br />      // Set the decryption mechanism<br />      byte&#91;&#93; rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");<br />      Cipher cipher = Cipher.getInstance(\"AES\");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File(\"../../config/testProp.config\");<br />      byte&#91;&#93; tempBuff = new byte&#91;(int)configFile.length()&#93;;<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop;<br />&#125;</pre>\r\n  </blockquote>\r\n  <h1>Java Data Access Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/d2809cce-1af2-4896-a45c-b4b56deae282\">Use Parameterized APIs for Data Access</a>\r\n      <li>\r\n        <a href=\"/article/bcfcbcbb-4bd6-4011-9e24-efa70d4a3724\">Parameterize Dynamic SQL in Stored Procedures</a>\r\n        <li>\r\n          <a href=\"/article/5427d358-17f6-4ef6-948f-d670c5aefc38\">Enforce Strong SQL Passwords</a>\r\n          <li>\r\n            <a href=\"/article/697891eb-5d97-44fa-a6eb-625f247f622d\">Use Least Privileged Accounts for Database Access</a>\r\n            <li>\r\n              <a href=\"/article/159a8710-263c-4612-b9d8-ba3943f8286f\">Allow Only Trusted Hosts to Connect to Database Server</a>\r\n              <li>\r\n                <a href=\"/article/0aaa1b15-8bdb-4486-9171-4eb3c2159829\">Protect Connection Strings</a>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Data Access Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/d5a1c94b-601e-4e2a-9ad8-33461792a8bb\">Parameterized APIs Are Used for Data Access</a>\r\n      <li>\r\n        <a href=\"/article/93d15ca4-c950-4370-8de5-cdb2cc2974fe\">Dynamic SQL in Stored Procedures Is Parameterized</a>\r\n        <li>\r\n          <a href=\"/article/73c2f6fa-3c97-452e-8163-7215bd995d58\">Strong SQL Passwords Are Enforced</a>\r\n          <li>\r\n            <a href=\"/article/61af51d9-58f8-4ddf-a373-0b67ea8e6d4b\">Least Privileged Accounts Are Used for Database Access</a>\r\n            <li>\r\n              <a href=\"/article/54026187-bcbd-433b-a895-21d66b543052\">\r\n                <a href=\"/article/54026187-bcbd-433b-a895-21d66b543052\">Only Trusted Hosts Are Allowed to Connect to Database Server</a>\r\n              </a>\r\n              <li>\r\n                <a href=\"/article/9fdc12bc-4208-4d0e-a56c-62e12b660bc0\">Connection Strings Are Protected</a>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Data Access Code Examples</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/5f55ac00-bb90-439e-a5fd-a85e9a327175\">Use Stored Procedures</a>\r\n      <li>\r\n        <a href=\"/article/e3d7a7be-68a1-47ab-a515-54053d9171a4\">Use Named Queries with Hibernate</a>\r\n        <li>\r\n          <a href=\"/article/d4645b55-6da1-4c3c-9e9f-bed1d021ed56\">Use Named Queries with Java Persistence API (JPA)</a>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}