{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "878679807",
      "Content_Hash": "2094267643"
    },
    "Metadata": [
      {
        "Id": [
          "15880c2e-33cb-4bde-9744-5f9239c7f03d"
        ],
        "Id_History": [
          "15880c2e-33cb-4bde-9744-5f9239c7f03d,09ff0fad-2a15-409c-8af1-d87ea7f66dbd,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Plaintext Sensitive Data Is Not Stored"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Plaintext Sensitive Data Is Not Stored"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>In applications that accept or process sensitive or private data, it is essential to ensure that it is not stored in plaintext form. No one except the owner and other authorized parties should have access to private data.</p>\n  <h1>Why</h1>\n  <p>Sensitive&nbsp;user data can be compromised if stored in plaintext. Unauthorized access by users or attackers can lead to information disclosure.</p>\n  <h1>How to Check</h1>\n  <p>In applications that accept or process user-sensitive or private data, it is essential to ensure that such important data is not stored in plaintext form, so that no one except the owning user and other authorized parties have access to the data. In order to prevent disclosure of such sensitive data,&nbsp;do the following:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Sensitive data can be defined as follows: </p>\n    </li>\n    <ul>\n      <li>Information that either contains personally identifiable information or that&nbsp;can be used to derive personally identifiable information that should not be shared with others. <li>Information that a user provides that they would not want shared with other users of the application. <li>Information that comes from an external trusted source that is not designed to be shared with users.<li>Some industries, such as health care and banking, have regulatory standards that define sensitive information.&nbsp;If any&nbsp;regulatory requirements&nbsp;apply to your application that&nbsp;define sensitive data, use those definitions. </li></li></li></li>\n    </ul>\n    <li>\n      <p>\n        <strong>Verify that sensitive data is stored securely. </strong>Ensure that your application stores sensitive data using one of the following approaches: </p>\n      <ul>\n        <li>\n          <p>\n            <strong>Hashing. </strong>Hashing is a one-way mechanism for storing sensitive data in a non-retrievable way. If your application uses hashing as a means for storing sensitive data, verify that the following pieces are in place:</p>\n          <ul>\n            <li>\n              <strong>Salt</strong>: Check if your application generates its salt using the SecureRandom class. <li><strong>Function</strong>: Check if your application uses SHA-256, SHA-384, or SHA-512 as its hash function. <li><strong>Invocation</strong>: Check if your application invokes the <strong>HMAC.ComputeHash</strong> method to perform the hashing procedure. <li><strong>Clean-up</strong>: Check if your application securely cleans up all instances of the sensitive data after the hashing procedure has been completed. Consult the <a href=\"/article/48ebd4c2-b51d-47b6-8c4c-f7bc37edfb1f\">Sensitive Data is Cleared from Memory when No Longer Used</a> checklist for more details.</li></li></li></li>\n          </ul>\n          <li>\n            <p>\n              <strong>Encryption.</strong> Encryption is a mechanism for storing sensitive data in a retrievable way. If your application uses encryption a as means for storing sensitive data, verify that the following pieces are in place:</p>\n            <ul>\n              <li>\n                <strong>Encryption Key</strong>: Verify that your application's encryption keys are securely stored inside your application's key store. Consult the <a href=\"/article/f45de1f9-3801-4677-966e-433241bfdd91\">A Secure Key Storage Location is Used</a> checklist for more details. <li><strong>Function</strong>: Check if your application uses AES, 3DES, or any other strong symmetric encryption function. <li><strong>Invocation</strong>: Check if your application invokes the <strong>SymmetricAlgorithm.Create</strong> and <strong>ICryptoTransform.TransformFinalBlock</strong> methods to perform the encryption procedure. <li><strong>Clean-up</strong>: Check if your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed. Consult the <a href=\"/article/48ebd4c2-b51d-47b6-8c4c-f7bc37edfb1f\">Sensitive Data is Cleared from Memory when No Longer Used</a> checklist for more details.</li></li></li></li>\n            </ul>Additionally, consult the <a href=\"/article/693e1ae5-e381-41fd-93f7-844aaeca3ef8\">Sensitive Data Inside Configuration Files is Protected</a> and <a href=\"/article/31a429d7-7d9e-41a9-83c0-39fb8409e1bf\">Sensitive Data is Encrypted in the Database</a> checklists for encrypting data inside your application's configuration files and backend database servers.</li>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>An ASP.NET application contains the following <strong>appSettings</strong> element in its web.config file:</p>\n  <pre>&lt;appSettings&gt;<br />    &lt;add key=\"Name\" value=\"John Doe\" /&gt;<br />    &lt;add key=\"SSN\" value=\"123-45-6789\" /&gt;<br />&lt;/appSettings&gt;</pre>\n  <p>Since the name and social security number are in plaintext they would be easily readable by any attacker who gains access to the server.</p>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information about supported cryptography, visit: Documentation for <a href=\"http://msdn2.microsoft.com/en-us/library/system.security.cryptography(vs.80).aspx\">System.Security.Cryptography Namespace</a> in MSDN.</li>\n  </ul>\n  <h1>Related Guideline</h1>\n  <ul>\n    <li>\n      <a href=\"/article/c6f3e32d-57b8-44cf-818a-c346d0014c06\">Guideline: Do Not Store Plaintext Sensitive Data</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}