{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1815563185",
      "Content_Hash": "846633185"
    },
    "Metadata": [
      {
        "Id": [
          "d8e1901b-7afb-461b-a9f7-bb4d49c5d472"
        ],
        "Id_History": [
          "d8e1901b-7afb-461b-a9f7-bb4d49c5d472,d94c2451-8abc-47a2-995e-0c2da9b30c51,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Semaphores Are Used Correctly"
        ],
        "Category": [
          "Concurrency"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Semaphores Are Used Correctly"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Check For ##\r\n\r\nVerify that acquires and releases are balanced when using semaphors.\r\n\r\n\r\n## Why ##\r\n\r\nIf a semaphore becomes unbalanced it could either block system execution (too many acquires) or it could allow too many threads to access a resource (too many releases). Other reference counting mechanisms could cause other unexpected results such as memory leaks or release of interfaces before your code is done using them.\r\n\r\n\r\n## How to Check ##\r\n\r\nUse the following steps to verify that acquires and releases are balanced when using semaphors:\r\n\r\n1. **Trace execution paths.** Trace each execution path and verify that each acquire is matched with a release.\r\n\r\n2. **Check error paths.** Pay particular attention to error paths. Trace all error paths to verify that each acquire is matched with a release.\r\n\r\n\r\n## How to Fix ##\r\n\r\nPerform the following actions to assure that semaphores are used correctly:\r\n\r\n1. **Trace execution paths.** Trace your execution paths to make sure that each aquire is matched with a release. It is easiest to do this if the match is always made in the same function so that you don't have to trace between multiple functions or components. In the case of a semaphore it is best practice to use the resource for as little time as possible so matching a release closely to an acquire can help you kill two birds with one stone. \r\n\r\n2. **Check error paths.** Be especially careful with error paths. When using exceptions place the release call in a finally block to ensure it is called in the course of normal execution or in the case of an exception. When using normal error handling logic, ensure that each return path out of a function releases the correct number of references.\r\n\r\n\r\n## Problem Example ##\r\n\r\nIn the following example, the semaphore is acquired before the read call and is released after the parseBuffer call. However, it is not released in the case of an error with the read.\r\n\r\n\tbool ReadFromSocket(SOCKET socket, char *recvBuffer, int len)\r\n\t{\r\n\t//first read from the socket\r\n\tgSemaphore.Aquire();\r\n\tint ret = read(socket, recvBuffer, len, 0);\r\n\r\n\r\n\tif (ret >= 0)\r\n\t{\r\n\t  //now parse the buffer\r\n\t  parseBuffer(recvBuffer, len);\r\n\t  gSemaphore.Release();\r\n\t  return true;\r\n\t}\r\n\telse\r\n\t{\r\n\t  //can call WSAGetLastError if we need error details\r\n\t  return false;\r\n\t}\r\n\t}\r\n\r\n\r\n## Solution Example ##\r\n\r\nIn the following example, the semaphore is acquired before the read call and is released after the parseBuffer call and also in the error handler.\r\n\r\n\tbool ReadFromSocket(SOCKET socket, char *recvBuffer, int len)\r\n\t{\r\n\t//first read from the socket\r\n\tgSemaphore.Aquire();\r\n\tint ret = read(socket, recvBuffer, len, 0);\r\n\r\n\r\n\tif (ret >= 0)\r\n\t{\r\n\t  //now parse the buffer\r\n\t  parseBuffer(recvBuffer, len);\r\n\t  gSemaphore.Release();\r\n\t  return true;\r\n\t}\r\n\telse\r\n\t{\r\n\t  gSemaphore.Release();\r\n\t  return false;\r\n\t}\r\n\t}"
        ]
      }
    ]
  }
}