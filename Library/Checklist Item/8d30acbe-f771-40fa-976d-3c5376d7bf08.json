{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-97574164",
      "Content_Hash": "-1562778495"
    },
    "Metadata": [
      {
        "Id": [
          "8d30acbe-f771-40fa-976d-3c5376d7bf08"
        ],
        "Id_History": [
          "8d30acbe-f771-40fa-976d-3c5376d7bf08,4c44a864-43ac-4cf3-9d46-b47ed837f5c6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Sensitive User Data Is Not Logged"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive User Data Is Not Logged"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Check that you do not log any sensitive data that a user submits to your site.&amp;nbsp; Check for intentional logging as well as side effects caused by design issues.&amp;nbsp; Examples of sensitive data include:</p>\r\n  <ul>\r\n    <li>User Credentials <li>Social Security number or other identifying information <li>Credit card numbers or other financial information <li>Health information <li>Private keys or other data that could be used to decrypt encrypted information <li>System or application information that can be used to more effectively attack the application</li></li></li></li></li></li>\r\n  </ul>\r\n  <h1>Why</h1>\r\n  <p>Permission to view log data doesn't imply permission to view sensitive customer data.&amp;nbsp; By logging sensitive data you may be putting it in the hands of a user that would otherwise be unable to access it.</p>\r\n  <h1>How to Check</h1>\r\n  <p>To check for this problem, use the following steps:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive data in your application.</strong> In the design phase, create a list of all sensitive user data your system handles.&amp;nbsp; Include composite data elements which are sensitive in combination, like multi-part registration credentials or fields which together uniquely identify an individual.&amp;nbsp; Remember that sensitive data can come in a wide variety of formats.&amp;nbsp; Names of customers, government issued ID numbers, credit card or other financial information, passwords, and private keys are all examples of sensitive information.&amp;nbsp; Some industries, such as health care and banking, have regulatory standards that define sensitive information.&amp;nbsp; Use regulatory requirements, as they apply to your application, to identify sensitive data.&amp;nbsp; In general sensitive data can be defined as follows: </p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with users. <li>Information that a user provides that they would not want shared with other users of the application. <li>Information that comes from an external trusted source that is not designed to be shared with users. </li></li></li>\r\n      </ul>\r\n      <li>\r\n        <p>\r\n          <strong>Check your application's logging.</strong> Check your source code to ensure you are not logging information you have identified as sensitive.&amp;nbsp; Pay special attention to error handling code, these often will unexpectedly log sensitive data.</p>\r\n        <p>Run through your key user scenarios and then check the logs themselves for sensitive information.&amp;nbsp; Be sure to test error scenarios in order to test your error logging code.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Check logging on external systems.</strong> If your application relies on other systems, understand what data they log and design your system so that sensitive values are not accidentally captured.&amp;nbsp; Keep in mind that these interactions may be transparent within the application's code, such as HTTP server logs which record all values in a GET request. </p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>When designing a logging architecture for your application, pay special attention to components that will handle sensitive data.&amp;nbsp; Design logging systems for these components so that they do not collect sensitive data.&amp;nbsp; When recording transactions inside your system, log only the minimum amount of information needed.&amp;nbsp; If you're logging a new order from a customer, log only the time, customer ID, and order ID.&amp;nbsp; Information like customer names, items ordered, or payment information can be reconstructed from transaction records and can be left out of the logging system. </p>\r\n  <p>Take special care with error logs, which are a frequent cause of problems.&amp;nbsp; If you create a log event when an exception occurs or when a SQL transaction is rolled back, be sure to sanitize any sensitive information that might exist in the exception context or SQL error before logging it.&amp;nbsp; It's ok to have a verbose logging mode for use when debugging a system, but ensure that verbose logging is not turned on in production.&amp;nbsp; If a problem occurs in production which requires the use of verbose logging, treat any logs generated as sensitive information.&amp;nbsp; If it's likely that this is going to happen, design the logging system to segregate and protect sensitive data. </p>\r\n  <h1>Problem Example</h1>\r\n  <p>An ASP.NET application implements and online order entry system.&amp;nbsp; Customers connect to the web front end and place their orders, which are stored in a database for later fulfillment.&amp;nbsp; There are three logging systems, the HTTP logs from IIS and the application health monitoring logs, both on the front end web application server, and the SQL transaction log on the database server. </p>\r\n  <ul>\r\n    <li>\r\n      <p />HTTP requests are made via a mixture of GETs and POSTs, with the result that a number of pieces of sensitive data regularly appear in the web server logs. <p /><li><p>Exceptions are logged verbosely and without any filtering, so any and all user data in scope at the time of the exception ends up in the health monitoring log.&amp;nbsp; Also, SQL transaction rollbacks log all query data for debugging purposes, resulting in even more sensitive information being logged. </p><li><p>Inside the stored procedures on the database side, all transactions are written to a log table for debugging purposes.&amp;nbsp; The entries in the log table contain all the details of the transaction, so any support personnel with access to the transaction log can see all customer information. </p></li></li></li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <p>An ASP.NET application implements an online order entry system.&amp;nbsp; Customers connect to the web front end and place their orders, which are stored in a database for later fulfillment.&amp;nbsp; There are three logging systems, the HTTP logs from IIS and the application health monitoring logs, both on the front end web application server, and the SQL transaction log on the database server. </p>\r\n  <ul>\r\n    <li>\r\n      <p>To sanitize the web server logs, all HTTP requests which have sensitive information in them take place via POST, not GET.&amp;nbsp; This way, sensitive data will not be logged by the web server. </p>\r\n      <li>\r\n        <p>The application health monitoring logs are slightly more complicated.&amp;nbsp;&amp;nbsp;The application logs only that an exception or SQL error occurred and the context in which it happened.&amp;nbsp; Depending on the system design chosen, you may have two separate log handlers; a more verbose one which can be used when you can determine that no sensitive data can be logged, and a default, less verbose handler.&amp;nbsp; If you need detailed debugging dumps, you can write them out to a file which is ACLd to prevent users who should not have access to the information in question from reading them.&amp;nbsp; In higher security environments, you might use a separate encrypted remote logging facility instead.&amp;nbsp; </p>\r\n        <li>\r\n          <p>The database logs are&amp;nbsp;simplified so they contain only a timestamp, order ID, and possibly a user ID for each transaction.&amp;nbsp; This keeps your data normalized and means that users with appropriate privileges retrieve all the data, while administrators or support personnel can see only basic information. </p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}