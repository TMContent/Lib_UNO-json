{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1310672980",
      "Content_Hash": "-366841990"
    },
    "Metadata": [
      {
        "Id": [
          "209b61a1-022d-4574-ad70-293b9a1a5a86"
        ],
        "Id_History": [
          "209b61a1-022d-4574-ad70-293b9a1a5a86,e79c0b8a-0e8d-4311-b9b5-ce8bfa8fec88,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Generic Error Pages with Harmless Messages Are Returned to the Client"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Generic Error Pages with Harmless Messages Are Returned to the Client"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Check to ensure that error messages to the client don't result in disclosure of sensitive application details such as:</p>\r\n  <ul>\r\n    <li>Code structure <li>Database structure <li>Connection strings <li>Credentials</li></li></li></li>\r\n  </ul>\r\n  <h1>Why</h1>\r\n  <p>Disclosing application details may give an attacker just the information he needs to succeed in exploiting a vulnerability in your application.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Check to ensure that the&nbsp;<b>mode</b> attribute of the &lt;<b>customErrors</b>&gt; element to <b>On</b>, so that all callers receive filtered exception information. Check to ensure that the &lt;<b>customErrors</b>&gt; section of the Web.config file has been set to specify a default error page to display.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>When exceptions occur, return concise error messages to the client and log specific details on the server. Do not reveal internal system or application details, such as stack traces, SQL statement fragments, and table or database names to the client. Ensure that this type of information is not allowed to propagate to the end user or beyond your current trust boundary. A malicious user could use system-level diagnostic information to learn about your application and probe for weaknesses to exploit in future attacks. </p>\r\n  <p>Prevent detailed error messages from displaying by setting the <b>mode</b> attribute of the &lt;<b>customErrors</b>&gt; element to <b>On</b>, so that all callers receive filtered exception information. Do not use <b>mode=\"Off\"</b> because this allows detailed error pages intended for application developers that contain system-level information to be returned to the client.</p>\r\n  <p>You should also use the &lt;<b>customErrors</b>&gt; section of the Web.config file as shown in the following code example to specify a default error page to display, along with other required error pages for specific HTTP response codes that indicate errors.</p>\r\n  <pre>&lt;customErrors mode=\"On\" defaultRedirect=\"ErrDefault.aspx\"&gt;<br />    &lt;error statusCode=\"401\" redirect=\"ErrUnauthorized.aspx\" /&gt;<br />    &lt;error statusCode=\"404\" redirect=\"ErrPageNotFound.aspx\" /&gt;<br />    &lt;error statusCode=\"500\" redirect=\"ErrServer.htm\" /&gt;<br />&lt;/customErrors&gt;</pre>\r\n  <p>The <b>defaultRedirect</b> attribute allows you to use a custom error page for your application, which. for example, might include support contact details. Use these application-wide error pages to provide user-friendly responses for errors that are not caught in a structured event handling.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>An ASP.NET application has code to connect to a SQL database.&nbsp; However, the application does not have a generic error page specified.&nbsp; As a result, when the connection times out application details are revealed to the client in the exception.</p>\r\n  <p>\r\n    <strong>Description: </strong>An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. </p>\r\n  <p />\r\n  <b>Exception Details: </b>System.Data.SqlClient.SqlException: An error has occurred while establishing a connection to the server. &nbsp;When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified) <p><b>Source Error:</b></p><table><tbody><tr><td><pre><br />Line 216:<br />Line 217:            if (conn.State &#33;= ConnectionState.Open)<br />Line 218:                conn.Open();<br />Line 219:<br />Line 220:            cmd.Connection = conn;</pre></td></tr></tbody></table><h1>Solution Example</h1><p>An ASP.NET application has code to connect to a SQL database.&nbsp; Since it has set the <b>mode</b> attribute of the &lt;<b>customErrors</b>&gt; element to <strong>On </strong>only generic error information is displayed when the SQL connection times out.</p><h1>Related Items</h1><ul><li><a href=\"/article/56445506-9e81-4e20-8562-52d11bf7408b\">Return Generic Error Pages with Harmless Messages to the Client</a></li></ul><hr /><p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}