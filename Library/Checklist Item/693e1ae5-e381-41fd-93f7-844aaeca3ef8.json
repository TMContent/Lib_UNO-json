{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1789866",
      "Content_Hash": "1938104129"
    },
    "Metadata": [
      {
        "Id": [
          "693e1ae5-e381-41fd-93f7-844aaeca3ef8"
        ],
        "Id_History": [
          "693e1ae5-e381-41fd-93f7-844aaeca3ef8,216eed1f-efde-4bd1-a300-2be5ffd6dda5,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Sensitive Data Inside Configuration Files Is Protected"
        ],
        "Category": [
          "Hardening"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive Data Inside Configuration Files Is Protected"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that&amp;nbsp;all sensitive data stored within configuration files is protected.</p>\r\n  <h1>Why</h1>\r\n  <p>Configuration sections typically contain privacy-sensitive resource access credentials (e.g., a connection string for a SQL server resource includes a username and password). As a precautionary measure, they should not be stored in plaintext, because an attacker that can compromise a server or otherwise obtain a copy of the file will be able to read those values if they are not adequately protected.</p>\r\n  <h1>How to Check</h1>\r\n  <p>To verify that sensitive data inside configuration files is protected use the following steps:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sensitive data. </strong>Locate all sensitive data that is stored inside the configuration files. Examples of sensitive data include, but are not limited to:</p>\r\n      <ul>\r\n        <ul>\r\n          <li>credentials <li>connection strings <li>encryption keys <li>hashing salts <li>directory paths </li></li></li></li></li>\r\n        </ul>\r\n        <li>\r\n          <p>The following sections inside <strong>web.config</strong> are known to frequently contain sensitive data:</p>\r\n          <ul>\r\n            <li>appSettings <li>connectionStrings <li>identity <li>sessionState</li></li></li></li>\r\n          </ul>\r\n          <li>\r\n            <p>However, the following sections inside web.config <strong>cannot</strong> be encrypted:</p>\r\n            <ul>\r\n              <li>processModel <li>runtime <li>mscorlib <li>startup <li>system.runtime.remoting <li>configProtectedData <li>satelliteassemblies <li>cryptographySettings <li>cryptoNameMapping <li>cryptoClasses </li></li></li></li></li></li></li></li></li></li>\r\n            </ul>\r\n          </li>\r\n        </li>\r\n      </ul>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that sensitive data is encrypted. </strong>Encrypting the sensitive data inside the configuration file ensures its confidentiality in case this file is compromised. Once the application accesses the configuration file, it should decrypt the sensitive data just before use. Once you have located your sensitive data in web.config it should look like the following:</p>\r\n        <pre>&lt;connectionStrings&gt;<br />  &lt;EncryptedData&gt;<br />    &lt;CipherData&gt;<br />      &lt;CipherValue&gt;GHAFQEW234A21...&lt;/CipherValue&gt;<br />    &lt;/CipherData&gt;<br />  &lt;/EncryptedData&gt;<br />&lt;/connectionStrings&gt;</pre>\r\n        <li>\r\n          <p>\r\n            <strong>Check that credentials for Windows impersonation are encrypted using the aspnet_setreg utility. </strong>The web.config should be altered to point to the appropriate registry keys that contain the encrypted credentials. For example:</p>\r\n          <pre>&lt;identity impersonate=\"true\" userName=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,userName\"<br />                             password=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,password\"/&gt;</pre>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following segment illustrates the configuration sections of web.config responsible for providing a database connection and the valid credentials for Windows impersonation. Unfortunately, the information inside web.config is in plaintext; therefore, anybody with access to the configuration file will be able to obtain the credentials.</p>\r\n  <pre>...<br />&lt;connectionStrings&gt;<br />  &lt;add name=\"Pubs\" connectionString=\"Server=localhost;Integrated Security=True;Database=Pubs\"<br />   providerName=\"System.Data.SqlClient\"/&gt;<br />  &lt;add name=\"Northwind\" connectionString=\"Server=localhost;Integrated Security=True;Database=Northwind\"<br />    providerName=\"System.Data.SqlClient\"/&gt;<br />&lt;/connectionStrings&gt;<br />...<br />&lt;identity impersonate=\"true\" userName=\"testAcct\" password=\"testPass\"/&gt;<br />...</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about the <strong>aspnet_setreg</strong> utility, visit: <a href=\"http://support.microsoft.com/kb/329290\">How to use the ASP.NET utility to encrypt credentials and session state connection strings</a>. <li>To learn more how to configure HttpForbiddenHandler, visit: <a href=\"http://support.microsoft.com/kb/815152\">HOW TO: Use ASP.NET to Protect File Types</a>.</li></li>\r\n  </ul>\r\n  <h1>Related Guideline</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/faada3f5-3f50-42fc-b863-5058e3d848cb\">Guideline: Protect Sensitive Data Inside Configuration Files</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}