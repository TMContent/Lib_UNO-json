{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-539334405",
      "Content_Hash": "1205026047"
    },
    "Metadata": [
      {
        "Id": [
          "e7d2ddf8-f907-4c01-b901-99436f19c4c2"
        ],
        "Id_History": [
          "e7d2ddf8-f907-4c01-b901-99436f19c4c2,c0e89acb-a949-4b2f-9fd9-420dd49657a9,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Code Is Not Subject to Exception Filter Issues Where the Filter Higher in the Call Stack Executes Before Code in a Finally Block."
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\n  <p>Check to ensure that code in your application is not subject to exception filter issues where the filter higher in the call stack executes before code in a finally block.</p>\n  <p />\n  <h1>How to Fix</h1>\n  <p>If your code fails to catch exceptions and your code uses impersonation, a malicious user could use exception filters to execute code that runs under the impersonated security context, even if you are reverting the impersonation in your <b>finally</b> block. This is particularly serious if your code impersonates a privileged account. If your code does not catch the exception, exception filters higher in the call stack can be executed before code in your <b>finally</b> block is executed.</p>\n  <p>If you use programmatic impersonation, use structured exception handling and put the impersonation code inside <b>try</b> blocks. Use a <b>catch</b> block to handle exceptions and to prevent exceptions propagating. Use a <b>finally</b> block to ensure that the impersonation is reverted, as shown in the following example.</p>\n  <pre>using System.Security.Principal;<br />. . .<br />WindowsIdentity winIdentity = new WindowsIdentity(\"username&#64;domainName\");<br />WindowsImpersonationContext ctx = null;<br />try<br />&#123;<br /><br />&nbsp; ctx = winIdentity.Impersonate();<br />&nbsp; // Do work.<br />&nbsp; ...<br />&#125;<br />// Do not let the exception propagate. Catch it here.<br />catch(Exception ex)<br />&#123;<br />&nbsp; ...<br />&#125;<br />finally<br />&#123;<br />&nbsp; // Stop impersonating.<br />&nbsp; ctx.Undo();<br />&#125;</pre>\n  <div>&nbsp;</div>\n  <div>By using a <b>finally</b> block, you make ensure that the impersonation token is removed from the current thread, even if an exception is generated. By preventing the exception from propagating from the <b>catch</b> block, you make sure that exception filter code higher in the call stack does not execute while the thread still has an impersonation token attatched to it.</div>\n  <blockquote>\n    <b>Note</b>&nbsp;&nbsp;&nbsp;Exception filters are supported by Microsoft Intermediate Language (MSIL) and Visual Basic .NET</blockquote>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}