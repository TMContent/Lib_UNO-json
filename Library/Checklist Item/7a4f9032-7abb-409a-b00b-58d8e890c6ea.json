{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "82705970",
      "Content_Hash": "307719466"
    },
    "Metadata": [
      {
        "Id": [
          "7a4f9032-7abb-409a-b00b-58d8e890c6ea"
        ],
        "Id_History": [
          "7a4f9032-7abb-409a-b00b-58d8e890c6ea,53387951-97ec-482a-9b65-8cb72918b19a,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Global Exception Handlers Are Used for Unhandled Exceptions"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "A Global Exception Handler Is Used for Unhandled Exceptions"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Verify that a global exception handler is used to catch unhandled exceptions.</p>\r\n  <h1>Why</h1>\r\n  <p>Unhandled exceptions can be a serious stumbling block to an application's performance and security. Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions.</p>\r\n  <h1>How to Check</h1>\r\n  <p>To verify that a global exception handler is used to catch unhandled exceptions:</p>\r\n  <ol>\r\n    <li>\r\n      <p />\r\n      <strong>Verify that a global exception handler is set.</strong>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that all code that throws exceptions is covered.</strong> Review code to make sure that all scripts that may throw exceptions are covered by the global exception handler.</p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>To use a global exception handler to for unhandled exceptions:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Define a global exception handler. </strong>Write a function that will handle all uncaught exceptions. Place this function in the error handling subsystem. The global exception handler should accept the exception object as a parameter.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Log detailed exception information.</strong> Add code to the global exception handler to get as much information as possible from the exception object that is passed as the parameter. Log the </p>\r\n        <li>\r\n          <p>\r\n            <strong>Show a simple error message.</strong> Be careful not to give away too much information to attackers. Write a simple message that lets the user know that the application has crashed, but the situation is under control. Add code that displays the error message to the global exception handler.</p>\r\n          <li>\r\n            <p />\r\n            <strong>Clean up and exit gracefully.</strong> Add code to the global exception handler to do the following as necessary: <ul><li>Close any open file handles. <li>Remove any temporary files used by the application. <li>Check file system permissions and reset them if necessary. <li>Close any open connections, including database connections. <li>Free any external resources in use.</li></li></li></li></li></ul><li><p><strong>Set the global exception handler.</strong> Set the global exception handler somewhere early on in the application flow.</p></li></li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>"
        ]
      }
    ]
  }
}