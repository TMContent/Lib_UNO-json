{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "894366583",
      "Content_Hash": "808012030"
    },
    "Metadata": [
      {
        "Id": [
          "77d4ba48-ee40-4418-ae0d-82fb3ef99509"
        ],
        "Id_History": [
          "77d4ba48-ee40-4418-ae0d-82fb3ef99509,1ab0e424-6254-4933-a481-3f6f32e524b1,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Important Security Operations Are Logged"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Important Security Operations Are Logged"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Ensure your application logs all important operations relevant to the application's security model. Such operations include, but are not limited to, authentication attempts, change of user accounts and activation of new accounts. </p>\r\n  <h1>Why</h1>\r\n  <p>A log trail of security operations can help you recognize application misuse and/or malicious activity. It can also help you track what happened in order to assess damage and improve future protections.</p>\r\n  <h1>How To Check</h1>\r\n  <p>Use the following steps to verify your application logs important security operations.</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Enumerate important operations your application performs. </strong>Review your application's architecture and security objectives to determine which operations are important to log. In general, you should log anything that can help you recognize or track malicious attack on your system. This could include:</p>\r\n      <ul>\r\n        <li>\r\n          <strong>Authentication attempts:</strong> Verify that&nbsp;your application logs all authentication attempts whether they are successful or not. You may choose to include additional information such as remote host IP/name. Logging authentication attempts provides a record when accounts have been compromised or your application has been used for malicious activities. </li>\r\n        <li>\r\n          <strong>Account changes:</strong> Verify&nbsp; that your application logs all changes made to a user's account. Such changes include, but are not limited to, change of password/PIN, account details, and contact information. Such logs are useful when tracking the damage caused by a breach or when enforcing a lockout policy. </li>\r\n        <li>\r\n          <strong>Transactions performed by logged-in users:</strong> Verify that&nbsp;your application logs all transactions performed by a logged-in user that have some value. For instance, you should log e-commerce purchases since they have monetary value. It is also recommended to log the occurrence of user transactions when sensitive data is involved; however, do not log the actual sensitive data. </li>\r\n        <li>\r\n          <strong>Creation, activation, and locking/unlocking of accounts:</strong> Verify that your application logs all operations regarding the creation, activation, and lockout of users. Logged information should include remote IP and a valid e-mail address. These logs can be useful when investigating compromised accounts and non-legitimate users. </li>\r\n        <li>\r\n          <strong>System and security related administrative operations:</strong> Verify that&nbsp;your application logs all events pertaining to the overall wellness of your application. Examples of such would be configuring, starting and terminating your application, auditing events, etc. </li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the logging mechanism. </strong>Determining the logging mechanism ensures that you understand what information is being logged and&nbsp;where. Whenever possible, ASP.NET Health Monitoring should be used for logging. Code which uses of Health Monitoring will contain references to one or more event providers (sinks for generated log data) which inherit from <em>System.Web.Management.WebEventProvider</em>, and one or more events (classes which capture log data) which inherit from <em>System.Web.Management.WebAuditEvent</em>. If an ad-hoc log generation mechanism is being used, you will need to trace through all the code manually to make sure that it is called at all appropriate points and that all the generated log messages actually make it to a log store.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Audit the application logs. </strong>Audit log message contents generated from important operations identified from Step 1. If there are no available logs to audit, use your application to generate logged sample data from the application's components that perform important operations. During the log audit, verify the following:</p>\r\n      <ul>\r\n        <li>\r\n          <strong>Correct logging level for each activity are used.</strong> Assigning incorrect severity level to log messages would allow malicious activities go un-noticed. </li>\r\n        <li>\r\n          <strong>Both successful and failed events are logged</strong>. Successful addition of high privilege accounts may imply attackers are able to gain access to your system. Not logging those events allow serious damage to be done. </li>\r\n        <li>\r\n          <strong>No sensitive data are logged.</strong> Verify your application does not log sensitive information such as passwords and credit card numbers.</li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <h1>How To Fix</h1>\r\n  <p>Use the following steps to log important security operations:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Determine what is important to log for your application</strong>: Review your application's architecture and security objectives to determine which operations are important to log. In general, you should log anything that can help you recognize or track malicious attack on your system. This could include:</p>\r\n      <ul>\r\n        <li>\r\n          <strong>Authentication attempts</strong>: Log all authentication attempts whether they are successful or not. You may choose to include additional information such as remote host IP/name. Logging authentication attempts provides a record when accounts have been compromised or your application has been used for malicious activities. </li>\r\n        <li>\r\n          <strong>Account changes</strong>: Log any changes made to a user's account. Such changes include, but are not limited to, change of password/PIN, account details, and contact information. Such logs are useful when tracking the damage caused by a breach or when enforcing a lockout policy. </li>\r\n        <li>\r\n          <strong>Transactions performed by logged users</strong>: Log transactions performed by a logged user that have some value. For instance, you should log e-commerce purchases since they have monetary value. It is also recommended to log the occurrence of user transactions when sensitive data is involved; however, do not log the actual sensitive data. </li>\r\n        <li>\r\n          <strong>Creation, activation, and locking/unlocking of accounts</strong>: Log any operations regarding the creation, activation, and lockout of users. Logged information should include remote IP and a valid e-mail address. These logs can be useful when investigating compromised accounts and non-legitimate users. </li>\r\n        <li>\r\n          <strong>System and security related administration events</strong>: Log any event pertaining to the overall wellness of your application. Examples of such would be configuring, starting, and terminating your application, auditing events, etc.</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Determine the required level of logging for each activity</strong>: How much information you need to log about each activity depends on what you need to be able to say about an occurrence of the activity after the fact. There are three rough levels of logging, namely tracking, verification, and non-repudiation, each of which has an increasing requirement for what needs to be logged.</p>\r\n      <ul>\r\n        <li>\r\n          <strong>Logging for tracking</strong>: Logging for tracking purposes is appropriate when you only need to provide statistical data about transactionsâ€”frequency, timing, etc. As the statistics need to be accurate, per-event logging is still appropriate, particularly if flexibility is desired in the actual statistics to be gathered. </li>\r\n        <li>\r\n          <strong>Logging for verification</strong>: Verification is slightly more in depth; all relevant basic information about the transaction should be recorded. The goal of logging at this level is to provide a full record of transactions, sufficient to manually re-create the transaction. This is the default level to log at for most business logic. </li>\r\n        <li>\r\n          <strong>Logging for nonrepudiation</strong>: Nonrepudiation is a significantly higher standard. The goal here is to ensure that, if one of the parties to a transaction disputes the transaction, proof of the validity of the transaction can be produced. Being able to provide this proof is an architecture-level issue, which will have implications for many security-relevant design issues, especially authentication, but the issue is fundamentally a logging one. The hard part for nonrepudiation is ensuring that sufficient data exists within the system. Log files designed to support nonrepudiation should include all data related to the transaction. This data should ideally include cryptographic signatures, and should itself be signed to prevent tampering, and stored securely.</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Choose a logging mechanism</strong>: Review your application's infrastructure and establish a logging mechanism that suits your application's business needs. Make sure that your application's logging mechanism meets your application's requirements as defined according to Step 1.</p>\r\n      <p>If your application has not adopted a logging framework, it is recommended to use the ASP.NET Health Monitoring component. Health Monitoring is an easy-to-use component that provides flexibility when logging application-wide events. By default, health monitoring is enabled for ASP.NET applications and all Web infrastructure error events (inheriting from <em>System.Web.Management.WebErrorEvent</em>) and all audit failure events (inheriting from <em>System.Web.Management.WebFailureAuditEvent</em>) are written to the event log. The default configuration is defined in the <em>&lt;healthMonitoring&gt;</em> element in the machine-level Web.config file. To audit additional events, you create custom event types by deriving from one of the built-in types.</p>\r\n      <p>The health monitoring feature has built-in providers that allow you to log events in an e-mail message (<em>SimpleMailWebEventProvider, TemplatedMailWebEventProvider</em>), to SQL Server (<em>SqlWebEventProvider</em>), to the event log (<em>EventLogWebEventProvider</em>), as ASP.NET trace output (<em>TraceWebEventProvider</em>), or to the Windows Management Instrumentation (WMI) Web event provider (<em>WMIWebEventProvider</em>). You can configure health monitoring in the machine or application <em>Web.config</em> file to modify the events that are logged and the way in which they are logged.</p>\r\n      <p>In-database logging can be implemented either inside the stored procedures which you use to interact with the data, or via triggers. Logging via triggers may be preferable in some cases, because alterations to the data which occur outside of stored procedures (say, via a SQL injection vulnerability) will still be logged. Care should be taken when implementing in-database logging to ensure that the process which is normally generating the log entries cannot overwrite them.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify areas of code that perform important operations</strong>: Once you understand the important operations that should be tracked, conduct a thorough review of your application's design and code. The goal of this review should be to pinpoint each component, class, and function in your system in which logging should take place.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Add logging code for both success and error conditions</strong>: Log the beginning and end of all key security operations according to the logging mechanism adopted within your application. The logging schema should include universal date/time stamps, application name, subject/user ID, event type and resource, and state whether the event was a success or failure. Be careful not to log sensitive data that should otherwise be available only to privileged users.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <em>You may find these additional articles useful</em>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/12c8bd7d-ed20-4e91-a7b3-8edaa006b491\">Log Important Security Operations</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\r\n  <h1>\r\n  </h1>\r\n  <h1>\r\n  </h1>"
        ]
      }
    ]
  }
}