{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "307955556",
      "Content_Hash": "-105766458"
    },
    "Metadata": [
      {
        "Id": [
          "f086866e-bfd1-45bd-acaa-8079b3d63849"
        ],
        "Id_History": [
          "f086866e-bfd1-45bd-acaa-8079b3d63849,1ece9532-32c7-4726-8762-d47247ba850b,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Regular Expressions Are Used to Validate Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Regular Expressions Are Used to Validate Input"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Verify that regular expressions are used to constrain input as the first step of the input validation strategy.</p>\n  <h1>Why</h1>\n  <p>A good input validation strategy is to constrain input to known valid values, reject known bad values and to sanitize the input that passes validation. Rejecting bad values is not to be relied on, because there are too many possible bad values. However, it is possible to filter out at least some bad input. Constraining input can be done effectively using regular expressions.</p>\n  <h1>How to Check</h1>\n  <p>Use the following steps to verify that regular expressions are used to constrain input:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>A regular expression library is used.</strong> C&#43;&#43; doesn't have built-in regular expression functionality, so check if a regular expression library is used. One way to do this is to check project documentation and another is to see which libraries are linked to in the project.</p>\n      <li>\n        <p>\n          <strong>Identify the input and data validation subsystem. </strong>Examine the application structure with focus on input and data validation functions to verify that a dedicated class or library exists for input and data validation functions. </p>\n        <li>\n          <p>\n            <strong>Verify that input is constrained.</strong> Examine the validation functions to make sure they constrain known valid input first using regular expressions.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>Perform the following actions to constrain input using regular expressions:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Use a regular expression library.</strong> C&#43;&#43; does not have built-in regular expression functionality. The Boost.Regex library is recommended for regular expressions with C&#43;&#43;. If your application uses managed code, .NET has a nice regular expressions API built-in as System.Text.RegularExpressions.</p>\n      <li>\n        <p>\n          <strong>Determine valid input patterns.</strong> Identify the types of valid input for your input application. For example, some input follows obvious patterns, such as social security or credit card numbers. Other types of input may have less obvious patterns, such as file names. Write regular expressions that describe valid input for your application. Some common regular expressions are listed below:</p>\n        <li>\n          <p>\n            <strong>Use regular expressions to constrain input.</strong> Use the regular expressions you have written to constrain input as the first step of your input validation strategy.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information about the Boost.Regex library, please see <a href=\"http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html\">http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html</a><li>For more information about using regular expressions, please&nbsp;see the regular expression tutorial at <a href=\"http://www.regular-expressions.info/tutorial.html\">http://www.regular-expressions.info/tutorial.html</a></li></li>\n  </ul>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/f14408bf-7874-4514-a440-48dca88c6afb\">Use Regular Expressions to Validate Input</a>\n    </li>\n  </ul>"
        ]
      }
    ]
  }
}