{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-786864546",
      "Content_Hash": "-363550469"
    },
    "Metadata": [
      {
        "Id": [
          "b64450e3-f4d7-4da2-9d15-2d4f55d606d4"
        ],
        "Id_History": [
          "b64450e3-f4d7-4da2-9d15-2d4f55d606d4,a1a15891-de5f-4d4e-8546-bddab9323085,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Use of LogonUser Is Avoided Where Possible"
        ],
        "Category": [
          "Impersonation and Delegation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Use of LogonUser Is Avoided Where Possible"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASP.NET 3.5"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<br />\n  <br />\n  <h1>What to Check For</h1>\n  <p>Check to ensure that your application avoids using&nbsp;<strong>LogonUser</strong> API to create impersonation tokens because this forces to store user names and passwords on your Web server.</p>\n  <p />\n  <h1>How to Fix</h1>\n  <p>Avoid writing code that calls the <b>LogonUser</b> API to create impersonation tokens because this forces you to store user names and passwords on your Web server. </p>\n  <p>Instead, use a unique application pool with a specific process identity if you need a specific identity to access downstream resources. If you need multiple identities to access a range of downstream resources and services, use Windows Server protocol transition and the <b>WindowsIdentity</b> constructor; this allows you to create a Windows token that is given only an account's user principal name (UPN). To access a network resource, you need to delegate-level token. To get this token type, your server needs to be configured as trusted for delegation in Active Directory.</p>\n  <p>The following code shows how to use this constructor to obtain a Windows token for a given user.</p>\n  <div>\n    <pre>using System;<br />using System.Security.Principal;<br />public void ConstructToken(string upn, out WindowsPrincipal p)&#123;<br />  WindowsIdentity id = new WindowsIdentity(upn);<br />  p = new WindowsPrincipal(id);<br />&#125;  </pre>\n  </div>\n  <blockquote>\n    <b>Note</b>&nbsp;&nbsp;&nbsp;An account's UPN is guaranteed to be unique within a forest. Frequently, the UPN is the user's e-mail address, but it does not have to be. A user always has a UPN and by default, it is <i>userlogonname</i>&#64;<i>fullyqualifieddomainname</i>. If you are logged into a domain, you can find your UPN name by running <b>whoami /upn</b> from a command window.</blockquote>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}