{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1205320265",
      "Content_Hash": "-416534192"
    },
    "Metadata": [
      {
        "Id": [
          "f45ce093-e835-4505-8e69-e03129ea6e03"
        ],
        "Id_History": [
          "f45ce093-e835-4505-8e69-e03129ea6e03,79ead163-7554-4710-a589-ba3434a37c36,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "All Sensitive Data Is Encrypted"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "All Sensitive Data Is Encrypted"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\n  <ul>\n    <li>ASP.NET 4.0</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>In applications that accept or process sensitive or private data, it is essential to ensure that it is not stored in plaintext form. No one except the owner and other authorized parties should have access to private data.</p>\n  <h1>Why</h1>\n  <p>Sensitive&nbsp;user data can be compromised if stored in plaintext. Unauthorized access by users or attackers can lead to information disclosure.</p>\n  <h1>How To Check</h1>\n  <p>In applications that accept or process user-sensitive or private data, it is essential to ensure that such important data is not stored in plaintext form, so that no one except the owning user and other authorized parties have access to the data. In order to prevent disclosure of such sensitive data,&nbsp;do the following:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Sensitive data can be defined as follows: </p>\n      <ul>\n        <li>Information that either contains personally identifiable information or that&nbsp;can be used to derive personally identifiable information that should not be shared with others. </li>\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\n        <li>Information that comes from an external trusted source that is not designed to be shared with users. </li>\n        <li>Some industries, such as health care and banking, have regulatory standards that define sensitive information.&nbsp;If any&nbsp;regulatory requirements&nbsp;apply to your application that&nbsp;define sensitive data, use those definitions. </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Determine if storage is required.</strong> The safest thing to do with sensitive information is not store it at all. Examine how much information is stored in each case and how long that information is stored for. Determine whether the information needs to be stored. Any information being stored that does not need to be should be purged and the application should be rewritten to discontinue storage of the unnecessary information. When&nbsp;sensitive information&nbsp;must be stored, establish policies about purging&nbsp;it from both primary and backup storage, and ensure that they are followed. Be careful when using caches. </li>\n    <li>\n      <p>\n        <strong>Verify that sensitive data is stored securely. </strong>Ensure that your application stores sensitive data using one of the following approaches: </p>\n      <ul>\n        <li>\n          <p>\n            <strong>Hashing. </strong>Hashing is a one-way mechanism for storing sensitive data in a non-retrievable way. If your application uses hashing as a means for storing sensitive data, verify that the following pieces are in place:</p>\n          <ul>\n            <li>\n              <strong>Salt</strong>: Check if your application generates its salt using the <em>SecureRandom</em> class. </li>\n            <li>\n              <strong>Function</strong>: Check if your application uses SHA-256, SHA-384, or SHA-512 as its hash function. </li>\n            <li>\n              <strong>Invocation</strong>: Check if your application invokes the <em>HMAC.ComputeHash</em> method to perform the hashing procedure. </li>\n            <li>\n              <strong>Clean-up</strong>: Check if your application securely cleans up all instances of the sensitive data after the hashing procedure has been completed.</li>\n          </ul>\n        </li>\n        <li>\n          <p>\n            <strong>Encryption.</strong> Encryption is a mechanism for storing sensitive data in a retrievable way. If your application uses encryption a as means for storing sensitive data, verify that the following pieces are in place:</p>\n          <ul>\n            <li>\n              <strong>Encryption Key</strong>: Verify that your application's encryption keys are securely stored inside your application's key store. </li>\n            <li>\n              <strong>Function</strong>: Make sure your application uses AES. </li>\n            <li>\n              <strong>Invocation</strong>: Check if your application invokes the <em>SymmetricAlgorithm.Create</em> and <em>ICryptoTransform.TransformFinalBlock</em> methods to perform the encryption procedure. </li>\n            <li>\n              <strong>Clean-up</strong>: Check if your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed.</li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <h1>How To Fix</h1>\n  <p>To encrypt all sensitive data:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify sensitive information.</strong> Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Sensitive data can be defined as follows: </p>\n      <ul>\n        <li>Information that either contains personally identifiable information or that&nbsp;can be used to derive personally identifiable information that should not be shared with others. </li>\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\n        <li>Information that comes from an external trusted source that is not designed to be shared with users. </li>\n        <li>Some industries, such as health care and banking, have regulatory standards that define sensitive information.&nbsp;If any&nbsp;regulatory requirements&nbsp;apply to your application that&nbsp;define sensitive data, use those definitions.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Determine if storage is required.</strong> The safest thing to do with sensitive information is not store it at all. Examine how much information is stored in each case and how long that information is stored for. Determine whether the information needs to be stored. Any information being stored that does not need to be should be purged and the application should be rewritten to discontinue storage of the unnecessary information. When&nbsp;sensitive information&nbsp;must be stored, establish policies about purging&nbsp;it from both primary and backup storage, and ensure that they are followed. Be careful when using caches.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Store sensitive data securely.</strong> Choose the appropriate cryptographic mechanism for securing sensitive data and implement it.</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Hashing.</strong> Hashing is appropriate for storing passwords. If your application stores passwords, hash and salt them for storage. It is recommended to use platform specific authentication controls for handling password storage. If custom authentication controls are required, passwords should be hashed and salted for storage. Hashing is not very useful for securing information other than passwords.</p>\n        </li>\n        <li>\n          <p>\n            <strong>Encryption.</strong> Encryption is useful for storing all types of information other than passwords. AES-256 should be used to secure sensitive data that needs to be stored. AES-256 is implemented in the System.Security.Cryptography namespace.</p>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/2080db53-ffab-4427-911e-2373a53607b9\">Encrypt All Sensitive Data</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}