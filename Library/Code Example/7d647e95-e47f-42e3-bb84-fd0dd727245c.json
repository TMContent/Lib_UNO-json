{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1458404222",
      "Content_Hash": "1970250959"
    },
    "Metadata": [
      {
        "Id": [
          "7d647e95-e47f-42e3-bb84-fd0dd727245c"
        ],
        "Id_History": [
          "7d647e95-e47f-42e3-bb84-fd0dd727245c,ea8e7afe-c1a8-43bd-87f3-9b9322dcdd40,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Add Unique Tokens to HTTP Requests Using ESAPI"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Add Unique Tokens to HTTP Requests Using ESAPI"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java\r\n\r\n\r\n## Summary ##\r\n\r\nCSRF is a powerful attack that allows an attacker to force a victim to execute functionality within an application on behalf of the attacker. The example below gives an example of how to prevent CSRF within an application that uses ESAPI.\r\n\r\n\r\n## Solution Example ##\r\n\r\nTo add unique tokens to HTTP requests using ESAPI:\r\n\r\n1. **Store a randomly generated token for each authenticated user.** Upon successful authentication of a user, store a randomly generated (using a secure pseudo-random number generator such as java.security.SecureRandom) string (token) in the HttpSession for the user.\r\n\r\n\tThe code below is in the DefaultUser class in ESAPI. If you override this class, you will need to execute a similar function\r\n\r\n\t~~~~\r\n\t/** This user's CSRF token. */\r\n\tprivate String csrfToken = resetCSRFToken();\r\n\t...\r\n\r\n\tpublic String resetCSRFToken() {\r\n\r\n\t csrfToken =\r\n\t  ESAPI.randomizer().getRandomString(64, DefaultEncoder.CHAR_ALPHANUMERICS);\r\n\r\n\t return csrfToken;\r\n\t}\r\n\t~~~~\r\n\r\n2. **Add security tokens to transaction pages.** For any function in the application representing a transaction (ie. causes a server side state change), the associated client form should have a hidden form field containing the token retrieved from the session.\r\n\r\n\t~~~~\r\n\t<form action=\"...\">\r\n\t ...\r\n\t <input id=\"<%= ESAPI.httpUtilities().CSRF_TOKEN_NAME %>\" type=\"hidden\" value=\"<%= ESAPI.httpUtilities().getCSRFToken() %>\" />\r\n\t ...\r\n\t<form>\r\n\t~~~~\r\n\r\n3. **Verify that server-side and client-side tokens match.** For any function in the application representing a transaction (ie. causes a server side state change), the associated server-side request processing code should retrieve the token from the session. It should then compare that token to the submitted token from the client for the given request. If the tokens match, the transaction may be processed. If the tokens do not match, the transaction should not be processed, and the associated request should be treated as an attack and dealt with accordingly.\r\n\r\n\t~~~~\r\n\t//in your servlet or other web request handling code\r\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t ...\r\n\t String storedToken = ESAPI.httpUtilities().getCSRFToken();\r\n\t String token = request.getParameter(ESAPI.httpUtilities().CSRF_TOKEN_NAME);\r\n\t //do check\r\n\t if (storedToken.equals(token)) {\r\n\t   //go ahead and process ... do business logic here\r\n\t } else {\r\n\t   //DO NOT PROCESS\r\n\t   ...\r\n\t   //this is to be considered a CSRF attack - handle appropriately\r\n\t  }\r\n\t}\r\n\t~~~~\r\n\r\n4. **Invalidate sessions upon logout or expiration.** Upon logout or session timeout, invalidate the session, which will in turn void the generated random token\r\n\r\n\t~~~~\r\n\t//in logout function\r\n\tsession.invalidate();\r\n\t~~~~"
        ]
      }
    ]
  }
}