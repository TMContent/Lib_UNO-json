{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "869931954",
      "Content_Hash": "-1236173539"
    },
    "Metadata": [
      {
        "Id": [
          "2dc1ab76-320b-47ec-a562-9e203d1b630f"
        ],
        "Id_History": [
          "2dc1ab76-320b-47ec-a562-9e203d1b630f,74ab443d-7046-4cb8-a34f-52220c578c8d,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[VERIFYME] Output Encoding Using SpringMVC"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Output Encoding Using SpringMVC"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>JAVA<li>SpringMVC</li></li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>Perform output encoding using SpringMVC within an application.</p>\r\n  <h1>Objectives</h1>\r\n  <p>Strong output encoding is a control that is typically used to prevent encoding (primarily XSS on the web) issues within an application. This article will describe how to use the built-in mechanisms provided by SpringMVC to perform appropriate output encoding.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>In general, SpringMVC tags perform HTML entity encoding by default (see XSS prevention cheat sheet in references) if they are configured to do so. There are a few ways to enable this mechanism (newer versions of SpringMVC have this enabled by default).</p>\r\n  <p>Enable html escaping on all form elements within the entire application. In order to do this, add this snippet to your <em>web.xml</em>.</p>\r\n  <pre>&lt;context-param&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;param-name&gt;defaultHtmlEscape&lt;/param-name&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;param-value&gt;true&lt;/param-value&gt;<br />&lt;/context-param&gt;</pre>\r\n  <p>Enable html escaping on all form elements within a single page. In order to do this, add this snippet at the top of your jsp page.</p>\r\n  <pre>&lt;spring:htmlEscape defaultHtmlEscape=\"true\" /&gt; </pre>\r\n  <p>Enable html escaping on all form elements within a single form. In order to do this, attribute your form in this way.</p>\r\n  <pre>&lt;form:input path=\"someFormField\" htmlEscape=\"true\" /&gt; </pre>\r\n  <p>\r\n    <strong>Note</strong>: An important point to be aware of is that some tags that allow you to disable the encoding performed by the tag. This is sometimes useful, the most common case being where you are allowing administrators for a site add HTML formatted messages to be displayed to users. There may also be cases where users can create formatted messages for other users. These approaches are often not handled properly to prevent XSS. However, through strong input validation, it is possible to allow users to enter limited HTML and still display that safely to users without allowing XSS. </p>\r\n  <p>You can determine if this is being done by simply looking for the <em>htmlEscape=\"false\"</em> attribute in individual SpringMVC tags. If it is set to false, then the HTML entity encoding is disabled (the default is true). </p>\r\n  <p>SpringMVC provides various mechanisms to perform output encoding. However, you must be aware of the encoding properties of the tag(s) you are using and encode appropriately for your given output context. </p>\r\n  <h1>More Information</h1>\r\n  <ul>\r\n    <li>For more information about the htmlEscape tag, please see <a href=\"http://static.springsource.org/spring/docs/2.5.x/reference/spring.tld.html#spring.tld.htmlEscape\">http://static.springsource.org/spring/docs/2.5.x/reference/spring.tld.html#spring.tld.htmlEscape</a><li>For more information about Cross-Site Scripting prevention, please see<br /><a href=\"https://www.owasp.org/index.php/XSS_&amp;#37;28Cross_Site_Scripting&amp;#37;29_Prevention_Cheat_Sheet\">https://www.owasp.org/index.php/XSS_&amp;#37;28Cross_Site_Scripting&amp;#37;29_Prevention_Cheat_Sheet</a></li></li>\r\n  </ul>\r\n  <h1>Java Data Sanitization Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/f83b953a-9b0c-406a-b274-9b2962d9c4e7\">Encode All Output Data</a>\r\n      <li>\r\n        <a href=\"/article/c929277f-5bb0-44d5-9bf5-112c55927783\">Escape All Untrusted Data in HTML Contexts in JSF</a>\r\n        <li>\r\n          <a href=\"/article/bc8de6c5-ba3a-4db5-a5ff-675c7336a2e8\">Escape All Untrusted Data in HTML Contexts in JSP</a>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Data Sanitization Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/13112146-7c14-4b6d-9e94-24daa22eefc4\">All Output Data Is Encoded</a>\r\n      <li>\r\n        <a href=\"/article/90893370-cbce-4116-b9ff-2e69dab56cfa\">All Untrusted Data in HTML Contexts Is Escaped in JSF</a>\r\n        <li>\r\n          <a href=\"/article/02c900ca-0740-412a-b685-56b13408793d\">All Untrusted Data in HTML Contexts is Escaped in JSP</a>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Data Sanitization Code Examples</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/8cc6c40a-5a4c-4d77-8900-4b896e2d3912\">Use h:outputText to Encode Echoed Input in JSF</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/a4c5ae58-6b1b-49b7-b16e-4199598f3446\">Output Encoding Using JSF</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/2dc1ab76-320b-47ec-a562-9e203d1b630f\">Output Encoding Using SpringMVC</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/f8d330df-9387-45b2-a88b-40c08d0af3c4\">Output Encoding Using Struts 1</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/9135b59f-8c73-4a4f-83c5-9894d6587cca\">Output Encoding Using Struts 2</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/f7806f64-b1c7-4990-a9e5-f6d814bae7f1\">Use ESAPI Encoder</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}