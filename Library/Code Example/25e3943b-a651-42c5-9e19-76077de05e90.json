{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1872513343",
      "Content_Hash": "1493863412"
    },
    "Metadata": [
      {
        "Id": [
          "25e3943b-a651-42c5-9e19-76077de05e90"
        ],
        "Id_History": [
          "25e3943b-a651-42c5-9e19-76077de05e90,c2b7182c-eb09-4f2d-88c5-0d976dfa0d00,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java web-based applications using JSF.\r\n\r\n\r\n## Summary ##\r\n\r\nImplementing protections that prevent Cross-Site Request Forgery (CSRF) within a JSF application.\r\n\r\n\r\n## Objectives ##\r\n\r\nCSRF is a powerful attack that allows an attacker to force a victim to execute functionality within an application on behalf of the attacker. The example below gives an example of how to prevent CSRF within a JSF application.\r\n\r\n\r\n## Scenarios ##\r\n\r\nCSRF is a type of attack that occurs when a malicious web site causes a user's web browser to perform an unwanted action on a trusted site for which the user is currently authenticated, causing the victim to perform activities on behalf of the attacker. In order to prevent CSRF, the most common effective solution currently used is the synchronizer token pattern. The flow below shows the basic steps in prevention.\r\n\r\n\r\n## Solution Example ##\r\n\r\nTo add unique tokens to HTTP requests using JSF:\r\n\r\n1. **Store a randomly generated token for each authenticated user.** Upon successful authentication of a user, store a randomly generated (using a secure pseudo-random number generator such as java.security.SecureRandom) string (token) in the HttpSession for the user.\r\n\r\n\t\t//in authentication function\r\n\t\tsession.setAttribute(\"csrfToken\", generateCSRFToken());\r\n\r\n\t\t//sample implementation of token generation\r\n\t\tpublic static String generateCSRFToken() {\r\n\t\t\tSecureRandom rng = new SecureRandom();\r\n\t\t\tint length = 64;\r\n\t\t\tString characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n\t\t\tchar[] text = new char[length];\r\n\t\t\tfor (int i = 0; i < length; i++) {\r\n\t\t\t\ttext[i] = characters.charAt(rng.nextInt(characters.length()));\r\n\t\t\t}\r\n\t\t\treturn String.valueOf(text);\r\n\t\t}\r\n\r\n2. **Add security tokens to transaction pages.** For any function in the application representing a transaction (ie. causes a server side state change), the associated client form should have a hidden form field containing the token retrieved from the session.\r\n\r\n\t\t<h:form>\r\n\t\t...\r\n\t\t<h:inputHidden id=\"token\" value=\"#{sessionScope['csrfToken']}\" />\r\n\t\t...\r\n\t\t</h:form>\r\n\r\n3. **Verify that server-side and client-side tokens match.** For any function in the application representing a transaction (ie. causes a server side state change), the associated server-side request processing code should retrieve the token from the session. It should then compare that token to the submitted token from the client for the given request. If the tokens match, the transaction may be processed. If the tokens do not match, the transaction should not be processed, and the associated request should be treated as an attack and dealt with accordingly.\r\n\r\n\t\t//in your backing bean that handles the associated request from the form above\r\n\t\tprivate String token;\r\n\r\n\t\tpublic String getToken() {\r\n\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\tpublic void setToken(String token) {\r\n\t\t\tthis.token = token;\r\n\t\t}\r\n\t\t...\r\n\r\n\t\t//method that handles form submit\r\n\t\tpublic void action() {\r\n\t\t\tFacesContext facesContext = FacesContext.getCurrentInstance();\r\n\t\t\tHttpSession session = (HttpSession) facesContext.getExternalContext().getSession(false);\r\n\t\t\tString storedToken = (String)session.getAttribute(\"csrfToken\");\r\n\r\n\t\t\t//do check\r\n\t\t\tif (storedToken.equals(token)) {\r\n\t\t\t\t//go ahead and process ... do business logic here\r\n\t\t\t} else {\r\n\t\t\t\t//DO NOT PROCESS ... this is to be considered a CSRF attack - handle appropriately\r\n\t\t\t}\r\n\t\t}\r\n\r\n4. **Invalidate sessions upon logout or expiration.** Upon logout or session timeout, invalidate the session, which will in turn void the generated random token\r\n\r\n\t\t//in logout function\r\n\t\tsession.invalidate();\r\n\r\n\r\n## Additional Resources ##\r\n\r\n* For more information about Cross-Site Request Forgery, see [https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29)\r\n* For more information about Cross-Site Request Forgery prevention, see [https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet)\r\n\r\n"
        ]
      }
    ]
  }
}