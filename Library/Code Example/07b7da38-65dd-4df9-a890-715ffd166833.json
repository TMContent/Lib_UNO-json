{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1726122595",
      "Content_Hash": "-937394673"
    },
    "Metadata": [
      {
        "Id": [
          "07b7da38-65dd-4df9-a890-715ffd166833"
        ],
        "Id_History": [
          "07b7da38-65dd-4df9-a890-715ffd166833,7acf58dc-06c6-4968-82e4-fb1e108cf7a6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[VERIFYME] Decrypt a String Using AES"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Decrypt a String Using AES"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>The purpose of this code is to demonstrate the proper use of a symmetric block cipher to decrypt strings of text within an application. This test case utilizes AES (Rijndael) which serves as the current NIST encryption standard.</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>To provide confidentiality of data which is transmitted over insecure or untrusted communication channels. </li>\r\n    <li>To provide confidentiality of data in storage until it is needed by a user or application.</li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Application developer desires confidentiality for data in storage or in transit.</li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <pre>public static string DecryptString(string ciphertext, byte[] sKey, byte[] sIV){<br /><br />    // The default AES key size under the .NET framework is 256.  The following<br />    // call will create an AES crypto provider and create a random initialization<br />    // vector and key. The crypto mode defaults to CBC ensuring the proper chaining<br />    // of data to mitigate repetition of cipher text blocks.<br />    Rijndael rijndaelAlg = Rijndael.Create();<br /><br />    //Set secret key For AES algorithm.<br />    rijndaelAlg.Key = sKey;<br /><br />    //Set initialization vector.<br />    rijndaelAlg.IV = sIV;<br /><br />    //Create a memorystream to which we'll decrypt our input string<br />    MemoryStream ms = new MemoryStream();<br />    CryptoStream ecs = new CryptoStream(ms, rijndaelAlg.CreateDecryptor(), CryptoStreamMode.Write);<br /><br />    //Because the input string is passed in as a Base64 encoded value we decode prior writing to<br />    //the decryptor stream.<br />    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);<br />    ecs.Close();<br />    return ASCIIEncoding.ASCII.GetString(ms.ToArray());<br />}</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>The following example demonstrates an implementation of a decryption routine containing several common secure coding issues.</p>\r\n  <pre>public static string ProblematicDecryptString(string ciphertext)<br />{<br />    Rijndael rijndaelAlg = Rijndael.Create();<br /><br />    //Set secret key for the AES algorithm.<br />    rijndaelAlg.Key = ASCIIEncoding.ASCII.GetBytes(\"_A_SAMPLE_KEY_WE_USE_TO_ENCRYPT_\");<br /><br />    //We don't use an IV because the book doesn't show us an example using a<br />    //more secure, chained mode! <br />    //rijndaelAlg.IV = ASCIIEncoding.ASCII.GetBytes(\"SAMPLEIV\");<br /><br />    //Set encryption mode to an unchained value (because the book says so!)<br />    rijndaelAlg.Mode = CipherMode.ECB;<br /><br />   //Create a memorystream to which we'll decrypt our input string<br />    MemoryStream ms = new MemoryStream();<br />    CryptoStream ecs = new CryptoStream(ms, rijndaelAlg.CreateDecryptor(), CryptoStreamMode.Write);<br /><br />    //Because the input string is passed in as a Base64 encoded value we decode prior writing to<br />    //the decryptor stream.<br />    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);<br />    ecs.Close();<br />    return ASCIIEncoding.ASCII.GetString(ms.ToArray());<br />}</pre>\r\n  <p>The problem code example above has the following vulnerabilities:</p>\r\n  <ul>\r\n    <li>Cleartext encryption key can be extracted by any user with access to the source code or compiled code.</li>\r\n    <li>Use of a weak encryption (non-random) key, which can be brute-forced using a dictionary attack.</li>\r\n    <li>Insecure cipher mode (ECB), performs encryption of each blocks 128 bits independently with no feedback into subsequent blocks as CBC and other chained modes do. An attacker can rearrange or replace blocks with previous blocks they observe. </li>\r\n    <li>ECB mode does not utilize an initialization vector, yielding the same encrypted value for each plaintext value. An attacker can thus observe patterns in the encrypted blocks and perform known plaintext attacks (Note: Initialization vectors need not remain secret however they should be random for each encrypted value of the plaintext).</li>\r\n  </ul>\r\n  <h1>Test Case</h1>\r\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\r\n  <pre>using System;<br />using System.Text;<br />using System.IO;<br />using System.Security.Cryptography;</pre>\r\n  <p>The following test case demonstrates the use of the DecryptString function</p>\r\n  <pre>static void Main(string[] args)<br />{<br />    string enc, p2, probenc, probp2 = null;<br />    Rijndael aes = Rijndael.Create();<br />    // Test case for string encryption routines<br />    string p1 = \"the quick brown fox jumped over the lazy dog\";<br />    // Run our test case multiple times to demonstrate different IV <br />    // encrypted text for each<br />    // iteration in when using proper crypto modes.<br />    Console.Out.WriteLine(\"Solution test cases - notice varied output for static input\");<br />    Console.Out.WriteLine(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");<br />    for (int i = 0; i &lt; 5; i++)<br />    {<br />        aes.GenerateIV();<br />        enc = EncryptString(p1, aes.Key, aes.IV);<br />        Console.WriteLine(\"Encrypted text #{0}: \" + enc, i);<br />        p2 = DecryptString(enc, aes.Key, aes.IV);<br />        Console.WriteLine(\"Plaintext #{0}: \" + p2, i);<br />        if (!p1.Equals(p2))<br />        {<br />            Console.Error.WriteLine(\"Decryption failed\");<br />        }<br />    }<br />    // Now run out problem test cases<br />    Console.Out.WriteLine(\"Problem test cases - notice repetitive encrypted value\");<br />    Console.Out.WriteLine(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");<br />    for (int i = 0; i &lt; 5; i++)<br />    {<br />        probenc = ProblematicEncryptString(p1);<br />        probp2 = ProblematicDecryptString(probenc);<br />        Console.WriteLine(\"Encrypted text #{0}: \" + probenc, i);<br />        Console.WriteLine(\"Plaintext #{0}: \" + probp2, i);<br />    }<br />}</pre>\r\n  <p>In this test case AES encryption keys and initialization vectors are chosen at random during the call to Rijndael.Create(). In a real-world implementation sKey and sIV should be retrieved from the Data Protection API within application code please refer to code sample demonstrating use of Data Protection API.</p>\r\n  <h1>Expected Result</h1>\r\n  <p>Solution test cases - notice varied output for static input:</p>\r\n  <pre>Encrypted text #0: PSQ7SRIFtv3W1GzSdsMCWR6ANZVZ78xjMG2ssQpsfyiWDMY3Wf+15Icd4XDEKhe8<br />Plaintext #0: the quick brown fox jumped over the lazy dog<br />Encrypted text #1: feBRJPILiia74FQnOpXlpIICYmieLbujF11yTkQyNitUPl35qf0aVd+VjYxyXVCL<br />Plaintext #1: the quick brown fox jumped over the lazy dog<br />Encrypted text #2: DfnDt3dO6eq3tdp3OC/5/zs6GN8jm2SUSqy50d1cwsHmQ4R+XsEttzT/7wlXXwuc<br />Plaintext #2: the quick brown fox jumped over the lazy dog<br />Encrypted text #3: lbU6t2jc5eVNBZEr6jQDEpj4/vfrjcqke/94X6pY8mEBlYJ4qyzUJEtFQf96Cm5W<br />Plaintext #3: the quick brown fox jumped over the lazy dog<br />Encrypted text #4: /by8DZLmxBpkP5fEbGw8UKXz6bmNa2IPedCgpcSdO65uNAf+ujJ2FV2EsZaTg19A<br />Plaintext #4: the quick brown fox jumped over the lazy dog</pre>\r\n  <p>Problem test cases - notice the&amp;nbsp;repetitive encrypted value:</p>\r\n  <pre>Encrypted text #0: S/PCsy2/87IRuRzAjeHxXw3XUEfhwZ9Ol1Bai1Hy7RqFq9+V6ZIEHlo1IwRQjCVT<br />Plaintext #0: the quick brown fox jumped over the lazy dog<br />Encrypted text #1: S/PCsy2/87IRuRzAjeHxXw3XUEfhwZ9Ol1Bai1Hy7RqFq9+V6ZIEHlo1IwRQjCVT<br />Plaintext #1: the quick brown fox jumped over the lazy dog<br />Encrypted text #2: S/PCsy2/87IRuRzAjeHxXw3XUEfhwZ9Ol1Bai1Hy7RqFq9+V6ZIEHlo1IwRQjCVT<br />Plaintext #2: the quick brown fox jumped over the lazy dog<br />Encrypted text #3: S/PCsy2/87IRuRzAjeHxXw3XUEfhwZ9Ol1Bai1Hy7RqFq9+V6ZIEHlo1IwRQjCVT<br />Plaintext #3: the quick brown fox jumped over the lazy dog<br />Encrypted text #4: S/PCsy2/87IRuRzAjeHxXw3XUEfhwZ9Ol1Bai1Hy7RqFq9+V6ZIEHlo1IwRQjCVT<br />Plaintext #4: the quick brown fox jumped over the lazy dog</pre>\r\n  <h1>More Information</h1>\r\n  <ul>\r\n    <li>Although AES defaults to 256-bit key sizes under the .NET framework, even under current cryptography standards, the default 128-bit key-size used by many crypto implementations is still considered secure. </li>\r\n    <li>The test case assumes use of the DataProtection API implemented within the user code to securely store and retrieve encryption keys.</li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}