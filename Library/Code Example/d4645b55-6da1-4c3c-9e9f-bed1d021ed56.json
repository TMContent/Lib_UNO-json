{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1069750388",
      "Content_Hash": "1685401965"
    },
    "Metadata": [
      {
        "Id": [
          "d4645b55-6da1-4c3c-9e9f-bed1d021ed56"
        ],
        "Id_History": [
          "d4645b55-6da1-4c3c-9e9f-bed1d021ed56,0ef122b6-72a8-4ca3-a7c1-3eed257bafa5,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Named Queries with Java Persistence API (JPA)"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Use Named Queries with Java Persistence API (JPA)"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\nJava web-based applications using JPA.\r\n\r\n\r\n## Summary ##\r\n\r\nExecuting Named Queries using JPA.\r\n\r\n\r\n## Objectives ##\r\n\r\nUse JPA named queries to perform database operations safely.\r\n\r\n\r\n## Scenarios ##\r\n\r\nJPA named queries provide a data access and manipulation mechanism that closely ties the query content to the Java code defining the objects that the query is executing against. It also removes the actual query language from Java code, which is a common tactic and creates certain maintainability issues. A security related advantage to named queries is that dynamic data must be bound, which prevents SQL injection attacks. The code below shows how to both define and use named queries in JPA.\r\n\r\n\r\n## Solution Example ##\r\n\r\nTo use named queries with Java Persistence API:\r\n\r\nDefine the entity class and named queries. Define your entity class and use the @NamedQuery (or @NamedQueries with multiple @NamedQuery's) annotation to define each named query. The examples below are straightforward.\r\n\r\n    @Entity\r\n    @NamedQuery(\r\n        name=\"Product.findAllProductsByProductName\",queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"\r\n    )\r\n\r\n    public class Product {\r\n    ...\r\n    }\r\n\r\n    @Entity\r\n    @NamedQueries({\r\n    @NamedQuery(name=\"Product.findAllProducts\", queryString=\"SELECT pro FROM Product pro\"),\r\n    @NamedQuery(name=\"Product.findAllProductsByProductId\", queryString=\"SELECT pro FROM Product pro WHERE pro.id = :productId\"),\r\n    @NamedQuery(name=\"Product.findAllProductsByProductName\", queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"),\r\n    @NamedQuery(name=\"Product.findAllProductsByProductPrice\", queryString=\"SELECT pro FROM Product pro WHERE pro.price between :minPrice and :maxPrice\")\r\n    })\r\n\r\n    public class Product {\r\n    ...\r\n    }\r\n\r\nUse the defined named queries in code. If there is a need for dynamic data, use the parameter binding mechanism included in the query implementation.\r\n\r\n\r\n### Untyped results example ###\r\n\r\n    //get dynamic data\r\n    //request parameters should be validated before use - this is a simple example\r\n    String productName = request.getParameter(\"product_name\");\r\n    //use entity manager to retrieve named query\r\n    Query queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\");\r\n    //set dynamic data for query\r\n    queryProductsByName.setParameter(\"productName\", productName);\r\n    //execute query and get results\r\n    Collection products = queryProductsByName.getResultList();\r\n\r\n\r\n### Typed results example ###\r\n\r\n    //get dynamic data\r\n    //request parameters should be validated before use - this is a simple example\r\n    String productName = request.getParameter(\"product_name\");\r\n    //use entity manager to retrieve named query\r\n    TypedQuery<Product> queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\", Product.class);\r\n    //set dynamic data for query\r\n    queryProductsByName.setParameter(\"productName\", productName);\r\n    //execute query and get results\r\n    List<Product> products = queryProductsByName.getResultList();\r\n\r\n\r\n### Example without using dynamic data ###\r\n\r\n    //use entity manager to retrieve named query\r\n    TypedQuery<Product> queryProducts = em.createNamedQuery(\"Product.findAllProducts\", Product.class);\r\n    //execute query and get results\r\n    List<Product> products = queryProducts.getResultList();\r\n\r\nThe examples above show how to use named queries within JPA to create an environment where the queries are defined closely with the data they are operating against and that are safely used by requiring bound parameters for dynamic data. The use of other types of queries works in an identical manner, such as delete, update, insert, etc."
        ]
      }
    ]
  }
}