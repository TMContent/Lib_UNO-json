{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1137434220",
      "Content_Hash": "198856669"
    },
    "Metadata": [
      {
        "Id": [
          "06002ddc-a311-44c1-9ca4-5a675b13f9eb"
        ],
        "Id_History": [
          "06002ddc-a311-44c1-9ca4-5a675b13f9eb,f261673a-d9b1-4036-8598-f4f4fc666bdd,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Generate RSA Keys And Store Them in Registry Using DPAPI"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Generate RSA Keys And Store Them in Registry Using DPAPI"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>The purpose of this code snippet is to illustrate how to generate and securely store a public key pair in .NET using RSA and the DPAPI.</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Create a encryption key that can be publicly distributed without fearing that encrypted messages could become compromised.</li>\r\n    <li>Securely store the private key material without needing to implement additional encryption operations or relying on file system on database security.</li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Distributed client-server architecture where clients need to send confidential encrypted messages to the server but don't need to ever read those messages.</li>\r\n    <li>Application does not want to maintain a dedicated key store for encryption purposes.</li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <pre>// Define some useful globals<br />public int RSA_KEY_SIZE = 2048;<br />public RSACryptoServiceProvider myRSA;<br />public void GenerateAndStoreRSAKeys(){<br />    ///// Generate RSA Key Public and Private Pairs /////<br />    // The RSA CSP class automatically generates public and private key material<br />    // during constructions using the provided key size (or 1024bits if blank)<br />    myRSA = new RSACryptoServiceProvider(RSA_KEY_SIZE);<br /><br />    ///// Store in the registry using DPAPI and a Registry ACL /////<br />    // Serialize the RSA key pair as an XML string for registry storage<br />    string keyPairXml = myRSA.ToXmlString(true);<br /><br />    // Convert the RSA key pair to a byte array and encrypt the data by using<br />    // the DPAPI ProtectedData class. We're using the CurrentUser scope instead<br />    // of the MachineKey scope so that other, potentially malicious applications<br />    // cannot access this key in the registry and decrypt. This provides additional<br />    // security but sacrifices interoperability with other applications. Consider<br />    // using the MachineKey scope if you have a need to share keys between<br />    // applications.<br />    byte[] encryptedKeyPair = ProtectedData.Protect(<br />            UnicodeEncoding.ASCII.GetBytes(keyPairXml),<br />            null,<br />            DataProtectionScope.CurrentUser);<br /><br />    // Create a security context for a new key that we will use to store<br />    // our RSA key pair. The security context will restrict access to only<br />    // our user.<br />    string user = Environment.UserDomainName + \"\\\\\" + Environment.UserName;<br />    RegistrySecurity security = new RegistrySecurity();<br />    RegistryAccessRule rule = new RegistryAccessRule(user,<br />            RegistryRights.FullControl,<br />            InheritanceFlags.ContainerInherit,<br />            PropagationFlags.None,<br />            AccessControlType.Allow);<br />    security.AddAccessRule(rule);<br /><br />    // Actually create the new registry key and apply the security context<br />    // we just came up with.<br />    Registry.CurrentUser.CreateSubKey(\"RSAKeyPair\",<br />         RegistryKeyPermissionCheck.ReadWriteSubTree,<br />         security);<br /><br />    // Write the encrypted connection string into the registry<br />    Registry.SetValue(@\"HKEY_CURRENT_USER\\RSAKeyPair\",<br />         \"KeyData\",<br />         encryptedKeyPair);<br />}</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>The following example demonstrates the generation of an RSA key pair and storage of those keys on the file system. </p>\r\n  <pre>// The RSA CSP class automatically generates public and private key material<br />// during construction<br />myRSA = new RSACryptoServiceProvider();<br /><br />///// Store in the registry using DPAPI and a Registry ACL /////<br />// Convert the RSA public key to an xml string (passing \"true\" retrieves<br />// both the private and public key datastring <br />keyPairXml = myRSA.ToXmlString(true);<br /><br />// Open up the key pair file and read into a string<br />StreamWriter keyWriter = new StreamWriter(@\"C:\\temp\\rsakeypair.xml\");<br />keyWriter.Write(keyPairXml);<br />keyWriter.Close();</pre>\r\n  <ul>\r\n    <li>If the file system is compromised the private key may be exposed and the encrypted messages can be compromised. </li>\r\n    <li>Default key size provides degraded strength and diminishes security.</li>\r\n  </ul>\r\n  <h1>Test Case</h1>\r\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\r\n  <pre>using System.IO;<br />using System.Security;<br />using System.Security.AccessControl;<br />using System.Security.Cryptography;<br />using System.Text;<br />using Microsoft.Win32;</pre>\r\n  <p>Execute the following code and then open \"<em>regedit</em>\" and look in the registry under the key \"<em>HKEY_CURRENT_USER\\RSAKeyPair</em>\" to see the RSA key pair data encrypted in the registry.</p>\r\n  <pre>static void Main(string[] args){<br />       // Generate an RSA key pair and store using the DPAPI<br />       GenerateAndStoreRSAKeys();<br />}</pre>\r\n  <h1>Expected Result</h1>\r\n  <p>The RSA key is encrypted using DPAPI and stored in the registry key.</p>\r\n  <h1>More Information</h1>\r\n  <p>RSA is an algorithm for public key (also knows as asymmetric) cryptography in which distinct public and private keys are created. Encryption operations makes use of the public key while decryption requires the private key. This offers an advantage over symmetric cryptography because the secret key used to decrypt a message does not need to be shared in order to support encryption of messages to a recipient.</p>\r\n  <p>The RSA private key must be securely stored in order to maintain the confidentiality of data encrypted using an individual's public RSA key. However, the public key can be freely distributed by the owner of the key pair to anyone who wishes to send an encrypted message to that owner. </p>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}