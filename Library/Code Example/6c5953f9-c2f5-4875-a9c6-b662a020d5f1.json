{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1241370860",
      "Content_Hash": "-852188284"
    },
    "Metadata": [
      {
        "Id": [
          "6c5953f9-c2f5-4875-a9c6-b662a020d5f1"
        ],
        "Id_History": [
          "6c5953f9-c2f5-4875-a9c6-b662a020d5f1,d984d9ca-d512-4df3-abfe-89cc92f5ee0e,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Encrypt ViewState"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Encrypt ViewState"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>The purpose of this code sample is to demonstrate the ability to encrypt the client-side session state (<em>ViewState</em>). By default the <em>ViewState</em> provides message integrity through a built-in MAC, however encryption is an optional configuration setting which may be enabled.</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Provide confidentiality of <em>ViewState</em> client-side session data by encrypting data contained within the <em>ViewState</em> object (particularly for those cases where viewstate contains internal details that should be protected so a user may not be able to learn specifics about the internal logic or data structures).</li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Application off-loads session management to clients, encryption of the&nbsp;<em>ViewState</em> prevents application data from being exposed to web site users who decode the value, and further mitigates risk of storage in an unencrypted form (e.g. Browser Cache).</li>\r\n    <li>Application stores sensitive information such as application internals (e.g. database objects, identifiers, or authorization details) in the <em>ViewState</em> not intended for viewing through client Web UI Controls or filtered by the server upon further processing.</li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <p>The default <em>ViewState</em> encryption mode is set to <em>auto</em>, meaning that so long as a control requests encryption of the <em>ViewState</em> object, it will be encrypted. The <em>ViewStateEncryptionMode</em> and <em>EnableViewStateMac</em> settings below are the default behavior and shown for informational purposes only.</p>\r\n  <pre>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\"&nbsp; CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" <br />&nbsp;ViewStateEncryptionMode=\"Auto\" EnableViewStateMac=\"true\"%&gt;</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>The following example demonstrates cleartext data stored within the <em>ViewState</em> object without encryption. See the test case for further details:</p>\r\n  <pre>protected void Page_Load(object sender, EventArgs e)<br />{<br />&nbsp;&nbsp;&nbsp; Page.RegisterRequiresViewStateEncryption();<br />&nbsp;&nbsp;&nbsp; ViewState[\"secret\"] = \"some sensitive information we wish to protect\";<br />}</pre>\r\n  <p>In the event that sensitive data is stored in the <em>ViewState</em> object it is vulnerable to information disclosure by a web-site user. The <em>ViewState</em> is stored within the HTML source as a hidden parameter and may simply be Base64 decoded. Application internals and logic may be exposed to a web-site user who decodes the <em>ViewState</em> parameter.</p>\r\n  <h1>Test Case</h1>\r\n  <p>Decoding the Base64 value in our problem example, reveals potentially sensitive information:</p>\r\n  <p>\r\n    <strong>Problem Example</strong>\r\n  </p>\r\n  <pre>&lt;input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" <br />&nbsp; value=\"/wEPDwUJNzgzNDMwNTMzDxYCHgZzZWNyZXQFLXNvbWUgc2Vuc2l0aXZlIGluZm9ybWF0aW9uIHdlIHdpc2ggdG8gc<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HJvdGVjdGRk/D+Ejemia+ssVPj/D8lfGFO7z6g=\" /&gt;<br /><br />The value: /wEPDwUJNzgzNDMwNTMzDxYCHgZzZWNyZXQFLXNvbWUgc2Vuc2l0aXZlIGluZm9ybWF0aW9uIHdlIHdpc2ggdG8gc<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HJvdGVjdGRk/D+Ejemia+ssVPj/D8lfGFO7z6g=<br /><br />Contains:</pre>\r\n  <pre>\r\n    <br />ff 01 0f 0f 05 09 37 38 33 34 33 30 35 33 33 0f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .... ..78 3430 533. <br />16 02 1e 06 73 65 63 72 65 74 05 2d 73 6f 6d 65&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .... secr et.- some <br />20 73 65 6e 73 69 74 69 76 65 20 69 6e 66 6f 72&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sen siti ve i nfor <br />6d 61 74 69 6f 6e 20 77 65 20 77 69 73 68 20 74&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mati on w e wi sh t <br />6f 20 70 72 6f 74 65 63 74 64 64 fc 3f 84 3f e9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o pr otec tdd. ?.?. <br />a2 6b eb 2c 54 f8 ff 0f c9 5f 18 53 bb cf a8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .k., T... ._.S ..</pre>\r\n  <p>\r\n    <strong>Solution Example</strong>\r\n  </p>\r\n  <pre>&lt;input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" <br />&nbsp; value=\"XEqVgkIRKsuTZq+5LgNeGFAbDKGhBiO6ctuLmnJ2sFzlGsJste6CFJZb/vWojG3SrXF8<br />H1jODKvB2KJgtOQ1LeSGppXnzhB2ToaN+KuzwMI=\" /&gt; <br /><br />The value:XEqVgkIRKsuTZq+5LgNeGFAbDKGhBiO6ctuLmnJ2sFzlGsJste6CFJZb/vWojG3SrXF8<br />H1jODKvB2KJgtOQ1LeSGppXnzhB2ToaN+KuzwMI= <br /><br />Contains:<br />5c 4a 95 82 42 11 2a cb 93 66 af b9 2e 03 5e 18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\J.. B.*. .f.. ..^. <br />50 1b 0c a1 a1 06 23 ba 72 db 8b 9a 72 76 b0 5c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P... ..#. r... rv.\\ <br />e5 1a c2 6c b5 ee 82 14 96 5b fe f5 a8 8c 6d d2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...l .... .[.. ..m. <br />ad 71 7c 1f 78 ce 0c ab c1 d8 a2 60 b4 e4 35 2d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .q|. x... ...` ..5- <br />e4 86 a6 95 e7 ce 10 76 4e 86 3f f8 ab b3 c0 c2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .... ...v N.?. ....  </pre>\r\n  <h1>Expected Result</h1>\r\n  <p>Once <em>ViewState</em> encryption has been enabled it is possible to validate the settings by attempting to Base64 decode the contents of the <em>__VIEWSTATE</em> parameter, looking for plaintext strings. Additionally, an encrypted <em>ViewState</em> configuration embeds the following hidden request parameter in the resulting pages:</p>\r\n  <pre>&lt;input type=\"hidden\" name=\"__VIEWSTATEENCRYPTED\" id=\"__VIEWSTATEENCRYPTED\" value=\"\" /&gt;</pre>\r\n  <h1>More Information</h1>\r\n  <p>Due to performance impact of encrypting session data, this example demonstrates encryption for a page's <em>ViewState</em> any time the <em>Page.RegisterRequiresViewStateEncryption()</em> method is called. Alternatively, a developer could modify the ASPX to contain the following <em>ViewStateEncryptionMode</em>:</p>\r\n  <pre>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\"  CodeFile=\"Default.aspx.cs\"<br />\t Inherits=\"_Default\" ViewStateEncryptionMode=\"Always\" EnableViewStateMac=\"true\"%&gt;</pre>\r\n  <p>Care should be taken to account for additional performance impact of encrypting <em>ViewState</em> and should be carefully weighed with alternatively using the server-side session object for any potentially sensitive information attributed to a user session.</p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}