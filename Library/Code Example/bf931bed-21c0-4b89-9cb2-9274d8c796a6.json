{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1875912628",
      "Content_Hash": "1179239213"
    },
    "Metadata": [
      {
        "Id": [
          "bf931bed-21c0-4b89-9cb2-9274d8c796a6"
        ],
        "Id_History": [
          "bf931bed-21c0-4b89-9cb2-9274d8c796a6,de955d28-5b9b-4a04-9f16-471ba56b1eff,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "SpringMVC Cross-Site Request Forgery (CSRF) Prevention"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* JAVA\r\n* SpringMVC\r\n\r\n\r\n## Summary ##\r\n\r\nPerform CSRF prevention using SpringMVC within an application. CSRF prevention is a key security control for an application that protects the application and its users from CSRF attacks. \r\n\r\n\r\n## Solution Example ##\r\n\r\nThere is a standard model for CSRF prevention using SpringMVC that involves 3 basic steps\r\n\r\n1. **Build a base controller with CSRF generation and validation methods.**\r\n\r\n\t~~~~\r\n\tpublic class RootController {\r\n\t...\r\n\t\tprotected void init(ControllerContext ctx) {\r\n\t ...\r\n\t\t\tinitializeCsfrToken(ctx);\r\n\t\t}\r\n\t\tprivate void initializeCsfrToken(ControllerContext ctx) {\r\n\t\t   String csrfToken = ctx.getSessionAttribute(ControllerContext.CSRF_TOKEN, \"\");\r\n\t\t   if(Utils.isEmpty(csrfToken)) {\r\n\t\t\t   ctx.setSessionAttribute(ctx, ControllerContext.CSRF_TOKEN, generateCsrfToken(ctx));\r\n\t\t   }\r\n\t\t}\r\n\t\t\r\n\t\tprivate String generateCsrfToken(ControllerContext ctx) {\r\n\t ... generate random string\r\n\t\t}\r\n\t\t\r\n\t\tprotected boolean isValidCsrfToken(ControllerContext ctx) {\r\n\t\t\tString csrfParamToken = ctx.getParameter(ControllerContext.CSRF_TOKEN);\r\n\t\t\tString csrfSessionToken = ctx.getSessionAttribute(ControllerContext.CSRF_TOKEN, \"\");\r\n\t\t\tif(!Utils.isEmpty(csrfParamToken) && !Utils.isEmpty(csrfSessionToken) && csrfParamToken.equals(csrfSessionToken)) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\t//Log this as this can be a security threat\r\n\t\t\t\tLog.warn(\"Invalid security Token. Supplied token: \" + csrfParamToken + \". Session token: \" + csrfSessionToken + \". IP: \" + ctx.request.getRemoteAddr());\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t~~~~\r\n\r\n2. **Include CSRF token in form submitted via JSP.**\r\n\r\n\t~~~~\r\n\t<input type=\"hidden\" name=\"ctoken\" id=\"ctoken\" value=\"${sessionScope.ctoken}\"/>\r\n\t~~~~\r\n\r\n3. **In Controller handling request, validate CSRF token.** In the action class/method that handles the saving of your form (ex. SaveBookController), you need to perform the token validation.\r\n\r\n\t~~~~\r\n\t...\r\n\tControllerContext ctx = new ControllerContext(request, response);\r\n\tinit(ctx);\r\n\tif (!isValidCsrfToken(ctx)) {\r\n\t\tresult.addError(new ObjectError(\"employee\", getMessage(\"error.invalidCsrfToken\")));\r\n\t\treturn getModelAndView(ctx, \"employee/list\");\r\n\t}\r\n\t...\r\n\t~~~~\r\n\r\n"
        ]
      }
    ]
  }
}