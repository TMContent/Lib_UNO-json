{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "2016421689",
      "Content_Hash": "1195088203"
    },
    "Metadata": [
      {
        "Id": [
          "e686001f-6235-4bdf-a684-0afa8bf95d3d"
        ],
        "Id_History": [
          "e686001f-6235-4bdf-a684-0afa8bf95d3d,c5b51315-58d7-470c-b871-56d33de1a5a4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Creating And Securely Storing a Symmetric Encryption Key And Initialization Vector"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Creating And Securely Storing a Symmetric Encryption Key And Initialization Vector"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C#</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>The purpose of this code sample is to demonstrate the secure creation and storage of a symmetric cryptographic key and initialization vector to be used for encrypting and decrypting blocks of data.</p>\n  <h1>Objectives</h1>\n  <ul>\n    <li>Create a random encryption key to be used within a symmetric encryption cipher. <li>Securely store the symmetric encryption key without needing to implement additional encryption operations or relying on filesystem or database security. <li>Discuss the use and distribution of initialization vectors.</li></li></li>\n  </ul>\n  <h1>Scenarios</h1>\n  <ul>\n    <li>The application is required to store sensitive data in an encrypted form <li>Two entities in a client-server or client-client architecture need to transmit data in an encrypted form <li>Application developers should not have access to production encryption keys; a product support group may use a utility containing the solution code to set the production encryption keys.</li></li></li>\n  </ul>\n  <h1>Solution Example</h1>\n  <pre>public static void GenerateAndStoreSymmetricAESKey()<br /> &amp;#123;<br />    // The .NET framework supports several symmetric or block ciphers including: Rijndael (AES),<br />     // DES, 3DES, RC2, etc.<br />     // Symmetric (secret key) encryption algorithms assume that both parties know the secret<br />     // key and initialization vector or IV (when using a chained mode for the crypto<br />    // operation). Protecting the secret key by both recipients is vital to the protection<br />    // of data transmitted or stored by both parties.<br />    // Symmetric ciphers are often well suited to protecting large blocks of data between two<br />    // or more parties when the secret key has been negotiated in a secure manner.<br />    // There exist many block ciphers today, however perhaps the most popular is AES, the<br />    // current encryption standard approved by the National Institute of Standards and Technology<br />    // (NIST). The AES algorithm was created by two Belgian cryptographers and commonly<br />     // referred to as Rijndael as is the case in the .NET framework.<br />    // The following call will create a Rijndael (AES) Crypto Provider with a cryptographically<br />    // random key and initialization vector. This crypto provider defaults to a key size<br />    // of 256 bits and considered extremely secure even by today's computing standards.<br />    Rijndael rij = Rijndael.Create();<br />    // The following method demonstrates the ability to generate a new key from the<br />     // given crypto provider.  Typically this method need not be called unless<br />     // it is desired to \"re-key\".  Re-keying may be performed in some communication protocols<br />    // to mitigate the likelihood of an adversary having compromised a secret key used<br />    // to protect the session.<br />    // By default in the .NET framework a call to Rijndael.Create() constructor will<br />    // automatically generate a key and associated it with the object created (stored in the<br />     // Key member).<br />    rij.GenerateKey();<br />    // Encryption keys should be protected in storage. The .NET framework provides a method<br />    // to securely protect secrets such as encryption keys and passwords known as the<br />     // data protection api (DPAPI). For further details please refer to:<br />    //  <a href=\"http://msdn.microsoft.com/library/en-us/dnpag2/html/paght000005.asp\">http://msdn.microsoft.com/library/en-us/dnpag2/html/paght000005.asp</a><br />    // The following method demonstrates the generation of a new initialization vector.<br />    // Initialization vectors (IV) are used to ensure that encrypted blocks of data are \"chained\".<br />    // When using a chaining encryption mode such as CBC, CFB, OFB, a random initialization<br />    // vector should be chosen with which the first block of plaintext data is XOR by the<br />     // cipher.  Subsequent blocks of the plaintext message are XORed with the output<br />     // (crypted text) of the previous block.<br />    //<br />     // When using a random initialization vector for each communication, an eavesdropper<br />     // who observes traffic between Alice and Bob may not be able to detect<br />     // repititious blocks of data even if the same message is sent multiple times.<br />    // We don't actually store this value but it's contained here to demonstrate how it<br />     // should be called during subsequent encryption operations<br />    rij.GenerateIV();<br />    // The IV need not be protected, as an intermediary who intercepts an encrypted<br />     // communications still needs the secret key to decrypt the message. However,<br />    // the recipient of the encrypted data needs the IV to successfully decrypt the<br />     // message. It is common for an encrypted text (ciphertext) to be preceeded by the<br />    // IV used in the chaining of the encryption routine.  Because the IV is a fixed<br />    // length (as determined by the encryption cipher), the recipient of the encrypted<br />    // text must remove the IV from the beginning of the message and use this value in<br />    // conjunction with the shared secret key to decrypt the message.<br />    // Upon subsequent encrypt routines the application should generate a new Initialization<br />    // vector each time.<br />    // Store the AES symmetric (shared secret) key to a byte array<br />     // encrypt and stored in the registry by using the DPAPI ProtectedData class.<br />     // We're using the CurrentUser scope instead of the MachineKey scope so that other,<br />     // users or applications which may become compromised cannot access this key in the<br />     // registry and decrypt. This provides additional security but sacrifices interoperability<br />     // with other applications. Consider using the MachineKey scope if you have a need to<br />     // share keys between applications.<br />    byte&amp;#91;&amp;#93; encryptedKeyPair = ProtectedData.Protect(<br />                    rij.Key,<br />                    null,<br />                    DataProtectionScope.CurrentUser);<br /><br />    // Create a security context for a new key that we will use to store<br />     // our shared key. The security context will restrict access to only<br />     // our user.<br />    string user = Environment.UserDomainName &amp;#43; \"\\\\\" &amp;#43; Environment.UserName;<br />    RegistrySecurity security = new RegistrySecurity();<br />    RegistryAccessRule rule = new RegistryAccessRule(user,<br />                    RegistryRights.FullControl,<br />                    InheritanceFlags.ContainerInherit,<br />                    PropagationFlags.None,<br />                    AccessControlType.Allow);<br />    security.AddAccessRule(rule);<br />    // Actually create the new registry key and apply the security context<br />     // we just came up with.<br />    Registry.CurrentUser.CreateSubKey(\"AESSymmetricKey\",<br />        RegistryKeyPermissionCheck.ReadWriteSubTree,<br />        security);<br />    // Write the encrypted connection string into the registry<br />    Registry.SetValue(&amp;#64;\"HKEY_CURRENT_USER\\AESSymmetricKey\",<br />        \"KeyData\",<br />        encryptedKeyPair);<br />&amp;#125;</pre>\n  <h1>Problem Example</h1>\n  <p>The following code sample demonstrates hardcoded the encryption key and initialization vector which is a common pitfall by many developers.</p>\n  <pre>Rijndael rijndaelAlg = Rijndael.Create();<br />//Set secret key for the AES algorithm.<br />rijndaelAlg.Key = ASCIIEncoding.ASCII.GetBytes(\"_A_SAMPLE_KEY_WE_USE_TO_ENCRYPT_\");<br />// Hardcode our IVrijndaelAlg.IV = ASCIIEncoding.ASCII.GetBytes(\"SAMPLEIV\");</pre>\n  <ul>\n    <li>If an unauthorized user gains access to the application source code or compiled code he/she will be able to extract the key and decrypt all future communications. <li>A hardcoded initialization vector does not provide full confidentiality of messages in that all equivalent plaintext messages will result in the same encrypted value, providing knowledge to an attacker about common messages.</li></li>\n  </ul>\n  <h1>Test Case</h1>\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\n  <pre>using System.Security;<br />using System.Security.AccessControl;<br />using System.Security.Cryptography;<br />using Microsoft.Win32;</pre>\n  <p>Execute the following code and then open \"regedit\" and look in the registry under the key \"HKEY_CURRENT_USER\\AESSymmetricKey\" to see the AES shared secret key encrypted in the registry via the DPAPI.</p>\n  <pre>static void Main(string&amp;#91;&amp;#93; args)&amp;#123;<br />  // Generate an AES encryption key and store in the registry<br />  // using DPAPI  GenerateAndStoreSymmetricAESKey();<br />&amp;#125;</pre>\n  <h1>Expected Result</h1>\n  <p>The AES key is encrypted using DPAPI and stored in the registry key, \"HKEY_CURRENT_USER\\AESSymmetricKey\"</p>\n  <h1>Scenarios</h1>\n  <ul>\n    <li>The application is required to store sensitive data in an encrypted form <li>Two entities in a client-server or client-client architecture need to transmit data in an encrypted form <li>Application developers should not have access to production encryption keys; a product support group may use a utility containing the solution code to set the production encryption keys.</li></li></li>\n  </ul>\n  <h1>More Information</h1>\n  <p>Symmetric (secret key) encryption algorithms assume that both parties know the secret key and initialization vector or IV (when using a chained mode for the crypto operation an Initialization Vector is required). Protecting the secret key by both recipients is vital to the protection of data transmitted or stored by both parties. Symmetric ciphers are often well suited to protecting large blocks of data between two or more parties when the secret key has been negotiated in a secure manner. There exist many block ciphers today, however perhaps the most popular is AES, the current encryption standard approved by the National Institute of Standards and Technology (NIST). The AES algorithm was created by two Belgian cryptographers and commonly referred to as 'Rijndael', as is the case in the .NET framework.</p>\n  <p>While encryption keys should be protected in storage, the IV need not be protected, as an intermediary who intercepts an encrypted communications still needs the secret key to decrypt the message. However, the recipient of the encrypted data needs the IV to successfully decrypt the message.&amp;nbsp; It is common for an encrypted text (ciphertext) to be preceeded by the IV used in the chaining of the encryption routine. Because the IV is a fixed length (as determined by the encryption cipher), the recipient of the encrypted text must remove the IV from the beginning of the message and use this value in conjunction with the shared secret key to decrypt the message.</p>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>Cryptography Simplified in .NET: <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/cryptosimplified.asp\">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/cryptosimplified.asp</a></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}