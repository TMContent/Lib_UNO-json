{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2137432691",
      "Content_Hash": "-2105210472"
    },
    "Metadata": [
      {
        "Id": [
          "bbc182ac-a70b-4ca2-b569-0ffa6c00ccd0"
        ],
        "Id_History": [
          "bbc182ac-a70b-4ca2-b569-0ffa6c00ccd0,b2f9f7b4-5ca2-41f0-8bd9-102daeee74d5,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[VERIFYME] Encode Output Within a Data Table"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Encode Output Within a Data Table"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>This code demonstrates how to implement security output encoding when using the .NET <em>DataTable</em> object to display application data. Output encoding mitigates against client-side script vulnerabilities by representing output data using escape character equivalents for values that might otherwise be interpreted by the browser, such as those characters used in the formatting of HTML pages (&lt;,&gt;,&amp;,\",').</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Protect application users from client-side scripting attacks.</li>\r\n    <li>Ensure that malicious data that may pre-date input validation routines or have been missed through poor validation does not render as application output.</li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Database-backed web application that uses data tables to present output.</li>\r\n    <li>Application that uses data tables to present input from an untrusted source.</li>\r\n  </ul>\r\n  <h1>Problem Example</h1>\r\n  <p>The following example demonstrates the use of a DataTable to query data without the use of any output encoding:</p>\r\n  <pre>// Build a datagrid to house our data and add to the set of page controls<br />DataGrid dataGrid = new DataGrid();<br />this.Controls.Add(dataGrid);<br /><br /><br />// Create a new database connection using Integrated Security and open that connection<br />string connectionString =<br /> \"Initial Catalog=snippets;Data Source=vm-win2003\\\\sqlexpress;Integrated Security=SSPI;\";<br />SqlConnection cn = new SqlConnection(connectionString);<br />cn.Open();<br /><br />// Create a new SQL Command object with a query to execute the stored procedure<br />SqlCommand cmd = new SqlCommand(\"exec spFullNames\", cn);<br />SqlDataAdapter adapter = new SqlDataAdapter(cmd);<br /><br />// Create a new data table and fill our that table with names from the adapter <br />DataTable names = new DataTable();<br />adapter.Fill(names); <br /><br />// Present the data to the user in the previously created Data Grid<br />dataGrid.DataSource = names;<br />dataGrid.DataBind();</pre>\r\n  <ul>\r\n    <li>Any HTML data present within the database query output will be rendered as part of the application HTML output.</li>\r\n    <li>Any Javascript data present within the database query output will be rendered as part of the application HTML output.</li>\r\n    <li>Code is vulnerable to client-side script attacks such as cross-site scripting (XSS).</li>\r\n  </ul>\r\n  <h1>Test Case</h1>\r\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\r\n  <pre>using System.Data;<br />using System.Data.SqlClient;<br />using System.Web;</pre>\r\n  <p>Create a new C# ASP.NET application and use the following <em>Page_Load</em> method to test the provided example methods (adjust database code for your example):</p>\r\n  <pre>protected void Page_Load(object sender, EventArgs e)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!Page.IsPostBack)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a new database connection using Integrated Security and open that connection<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003\\\\sqlexpress;Integrated Security=SSPI;\";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlConnection cn = new SqlConnection(connectionString);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Open(); <br />&amp;nbsp;<br /> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a new SQL Command object with a query to execute the stored procedure<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlCommand cmd = new SqlCommand(\"exec spFullNames\", cn);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlDataAdapter adapter = new SqlDataAdapter(cmd);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LoadEncodedPeopleTableEvent(adapter);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />}</pre>\r\n  <h1>Expected Result</h1>\r\n  <pre>&lt;table cellspacing=\"0\" rules=\"all\" border=\"1\" style=\"border-collapse:collapse;\"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;tr&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;tr&gt;&lt;td&gt;Elvin Jones&lt;/td&gt;&lt;/tr&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;tr&gt;&lt;td&gt;Gene Krupa&lt;/td&gt;&lt;/tr&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;tr&gt;&lt;td&gt;Tony Williams&lt;/td&gt;&lt;/tr&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;tr&gt;&lt;td&gt;&lt;script&gt;alert('XSS!');&lt;/script&gt; XSS&lt;/td&gt;&lt;/tr&gt;<br />&lt;/table&gt;</pre>\r\n  <h1>More Information</h1>\r\n  <ul>\r\n    <li>In addition to output validation, developers should always validate any input that originates from untrusted sources, such as application users or external feeds. </li>\r\n  </ul>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>\r\n  <h1>\r\n  </h1>"
        ]
      }
    ]
  }
}