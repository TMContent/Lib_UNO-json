{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1058219795",
      "Content_Hash": "-1719349992"
    },
    "Metadata": [
      {
        "Id": [
          "d124abb1-e230-43ef-8762-1caa0dbb89ca"
        ],
        "Id_History": [
          "d124abb1-e230-43ef-8762-1caa0dbb89ca,17fda79b-6b07-4ea0-9ba4-3efed3ebdc8f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Input Validation Using Struts 1"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Input Validation Using Struts 1"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>JAVA <li>Struts 1</li></li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>Perform input validation using Struts 1 within an application.</p>\r\n  <h1>Objectives</h1>\r\n  <p>Strong input validation is a powerful control that can prevent various security issues within an application. This article will describe how to use the built-in mechanisms provided by Struts 1 to perform appropriate input validation.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>There are 2 basic ways to perform input validation within Struts1: overriding the <em>validate()</em> method in the form bean and using the validator mechanism.</p>\r\n  <h3>1. Overriding the validate() method.</h3>\r\n  <p>If you use the <em>ActionForm</em> class (or some subclass) to handle your user input, you can simply override the validate method within your class and have the framework call this method in order to perform validation. Below is an example of a simple form bean</p>\r\n  <pre>public class MyForm extends ActionForm &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; private String title;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) &amp;#123; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //very important - call super first before any validations<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ActionErrors errors = super.validate(mapping,request);&amp;nbsp; </pre>\r\n  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (errors == null) errors = new ActionErrors();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (title == null) &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //\"errors.required\" message is defined in message bundle for app<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; errors.add(ActionErrors.GLOBAL_ERROR, new ActionError(\"errors.required\",\"Title\"));<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (errors.empty()) return null;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return errors;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;#125;</pre>\r\n  <p>The next step is to define the form bean as is typical for the application in the <em>struts-config.xml</em> file.</p>\r\n  <pre>&lt;form-bean name=\"myForm\" type=\"com.myapp.struts.form.MyForm\" /&gt;</pre>\r\n  <p>Finally (also in the <em>struts-config.xml</em> file) you need to define your action, and tell struts that validation should be enabled. This will cause the framework to validate your form when the action is submitted.</p>\r\n  <pre>&lt;action path=\"...\" name=\"myForm\" validate=\"true\" ... /&gt;</pre>\r\n  <h3>2. Using the validator framework.</h3>\r\n  <p>Using the Struts validator framework involves including 2 additional files, the <em>validator-rules.xml</em> (the actual validations, many defaults provided for you) and <em>validation.xml</em> (ties validations to application forms) files.</p>\r\n  <p>You'll also need to tweak the <em>struts-config.xml</em> file by adding the configuration shown below:</p>\r\n  <pre>&lt;&amp;#33;--&amp;nbsp; Validator plugin --&gt;<br />&lt;plug-in className=\"org.apache.struts.validator.ValidatorPlugIn\"&gt;<br />&amp;nbsp; &lt;set-property<br />&amp;nbsp; property=\"pathnames\"<br />&amp;nbsp;&amp;nbsp; value=\"/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml\"/&gt;<br />&lt;/plug-in&gt;</pre>\r\n  <p>You'll likely want to use the <em>DynaValidatorForm</em> or some subclass since it is very convenient to use when working with the validation framework. An example login form configured this way is shown here: </p>\r\n  <pre>&lt;form-beans&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form-bean name=\"LoginForm\" type=\"org.apache.struts.validator.DynaValidatorForm\"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form-property name=\"userName\" type=\"java.lang.String\" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form-property name=\"password\" type=\"java.lang.String\" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form-bean&gt;<br />&lt;/form-beans&gt;</pre>\r\n  <p>Since the <em>validator-rules.xml</em> file covers many standard validations, you'll essentially need to alter the <em>validation.xml</em> file to account for your new form validations. Below is an example covering the login form.</p>\r\n  <pre>&lt;form-validation&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;formset&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form name=\"LoginForm\"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;field property=\"userName\" depends=\"required\"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;arg key=\"LoginForm.userName\"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/field&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;field property=\"password\" depends=\"required,minlength\"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;arg0 key=\"LoginForm.password\"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;arg1 key=\"&amp;#36;&amp;#123;var:minlength&amp;#125;\" name=\"minlength\" resource=\"false\"/&gt;</pre>\r\n  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;var&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;var-name&gt;minlength&lt;/var-name&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;var-value&gt;6&lt;/var-value&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/var&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/field&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/formset&gt;<br />&lt;/form-validation&gt;</pre>\r\n  <p>Now that these pieces are in place, you configure your standard action as shown below and ensure validation is enabled in order to perform validation. </p>\r\n  <pre>&lt;action path=\"...\" name=\"LoginForm\" validate=\"true\" ... /&gt;</pre>\r\n  <p>Whether you choose to validate using the code-driven validate method or the configuration-driven validator framework, you can display errors to the user on the UI using the <em>ActionError</em> or <em>ActionErrors</em> tags provided by Struts. This will allow you to display the error messages directly to the user in a localized manner. </p>\r\n  <p>In conclusion, input validation can function as a strong security control if used properly and applied thoroughly throughout the application. The Struts framework provides 2 options for accomplishing this task. </p>\r\n  <h1>More Information</h1>\r\n  <ul>\r\n    <li>For Struts 1 documentation, please see <a href=\"http://struts.apache.org/1.x/\">http://struts.apache.org/1.x/</a><li>For more information about Struts Validator, please see <a href=\"http://struts.apache.org/1.x/faqs/validator.html\">http://struts.apache.org/1.x/faqs/validator.html</a><li>For more information about Struts Validator, please see <a href=\"http://struts.apache.org/1.2.4/userGuide/dev_validator.html\">http://struts.apache.org/1.2.4/userGuide/dev_validator.html</a></li></li></li>\r\n  </ul>"
        ]
      }
    ]
  }
}