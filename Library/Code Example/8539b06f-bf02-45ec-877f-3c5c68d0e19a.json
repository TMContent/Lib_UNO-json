{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1474861858",
      "Content_Hash": "-1807413910"
    },
    "Metadata": [
      {
        "Id": [
          "8539b06f-bf02-45ec-877f-3c5c68d0e19a"
        ],
        "Id_History": [
          "8539b06f-bf02-45ec-877f-3c5c68d0e19a,cf11a022-1439-46e7-97ad-cdf62d673b92,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Protect Credentials Within a Connection String in Code"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Protect Credentials Within a Connection String in Code"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASP.NET 3.5"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C# <li>Server-side code</li></li>\n  </ul>\n  <h1>Summary</h1>\n  <p>The purpose of this code is to offer an alternative mechanism for encrypting database connection string data using the Windows Data Protection API (DPAPI) in .NET source code. </p>\n  <h1>Objectives</h1>\n  <ul>\n    <li>Protect database connection strings credentials using both encryption and access control <li>Relegate encryption implementation specifics such as cipher selection encryption modes, key generation and key management to the DPAPI <li>Store the data in an easily recoverable and protected fashion in the Windows Registry</li></li></li>\n  </ul>\n  <h1>Scenarios</h1>\n  <ul>\n    <li>Application does not make use of ASP.NET and therefore does not have a web.config file, such as a client-server application <li>Developer wishes to make use of user store, as opposed to machine key, to restrict database credentials access to specific user accounts</li></li>\n  </ul>\n  <h1>Solution Example</h1>\n  <pre>public static void StoreConnectionString(string keyName, string valueName, string connectionString)&amp;#123;<br />    // Convert the connection string to a byte array<br />    // and encrypt the data by using the DPAPI ProtectedData class.<br />    byte&amp;#91;&amp;#93; encryptedConnStrBytes = ProtectedData.Protect(<br />    UnicodeEncoding.ASCII.GetBytes(connectionString),<br />&amp;#9;     null,<br />     DataProtectionScope.CurrentUser);<br />    // Create a security context for a new key that we will use to store our encrypted connection string.<br />    // The security context will restrict access to only our user.<br />    string user = Environment.UserDomainName &amp;#43; \"\\\\\" &amp;#43; Environment.UserName;<br />    RegistrySecurity security = new RegistrySecurity();<br />    RegistryAccessRule rule = new RegistryAccessRule(user,<br />            RegistryRights.FullControl,<br />            InheritanceFlags.ContainerInherit,<br />            PropagationFlags.None,<br />            AccessControlType.Allow);<br />    security.AddAccessRule(rule);<br />    // Actually create the new registry key and apply the security context we just came up with.<br />    RegistryKey key = Registry.CurrentUser.CreateSubKey(keyName,<br />            RegistryKeyPermissionCheck.ReadWriteSubTree,<br />            security);<br />    // Write the encrypted connection string into the registry<br />    key.SetValue(valueName, encryptedConnStrBytes);<br />&amp;#125;</pre>\n  <h1>Problem Example</h1>\n  <p>The following example demonstrates the use of the registry to store a cleartext database connection string.</p>\n  <pre>// Database connection stringstring connStr = \"Initial Catalog=snippets;<br />Data Source=vm-win2003\\\\sqlexpress;Integrated Security=SSPI;\";<br />// Store connection string in the registry<br />RegistryKey key = Registry.CurrentUser.CreateSubKey(\"PlaintextConnectionString\");<br />key.SetValue(\"ConnStr\", connStr);</pre>\n  <ul>\n    <li>Cleartext connection string details can be viewed by any user with access to the registry <li>In a mixed-mode authentication scenario, credentials would be viewable by any user with access to the registry <li>Lack of registry ACL's allows all systems users read access to this registry key</li></li></li>\n  </ul>\n  <h1>Test Case</h1>\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\n  <pre>using System;<br />using System.Collections.Generic;<br />using System.Security.Cryptography;<br />using System.Security.AccessControl;<br />using System.Text;using Microsoft.Win32;</pre>\n  <p>The following test case methods store and retrieve encrypted registry data and output the results to the console.</p>\n  <pre>public static string RetrieveConnectionString(string keyName, string valueName)&amp;#123;<br />    // Read the encrypted connection string value from the registry<br />     RegistryKey key = Registry.CurrentUser.OpenSubKey(keyName);<br />    byte&amp;#91;&amp;#93; encryptedConnStrBytes = key.GetValue(valueName) as byte&amp;#91;&amp;#93;;<br />    // Decrypt the encrypted bytes using DPAPI, convert to string and return<br />    byte&amp;#91;&amp;#93; decryptedConnStrBytes = ProtectedData.Unprotect(<br />             encryptedConnStrBytes,<br />              null,<br />             DataProtectionScope.CurrentUser);<br />    return(UnicodeEncoding.ASCII.GetString(decryptedConnStrBytes));<br />&amp;#125;<br />static void Main(string&amp;#91;&amp;#93; args)&amp;#123;<br />    // A sample connection string we might want to store<br />    string stored = \"Initial Catalog=snippets;Data Source=vm-win2003\\\\sqlexpress;Integrated<br />         Security=SSPI;\";<br />    Console.WriteLine(\"Stored String: \" &amp;#43; stored);<br />    // Create an instance of our class and pass the string we want to encrypt<br />    StoreConnectionString(\"EncryptedConnectionString\", \"CipherText\", stored);<br />    // Retrieve from the registry and print to make sure it worked.<br />    // You can also fire up regedit and browse to HKEY_CURRENT_USER\\EncryptedConnectionString<br />    // to see the encrypted bytes.<br />    string retrieved = RetrieveConnectionString(\"EncryptedConnectionString\", \"CipherText\");<br />    Console.WriteLine(\"Retrieved String: \" &amp;#43; retrieved);<br />&amp;#125;</pre>\n  <h1>Expected Result</h1>\n  <pre>Stored String: Initial Catalog=snippets;<br />Data Source=vm-win2003\\sqlexpress;Integrated Security=SSPI;<br />Retrieved String: Initial Catalog=snippets;<br />Data Source=vm-win2003\\sqlexpress;Integrated Security=SSPI;</pre>\n  <h1>More Information</h1>\n  <p>This implementation makes use of the DPAPI user key as opposed to the machine key. This means that the connection string will not be accessible by other applications running under different service accounts. </p>\n  <p>This adds additional protection against a rogue application (such as a virus or Trojan) compromising connection string data but could pose problems where sharing between multiple applications running under different accounts is required.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}