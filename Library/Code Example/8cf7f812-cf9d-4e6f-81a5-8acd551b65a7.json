{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-707088917",
      "Content_Hash": "-401511831"
    },
    "Metadata": [
      {
        "Id": [
          "8cf7f812-cf9d-4e6f-81a5-8acd551b65a7"
        ],
        "Id_History": [
          "8cf7f812-cf9d-4e6f-81a5-8acd551b65a7,20015fb0-2ff4-426a-a67f-d249041aa774,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Generate Cryptographically Strong Random Numbers"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Generate Cryptographically Strong Random Numbers"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>The purpose of this code snippet is to illustrate how to generate cryptographically secure random numbers for a variety of applications using .NET. Possible uses of cryptographically-secure random numbers are session identifiers, encryption key material and default or auto-generated passwords.</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Create a random number value whose value cannot be utilized to determine subsequent number values generated by the same function. </li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Create an \"un-guessable\" session identifier or application cookie for customized session management. </li>\r\n    <li>Create a one-time-use number for use as a second authentication factor, such as an argument for use within a forgotten email password.</li>\r\n    <li>Create an arbitrary default secret, such as a default password, from random data.</li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <pre>static public int SecureRandomNumber(){<br /><br />            // Create a secure RNG class and a byte array to hold the random data<br />            RNGCryptoServiceProvider secureRandom = new RNGCryptoServiceProvider();<br />            byte[] randBytes = new byte[4];<br /><br />            // Generate 4 bytes of secure random number data and convert to 4-byte integer<br />            secureRandom.GetNonZeroBytes(randBytes);<br />            return(BitConverter.ToInt32(randBytes, 0));<br />}</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>The following example shows generation of a random number using the </p>\r\n  <pre>System.Random class.static public int UnsecureRandomNumber(int seed){<br />            // Creates a random number, using the default machine time-derived seed<br />            Random unsecureRandom = new Random(seed);<br />            return(unsecureRandom.Next());<br />}</pre>\r\n  <ul>\r\n    <li>Same seed value will always return the same sequence of numbers.</li>\r\n    <li>Seed value -1 or null will make use of machine time to generate seed, which is easily predicted.</li>\r\n  </ul>\r\n  <h1>Test Case</h1>\r\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\r\n  <pre>using System.Security.Cryptography;</pre>\r\n  <p>Run the following code to generate a set of both unsecure and secure random numbers. The unsecure example illustrates that two calls to <em>Random</em> that make use of the same seed will return the same sequence of numbers. </p>\r\n  <pre>static void Main(string[] args){<br />         // Unsecure Random Number<br />         Console.WriteLine(\"Unsecure Value, Default Seed: \" + UnsecureRandomNumber(-1));<br />         Console.WriteLine(\"Unsecure Value, Default Seed: \" + UnsecureRandomNumber(-1));<br />         Console.WriteLine(\"Unsecure Value, Seed = 100: \" + UnsecureRandomNumber(100));<br />         Console.WriteLine(\"Unsecure Value, Seed = 100: \" + UnsecureRandomNumber(100));<br />         Console.WriteLine(\"\");<br />         // Secure Random Numbers<br />         for(int i = 0; i &lt; 10; i++) {<br />               Console.WriteLine(\"Secure Value, no seed: \" + SecureRandomNumber());<br />         }<br />}<br /><br />static public int UnsecureRandomNumber(int seed){<br />         // Creates a random number, using the default machine time-derived seed<br />         Random unsecureRandom = new Random(seed);<br />         return(unsecureRandom.Next());<br />}</pre>\r\n  <h1>Expected Result</h1>\r\n  <pre>Unsecure Value, Default Seed: 534011718<br />Unsecure Value, Default Seed: 534011718<br />Unsecure Value, Seed = 100: 2080427802<br />Unsecure Value, Seed = 100: 2080427802<br />Secure Value, no seed: 1392122031<br />Secure Value, no seed: -1635401565<br />Secure Value, no seed: 1863340408<br />Secure Value, no seed: -497957136<br />Secure Value, no seed: -1444637226<br />Secure Value, no seed: 925340612<br />Secure Value, no seed: 92412438<br />Secure Value, no seed: -1126434204<br />Secure Value, no seed: 2086044763<br />Secure Value, no seed: -840759923</pre>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}