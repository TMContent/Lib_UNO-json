{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1133760515",
      "Content_Hash": "-1317000625"
    },
    "Metadata": [
      {
        "Id": [
          "63deed1a-6df4-4e04-9f61-898f190e1fe1"
        ],
        "Id_History": [
          "63deed1a-6df4-4e04-9f61-898f190e1fe1,5d690172-965e-4f4d-86c0-1775a9ee64dc,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Struts1 Cross-Site Request Forgery (CSRF) Prevention"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Cross-Site Request Forgery (CSRF) Prevention Using Struts 1"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* JAVA\r\n* Struts 1\r\n\r\n\r\n## Summary ##\r\n\r\nPerform CSRF prevention using Struts 1 within an application. CSRF prevention is a key security control for an application that protects the application and its users from CSRF attacks. \r\n\r\n\r\n## Solution Example ##\r\n\r\nThere is a standard model for CSRF prevention using Struts 1 that involves 3 basic steps\r\n\r\n1. **Call saveToken().** In the action class/method that handles the setup for your form display (ex. EditBookAction), you need to call saveToken().\r\n\r\n\t~~~~\r\n\tpublic ActionForward execute(ActionMapping mapping,\r\n\tActionForm form, HttpServletRequest request, HttpServletResponse response)\r\n\tthrows Exception {\r\n\t\tsaveToken(request);\r\n\t\t....\r\n\t}\r\n\t~~~~\r\n\r\n2. **Use html:form to create your form on your JSP (ex. editBook.jsp).**\r\n\r\n\t~~~~\r\n\t<html:form action=\"...\">\r\n\t...\r\n\t</html:form>\r\n\t~~~~\r\n\r\n3. **Check isTokenValid() and call resetToken().** In the action class/method that handles the saving of your form (ex. SaveBookAction), you need to call isTokenValid(). If the token is valid, then you need to call resetToken().\r\n\r\n\t~~~~\r\n\tpublic ActionForward execute(ActionMapping mapping,\r\n\tActionForm form, HttpServletRequest request, HttpServletResponse response)\r\n\tthrows Exception {\r\n\t...\r\n\t\tif ( !isTokenValid(request) ) {\r\n\t\t\treturn mapping.findForward(Constants.INVALID_TOKEN);\r\n\t\t} else {\r\n\t\t\t...\r\n\t  //normal business logic\r\n\t ...\r\n\t resetToken(request);\r\n\t\t}\r\n\t...\r\n\t~~~~"
        ]
      }
    ]
  }
}