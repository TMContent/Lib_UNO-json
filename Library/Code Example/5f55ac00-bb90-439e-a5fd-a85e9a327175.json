{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-269796844",
      "Content_Hash": "-1490498842"
    },
    "Metadata": [
      {
        "Id": [
          "5f55ac00-bb90-439e-a5fd-a85e9a327175"
        ],
        "Id_History": [
          "5f55ac00-bb90-439e-a5fd-a85e9a327175,9dae3ac8-f3b1-4407-bed8-df55d0dc29b2,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Parameterized Stored Procedures"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Use Stored Procedures"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- Applications written using Servlets or JSP.\r\n\r\n\r\n## What to Do ##\r\n\r\nUse parameterized stored procedures when interacting with a database if other parameterized APIs are not available. This increases performance and reduces the risk of a successful SQL injection attack.\r\n\r\n\r\n## Why ##\r\n\r\nAttackers can use a SQL Injection to execute arbitrary queries with the privileges of the application. Under certain conditions SQL Injection can also lead to remote code execution.\r\n\r\n\r\n## How ##\r\n\r\nTo use a parameterized stored procedure:\r\n\r\n1. **Create the stored procedure on the database.** Since stored procedures reside on the database server, you need to create the appropriate stored procedures on your application's database server. Make sure not to concatenate untrusted data into SQL syntax, but to use parameters and let the database engine substitute data into them. The following example creates a parameterized stored procedure:\r\n\r\n        CREATE OR REPLACE PROCEDURE PlaceOrder(custID INT, itemID INT, qty INT) AS\r\n        INSERT INTO PendingPurchases (customer, item, quantity)\r\n        VALUES (custID, itemID, qty);\r\n        END PlaceOrder;\r\n\r\n2. **Assign the appropriate permissions.** Once you have created the stored procedure, assign the appropriate permissions on the database server. Using the example above, allow your application to execute PlaceOrder and deny it access to PendingPurchases. Example:\r\n\r\n        REVOKE ALL ON PendingPurchases FROM myapp;\r\n        GRANT EXECUTE ON PlaceOrder TO myapp;\r\n\r\n3. **Call the stored procedure.** This can be done using the following Java code:\r\n\r\n        Connection cn = MyApp.getDBConnection();\r\n        PreparedStatement st = cn.prepareStatement(\"exec PlaceOrder(?, ?, ?);\");\r\n        st.setInt(1, custID);\r\n        st.setInt(2, itemID);\r\n        st.setInt(3, qty);\r\n        ResultSet rs = st.executeQuery();\r\n\r\n\r\n\r\n"
        ]
      }
    ]
  }
}