{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-775763686",
      "Content_Hash": "-795225048"
    },
    "Metadata": [
      {
        "Id": [
          "0f49430b-2abe-408f-b046-89fa739f5d53"
        ],
        "Id_History": [
          "0f49430b-2abe-408f-b046-89fa739f5d53,758b8c8c-32d3-47d1-8dd4-be596bf24045,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "JSF Validate Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Input Validation Using JSF"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java + JSF\r\n\r\n\r\n## Solution Examples ##\r\n\r\nThere are several ways to perform input validation using JSF depending on the needed validation.\r\n\r\n1. **Using the required attribute on form elements.** For most form elements in JSF, you can simply add the required=\"true\" attribute to ensure that the field has a value when submitted. This is a trivial, but very common, validation and is easy to handle in JSF.\r\n\r\n\t~~~~\r\n\t<h:inputText value=\"#{myBean.someField}\" required=\"true\"/>\r\n\tUse built-in validators. This mechanism allows you to add validation directly within the field of the form you are validating using any of the many built-in validators.\r\n\r\n\t<h:inputText value=\"#{myBean.someField}\" required=\"true\">\r\n\t\t<f:validateLength minimum=\"6\" maximum=\"50\"/>\r\n\t</h:inputText>\r\n\t~~~~\r\n\r\n2. **Use custom method from backing bean to perform validation.** This option simply provides you with a mechanism to build out a method that checks the given field and throw a ValidatorException if necessary. This is completely custom code, but JSF does provide a hook to access custom validation methods by using the validator attribute as shown below.\r\n\r\n\t~~~~\r\n\t<h:inputText value=\"#{myBean.myField}\" validator=\"#{myBean.validateMyField}\" />\r\n\t~~~~\r\n\r\n3. **Build a custom validator by implementing Validator interface.** If you have a validation that could be reusable but does not exist in the standard validations, a custom validator is likely the best option given it's reuse potential. First, you need to build out the validation by creating a class that implements the Validator interface and throws a ValidationException when necessary.\r\n\r\n\t~~~~\r\n\tjavax.faces.validator.Validator\r\n\t....\r\n\tpublic class MyFieldValidator implements Validator {\r\n\t\tpublic void validate(FacesContext context, UIComponent component, Object value)\r\n\t   throws ValidatorException {\r\n\t\t\tString myField = (String) value;\r\n\t\t\tif(!myField.contains(\"%\")) {\r\n\t\t\t\tFacesMessage message = new FacesMessage();\r\n\t\t\t\tmessage.setSeverity(FacesMessage.SEVERITY_ERROR);\r\n\t\t\t\tmessage.setSummary(\"Invalid format.\");\r\n\t\t\t\tmessage.setDetail(\"You can't use wildcarding here.\");\r\n\t\t\t\tcontext.addMessage(\"myForm:MyField\", message);\r\n\t\t\t\tthrow new ValidatorException(message);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t~~~~\r\n\r\n\tIn order to use a custom validator, you simply register it with JSF by adding something like the below snippet to the faces-config.xml file.\r\n\r\n\t~~~~\r\n\t<validator>\r\n\t <validator-id>myFieldValidator</validator-id>\r\n\t <validator-class>com.myapp.MyFieldValidator</validator-class>\r\n\t</validator>\r\n\t~~~~\r\n\r\n\tFinally, you would add the validator to a given field in a form similar to how you would use one of the built-in validators.\r\n\r\n\t~~~~\r\n\t<h:inputText id=\"MyField\" value=\"#{myBean.myField}\">\r\n\t <f:validator validatorId=\"myFieldValidator\" />\r\n\t</h:inputText>\r\n\t~~~~\r\n\r\n\tFor any of the validation mechanisms listed above, there is a common UI pattern for displaying the error messages back to the user. You can use the h:messages or h:message tag\r\n\r\n\t~~~~\r\n\t//for displaying all messages\r\n\t<h:messages />\r\n\t//for displaying messages for a single input field\r\n\t<h:message for=\"userName\" />\r\n\t~~~~\r\n\r\n## Guideline ##\r\n\r\n* [Validate All Input](11a15f3a-7fe8-4e4c-be5e-309ab7227b3d)\r\n"
        ]
      }
    ]
  }
}