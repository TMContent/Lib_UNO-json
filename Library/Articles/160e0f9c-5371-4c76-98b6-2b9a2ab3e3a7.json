{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "160e0f9c-5371-4c76-98b6-2b9a2ab3e3a7"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Logging"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "Logging is the process where detailed logs are kept of both user and application activity across an entire server or deployment. By implementing a proper logging process you can ensure that problems with an application or service are caught quickly and the underlying problem remediated before it becomes an issue. While logs can strengthen security if used properly, they can also become a liability if  allowed to fall into the wrong hands. View each topic below to better understand how a logging service is properly set up and the logs secured from both internal and external attacks.\r\n\r\n## Log Sensitive Operations ##\r\nLogging is frequently used to help detect when an attack may be in progress or an attacker has gained unauthorized access to the system. Important security operations should be logged when they are carried out or a user attempts to trigger a security critical function. This coupled with data such as time stamps, the event source, user identifiers and other information can help track down which account was used and what data was modified. Keeping track of user activity is one of the most useful aspects of general logging, but special attention should be paid to privileged accounts. Make sure that the activity on privileged accounts is logged and that only highly trusted accounts are able to modify the logs.\r\n\r\n* [Any](a8a03491-4da8-4ab1-af04-90f80167ce2e)\r\n\r\n\r\n## Send Logs to a Log Server ##\r\nBe cause logs are one of the primary ways an attack is found and analyzed, log files are frequently targeted after a successful breach by attackers. Because of this, log files should be kept on a separate secure server to ensure they are protected if the main server is compromised. Because log servers are used internally and have a specialized purpose, the attack surface is reduced and can be kept more secure than a general-purpose server.\r\n\r\n* [Any](099fe70b-15a6-45e4-84a8-95d9d98e9581)\r\n\r\n\r\n## Protect Logs ##\r\nSince log files are commonly targeted by attackers to make successful security breaches less obvious, effort should be put into keeping logs secure. Access to log files should be minimized and the number of users who can edit them kept as small as possible. Access to the log files should be restricted to administrator accounts or other highly trusted users. Ensure that log file access follows the principle of least privilege, with write access being restricted to highly trusted accounts. Support personnel and applications should be given read only access to ensure if compromised, these accounts will not be able to remove or tamper with log files. By keeping the amount of users who can modify log files to a minimum, the log files are secure from internal and external attacks alike.\r\n\r\n* [Any](1ac7d033-1666-431e-8de9-98f74aa68fb3)\r\n\r\n\r\n## Do Not Log Sensitive Information ##\r\nLogs are frequently reviewed and analyzed by system administrators and are meant to keep track of any action taken on a server. Because of this sensitive or personally identifiable information (PID) should not be logged to ensure this data is not leaked whether from a breach or internal actor.  Social Security numbers, credit card information and passwords are all examples of information that should not be logged. Some industries have regulatory requirements in place that specify what is considered sensitive information; these should be researched and adhered to when setting up any logging process. The sensitive information an application processes may differ depending on the function or use case. For example in mobile applications, location information should not be logged as this can be considered sensitive information.\r\n\r\n* [.NET](dcf3fde4-a701-4d5f-b46a-8a4f57b49d64)\r\n* [Java](82abb5d8-684b-47b7-adec-34c77ecfb25a)\r\n* [PHP](6430ffee-d18e-42d4-bf3d-53fd7b21846e)\r\n* [C++](b72c287a-c431-4ec9-a02e-210c9c02a739)\r\n* [iOS](00000000-0000-0000-0000-00000033f0db)\r\n* [Android](00000000-0000-0000-0000-0000001dcb79)\r\n\r\n## Throttle Logs ##\r\nIf a logged event can be executed quickly and without limit within in a certainly period of time, it can be used to “poison” logs and either overwhelm the logging process or obscure intrusions. Start by identifying mechanisms or actions that can be executed quickly. Using a buffer to limit the amount of logs entries that can be written in a given period of time can help ensure that entries are not dropped if an action starts generating a large amount of logged events.\r\n\r\n* [.NET](fc33dfc5-5210-4656-bc27-e43b16c3c89e)\r\n* [Java](0196cc1e-01c4-48ac-87d5-aab9c6fbb78c)\r\n* [C++](edf5c057-e38d-4f69-a6fd-11764d7b0563)\r\n\r\n## Centralize Logging ##\r\nThe logging process should be centralized and a dedicated class or library used. This simplifies the logging process and ensures that logging is easy to implement and manage. The logging process should be clearly planned before being implemented, as the security and scope should not be an afterthought. After the logging process is designed and implemented, make sure that all code which generates log entries uses the unified logging API.\r\n\r\n* [.NET](7af4efea-59f5-468a-b5a1-c423cd29744a)\r\n* [Java](fa45dc02-507a-4d3f-a396-ed4aaf044f98)\r\n* [PHP](2121fb95-1840-401b-98c7-4fb14b23730f)\r\n* [C++](771ecd14-0e60-4689-a144-81801c922fac)\r\n\r\n## Include Important Details in Logs ##\r\nAfter implementing a dedicated logging process, it is important to ensure that relevant information is being recorded in the log files. Information should be included that is useful for both forensic review and system administration.\r\n\r\n* [Any](ae5e20be-5f68-49e9-8700-a9e628fd8931)\r\n\r\n\r\n## Validate Logged User Data ##\r\nAll data that is provided by users and later logged should be validated before the information is written to the log file. This should be done to ensure that logging vulnerabilities are not exploited, and the information contained within is not corrupted or altered. If possible, logging user supplied data should be avoided to ensure it is not used as a vector of attack. If logging this data is necessary to keep detailed logs, the information should be verified before it is passed to the logging process.\r\n\r\n* [.NET](00000000-0000-0000-0000-0000004307e6)\r\n* [Java](00000000-0000-0000-0000-000000065b72)\r\n\r\n## Keep Logs for a Year ##\r\nLogs should be kept for at least one year on the logging server and should be archived through an automated process. Attacks or compromises may be discovered months or years after they first happened and logs can provide valuable insight into the vector or target. Special attention should be paid to the archival of log files; some logging systems will remove logs once they’ve reached a certain size or age reducing the history and integrity of the logs.\r\n\r\n* [Any](4da510f9-d288-4819-bb90-b1d7dfe55c06)\r\n\r\n\r\n[Back to the Programming Best Practices Area](bcbbe5c7-95c3-468d-9371-6eb42f9b93e6)\r\n"
        ]
      }
    ]
  }
}