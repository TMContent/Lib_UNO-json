{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "1c259aa6-dac8-41be-822d-90b8332955f0"
        ],
        "Id_History": [
          "1c259aa6-dac8-41be-822d-90b8332955f0,d95b956a-8d2e-40d8-b9a7-3c3d64513742,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Sensitive Data Is Encrypted"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive Data Is Encrypted"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <p>Scala and Play Framework 2.1.0+</p>\n  <h1>What to Check For</h1>\n  <p>Ensure that encryption is used to avoid sensitive data from being stored as&nbsp;plaintext in application configuration files or elsewhere.</p>\n  <h1>Why</h1>\n  <p>Sensitive application data can be compromised if stored in plaintext. Unauthorized access by users or attackers can lead to information disclosure.</p>\n  <h1>How to Check</h1>\n  <p>In applications that accept or process user-sensitive or private data, it is essential to ensure that such important data is not stored in plaintext form, so that no one except the owning user has access to the data. In order to prevent disclosure of such sensitive data, verify the following:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify sensitive information.&nbsp;</strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to:</p>\n      <ul>\n        <li>names of customers</li>\n        <li>government issued ID numbers</li>\n        <li>credit card and other financial information</li>\n        <li>passwords</li>\n        <li>private keys</li>\n      </ul>\n      <p>Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements as they apply to your application to identify sensitive data. Sensitive data can be defined as follows:<br /></p>\n      <ul>\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others.</li>\n        <li>Information that a user provides that they would not want shared with other users of the application.</li>\n        <li>Information that comes from an external trusted source that is not designed to be shared with users</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that sensitive data is stored securely.&nbsp;</strong>Ensure that your application stores sensitive data using either hashing or encryption:</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Hashing:&nbsp;</strong>Hashing is a one-way mechanism for storing sensitive data in a non-retrievable way. If your application uses hashing as means for storing sensitive data, verify that the following pieces are in place:</p>\n          <ul>\n            <li>\n              <strong>Salt</strong>: Your application generates its salt using the SecureRandom class.</li>\n            <li>\n              <strong>Function</strong>: Your application uses SHA-256, SHA-384, or SHA-512 as its hash function.</li>\n            <li>\n              <strong>Invocation</strong>: Your application invokes the&nbsp;<em>MessageDigest.digest</em>&nbsp;method to perform the hashing procedure.</li>\n            <li>\n              <strong>Clean-up</strong>: Your application securely cleans-up all instances of the sensitive data after the hashing procedure has been completed.</li>\n          </ul>\n        </li>\n        <li>\n          <p>\n            <strong>Encryption:</strong>&nbsp;Encryption is a mechanism for storing sensitive data in a retrievable way. If your application uses encryption as means for storing sensitive data, verify that the following pieces are in place:</p>\n          <ul>\n            <li>\n              <strong>Encryption Key</strong>: Verify that your application's encryption keys are securely stored inside your application's key store.&nbsp;</li>\n            <li>\n              <strong>Function</strong>: Check if your application uses AES, 3DES, or any other strong symmetric encryption function.</li>\n            <li>\n              <strong>Invocation</strong>: Check if your application invokes the&nbsp;<em>Cipher.init</em>&nbsp;and&nbsp;<em>Cipher.doFinal</em>&nbsp;methods to perform the encryption procedure.</li>\n            <li>\n              <strong>Clean-up</strong>: Check if your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed.</li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <p />\n  <h1>How to Fix</h1>\n  <p>Use the following steps when storing sensitive data:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify sensitive information.&nbsp;</strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, customer names, government-issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements as they apply to your application to identify sensitive data. Sensitive data can be defined as follows:</p>\n      <ul>\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others.</li>\n        <li>Information that a user provides that they would not want shared with other users of the application.</li>\n        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Choose an appropriate protection mechanism.&nbsp;</strong>Choosing the appropriate protection mechanism depends on the purpose and use of the sensitive data.</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Hashing the application data:</strong>&nbsp;Use hashing if the application data will be used only for comparison purposes. If hashing is used, choose a longer salt: 16 or more bits.&nbsp;In the event&nbsp;that the produced hash is compromised, longer salts make it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Always use&nbsp;<em>SecureRandom</em>&nbsp;and not&nbsp;<em>Random</em>&nbsp;to generate the salt. Example of using&nbsp;<em>SecureRandom</em>&nbsp;to generate a random salt:</p>\n          <pre>// Random generator\nval random = new scala.util.Random(new java.security.SecureRandom())\n \n// Generate a random string of length n from the given alphabet\ndef randomString(alphabet: String)(n: Int): String = \n  Stream.continually(random.nextInt(alphabet.size)).map(alphabet).take(n).mkString\n \n// Generate a random alphabnumeric string of length n\ndef randomAlphanumericString(n: Int) = \n  randomString(\"abcdefghijklmnopqrstuvwxyz0123456789\")(n)</pre>\n          <p>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-512 or stronger.</p>\n          <pre>def sha(s: String) = {\n\t\tval md = java.security.MessageDigest.getInstance(\"SHA-256\")\n\t\t// add a salt. can replace salt with generated salt value\n\t\tval v = \"salt\" + s\n\t\t// return encoded value \n\t\tnew sun.misc.BASE64Encoder().encode(md.digest(v.getBytes(\"UTF-8\")))\n\t}</pre>\n        </li>\n        <li>\n          <p>\n            <strong>Encrypting the application data.&nbsp;</strong>Use encryption if the application data will be retrieved at a later stage.<br /><br />Use symmetric encryption if and only if your application is the only entity that will access the encrypted data. Use a key size of 265-bit or higher and AES for symmetric encryption.<br /><br />Use public/private key encryption if the data will be accessed by two or more parties. Use a key size of 2048-bit or higher and RSA for public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key.</p>\n          <pre>// Because the following code generates a new encryption key,<br />// make sure to store it into the application's keystore.<br />KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");<br />kgen.init(256);<br />SecretKey skey = kgen.generateKey();<br /><br />// Set up cipherCipher cipher = Cipher.getInstance(\"AES\");<br />cipher.init(Cipher.ENCRYPT_MODE, skey);<br />// Note that sensitiveData is of type byte[] and contains<br />// data that is sensitive in nature<br />byte[] encrypted = cipher.doFinal(sensitiveData);</pre>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Apply the appropriate protection mechanism.&nbsp;</strong>Evaluate the code and determine the places where sensitive data is stored. Apply the established protection mechanism at each location.</p>\n    </li>\n  </ol>\n  <br />"
        ]
      }
    ]
  }
}