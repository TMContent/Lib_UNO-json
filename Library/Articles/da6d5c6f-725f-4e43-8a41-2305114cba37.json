{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "da6d5c6f-725f-4e43-8a41-2305114cba37"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Python 3 Drop Privileges"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Python"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Python 3\r\n\r\n## Solution Example ##\r\n\r\n~~~~\r\n#! /usr/bin/env python3\r\n\r\n'''\r\nPython Drop Privileges\r\n'''\r\n\r\n# This script assumes it is initially run from sudo or the root crontab.\r\n# This is not the correct pattern for a suid script.\r\n# Use this pattern if your script must perform a privileged action, then\r\n# perform other non-privileged actions.\r\n\r\nimport grp\r\nimport os\r\nimport pwd\r\nimport sys\r\n\r\ndef perform_privileged_actions():\r\n    # ex: mount network drive, listen on privileged port, write to a system file\r\n    pass\r\n\r\n\r\ndef drop_privileges(username=\"nobody\", groupname=\"nogroup\"):\r\n    if os.getuid() != 0:\r\n        return\r\n\r\n    # Get passwd struct and group list for username/groupname\r\n    pw = pwd.getpwnam(username)\r\n    gr = grp.getgrnam(groupname)\r\n    groups = [g.gr_gid for g in grp.getgrall() if username in g.gr_mem]\r\n\r\n    # Set supplemental groups\r\n    os.setgroups(groups)\r\n\r\n    # Set new uid/gid\r\n    os.setgid(gr.gr_gid)\r\n    os.setuid(pw.pw_uid)\r\n\r\n    # Change important environment variables\r\n    os.environ[\"HOME\"] = pw.pw_dir\r\n    os.environ[\"LOGNAME\"] = username\r\n    os.environ[\"USER\"] = username\r\n\r\n\r\ndef perform_unprivileged_actions():\r\n    # ex: monitor file for changes, listen for connections\r\n    pass\r\n\r\n\r\ndef main():\r\n    perform_privileged_actions()\r\n    try:\r\n        drop_privileges()\r\n    except OSError:\r\n        print(\"Error: Unable to drop privileges.\")\r\n        sys.exit()\r\n\r\n    perform_unprivileged_actions()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    sys.exit(main())\r\n~~~~"
        ]
      }
    ]
  }
}