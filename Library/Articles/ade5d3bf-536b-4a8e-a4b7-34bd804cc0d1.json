{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "ade5d3bf-536b-4a8e-a4b7-34bd804cc0d1"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Stack Canaries to Detect Buffer Overflow Attempts"
        ],
        "Category": [
          "System Hardening"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* C\r\n* C++\r\n* Linux\r\n* Windows\r\n* Embedded Systems\r\n\r\n\r\n## What to Do ##\r\n\r\nTo combat stack buffer overflows, set an initial canary value on the stack. This value must be unpredictable to ensure that the attacker cannot adjust the attack vector to reflect the canary value. Implement the function `int get_canary_value()` which returns a single integer value to be used as the canary value. Verify this value before the function returns. If a buffer overflow attack has occurred, the canary value is changed. Implement another function `void check_canary_value (int value)` that validates the canary value and compare it to the original one.\r\n\r\n\r\n## Why ##\r\n\r\nFor any function, the stack is the area of memory that contains all local variables and the calling function’s return address. \r\n\r\nA stack-based buffer overflow may lead to unauthorized modification of program data, or to changes in the behavior of the application. If the source data length is bigger than the target buffer, then the adjacent memory area is modified as well. Effectively, some local variables and the function’s return address are modified. \r\n\r\nThe edge of the target buffer is exactly where the canary variable is placed. In case of a buffer overflow, its value is modified as well, so the buffer overflow is easily detected.\r\n\r\nIf the buffer overflow is undetected, overwriting the function’s return address leads to changing the control flow of the system.\r\n\r\nAn attacker who has access to the application source code will be able to perform well-targeted, and hence more dangerous, buffer overflow attacks to execute malicious commands or access sensitive data.\r\n\r\n\r\n## How ##\r\n\r\nThe following is an example. Adapt real production code according to your platform specifics.\r\n\r\n1. **Implement the `int get_canary_value ()` function**. This function generates and returns an unpredictable integer value:\r\n\r\n\t\tstatic int canary_value__ = -1;\r\n\r\n\t\tint get_canary_value ()\r\n\t\t{\r\n\t\t  if (canary_value__ == -1) {\r\n\t\t\t/* Intializes random number generator */\r\n\t\t\ttime_t t;\r\n\t\t\tsrand ((unsigned) time(&t));\r\n\t\t\t/* Generate canary value */\r\n\t\t\tcanary_value__ = rand ();\r\n\t\t  }\r\n\t\t  /* Return */\r\n\t\t  return canary_value__;\r\n\t\t}\r\n\r\n2. **Implement the `void check_canary_value (int value)` function**. This function verifies the canary value by comparing it to its original value.\r\n\r\n\t\tvoid check_canary_value (int value)\r\n\t\t{\r\n\t\t  /* Compare canary value to original */\r\n\t\t  if (value != canary_value__) {\r\n\t\t\t/* If modified stop the program */\r\n\t\t\texit (0);\r\n\t\t  }\r\n\t\t}\r\n\r\n3. **Initialize the canary variable at the first statement of the function**. \r\n\r\n\t\tvoid canary_test () \r\n\t\t{\r\n\t\t  /* initialize canary value */\r\n\t\t  int canary = get_canary_value ();\r\n\r\n4. **After the code above, insert your code which might be affected by a buffer overflow attack**.\r\n\r\n\t\t/* target buffer */\r\n\t\tchar buffer[100];\r\n\t\t/* perform operation which might be the target for attack */\r\n\t\tstrcpy (&buffer[0], some_malicious_value_provided_by_attacker);\r\n\t\t/* after this operation canary value might have changed */\r\n\r\n5. **Finally, compare the canary variable to its original value**. If the canary value has changed, then an attack has occurred and execution of the application should immediately stop.\r\n\r\n\t\t/* verify canary value */\r\n\t\tcheck_canary_value (canary);\r\n\t\treturn;\r\n"
        ]
      }
    ]
  }
}