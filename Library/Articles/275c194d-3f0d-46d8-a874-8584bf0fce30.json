{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "275c194d-3f0d-46d8-a874-8584bf0fce30"
        ],
        "Id_History": [
          "275c194d-3f0d-46d8-a874-8584bf0fce30,b5686cd3-3448-44dc-8e73-6a71f64a274c,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use of Hard-coded Cryptographic Key"
        ],
        "Category": [
          "Cryptographic Storage"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Use of Hard-coded Cryptographic Key"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nApplications that use cryptography need a method for managing keys. One of the simplest ways to store the keys is to hard-code them into the application. However, this approach is not secure, because anyone with access to the application code is able to recover the keys. Once an attacker has recovered the keys, they can use them to decrypt sensitive data. This vulnerability applies to all applications that use cryptography. \n\n=Impact\n\nAn attacker that has access to the application code is able to recover any hard-coded cryptographic keys. If the attacker gets access to the data encrypted with those keys, they will be able to decrypt them. The trouble is that if the attacker is able to get the encrypted data, they can probably get the application code as well. Therefore, using hard-coded cryptographic keys essentially defeats the purpose of using encryption in the first place. \n\n=Countermeasures\n\nTo prevent this vulnerability, provide a secure admin interface that allows for managing encryption keys, and use protected storage APIs to store the keys.\n\nProvide a secure administrative interface that allows managing cryptographic keys:\n\n* [[acb75dc8-06cd-4ba4-9ec7-dfe93eab567d|Provide a Secure Administrative Interface that Allows Managing Cryptographic Keys]]\n\nStore encryption keys using protected storage APIs:\n\n* [[4d2138c2-349b-46f7-96fb-ef91a43fd1f6|Protect Encryption Keys]]\n\n=Application Check\n\nTo check for adequate protection against this vulnerability, ensure that a secure admin interface that allows for managing cryptographic keys is provided, and examine all code that uses encryption to ensure that encryption keys are stored using protected storage APIs.\n\nA secure administrative interface that allows managing cryptographic keys is provided:\n\n* [[fe9afb4a-790d-413f-9b77-4258314c1dc4|A Secure Administrative Interface that Allows Managing Cryptographic Keys Is Provided]]\n\nEncryption keys are stored using protected storage APIs:\n* [[e19e6c8e-f5e4-4607-8c71-34102dc2e760|Encryption Keys Are Protected]]"
        ]
      }
    ]
  }
}