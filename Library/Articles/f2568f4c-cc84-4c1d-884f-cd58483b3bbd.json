{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "f2568f4c-cc84-4c1d-884f-cd58483b3bbd"
        ],
        "Id_History": [
          "f2568f4c-cc84-4c1d-884f-cd58483b3bbd,d370dd0e-b0c8-45a8-9819-0d2ab4543f65,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Connection String Injection"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Connection String Injection"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nApplications use connection strings to specify credentials used to access databases. If the application includes unvalidated user input in connection strings, an attacker may be able to change the databases that the application connects to. Connection string injection vulnerabilities apply to applications that connect to databases. \n\n=Impact\n\nBy manipulating the connection string, an attacker is able to cause the application to connect to an unintended data source. The attacker may be able to bypass authentication by re-routing the application to use his own database. The attacker may also get data from another database by re-routing the application to use it. The exact impact of a connection string injection vulnerability is difficult to predict because it is heavily dependent on application logic. Overall, the connection string vulnerability is difficult for an attacker to use, but it is still a serious vulnerability. \n\n=Countermeasures\n\nTo prevent connection string injection vulnerabilities, validate all input, store connection strings securely, and don't use user input in connection strings. \n\n=Application Check\n\nTo check for adequate protection against connection string injection vulnerabilities, find all connection strings used by the application and verify that unvalidated user input is not included in them. Ideally, user input should not be included in connection strings at all. \n\n=Specific Technologies\n\n* [[a86e3035-578c-4dfe-a147-2776af6de6e1|ASP.NET Connection String Injection]]"
        ]
      }
    ]
  }
}