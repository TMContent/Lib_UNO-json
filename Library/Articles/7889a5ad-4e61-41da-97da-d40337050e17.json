{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "7889a5ad-4e61-41da-97da-d40337050e17"
        ],
        "Id_History": [
          "7889a5ad-4e61-41da-97da-d40337050e17,8cb23f25-1263-4868-83e0-6d2f2e60f1c1,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Make Security Decisions Based on Client-Accessible Parameters"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Make Security Decisions Based on Client-Accessible Parameters"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <p>Scala and Play Framework 2.1.0+<br /></p>\r\n  <h1>What to Do</h1>\r\n  <p>Do not make security decisions based on parameters that are sent by the client.</p>\r\n  <h1>Why</h1>\r\n  <p>Using client-accessible data to make security decisions allows the users to access and modify it. Therefore, an attacker would be able to bypass security measures.</p>\r\n  <h1>When</h1>\r\n  <p>If your application accepts and processes client-side information, do not use that information to make security decisions.</p>\r\n  <h1>How</h1>\r\n  <p>Security decisions should not be based on any data over which the client has control. Common mistakes include relying on data inside unprotected cookies, hidden fields or query strings.</p>\r\n  <p>To ensure that no security decisions are based on client-accessible data:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify security decision points.&nbsp;</strong>Carefully examine the points in the code that are related to your application's security model. It is critical that no decision points are placed in the client. Because this is a design issue, it is recommended to use threat modeling to determine and evaluate the security decision points.</p>\r\n      <p />\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Trace data that influences security decisions.&nbsp;</strong>Tracing the data that influences security decisions helps&nbsp;determine if the data is vulnerable to any client-based attacks. Make sure that the client cannot modify or influence this data.</p>\r\n      <p />\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Prove that security-related data cannot be tampered with by the client.&nbsp;</strong>Use cryptography or your application's design to ensure that security related data cannot be tampered with by the client.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Mark all exceptions to this guideline.&nbsp;</strong>Note all exceptions made to this guideline. Thoroughly examine the code associated with such instances. Verify that all instances are provided in the business logic and are intended.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code illustrates a servlet that accepts user-supplied input. Unfortunately, the application obtains the user's ID from the client which allows&nbsp;an attacker to tamper with data that influences security decisions.</p>\r\n  <pre>public void doGet(HttpServletRequest request,<br />      HttpServletResponse response) throws ServletException, IOException{<br />      String userID = request.getParameter(\"userid\");<br />       ...<br /> }</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code illustrates a servlet that accepts user-supplied input. Because the application obtains the user's ID from the user's session, it is not possible for an attacker to tamper with such data.</p>\r\n  <pre>public void doGet(HttpServletRequest request,<br />      HttpServletResponse response) throws ServletException, IOException{<br />      Session sess = request.getSession();<br />      String userID = (String)sess.getAttribute(\"userid\");<br /><br />      ...<br /><br />}</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about parameter manipulation and ways to prevent it, see:&nbsp;<a href=\"http://www.cgisecurity.com/owasp/html/ch11s04.html\">Parameter Manipulation</a>.</li>\r\n  </ul>\r\n  <div>\r\n    <br />\r\n  </div>"
        ]
      }
    ]
  }
}