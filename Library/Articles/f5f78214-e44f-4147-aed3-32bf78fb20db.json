{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "f5f78214-e44f-4147-aed3-32bf78fb20db"
        ],
        "Id_History": [
          "f5f78214-e44f-4147-aed3-32bf78fb20db,fbf9e740-ea87-44f3-9275-3ade73410af4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Unreleased Resource"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Unreleased Resource"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description=\nUnreleased resource issues occur when an application locks or allocates a system resource for its use, but doesn't release the resource afterwards. It is common for these issues to be cumulative - often the same function that allocates additional resources for the application is called multiple times by the application, each time wasting more and more system resources. If the attacker can cause the application to call such a wasteful function continuously, he can cause the application to use up all the available system resources, typically causing the application to crash. After the application crashes, the system will usually free the resources allocated by the application and continue working. \n\nUnreleased resource issues affect all application types.\n\n=Impact=\nUnreleased resource issues might result in Denial of Service conditions. If the attacker is able to exploit the unreleased resource issue to consume large amounts of system resources, he can make the application, and possibly the system, unresponsive.\n\n=Countermeasures=\nTo prevent resource leaks, release all system resources after using them.\n\n=Application Check=\nTo check for adequate protection against resource leaks, make sure that all system resources are released after being used.\n\n=Specific Technology=\n\n* [[be7eab47-34dd-4647-b65a-6541e1fab67b|C++ Unreleased Resource]]"
        ]
      }
    ]
  }
}