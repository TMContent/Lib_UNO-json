{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "db5bc41d-c414-497b-a7cf-2d63e7720fc6"
        ],
        "Id_History": [
          "db5bc41d-c414-497b-a7cf-2d63e7720fc6,d2ba2ff8-3858-4948-95bb-894f4f44f6c9,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Command Injection"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Command Injection"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nApplications often execute external commands as a part of their functionality. If the attacker is able to manipulate the choice of external commands or their parameters, the attacker will be able to abuse this functionality to execute arbitrary commands. If an attacker is able to execute arbitrary commands, they are typically able to take over the application and possibly take over the entire system. All applications that use external applications are affected by command injection vulnerabilities. Web applications are particularly at risk, because they are exposed to the Internet.\n\n=Impact\n\nCommand injection allows an attacker to execute arbitrary commands. In a small minority of cases, there will be limits on the scope of the available commands due to unintended peculiarities of the application's inner workings, but most of the time an attacker can take full control of the application using this vulnerability. If the attacker is able to leverage additional vulnerabilities or the server is not configured properly, the attacker will be able to take full control of the system. A command injection vulnerability acts as a virtual backdoor for an attacker to use the application and the server for their purposes. Any data that is stored by or accessed by the application can also be compromised as a result of command injection.\n\n\n=Countermeasures=\nTo prevent command injection vulnerabilities, validate all input and use parameterized APIs to execute external commands.\n\n* [[a8eb9762-08f6-4e61-afa7-23386cbca281|Validate All Input]]\n\n* [[2314618a-47ce-4ff0-9641-365fb3e262e4|Create Processes Securely with CreateProcess()]]\n\n=Application Check=\nTo check for adequate protection against this vulnerability, ensure that all input is validated and parameterized APIs are used.\n\n* [[8d8c24b0-096b-43f4-9391-9b293313a0e8|All Input Is Validated]]\n\n* [[6f9fefbf-ecdd-465a-a09c-0769166a3ce0|Processes Are Created Safely with CreateProcess()]]"
        ]
      }
    ]
  }
}