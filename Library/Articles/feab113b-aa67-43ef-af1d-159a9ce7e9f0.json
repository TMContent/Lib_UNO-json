{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "feab113b-aa67-43ef-af1d-159a9ce7e9f0"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Reusable Security Code Is Developed"
        ],
        "Category": [
          "Security Engineering"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Check For ##\r\n\r\nVerify that well-written security code is reused.\r\n\r\n## Why ##\r\n\r\nReusing security code creates a more-secure application for these reasons:\r\n\r\n- reduces code complexity and associated maintenance costs\r\n- ensures security requirements are addressed with proven controls\r\n- prevents re-introduction of bugs and vulnerabilities\r\n- allows testing of the security code in isolation\r\n- allows for performance tuning while maintaining security posture\r\n- permits offloading of security processing to network appliances.\r\n\r\n\r\n## When ##\r\n\r\nWhen working with various programming and scripting languages, create new versions of reusable security code as required for each programming language, such as Java, PHP, Python, Ruby and .NET. This includes routines for authentication, cryptographic, and logging code, for example.\r\n\r\n## How to Check ##\r\n\r\nTo verify that well-written security code is reused:\r\n\r\n1. **Identify well-written security code.** Look through your applications for security code that is well-written and can be reused. Examples of security code that can be reused include authentication, authorization, cryptographic, data validation and logging code.\r\n\r\n2. **Examine reusable security code.** Check whether well-written security code is the same in multiple applications - this would indicate that security code is being reused. Interview developers and ask them whether they maintain a library of security code. Examine the library of reusable code to determine its quality.\r\n\r\n## How to Fix ##\r\n\r\nThe development of security code will generally parallel your software development lifecycle, and will follow these general steps.\r\n\r\n1. **Identify requirements and perform analysis.** Identify requirements which security code must address. \r\n\r\n2. **Design software architecture.** Develop specific code parameters to work within the application architecture boundary. Include inputs and outputs from the requirements specification. Use data flow diagrams and other illustrations to transform use cases into pseudo code.\r\n\r\n3. **Write software code.** Actual coding is developed at this time. This is the longest phase of the cycle.\r\n\r\n4. **Test security code.**  Test the security code against the requirements by using standard test methods.\r\n\r\n5. **Deploy security code.** Add the security code to current projects.\r\n\r\n6. **Maintain software library.** When the security code needs updating due to deficiencies noticed in actual use, use change control procedures to revise or add requirements. Submit the code for security testing, and add to the code security library when your change control sign-offs are completed.\r\n"
        ]
      }
    ]
  }
}