{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "067e2f72-18f0-4f5a-ba9c-287691cd9ed3"
        ],
        "Id_History": [
          "067e2f72-18f0-4f5a-ba9c-287691cd9ed3,d57eba16-ea05-41b2-8bb4-a4f107c68413,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Input Is Validated for Length, Range, Format And Type"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Input Is Validated for Length, Range, Format And Type"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies To</h1>\n  <h1>\n    <p style=\"font-size: medium; font-weight: normal;\">Applications written using Scala and Play Framework 2.1.0+</p>\n  </h1>\n  <h1>What to Check For</h1>\n  <h1>\n    <p style=\"font-size: medium; font-weight: normal;\">Check that all input is validated and treated as untrusted data. Ensure data is validated using whitelisting techniques to check against known good input.</p>\n  </h1>\n  <h1>Why</h1>\n  <h1>\n    <p style=\"font-size: medium; font-weight: normal;\">Unchecked malicious input may lead to integer overflows, injection based attacks, denial of service or information disclosure.</p>\n  </h1>\n  <h1>How to Check</h1>\n  <h1>\n    <p style=\"font-size: medium; font-weight: normal;\">To check for this problem, use the following steps:</p>\n    <ol style=\"font-size: medium; font-weight: normal;\">\n      <li>\n        <p>\n          <strong>Find all input sources.&nbsp;</strong>During design time, identify all of the potential input sources to your application. Scour the source code to discover sources of input that may have been missed in the design. The most common sources are:</p>\n        <ul>\n          <li>URL based parameters</li>\n          <li>Form based parameters</li>\n          <li>Hidden fields</li>\n          <li>Cookies</li>\n          <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)</li>\n          <li>Local filesystem</li>\n          <li>Database</li>\n          <li>Other services running on the system</li>\n          <li>Javascript variables</li>\n          <li>File upload and attributes (filename, size, data, etc)</li>\n          <li>DNS results or host names</li>\n          <li>External component call return values (AJAX, etc)</li>\n        </ul>\n      </li>\n      <li>\n        <p>\n          <strong>Trace data from source to sink.&nbsp;</strong>Trace each source of input through your application until you find its ultimate destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.</p>\n      </li>\n      <li>\n        <p>\n          <strong>Identify validation routines.&nbsp;</strong>Each input source should have a data validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.</p>\n      </li>\n      <li>\n        <p>\n          <strong>Ensure quality of validation routines.&nbsp;</strong>Validation routines should check for length, range, format and type.</p>\n        <ul>\n          <li>Validation routines should check for known good data and constrain input against each of the four categories: length, range, format and type.</li>\n          <li>In web applications, look for application-supplied validators, such as a Custom Scala Validator, to validate and constrain input after it is received from an input source.</li>\n          <li>Ensure that all numeric fields are validated for type and range. Check for the use of regular expressions and&nbsp;<strong>scala.util.matching</strong>&nbsp;or the use of a validator that checks numeric ranges by converting the input value to an integer or double and then performing a range check.</li>\n          <li>Check that validators validate input against the least permissive expression possible that will accept all the input expected for that field.</li>\n          <li>If you know that the field will have a certain internal structure, ensure that is checked for.</li>\n          <li>If the input has an internal checksum, like a credit card number, ensure that is checked.&nbsp;<br /><br />Validation should check first for whitelisted data, ie, known valid, safe data, and then for blacklisted data, ie, malicious, dangerous data. Do not rely only on filtering out malicious data as it is too easy to miss something. Validate on the server--do not rely on client-side validation alone as it can be easily bypassed.</li>\n        </ul>\n      </li>\n    </ol>\n    <blockquote style=\"font-size: medium; font-weight: normal;\">\n      <p>\n        <strong>Options for Constraining and Sanitizing Data</strong>\n      </p>\n      <table>\n        <tbody>\n          <tr>\n            <th>Requirement</th>\n            <th>Options</th>\n          </tr>\n          <tr>\n            <td>Type checks</td>\n            <td>Regular expressions (<strong>scala.util.matching</strong><strong>.regex</strong>)<p>Scala type system</p></td>\n          </tr>\n          <tr>\n            <td>Length checks</td>\n            <td>Regular expressions (<strong>scala.util.matching</strong><strong>.regex</strong>)<br /><p><i><b>play.api.data.validation</b></i>&nbsp;object</p><p>Custom Scala&nbsp;<strong>Validator</strong></p></td>\n          </tr>\n          <tr>\n            <td>Format checks</td>\n            <td>Regular expressions for pattern matching (<strong>Pattern</strong>,&nbsp;<strong>Matcher</strong>)<p>Scala type system</p><p><i><b>play.api.data.validation</b></i>&nbsp;object</p></td>\n          </tr>\n          <tr>\n            <td>Range checks</td>\n            <td>Custom Scala&nbsp;<strong>Validator</strong><p>Typed data comparisons</p><p><i><b>play.api.data.validation</b></i>&nbsp;object</p></td>\n          </tr>\n        </tbody>\n      </table>\n    </blockquote>\n  </h1>\n  <h1>How to Fix</h1>\n  <h1>\n    <p style=\"font-size: medium; font-weight: normal;\">Input can vary in length, data type, and content. Validate that all input meets your application's expectations.</p>\n    <ol style=\"font-size: medium; font-weight: normal;\">\n      <li>\n        <p />\n        <strong>Validating length</strong>: Your application should check a string's length or the number of bits in a numeric value. Checking the length can help prevent buffer overflows as well as integer overflows in numeric values. A simple way to validate the numeric value for forms is through the use of&nbsp;<i>minLength(length: Int)</i>&nbsp;and<i>&nbsp;maxLength(length: Int)</i>&nbsp;from the&nbsp;<i>play.api.data.validation</i>&nbsp;constraints object of Play Framework:<pre>object SignUp extends Controller {\n  \n  /**\n   * Sign Up Form definition.\n   */\n  val signupForm: Form[User] = Form(\n    \n    // Define a mapping that will handle User values\n    mapping(\n      \"firstname\" -&gt; text(maxLength = 20),\n      \"lastname\" -&gt; text(maxLength = 20),\n      \"username\" -&gt; text(minLength = 4),\n      \"password\" -&gt; text(minLength = 6),   \n      // Create a tuple mapping for the password/confirm\n      \"password\" -&gt; tuple(\n        \"main\" -&gt; text(minLength = 6),\n        \"confirm\" -&gt; text\n      ),\n\n    )\n  )\n  }</pre>Also, you can validate any numeric value through the use of<font color=\"#ff0000\"></font>&nbsp;BigInt/BigDecimal as follows:&nbsp;<pre>def productcheck = Action { implicit request =&gt;\n    prodForm.bindFromRequest.fold(\n      errors =&gt; BadRequest(views.html.index(errors, \"There is some error\")),\n      prodForm =&gt; {\n\n        val proname = prodForm.pname\n        val prodprice = prodForm.price\n        if(prodprice.compare(BigInt(0)) &gt; -1\n          && prodprice.compare(BigInt(Integer.MAX_VALUE)) \n        {\n          println(\"true\")\n          ............ //code for true\n        }\n        else\n        {\n          println(\"false\")\n          ............ // code for exception\n        }</pre></li>\n      <li>\n        <p />\n        <strong>Validating type</strong>:&nbsp;Validating the input's data type is important when your application expects a specific non-string parameter. Difference in data type can trigger unhandled exceptions that would throw your application into an unknown state. The following is an example of validating in forms:<pre>object ContactForm extends Controller {\n  \n  /**\n   * Contact Form definition.\n  */\n  val appointmentMapping = tuple(\n  \"location\" -&gt; text,\n  \"start\" -&gt; tuple(\n    \"date\" -&gt; date,\n    \"time\" -&gt; text),\n  \"attendees\" -&gt; list(mapping(\n    \"name\" -&gt; text,\n    \"email\" -&gt; email)\n)}</pre></li>\n      <li>\n        <strong>Validating contents</strong>: Use whitelist and blacklist techniques to validate the input's contents, based on the constraints that are imposed on the input: If the input follows a tight structure and format, you can use whitelisting alone to weed out malicious input. If there are unknowns about the input, you'll need a combination of whitelisting and blacklisting. In general, use blacklisting as a backup to whitelisting, through a spiral-out approach: Use whitelisting for the initial validation. If whitelisting cannot validate the input, then fall back to blacklisting. If blacklisting cannot validate, then discard the input. The following is an example of implementing this technique using forms:<pre>object ValidateProduct extends Controller {\n\n  val productForm = Form(mapping(\n    \"ean\" -&gt; longNumber.verifying(\"This product already exists!\", Product.findByEan(_).isEmpty),\n    \"name\" -&gt; nonEmptyText,\n    \"description\" -&gt; text,\n    \"pieces\" -&gt; number,\n    \"active\" -&gt; boolean)(Product.apply)(Product.unapply).verifying(\n      \"Product can not be active if the description is empty\", product =&gt;\n        !product.active || product.description.nonEmpty))\n}</pre><p>Using regular expressions, the fix would be as below:</p><p /><pre>val pid = ProductForm.productid\nval pname = ProductForm.productname\nval products = Product.findProduct(pid, pname)\nval whitelistPattern = \"(\\\\w|\\\\d)+\".r\nval issafe =whitelistPattern.pattern.matcher(pname).matches</pre><pre>if (issafe){</pre><pre>...... //Code for Action</pre><pre>}else{</pre><pre>...... //Code for Exception</pre><pre>}</pre><pre><br /></pre><p>Examples of useful regular expressions:</p><p /><table><tbody><tr><td>Use</td><td>Regular Expression</td><td>Scala String</td></tr><tr><td>Valid E-Mail Address</td><td>^\\w+(\\.|_|-){0,1}\\w+@(\\w+\\.)*\\w{3,1024}\\.([a-zA-Z]{2}\\.){0,1}[a-zA-Z]{2,4}$</td><td>^\\\\w+(\\\\.|_|-){0,1}\\\\w+@(\\\\w+\\\\.)*\\\\w{3,}\\\\.([a-zA-Z]{2}\\\\.){0,1}[a-zA-Z]{2,4}$</td></tr><tr><td>Alpha-numeric free text</td><td>(\\w|\\d|\\s|;|\\?|!|,|\\.|-|:)+</td><td>(\\\\w|\\\\d|\\\\s|;|\\\\?|!|,|\\\\.|-|:)+</td></tr><tr><td>Word characters</td><td>\\w+</td><td>\\\\w+</td></tr><tr><td>Numbers</td><td>\\d+</td><td>\\\\d+</td></tr></tbody></table></li>\n    </ol>\n  </h1>\n  <h1>Additional Resources</h1>\n  <h1>\n    <ul style=\"font-size: medium; font-weight: normal;\">\n      <li>A tutorial on regular expressions is available at&nbsp;<a href=\"http://www.regular-expressions.info/\">Regular-Expressions.info</a>.</li>\n      <li>For more information on using regular expression in Scala, see: Documentation for&nbsp;<a href=\"http://www.scala-lang.org/api/current/index.html#scala.util.matching.Regex\">Regex Pattern</a>&nbsp;in Scala documentation.</li>\n    </ul>\n  </h1>\n  <br />\n  <div>\n    <ul style=\"margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;\">\n    </ul>\n  </div>"
        ]
      }
    ]
  }
}