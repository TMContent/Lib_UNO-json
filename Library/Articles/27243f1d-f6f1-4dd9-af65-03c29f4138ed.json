{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "27243f1d-f6f1-4dd9-af65-03c29f4138ed"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use POST for Sensitive Requests"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Ruby"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- Ruby\r\n\r\n\r\n## What to Do ##\r\n\r\nUse POST as the HTTP request method to send sensitive information with the application. Do not place sensitive data in unprotected parameters. Do not use GET with sensitive requests.\r\n\r\n\r\n## Why ##\r\n\r\nSubmitting sensitive data through public channels requires the use of TLS encryption. However, the HTTP request parameters must also be protected by using POST for sensitive HTTP requests. To take advantage of the built-in Cross-Site Request Forgery (CSRF) protection, the developer must use POST requests for sensitive operations.\r\n\r\nIf the anti-CSRF feature is not used, then the authenticated user's Web browser could be forced to perform malicious actions.\r\n\r\n## When ##\r\n\r\nUse this guideline to implement POST when handling sensitive requests with your Ruby applications.\r\n\r\n\r\n## How ##\r\n\r\nTo use POST for sensitive requests:\r\n\r\n1. **Find all sensitive operations.** Determine what security-sensitive operations are mediated by the application. \r\n\r\n2. **Find code that implements sensitive operations.** Search the application code to identify methods which handle sensitive data.\r\n\r\n3. **Use POST requests for sensitive operations.** Ensure the code uses POST for sensitive exchange of information. If necessary, rewrite to have user send sensitive data with POST as the HTTP request message.\r\n"
        ]
      }
    ]
  }
}