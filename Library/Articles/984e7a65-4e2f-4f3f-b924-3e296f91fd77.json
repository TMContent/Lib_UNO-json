{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "984e7a65-4e2f-4f3f-b924-3e296f91fd77"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Reduce Attack Surface of Embedded Systems"
        ],
        "Category": [
          "System Hardening"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Any Programming Language\r\n* Embedded Systems\r\n* Windows\r\n* Linux\r\n\r\n## What to Do ##\r\n\r\nAnalyze your system requirements. Decide what services are important for application functionality. Consider disabling or uninstalling unnecessary services. If that option is not possible, ensure that unnecessary services introduce no security threat to the system. Check for wireless services like Wi-Fi, Bluetooth, IR, NFC. If your system has USB communication, identify all the data accessible through it.\r\n\r\nPerform   system updates and check for security patches regularly.\r\n\r\nPerform regular data and system backups.\r\n\r\nIf available, use tamper-evident hardware to detect possible intrusion or intrusion attempts.\r\n\r\n## Why ##\r\n\r\nThese precautions are very important for embedded systems because, unlike desktops, they are usually located in places without proper physical access control. Examples include ATMs or kiosks outside of buildings, or in airports with thousands of people around.\r\nThere is no perfect security, and no 100% secure software; therefore, vendors issue security patches or updates to protect the system from discovered vulnerabilities. \r\nHaving regular backups increases system availability and integrity  .\r\n\r\n## When ##\r\n\r\nUse these precautions for any system that has a chance to be exposed to an untrusted environment or that might receive data from untrusted sources.\r\n\r\n## How ##\r\n\r\nTo reduce attack surface of embedded systems:\r\n\r\n1. **Identify all the services that are needed for the application**. Review your system requirements. Decide which services available on the platform are needed to perform application functions, and which are not.\r\n\r\n2. **Secure the services**. For the services that are required by the application, consult vendor documentation. Follow recommended practices to configure and operate them in a secure way. Do not rely on default configuration or parameters, because such settings are usually very general and may not reflect your application specifics or particular security level.\r\n\r\n3. **Disable or uninstall unnecessary functionality**. For the services that are not required, consider removing or disabling them. If they cannot be disabled, check vendor documentation and best security practices for configuring non-essential services to ensure that they do not introduce any security risks or possible vulnerabilities.\r\n\r\n4. **Provide system update functionality**. Review your application design and, if possible, provide functionality for installing system updates or security patches. Including such functionality is very important because there are many different places in the system where security risks could be discovered in the future, such as device firmware, operating system modules, services, application libraries and frameworks used for application development.\r\n\r\n5. **Use tamper prevention or tamper-evident mechanisms**. Very often hardware vendors provide mechanisms to prevent or detect intrusion into system components in which attackers attempt to access or tamper with sensitive data. Consult vendor documentation for these mechanisms and integrate them into your system.\r\n\r\n6. **Provide backup functionality**. Identify all the sensitive information processed on the system. Provide functionality for information backup either using network services, or, if they are not available, using external storage. Backup is especially important for system configuration files and parameters.\r\n\r\n7. **Use FIPS-certified modules**. FIPS (Federal Information Processing Standards) specify requirements for security modules. Use FIPS-certified modules in your application for cryptographic functionality, authentication and authorization services.\r\n"
        ]
      }
    ]
  }
}