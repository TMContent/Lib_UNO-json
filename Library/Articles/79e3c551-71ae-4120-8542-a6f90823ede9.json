{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "79e3c551-71ae-4120-8542-a6f90823ede9"
        ],
        "Id_History": [
          "79e3c551-71ae-4120-8542-a6f90823ede9,661628b2-3057-4370-b806-974d0e998545,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Insecure Randomness"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Insecure Randomness"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nInsecure randomness vulnerabilities occur when a pseudo-random number generator with poor entropy is used for cryptography. With poor entropy, the results of the cryptographic algorithm being used become easier to predict, thus weakening the cryptography overall. \n\nIt is important to distinguish between encryption and cryptography in general: Encryption is a subset of cryptography, and refers to scrambling stored data in a manner that can be reversed, whereas cryptography is a more general term that refers to using a certain type of  algorithm for a practical application. \n\nInsecure randomness issues affect all applications that use cryptographic algorithms that require random numbers for proper operation (which is virtually all of them). \n\n\n==Impact==\n\nIf a pseudo-random number generator with poor entropy is used, the cryptographic scheme can be broken in a short time. The exact impact depends on the cryptographic scheme being used and its purpose. One possible scenario is when a poor source of randomness is used to generate authentication keys - in this case an attacker will be able to generate unauthorized authentication keys. Another possible scenario is when a poor source of randomness is used as a part of an encryption scheme - in that case an attacker will be able to recover encrypted data.\n\n\n==Countermeasures==\n\nTo prevent insecure randomness vulnerabilities, use a cryptographically strong pseudo-random number generator.\n\n* [[fc71ec26-56a0-47e8-9394-0f637870f01f|Use a Strong PRNG]]\n\n\n==Application Check==\n\nTo check for adequate protection against insecure randomness vulnerabilities, make sure that a cryptographically strong pseudo-random number generator is used.\n\n* [[46e1b223-0aa6-4007-a3da-eb767ea3b62c|A Strong PRNG Is Used]]\n\n\n==Computer Based Training Links==\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n===Security Tools and Technologies===\n\nThis course is designed to educate architects and developers on the technologies available to create more secure systems. Topics include common network security technologies, cryptography, antivirus technologies, access control technologies, tokens and smart cards, biometrics, and various authentication methods.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127644|DES 213 Security Tools and Technologies]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\n"
        ]
      }
    ]
  }
}