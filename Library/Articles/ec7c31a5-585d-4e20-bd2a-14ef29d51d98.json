{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "ec7c31a5-585d-4e20-bd2a-14ef29d51d98"
        ],
        "Id_History": [
          "ec7c31a5-585d-4e20-bd2a-14ef29d51d98,788a7025-9434-481a-b2a4-b29b1c89e3e1,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Cross-Site Scripting (XSS)"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Any"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Cross-Site Scripting (XSS)"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <p>Applications written using Scala and Play Framework 2.1.0+</p>\n  <h1>Vulnerability Description</h1>\n  <p />\n  <p />\n  <p>Browsers are capable of displaying HTML and executing JavaScript. If the application does not escape special characters in the input/output, and reflects user input as-is back to the browser, it is vulnerable to a Cross-Site Scripting (XSS) attack. Through XSS, an attacker can steal or manipulate customer session and \ncookies and use it to impersonate the valid user, execute malicious \nfiles, install Trojans, redirect a user to a malicious site, and so on.</p>\n  <p>There are two types of XSS: non-persistent (or reflected) XSS, and persistent (or stored) XSS.</p>\n  <p>\n    <b>Non-Persistent XSS. </b>A non-persistent attack requires a user to visit a link specially crafted by the attacker. When the user visits the link, the crafted code will get executed by the user’s browser.&nbsp;</p>\n  <p>\n    <b>Persistent XSS. </b>In a persistent attack, the code injected by the attacker will be stored in a secondary storage device (usually on a database). A persistent attack is more harmful than a non-persistent attack.&nbsp;</p>\n  <p />\n  <p />\n  <p />\n  <p />\n  <h1>How to Fix</h1>\n  <p />\n  <p />\n  <p>By default, Play’s template engine prevents XSS vulnerabilities. Everything you write literally in a template is considered HTML by Play, and output is un-escaped. This HTML is always written by the template author, so it is considered safe. Other than the default HTML page contents, Play’s template engine automatically escapes strings by default. Still, as a best practice, always escape special characters before they are displayed to the user screens.</p>\n  <p>a) When you really need to insert un-escaped HTML in your templates, use the&nbsp;<font face=\"Courier New\">raw()</font>&nbsp;method or the&nbsp;<font face=\"Courier New\">HTML()&nbsp;</font>method on the string or use a verbatim tag in raw HTML. But if the string comes from a user input, sanitize it first.<br />b) To set up a stricter escaping rule, edit the function <font face=\"Courier New\">escape</font> in the Play framework source at location ~/framework/src/play/src/main/scala/play/api/templates/Templates.scala and then build the source again.&nbsp;<br />Alternatively, if you are building from GitHub source, edit the file at location <a href=\"https://github.com/playframework/Play20/blob/master/framework/src/play/src/main/scala/play/api/templates/Templates.scala\">https://github.com/playframework/Play20/blob/master/framework/src/play/src/main/scala/play/api/templates/Templates.scala</a>&nbsp;and add in additional filtering rules before you build the source.<br />c) Set the <font face=\"Courier New\">HttpOnly</font> flag in the cookie. This is an additional flag that is used to prevent an XSS exploit from gaining access to the session cookie. In XSS, an attacker commonly accesses the session cookie, and subsequently hijacks the victim’s session. Thus, the <font face=\"Courier New\">HttpOnly</font> flag is a useful prevention mechanism. To enable the flag, enter the below command in the <font face=\"Courier New\">application.conf </font>file:</p>\n  <p>\n    <font face=\"Courier New\">application.session.httpOnly=true</font>\n  </p>\n  <p>By default this flag is set to <font face=\"Courier New\">false</font>.&nbsp; <b>Note</b>&nbsp; If&nbsp;<a href=\"https://github.com/playframework/Play20/blob/master/framework/src/play/src/main/scala/play/api/mvc/Http.scala\">Cookie class</a>&nbsp;is used, httpOnly is set to <font face=\"Courier New\">true</font> by default and would be overridden only if explicitly set to <font face=\"Courier New\">false</font>.</p>\n  <p>For defense-in-depth, always sanitize user input via the <font face=\"Courier New\"><a href=\"http://www.playframework.com/documentation/api/2.0/scala/play/api/templates/HtmlFormat$.html\">HtmlFormat.escape()</a></font>&nbsp;method. It creates a <font face=\"Courier New\">safe(escaped)</font> HTML fragment.</p>\n  <br />"
        ]
      }
    ]
  }
}