{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "90608236-847e-47ff-bb8f-b551297a25af"
        ],
        "Id_History": [
          "90608236-847e-47ff-bb8f-b551297a25af,c49fe1de-b0e0-4de3-807a-afe4facfd17f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Open Redirect"
        ],
        "Category": [
          "Redirects and Forwards"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Open Redirect"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nMany web applications use URL redirection to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker might be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website. This vulnerability applies to all applications that use URL redirection. \n\n\n==Impact==\n\nOpen redirects allow an attacker to send users to a malicious site via a legitimate-looking URL. Many users are tricked by the legitimate-looking URL into thinking that they are browsing a trusted site. The malicious site might have an authentic looking login page, which tempts unsuspecting users into entering their usernames and passwords. When personal information is entered into the malicious login page, it is recorded for the attacker's use. Once the attacker has valid user credentials, they can access or modify users' data in the application. If the attacker is able to take over an administrative account, they might gain full control of the application. \n\n\n==Countermeasures==\n\nTo prevent this problem, avoid using redirects altogether, if possible.  If redirects are necessary, avoid redirection based on user input if possible. If user input is necessary for redirects, use reference maps to limit permissible redirect destinations, and always validate destinations of redirects. \n\nThe choice depends on how much user input is required to determine where to redirect to. The less user input, the safer the application. If redirection takes place regardless of user input, destinations can be calculated without user input. If user input is necessary, ensure that there is a clearly defined list of valid redirection targets, and use these to build reference maps to limit permissible redirect destinations, and always validate the destinations.  NOTE: If valid targets cannot be reduced to a list of safe destinations, then an open redirect vulnerability is virtually guaranteed and it's better not to redirect at all.  \n\nIf redirection can be calculated without user input:\n* [[ac326f27-12d4-46d8-91ed-256b4b336cdd|Calculate Destinations of Redirects Without User Input]]\n\nIf user input is necessary, and it is possible to clearly define valid redirection targets:\n* [[4372db21-bc39-456b-a911-4a4603464358|Use Reference Maps When Redirecting]]\n\n\n==Application Check==\n\nTo check for adequate protection against this problem, choose the application checks below that fit the above Countermeasures strategy you have chosen:  Ensure that redirects are not used.  OR  Ensure that redirection is not based on user input.  OR  If user input is needed, ensure that reference maps are used to limit permissible redirect destinations, and always validate the destinations of redirects.\n\nIf redirects can be calculated without user input:\n* [[1e8318ff-a6a8-4d0c-9ec3-8effbd34fbff|Destinations of Redirects Are Calculated Without User Input]]\n\nIf user input is necessary, and it is possible to clearly define valid redirection targets:\n* [[a5dee3ea-30a0-433c-bbb3-22444d35c5a2|Mapping Values Are Used when Redirecting]]\n\n\n==Computer Based Training Links==\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n===OWASP Top Threats & Mitigations===\n\nThis course examines in depth the vulnerabilities, threats, and mitigations described in the OWASP Top 10 2013. Upon completion of this class, participants will be able to identify and mitigate the greatest threats that web application developers face, including: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References, Security Misconfiguration, Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery (CSRF), Using Components with Known Vulnerabilities, and Unvalidated Redirects and Forwards.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/139631|DES 221 OWASP Top Threats & Mitigations]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//"
        ]
      }
    ]
  }
}