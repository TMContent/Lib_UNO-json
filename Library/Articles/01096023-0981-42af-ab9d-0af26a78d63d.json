{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "01096023-0981-42af-ab9d-0af26a78d63d"
        ],
        "Id_History": [
          "01096023-0981-42af-ab9d-0af26a78d63d,6c48b8df-5d18-4e5e-a9f7-76139521f974,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Insecure Direct Object References"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Insecure Direct Object References"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nInsecure direct object reference vulnerabilities occur when an application exposes the system names of system resources that it uses and allows an attacker to manipulate these names. If an attacker can change the name of a system resource that is accessed by the application, they can access arbitrary system resources, such as files. \n\nAll applications are potentially affected by insecure direct object reference vulnerabilities.\n\n\n==Impact==\n\nThe impact of insecure direct object reference vulnerabilities is that the attacker might be able to access arbitrary system resources of the same type as those exposed by the insecure reference. For example, if the attacker can manipulate the name and path of a file displayed by the application, they will be able to abuse the application to display arbitrary files on the system. \n\nInsecure direct object reference vulnerabilities apply almost exclusively to exposed file system references, but in theory can also describe exposed database element references or any other named system resource, such as a pipe or a network socket. The type of access that the attacker is able to perform depends on the type of operation performed by the vulnerable code â€“ if the vulnerable code reads from an exposed reference, the attacker will be able to read; if the vulnerable code writes to an exposed reference, the attacker will be able to write.\n\n\n==Countermeasures==\n\nTo prevent insecure direct object reference vulnerabilities, use mapping values to access objects and perform access control checks when using system resources.\n\n* [[a03f6c47-68e9-4c90-baeb-cae5b1e24fc4|Check Authorization for System Resource Access]]\n* [[ae56baa8-dbdd-48e0-a570-8014adcef370|Use Reference Maps for Object Access]]\n\n\n==Application Check==\n\nTo make sure that insecure direct object reference vulnerabilities are prevented, verify that mapping values are used to access objects and that access control checks are performed when using system resources.\n\n* [[70a45962-ca20-4795-bd0c-032178332ece|Authorization Is Checked for System Resource Access]]\n* [[b86589e0-1cba-4b09-8746-84d6db219e24|Reference Maps Are Used for Object Access]]\n\n\n==Computer Based Training Links==\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n===OWASP Top Threats & Mitigations===\n\nThis course examines in depth the vulnerabilities, threats, and mitigations described in the OWASP Top 10 2013. Upon completion of this class, participants will be able to identify and mitigate the greatest threats that web application developers face, including: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References, Security Misconfiguration, Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery (CSRF), Using Components with Known Vulnerabilities, and Unvalidated Redirects and Forwards.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/139631|DES 221 OWASP Top Threats & Mitigations]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//"
        ]
      }
    ]
  }
}