{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "95e5c97e-4ee6-4c27-8986-2c7f5f66ba4b"
        ],
        "Library_Id": [
          "de693015-55c9-4328-bbc8-42db82ae8b7a"
        ],
        "Title": [
          "Common C/C++ Vulnerabilities"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "C and C++ have become some of the most widely used languages for everything from simple software to large-scale deployments. C/C++ allow for relatively low level memory management, and therefore can allow attackers the same access if a security venerability is present. View each topic below to better understand some of the most common exploits used against C/C++ applications, and how to best combat each.\n\n  * [[/article/9f06e83b-77bf-40b8-9f20-5f88e892630c|Format String]] - Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code.\n  * [[/article/0530569f-b6bb-4a31-ae68-55dac9f4781a|Buffer Overflows]] - Buffer overflows occur when code can be manipulated to cause the application to write data beyond the limits of memory allocated for that data. In short, a buffer overflow happens when the application tries to write too much data into too little (memory) space.\n  * [[/article/2674f188-5758-47f2-b0f1-c2286999d166|Integer Overflows]] - Integer overflows occur when the application tries to assign a number that is too large for the variable data type that it is being assigned to. Integer data types have a finite amount of possible values, which means that each integer variable has a minimum and a maximum value. Trying to assign a number to an integer variable that is greater than its maximum value results in an integer overflow. Trying to assign a number to an integer variable that is smaller than its minimum value results in an integer underflow.\n  * [[/article/db5bc41d-c414-497b-a7cf-2d63e7720fc6|Command Injection]] - Applications often execute external commands as a part of their functionality. If an attacker is able to manipulate the choice of external commands or their parameters, they may be able to use this functionality to execute arbitrary commands. If the attacker succeeds, they will typically be able to take over the application and possibly take over the entire system.\n  * [[/article/a749782c-1f6b-4020-aea3-77046fabf428|Double Free]] - A double-free vulnerability occurs when application code attempts to release memory that used to be allocated but has already been released. Attempting to release memory that has already been released corrupts the data structures used by the application. This might result in a condition that allows the attacker to write arbitrary data into the application's memory space, essentially resulting in a buffer overflow, which may in turn lead to execution of arbitrary code.\n  * [[/article/ca78ad0b-1460-4884-a8f5-b31c864d7976|Null Dereference]] - Null pointer dereference vulnerabilities occur when the application attempts to use a pointer/object reference that has a null value as if it has a valid value. If application code checks pointers/object references for null before using them, null pointer dereference vulnerabilities won't occur.\n  * [[/article/2ee01615-0ed3-46ad-9a22-f1520a55cc1d|Use After Free]] - Use after free vulnerabilities occur when code attempts to use memory that has already been freed. Use after free vulnerabilities can be exploited to crash the application or to execute arbitrary code under certain circumstances. Different methods are available to the attacker for arbitrary code execution based on application specific conditions, such as whether the attacker can manipulate VFTable entries or reallocate freed memory.\n\n[[e2f97ef0-6ced-4f3d-bdce-7a72e359eb7b|Back to the Vulnerabilities Area]]"
        ]
      }
    ]
  }
}