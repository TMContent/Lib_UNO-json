{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "b5f8e7f0-375d-404d-a51f-a49c6692265f"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Disconnect Dangerous Functionality from Outside Networks"
        ],
        "Category": [
          "System Hardening"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Embedded Systems\r\n* C\r\n* C++\r\n* Linux\r\n* Windows\r\n\r\n\r\n## What to Do ##\r\n\r\nDesign your system in such a way that all critical components that are capable of producing any physical damage are separated from network and communication modules.\r\n\r\nDo not allow any communication between network services and the mechanical components of the system.\r\n\r\nFor existing applications, review the design and ensure that these requirements are satisfied. Otherwise, you need to redesign your application.\r\n\r\nDo not include any “debugging”, “maintenance”, or “monitoring” channel to connect mechanical and network components.\r\n\r\n\r\n## Why ##\r\n\r\nAny channel which exists between mechanical and network components of the system may be exploited by an attacker. Many vulnerabilities in network libraries and services are discovered from time to time, and very often vendors cannot fix these security problems immediately. In some cases, especially for embedded systems, prompt patches may not be available at all. In this situation, hackers may exploit such vulnerabilities to gain access to the system. Depending on the application, the consequences might be dangerous. For example, consider a car engine or power plant control system.\r\n\r\n\r\n## When ##\r\n\r\nUse this precaution if your system is exposed on a network, and especially if your system is accessible through the Internet.\r\n\r\n\r\n## How ##\r\n\r\nTo disconnect dangerous functionality from outside networks:\r\n\r\n1. **Identify critical components of your system**. Review your application design and identify all critical components of your system that may produce physical damage. Usually these components are control units for various mechanical equipment, electrical grids, etc.\r\n\r\n2. **Identify all access points to the system**. Review all the data input/output and control ports for your application. Don’t forget “debugging”, “monitoring” or “maintenance” channels. These entry points may be used to access the system.\r\n\r\n3. **Identify control flow paths**. Review all control paths between the modules of your system and establish if there is a channel between network ports and critical components. If such a channel exists, redesign your application to separate these parts. Ensure that there are no physical paths that allow external sources to impact your system behavior.\r\n"
        ]
      }
    ]
  }
}