{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "c53dd5e7-6823-423f-b280-8b29fc089855"
        ],
        "Library_Id": [
          "de693015-55c9-4328-bbc8-42db82ae8b7a"
        ],
        "Title": [
          "OWASP Top 10"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "The Open Web Application Security Project (OWASP) publishes the “OWASP Top 10” list of the top 10 critical web application security flaws most likely to impact companies. The latest version was published in 2013 and it is periodically updated as security risks change and evolve. Review each section below to better understand the most widely exploited application security flaws, and how to best combat each.\n\n==A1-Injection==\n\n  * [[/article/c4914e51-2609-4edc-8133-31491f1b03c0|SQL Injection]] - SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application.\n  * [[/article/94e52aca-06b6-4747-9bc9-f0149208f18c|Command Injection]] - Applications often execute external commands as a part of their functionality. If the attacker is able to manipulate the choice of external commands or their parameters, the attacker may be able to use this functionality to execute arbitrary commands.\n  * [[/article/1d3c6862-1cde-4764-bef2-b12bdac2fb8a|File Upload]] - File upload vulnerabilities allow attackers to upload malicious code. Technically, allowing users to upload anything that the application's design doesn't account for can be considered a file upload vulnerability. In practice, real file upload vulnerabilities are those that allow attackers to upload and execute malicious code.\n  * [[/article/5869ac6a-0a19-4541-ac8f-0d74e09f3156|Code Injection]] - Scripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application.\n  * [[/article/c54b70d7-11bc-4102-a4e0-f3e468d00cb0|XML Injection]] - XML injection occurs when an attacker is able to supply data to the application that is interpreted as a part of an XML document in a manner that violates the intended use of XML by the application. XML injection vulnerabilities occur when untrusted data is allowed to be concatenated with XML data. Concatenating the attacker's data with XML allows the attacker to manipulate the syntax and the contents of the XML document and thus allows the attacker to modify the behavior of the application.\n  * [[/article/8eba1b70-1b1a-4810-a819-1c212cf33099|LDAP Injection]] - Lightweight Directory Access Protocol (LDAP) is a widely used protocol for accessing directory services. Directories provide a set of attributes about people that are organized in a hierarchical manner. LDAP Injection is a technique to exploit applications that use input from users to query an LDAP directory. LDAP injection has the potential to view, modify, or remove personal information about anyone in the directory.\n  * [[/article/23662293-5ddf-4a22-a5d8-e2d7186148d2|SSI Injection]] - Server-side Include Injection (SSI) vulnerabilities occur when the application allows creation of files that contain Server-side Include directives. If an attacker is able to create files that contain Server-side Include directives, and then is able to cause the server to execute these directives by issuing HTTP requests for these files, the attacker will be able to execute arbitrary system commands on the server with the privileges of the web server daemon.\n  * [[/article/4a8034cb-e024-4ccb-a5f7-d7397dfc1371|Remote File Inclusion]] - Remote file inclusion (RFI) occurs when the application executes a file located on an external server, which is usually controlled by the attacker. This enables the attacker to execute arbitrary code as a part of the application, in effect allowing them to do anything that the application and the application platform can do. It could potentially result in the attacker gaining complete control of the system.\n  * [[/article/f2568f4c-cc84-4c1d-884f-cd58483b3bbd|Connection String Injection]] - Applications use connection strings to specify credentials used to access databases. If the application includes unvalidated user input in connection strings, an attacker may be able to change the databases that the application connects to.\n  * [[/article/c3c2036c-8570-47e2-b962-ea13ba0715fe|Mail Command Injection]] - Mail command injection vulnerabilities occur when an application implements its own email client code and concatenates user data with email commands. There should be no reason to implement email client code in applications that are not email clients.\n  * [[/article/6f0d3861-d0b8-4cb1-9fc3-92bb23d738e5|XML External Entity (XXE) Injection]] - XML external entity (XXE) injection vulnerabilities occur when the XML processor allows the attacker to control data loaded into the XML document as \"external entities.\" Some XML processors support a feature called \"external entities\" that allows loading XML data from a URI as a part of the document. If the attacker can define the URI from which the data is loaded, they can manipulate the data that gets loaded into the XML document. Thus, the attacker can potentially load arbitrary files on the server of his choosing into the document and be able to read them.\n  * [[/article/5ef5eea8-07c2-41de-80f9-7f62aaf0e3c8|XPath Injection]] - XPath injection is a type of vulnerability that allows attackers to execute arbitrary queries on XML databases. XPath injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XPath injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents. \n  * [[/article/33f09ecd-0d56-4609-a49b-5337461a13f9|XQuery Injection]] - XQuery injection vulnerabilities occur when untrusted data is concatenated into XQuery queries, which allows the attacker to execute arbitrary queries. XQuery injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XQuery injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents. \n  * [[/article/b9e5c990-5b4e-46cd-bb63-72d625fb75db|XSLT Injection]] - XSLT injection occurs when the application concatenates untrusted data into an XSL stylesheet. This allows the attacker to manipulate the document that is produced when the XSL stylesheet is rendered by the user's browser. If the application server interprets the rendered document as code, XSLT injection will result in arbitrary code injection, but this is rare. Usually, documents produced using XSL stylesheets are not interpreted as code by the server, but can still contain scripts that will by interpreted by the user's browser, thus enabling cross-site scripting attacks.\n\n==A2-Broken Authentication and Session Management==\n\n  * [[/article/81626d56-6225-49b4-b1c6-ca29e9739999|Brute Force]] - Brute forcing is a broad term that refers to repeatedly performing a very simple, automated attack, which has a small chance of being successful for each iteration. The more iterations are performed, the more likely one of them is to succeed. The more resources the attacker has, the more iterations they will be able to perform and thus the more powerful the attack will be overall, hence the term brute force. \n  * [[/article/874d5f27-5b42-41e9-accb-141719b1a681|Cookie Security]] - Cookie security issues occur when all the measures available for protecting cookies are not fully implemented. Cookies that contain session identifiers have to be treated with extra caution, because if the session identifiers are compromised, an attacker will be able to hijack user sessions. \n  * [[/article/ad57c433-709e-4958-985c-4fd6e69e81b8|Cookieless Authentication]] - Most web applications use cookies to keep track of session state. Some applications use other mechanisms to keep track of authenticated sessions. These custom authentication schemes are usually vulnerable to session hijacking. An attacker exploiting cookieless authentication schemes may gain elevated privileges by tampering with user-mutable parameters, or may hijack an authenticated session by intercepting it using some form of a man-in-the-middle attack. \n  * [[/article/7f9f3bce-a716-42fc-9f5b-2e452346743f|Data Leak Between Sessions]] - Data leaks between sessions occur when unintentional access to one session's data is provided to another session. Data leaks between sessions usually occur when session-specific data is stored in member variables of singleton object and objects from a shared pool. The impact of this vulnerability is that an attacker may be able to access other users' data. This vulnerability affects all Java Web applications, especially ones that use Servlets. \n  * [[/article/6d9c6ae8-f88a-408c-80d2-1c8a801cbc6b|Hard-coded Credentials]] - Applications that use authentication need a method for storing credentials. Credentials may be stored for authenticating users to the application or for the application to authenticate to external services. One of the simplest ways to store the credentials is to hard-code them into the application. This approach is not secure, because anyone with access to the application code is able to recover these credentials. Once an attacker has recovered the credentials, he can use them to authenticate with the application or to access the external services. \n  * [[/article/3bda2bcd-f60a-44fa-80b2-37ca61b87abd|Insufficient Authentication]] - Insufficient authentication vulnerabilities occur when the application allows users to perform sensitive operations or access sensitive information without properly checking their authentication credentials. The result is that attackers will be able to use application functionality that should only be available to authenticated users. \n  * [[/article/b6888db3-516e-4f62-994c-240e652ecb31|Insufficient Authorization]] - Insufficient authorization vulnerabilities occur when the application allows a user to perform an action without checking if the user has sufficient privileges to carry it out. This allows attackers to carry out actions that the designers of the application did not intend for them to be able to do. For example, if privileges are not checked properly, an attacker with an unprivileged account might be able to upload files to the server, even if the application should not allow that by design. \n  * [[/article/63785c31-e199-42b8-9a2f-a99240ca7969|Insufficient Password Recovery]] - Insufficient password recovery vulnerabilities occur when the application does not have an effective process to verify user identity when handling a \"forgotten password\" condition, and then either gives the password to the attacker or allows the attacker to change the password. The attacker is then able to impersonate the user and gain access to the user's account. \n  * [[/article/fcb196f6-2057-4ebd-a6e5-ef6e8479b9cf|Insufficient Session Expiration]] - Insufficient session expiration vulnerabilities occur when the application keeps user sessions active for an unreasonably long period of time. The correct amount of time to keep a user session active depends on the application’s requirements. Thirty minutes since the last action is a reasonable standard. If the application keeps user sessions active for days, weeks, or even longer, an attacker might be able to take over the session after compromising a user's session identifier. \n  * [[/article/42ec286a-d64e-421f-af0a-342d93b5a96d|Parameter Tampering]] - A parameter tampering vulnerability occurs when an attacker can modify parameters used by a web application that have security implications. For example, a vulnerable application may allow an attacker to change his user id by changing request parameters. The vulnerability stems from relying on user-accessible parameters to store security sensitive information. Common vulnerable areas are data stored in cookies, hidden form fields, and HTTP request parameters.\n  * [[/article/fbd326f5-b3fc-4d40-b562-19ec7299f892|Sensitive Cookie in HTTPS Session without Secure Attribute]] - When a Cookie has the Secure flag set, that cookie will not be sent over a non-encrypted connection. If the Secure attribute is not set on a sensitive cookie, the cookie may be sent in plaintext and an attacker may intercept it. If an attacker is able to intercept a session cookie, he can impersonate an authenticated user. \n  * [[/article/fd3db9ad-33b8-41af-aba9-fc5fb12bb562|Session Fixation]] - Session fixation vulnerabilities occur when the application doesn't sufficiently protect session identifiers. This allows an attacker to hijack active user sessions. Including the session identifier in the URL allows an attacker to send a link that includes a session identifier of his choice to the victim user. If the victim user clicks on that link and then logs into the application, the attacker will be able to hijack the user's session by clicking on that same link after the user has authenticated. \n  * [[/article/40380b36-72fd-4a07-8daa-e5ec6ea1467a|Session Hijacking]] - Session hijacking (a.k.a. credential and session prediction) vulnerabilities occur when the application uses easy to predict session identifiers or other easy to predict methods to track user sessions. This allows an attacker to guess the session identifier of a user and then carry out actions on the behalf of that user within the application. \n  * [[/article/6c6f2433-222d-4568-8de6-9cbdd198dbc0|Use of Hard-coded Password]] - Applications that use authentication need a method for storing passwords. One of the simplest ways to store passwords is to hard-code them into the application. This approach is not secure, because anyone with access to the application code is able to recover these passwords. Once an attacker has recovered the passwords, he can use them to authenticate with the application. \n\n\n==A3-Cross-Site Scripting==\n\n  * [[/article/683d33a8-7979-4307-8cf0-3a82457f9f47|Cross-Site Scripting]] - A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page.\n\n==A4-Insecure Direct Object References==\n\n  * [[/article/01096023-0981-42af-ab9d-0af26a78d63d|Insecure Direct Object References]] - Insecure direct object reference vulnerabilities occur when an application exposes the system names of system resources that it uses and allows an attacker to manipulate these names. If an attacker can change the name of a system resource that is accessed by the application, he can access arbitrary system resources, such as files. \n\n==A5-Security Misconfiguration==\n\n  * [[/article/c1116151-72d2-4210-a57b-574c26c5a9be|Application Misconfiguration]] - Application misconfiguration vulnerabilities occur when an application is not configured properly by the user. Examples include weak passwords, weak access control permissions, exposed configuration settings, exposed authentication stores, unnecessarily enabled functions and services, and exposed administration interfaces. Attackers usually abuse application misconfiguration vulnerabilities to gain administrative access to the application, and then leverage this access to execute arbitrary code with the privileges of the web application on the server. \n  * [[/article/9ed972ea-62fa-4231-9315-53d9ccc2ab28|Directory Indexing]] - Directory indexing vulnerabilities occur when a web application server is configured to return a listing of files in a web accessible directory in response to an HTTP request for that directory. Directory indexing is typically enabled by default in most major web server software. An attacker can abuse directory indexing to download sensitive or otherwise valuable data from the server, bypassing application access controls. An attacker can also abuse directory indexing to gain insight into the structure of the web application, but this is usually less useful than being able to download the data that is stored by the web application. \n  * [[/article/3a785e14-dca9-40d5-883e-c9901c094d9b|Fingerprinting]] - Fingerprinting is used by attackers to find targets. It is not in itself a vulnerability, but it might facilitate additional attacks. For example, if an application with a SQL injection vulnerability is installed on the server and it is possible to find it using fingerprinting, an attacker will be able to compromise the server using that application. The actual vulnerability is SQL injection, and it is present regardless of fingerprinting, but fingerprinting could be the method used to find the vulnerability and allow an attack to take place. \n  * [[/article/d58be955-efea-4dd0-9f7a-d423f9d84c7b|Improper Filesystem Permissions]] - Improper filesystem permissions vulnerabilities occur when the filesystem permissions are not sufficiently restricted, either as a result of the application not setting strict enough permissions or the user/administrator/customer not securing the system sufficiently. \n  * [[/article/aaa07437-2bea-41e2-aeeb-557e460e145e|Insecure Indexing]] - Insecure indexing vulnerabilities occur when the application discloses the location of sensitive or otherwise valuable files. Insecure indexing typically occurs when a web search engine finds sensitive files while indexing the site, hence the name. Once a search engine has indexed sensitive data, an attacker can use search engine queries to retrieve the sensitive data either from the search engine cache or by following the URLs to the affected site. \n  * [[/article/7172cbb4-689e-453c-ba3c-984d43adf5af|Server Misconfiguration]] - Different server platforms have different security settings and therefore different potential for server misconfiguration, but generally server misconfiguration results from turning off security features or assigning weak values to security settings. \n\n==A6-Sensitive Data Exposure==\n\n  * [[/article/b2e4cadd-9cac-42c5-9740-eba332d64ee5|Information Exposure Through an Error Message]] - Information exposure through an error message occurs when an error message discloses sensitive information that may help an attacker. Typical examples include disclosing whether a username is valid during failed authentication and disclosing SQL queries that cause database errors. The latter example is particularly dangerous because it greatly simplifies SQL injection attacks. The danger of error message information disclosure is that it makes other attacks easier and, in some cases, it is required for an attack to succeed. In general, error messages should not disclose sensitive information to the end user. \n  * [[/article/6b5c9bf9-5d45-4192-a2da-3194ddf3416b|Information Leak Through Cookies]] - Cookies are used by web applications to store data in the browser. Cookies may be marked as persistent and stored for an extended period of time. An attacker may gain access to the drive that stores the cookies and recover sensitive data from them. The exact impact depends on the nature of the sensitive data in the cookies. This vulnerability applies to web applications that use cookies. \n  * [[/article/cdaf94c6-70f2-4026-b497-b22a0f5bd51c|Information Leakage]] - Information leakage is a blanket term for vulnerabilities that disclose either something about the system or some of the application data to unauthorized users. Information leak vulnerabilities result when application code sends data to the user that the user is not authorized to receive. Most information leak vulnerabilities disclose something about the system and this helps the attacker exploit additional vulnerabilities. Some information leaks disclose application data and in that case the attack is usually after the data itself. Sometimes the disclosed data might include authentication credentials, which could be leveraged to take over users’ accounts or the application. \n  * [[/article/17ecc589-9be2-4429-8dc4-9f61556f63b1|Insecure Transport]] - SSL/TLS should be used to protect any sensitive data in transit. Some applications don't use SSL/TLS even during authentication or when transmitting sensitive data, and an attacker may be able to intercept such data that is sent over the network unencrypted. \n  * [[/article/57829386-5df5-4f7f-993a-3552ab3a292c|Insufficiently Protected Credentials]] - An insufficiently protected credential weakness occurs when the application doesn't store or transmit the authentication credentials securely. If the passwords are not hashed and salted, an attacker may be able to recover stored passwords after compromising the application. If the passwords or hashes are not encrypted during transmission, an attacker may be able to intercept passwords or hashes via a man-in-the-middle attack. \n  * [[/article/b2211d6a-c90a-4a42-8586-b364c3630d2c|System Information Leak]] - A system information leak occurs when either the application or the application server discloses information about the web application platform that might be useful to the attacker. Some examples of information that might benefit the attacker are: the file system path of the application, the name and version of the operating system, the name and version of the web server software, and the name and version of the web application platform and its configuration options. \n  * [[/article/275c194d-3f0d-46d8-a874-8584bf0fce30|Use of Hard-coded Cryptographic Key]] - Applications that use cryptography need a method for managing keys. One of the simplest ways to store the keys is to hard-code them into the application. However, this approach is not secure, because anyone with access to the application code is able to recover the keys. Once an attacker has recovered the keys, he can use them to decrypt sensitive data.\n  * [[/article/1c886700-46cb-4dfb-9e3b-8c95164aa4d4|Weak Cryptographic Hash]] - A weak cryptographic hash vulnerability occurs when the application uses a hashing algorithm that is considered to be less resistant to attack than the currently recommended algorithms, and/or the chosen hashing algorithm is not used appropriately. To use cryptographic hashing properly, a strong algorithm has to be used iteratively and with a salt. \n  * [[/article/161382ce-e097-492d-aae1-90dac335aa66|Weak Encryption]] - Weak encryption vulnerabilities occur when weak encryption algorithms are used or encryption is not used properly. For encryption to work properly, strong and up-to-date cryptographic algorithms must be used. Each cryptographic algorithm has its own specific properties that define the most secure way(s) of using it. Using the wrong encryption scheme or using it incorrectly creates the potential for an attacker to recover the encrypted data within reasonable time. In some cases, the weaknesses are so glaring that recovering the encrypted data becomes trivial. \n\n==A7-Missing Function Level Access Control==\n\n  * [[/article/667a7b36-4535-427e-8196-4c396802c1d8|Missing Function Level Access Control]] - Missing function level access control vulnerabilities occur when the application does not perform access control checks when executing sensitive operations. For example, if the application doesn't check whether a user may change other user’s passwords, an attacker will be able to change the passwords of other user accounts. \n\n==A8-Cross-Site Request Forgery==\n\n  * [[/article/62f78eb2-9eba-484c-ade3-7b54c2df9e5a|Cross-Site Request Forgery]] - A cross site request forgery (CSRF) attack occurs when an attacker tricks a victim into loading a page that contains a malicious request. This request may be able to change the state of the web application, and is possible because the request is sent in the context of the logged in victim. For many sites, each request automatically sends the victim's credentials, such as the session cookie or authentication credentials. Due to this fact, there is no way to distinguish the false request from a legitimate request. CSRF vulnerabilities affect web applications that allow authenticated users to perform operations that are not available to guest users. \n\n==A9-Using Components with Known Vulnerabilities==\n\n  * [[/article/876982a3-c3ca-46f4-92c1-2d427c28941f|Using Components with Known Vulnerabilities]] - “Using components with known vulnerabilities” refers to an application that uses third-party code that contains known vulnerabilities. The result is that the vulnerabilities in the third-party code become vulnerabilities in the application. \n\n==A10-Unvalidated Redirects and Forwards==\n\n  * [[/article/90608236-847e-47ff-bb8f-b551297a25af|Open Redirect]] - Many web applications use URL redirection to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker may be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website.\n\n[[754da6c4-f305-4112-b3e2-d34b81475a5b|Back to the Vulnerability Taxonomies Area]]"
        ]
      }
    ]
  }
}