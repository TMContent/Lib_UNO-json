{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "d703cb26-0090-4750-84a2-6aaeb8fb22d2"
        ],
        "Id_History": [
          "d703cb26-0090-4750-84a2-6aaeb8fb22d2,b089f2ac-3a55-4829-a0a5-f78e9a52d42f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Improper Output Handling"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Improper Output Handling"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nImproper output handling vulnerabilities occur when the application does not encode untrusted data correctly for the context. If the application includes data provided by an attacker without properly encoding this data, the attacker will be able to manipulate the output of the web application. The most common result is a Cross-Site Scripting vulnerability, where the attacker is able to manipulate the web application into sending attacker-controlled malicious data (usually JavaScript) to legitimate users. Other vulnerabilities besides Cross-Site Scripting might be caused by improper output handling, for example HTTP response manipulation. The common principle is that if the application does not encode untrusted data in output properly, the attacker can manipulate the application to send malicious data to legitimate users.\n\nAll web application vulnerabilities are affected by improper output handling vulnerabilities.\n\n\n==Impact==\n\nThe result of improper output handling is that the web application can be used to attack its users, typically through Cross-Site Scripting vulnerabilities. In theory, improper output handling might also be used to cause the web application to attack a back-end service, but this requires additional vulnerabilities in the back-end service to work. In practice, Cross-Site Scripting are perhaps the most common type of vulnerabilities in web applications and back-end encoding attacks are a hypothetical possibility.\n\nCross-Site Scripting vulnerabilities are usually used to steal users' cookies, to be able to impersonate them within the application, or to perform actions on the behalf of the users of the application. Cross-Site Scripting can also be used to \n\n\n==Countermeasures==\n\nTo prevent improper output handling vulnerabilities, encode all untrusted data that is included in output for the correct context and validate all input.\n\n* [[9b0ef1a5-c143-4e64-81cc-9e02ccbd9fbd|Encode Untrusted Data in Output]]\n\n* [[11a15f3a-7fe8-4e4c-be5e-309ab7227b3d|Validate All Input]]\n\n\n==Application Check==\n\nTo make sure that improper output handling vulnerabilities are prevented, verify that all untrusted data that is included in output is encoded for the correct context and that all input is validated. \n\n* [[13112146-7c14-4b6d-9e94-24daa22eefc4|Untrusted Data in Output Is Encoded]]\n\n* [[8d8c24b0-096b-43f4-9391-9b293313a0e8|All Input Is Validated]]\n\n\n==Computer Based Training Links==\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n===Fundamentals of Application Security===\n\nThis two-part course is ideal for security and development practitioners that want to understand software security risk and seek specific implementation guidance on how to build and deploy more secure software applications.  It starts off describing why software security is critical and the risk that software vulnerabilities represent, and proceeds to lay the foundation for secure software development by presenting specific security controls and principles that development teams can implement immediately to reduce software risk. \n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127105|AWA 101 Fundamentals of Application Security]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//"
        ]
      }
    ]
  }
}