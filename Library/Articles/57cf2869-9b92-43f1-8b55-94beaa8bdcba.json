{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "57cf2869-9b92-43f1-8b55-94beaa8bdcba"
        ],
        "Id_History": [
          "57cf2869-9b92-43f1-8b55-94beaa8bdcba,c5a50135-7213-4256-a6d9-63f9cdf7f4d1,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Insecure Indexing"
        ],
        "Category": [
          "Deployment Considerations"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Insecure Indexing"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\r\n\r\nInsecure indexing vulnerabilities occur when the application discloses the location of sensitive or otherwise valuable files. Insecure indexing typically occurs when a web search engine finds sensitive files while indexing the site, hence the name. Once a search engine has indexed sensitive data, an attacker can use search engine queries to retrieve the sensitive data either from the search engine cache or by following the URLs to the affected site. \r\n\r\nAll web applications are affected by insecure indexing vulnerabilities.\r\n\r\n==Impact==\r\n\r\nThe impact of insecure indexing vulnerabilities is that the attacker will be able to download sensitive or otherwise valuable files without authorization. A typical scenario involves the attacker downloading sensitive documents, or downloading paid content, such as music or software, without paying.\r\n\r\nLess frequently, an attacker might be able to download database backups, authentication stores, or configuration files. The attacker will then have some authentication credentials to attempt to gain additional access to the application. An attacker who manages to gain administrative access to the application will try to inject malicious code to try to take over the application, and execute arbitrary code on the server with the privileges of the affected application. The attacker might attempt to leverage additional vulnerabilities on the server to elevate privileges and gain superuser access to the server. These scenarios are less likely, but realistic. \r\n\r\n==Countermeasures==\r\n\r\nTo prevent insecure indexing vulnerabilities, block search engines from sensitive areas.\r\n\r\n* [[8ab3dd16-ce50-4586-ab89-42c400bdcf06|Block Search Engines from Sensitive Areas]]\r\n\r\n==Application Check==\r\n\r\nTo make sure that insecure indexing vulnerabilities are prevented, verify that search engines are blocked from sensitive areas.\r\n\r\n* [[8af4eff6-2520-4477-aefb-20392a8385cc|Search Engines Are Blocked from Sensitive Areas]]\r\n\r\n==Additional Resources==\r\n\r\n* For more information about insecure indexing, see http://projects.webappsec.org/w/page/13246937/Insecure%20Indexing\r\n"
        ]
      }
    ]
  }
}