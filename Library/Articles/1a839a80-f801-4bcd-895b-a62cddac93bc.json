{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "1a839a80-f801-4bcd-895b-a62cddac93bc"
        ],
        "Id_History": [
          "1a839a80-f801-4bcd-895b-a62cddac93bc,4b6d616e-15ff-497f-bef3-1d82c4d01b7d,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Inactive User Accounts Are Automatically Locked"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Inactive User Accounts Are Automatically Locked"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <p>Scala and Play Framework 2.1.0+<br /></p>\n  <h1>What to Check For</h1>\n  <p>Ensure the application automatically locks inactive user accounts. Verify that all instances of locking inactive accounts are logged.</p>\n  <h1>Why</h1>\n  <p>Inactive user accounts increase the attack surface of the application and can be used by an attacker as a means of entry.</p>\n  <h1>How to Check</h1>\n  <p>Follow these steps during the design phase to make sure your application has the capability to lock its inactive user accounts:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Verify that your application stores the user's last login/inactivity information.&nbsp;</strong>Check if your application has the necessary procedures in place to store and retrieve last login and lockout information about its users. Common locations for storing such information are:</p>\n      <ul>\n        <li>Database that stores user account information</li>\n        <li>Data structures that represent user accounts</li>\n        <li>Routines that handle user login</li>\n        <li>Routines that retrieve and update user account information</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that your application has a lockout policy.&nbsp;</strong>An account lockout policy is typically application specific. Review your application's requirements and design specifications. Check for the following functionality:</p>\n      <ul>\n        <li>A mechanism for determining user inactivity</li>\n        <li>A mechanism for locking inactive accounts</li>\n        <li>A mechanism for unlocking disabled accounts</li>\n        <li>Verify that the last-login timestamp is reset to the current timestamp upon a successful authentication attempt</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that the lockout policy is enforced by default.&nbsp;</strong>Make sure the functionality that enforces the lockout policy is enabled by default during deployment.</p>\n      <ul>\n        <li>Ensure that only users with administrative privileges can amend your application's lockout policy.</li>\n        <li>Verify that all instances of modifying the lockout policy are logged.</li>\n        <li>Check the following locations in the code to determine if the lockout policy is fully enforced:<ul><li>Account administration routines</li><li>Background database processes that perform user account maintenance</li><li>Authentication routines</li></ul></li>\n      </ul>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>To automatically lock inactive user accounts:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Set a lockout policy.&nbsp;</strong>Create the application's lockout policy. Determine the necessary duration of inactivity before an account can be locked/disabled. This policy can vary depending on whether the account is of a normal user or an administrator. For example, disable normal accounts after 45 days of inactivity and administrative accounts after 30 days of inactivity.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Keep track of user inactivity.&nbsp;</strong>Establish a mechanism to keep track of the last successful authentication. Successful authentication can be tracked via logs or a timestamp, which resides in the user database. Example:</p>\n      <p>\n        <i>For Mongodb:</i>\n      </p>\n      <p style=\"font-family: Arial, Verdana;\" />\n      <pre>&gt; db.users.find({},{_id:0,username:1,last_login_date:1})<br />+----------+-----------------+<br />| username | last_login_date |<br />+----------+-----------------+<br />| adam     |  2013-05-11     |<br />| jill     |  2012-12-14     |<br />| jack     |  2013-05-10     |<br />| dinesh   |  2013-05-11     |<br />| zane     |  2001-09-23     |<br />| sam      |  2005-06-19     |<br />+----------+-----------------+</pre>\n      <i>For MySql:</i>\n      <pre>sql&gt; select username, last_login_date from users;<br /><pre>+----------+-----------------+<br />| username | last_login_date |<br />+----------+-----------------+<br />| adam     |  2013-05-11     |<br />| jill     |  2012-12-14     |<br />| jack     |  2013-05-10     |<br />| dinesh   |  2013-05-11     |<br />| zane     |  2001-09-23     |<br />| sam      |  2005-06-19     |<br />+----------+-----------------+</pre></pre>\n    </li>\n    <li>\n      <p>\n        <strong>Set a lockout mechanism.&nbsp;</strong>Establish a mechanism \nto verify the current period of inactivity and automatically set the \ndisabled bit for inactive accounts. Use the application or database \nserver's scheduler to run this function during the hours with least user\n activity. Keep in mind that inactive accounts should be disabled, but \nnot removed until it is confirmed that they should be completely \nremoved. <br /></p>\n      <p>For example, the following database transaction would lock all \nuser accounts that have been inactive for more than 30 days. Such a \ntransaction should be scheduled to run once a day:</p>\n      <pre>Update users set locked = 1 where (current_date - 30) &gt; last_login_date</pre>\n    </li>\n  </ol>\n  <p>\n    <strong>Note:</strong>&nbsp;PCI DSS requirements state that a&nbsp;user account should be locked out after no more than 90 days of inactivity.</p>\n  <h1>Problem Example</h1>\n  <p>The following segment illustrates the user database of a multi-user application. In its current state, the application logs the last time the user has logged in but does not enforce a lockout policy for its inactive users. Therefore, an attacker can gain unauthorized access to the application by compromising an inactive account.</p>\n  <i>For Mongodb:</i>\n  <p />\n  <pre>&gt; db.users.find({},{_id:0,username:1,locked:1,last_login_date:1})<br />+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2013-05-11 |<br />| jill     |      0 |      2012-12-14 |<br />| jack     |      0 |      2013-05-10 |<br />| dinesh   |      0 |      2013-05-11 |<br />| zane     |      0 |      2001-09-23 |<br />| sam      |      0 |      2005-06-19 |<br />+----------+--------+-----------------+</pre>\n  <i>For MySql:</i>\n  <p />\n  <pre>sql&gt; select username, locked, last_login_date from users;<br /><pre>+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2013-05-11 |<br />| jill     |      0 |      2012-12-14 |<br />| jack     |      0 |      2013-05-10 |<br />| dinesh   |      0 |      2013-05-11 |<br />| zane     |      0 |      2001-09-23 |<br />| sam      |      0 |      2005-06-19 |<br />+----------+--------+-----------------+</pre></pre>\n  <h1>Solution Example</h1>\n  <p>The following segment illustrates the user database of a multi-user application. Because the application enforces a lockout policy, all of its inactive users have been locked and denied access to the application. Therefore, an attacker cannot compromise the application through its inactive users.</p>\n  <pre>sql&gt; select username, locked, last_login_date from users;<br /></pre>\n  <i>For Mongodb:</i>\n  <pre>&gt; db.users.find({},{_id:0,username:1,locked:1,last_login_date:1})<br />+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2013-05-11 |<br />| jill     |      1 |      2012-12-14 |<br />| jack     |      0 |      2013-05-10 |<br />| dinesh   |      0 |      2013-05-11 |<br />| zane     |      1 |      2001-09-23 |<br />| sam      |      1 |      2005-06-19 |<br />+----------+--------+-----------------+</pre>\n  <i>For MySql:</i>\n  <pre>sql&gt; select username, locked, last_login_date from users;<br /><pre>+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2013-05-11 |<br />| jill     |      1 |      2012-12-14 |<br />| jack     |      0 |      2013-05-10 |<br />| dinesh   |      0 |      2013-05-11 |<br />| zane     |      1 |      2001-09-23 |<br />| sam      |      1 |      2005-06-19 |<br />+----------+--------+-----------------+</pre><pre><br /></pre></pre>"
        ]
      }
    ]
  }
}