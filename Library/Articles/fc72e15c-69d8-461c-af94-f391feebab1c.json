{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "fc72e15c-69d8-461c-af94-f391feebab1c"
        ],
        "Id_History": [
          "fc72e15c-69d8-461c-af94-f391feebab1c,bdd658b2-c725-4c85-8d77-f154bfb68e95,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Catch Exceptions"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Web Application"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Catch Exceptions"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* Web Application\r\n* Server-side\r\n\r\n==What to Do==\r\n\r\nEnsure that the application does not let internal exception conditions propagate beyond the application boundary. Exceptions should be caught and logged on the server and, if necessary, generic error messages should be returned to the client. \r\n\r\n==Why==\r\n\r\nIf you allow exception details to propagate from your Web applications back to the client, then a malicious user could use system-level diagnostic information to learn about your application and probe for weaknesses to exploit in future attacks.\r\n\r\n==When==\r\n\r\nWhen you want to prevent application information such as database schema details, operating system versions, stack traces, file names and path information, SQL query strings, and other information of value returned to the client during an exception.\r\n\r\n==How==\r\n\r\nUse structured exception handling and catch exception conditions. Doing so avoids leaving your application in an inconsistent state that may lead to information disclosure. It also helps protect your application from denial of service attacks. Decide how to propagate exceptions internally in your application and give special consideration to what occurs at the application boundary.\r\n\r\n"
        ]
      }
    ]
  }
}