{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "bd42f983-e0f6-4dd9-8dfb-51cba674b906"
        ],
        "Id_History": [
          "bd42f983-e0f6-4dd9-8dfb-51cba674b906,d6539db6-b026-4729-b1ae-7fbc9355bd1d,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Parameterized APIs Are Used for Database Access"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Parameterized APIs Are Used for Database Access"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* C++\r\n\r\n==What to Check For==\r\n\r\nVerify that parameterized APIs are used for database access.\r\n\r\n==Why==\r\n\r\nUse parameterized APIs to prevent SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database engine, not the actual application. The attacker embeds malicious SQL statements in user input, including escape sequences (such as the single quote (') or double quote (\") characters). The malicious SQL statements, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating system.\r\n\r\nParameterized APIs offer a simple yet efficient mitigation since they automatically contain user input in a non-escaped form, passing the input as parameters, much like a function call. By parameterizing input parameters and type-enforcing them, user input is effectively filtered.\r\n\r\n==How to Check==\r\n\r\nTo verify that parameterized APIs are used for database access:\r\n\r\n# **Identify SQL queries.** Locate all SQL queries throughout your application.\r\n# **Identify the parameters in each SQL query.** After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.\r\n# **Verify that parameterized APIs are used for database access.** For each SQL query, verify that data is not concatenated with the structure of the query using string operations. Instead, APIs should be used that accept the structure of the query and the data passed to the query as separate parameters.\r\n\r\n\r\n==How to Fix==\r\n\r\nTo use prepared statements to prevent SQL injection, follow these steps:\r\n\r\n# **Identify available database access APIs.** Figure out what database access APIs are available to your application and whether they support prepared statements. The choice of APIs will often be dictated by the database engine that is used by the application. Most database access APIs support prepared statements, but not all. All major database engines support stored procedures. \r\n# **Choose whether to use prepared statements or stored procedures.** Prepared statements are usually more practical and simpler to use, but if support for them is not available, use stored procedures instead.\r\n# **Identify SQL queries.** Locate all SQL queries throughout your application.\r\n# **Identify the parameters in each SQL query.** After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.\r\n# **Use paramaterized APIs for SQL queries.** Use your chosen APIs to execute each SQL query in your application.\r\n\r\n"
        ]
      }
    ]
  }
}