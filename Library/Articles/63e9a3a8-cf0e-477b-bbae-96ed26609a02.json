{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "63e9a3a8-cf0e-477b-bbae-96ed26609a02"
        ],
        "Library_Id": [
          "de693015-55c9-4328-bbc8-42db82ae8b7a"
        ],
        "Title": [
          "Authorization"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "Authentication focuses on identifying users and making sure they are allowed to access a given system. Once authenticated, authorization focuses on what information they can view and which areas they are not allowed to access. Strong authorization policies allow users to access content deemed appropriate seamlessly while at the same time preventing them from accessing more privileged or restricted data. Through proper planning and implementation, a system can be created that is both easy to manage and comprehensive in its coverage. View this room to understand how a properly designed authorization system is created and the best rules for maintaining authorization integrity.\n\n==Check Authorization for All Operations==\n\nPerform access control checks for all sensitive operations. Sensitive operations include any access to system resources, such as files, and any access to application data.\n\n* [[983726cb-b3a5-4e23-af5f-04d64e95a59f|Any]]\n* [[00000000-0000-0000-0000-000000032b66|.NET]]\n* [[afa2d020-9b18-4861-9d4f-cb81cbcb1f2e|Java]]\n* [[e965b187-1e4b-450c-859a-2f066eaa6bcc|Scala]]\n\n==Use Role-based Authorization==\n\nApplication roles allow administrators to group users into categories that need the same level of privileges. The mechanism provides an easy and clear way to discover and manage the least privileges necessary for the execution of a given task.\n\n* [[b0a206b5-61c4-4d9f-8c06-057783ebf249|.NET]]\n* [[127d98e8-d628-40b7-8522-d903f4bf7927|Java]]\n* [[326aa52e-5a89-43a7-84a4-cfece655fb55|PHP]]\n* [[00000000-0000-0000-0000-000000760326|Android]]\n* [[00000000-0000-0000-0000-0000007f43b7|iOS]]\n\n==Deny All Access by Default==\n\nDenying all access by default assures that only explicitly authorized access is possible.\n\n* [[2a39f1e5-191d-4113-bff9-281d1540a801|Any]]\n* [[4795c643-0002-4213-a138-99c540427a22|.NET]]\n* [[c0ff64c5-cf7f-4855-b039-81d2a298e3bb|Java]]\n* [[10a459c4-4a39-4325-b3a9-a3458ac43b0c|Scala]]\n\n==Use Reference Maps for Object Access==\n\nVerify that per-user or per-session indirect object references are used instead of direct object references. Direct object references often expose sensitive data, such as files, database entries or personal information. Direct object reference attacks are very simple to execute and have been used in high profile, low-skill attacks. Indirect object references help prevent direct object reference vulnerabilities.\n\n* [[d4ce4080-2feb-434c-bbfe-b00549e099a7|.NET]]\n* [[b4a87891-a19a-41be-a1a3-f8a13c7f4881|Java]]\n* [[b26ece13-3df3-4cd5-bf76-fbded344ebb1|Scala]]\n* [[62aa729a-fafa-4327-a3b7-dc5747aed610|PHP]]\n* [[da2ef63c-2068-41a2-a096-564da21ead6a|C++]]\n\n[[bcbbe5c7-95c3-468d-9371-6eb42f9b93e6|Back to the Programming Best Practices Area]]"
        ]
      }
    ]
  }
}