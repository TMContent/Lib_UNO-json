{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "62ea2ac6-66d8-47b1-a2c0-7b63bd70b581"
        ],
        "Id_History": [
          "62ea2ac6-66d8-47b1-a2c0-7b63bd70b581,d5357586-f165-4080-a54c-988c7395327a,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Parameters Are Separated from Command Names"
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Parameterized APIs Are Used to Execute External Commands"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==What to Check For==\n\nVerify that parameterized APIs are used to execute external commands.\n\n\n==Why==\n\nUse parameterized APIs to execute operating system commands, because they pass arguments to the operating system commands being executed separately from the names of the commands to execute. Keeping the name of the executed command separate from the arguments helps prevent command injection vulnerabilities.\n\n\n==How to Check==\n\nTo verify that shell interpreters are not used to execute operating system commands:\n\n# **Find all code that executes operating system commands.** \n# **Identify whether calling operating system commands is necessary.** With the spreadsheet of potentially dangerous code in hand, examine each piece of code that executes operating system commands and determine whether it is absolutely necessary to the application. If possible, rewrite that code to not execute external commands, thus removing the possibility that it contains a command injection vulnerability.\n# **Verify that shell interpreters are not invoked.** For each piece of code that executes an external process, make sure that a shell interpreter is not invoked. \n\n\n==How to Fix==\n\nTo use parameterized APIs to execute operating system commands:\n\n# **Find all code that executes operating system commands.** To identify potential trouble spots, find all the code in the application that executes operating system commands. Make a spreadsheet of all this code.\n# **Identify whether calling operating system commands is necessary.** With the spreadsheet of potentially dangerous code in hand, examine each piece of code that executes operating system commands and determine whether it is absolutely necessary to the application. If possible, rewrite that code to use only platform built-in functions, thus removing the possibility that it contains a command injection vulnerability.\n# **Use parameterized APIs to execute operating system commands.** The key point is that the arguments passed to the program being executed are passed via a separate variable from the path of the program - this is the \"parameterization\" part. Because the arguments are passed in a separate variable, the arguments cannot be manipulated into causing the application to execute some other program in typical scenarios. It is possible to craft a scenario where parameterized APIs are used to execute a shell and pass it the name of some other command as the argument, but that is a crazy thing to do - don't do that.\n# **Use parameterized APIs correctly.** The user should never be allowed to arbitrarily decide what program to run - that is the very definition of a command injection vulnerability. If it is absolutely necessary to choose what program to run based on user input, define a list of allowed and safe programs to run, place the paths to these programs in an array, and then choose the index of the array based on the user input to correspond to the program that needs to be executed based on the user's choice. One particular thing to watch out for is whether the external program can execute other programs based on the arguments that are sent to it - one obvious example would be passing arguments to a shell. For most practical scenarios, this should not be an issue, but it's something to be aware of.\n"
        ]
      }
    ]
  }
}