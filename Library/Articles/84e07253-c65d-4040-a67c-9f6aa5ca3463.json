{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "84e07253-c65d-4040-a67c-9f6aa5ca3463"
        ],
        "Id_History": [
          "84e07253-c65d-4040-a67c-9f6aa5ca3463,da9e43eb-fa75-4456-bde9-8a72dba5d246,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Limit Access to the Credential Store"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Limit Access to the Credential Store"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <p>Scala and Play Framework 2.1.0+<br /></p>\r\n  <h1>What to Do</h1>\r\n  <p>Limit the access to the credential store.</p>\r\n  <h1>Why</h1>\r\n  <p>Unauthorized access to the credential store can lead to users' credentials being overwritten, thereby allowing the attacker to gain access to application resources without obtaining valid credentials prior to the attack.</p>\r\n  <h1>When</h1>\r\n  <p>Limit access to the credential store any time you have an&nbsp;applicatiom that&nbsp;uses one.</p>\r\n  <h1>How</h1>\r\n  <p>Follow these steps to limit the access to the credential store:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>\r\n          <strong style=\"margin: 0px; padding: 0px;\">Do not disclose the location of the store within your application</strong>. </strong>Do not let&nbsp;regular application users know where the store is located.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Secure credentials required for accessing the store.&nbsp;</strong>Store your credentials within a configuration file and encrypt them. Place the encryption key within a keystore that is encrypted using a local account password. Alternate way would be to s<span style=\"line-height: 24px;\">tore the necessary sensitive information in Environment variables, and create a mapping to them in the configuration file (e.g.,&nbsp;</span><font style=\"line-height: 24px; margin: 0px; padding: 0px;\" face=\"Courier New\">application.conf</font><span style=\"line-height: 24px;\">&nbsp;file)</span></p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Restrict access to the credential store.&nbsp;</strong>Limit the number of users that can access the store. If it is a file on the local file system, set the appropriate permissions to restrict the read/write access. If it is a database, restrict the accounts that can access the database server.</p>\r\n      <div style=\"margin: 0px; padding: 0px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;\">\r\n        <ul style=\"margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; background-color: rgb(255, 255, 255);\">\r\n        </ul>\r\n      </div>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <h1 style=\"margin: 0px; padding: 10px 0px 0px; font-size: 17px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">\r\n    <p style=\"color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;\">The following code authenticates a user based on their credentials. Because the code discloses the credentials to the user database, anybody with access to the code also has access to the credential store.</p>\r\n    <pre style=\"color: rgb(0, 0, 0); font-weight: normal;\">package jdbc\r\n\r\nimport java.sql.DriverManager\r\nimport java.sql.Connection\r\n\r\nobject ScalaJdbcConnectSelect {\r\n\r\n  def main(args: Array[String]) {\r\n    // connect to the database named \"mysql\" on the localhost\r\n    val driver = \"com.mysql.jdbc.Driver\"\r\n    val url = \"jdbc:mysql://localhost/mysql\"\r\n    val username = \"root\"\r\n    val password = \"root\"\r\n\r\n    var connection:Connection = null\r\n\r\n    try {\r\n      // make the connection\r\n      Class.forName(driver)\r\n      connection = DriverManager.getConnection(url, username, password)\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(\"SELECT host, user FROM user\")\r\n      while ( resultSet.next() ) {\r\n        val host = resultSet.getString(\"host\")\r\n        val user = resultSet.getString(\"user\")\r\n        println(\"host, user = \" + host + \", \" + user)\r\n      }\r\n    } catch {\r\n      case e =&gt; e.printStackTrace\r\n    }\r\n    connection.close()\r\n  }\r\n\r\n}</pre>\r\n  </h1>\r\n  <h1>Solution Example</h1>\r\n  <h1 style=\"margin: 0px; padding: 10px 0px 0px; font-size: 17px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">\r\n    <p style=\"color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;\">The following code authenticates a user based on their credentials. The code relies on other parts of the application to handle database connectivity. Therefore, the code does not reveal the application's credentials to the credential store.</p>\r\n    <pre style=\"color: rgb(0, 0, 0); font-weight: normal;\">package jdbc\r\n\r\nimport java.sql.DriverManager\r\nimport java.sql.Connection\r\nimport play.api.Play.current\r\n\r\nobject ScalaJdbcConnectSelect {\r\n\r\n  def main(args: Array[String]) {\r\n\r\n    val driver = \"com.mysql.jdbc.Driver\"\r\n    val url = getString(\"server.auth.url\")\r\n    val username = getString(\"server.auth.username\")\r\n    val password = getString(\"server.auth.password\")\r\n\r\n    var connection:Connection = null\r\n\r\n    try {\r\n      // make the connection\r\n      Class.forName(driver)\r\n      connection = DriverManager.getConnection(url, username, password)\r\n\r\n      // create the statement, and run the select query\r\n      val statement = connection.createStatement()\r\n      val resultSet = statement.executeQuery(\"SELECT host, user FROM user\")\r\n      while ( resultSet.next() ) {\r\n        val host = resultSet.getString(\"host\")\r\n        val user = resultSet.getString(\"user\")\r\n        println(\"host, user = \" + host + \", \" + user)\r\n      }\r\n    } catch {\r\n      case e =&gt; e.printStackTrace\r\n    }\r\n    connection.close()\r\n  }\r\n\r\n}</pre>\r\n    <span style=\"color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;\">The content of application.conf file would be:</span>\r\n    <pre style=\"color: rgb(0, 0, 0); font-weight: normal;\">include \"base.conf\"\r\n\r\nserver.auth.username=${AUTH_USERNAME}\r\nserver.auth.password=${AUTH_PASSWORD}\r\nserver.auth.url=${AUTH_PASSWORD}</pre>\r\n    <span style=\"color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;\">These values would then be pulled from the environment variables or some other secure location.</span>\r\n    <div style=\"color: rgb(0, 0, 0); font-family: 'Times New Roman'; font-size: medium; font-weight: normal;\">\r\n      <br />\r\n    </div>\r\n  </h1>\r\n  <br />\r\n  <div style=\"margin: 0px; padding: 0px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;\">\r\n    <ul style=\"margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; background-color: rgb(255, 255, 255);\">\r\n    </ul>\r\n  </div>"
        ]
      }
    ]
  }
}