{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "3b46e08b-1e8a-4dbf-b7bc-39a13c8afcbc"
        ],
        "Id_History": [
          "3b46e08b-1e8a-4dbf-b7bc-39a13c8afcbc,7549abda-3078-4de7-9418-eda090ea30e9,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Scala Encode Untrusted Data in Output"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Encode All Output Data"
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Scala and Play Framework 2.1.0+\r\n\r\n\r\n## Summary ##\r\n\r\nEncode all input that is echoed back to the user. Proper encoding of echoed input prevents cross-site scripting.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code shows how a user registers for an account. Post-registration, when the user logs in, the registered name is reflected back on the screen. Because it does not HTML encode the echoed input, the application is vulnerable to persistent cross-site scripting.\r\n\r\nCode for the user creation model -- notice that the name is a String object with no validations and allows special characters:\r\n\r\n~~~~\r\nobject User extends UserInfoService[String, User] {\r\n\r\n  val passwordService = MyPasswordService\r\n\r\n  def register(email: String, name:String, password: String) : User = {\r\n    val encryptedPassword = passwordService.encryptPassword(password)\r\n    val user = User(email, name, encryptedPassword)\r\n    create(user)\r\n  }\r\n\r\ndef create(user: User): User = {\r\n    DB.withConnection {\r\n      implicit connection =>\r\n        SQL(\r\n          \"\"\"\r\n          insert into user values (\r\n            {email}, {name}, {password}\r\n          )\r\n          \"\"\"\r\n        ).on(\r\n          'email -> user.email,\r\n          'name -> user.name,\r\n          'password -> user.password.underlying\r\n        ).executeUpdate()\r\n\r\n        user\r\n    }\r\n  }\r\n~~~~\r\n  \r\n  \r\nCode for Signup Controller\r\n\r\n~~~~\r\n  val signupForm = Form(\r\n    mapping(\r\n      \"email\" -> email,\r\n      \"fullName\" -> text,\r\n      \"password\" -> weakPassword\r\n    )(SignupData.apply)(_ => None)\r\n  )\r\n\r\n  case class SignupData(email: String, fullName: String, password: String)\r\n~~~~\r\n  \r\nCode for the HTML template where the user is redirected after successful login -- notice that the name, which is  not sanitized, is reflected back as raw HTML.\r\n@()(implicit ctx: MyContext[_])\r\n\r\n~~~~\r\n@base.layout() {\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"span12\">\r\n        <div class=\"well\" style=\"height: 600px\">\r\n          <h1 style=\"text-align: center\">Main Page</h1>\r\n\r\n          <p style=\"font-size: 20px; text-align: center; margin-top: 15px\">\r\n            @ctx.me match {\r\n              case None => {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) => {\r\n                You are currently logged in as @Html(user.name).\r\n              }\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code shows how a user registers for an account. Again, post-registration, when the user logs in, the registered name is reflected back on the screen. But this time the play framework automatically performs HTML encoding of all the entries in the HTML template. This protects the application from XSS. Additionally, there is regex validation on the Name parameter to make sure that the user is not able to enter malicious names into the application.\r\n\r\nRegex validation for Name:\r\n\r\n~~~~\r\nval pid = SignupForm.empid\r\nval name = SignupForm.productname\r\nval emp = Emp.findEmp(pid, name)\r\nval whitelistPattern = \"(\\\\w|\\\\d)+\".r\r\nval issafe =whitelistPattern.pattern.matcher(name).matches\r\nif (issafe){\r\n...... //Code for Action\r\n}else{\r\n...... //Code for Exception\r\n}\r\n~~~~\r\n\r\nCode for HTML template:\r\n\r\n~~~~\r\n@()(implicit ctx: MyContext[_])\r\n\r\n@base.layout() {\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"span12\">\r\n        <div class=\"well\" style=\"height: 600px\">\r\n          <h1 style=\"text-align: center\">Main Page</h1>\r\n\r\n          <p style=\"font-size: 20px; text-align: center; margin-top: 15px\">\r\n            @ctx.me match {\r\n              case None => {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) => {\r\n                You are currently logged in as @user.name.\r\n              }\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n~~~~\r\n\r\n\r\n## Guideline ##\r\n\r\n* [Encode Untrusted Data in Output](9b0ef1a5-c143-4e64-81cc-9e02ccbd9fbd)"
        ]
      }
    ]
  }
}