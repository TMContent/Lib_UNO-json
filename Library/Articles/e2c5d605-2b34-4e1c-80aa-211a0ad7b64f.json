{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "e2c5d605-2b34-4e1c-80aa-211a0ad7b64f"
        ],
        "Id_History": [
          "e2c5d605-2b34-4e1c-80aa-211a0ad7b64f,a6ef8373-83f2-411b-bff0-97d8a445558d,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Validate All Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Validate All Input"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* HTML5\n* Server-side\n\n==What to Do==\n\nValidate all user input by using whitelist (positive) input validation. Whitelist input validation allows only the set of input that is explicitly defined as valid, as opposed to blacklist input validation, which filters out known bad input.\n\n==Why==\n\nWhitelist input validation can prevent SQL injection and cross-site scripting (XSS) vulnerabilities.\n\n==How==\n\nTo validate all user input using whitelist input validation:\n\n# **Identify all entry points for user input.** Make a list of all possible sources of user input in your application, such as form fields, POST/GET parameters, cookies, etc. \n# **Identify all types of input accepted by the application.** For each source of user input on the list, define valid characters, length, format, and range (for numerical values).\n# **Define an input validation subsystem.** Define a set of validator functions that should be used to validate each type of input handled by the application. Input should be validated on the server. \n# **Validate characters.** Restrict the acceptable range of characters in text input by using regular expressions.\n# **Validate length.** Add code to check that the length of the user input is valid.\n# **Validate format.** If the input type has a specific pattern, such as a date or a phone number, add code to use regular expressions to ensure that user input matches the input type specified by the application. Use regular expressions to enforce strong password requirements.\n# **Validate range.** Restrict the acceptable range of numerical input by comparing the input to the maximum and minimum acceptable values.\n# **(Optional) Reject and respond to known bad input.** This step does not add much actual security, but it is included here to let you know that such an option exists. The input validation subsystem may check for known attack strings and respond to these likely attacks by doing things like logging detailed user information, alerting the administrator, blocking the user's IP address for some time, and displaying an error message to the attacker informing that you are onto him and reminding him of the consequences.\n# **(Optional) Encode input that will be displayed as output.** If the input is going to be displayed back through the web application, consider adding code to encode it to prevent cross-site scripting attacks.\n\n"
        ]
      }
    ]
  }
}