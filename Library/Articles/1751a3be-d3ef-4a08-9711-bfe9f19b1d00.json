{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "1751a3be-d3ef-4a08-9711-bfe9f19b1d00"
        ],
        "Id_History": [
          "1751a3be-d3ef-4a08-9711-bfe9f19b1d00,1a1f61cd-c227-4a94-8af4-b100aa63db56,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Progress Between Pages In Multi-page Scripts Is Tracked"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Progress Between Pages In Multi-page Scripts Is Tracked"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* ASP.NET 4.0\n\n==What to Check For==\n\nVerify that individual pages in multi-page scripts make sure that all the previous steps have been successfully passed.\n\n==Why==\n\nKeep track of progress between pages in multi-page scripts to prevent insufficient process validation vulnerabilities. One type of insufficient process validation occurs when an attack is able to manipulate the sequence of multi-page scenarios in a manner that has security implications. Usually, the attacker will attempt to bypass some kind of authorization check by skipping the page that does the check and loading the page that performs the operation that the attacker would otherwise be unable to do.\n\n==How to Check==\n\nTo verify that individual pages in multi-page scripts make sure that all the previous steps have been successfully passed:\n\n# **Identify multi-page scripts.** Make a spreadsheet about any feature in the application that is implemented as a sequence of steps performed by multiple pages and the code that implements each of these features.\n# **Verify that pages in multi-page scripts set session state variables when they are passed.** Examine the code for each page in each multi-page sequence. After each page is successfully passed and the data from it is successfully validated, make sure that a session state variable is set to indicate that a step has been passed successfully.\n# **Verify that pages in multi-page scripts check that all the previous steps have been passed.** Examine the code for each page in each multi-page sequence. Make sure that each page checks the session state variables that indicate whether all the previous pages have been successfully passed before being displayed. If the previous steps have not all been passed successfully, the page should redirect the user to the beginning of the sequence.\n\n==How to Fix==\n\nTo keep track of progress between pages in multi-page scripts:\n\n# **Identify multi-page scripts.** Make a spreadsheet about any feature in the application that is implemented as a sequence of steps performed by multiple pages and the code that implements each of these features.\n# **Add code that sets session state variables to the code that validates data from each page in the sequence.** For each feature that is implemented as a sequence of steps, define a session state variable for each step in the page. Add code to each script, which validates data from each step, that sets a value to the corresponding variable indicating that the page has been successfully passed. Only set this value when the user submits the data that is required by the page and that data has been successfully validated on the server-side.  For example, if the first page asks the user for his name, then when the users submits that data, it should be sent to a validating script, and if the name that the user has submitted is valid, then the name should be placed in a session state variable and a variable that indicates that the first page has been passed successfully should be set to a value that indicates that. In this hypothetical scenario, data validation and the setting of a variable that indicates that the first step has been completed can either be performed by a dedicated data validation script or by the second page in the sequence. \n# **Add code that validates session state variables for each page.** For each page in each feature that is implemented as a sequence of steps, add code that validates that all the previous steps have been completed successfully. Each page should check all the variables that indicate whether all the previous steps have been passed. If any of the previous steps have not been successfully completed, redirect the user to the beginning of the sequence.\n# **Add  code that resets all variables after the final step is complete.** Upon reaching and executing the final step, the variables for all the steps have to be reset to prevent bypassing those steps in the future. Add code to the code that handles the very last step in the sequence to reset all the variables that indicate progress in the sequence.\n\n\n"
        ]
      }
    ]
  }
}