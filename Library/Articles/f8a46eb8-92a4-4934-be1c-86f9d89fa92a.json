{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "f8a46eb8-92a4-4934-be1c-86f9d89fa92a"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Prepared Statements for SQL Queries"
        ],
        "Category": [
          "Data Access"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "ABAP"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- SAP ABAP\r\n\r\n\r\n## What to Do ##\r\n\r\nUse prepared statements to execute SQL queries. Do not generate SQL statements directly from user input.\r\n\r\n\r\n## Why ##\r\n\r\nPrepared statements mitigate SQL injection risk for database-facing Web applications built with SAP Advanced Business Application Programming (ABAP). SQL injection is one of the most powerful attacks, and is language-independent. The algorithm used to generate SQL strings is passed to the Relational Database Management System (RDBMS) and affects the database engine, not the actual application.\r\n\r\nSQL injection exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (') or double quote (\") characters). Using this method, an attacker inserts valid SQL statement fragments as part of user input. The result is that the unsafe fragments are embedded within the SQL query that is submitted to the database engine for execution. A successful exploit allows an attacker to potentially compromise the entire database.\r\n\r\nPrepared SQL statements offer a simple and efficient mitigation for SQL injection since they automatically contain user-input in a non-escaped form. Input is passed as parameters in a function call. With parameterization of input and type-enforcement, user input is effectively filtered and potential compromises are eliminated.\r\n\r\n\r\n## When ##\r\n\r\nBecause ABAP is used in Web applications, the risk of SQL injection and resource manipulation is ever-present. ABAP also may use ABAP Database Connectivity (ADBC), which is based on SAP kernel calls, to dynamically execute arbitrary SQL commands. Prepared SQL statements should be used with ABAP coding *whenever* SQL is executed by the database engine. This prevents the possible integration of user input with SQL statements, and the RDBMS servers are always protected by appropriate validation and filtering controls.\r\n\r\n\r\n## How ##\r\n\r\nTo use prepared statements to prevent SQL injection, follow these steps:\r\n\r\n1. **Identify SQL queries.** Locate all SQL queries in your application code. Also, investigate the functions of transaction calls and use of ABAP function modules that may additionally execute SQL statements.\r\n\r\n2. **Identify the parameters in each SQL query.** After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.\r\n\r\n3. **Use prepared statements for SQL queries.** The exact syntax to use with prepared statements is dependent on the versions of SAP BASIS, ABAP, and SQL database used (Open SQL or Native SQL). The core steps for writing a prepared statement are: get a database handle, call the prepare function to make the prepared statement, use the framework function to bind prepared statement parameters to variables, load data into the variables, and call the execute function to execute the prepared statement. Functions that may be used with ABAP include:\r\n\r\n\t- **Prepared Statement with ADBC.** With use of `CL-SQL_PREPARED_STATEMENT` subclass, a query is instantiated as a prepared statement and is executed with various parameters. The work process is not allowed to be switched between calls of the prepared statement. Note that it is not possible to use dialog screens in the loop. The parameters are prepared and collected in one internal table and the result lists are prepared and collected in another internal table. By using inherited methods (from `CL_SQL_STATEMENT`) placeholders can be linked to parameters and the instantiated SQL statement can be executed. The SQL statement is not passed to the corresponding method. After the work process has been switched, the prepared statement can no longer be used. If not needed, the statement should be closed so that database resources are release.\r\n\t\r\n\t- **SQL injection countermeasures for Open SQL.** Use techniques to secure program code by using strict validation or encoding of any input. Two best practice rules are available for use with ABAP code and Open SQL to mitigate injection attacks.\r\n\t\r\n\t\t- **Use static Open SQL statements where possible.** Check whether it is really necessary to use dynamic Open SQL with the ADBC API. If possible, switch to static SQL statements to reduce risk level for SQL injection.\r\n\t\t- **Validate or encode input for dynamic statements.** When dynamic SQL statements are necessary, use class `CL_ABAP_DYN_PRG` to implement class input checks and escape input in the clauses.\r\n\t\r\n\t- **SQL injection countermeasures for Native SQL.** Use any of the following rules which may be applicable, in order to eliminate SQL injection attacks:\r\n\t\r\n\t\t- Define a codepage (such as charset = ISO-8859-1) to clearly decide which characters are problematic.\r\n\t\t- Filter user input for SQL statements. Filter data with regular expression for numbers and letters (`s/[^0-9a-zA-z]//g`). For email addresses, only allow `@`, `_`, `.` and `-`. Enclose all user input (including numbers) in quotation marks.\r\n\t\t- Restrict the rights of the Web application user.\r\n\t\t- Restrict error reporting (server-side and by application) so that internal system information cannot be shown to outside users. If the full query is shown, and points to the syntax error involved, this assists hackers in mounting Cross-Site Scripting (XSS) attacks.\r\n\t\t- Use the ABAP addition `CLIENT SPECIFIED` in a restrictive way, for example, for client copy.\r\n\t\t- Restrict the dynamic program generation performed with the ABAP key words to filtered user input only by using `INSERT REPORT` and/or `GENERATE SUBROUTINE POOL`.\r\n"
        ]
      }
    ]
  }
}