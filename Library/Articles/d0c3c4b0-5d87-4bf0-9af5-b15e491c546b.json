{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "d0c3c4b0-5d87-4bf0-9af5-b15e491c546b"
        ],
        "Id_History": [
          "d0c3c4b0-5d87-4bf0-9af5-b15e491c546b,04bb9afb-ae61-4a38-b8ef-a932280bbccc,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "Logging Is Centralized"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Web Application"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Logging Is Centralized"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* Web Applications\n\n==What to Check For==\n\nVerify that logging is centralized.\n\n==Why==\n\nA centralized logging subsystem is simpler to maintain and implement correctly.\n\n==How to Check==\n\nUse the following steps to verify that logging is centralized:\n\n# **Identify the logging subsystem.** The logging subsystem should provide an API that allows generating log entries from application code. Make a list of functions that may be used to generate log entries.\n# **Examine log entries. Find out where log entries are stored and examine them. This should give you clues about the functionality of the logging subsystem.\n# **Review code.** Find code that generates log entries. Make sure this code uses the centralized logging subsystem.\n\n==How to Fix==\n\nPerform the following actions to centralize logging: \n\n# **Identify existing logging functionality.** Examine the application architecture to identify logging facilities, such as the logging API and where audit trails are actually stored. Make a list of APIs used to log events, document how to use them, and where they store logs.\n# **Design the logging subsystem.** Design and implement a class or library specifically for logging. When designing the logging subsystem, consider sending logs to a remote log server. Consider the following factors when designing the logging subsystem:\n## Log throttling\n## Logging important event details for both successful and failed operations\n## Logging important security operations\n## Logging important business operations\n## Monitoring the use of privileged accounts\n## Logging user management events\n## Avoiding including sensitive information in logs\n## Logging unusual activity\n## Sending logs to a centralized server\n# **Implement the logging subsystem.** Write code that generates log entries according to your design. \n# **Use the logging subsystem.** Use the logging class or library whenever logs are generated. If earlier code exists that generates log entries, replace it with calls to the new logging subsystem API.\n"
        ]
      }
    ]
  }
}