{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "42ec286a-d64e-421f-af0a-342d93b5a96d"
        ],
        "Id_History": [
          "42ec286a-d64e-421f-af0a-342d93b5a96d,cc566daa-e1a1-47e7-b3fc-470038f1432f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Parameter Tampering"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Parameter Tampering"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nA parameter tampering vulnerability occurs when an attacker can modify parameters used by a web application that have security implications. For example, a vulnerable application might allow an attacker to change their user id by changing request parameters. The vulnerability stems from relying on user-accessible parameters to store security sensitive information. Common vulnerable areas are data stored in cookies, hidden form fields, and HTTP request parameters. This vulnerability type applies to web applications. \n\n\n==Impact==\n\nThe exact impact of parameter tampering depends on the parameters that are available for tampering. This vulnerability usually allows the attacker to change their status from regular user to admin. In that case, the attacker is able to take full control of the application and its data. Another common impact is that the attacker is able to change their user id to that of another user. In that case the attacker can access and modify the user's data and impersonate that user. Parameter tampering usually allows the attacker to impersonate any user of their choosing. \n\n\n==Countermeasures==\n\nTo prevent this problem, use platform provided session management, don't store sensitive data in user accessible parameters, and use strong session identifiers. \n\nUse platform-provided session management:\n* [[3fe17f72-9ae5-4ee3-a1f8-a78c10b7d495|Use Platform Session Management]]\n\nDon't store sensitive data in user accessible parameters:\n* [[48be90af-1177-4e9f-9a2c-60ad76e4a35d|Do Not Place Sensitive Data in Exposed Parameters]]\n\nUse strong session identifiers:\n* [[1be12126-6e67-4c2d-89df-e0a890f0a871|Use Strong Session Identifiers]]\n\n\n==Application Check==\n\nTo check for adequate protection against this vulnerability, ensure that platform provided session management is used, sensitive data is not stored in user accessible parameters, and strong session identifiers are used. Identify all user-mutable parameters and verify that tampering with them does not result in elevated privileges.\n\nPlatform-provided session management is used:\n* [[3f2660b3-a935-4b4e-85ff-27ae28683f5b|Session Management Offered by the Framework Is Used]]\n\nSensitive data is not stored in user accessible parameters:\n* [[6adf267f-db7d-4770-86c6-292f9b126874|Sensitive Data Is Not Placed in Parameters]]\n\nStrong session identifiers are used:\n* [[00000000-0000-0000-0000-00000061e3bc|Strong Session Identifiers Are Used]]\n\n\n==Computer Based Training Links==\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n===Fundamentals of Web 2.0 Security===\n\nThis course introduces you to the fundamentals of secure Web 2.0 development. The course begins with a discussion about Web 2.0, its evolution, and the technologies behind it. The course describes common Web 2.0 attacks that can cause significant loss to organizations. It reviews the best practices that you should incorporate to mitigate the risks from Web 2.0 attacks, as well as practices to avoid. The course concludes with a walk-through of a software system scenario that can help you better understand Web 2.0 attacks and apply the best practices discussed in the course.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127634|COD 151 Fundamentals of Web 2.0 Security]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//"
        ]
      }
    ]
  }
}