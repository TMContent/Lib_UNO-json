{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "61ada208-f706-4731-813d-a3cda3d23e06"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Make Security Decisions Based on Client Input"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Do ##\r\n\r\nDo not use client input to make security decisions. Ensure that all security decisions are made purely based on information controlled by the server.\r\n\r\n## Why ##\r\n\r\nClient input comes in many forms, from direct input like form variables and query string parameters to less direct input like cookies and connection information. None of it can be trusted and any information coming from the client can be completely controlled by an attacker, even with thick clients.\r\n\r\nIf security decisions are based directly on this information, an attacker can alter the outcome of those decisions. For example, if your thick client sends a list of roles held by the user, the user can alter that list. Role caching cookies are another example of this; unless the cookie is tamper-proofed via signing and encryption, the user can alter their role in the system at will.\r\n\r\n## When ##\r\n\r\nSecurity decisions should never be made based on client input, regardless of the application type, input type, or user group. This includes making security decisions based on things like Request.ServerName, which is under client control, and based on the contents of non-tamper-proofed cookies. \r\n\r\nThe only exception to this rule is the use of passwords. While a password submitted by a client is technically client input, it is used only to make an authentication check, not to make further security decisions.\r\n\r\n## How ##\r\n\r\nIt's not difficult to ensure that security decisions are not based on client data. These steps will lead you through the process:\r\n\r\n1. **Identify all of your security decision points.** Identify all points where you place someone into a role or decide if an action should proceed. Be thorough here, because understanding this element is critical to the security of your application. A design review specifically aimed at this aspect, possibly including a threat model to ensure completeness, is a good way to start, but you'll need to review the actual implementation as well to make sure the design was executed properly.\r\n2. **Trace data.** Trace the data used to make those decisions back until you can prove that none of it is based on client input. If data is round-tripped through the client, prove that it cannot be modified by the client (i.e. the data is cryptographically signed).\r\n3. **Pay extra attention to dangerous areas.** If there are any places where you do make security decisions based on client input, like a role editing component, document those exceptions and spend extra care auditing those code paths. Ensure that any exceptions function according to the business rules they are intended implement. Make sure that all input with security implications is handled carefullyâ€”only ask for it immediately before its use, don't cache it, and validate it before use.\r\n\r\n---\r\nAdapted from Microsoft patterns & practices guidance. "
        ]
      }
    ]
  }
}