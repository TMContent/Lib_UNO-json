{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "a9d2c65f-ae54-4a7d-8ed4-579bfb79f4b8"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Check Authorization for All Operations"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Ruby"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- Ruby\r\n\r\n\r\n## What to Do ##\r\n\r\nPerform access control checks for all sensitive operations. Sensitive operations include any access to system resources, such as files, and any access to application data. Define the different types of users and create specific roles for them. When authorizing access to a resource, build the security checks on a per-role basis rather than on a per-user basis.\r\n\r\n\r\n## Why ##\r\n\r\nWith Ruby, everything is an object. A developer needs to consistently address the permissions on objects as they are created, updated, or destroyed.\r\n\r\nPerforming an operation without checking authorization may expose sensitive data to attackers. Direct object reference attacks are very simple to execute and have been used in high profile, low-skill attacks. Checking access control permissions whenever referencing objects helps prevent direct object reference vulnerabilities. \r\n\r\nApplication roles allow multiple users to play the same role, and provide a clear way to manage the least privileges necessary for the execution of a given task. This provides a more robust and flexible way of managing the application's users. \r\n\r\n\r\n## How ##\r\n\r\nCheck authorization for all operations by using these steps:\r\n\r\n1. **Identify all operations that require authorization.** Review the program architecture to list operations which require authorization. The review must also include sensitive operations performed by the program.\r\n\r\n2. **Identify all roles.** To identify application roles, understand how users will access resources to perform necessary business functions. Create role names that accurately describe the role.\r\n\r\n3. **Make an access control matrix.** Make a spreadsheet where the roles are the columns and the operations are the rows. For each cell in the spreadsheet, mark whether the operation is authorized for the corresponding role.\r\n\r\n4. **Write the centralized authorization subsystem.** To implement the access permissions defined by the access control matrix it is necessary to write a centralized authorization subsystem.\r\n\r\n5. **Identify code for all operations that require authorization.**  Review the code to identify where to place RBAC hooks. This will ensure that the application only permits operations after it is determined that the user is authorized to perform. \r\n\r\n6. **Add code, which checks authorization before the operation is executed, to each operation.** Check authorization using a centralized function and the name of the operation. Instead of checking for specific roles here, the app should ask the centralized authorization code for authorization for the operation. If the operation is not authorized, the application should throw an error condition.\r\n\r\n"
        ]
      }
    ]
  }
}