{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "1b36bfb3-4f7f-4191-a87f-22c56fd3d1e8"
        ],
        "Id_History": [
          "1b36bfb3-4f7f-4191-a87f-22c56fd3d1e8,3d497d0e-50e8-45f8-91d0-d14b4285f148,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "XML Entity Expansion"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "XML Entity Expansion"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nXML Entity Expansion vulnerabilities occur when the application processes user input as XML data, specifically as XML entities, and these vulnerabilities can be exploited to cause Denial of Service conditions. \n\nXML entities are a feature of XML documents that allow assigning names to data. If the attacker can define XML entities that refer to each other, the XML parser might cause the application to crash by getting stuck in an infinite loop. \n\nSome parsers might have built-in defenses against Entity Expansion vulnerabilities, where the parser realizes that it is using up excessive resources and crashes alone. Some parsers might cause the application to use up all the computational resources of the server. Overall, the result of XML Entity Expansion vulnerabilities is Denial of Service.\n\nXML Entity Expansion vulnerabilities affect all applications that use XML.\n\n==Impact==\n\nThe impact of XML Entity Expansion vulnerabilities is a Denial of Service condition. If the attacker is able to inject XML entities into the application that the application will then attempt to parse, the attacker can cause the application server to crash or hang. When the application server crashes or hangs, legitimate users and administrators cannot access the vulnerable application or any other application on the server. It will probably be impossible to restart the server remotely, so somebody will have to go and physically power-cycle the server. The attacker is likely to keep crashing the server until the vulnerability is fixed.\n\n==Countermeasures==\n\nTo prevent XML Entity Expansion vulnerabilities, validate the length of XML data.\n\n==Application Check==\n\nTo make sure that XML Entity Expansion vulnerabilities are prevented, verify that the length of XML data is validated.\n\n==Specific Technologies==\n\n* [[719fdfc7-c28e-49e1-83f4-2009ae7613e7|ASP.NET XML Entity Expansion]]\n* [[2b2dd9c7-05c5-43f1-92c6-d2da4f76d0e3|Java XML Entity Expansion]]\n* [[a1ca1a4b-cb3d-45f7-8574-c79fda84f0ab|C++ XML Entity Expansion]]\n* [[418bc55e-743f-44ce-a370-3c17d581b23f|PHP XML Entity Expansion]]\n\n"
        ]
      }
    ]
  }
}