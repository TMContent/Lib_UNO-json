{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "c1f4c3d6-c334-440f-a5f8-1b6b29924d6d"
        ],
        "Library_Id": [
          "de693015-55c9-4328-bbc8-42db82ae8b7a"
        ],
        "Title": [
          "WASC Threat Classification"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "The Web Application Security Consortium (WASC) Threat Classification is project that aims to classify common security threats as either attacks or weaknesses, to help programmers and security testers better focus their efforts on preventing vulnerabilities from shipping in production code. This effort is led by several industry veterans with the hopes of helping to secure the web from common application exploits. Enter the WASC Threat Classification room to better understand which vulnerabilities are considered attacks and which are considered weaknesses.\n\n  * [[/article/3bda2bcd-f60a-44fa-80b2-37ca61b87abd|Insufficient Authentication]] - Insufficient authentication vulnerabilities occur when the application allows users to perform sensitive operations or access sensitive information without properly checking their authentication credentials. The result is that attackers will be able to use application functionality that should only be available to authenticated users. \n  * [[/article/b6888db3-516e-4f62-994c-240e652ecb31|Insufficient Authorization]] - Insufficient authorization vulnerabilities occur when the application allows a user to perform an action without checking if the user has sufficient privileges to carry it out. This allows attackers to carry out actions that the designers of the application did not intend for them to be able to do. For example, if privileges are not checked properly, an attacker with an unprivileged account might be able to upload files to the server, even if the application should not allow that by design. \n  * [[/article/abc12d73-61ae-4736-b123-144aaea5254b|Integer Overflows]] - Integer overflows occur when the application tries to assign a number that is too large for the variable data type that it is being assigned to. Integer data types have a finite set of possible values, which means that each integer variable has a minimum and a maximum value. Trying to assign a number to an integer variable that is greater than its maximum value results in an integer overflow. Trying to assign a number to an integer variable that is smaller than its minimum value results in an integer underflow. \n  * [[/article/17ecc589-9be2-4429-8dc4-9f61556f63b1|Insufficient Transport Layer Protection]] - SSL/TLS should be used to protect any sensitive data in transit. Some applications don't use SSL even during authentication or when transmitting sensitive data, and an attacker may be able to intercept such data that is sent over the network unencrypted. \n  * [[/article/4a8034cb-e024-4ccb-a5f7-d7397dfc1371|Remote File Inclusion]] - Remote file inclusion (RFI) occurs when the application executes a file located on an external server, which is usually controlled by the attacker. This enables the attacker to execute arbitrary code as a part of the application, in effect allowing them to do anything that the application and the application platform can do. It could potentially result in the attacker gaining complete control of the system. \n  * [[/article/157c6e57-629d-4002-899a-1be6f2f18a1e|Format String]] - Format string vulnerabilities occur when untrusted user input is used as the format string parameter in C functions that perform formatting, such as printf(). This vulnerability allows an attacker to crash the program or execute arbitrary code. \n  * [[/article/bb7f7b3a-a3bc-498a-b4b4-88e7e8b02855|Buffer Overflow]] - Buffer overflows occur when code can be manipulated to cause the application to write data beyond the limits of memory allocated for that data. In short, a buffer overflow happens when the application tries to write too much data into too little (memory) space. \n  * [[/article/683d33a8-7979-4307-8cf0-3a82457f9f47|Cross-site Scripting]] - A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page.\n  * [[/article/62f78eb2-9eba-484c-ade3-7b54c2df9e5a|Cross-site Request Forgery]] - A cross site request forgery (CSRF) attack occurs when an attacker tricks a victim into loading a page that contains a malicious request. This request may be able to change the state of the web application, and is possible because the request is sent in the context of the logged in victim. For many sites, each request automatically sends the victim's credentials, such as the session cookie or authentication credentials. Due to this fact, there is no way to distinguish the false request from a legitimate request. CSRF vulnerabilities affect web applications that allow authenticated users to perform operations that are not available to guest users. \n  * [[/article/b5d3f9e8-3f63-42c3-bf20-4a283d2921ac|Denial of Service]] - Denial of service vulnerabilities occur when the application can be manipulated to use an excessive amount of the system's computational resources, manipulated to crash, or manipulated to perform some kind of malicious and destructive action, such as deleting files. \n  * [[/article/81626d56-6225-49b4-b1c6-ca29e9739999|Brute Force]] - Brute forcing is a broad term that refers to repeatedly performing a very simple, automated attack, which has a small chance of being successful for each iteration. The more iterations are performed, the more likely one of them is to succeed. The more resources the attacker has, the more iterations they will be able to perform and thus the more powerful the attack will be overall, hence the term brute force. \n  * [[/article/8e0a55a1-ad6a-4a9c-871d-8648e77181d8|Content Spoofing]] - Content spoofing vulnerabilities occur when the application can be manipulated to display malicious content injected by the attacker. This is a very broad vulnerability class that can have multiple causes. Cross-site scripting (XSS) vulnerabilities can result in content spoofing, and cross-site scripting is itself a broad vulnerability class. Content spoofing can also result from poor authentication controls that allow the attacker to substitute application data with malicious data. \n  * [[/article/cdaf94c6-70f2-4026-b497-b22a0f5bd51c|Information Leakage]] - Information leakage is a blanket term for vulnerabilities that disclose either something about the system or some of the application data to unauthorized users. Information leak vulnerabilities result when application code sends data to the user that the user is not authorized to receive. Most information leak vulnerabilities disclose something about the system and this helps the attacker exploit additional vulnerabilities. Some information leaks disclose application data and in that case the attack is usually after the data itself. Sometimes the disclosed data might include authentication credentials, which could be leveraged to take over usersâ€™ accounts or the application.\n  * [[/article/7172cbb4-689e-453c-ba3c-984d43adf5af|Server Misconfiguration]] - Server misconfiguration vulnerabilities occur when the server that hosts the web application is not configured properly. Different server platforms have different security settings and therefore different potential for server misconfiguration, but generally server misconfiguration results from turning off security features or assigning weak values to security settings. \n  * [[/article/c1116151-72d2-4210-a57b-574c26c5a9be|Application Misconfiguration]] - Application misconfiguration vulnerabilities occur when an application is not configured properly by the user. Examples include weak passwords, weak access control permissions, exposed configuration settings, exposed authentication stores, unnecessarily enabled functions and services, and exposed administration interfaces. Attackers usually abuse application misconfiguration vulnerabilities to gain administrative access to the application, and then leverage this access to execute arbitrary code with the privileges of the web application on the server. \n  * [[/article/9ed972ea-62fa-4231-9315-53d9ccc2ab28|Directory Indexing]] - Directory indexing vulnerabilities occur when a web application server is configured to return a listing of files in a web accessible directory in response to an HTTP request for that directory. Directory indexing is typically enabled by default in most major web server software. An attacker can abuse directory indexing to download sensitive or otherwise valuable data from the server, bypassing application access controls. An attacker can also abuse directory indexing to gain insight into the structure of the web application, but this is usually less useful than being able to download the data that is stored by the web application. \n  * [[/article/d58be955-efea-4dd0-9f7a-d423f9d84c7b|Improper Filesystem Permissions]] - Improper filesystem permissions vulnerabilities occur when the filesystem permissions are not sufficiently restricted, either as a result of the application not setting strict enough permissions or the user/administrator/customer not securing the system sufficiently. \n  * [[/article/40380b36-72fd-4a07-8daa-e5ec6ea1467a|Credential/Session Prediction]] - Session hijacking (a.k.a. credential and session prediction) vulnerabilities occur when the application uses easy to predict session identifiers or other easy to predict methods to track user sessions. This allows an attacker to guess the session identifier of a user and then carry out actions on the behalf of that user within the application. \n  * [[/article/c4914e51-2609-4edc-8133-31491f1b03c0|SQL Injection]] - SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application.\n  * [[/article/0d489ceb-0472-4f1c-9f69-edb53f81796b|Improper Input Handling]] - Improper input handling vulnerabilities occur when the application does not properly validate or encode user input. The difference between validation and encoding is that validation will reject input data that does not match the expected format, while encoding will take whatever data passes validation and turn it into a form that cannot be used to exploit additional vulnerabilities. \n  * [[/article/b07b1f54-6aad-49a1-86cc-3f067f95e53b|Insufficient Anti-Automation]] - Insufficient anti-automation vulnerabilities occur when the application does not place limits on how rapidly sensitive operations can be performed. This allows an attacker to write an automatic tool that will continuously trigger sensitive operations. The goal of the attack depends on the circumstances, but is usually one of the following: causing the application to use a lot of resources to induce a denial of service condition, trying different values to guess a secret, or collecting information by accessing a large range of resources. \n  * [[/article/d703cb26-0090-4750-84a2-6aaeb8fb22d2|Improper Output Handling]] - Improper output handling vulnerabilities occur when the application does not encode untrusted data correctly for the context. If the application includes data provided by an attacker without properly encoding this data, the attacker will be able to manipulate the output of the web application. The most common result is a Cross-Site Scripting vulnerability, where the attacker is able to manipulate the web application into sending attacker-controlled malicious data (usually JavaScript) to legitimate users. Other vulnerabilities besides Cross-Site Scripting might be caused by improper output handling, for example HTTP response manipulation. The common principle is that if the application does not properly encode untrusted data in output, the attacker can manipulate the application to send malicious data to legitimate users. \n  * [[/article/c54b70d7-11bc-4102-a4e0-f3e468d00cb0|XML Injection]] - XML injection occurs when an attacker is able to supply data to the application that is interpreted as a part of an XML document in a manner that violates the intended use of XML by the application. XML injection vulnerabilities occur when untrusted data is allowed to be concatenated with XML data. Concatenating the attacker's data with XML allows the attacker to manipulate the syntax and the contents of the XML document and thus allows the attacker to modify the behavior of the application. \n  * [[/article/d4185020-774b-4eec-b25e-9fedfd3193d0|HTTP Request Splitting]] - HTTP request splitting is an exotic and rare vulnerability type. It requires a combination of a vulnerable browser, a vulnerable proxy or firewall, and the user visiting a malicious site. If all the requirements are met, the attacker will be able to use the malicious page that the user visits to cause the vulnerable browser to send malformed requests that will cause the vulnerable HTTP proxy or firewall to send multiple malicious requests. The responses received by the vulnerable proxy or firewall get passed to the vulnerable browser and appear to come from legitimate sites, but they have to be received when the browser is expecting them. If the browser is expecting these responses, the attacker will be able to manipulate the content that the user can see, for example to change pictures on user requested sites or to execute cross-site scripting attacks that appear to come from these legitimate sites. \n  * [[/article/722b06b7-39f3-4f4a-8259-f3698ef1c069|HTTP Response Splitting]] - HTTP response splitting occurs when an attacker is able to inject arbitrary data into the headers of HTTP responses. This vulnerability allows the attacker to force HTTP responses that contain HTML of the attacker's choosing. HTTP response splitting applies to web applications that place user input in HTTP response headers. \n  * [[/article/fe60a53f-9510-4037-8ca8-42307ca13ffc|HTTP Request Smuggling]] - HTTP request smuggling vulnerabilities occur when a proxy or a firewall handles invalid requests in a manner that causes it to issue malicious requests to the web application that it is supposed to be serving or protecting. \n  * [[/article/d26055e1-d9af-4f91-9a5c-11e21f916b74|HTTP Response Smuggling]] - HTTP response smuggling vulnerabilities occur when an HTTP firewall or proxy sends multiple HTTP responses to the client when the device expects to pass only a single response to the client. The application sends a malformed response to a client's request, and this causes the HTTP firewall or proxy to send multiple responses to the client. \n  * [[/article/0e716b8f-8275-41f2-a94c-ce5af590a3b2|Null Byte Injection]] - Null byte injection occurs when the application does not correctly process null byte characters in input, and uses this incorrectly processed input to make security-sensitive decisions. Null byte injection is usually used by attackers to bypass file extension filters in order to exploit file inclusion vulnerabilities in PHP. Null byte injection is usually a vulnerability in the platform and not the application itself. \n  * [[/article/8eba1b70-1b1a-4810-a819-1c212cf33099|LDAP Injection]] - Lightweight Directory Access Protocol (LDAP) is a widely used protocol for accessing directory services. Directories provide a set of attributes about people that are organized in a hierarchical manner. LDAP Injection is a technique to exploit applications that use input from users to query an LDAP directory. LDAP injection has the potential to view, modify, or remove personal information about anyone in the directory. \n  * [[/article/c3c2036c-8570-47e2-b962-ea13ba0715fe|Mail Command Injection]] - Mail command injection vulnerabilities occur when an application implements its own email client code and concatenates user data with email commands. There should be no reason to implement email client code in applications that are not email clients. \n  * [[/article/94e52aca-06b6-4747-9bc9-f0149208f18c|OS Commanding]] - Applications often execute external commands as a part of their functionality. If the attacker is able to manipulate the choice of external commands or their parameters, the attacker may be able to use this functionality to execute arbitrary commands. If an attacker is able to execute arbitrary commands, he is typically able to take over the application and possibly take over the entire system. \n  * [[/article/623e234a-237b-4402-9cb5-ccc0100278a4|Routing Detour]] - Routing detour vulnerabilities occur when an attacker is able to manipulate SOAP headers of an application that uses the WS-Routing protocol. The attacker must be able to conduct Man-in-the-Middle (MitM) attacks to exploit routing detour vulnerabilities. This places a severe restriction on their exploitability. \n  * [[/article/b0a8079f-fda0-46d9-bc3b-20ac08334e75|Path Traversal]] - Some applications allow the user to choose what files to access. Some of these applications don't validate the selected file path sufficiently. This path traversal vulnerability allows an attacker to access files outside of the locations authorized by the application.\n  * [[/article/20ef5018-573a-4ea7-9ed4-4df8b92fd2bf|Predictable Resource Location]] - Predictable resource location vulnerabilities occur when the application places code or data in easy to guess locations. The result is that an attacker can guess where a specific portion of the application or data is located, and this makes it easier to carry out attacks that exploit other vulnerabilities. \n  * [[/article/674d8044-408b-4073-ba10-5886867e660d|SOAP Array Abuse]] - SOAP array abuse vulnerabilities occur when a web-service processes incoming SOAP arrays without validating them. If a web-service processes large SOAP arrays sent by an attacker, the attacker can cause the web-service to allocate large amounts of memory, ultimately exhausting the available memory on the server. Once free memory on the server has been exhausted, new applications will fail to start and existing applications will start to crash. The result is that applications on the server will become inaccessible to the users, which is a Denial of Service condition. \n  * [[/article/23662293-5ddf-4a22-a5d8-e2d7186148d2|SSI Injection]] - Server-side Include Injection (SSI) vulnerabilities occur when the application allows creation of files that contain Server-side Include directives. If an attacker is able to create files that contain Server-side Include directives, and then is able to cause the server to execute these directives by issuing HTTP requests for these files, the attacker will be able to execute arbitrary system commands on the server with the privileges of the web server daemon. \n  * [[/article/fd3db9ad-33b8-41af-aba9-fc5fb12bb562|Session Fixation]] - Session fixation vulnerabilities occur when the application doesn't sufficiently protect session identifiers. This allows an attacker to hijack active user sessions. \n  * [[/article/90608236-847e-47ff-bb8f-b551297a25af|URL Redirector Abuse]] - Many web applications use URL redirection to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker may be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website.\n  * [[/article/5ef5eea8-07c2-41de-80f9-7f62aaf0e3c8|XPath Injection]] - XPath injection is a type of vulnerability that allows attackers to execute arbitrary queries on XML databases. XPath injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XPath injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents. \n  * [[/article/77604922-0512-47b7-b7b7-6ccfa41fca65|Insufficient Process Validation]] - Insufficient process validation occurs when the application can be manipulated to execute multiple operations in a sequence that is different than intended, or to perform an inappropriate business operation. \n  * [[/article/e1b1aa95-34bb-4c07-8a08-8110bac3b48c|XML Attribute Blowup]] - XML Attribute Blowup vulnerabilities occur when an application allows users to create XML documents with a large amount of attributes, and results in Denial of Service conditions. \n  * [[/article/847115bd-af70-4563-8218-d178a28d46f8|Abuse of Functionality]] - Abuse of functionality vulnerabilities occur when the application's own features can be used to carry out attacks, usually against something other than the vulnerable application itself. The impact of abuse of functionality vulnerabilities is usually some form of denial of service condition, but in some rare cases, these vulnerabilities might be abused to bypass other security controls. This class of vulnerabilities is very broad and the vulnerabilities themselves are usually highly specific to the application. These factors make it difficult to define specific steps to prevent these type of vulnerabilities from occurring. \n  * [[/article/6f0d3861-d0b8-4cb1-9fc3-92bb23d738e5|XML External Entities]] - XML external entity (XXE) injection vulnerabilities occur when the XML processor allows the attacker to control data loaded into the XML document as \"external entities.\" Some XML processors support a feature called \"external entities\" that allows loading XML data from a URI as a part of the document. If the attacker can define the URI from which the data is loaded, they can manipulate the data that gets loaded into the XML document. Thus, the attacker can potentially load arbitrary files on the server of his choosing into the document and be able to read them. \n  * [[/article/1b36bfb3-4f7f-4191-a87f-22c56fd3d1e8|XML Entity Expansion]] - XML Entity Expansion vulnerabilities occur when the application processes user input as XML data, specifically as XML entities, and these vulnerabilities can be exploited to cause Denial of Service conditions. \n  * [[/article/3a785e14-dca9-40d5-883e-c9901c094d9b|Fingerprinting]] - Fingerprinting is a broad term that describes searching for telltale signs that a specific application or system component is running on a given system. These telltale signs are called fingerprints. They are usually fragments of responses produced by the system that include application name and/or version information. \n  * [[/article/33f09ecd-0d56-4609-a49b-5337461a13f9|XQuery Injection]] - XQuery injection vulnerabilities occur when untrusted data is concatenated into XQuery queries, which allows the attacker to execute arbitrary queries. XQuery injection vulnerabilities are similar to SQL injection vulnerabilities, but they affect XML databases instead of SQL databases. XQuery injection is often more dangerous than SQL injection, because permissions are not enforced and the malicious queries can access every part of the XML documents.\n  * [[/article/fcb196f6-2057-4ebd-a6e5-ef6e8479b9cf|Insufficient Session Expiration]] - Insufficient session expiration vulnerabilities occur when the application keeps user sessions active for an unreasonably long period of time. The correct amount of time to keep a user session active depends on the applicationâ€™s requirements. Thirty minutes since the last action is a reasonable standard. If the application keeps user sessions active for days, weeks, or even longer, an attacker might be able to take over the session after compromising a user's session identifier. \n  * [[/article/aaa07437-2bea-41e2-aeeb-557e460e145e|Insecure Indexing]] - Insecure indexing vulnerabilities occur when the application discloses the location of sensitive or otherwise valuable files. Insecure indexing typically occurs when a web search engine finds sensitive files while indexing the site, hence the name. Once a search engine has indexed sensitive data, an attacker can use search engine queries to retrieve the sensitive data either from the search engine cache or by following the URLs to the affected site. \n  * [[/article/63785c31-e199-42b8-9a2f-a99240ca7969|Insufficient Password Recovery]] - Insufficient password recovery vulnerabilities occur when the application does not have an effective process to verify user identity when handling a \"forgotten password\" condition, and then either gives the password to the attacker or allows the attacker to change the password. The attacker is then able to impersonate the user and gain access to the user's account. \n\n\n[[754da6c4-f305-4112-b3e2-d34b81475a5b|Back to the Vulnerability Taxonomies Area]]"
        ]
      }
    ]
  }
}