{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "e3d00fdc-baf6-49d5-97a9-40e003407146"
        ],
        "Library_Id": [
          "de693015-55c9-4328-bbc8-42db82ae8b7a"
        ],
        "Title": [
          "Most Exploited Vulnerabilities"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "Not all vulnerability types are equal - attackers favor vulnerabilities that are easy to exploit and grant a lot of abilities. Exploits for some vulnerability types can be easily automated to quickly attack a large number of targets, while other vulnerability types require manual work for each target or waiting for the target to trigger the exploit. The number of automated attacks is usually much greater than the number of manual attacks. Knowing this, it is reasonable to pay particular attention to vulnerabilities that real-world attackers exploit the most. The following are the most frequently exploited web application vulnerability types:\n\n  * [[/article/c4914e51-2609-4edc-8133-31491f1b03c0|SQL Injection]] - SQL injection is a type of vulnerability in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. \n  * [[/article/683d33a8-7979-4307-8cf0-3a82457f9f47|Cross-Site Scripting]] - A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.\n  * [[/article/1d3c6862-1cde-4764-bef2-b12bdac2fb8a|Shell Upload]] - File upload vulnerabilities allow attackers to upload malicious code. (Technically, allowing users to upload anything that the application's design doesn't account for can be considered a file upload vulnerability. In practice, real file upload vulnerabilities are those that allow attackers to upload and execute malicious code.)\n  * [[/article/94e52aca-06b6-4747-9bc9-f0149208f18c|Command Injection]] - Applications often execute external commands as a part of their functionality. If the attacker is able to manipulate the choice of external commands or their parameters, the attacker may be able to use this functionality to execute arbitrary commands. If an attacker is able to execute arbitrary commands, he is typically able to take over the application and possibly take over the entire system. All applications that use external applications are affected by command injection vulnerabilities. Web applications are especially at risk, because they are exposed to the Internet.\n\n[[e2f97ef0-6ced-4f3d-bdce-7a72e359eb7b|Back to the Vulnerabilities Area]]"
        ]
      }
    ]
  }
}