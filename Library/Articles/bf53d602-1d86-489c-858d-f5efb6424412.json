{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "bf53d602-1d86-489c-858d-f5efb6424412"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Data Validation"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Data Validation Guidelines ##\r\n\r\nData validation is one of the most important steps in securing any application that handles data from an external source. By creating software that receives outside input beyond your control, you inherently open up the greatest vector for attacks. Use this guide to learn the proper techniques for ensuring your code validates data.\r\n\r\n* [Validate All Input](11a15f3a-7fe8-4e4c-be5e-309ab7227b3d) - Ensure that all input is validated, validation routines should check for length, range, format and type. Validation should check first for known valid and safe data and then for malicious, dangerous data. Malicious input is the single largest cause of vulnerabilities, and in the most general sense, is the root cause of almost every issue.  The only way to ensure safety is by a defense in depth, default deny policy that starts with the fundamental supposition that all input is malicious until proven otherwise.\r\n\r\n* [Use White-list Validation](1e29054b-3017-487c-8b4b-8ceabf102679) - Validate all user input by using white-list/positive input validation. White-list input validation means allowing only input that is explicitly defined as valid, as opposed to black-list input validation, which filters out known bad input.\r\n\r\n* [Perform Validation on the Server](b545cdb5-89d3-4dbc-b14e-94350709e519) - Check to ensure your application is not relying on client side validation to make security decisions.  Client side validation is okay, because it gives the user feedback on bad input for a better user experience, but can be easily bypassed by an attacker.  Check to make sure all validation that occurs on the client also occurs on the server.\r\n\r\n* [Validate Results of Calculations](c86d29f0-f218-40d7-a203-7c21b922a6b1) - Be careful with numeric calculations, such that the calculation never exceeds the maximum or minimum value for the data type of any variables used in the calculation. If a calculation causes a data value to be larger or smaller than its data type allows, the value will wrap and become much larger or smaller than expected. Ensure that any location where a user can give input that results in a calculation does not cause an underflow or overflow condition.\r\n\r\n* [Validate SOAP Array Length](99e4b47f-43af-4fd1-94cf-fe2ef753de44) - Validate SOAP array size to prevent SOAP array abuse attacks. SOAP array abuse occurs when an attacker sends SOAP messages that say they have very large arrays in them. The parser allocates a lot of memory upon seeing such messages, so the attacker is able to exhaust the server's memory by sending a large amount of these SOAP messages rapidly. The result of SOAP array abuse is a denial of service condition.\r\n\r\n* [Validate XML Data Length](d4d04cbe-e3cc-4630-9153-d80fb4a4ba06) - Validate the length of XML data to prevent multiple types of XML denial-of-service attacks. Most types of XML denial-of-service attacks can either be prevented or mitigated by limiting the size of XML data that is passed to the parser.\r\n\r\n* [Validate File Formats](c1aedb56-0e43-4142-b73f-86a6cfc95f82) - Verify that the format of the file is correct when opening saved files or documents, many vulnerabilities are exploited via malformed documents supplied to the application. Attackers frequently embed malformed documents in web pages - some applications are integrated into the web browser and will open malicious documents automatically. Making sure that file format is valid before loading files into the application makes it harder to embed exploit code into documents.\r\n\r\n\r\n## Computer Based Training ##\r\n\r\nUse the following Computer Based Training course for more information about data validation:\r\n\r\n* [AWA 101 Fundamentals of Application Security](https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127105) - This two-part course is ideal for security and development practitioners that want to understand software security risk and seek specific implementation guidance on how to build and deploy more secure software applications.  It starts off describing why software security is critical and the risk that software vulnerabilities represent, and proceeds to lay the foundation for secure software development by presenting specific security controls and principles that development teams can implement immediately to reduce software risk. \r\n\r\n*Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.*\r\n  \r\n## Related Pages ##\r\n  \r\n* [Application Security Best Practices Guide](bcbbe5c7-95c3-468d-9371-6eb42f9b93e6)"
        ]
      }
    ]
  }
}