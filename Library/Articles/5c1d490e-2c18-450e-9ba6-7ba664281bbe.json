{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "5c1d490e-2c18-450e-9ba6-7ba664281bbe"
        ],
        "Id_History": [
          "5c1d490e-2c18-450e-9ba6-7ba664281bbe,c816c981-91f5-42c1-a57f-7fd6f7bf175b,"
        ],
        "Library_Id": [
          "f215ceee-9a08-41d9-b2c1-bbcc058a8f32"
        ],
        "Title": [
          "Use the Java UUID Class to Identify Each Installation Uniquely "
        ],
        "Category": [
          "Privacy"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Android"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use the Java UUID Class to Identify Each Installation Uniquely "
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* Android\n\n==What to Do==\n\nCreate a randomly generated globally unique identifier (GUID) for the application using the Java UUID class. Do not use elements such as phone number, media access control address, or Android ID. These device elements require additional permissions, are not always reliable, and in most cases are unnecessary.\n\n==Why==\n\nThe UUID class does not require additional permissions and is highly reliable. In addition, it does not use personal information, which helps avoid an overly permissive application that opens unnecessary security holes. UUID also produces an identifier that has a high level of uniqueness. In contrast, using device information such as a phone number or Android ID to identify an installation is unreliable and can negatively affect user privacy. Phone numbers are especially problematic, because they survive device wipes, are not unique to a specific installation, and constitute personal data. They also will not appear on Wi-Fi–only devices. \n\n==When==\n\nWhenever an application requires a unique identifier for its installation, use the UUID class to generate it. For example, an application may require an identifier if you want to count the number of unique installations for statistical purposes, or if you want  to tie such an identifier to an actual user without having to store personal information on the device itself. (Note that most applications, especially ones that interact solely on the device, will not need a unique identifier.)\n\n==How==\n\nTo generate unique GUIDs by using UUID:\n\n# **Upon installation, call the static method UUID.randomUUID() to create a 128-bit unique identifier.** For most purposes, this identifier provides more than enough uniqueness. Note that you should not use a subset of the number except with the //UUID.randomUUID().getLeastSignificantBits()// or //UUID.randomUUID().getMostSignificantBits()// methods. For instance, do not take the first 8 digits of the returned long value and store that as your unique value, as the randomness can be significantly degraded when you do that.\n# **Store the GUID in a persistent location such as a SQLite database.** Since the value will be 8 bytes in size, an INTEGER column will be able to store it. The application will call this column when it needs to retrieve or store the unique value. \n# **In the onCreate() method of the launcher activity, verify that the GUID value exists.** If not, use UUID to create it and, then store the value in the SQLite database.\n\n==Problem Example==\n\nAs the MyApp developer, you need a unique identifier so that a cloud-based database can track installations for license management. You use the phone number on the device. To retrieve it, you use the //TelephonyManager//:\n\n{{{\nTelephonyManager tMgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\nString mPhone= tMgr.getLine1Number();\n}}}\n\nThis method initially appears to work well as the company rolls out the MyApp application. After a few months, though, procurement notices that Wi-Fi–only devices are not appearing in the database. When a senior executive finds out that this is because the phone number is being used for installation identification, she becomes concerned that the company may be violating local privacy legislation, because these are personal, not work-owned, devices and contain personal phone numbers. In addition, the company may have an unknown number of licenses for which they cannot account.\n\n==Solution Example==\n\nInstead of using the device’s phone number, the application uses the UUID class to generate a unique GUID upon installation:\n\n{{{\nlong _id = UUID.randomUUID().getLeastSignificantBits();\n}}}\n\nThe application stores the long value in the SQLite database and retrieves it on demand through a database helper function. \n\nAssume a table called ID_TABLE that stores the value in a column called APP_ID.\n\n{{{\npublic String getAppId () {\n  String[] resultColumns = new String[] {APP_ID };\n  try {\n    Cursor allRows = db.query(ID_TABLE, resultColumns, null, null, null, null, null);\n    if (allRows.moveToFirst()){\n      return allRows.getLong(0);\n    }\n    else{\n      return Long.MIN_VALUE;\n    }\n  }\n  catch (SQLException e){\n    Log.i(getClass().getSimpleName(), “SQL Error” + e.getMessage();\n  }\n}\n}}}\n\nThe application includes this method in a class that extends //SQLiteOpenHelper//. Upon startup, the application will run this method to determine whether the ID already exists. If it doesn’t, the app creates the identifier using UUID and inserts it into the database with a method such as:\n\n{{{\npublic int insertId () {\n  try {\n    long _id = UUID.randomUUID().getLeastSignificantBits();\n    ContentValues values = new ContentValues();\n    values.put(COL_CODE, _id);\n    db.insert(ID_TABLE, null, values);\n    values.clear();\n    return 1;\n  }\n  catch (SQLException e){\n    Log.i(getClass().getSimpleName(), “SQL Error” + e.getMessage();\n    return -1;\n  }\n}\n}}}\n\nIn the event the application is uninstalled and reinstalled, the unique value will be regenerated through the //onCreate()// method of the launcher activity.\n\n"
        ]
      }
    ]
  }
}