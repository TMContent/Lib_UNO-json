{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "af528b9a-af5f-49b8-a314-4578c0b31273"
        ],
        "Id_History": [
          "af528b9a-af5f-49b8-a314-4578c0b31273,134d8b58-d9ce-46f1-b6fe-9783d49d3fcc,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Validate Input from All Sources"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Validate Input from All Sources"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <p>Applications written using Scala and Play Framework 2.1.0 that interact with a database.<br /></p>\r\n  <h1>What to Do</h1>\r\n  <p>Treat input from all external sources as untrusted and apply input validation techniques.</p>\r\n  <h1>Why</h1>\r\n  <p>Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities&nbsp;that could allow an attacker to gain unauthorized access to sensitive data.</p>\r\n  <h1>When</h1>\r\n  <p>Treat all input as untrusted. If you have established trust boundaries for your application, then validate data every time it crosses a trust boundary.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following steps to establish a validation strategy:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Establish your application's trust boundary:</strong> All input not generated by your application is untrusted.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sources of input</strong>: Each source of input represents an entry point to your application&nbsp;that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input&nbsp;at&nbsp;each source. Potential sources of input in a web application typically include:</p>\r\n      <ol>\r\n        <li>URL based parameters</li>\r\n        <li>Form based parameters</li>\r\n        <li>Hidden fields</li>\r\n        <li>Cookies</li>\r\n        <li>HTTP headers</li>\r\n        <li>Local filesystem</li>\r\n        <li>Database</li>\r\n        <li>Other related services</li>\r\n      </ol>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Understand the input that your application can handle and process</strong>: After identifying the different entry points, define the format and type of input that&nbsp;should be provided through each entry point.</p>\r\n    </li>\r\n    <li>\r\n      <p />\r\n      <strong>Create a set of validators</strong>: Build a validator for each format and type of expected input. Centralize your application's validators--this helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.</li>\r\n  </ol>\r\n  <br />"
        ]
      }
    ]
  }
}