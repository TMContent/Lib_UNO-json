{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "b14c3718-48ac-4328-80c5-78ad98015a53"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use X-Frame-Options Header to Prevent Clickjacking"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Ruby"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- Ruby\r\n\r\n\r\n## What to Do ##\r\n\r\nUse the X-Frame-Options response header to prevent clickjacking attacks.\r\n\r\n\r\n## Why ##\r\n\r\nThe X-Frame-Options response header instructs the browser to disallow the use of iframes across domains or limit their use to the same origin. This protects against clickjacking, a malicious technique that uses iframes to overlay or hide a clickable link or button on a web page. In a clickjacking attack, a user thinks he or she is clicking the intended link but actually clicks the overlaid iframe link, thus sending data to an unintended website.\r\n\r\n\r\n## When ##\r\n\r\nUse this guideline when implementing Ruby applications where pages are not intended for rendering in a frame or iframe. The programmatic framework used with Ruby determines whether mitigation is required. With Rails 3, use the `secure_headers` RubyGem to mitigate several vulnerabilities, including clickjacking. Rails 4 sends the X-Frame-Options header by default, and does not require mitigation.\r\n\r\n\r\n## How ##\r\n\r\nIf you are using the Rails 3 framework use the SecureHeaders RubyGem to add an X-Frame-Options header:\r\n\r\n1. **Identify code which renders pages.** Find all instances where pages are rendered, and examine whether headers are being modified. Some of this functionality may need to be removed or modified.\r\n\r\n2. **Add the configuration for SecureHeaders.** Place the following code in an initializer. Note that the configuration is set to `DENY`:\r\n\r\n\t\t::SecureHeaders::Configuration.configure do |config|\r\n\t\t   # . . .\r\n\t\t   config.x_frame_options = 'DENY'\r\n\t\t   # . . .\r\n\t\tend\r\n\r\n3. **Edit the controller.** Include the following code in *application_controller* to set security-related headers automatically, and apply x_frame_options:\r\n\r\n\t\tclass ApplicationController < ActionController::Base\r\n\t\t   # . . .\r\n\t\t   ensure_security_headers\r\n\t\t   # . . .\r\n\t\tend\r\n\r\nIf you are using the Rails 4 framework, the application automatically sends the `X-Frame-Options` response header with the value of `SAMEORIGIN`. With this setting, the application tells the client browser to only frame pages that originate from the same domain.\r\n\r\n1. **Identify code which changes header.** Examine the application to find any instances where pages are rendered, and whether headers are being modified to allow framing.\r\n\r\n2. **Re-enable default settings for `X_Frame_Options`.** If `X_Frame_Options` is set to `ALLOW`, or is missing from configuration, re-enable the default settings and configuration.\r\n\r\n\r\n"
        ]
      }
    ]
  }
}