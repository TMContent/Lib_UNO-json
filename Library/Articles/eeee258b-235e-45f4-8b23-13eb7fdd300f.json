{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "eeee258b-235e-45f4-8b23-13eb7fdd300f"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Store Passwords Securely"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "ABAP"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- SAP ABAP\r\n\r\n\r\n## What to Do ##\r\n\r\nUse iterative hashing to protect stored passwords. The default configuration of the hashing process used with the latest versions of SAP is `CODEVN H`, an iterative, salted hashing (SHA-1).\r\n\r\n\r\n## Why ##\r\n\r\nStoring hashes instead of plain-text passwords ensures that an attacker cannot easily recover the passwords if the storage tables are accessed. Adding salt to hashed files makes hashes much harder to break with dictionary attacks. Hashing should be applied multiple times (iteratively) to make hashing take longer and thus increase the computational resources required to attack the hashes. Iterative hashing applies a hashing function multiple times to a password and a salt, drastically increasing the time required to perform dictionary attacks.\r\n\r\nIf iterative hashing is not used for stored passwords, and the stored tables are compromised, the passwords can be easily broken with well-known tools. The result would be loss of customer and client trust, as well as the possible compromise or theft of other secret data.\r\n\r\n\r\n## When ##\r\n\r\nSo long as sufficient resources are available to the server systems, you should use the strongest settings for salt and iterations. In other words, go beyond the default algorithm settings for deeper security. As more computing power becomes available, however, it is necessary to use newer, stronger algorithms to mitigate brute force attacks. When a newer hashing algorithm becomes available, consider backward-compatibility, and implement the strongest method possible.\r\n\r\n\r\n## How ##\r\n\r\nReview the referenced additional sources for additional background on SAP password hashing algorithms. The following steps describe the `CODEVN H` hash and additional configuration which will affect its use.\r\n\r\n1. **Use the system-provided iterative hashing algorithm.** The default algorithm is `CODEVN H`. It supports these features:\r\n\t- Support for multiple hashing algorithms (future).\r\n\t- Uses iterated, salted SHA-1 algorithm with default settings of `iterations=1024`.  Can be configured with any value in the range [1-4294967294].\r\n\t- Random salt default setting is `saltsize=96`. Length can be configured in the range [32-128] bits.\r\n\t- Supports password length up to 40 characters.\r\n\t- Upper and lower case passwords supported.\r\n\t- UTF-8 support.\r\n\r\n2. **Generate a random salt value.** Each bit of salt doubles the memory and computational requirements for dictionary attacks. The default setting (`saltsize=96`) can be increased. The system generates the `random_salt`.\r\n\r\n3. **Combine the password and the salt.** The system concatenates the password and the salt.\r\n\r\n4. **Hash the password and salt using multiple iterations.** The system uses the specified iterative hashing algorithm to hash the password and salt as many times as specified by the setting for `iterations`.\r\n\r\n5. **Store the hash and the salt.** The system stores the hash in column `PWDSALTEDHASH` in table `USR02`. When comparing user-entered passwords to the hashed value, the system uses the stored salt and hashed value. The system also tracks the number of iterations used by the hashing algorithm.\r\n\r\n6. **Adjust profile parameters.** The following have an impact on the hash algorithm:\r\n\t- SAP kernel version\r\n\t- Profile parameters `login/password_charset` and `login/password_downwards_compatibility` \r\n\r\n7. **Implement password verification.** During authentication the system checks the password entered by the user against the hashed and salted value. The system retrieves the hash value and the salt from password storage. User input is concatenated with the stored salt. The resulting string is hashed iteratively using the same amount of rounds as was used to calculate the stored hash. The system compares the resulting string against the stored hash. When these values are the same, the user has entered the correct password.\r\n\r\n\r\n## Guideline ##\r\n\r\n* [Store Passwords Securely](00000000-0000-0000-0000-0000006adfa3)"
        ]
      }
    ]
  }
}