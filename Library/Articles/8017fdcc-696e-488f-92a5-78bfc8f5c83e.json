{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "8017fdcc-696e-488f-92a5-78bfc8f5c83e"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Global Exception Handlers"
        ],
        "Category": [
          "Error Handling"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Ruby"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- Ruby\r\n\r\n\r\n## What to Do ##\r\n\r\nUse global exception handlers to catch unhandled exceptions, improve application robustness, and minimize the risk of information disclosure.\r\n\r\n\r\n## Why ##\r\n\r\nUnhandled exceptions can be a serious stumbling block to an application's performance and security. Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions.\r\n\r\nImproper handling of exceptions and errors must be addressed by programming techniques so that privileged information is not leaked by revealing specific details about the system.\r\n\r\n\r\n## When ##\r\n\r\nGlobal exception handlers should be included during development. Any application can throw an exception. Global handlers are necessary when the application might produce errors that require consistent response. Also, the framework may send exceptions before the application runs. These types of exceptions can be addressed in development by using a global exception handler.\r\n\r\n\r\n## How ##\r\n\r\nUse the following steps to build a global exception handler that will process Ruby on Rails (RoR) application errors.\r\n\r\n1. **Configure a rack app to handle exceptions.** Configure a rack app in application controller to become your error-handling system, or global exception handler. Add a line to *application.rb* to configure routes app as the `exceptions_app`:\r\n\r\n\t\t# ...\r\n\t\tconfig.exceptions_app = self.routes\r\n\t\t# ...\r\n\r\n2. **Define the error routes.** Route exceptions to a special errors controller. Refer to a complete list of all possible errors. Add lines to *routes.rb* such as the following:\r\n\r\n\t\t# ...\r\n\t\tmatch '/404' => 'errors#global_error', via: :all\r\n\t\tmatch '/406' => 'errors#global_error', via: :all\r\n\t\tmatch '/500' => 'errors#global_error', via: :all\r\n\t\t# ...\r\n\r\n3. **Define a global exception handler.** Write a function which handles all uncaught exceptions. Place this function in the errors controller. The global exception handler `global_error` should accept the exception object as a parameter.\r\n\r\n4. **Log detailed exception information.** Add code to the global exception handler to get as much information as possible from the exception object that is passed as the parameter.\r\n\r\n5. **Show a simple error message.** Do not give away too much information to attackers. Write a simple message that lets the user know that the application has crashed, but the situation is under control. Add code to `global_error` that displays the error message to the global exception handler.\r\n\r\n6. **Clean up and exit gracefully.** Add code, optionally, to the global exception handler to ask the user to send in an error report that describes what they were doing before they received the error report. Exit the handler and return the user to a safe entrance point in the program.\r\n\r\n"
        ]
      }
    ]
  }
}