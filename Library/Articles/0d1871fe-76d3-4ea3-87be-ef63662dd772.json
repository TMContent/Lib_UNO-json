{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "0d1871fe-76d3-4ea3-87be-ef63662dd772"
        ],
        "Id_History": [
          "0d1871fe-76d3-4ea3-87be-ef63662dd772,778c285c-ae1b-4974-b918-28f1fccb89eb,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "A Filter Is Used to Inject X-Frame Options"
        ],
        "Category": [
          "HTTP Headers"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "A Filter Is Used to Inject X-Frame Options"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* HTML5\r\n* Java\r\n\r\n==What to Check For==\r\n\r\nVerify that a filter class is used to inject X-Frame-Options headers into responses.\r\n\r\n==Why==\r\n\r\nThe X-Frame-Options response header instructs the browser to disallow the use of iframes across domains or limit their use to the same origin. This protects against clickjacking, a malicious technique that uses iframes to overlay (hide) a clickable link or button on a web page. In a clickjacking attack, a user thinks he or she is clicking the intended link but actually clicks the overlaid iframe link, thus sending data to an unintended website. \r\n\r\n==When==\r\n\r\nUse this guideline when implementing HTML5 web applications where the web page is not intended for rendering in a frame or iframe.\r\n\r\n==How to Check==\r\n\r\nTo verify that a filter class is used to inject X-Frame-Options headers into responses:\r\n\r\n# **Find Filter classes.** Search the application code for references to the //javax.Servlet.Filter// interface to find Filter classes. Create a spreadsheet to list all Filter classes used by the application.\r\n# **Examine Filter classes.** Examine each Filter class to determine whether it adds the X-Frame-Options header into responses. Review the //doFilter// method of each Filter class to make sure it calls the //addHeader// method with //x-frame-options// as the first parameter.\r\n# **Examine the //web.xml// file.** Review the //web.xml// file to make sure the Filter classes are mentioned in it, as follows: \\ {{{ <filter> }}} \\\\ {{{ <filter-name>XframeOptionFilter</filter-name> }}} \\\\ {{{ <filter-class> }}} \\\\ {{{         com.example.servlet.filters.XframeOptionFilter }}} \\\\ {{{ </filter-class> }}} \\\\ {{{ </filter> }}} \\\\ {{{ <filter-mapping> }}} \\\\ {{{ <filter-name>XframeOptionFilter</filter-name> }}} \\\\ {{{ <url-pattern>/*</url-pattern> }}} \\\\ {{{ </filter-mapping> }}}\r\n\r\n==How to Fix==\r\n\r\nTo use a filter class to inject X-Frame-Options headers into responses:\r\n\r\n# **Create the Filter class.** The name of the Filter class is arbitrary, but it must implement the //javax.Servlet.Filter// interface. The work in the Filter class is in the //doFilter// method. \\\\ {{{    public void doFilter(ServletRequest req, ServletResponse resp,FilterChain chain) throws IOException, ServletException { }}} \\\\ {{{ HttpServletResponse response = (HttpServletResponse) resp; }}} \\\\ {{{ response.addHeader(“x-frame-options”,”DENY”); }}} \\\\ {{{ chain.doFilter(req, resp); }}} \\\\ {{{ } }}}\r\n# **Add the filter to the application web.xml file.** For example, the following snippet is for a filter with the class name XframeOptionFilter: \\\\ {{{ <filter> }}} \\\\ {{{ <filter-name>XframeOptionFilter</filter-name> }}} \\\\ {{{ <filter-class> }}} \\\\ {{{         com.example.servlet.filters.XframeOptionFilter }}} \\\\ {{{ </filter-class> }}} \\\\ {{{ </filter> }}} \\\\ {{{ <filter-mapping> }}} \\\\ {{{ <filter-name>XframeOptionFilter</filter-name> }}} \\\\ {{{ <url-pattern>/*</url-pattern> }}} \\\\ {{{ </filter-mapping> }}}\r\n\r\n\r\n==HTTP Header Guidelines==\r\n\r\n* [[00000000-0000-0000-0000-00000028bb7d|Use X-Content-Security-Policy to Mitigate XSS]]\r\n* [[00000000-0000-0000-0000-0000009026c0|Use X-XSS-Protection to Prevent Reflected XSS]]\r\n* [[00000000-0000-0000-0000-000000204a22|Use X-Frame-Options to Prevent ClickJacking]]\r\n* [[9e0f93ba-0b80-4aab-b93c-c17b9af2a19c|Use a Filter to Inject X-Frame-Options]]\r\n* [[ae2dc4f8-af3d-4002-9417-f3f1d5c9128b|Add X-Frame Options to Responses]]\r\n* [[00000000-0000-0000-0000-00000063561d|Use the Strict-Transport-Security Header to Enforce HTTPS]]\r\n* [[00000000-0000-0000-0000-000000225f24|Use includeSubDomains with Strict-Transport-Security]]\r\n\r\n==HTTP Header Checklist Items==\r\n\r\n* [[00000000-0000-0000-0000-0000006b6766|X-Content-Security-Policy Is Used to Mitigate XSS]]\r\n* [[00000000-0000-0000-0000-0000007122c6|X-XSS-Protection Is Used to Prevent Reflected XSS]]\r\n* [[00000000-0000-0000-0000-000000498810|X-Frame-Options Are Used to Prevent Clickjacking]]\r\n* [[0d1871fe-76d3-4ea3-87be-ef63662dd772|A Filter Is Used to Inject X-Frame Options]]\r\n* [[26caffea-d597-40fd-9ed0-36fb025d188b|X-Frame Options Are Added to Responses]]\r\n* [[00000000-0000-0000-0000-0000001b501f|The Strict-Transport-Security Header is Used to Enforce HTTPS]]\r\n* [[0078cd3f-9e84-4eb4-9a2f-7f51e3100801|IncludeSubDomains is Used with Strict-Transport-Security]]\r\n"
        ]
      }
    ]
  }
}