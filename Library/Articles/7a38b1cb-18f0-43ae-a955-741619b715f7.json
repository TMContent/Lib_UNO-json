{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "7a38b1cb-18f0-43ae-a955-741619b715f7"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Validate XML Data Using Schemas"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Do ##\r\n\r\nEnsure that all XML data is syntactically validated on the server by using an XML schema such as XSD or DTD.\r\n\r\n## Why ##\r\n\r\nAn attacker passing malicious XML input can attempt XML injection attacks that aim to exploit your application by overwriting XML data, disclose information from arbitrary URIs, or cause the XML parser to crash or process slowly. Performing syntactic validation helps reduce these risks by ensuring that the input received matches the expected format. Syntactic validation on its own is not sufficient, as semantic validation is also needed to fully prevent these attacks, but it is an important step for both the security and reliability of your application.\r\n\r\n## When ##\r\n\r\nAll XML data that is created or consumed by an application should follow a strict XML schema. Validate XML against the schema when any XML data is consumed or created.\r\n\r\n## How ##\r\n\r\nXML data can be validated with either an XSD or DTD. XSDs are more flexible and are generally favored over DTDs.\r\n\r\nTo solve using XSD use the following steps:\r\n\r\n1. **Identify all areas where the application generates or consumes XML data.** Enumerate all areas where XML data is generated or parsed in your application.\r\n2. **Define an XSD which describes the XML data.** Examine the XML data and define an XSD which tightly defines the structure of the XML data. An XML Schema can consist of a single file, multiple files, or in-line with the XML. If the XML is being generated dynamically via code, it is likely that an XSD can be outputted as well. Finally, the XSD should tightly constrain the XML data by using element types; for example defining a birthday element and assigning it the xs:date type.\r\n3. **Validate the XML with the XSD.** XML can be validated using the XML parser provided by the platform.\r\n\r\n## Related Pages ##\r\n\r\n* [Data Validation Guide](bf53d602-1d86-489c-858d-f5efb6424412)"
        ]
      }
    ]
  }
}