{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "bcbbe5c7-95c3-468d-9371-6eb42f9b93e6"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Programming Best Practices"
        ],
        "Category": [
          ""
        ],
        "Phase": [
          ""
        ],
        "Technology": [
          ""
        ],
        "Type": [
          ""
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "For the most widely used languages and software, industry leaders and individual users alike have created programming best practices. These best practices exist to help minimize the chance of vulnerabilities or programming errors being pushed into production code. By learning these best practices and implementing them while creating software, you can avoid some of the most commonly found security mistakes. Enter each room below to learn more about the most widely held best practices for each topic covered.\n\n* [[152b5333-9ed8-4853-a3d6-a7ec12294c8e|Separation of Data and Control]] - Data can be an organization’s most valuable asset, but it can also lead to some of the most common attack vectors. Improperly implemented code can leave applications vulnerable to attacks when the software is not insulated from incoming data that can contain exploit triggers. To handle data securely, measures should be implemented that keep code from directly accessing data that may cause security issues. View this room to learn some of the most prevalent and effective ways for keeping commonly used code safe from the data it processes.\n* [[bf53d602-1d86-489c-858d-f5efb6424412|Data Validation]] - Data validation is one of the most important steps in securing any application that receives or transmits data from an external source. By creating software that receives outside input beyond your control, you inherently open up the greatest vector for attacks. View this room to learn the proper techniques for ensuring your code is created to safely accept and transmit data.\n* [[160e0f9c-5371-4c76-98b6-2b9a2ab3e3a7|Logging]] - Logging is a core tenant of server security and can monitor system usage to identify when a potential attack is in progress or help identify if one has taken place. While logs are powerful in their use as a monitoring tool, they can also leak sensitive data if used incorrectly. View this room to learn how a logging system is setup and managed in addition to the proper procedures required to keep them secure.\n* [[02074aaf-37b9-4b87-bd1d-739333bc0d58|Error Handling]] - While modern security and functionality testing allows for applications to ship with a minimal amount of bugs, it is not possible to consider a deployment completely issue free. Issues may be caused through user input or an unexpected use case, but the way in which issues are handled is an important step in securing code. If an error message displays too much information or the error handling process only catches certain issues, this can allow an attacker to more easily gain an understanding of the system’s processes and weaknesses. View this room to learn how errors can be caught, sanitized and processed to better secure your application.\n* [[d28806ca-ca1f-4772-99cb-950d5958c078|Authentication]] - Authentication is often the first line of defense for ensuring that users are only able to access the content appropriate for them. Strong authentication policies protect both the application itself and the users who access it. View this room to learn more about how authentication should be managed and the policies put in place to best keep accounts secure.\n* [[63e9a3a8-cf0e-477b-bbae-96ed26609a02|Authorization]] - Authentication focuses on identifying users and making sure they are allowed to access a given system. Once authenticated, authorization focuses on what information they can view and which areas they are not allowed to access. Strong authorization policies allow users to access content deemed appropriate seamlessly while at the same time preventing them from accessing more privileged or restricted data. Through proper planning and implementation, a system can be created that is both easy to manage and comprehensive in its coverage. View this room to understand how a properly designed authorization system is created and the best rules for maintaining authorization integrity.\n* [[60e358de-01d1-480a-8693-23aec03297e2|Cryptographic Storage]] - Attention is often paid to data when it is in transit, but the safety and sustainability should also be ensured when it is at rest. Storing data with a proper form of encryption provides an extra layer of security even if attackers are able to access the encrypted data. If a data breach does occur, the information will be harder or even impossible to use if it is stored securely. View this room to learn the proper way to store data and ensure its integrity even when it is not being accessed.\n* [[eaaa07bd-ba2a-4376-8afa-a3a84bc30248|Communication Security]] - When sending sensitive information to users or between applications, the security of the communication method should be taken into consideration. Whenever a user enters important information, it should be transported via a secure link such as one using SSL or TLS. This ensures that if the data is intercepted in transit, the third party is not able to view the data contained within. View this room to learn which tools should be used to secure data in transit and the proper steps to ensure integrity.\n* [[3c3400a0-73e2-41ea-9b18-11e816022d03|Filesystem Access]] - When reading or writing files, care should be taken to protect the application from malicious files or path manipulation. If processing information that lives within a file, this must be considered data input and the same verification and restrictions put in place as those on other sources of data. The code should then be checked to ensure that it prevents users from manipulating file paths to supply malicious data from a source it may normally reject. View this room to learn the correct techniques for processing files and the safeties put in place to ensure filesystem access is managed properly.\n* [[929510fc-e85d-4134-9c10-0899cfd472a6|Administrative Controls]] - Most software needs to be managed from a centralized and easy to use administrative panel. Whether this is done through a web interface or local piece of software, these tools are often the heart of an application’s management and invaluable to functionality. This interface should be secured as a security breach that allows attackers to access these controls often give them full reign over every part of the system. View this room to learn how administrative controls are properly secured and which functions should be included to provide proper management of an application. \n* [[3790f471-84c4-415d-9f8d-76824246fdb2|System Hardening]] - Once an application has been created, it should be run through an extensive system hardening process to reduce the attack surface. This should include cleaning up unused code or modules and removing any accounts or features used in the creation process. During the development process, features used for testing or quality assurance may be forgotten and included in the shipped product. By reducing the amount of extraneous code or forgotten features, you can ensure that potential backdoors and exploits are not included in a production environment. View this room to learn to best practices for hardening a server both before and after deployment.\n* [[d28d359d-1073-4270-b205-3dc77c4c949d|(Web) Session Management]] - Session management is a crucial process and can impact both the end user experience and security of an application if done incorrectly. When implementing a session management process, it is important to factor in the security and protocol used to transmit information to and from the user. Improper security precautions can allow for a “Man in the Middle” attack to intercept credentials or account information and steal session data. View this room to learn how to transmit session information securely and the features that should be implemented to protect a user’s session.  \n* [[f0c423ae-50e5-4138-bd6a-50cb570207e8|Memory Management]] - When creating software in a language that has low-level access to memory, memory management is crucial step to securing it from potential attacks. Buffer overflows are one of the most prevalent exploits that can be taken advantage of if memory is not allocated and managed correctly. If an attacker is able to successfully conduct a buffer overflow, they are frequently able to take control of the application. View this room to better understand the best practices that should be adhered to when creating code in a language that has low level access to memory.\n* [[32021e8d-4ab3-4b60-9213-cd0d5c12d5fe|Code Integrity]] - Code integrity is the process of ensuring your code’s quality and protecting it from potential attackers once it has been shipped. Using tools and processes that help obscure your code and protect it from potential reverse engineering can help keep users from gaining a low level view of the application’s inner workings. While security through obscurity is not a bulletproof way to prevent reverse engineering, it does provide an additional layer of protection once the code is out in the wild. View this room to learn the best ways integrity is kept in check once a final product is shipped. \n* [[cb206b88-472f-4bed-b7ee-0a48dfca5309|Concurrency]] - Computers are never likely to be devoted to one application at a time, and often hundreds or even thousands of processes may be running at a given point. Concurrency involves ensuring that your application runs in a way that prevents other applications from interfering with its processes and that it gracefully shares resources. This includes proper management of temporary files and caches, while limiting the use of code that may stop the proper execution pipeline. View this room to better understand the techniques and code that can prevent your applications from interfering with other running processes.\n* [[1bbc222d-0440-4fcf-b67f-331aa351a577|Security Engineering]] - The best time to consider security is not after deployment or a successful exploit, but in the initial design phase of any software. By keeping security in mind throughout the development lifecycle, you significantly decrease the chance of shipping production code that could be vulnerable later in the life of the software. View this room to better understand the practices and policies that should be in place to ensure security is not an afterthought.\n\n== Related Pages ==\n\n* [[5ad388f4-ed2d-4f44-a7d1-3ba87749c921|The Guides Welcome Page]]"
        ]
      }
    ]
  }
}