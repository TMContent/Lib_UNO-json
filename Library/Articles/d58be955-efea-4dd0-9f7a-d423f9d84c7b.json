{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "d58be955-efea-4dd0-9f7a-d423f9d84c7b"
        ],
        "Id_History": [
          "d58be955-efea-4dd0-9f7a-d423f9d84c7b,d04d0744-b1e5-4401-b53a-4d88550e2390,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Improper Filesystem Permissions"
        ],
        "Category": [
          "Deployment Considerations"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Improper Filesystem Permissions"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\r\n\r\nImproper filesystem permissions vulnerabilities occur when the filesystem permissions are not sufficiently restricted, either as a result of the application not setting strict enough permissions or the user/administrator/customer not securing the system sufficiently.\r\n\r\nAll applications are affected by improper filesystem permissions vulnerabilities.\r\n\r\n==Impact==\r\n\r\nThe impact of improper filesystem permissions depends heavily on the specific files that are exposed and the specific application that is vulnerable. \r\n\r\nNative code privileged system applications are the most seriously affected by improper filesystem permissions. For example, if working files of a privileged system application are exposed, an attacker might be able to replace them with malicious data and cause the vulnerable application to execute arbitrary code with superuser privileges.\r\n\r\nWeb applications are usually only affected by improper filesystem permissions if there are additional vulnerabilities in the application. A vulnerability that allows the attacker to upload malicious code might be mitigated by strong filesystem permissions, but if the application has write permissions to web accessible directories, the attacker will be able to upload the malicious code and take over the application.\r\n\r\nImproper filesystem permissions also greatly simplify the task of backdooring a compromised system by creating locations where backdoors might be hidden. For example, if application files are not write-protected, the attacker will be able to replace them with backdoored versions.\r\n\r\nLastly, improper filesystem permissions affect the systems themselves, especially user data. For example, if the system is configured to allow unprivileged users to read the superuser's files, an attacker that has gained access to the system might find authentication credentials, like SSH or RDP keys, stored by the administrator.\r\n\r\n==Countermeasures==\r\n\r\nTo prevent improper filesystem permissions vulnerabilities, harden the server.\r\n\r\n==Application Check==\r\n\r\nTo verify that improper filesystem permissions vulnerabilities are prevented, make sure that the server is hardened.\r\n\r\n==Specific Technologies==\r\n\r\n* [[943fcf2e-ce5b-490d-98b7-6da15c1efc13|ASP.NET Improper Filesystem Permissions]]\r\n* [[f2549cc1-8937-4a41-9ed9-91eeefb10ed2|C++ Improper Filesystem Permissions]]\r\n* [[0a093ac2-c3ed-4fe3-b4a2-f178c3d0ecb6|Java Improper Filesystem Permissions]]\r\n* [[5041b7f7-5cf9-4653-809c-c2ff558ccb1c|PHP Improper Filesystem Permissions]]\r\n\r\n"
        ]
      }
    ]
  }
}