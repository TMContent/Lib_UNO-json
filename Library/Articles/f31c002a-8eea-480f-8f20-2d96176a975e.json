{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "f31c002a-8eea-480f-8f20-2d96176a975e"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Perform Interoperability Testing for Cloud Deployments"
        ],
        "Category": [
          "System Hardening"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          "AWS"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "##Applies To##\r\n\r\n- Amazon Web Services (AWS)\r\n\r\n\r\n##What to Do##\r\n\r\nExamine cloud operations architecture, functions, and requirements for the purpose of testing interoperability of the deployment. Write tests for the interoperability of cloud resources. Identify the various modes of failure, why things fail, to know what functions decrease in performance and what functionality is completely lost when your cloud deployment becomes unavailable. Develop general options and tactics for troubleshooting, backup, restore, or moving to other regions or cloud service provider (CSP).\r\n\r\n\r\n##Why##\r\n\r\nDue to the nature of cloud development, design documentation for your deployment may not be complete, and/or may need improvement to prepare for the result of security incidents. For movement of the deployment to other regions or CSP, it will be important to have knowledge of configuration and additions since the original deployment.\r\n\r\nInteroperability testing helps you determine where failure points are located, as well as the results of loss of function. An additional benefit is that testing may surface application features which may not work as originally designed.\r\n\r\nPerforming interoperability testing will identify configuration information you must know if you move to a different Cloud Service Provider.\r\n\r\n\r\n##When##\r\n\r\nCloud deployment interoperability testing should be performed on a regular basis, to confirm your documentation of the as-built infrastructure. It is best to have this understanding before you need it. If you are faced with moving the deployment to another CSP, or reconstructing the environment in another account, you must understand the limitations of portability and interoperability that could exist in how you have implemented cloud features. The most inopportune time to discover what applications will break would be during a transition of cloud deployments to alternate location.\r\n\r\n\r\n##How##\r\n\r\nUse the following steps to perform interoperability testing for cloud deployments. When completed, you will have a reasonable plan and requirements for moving your deployment to another account or CSP.\r\n\r\n1. **Prepare for interoperability testing.** Review the design architecture document and initiate discussion with the development team. Modify the document to reflect any additions or changes that have been made due to AWS feature changes, mitigation, function adds, etc.\r\n\r\n2. **Select test targets and limitations of testing.** Examine data flow diagrams and highlight the objects which are end points of interoperability. The messages and data are the area of concern, so focus on these for testing. \r\n\r\n3. **Identify functions.** Review the functional requirements management matrix. For each function, determine steps to test for interoperability, function by function.\r\n\r\n4. **Identify failure cause(s).** For each function, review the list of security controls. If a control fails or is breached, what functions will fail?\r\n\r\n5. **Categorize failure effect(s).** For each failure, list the possible causes. These will most likely be a result of a control failing due to an unexpected event or interaction.\r\n\r\n6. **Identify causes of failure.** The cause of test failure for interoperability may not be simple to pinpoint. For example, an application might start out as being interoperable, but as cloud-specific features are added to it, it becomes less interoperable. As your application leverages AWS-specific features, you may need to increase the level of contingency planning, to identify other options.\r\n\r\n7. **Provide alternatives.** Your testing report should conclude with recommendations that answer the following questions. Will the application work in another cloud space? How much effort is required to move to another CSP? Can you deploy the application in your enterprise location? What steps are required to restore as part of disaster recovery?\r\n\r\n\r\n"
        ]
      }
    ]
  }
}