{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "d498b6c2-c007-4094-9a46-f3e06bdf50e7"
        ],
        "Id_History": [
          "d498b6c2-c007-4094-9a46-f3e06bdf50e7,3b5316f6-09b1-4c25-9994-18a44b772b3e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Strong Encryption Keys Are Used"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Strong Encryption Keys Are Used"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==What to Check For==\r\n\r\nVerify that strong encryption keys are used.\r\n\r\n==Why==\r\n\r\nUse strong encryption keys to make your encryption hard to break. The strength of the encryption keys used is one of the major factors determining the overall strength of a cryptographic solution.\r\n\r\n==How to Check==\r\n\r\nTo verify that strong encryption keys are used:\r\n\r\n# **Identify encryption key strength requirements.** The exact encryption key strength requirements are different for different algorithms. Current recommendations are 4096-bit keys for RSA and 256-bit keys for AES. \r\n# **Identify the key generation method.** Review the code used to generate cryptographic keys to identify the key-generation method.\r\n# **Determine whether the key generation method meets the strength requirements.** Review the code used to generate cryptographic keys to make sure that it produces keys of sufficient length. It is also important to use a strong cryptographic pseudo-random number generator (PRNG) and to get a sufficiently large amount of entropy from it whenever random numbers are required by the key generation algorithm(s). Ideally, the amount of entropy (bits) read from the PRNG should match or exceed the length of the key. \r\n# **Verify that key generation functions are used for encryption.** Review the code that performs the encryption to make sure it actually uses generated keys, as opposed to hard-coded keys, for example.\r\n\r\n==How to Fix==\r\n\r\nTo use strong encryption keys:\r\n\r\n# **Identify encryption key strength requirements.** The exact encryption key strength requirements are different for different algorithms. Current recommendations are 4096-bit keys for RSA and 256-bit keys for AES. \r\n# **Determine a key generation method.** The process of generating keys is different for symmetric and asymmetric encryption algorithms. \r\n##Asymmetric algorithms have specific procedures for generating keys, because the public and the private keys have to match. Keys for asymmetric algorithms usually have to be generated using special functions that are bundled together with the asymmetric encryption algorithms. \r\n##Symmetric encryption keys can be generated with a cryptographically strong pseudo-random number generator, or can be derived from pass phrases. If split knowledge of the encryption key is required, it is possible to concatenate two separate pass phrases and then pass them through a sequence of strong cryptographic hash algorithms. When this split knowledge approach is used, both people have to enter their pass phrases separately, and their input is then concatenated and passed through the sequence of cryptohashing functions to produce the encryption key that can be used to encrypt and/or decrypt data. \r\n# **Implement key generation functions.** Write code that implements the key generation method(s) required by the application. It is reasonable to implement pass phrase based key derivation, pseudo-random number generation, and asymmetric key generation, so that all these functions are available if/when the application needs them.\r\n# **Integrate key generation functions into the cryptographic solution.** Encryption keys are themselves sensitive information and have to be handled appropriately. Key generation functionality should be integrated with the key management functionality in a manner that allows the keys to be stored securely immediately after they have been generated. Usually, this means the keys themselves have to be encrypted with another key that has already been generated. The exact key management procedures are different for different applications. One simple approach is to derive a \"master key\" from a pass phrase and then use this \"master key\" to encrypt other keys, which can be entirely random. For applications where split knowledge of the \"master key\" is required, it is possible to derive a key from two separate pass phrases by concatenating these pass phrases and then passing them through a sequence of cryptographic hash functions. \r\n\r\n==Additional Information==\r\n\r\n* For information about generating random numbers for cryptography, see http://tools.ietf.org/html/rfc4086\r\n"
        ]
      }
    ]
  }
}