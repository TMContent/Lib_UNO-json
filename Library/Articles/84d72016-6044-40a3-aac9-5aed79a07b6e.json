{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "84d72016-6044-40a3-aac9-5aed79a07b6e"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Protect Session IDs"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Ruby"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- Ruby\r\n\r\n\r\n## What to Do ##\r\n\r\nProtect the confidentiality of session IDs in the Ruby application by using:\r\n\r\n- Transport Layer Security (TLS) to protect connections\r\n- `Action::Dispatch::Session` class APIs to protect session IDs and safely manage cookies.\r\n\r\n\r\n## Why ##\r\n\r\nSession IDs are used by an application to identify the session associated with a particular user. If an attacker gains access to a session ID they can assume the identity and privileges of the logged-in user. Protecting session IDs can help prevent an attacker from hijacking the session and using the application.\r\n\r\nUsing a TLS encrypted communication channel protects the session against some session fixation attacks where the attacker is able to intercept and manipulate the web traffic to inject (or fix) the session ID on the victims web browser.\r\n\r\nIf the cookie is not protected locally, as might happen with an insecure wireless LAN, the cookie could be sniffed. For this reason the application should always force SSL connections.\r\n\r\nCertifying authorities require session management coding techniques such as flagging session cookies as secure, not exposing session IDs, using time-outs, and rotating sessions IDs after login. Using `Action:Dispatch:Session` API methods enable the application to protect session IDs.\r\n\r\n\r\n##How##\r\n\r\nUse the following steps with Rails 4 to safeguard session IDs:\r\n\r\n1. **Store session IDs in cookies.** The default setting with Rails framework is to store session IDs in cookies with `ActionDispatch::Sessions::CookieStore`.\r\n\r\n2. **Enable TLS.** TLS must be enabled to protect session cookies from eavesdropping attacks. Please refer to the documentation for your web platform for information about enabling and configuring TLS on the web server.\r\n\r\n3. **Provide a secure connection over TLS.** Always force TLS connections in your application environment. Add code to *config/application.rb* file as follows:\r\n\r\n\t\tclass Application < Rails::Application\r\n\t\t  # ...\r\n\t\t  config.force_ssl = true\r\n\t\t  # ...\r\n\r\n4. **Set the secure flag on session cookies.** Cookies are automatically marked as secure, and the session ID will only be exchanged through encrypted channels.\r\n\r\n5. **Set the `HTTPOnly` flag on session cookies.** Configure the session cookie `HTTPOnly` setting like this:\r\n\r\n\t\tcookies[:user_id] = { :value => \"user\", :httponly => true }\r\n\r\n6. **Do not disclose session IDs.** Make sure that session IDs are not disclosed in URLs, logs, or error messages. Do not allow URL rewriting of session cookies.\r\n\r\n\r\n"
        ]
      }
    ]
  }
}