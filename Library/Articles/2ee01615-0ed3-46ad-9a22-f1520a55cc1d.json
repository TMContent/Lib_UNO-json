{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "2ee01615-0ed3-46ad-9a22-f1520a55cc1d"
        ],
        "Id_History": [
          "2ee01615-0ed3-46ad-9a22-f1520a55cc1d,e6cf0bd6-274a-4835-bb38-ebb3398ef2e6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Use After Free"
        ],
        "Category": [
          "Memory Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Use After Free"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description=\nUse after free vulnerabilities occur when code attempts to use memory that has already been freed. Use after free vulnerabilities can be exploited to crash the application or to execute arbitrary code under certain circumstances. Different methods are available to the attacker for arbitrary code execution based on application specific conditions, such as whether the attacker can manipulate VFTable entries or reallocate freed memory. \n\nUse after free vulnerabilities affect applications written in native code.\n\n=Impact=\nThe impact of use after free vulnerabilities is usually Denial of Service as a result of the application crashing, and sometimes arbitrary code execution as well. One common double-free code execution attack vector targets web browsers or plug-ins. In this scenario, the attacker places exploit code on a web page. When the victim user visits the web page, the exploit is processed by the browser or by one of the installed plug-ins. The exploit code uses the vulnerability to download and execute malicious software, adding the victim user's system to the attacker's botnet. \n\nAnother attack vector is remote server-side exploitation, where the exploit is executed against a remote vulnerable network service with the goal of gaining access to the server. In the remote server-side scenario, the shell-code will usually actually spawn a shell and bind it on a port for the attacker to connect to. Binding a shell on a port means opening a network port and sending data from it directly to a command-line shell, making it easy for the attacker to send commands to execute on the compromised system. The output from the shell is piped back to the port, so the attacker gets interactive command-line access to the compromised system. The privileges of the spawned shell are those of the compromised application.\n\n=Countermeasures=\nTo prevent use after free vulnerabilities, write code in a way that guarantees that pointers are not used after the memory that they point to has been deallocated.\n\n* [[b8b0d075-5aa2-4095-a441-210f38fc3b3e|Don't Access Unallocated Memory]]\n\n=Application Check=\nTo check for adequate protection against use after free vulnerabilities, verify that code is written in a way that guarantees that pointers are not used after the memory that they point to has been deallocated.\n\n* [[b6152bf7-294d-448b-9af0-149b2c994980|Unallocated Memory Is Not Accessed]]\n\n=Computer Based Training Links=\n\nUse the following Computer Based Training courses for more background information about this type of vulnerabilities.\n\n==Creating Secure Code – C/C++ Foundations==\n\nThis course will provide an overview of the threat modeling process and describe the ways to collect information for your application, build the activity-matrix and threat profile, and analyze risks.  It will also teach you the nine defensive coding principles and how to use these principles to prevent common security vulnerabilities.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127613|COD 212 Creating Secure Code – C/C++ Foundations]]\n\n==Creating Secure C/C++ Code==\n\nIn this course, you will learn to detect common coding errors that lead to vulnerabilities. You will learn to effectively remediate the most common security vulnerabilities, and use the right tools to secure your code and detect security vulnerabilities early in the project lifestyle.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127609|COD 312 Creating Secure C/C++ Code]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//"
        ]
      }
    ]
  }
}