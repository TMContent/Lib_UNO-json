{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "34fdc769-2284-4ceb-83c8-69b276c3ae16"
        ],
        "Id_History": [
          "34fdc769-2284-4ceb-83c8-69b276c3ae16,75849cd0-6ca6-401d-9a7e-5ea23c171fdf,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "Store Uploaded Files Outside of Web Root"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Store Uploaded Files Outside of Web Root"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* ASP.NET\n\n==What to Do==\n\nStore uploaded files in a location that is not web accessible.\n\n==Why==\n\nStoring uploaded files in a location that is not web accessible prevents shell upload vulnerabilities. Even if an attacker manages to upload a malicious script, they won't be able to execute it if the malicious script is stored in a location that is not accessible from the web.\n\n==How==\n\nTo store uploaded files in a location that is not web accessible:\n\n# **Find all code used to upload files.** Search your application for code that is used to upload files. Make a spreadsheet that enumerates all this code. \n# **Determine where to store uploaded files.** It's possible to store uploaded files in a folder outside of the web root or in a database.\n## Storing uploaded files outside the web root is a strong and easy to implement measure. However, it makes installing the application on a large amount of servers slightly more difficult, because the servers then need to be configured to allow storing files outside of the web root by creating a folder to store the uploaded files and granting the web server permissions to write to that folder. This additional configuration work is why many commercial applications store uploaded files in a web accessible location, and subsequently suffer from shell upload vulnerabilities. \n## Another mitigation method is to store uploaded files in a database. Files stored in a database cannot be accessed directly via HTTP requests, so even if an attacker is able to upload a shell, they won't be able to access it. If the application is already using a database, there is no additional end-user configuration required. However, this method is harder to code, and there is some maintenance overhead because the database and backups might become quite large. \n# **Change code to store uploaded files outside web root.** Change each piece of code that is used to handle uploaded files so that the uploaded files are stored in the chosen location that is not accessible from the web.\n"
        ]
      }
    ]
  }
}