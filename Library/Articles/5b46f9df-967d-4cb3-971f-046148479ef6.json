{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "5b46f9df-967d-4cb3-971f-046148479ef6"
        ],
        "Id_History": [
          "5b46f9df-967d-4cb3-971f-046148479ef6,6e54d782-eedc-440b-b011-cb85685299d0,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "Centralize Logging"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Web Application"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Centralize Logging"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* Web Applications\r\n* Server-side\r\n\r\n==What to Do==\r\n\r\nWrite a dedicated logging library or class and use it whenever log entries have to be generated.\r\n\r\n==Why==\r\n\r\nA centralized logging subsystem is simpler to maintain and implement correctly.\r\n\r\n==When==\r\n\r\nUse this guideline when writing an application that generates log entries.\r\n\r\n==How==\r\n\r\nPerform the following actions to centralize logging: \r\n\r\n# **Identify existing logging functionality.** Examine the application architecture to identify logging facilities, such as the logging API and where audit trails are actually stored. Make a list of APIs used to log events, document how to use them, and where they store logs.\r\n# **Design the logging subsystem.** Design and implement a class or library specifically for logging. When designing the logging subsystem, consider sending logs to a remote log server. Consider the following factors when designing the logging subsystem:\r\n## Log throttling\r\n## Logging important event details for both successful and failed operations\r\n## Logging important security operations\r\n## Logging important business operations\r\n## Monitoring the use of privileged accounts\r\n## Logging user management events\r\n## Avoiding including sensitive information in logs\r\n## Logging unusual activity\r\n## Sending logs to a centralized server\r\n# **Implement the logging subsystem.** Write code that generates log entries according to your design. \r\n# **Use the logging subsystem.** Use the logging class or library whenever logs are generated. If earlier code exists that generates log entries, replace it with calls to the new logging subsystem API."
        ]
      }
    ]
  }
}