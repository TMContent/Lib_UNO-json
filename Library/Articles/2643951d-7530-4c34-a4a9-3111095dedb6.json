{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "2643951d-7530-4c34-a4a9-3111095dedb6"
        ],
        "Id_History": [
          "2643951d-7530-4c34-a4a9-3111095dedb6,ffb2e0b1-fd58-4955-916f-dc28f553103b,"
        ],
        "Library_Id": [
          "d9c2b53f-5b05-4152-be72-e79d72854707"
        ],
        "Title": [
          "Strong Passwords Are Enforced"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Strong Passwords Are Enforced"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies To</h1>\n  <p>Scala and Play Framework 2.1.0+<br /></p>\n  <h1>What to Check For</h1>\n  <p>Ensure that your application enforces strong passwords.</p>\n  <h1>Why</h1>\n  <p>Enforcing strong passwords minimizes the risk of a&nbsp;Credentials Dictionary Attack&nbsp;or guessing another user's password.</p>\n  <h1>How to Check</h1>\n  <p>To ensure that your application enforces strong passwords:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify password management routines.&nbsp;</strong>Locate all routines inside your application that are responsible for managing user passwords. Potential areas to examine within your application include:</p>\n      <ul>\n        <li>Modifying accounts</li>\n        <li>Creating new users</li>\n        <li>Changing passwords</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Review your application's password policy.&nbsp;</strong>Verify that your application provides a password policy. Ensure that the password policy addresses the following considerations that define a strong password:</p>\n      <ul>\n        <li>\n          <strong>Length</strong>: The policy provides length requirements for passwords. For example, require that a password must be at least 10 characters long.</li>\n        <li>\n          <strong>Input Set</strong>: The policy provides requirements regarding the input set of passwords. For instance, a password must contain letters, numbers and special characters. If your organization has special restrictions for passwords,&nbsp;verify that&nbsp;the policy adopts these requirements. For example, require that a password must not match the user's&nbsp;six previous passwords.</li>\n        <li>\n          <strong>Expiration</strong>: The policy provides requirements for a password's lifetime. For example, require that a password will expire after 45 days.&nbsp;</li>\n        <li>\n          <strong>Extra Requirements</strong>:&nbsp;Enumerate&nbsp;extra policy requirements for passwords, such as&nbsp;a password must not be trivial and easily guessed.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that the password policy is enforced.&nbsp;</strong>Ensure that your application has implemented the password policy. Verify that all password management routines execute your application's implementation of the password policy before executing their own functionality. Example:</p>\n      <pre>def addUser(username:String,pass:String ) = Action{ implicit request =&gt;      \n      // Check if user exists in the user database\n      // The application verifies that the given\n      // password meets the password requirements\n      if (!goodPassword(pass))\n      {\n            String errMsg = \"User's password does not meet\"\n                           + \" the password requirements\";\n            Ok(html.message.main(errMsg))\n      }\n\n      // Add user to the application's user database\n      ...\n}\n\n\n  def goodPassword(pass:String ) = Action{ implicit request =&gt;  \n{\n      boolean alpha = false;\n      boolean num = false;\n      boolean sp = false;\n\n      if (pass.length &lt; 10)\n      {\n            return false;\n      }\n\n      for (int i = 0; i &lt; pass.length; i++)\n      {\n            if (!alpha && Character.isLetter(pass[i]))\n            {\n                  alpha = true;\n            }\n\n            if (!num && Character.isDigit(pass[i]))\n            {\n                  num = true;\n            }\n\n            if (!sp && (pass[i] == '!' ||\n                  pass[i] == '@' || pass[i] == '#' ||\n                  pass[i] == '$' || pass[i] == '%' ||\n                  pass[i] == '^'))\n            {\n                  sp = true;\n            }\n      }\n\n      return (alpha & num) & sp;\n}</pre>\n    </li>\n  </ol>\n  <p>\n    <strong>Note:</strong>&nbsp;PCI DSS requirements state that passwords should be at least seven characters long, have both letters and numbers and&nbsp;should expire after no more than 90 days.</p>\n  <h1>How to Fix</h1>\n  <p />\n  <p>What constitutes a strong password varies from organization to organization. However, there are minimum requirements for length and input character sets. Minimum requirements for a strong password are:</p>\n  <ul>\n    <li>The password must be at least 10 characters long.</li>\n    <li>It must contain letters, numbers, and special characters.</li>\n  </ul>\n  <p>The following steps are required for enforcing strong passwords:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Define password requirements.&nbsp;</strong>Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).</p>\n    </li>\n    <li>\n      <strong>Enforce password requirements.&nbsp;</strong>The password requirements should be enforced while creating and modifying accounts.</li>\n    <li>\n      <p>\n        <strong>Enforce password lifetime.&nbsp;</strong>Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords.&nbsp;</p>\n    </li>\n  </ol>\n  <p />"
        ]
      }
    ]
  }
}