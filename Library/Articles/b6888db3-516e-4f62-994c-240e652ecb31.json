{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "b6888db3-516e-4f62-994c-240e652ecb31"
        ],
        "Id_History": [
          "b6888db3-516e-4f62-994c-240e652ecb31,86194310-3e51-4f3d-b6de-e231d91a45f5,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Insufficient Authorization"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Insufficient Authorization"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nInsufficient authorization vulnerabilities occur when the application allows a user to perform an action without checking if the user has sufficient privileges to carry it out. This allows attackers to carry out actions that the designers of the application did not intend for them to be able to do. For example, if privileges are not checked properly, an attacker with an unprivileged account might be able to upload files to the server, even if the application should not allow that by design.\n\nAll applications are affected by insufficient authorization vulnerabilities.\n\n\n==Impact==\n\nThe impact of an insufficient authorization vulnerability depends on the action that the attacker is able to perform. Essentially, the attacker will be able to do whatever the application does not prevent them from doing. The attacker will usually attempt  to take full control of the application by injecting malicious code into the application code or data, or by taking over user accounts.\n\nOne of the most common and serious types of insufficient authorization vulnerabilities is when an application allows unauthorized users to upload arbitrary files. In this scenario, an attacker is able to upload malicious code to the server and execute arbitrary code on the server with the privileges of the affected application. This compromises all application data, and results in the ability to abuse the application to attack its users, and use the server as a part of a botnet.\n\nAnother common type of insufficient authorization vulnerability is when the application fails to sufficiently protect account management functions. This allows an attacker to change account details, take over accounts, and do anything that the compromised accounts can do.\n\nA less serious example of insufficient authorization is when valuable data can be accessed by underprivileged users. For example, an unauthenticated attacker might be able to download sensitive documents from a corporate server, or a person might be able to download music from a commercial site without paying. \n\nOther types of insufficient authorization vulnerabilities exist. They tend to be specific to the particular applications and operations that are not sufficiently protected by authorization controls.\n\n\n==Countermeasures==\n\nTo prevent insufficient authorization vulnerabilities, check access control permissions before performing any sensitive operations and use role-based authorization.\n\n* [[8eba2142-4a6e-4f2c-9648-3ba1cadf9621|Force Reauthentication for Sensitive Operations]]\n\n* [[f4c94908-7129-4f4c-bc23-917e7c029e2e|Use Role-based Authorization]]\n\n\n==Application Check==\n\nTo make sure that insufficient authorization vulnerabilities are prevented, verify that access control permissions are checked for all sensitive operations and that role-based authorization is used.\n\n* [[0c6a261a-14e8-4c36-838d-17b4a8b6532c|Reauthentication Is Required for Sensitive Operations]]\n\n* [[dae3b6ec-9ef1-4f5b-9aae-1604d9c7e1cc|Role-based Authorization Is Used]]\n\n\n==Computer Based Training Links==\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n===OWASP Top Threats & Mitigations===\n\nThis course examines in depth the vulnerabilities, threats, and mitigations described in the OWASP Top 10 2013. Upon completion of this class, participants will be able to identify and mitigate the greatest threats that web application developers face, including: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References, Security Misconfiguration, Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery (CSRF), Using Components with Known Vulnerabilities, and Unvalidated Redirects and Forwards.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/139631|DES 221 OWASP Top Threats & Mitigations]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//"
        ]
      }
    ]
  }
}