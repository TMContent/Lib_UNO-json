{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "168741c0-e42b-44af-9e22-30d5388c6b43"
        ],
        "Id_History": [
          "168741c0-e42b-44af-9e22-30d5388c6b43,9cd2c0ee-370d-4181-bfff-3b0b3ffc233e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Uninitialized Variable"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Uninitialized Variable"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description=\n\nAn uninitialized variable is technically not a vulnerability in itself, but might result in unintended program behavior. The danger of uninitialized variables is that they might be used by code as if they are intended to hold their default value. The most likely outcome is that the application won't work correctly and, in some cases, it might crash. \n\nThe uninitialized variable issue affects all applications.\n\n=Impact=\n\nThe impact of uninitialized variables is that the application won't work properly. The bugs introduced by not initializing variables usually are obvious in terms of user experience but have no security implications. In some extremely rare circumstances uninitialized variables might lead to other types of vulnerabilities. In practice, uninitialized variables are not something that attackers look for and are not in themselves exploitable. It is, however, considered good programming practice to always initialize variables before using them.\n\n=Countermeasures=\n\nTo prevent uninitialized variable vulnerabilities, initialize variables before using them.\n\n=Application Check=\n\nTo check for adequate protection against this vulnerability, ensure that variables are initialized before being used.\n\n=Specific Technologies=\n\n* [[d87dc143-4a28-43ac-a439-93226c7fb514|C++ Uninitialized Variable]]"
        ]
      }
    ]
  }
}