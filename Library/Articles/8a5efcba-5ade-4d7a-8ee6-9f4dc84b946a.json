{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "8a5efcba-5ade-4d7a-8ee6-9f4dc84b946a"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Authentication Credential Repositories Are Integrated"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Check For ##\r\n\r\nVerify that authentication credential repositories are integrated.\r\n\r\n## Why ##\r\n\r\nReducing the number of authentication repositories simplifies the secure management of access accounts. With a centralized Lightweight Directory Access Protocol (LDAP) repository, for example, you enforce one username/password for internal and external application access across the organization. With centralized directory services and single account location, you can apply security policy more consistently. Disabling access and restricting user permissions can be performed rapidly if there is no need to make multiple changes in separate directory services location.\r\n\r\nIf users are required to create multiple accounts for use with separate web and internal applications, the attack surface increases. It becomes possible for users to exceed the central policy level of authorized access for their role.\r\n\r\n\r\n## When ##\r\n\r\nIntegrate authentication credential repositories in these situations:\r\n\r\n1. Leverage existing directory services (for example, LDAP installation)\r\n\r\n2. Allow users to log into all applications using one set of credentials\r\n\r\n3. Manage users in a unified console.\r\n\r\n\r\n## How to Check ##\r\n\r\nTo verify that authentication credential repositories are integrated:\r\n\r\n1. **Identify location of repositories.** Determine if existing credential repositories can be used for authentication with your application.\r\n\r\n2. **Determine the type of repository.** Identify the type of existing credential repositories. If multiple directories are in use, determine the login priority.\r\n\r\n3. **Examine application's authentication code.** Review the application's authentication code to verify that the application uses a centralized authentication credential repository, such as the company's LDAP system, instead of a local one.\r\n\r\n## How to Fix ##\r\n\r\nUse the following steps for integrated authentication with existing repositories:\r\n\r\n1. **Identify location of repositories.** Determine if existing credential repositories can be used for authentication with your application.\r\n\r\n2. **Determine the type of repository.** Identify the type of existing credential repositories. If multiple directories are in use, determine the login priority.\r\n\r\n3. **Identify network topography requirements.** Plan for access through protected network nodes by examining rules and policies that will require modification.\r\n\r\n4. **Establish connectivity to repository.** Modify configuration of network routing and protective devices to allow communications between your application and directory services.\r\n\r\n5. **Add code to application.** Code your application to integrate authentication with existing repositories. Specifics will depend on your development environment, including APIs and SDK libraries.\r\n\r\n\r\n\r\n"
        ]
      }
    ]
  }
}