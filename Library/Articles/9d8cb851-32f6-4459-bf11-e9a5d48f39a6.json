{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "9d8cb851-32f6-4459-bf11-e9a5d48f39a6"
        ],
        "Id_History": [
          "9d8cb851-32f6-4459-bf11-e9a5d48f39a6,ae809a14-d985-440a-a572-8ad8bb2e3960,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "Authentication Controls Are Centralized"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Web Application"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Authentication Controls Are Centralized"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* Web Applications\r\n\r\n==What to Check For==\r\n\r\nVerify that authentication controls are centralized.\r\n\r\n==Why==\r\n\r\nImplementing a single set of centralized authentication controls helps implement them correctly, use them correctly in the application, and manage them later on.\r\n\r\n==How to Check==\r\n\r\nTo verify that authentication controls are centralized:\r\n\r\n# **Identify application requirements.** Consider the following aspects of authentication controls:\r\n## Authentication should be required for all private pages.\r\n## All password fields should be masked.\r\n## Accounts should be locked after multiple failed authentication attempts.\r\n## Authentication should be implemented on the server-side.\r\n## Authentication controls should be centralized.\r\n## Authentication controls should fail securely.\r\n## Strong authentication credentials (passwords) should be enforced.\r\n## Account management functions should be protected.\r\n## User credential (password) changing functions should be protected.\r\n## Re-authentication should be required for sensitive operations.\r\n## Authentication credentials (passwords) should expire.\r\n## Authentication events should be logged.\r\n## Authentication attempts should be throttled.\r\n## Passwords should be hashed and salted.\r\n## Authentication credentials (connection strings) for external resources should be protected.\r\n## Authentication with external services.\r\n# **Identify authentication controls.** Find code that provides authentication controls used by the application. A good place to start looking is by looking at the code that handles the login functionality.\r\n# **Verify that authentication controls are centralized.** Examine the code that provides authentication controls. Make sure that authentication controls are centralized and satisfy application requirements.\r\n\r\n==How to Fix==\r\n\r\nTo centralize authentication controls:\r\n\r\n# **Identify application requirements.** Consider the following aspects of authentication controls:\r\n## Authentication should be required for all private pages.\r\n## All password fields should be masked.\r\n## Accounts should be locked after multiple failed authentication attempts.\r\n## Authentication should be implemented on the server-side.\r\n## Authentication controls should be centralized.\r\n## Authentication controls should fail securely.\r\n## Strong authentication credentials (passwords) should be enforced.\r\n## Account management functions should be protected.\r\n## User credential (password) changing functions should be protected.\r\n## Re-authentication should be required for sensitive operations.\r\n## Authentication credentials (passwords) should expire.\r\n## Authentication events should be logged.\r\n## Authentication attempts should be throttled.\r\n## Passwords should be hashed and salted.\r\n## Authentication credentials (connection strings) for external resources should be protected.\r\n## Authentication with external services.\r\n# **Define authentication control APIs.** Make the exposed APIs simple to use for developers. Define authentication APIs to satisfy all application requirements. Include functionality to authenticate with external services.\r\n# **Implement and document authentication controls.** Implement and document authentication APIs to satisfy all application requirements. \r\n# **Use authentication controls in the application.** Developers should use the centralized authentication controls whenever authentication is necessary.\r\n"
        ]
      }
    ]
  }
}