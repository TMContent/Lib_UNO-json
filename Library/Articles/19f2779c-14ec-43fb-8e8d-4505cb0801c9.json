{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "19f2779c-14ec-43fb-8e8d-4505cb0801c9"
        ],
        "Id_History": [
          "19f2779c-14ec-43fb-8e8d-4505cb0801c9,fc26c955-5914-4baa-a35c-dfcd37b03d78,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Scala Include Unique Tokens in HTTP Requests"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Include Unique Tokens in HTTP Requests"
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Scala and Play Framework 2.1.0+\r\n\r\n\r\n## Summary ##\r\n\r\nInclude unique tokens in HTTP requests when performing sensitive operations to prevent Cross-Site Request Forgery (CSRF). Unique tokens in HTTP requests help prevent CSRF attacks. An attacker who does not have the unique token will not be able to successfully form a URL that can carry out a malicious action on the behalf of an authenticated user. \r\n\r\n\r\n## Solution Example ##\r\n\r\nTo include unique tokens in HTTP requests:\r\n\r\n1. **Identify sensitive operations.** Review application design and code to identify all operations that require authorization.\r\n\r\n2. **Identify code that performs sensitive operations.** Identify all pages that are involved in performing sensitive operations. This includes both the pages that link to sensitive operations and the code that actually carries out the sensitive operations.\r\n\r\n3. **Choose a method for generating unique tokens.** There are different ways to generate unique tokens. In Play Framework, use a Play 2 Authenticity token for this purpose.  Every form post will contain a hidden parameter containing a UUID. The UUID is signed and its signature is stored in the session. When the user submits the form, it includes the UUID and the signature. The validation passes if the signatures match: session.sign=uuid.sign. An attacker who does not have the token cannot generate the correct signature. This protects the application from a CSRF attack.\r\n\r\n4. **Add unique tokens to HTTP requests.** Add code that sends the generated unique tokens in HTTP requests to the pages that link to sensitive operations. Adding the authenticity token is trivial: For every form, add @authenticityToken() inside the form elements. For example:\r\n\r\n\t~~~~\r\n\t@import _root_.views.html.authtoken.authenticityToken\r\n\r\n\t<form action=\"@routes.Application.process()\" method=\"post\">\r\n\t   @authenticityToken()\r\n\t   Please input your name\r\n\t   <input name=\"name\" />\r\n\t   <input type=\"submit\"/>\r\n\t</form>\r\n\t~~~~\r\n\r\n5. **Add token-validation code.** On the pages that carry out sensitive operations, add code that checks if the tokens sent in HTTP requests are valid or not. To validate the token, use the @AuthenticityToken Play validator. For example:\r\nimport authtoken.validator.AuthenticityToken;\r\n\r\n\t~~~~\r\n\tpublic class FormData {\r\n\r\n\t\t@AuthenticityToken\r\n\t\tpublic String authtoken;\r\n\r\n\t\tpublic String name;\r\n\t}\r\n\r\n\tpublic static Result process() {\r\n\r\n\t\tForm form = form(FormData.class).bindFromRequest();\r\n\r\n\t\tif (form.hasErrors()) {\r\n\t\t\treturn badRequest(\"authenticity validation FAILED\");\r\n\t\t} else {\r\n\t\t\treturn ok(\"authenticity validation PASSED\");\r\n\t\t}\r\n\t}\r\n\t~~~~\r\n"
        ]
      }
    ]
  }
}