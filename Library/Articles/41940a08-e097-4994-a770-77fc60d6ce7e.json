{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "41940a08-e097-4994-a770-77fc60d6ce7e"
        ],
        "Id_History": [
          "41940a08-e097-4994-a770-77fc60d6ce7e,ac8cab6e-3d68-49fb-a1d0-5b66efbd78ed,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Content Spoofing"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Content Spoofing"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nContent spoofing vulnerabilities occur when the application can be manipulated to display malicious content injected by the attacker. This is a very broad vulnerability class that can have multiple causes. Cross-site scripting (XSS) vulnerabilities can result in content spoofing, and cross-site scripting is itself a broad vulnerability class. Content spoofing can also result from poor authentication controls that allow the attacker to substitute application data with malicious data. \n\nIt is not necessary for the attacker to compromise the application â€“ content spoofing is in the eye of the beholder; so long as the user sees the attacker's content and thinks it is coming from the application, content spoofing is taking place. \n\nContent spoofing can be caused by many different mistakes, many of them outside the control of application developers. For example, a DNS hijack of a hostname that is used by an application can be used to redirect users to a spoof site. \n\nContent spoofing overlaps with cross-site scripting where malicious data is injected in HTML contexts, but content spoofing is broader because it also  includes injecting content that is not interpreted as script by the client.\n\nAll applications are potentially affected by content spoofing vulnerabilities.\n\n==Impact==\n\nThe impact from content spoofing vulnerabilities affects the users of the application and ranges from being a nuisance to full system compromise. Nuisance results from defacing of legitimate content with an attacker's content of choice, which might include profanity or some other form of obscenity. Full system compromise results if the spoofed content includes malicious script that exploits additional vulnerabilities on the client system, such as holes in the client's web browser or web browser plug-ins. Upon compromising the client system, the attacker will typically also compromise the user's credentials for the application and gain a foothold in the application. \n\nContent spoofing might also be used to perform cross-site scripting (XSS) attacks, in which case the impact is the same as for regular cross-site scripting vulnerabilities. Cross-site scripting allows the attacker to perform actions on the behalf of the user within the application. If an administrative user views the malicious script, administrative actions can be performed by the script, potentially resulting in the compromise of the application. \n\n==Countermeasures==\n\nTo prevent content spoofing vulnerabilities, validate all input, encode all untrusted data that will be displayed, and use TLS.\n\n* [[c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52|Use Positive Input Validation]]\n* [[00000000-0000-0000-0000-0000000960a4|Encode Input Included in Output]]\n* [[34c8d5b4-430d-4112-802b-f8c5fb786cfe|Use TLS]]\n\n==Application Check==\n\nTo make sure that content spoofing vulnerabilities are prevented, verify that all input is validated, all untrusted data that will be displayed is encoded, and TLS is used.\n\n* [[d4129497-3a66-44d1-881e-e6f004af2e0d|Positive Input Validation Is Used]]\n* [[00000000-0000-0000-0000-0000008a4b8e|Input Included in Output Is Encoded]]\n* [[3b1eb7f0-76cd-4e4f-8653-8a6a6a32d1c9|TLS Is Enabled]]\n\n==Additional Resources==\n\n* For more information about content spoofing, see http://projects.webappsec.org/w/page/13246917/Content%20Spoofing\n"
        ]
      }
    ]
  }
}