{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "6d74a22d-31d2-4584-9d93-85687ea4a637"
        ],
        "Id_History": [
          "6d74a22d-31d2-4584-9d93-85687ea4a637,174834f9-652b-47c9-bf9f-a4807143d955,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Scala Enforce Strong Passwords"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Enforce Strong Passwords"
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Scala and Play Framework 2.1.0+\r\n\r\n\r\n## Summary ##\r\n\r\nEnforce the use of strong passwords. Enforcing strong passwords minimizes the risk of a Credentials Dictionary Attack or guessing another user's password.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code creates a new user to the application. It stores the username and password into the credential repository. Unfortunately, the password is not being verified against a password policy.\r\n\r\n~~~~\r\n  def addUser(username:String,pass:String ) = Action{ implicit request =>\r\n    // Check if user exists in the user database\r\n      // The application fails to check that the\r\n      // given password meets the password policy\r\n      // Add user to the application's user database\r\n\r\n  }\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code adds a new user to the application. Before it stores the user's credentials into the repository, it verifies that the password meets the application's password requirements.\r\n\r\n~~~~    \r\n  def addUser(username:String,pass:String ) = Action{ implicit request =>      \r\n      // Check if user exists in the user database\r\n      // The application verifies that the given\r\n      // password meets the password requirements\r\n      if (!goodPassword(pass))\r\n      {\r\n            String errMsg = \"User's password does not meet\"\r\n                           + \" the password requirements\";\r\n            Ok(html.message.main(errMsg))\r\n      }\r\n\r\n      // Add user to the application's user database\r\n      ...\r\n}\r\n\r\n\r\n  def goodPassword(pass:String ) = Action{ implicit request =>  \r\n{\r\n      boolean alpha = false;\r\n      boolean num = false;\r\n      boolean sp = false;\r\n\r\n      if (pass.length \r\n      {\r\n            return false;\r\n      }\r\n\r\n      for (int i = 0; i \r\n      {\r\n            if (!alpha && Character.isLetter(pass[i]))\r\n            {\r\n                  alpha = true;\r\n            }\r\n\r\n            if (!num && Character.isDigit(pass[i]))\r\n            {\r\n                  num = true;\r\n            }\r\n\r\n            if (!sp && (pass[i] == '!' ||\r\n                  pass[i] == '@' || pass[i] == '#' ||\r\n                  pass[i] == '$' || pass[i] == '%' ||\r\n                  pass[i] == '^'))\r\n            {\r\n                  sp = true;\r\n            }\r\n      }\r\n\r\n      return (alpha & num) & sp;\r\n}\r\n\r\n~~~~"
        ]
      }
    ]
  }
}