{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "fde877ec-f539-4ce4-8cd3-d3b7da1e1ecb"
        ],
        "Id_History": [
          "fde877ec-f539-4ce4-8cd3-d3b7da1e1ecb,7f63f961-2551-43c5-b141-84cb1c1e235b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Authentication And Authorization Are Required for All Sensitive Pages"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Authentication And Authorization Are Required for All Sensitive Pages"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <p />Scala and Play Framework 2.1.0+<p /><h1>What to Check For</h1><p>Verify that authentication and authorization are required for all sensitive pages.</p><h1>Why</h1><p>All pages that have private information should require authentication and authorization to prevent unauthorized information disclosure. Use role-based authorization policies because they are relatively simple to manage correctly.</p><h1>How to Check</h1><p>To verify that authentication and authorization are required for all sensitive pages:</p><ol><li><p><strong>Identify all sensitive pages.</strong> Make a list of all pages that handle sensitive or private information.</p></li><li><p><strong>Verify that all sensitive pages require authentication.</strong> Visit each sensitive page with a web browser to make sure it requires authentication.</p></li><li><p><strong>Verify that all sensitive pages require authorization.</strong> Make a list of all available roles for testing role-based authorization. Visit each sensitive page authenticated as a member of each role to verify that authorization is implemented correctly.</p></li><li><p><strong>(Optional) Verify that authentication and authorization are implemented on the server correctly.</strong> The goal of this checklist is to verify that all sensitive pages are covered by authentication and authorization controls. If additional assurance is required, it may be helpful to review the application in depth. To do so: identify authentication and authorization libraries being used, verify that the web application server is configured correctly for the chosen authentication and authorization methods and that all sensitive pages are covered, review each sensitive page to make sure authentication and authorization features are used correctly, and review code used by each sensitive page to make sure that it uses authentication and authorization correctly. These tasks may be quite time consuming and may not be necessary to verify that all sensitive pages are protected by the authentication and authorization controls.</p></li></ol><h1>How to Fix</h1><p>To require authentication and authorization for all sensitive pages:</p><ol><li><p><strong>Identify all sensitive pages.</strong> Make a list of all pages that handle sensitive or private information.</p></li><li><p><strong>Define roles.</strong> Define access roles for your application. These roles should include administrative users and various types of users specific to your application.</p></li><li><p><strong>Implement authentication and role-based access control.</strong> <strong> </strong>In Play framework 2.1.0+, you can use<a href=\"https://github.com/schaloner/deadbolt-2\"> DeadBolt-2</a> as an authorization system that defines the access rights to certain controller methods or parts of a view. You can use <a href=\"https://github.com/jaliss/securesocial\">SecureSocial</a> to verify the authorization of the logged in user to access the restricted section/URL of the website. </p><p>Make sure that the user is authorized to access the page before granting them access. When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user), and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party. For this, make use of an Access Control Library such as <a href=\"https://www.owasp.org/index.php/ESAPI_Access_Control\">OWASP ESAPI Access Control</a>. </p></li></ol><br />"
        ]
      }
    ]
  }
}