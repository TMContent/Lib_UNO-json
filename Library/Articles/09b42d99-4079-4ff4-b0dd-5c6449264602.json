{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "09b42d99-4079-4ff4-b0dd-5c6449264602"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Role-based Authorization"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Ruby"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- Ruby\r\n\r\n\r\n## What to Do ##\r\n\r\nUse role-based authorization to perform access control checks. Define the different user types required for the application and create specific roles. When authorizing access to a resource, implement strong access control measures and build the security checks on a per-role basis rather than on a per-user basis.\r\n\r\n\r\n## Why ##\r\n\r\nSpecifying roles in order to group users into categories allows the efficient assignment of privileges. Role Based Access Control (RBAC) provides a clear way to discover and manage least privileges for task execution. Specifying roles also provides a robust and flexible method to manage application users.\r\n\r\n\r\n## When ##\r\n\r\nIf the application uses access control for its resources, then defining roles and performing role-based authorization checks is required as a security best practice.\r\n\r\n\r\n## How ##\r\n\r\nFollow these steps to use RBAC as part of Defense in Depth (DiD). The specifics of each step will be determined by the library and classes used with Ruby. In addition, it may be useful to create a threat model to ensure that you correctly understand the implications of RBAC.\r\n\r\n1. **Identify authentication mechanism.** Find the code responsible for authentication in the application. This is necessary because role-membership is usually determined during authentication.\r\n\r\n2. **Identify credential store.** The credential store will need to be modified to store role membership information.\r\n\r\n3. **Implement assigning roles to users.** Add code that allows managing user role membership.\r\n\r\n4. **Identify all operations that require authorization.** Review the program architecture to list operations which require authorization. The review must also include sensitive operations performed by the program.\r\n\r\n5. **Identify all roles.** To identify application roles, understand how users will access resources to perform necessary business functions. Create role names that accurately describe the role.\r\n\r\n6. **Make an access control matrix.** Make a spreadsheet where the roles are the columns and the operations are the rows. For each cell in the spreadsheet, mark whether the operation is authorized for the corresponding role.\r\n\r\n7. **Write the centralized authorization subsystem.** To implement the access permissions defined by the access control matrix it is necessary to write a centralized authorization subsystem.\r\n\r\n8. **Identify code for all operations that require authorization.**  Review the code to identify where to place RBAC hooks. This will ensure that the application only permits operations after it is determined that the user is authorized to perform. \r\n\r\n9. **Add code, which checks authorization before the operation is executed, to each operation.** Check authorization using a centralized function and the name of the operation. Instead of checking for specific roles here, the application should ask the centralized authorization code for authorization for the operation. If the operation is not authorized, the application should throw an error condition.\r\n\r\n\r\n"
        ]
      }
    ]
  }
}