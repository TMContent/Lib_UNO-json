{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "d9212a71-9f66-4d55-91ad-40af4792f414"
        ],
        "Id_History": [
          "d9212a71-9f66-4d55-91ad-40af4792f414,fbde6ff7-5bd3-4683-a852-48cbef5dcb3f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Communication Links Are Encrypted"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Communication Links Are Encrypted"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <p>Scala with Play Framework 2.1.0+<br /></p>\n  <h1>What to Check For</h1>\n  <p>Ensure that the communication channels are encrypted when interacting with other software across the network.</p>\n  <h1>Why</h1>\n  <p>Encrypting the communication links allows the application to preserve the confidentiality and integrity of the transmitted data.</p>\n  <h1>How to Check</h1>\n  <p>Use the following steps to ensure that your application's communication links are encrypted:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify the connections used for transmitting sensitive data. </strong>Identify the sensitive data that is sent over the network and enumerate the respective connections that are used for such communication.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that connections are secured. </strong>Using a network sniffer, verify that your application utilizes either IPSec or TLS. Then check the following:</p>\n      <ul>\n        <li>\n          <p>\n            <strong>IPSec.</strong> If your application uses IPSec, verify that all packets from your sniffed traffic between the specified hosts contain an Authentication Header (AH) and Encapsulating Security Payload (ESP) fields after the IP headers.</p>\n        </li>\n        <li>\n          <p>\n            <strong>TLS.</strong> If your application uses TLS, verify that your sniffed traffic between the specified hosts contains an TSL handshake. Keep in mind the following considerations when verifying your application's use of TSL:</p>\n          <ul>\n            <li>\n              <p>\n                <strong>Certificate Validity.</strong> Verify that your application's TSL certificate has not reached its expiration date.</p>\n            </li>\n            <li>\n              <p>\n                <strong>Domain Name</strong>. Verify that the domain name for your application's administrative interface is the same as the domain name listed in the TLS certificate.</p>\n            </li>\n            <li>\n              <p>\n                <strong>Chain of Trust.</strong> Verify that your application's users can verify your application's TLS certificate based on the root certificates that are stored in their browsers. If your application uses self-signed TLS certificates, ensure that your organization's root certificate is securely imported into the users' browsers.</p>\n            </li>\n            <li>\n              <p>\n                <strong>Server Configuration</strong>. Verify that your application's environment has enabled HTTPS. Verify that transactions of sensitive nature are transmitted only over HTTPS connections.</p>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>To encrypt the communication links:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify the connections used for transmitting sensitive data. </strong>Enumerate all connections between the different servers with other servers or with the application. Identify the sensitive data that is sent over the network and the respective connections that are used for such communication.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Choose the appropriate encryption mechanism. </strong>Depending on the infrastructure, you may consider using IPSec or TLS.</p>\n      <ul>\n        <li>\n          <strong>IPSec.</strong> IPSec is used when the encryption needs to be applied across all involved parties. Since IPSec is designed to secure connections between static hosts that are \"always on,\" use IPSec to secure the network connections between your application's servers. Due to its nature, IPSec requires low level support. Therefore, your application would need support from the operating system or a JNI component to manage it.</li>\n        <li>\n          <strong>TLS.</strong> TLS provides granular protection which allows only the traffic containing sensitive data to be encrypted. Because TLS has a certificate based design, it allows the protection of data between mobile hosts. Use TLS to secure the communication channel between your application and its users.<br /><br />While Scala provides APIs for handling TLS encrypted traffic, it is recommended to follow the manuals associated with the third party software that is being used. For example, if your application connects to a database server, follow the database server's manual on setting up the encryption; if your application is web-oriented, follow the web server's documentation on setting up the TLS certificate.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Apply the appropriate encryption mechanism. </strong>Apply the encryption mechanism of choice at the appropriate locations in the code. Such locations include all functionality that establishes a connection between your application and another entity.</p>\n    </li>\n  </ol>"
        ]
      }
    ]
  }
}