{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "907797a3-3e9c-4cd8-ac5d-261209092414"
        ],
        "Id_History": [
          "907797a3-3e9c-4cd8-ac5d-261209092414,2ac3d0e4-b304-41ea-862b-0f2ec7b97c21,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Missing XML Validation"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Missing XML Validation"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nMissing XML validation means that an attacker can cause the application to parse invalid XML data. This vulnerability type refers specifically to not validating XML against a schema. In itself, this might not cause any harm, but it can enable other vulnerabilities, such as XML Entity Injection. This vulnerability type affects all applications that parse XML data. \n\n=Impact\n\nMissing XML validation might enable other attacks that exploit other vulnerabilities. The exact impact depends on the kind of other vulnerabilities that are enabled. The most likely and dangerous scenario is some form of XML injection attack, where the attack manipulates application data by sending malformed XML data. For example, if the application uses XML to store authentication credentials, the attacker might be able to send XML data that authenticates them as an administrative user, and they can then take over the application. For that to be possible, a number of other vulnerabilities in addition to missing XML validation would need to be present. \n\n=Countermeasures\n\nTo prevent this vulnerability type, validate untrusted XML data.  XML validation helps prevent attacks that exploit other vulnerabilities, and should always be used when untrusted XML data is processed.\n\n* [[7a38b1cb-18f0-43ae-a955-741619b715f7|Validate XML Data Using a Schema]]\n\n=Application Check\n\nTo check for adequate protection against this vulnerability type, verify that untrusted XML data is validated.\n\n* [[00000000-0000-0000-0000-0000006bb239|XML Data Is Validated Using a Schema]]\n"
        ]
      }
    ]
  }
}