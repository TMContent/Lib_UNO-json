{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "ebe0ff95-10a5-4243-a77c-7e07a7381470"
        ],
        "Id_History": [
          "ebe0ff95-10a5-4243-a77c-7e07a7381470,cff5d2fb-5fe6-498f-aa58-b3b9b4811f52,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Test Accounts Are Removed"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Test Accounts Are Removed"
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <p>Scala and Play Framework 2.1.0+<br /></p>\r\n  <h1>What to Check For</h1>\r\n  <p>Ensure all test accounts have been removed.</p>\r\n  <h1>Why</h1>\r\n  <p>Test accounts provide access to the application's functionality during \r\ndevelopment. Since they are often poorly secured, they are a common \r\ntarget for attackers. Removing them before deployment is the \r\nbest&amp;nbsp;option.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to ensure that your application has all of its test accounts removed:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Check if your application has existing test users.&amp;nbsp;</strong>Enumerate all of your application's users. Verify that there are no test accounts in your application's user database. A common list of test accounts includes, but is not limited to:</p>\r\n      <ul>\r\n        <li>Any account containing your application's name and a number</li>\r\n        <li>Any account containing the word \"test\" and a number</li>\r\n        <li>Any account that has been identified in your application's documentation as being a test account</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Check if your application has hard-coded users.&amp;nbsp;</strong>Verify that your application's code base does not contain any hard-coded users. A hard-coded user is a sequence of a&amp;nbsp;username and password that is initialized to a value at the time when your application starts. Example:</p>\r\n      <pre>String user = \"test002\";<br />String pass = \"pass\"</pre>Common locations to look for hard-coded users include:<ul><li>Authentication procedures</li><li>Authorization procedures</li><li>Procedures that involve change of privileges</li><li>Components that require access controls</li></ul></li>\r\n    <li>\r\n      <p>\r\n        <strong>Check if your application has existing test roles.&amp;nbsp;</strong>Verify that there are no existing test roles left in your application. Common test roles include:</p>\r\n      <ul>\r\n        <li>Any role containing the word \"test\"</li>\r\n        <li>Any role that is identified as a test role in your application's documentation</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Check if your application has special privileges for test roles.&amp;nbsp;</strong>Verify that there are no conditions throughout your application's code base that grant test roles special permissions, such as:</p>\r\n      <pre> {<br />       // The application provides a side door allowing users in the testRole<br />       // role to execute functionality that is entitled only to users in the<br />       // Manager role<br />       if (req.isUserInRole(\"Manager\") || req.isUserInRole(\"testRole\"))<br />       {<br />            ...<br />       }<br />       else<br />       {<br />            ...<br />       }<br /> }</pre>Common locations to look for special privileges to test roles include:<ul><li>Authorization procedures</li><li>Procedures that involve change of privileges</li><li>Components that require access controls</li></ul></li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>\r\n  </p>\r\n  <p>Use the following steps when removing test accounts:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Enumerate all accounts.&amp;nbsp;</strong>List all the users&amp;nbsp;of your application. This should be a comprehensive list that includes, but is not limited to, active users, inactive users, users pending confirmation and test accounts.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the use of each account.&amp;nbsp;</strong>Examine the use/status of each account. Sort the accounts into groups according to their use/status.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Remove the accounts that will no longer be used.&amp;nbsp;</strong>Once the accounts are sorted into groups, list all accounts that are used for test purposes. After identifying all test accounts, remove them from your application's database.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Enforce strong passwords on the remaining accounts.&amp;nbsp;</strong>After removing all test accounts, enforce strong passwords for the remaining accounts in your application. Strong passwords decrease the probability of compromising valid users. </p>\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    <strong>Note:</strong>&amp;nbsp;PCI DSS requirements state that passwords should be at least seven characters in length, use both letters and numbers, expire after no more than 90 days and that a user's new password should not be the same as the previous four.</p>\r\n  <p />"
        ]
      }
    ]
  }
}