{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "aedda6cc-1a70-4f07-8dde-f68bc1e99f5f"
        ],
        "Id_History": [
          "aedda6cc-1a70-4f07-8dde-f68bc1e99f5f,7eadce3d-b69a-49eb-8db5-0891463c3e6b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Cross-Site History Manipulation"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Cross-Site History Manipulation"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nCross-site history manipulation (XSHM) occurs when a malicious site is able to use JavaScript to access information about the user's browsing history on the vulnerable site. This results in leaking information from the user's session on the site of interest, such as: detecting user's login state, mapping of internal site resources, detecting errors, and inferring certain sensitive information. XSHM allows the attacker to find out whether a user has visited the site vulnerable to XSHM, but only if the user visits an attacker-controlled site. XSHM is really a browser vulnerability, but it is possible to protect against it on the server-side. \n\n=Impact\n\nThe impact of XSHM is that an attacker may gain information about the user's web browsing history. XSHM only allows finding out whether the user has been to a specific URL or not;  XSHM does not allow reading the actual browsing history. Hypothetically, the impact of successful exploitation of the vulnerability us that an attacker can violate user privacy, detect login status, perform resource-mapping, infer sensitive information, track user activity, and steal URL parameters. However, the likelihood of this vulnerability being exploited to this extent is low. However, the vulnerability can possibly be combined with cross-site scripting (XSS) and cross-site request forgery (CSRF) to achieve greater impact. \n\n=Countermeasures\n\nTo protect against XSHM, include unique tokens in redirects. \n\n=Application Check\n\nTo check for adequate protection against XSHM, ensure that unique tokens are included in redirects. \n\n=Specific Technologies\n\n* [[1fd3358c-722f-4e61-899f-26b7818b940c|ASP.NET Cross-Site History Manipulation]]\n* [[3eb97a46-1f72-4cb3-9695-7cad04333206|Java Cross-Site History Manipulation]]\n* [[1513ff93-156b-4062-bbcb-13bae385136c|PHP Cross-Site History Manipulation]]"
        ]
      }
    ]
  }
}