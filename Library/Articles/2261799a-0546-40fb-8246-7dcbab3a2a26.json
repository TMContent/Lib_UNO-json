{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "2261799a-0546-40fb-8246-7dcbab3a2a26"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Remove Obsolete Applications and Instances"
        ],
        "Category": [
          "System Hardening"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          "AWS"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "##Applies To##\r\n\r\n- Amazon Web Services (AWS)\r\n\r\n\r\n##What to Do##\r\n\r\nRemove obsolete application and instances with the management console or command line interface (CLI). This includes:\r\n- Removing an application under Elastic Beanstalk (EB)\r\n- Deleting an instance under Elastic Computing Cloud (EC2).\r\n\r\n\r\n##Why##\r\n\r\nUnder the shared security model you are responsible for:\r\n\r\n- Machine images\r\n- Operating systems\r\n- Applications\r\n- Data at rest\r\n\r\nObsolete applications and instances are susceptible to a variety of attacks. These resources also add to information systems management overhead, and are subject to security audits. There is also a financial cost since a running an obsolete application incurs billing for runtime or storage costs under your AWS account.\r\n\r\nPerforming periodic reviews to identify obsolete objects is a security best practice. Obsolete applications are inherently unauthorized when you install a newer verssion, and should be removed for simplification of management.\r\n\r\n\r\n##When##\r\n\r\nApplications and instances are removed when no longer needed. As a precaution you may choose to terminate the application or instance, and later decide if complete removal is required. Precautions should be taken, such as confirming the existence of a snapshot or offsite backup of the resource or code. During the application lifecycle, remove obsolete applications and instances whenever possible and practical:\r\n\r\n1. **Application Development and Testing.** During the development of your application, versions will accumulate as AWS automatically archives the older version. Older obsolete versions should be deleted when no longer needed for quick roll-back. \r\n\r\n2. **Application Deployed.** It is possible that older application versions will remain in EC2 after deployment. These versions should be removed per your deployment plan.\r\n\r\n3. **Periodic Security Checks.** Periodic security audits specified in your information management plan may identify obsolete instances of applications and instances. These must be removed when flagged as part of mitigating results of the security audit.\r\n\r\n\r\n##How##\r\n\r\nTo remove obsolete instances, follow these general steps for your cloud. For more information about instances, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/.\r\n\r\n1. **Terminate an Instance.** An instance can be terminated by accessing the management console. Before proceeding, check that EBS volumes will remain, and required data has been copied to other EBS volumes or S3 buckets. After this step, go to Instances in the navigation pane of the EC2 console. Select the target instance, and use the terminate action. A prompt asks for confirmation. Agree when you are certain of your action.\r\n\r\n2. **Terminate Instance with CLI.** Terminating an instance can be done by issuing commands in your CLI. For more information about accessing Amazon EC2, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/.\r\n - `terminate-instances` (in AWS CLI)\r\n - `ec2-terminate-instances` (in Amazon EC2 CLI)\r\n - `Stop-EC2Instance` (in AWS Tools for Windows PowerShell).\r\n\r\nTo remove obsolete applications, follow these general steps. For more information about removing applications, see http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/.\r\n\r\n1. **Remove an Application.** An application can be removed by accessing the Elastic Beanstalk console. Before proceeding, confirm the application version for the target to be deleted. In the EB console, select the application's region. Select the version of the application, and check the version(s). When you are certain of the choices, delete and confirm. Note the option to remove the application source bundle from the S3 bucket. When checked, the associated source code is deleted from the S3 bucket.\r\n\r\n2. **Remove Application with CLI.** Removing the application can be done by issuing commands in your CLI. For more information about deleting application versions with CLI or API, see http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/.\r\n - `elastic-beanstalk-delete-application-version` (in AWS CLI)\r\n - `DeleteApplicationVersion` (using Elastic Beanstalk API)\r\n\r\n\r\n##Additional Resources##\r\n\r\n- [Amazon Elastic Beanstalk Developer Guide](http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ \"Amazon Elastic Beanstalk Developer Guide\")\r\n- [Amazon Elastic Compute Cloud User Guide for Linux](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ \"Amazon Elastic Compute Cloud User Guide for Linux\")\r\n- [AWS Security Best Practices](http://aws.amazon.com/security/ \"AWS Security Best Practices\")\r\n- [Amazon Web Services: Overview of Security Processes](http://aws.amazon.com/compliance/aws-whitepapers/ \"Amazon Web Services: Overview of Security Processes\")\r\n"
        ]
      }
    ]
  }
}