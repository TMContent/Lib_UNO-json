{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-261343957",
      "Content_Hash": "1529296748"
    },
    "Metadata": [
      {
        "Id": [
          "c6ebe7d8-ee2b-4e1a-8f0c-cfa63a8472c9"
        ],
        "Id_History": [
          "c6ebe7d8-ee2b-4e1a-8f0c-cfa63a8472c9,3a54fe2e-cfef-48bc-8076-60bbc0f2f1fc,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Instrument for User Management Events"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Instrument for User Management Events"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use ASP.NET health monitoring to Instrument your application and monitor user management events around authentication and authorization.</p>\r\n  <h1>Why</h1>\r\n  <p>This instrumentation can help you to detect and react to potentially suspicious behavior. It also enables you to gather operations data; for example, to track who is accessing your application and when user account passwords need to be reset.</p>\r\n  <h1>How</h1>\r\n  <p>The following steps show how to instrument your application for user management events</p>\r\n  <ol>\r\n    <li>Create a Custom user management web event, by creating a class library and then create a class that inherits from WebAuditEvent.</li>\r\n    <li>Configure your WCF Service for Health Monitoring<li>Instrument the WCF Service by raising the custom event in a service contract.<li>Verify the Service Events in the Event Log after calling the service method from a Test client.</li></li></li>\r\n  </ol>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}