{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2143201203",
      "Content_Hash": "-1821907536"
    },
    "Metadata": [
      {
        "Id": [
          "377919e5-9cd3-40f1-9658-1d4cdabf2b3a"
        ],
        "Id_History": [
          "377919e5-9cd3-40f1-9658-1d4cdabf2b3a,4d9ee80d-39b3-4766-9208-8b1b92a3668c,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Initialize All Variables Before Use"
        ],
        "Category": [
          "Unmanaged Code"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Initialize All Variables Before Use"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>When declaring a new variable in your function, initialize the variable to a value before it is used.</p>\n  <h1>Why</h1>\n  <p>Unitialized variables may have garbage values in them that can cause your program to run unpredictably. Worse yet, variables which default initialize to 0 in a debugger may default to a garbage value in production causing your application to behave differently in a production environment than it does on your development machine.</p>\n  <h1>When</h1>\n  <p>When declaring new variables in&nbsp;a function.</p>\n  <h1>How</h1>\n  <p>When declaring a new variable make sure it is initialized to a safe value before it is used. If its first use is to assign a value from some other operation, that is ok. If its first use is to be read for the purpose of a calculation, array index or other operation, make sure the initialization has occurred first.</p>\n  <h1>Problem Example</h1>\n  <p>In the following code the array is indexed with an uninitialized variable.</p>\n  <pre>char&#42; ArrayIndexing()<br />&#123;<br />&nbsp; int index;<br />  char &#42;buffer = stringArray&#91;index&#93;;  <br />  return buffer;<br />&#125;</pre>\n  <h1>Solution Example</h1>\n  <p>In the following code the array is indexed with an initialized variable.</p>\n  <pre>char&#42; ArrayIndexing()<br />&#123;<br />&nbsp; int index = 0;<br />  char &#42;buffer = stringArray&#91;index&#93;;  <br />  return buffer;<br />&#125;</pre>"
        ]
      }
    ]
  }
}