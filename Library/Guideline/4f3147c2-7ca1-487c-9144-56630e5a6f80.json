{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "626668172",
      "Content_Hash": "1603769713"
    },
    "Metadata": [
      {
        "Id": [
          "4f3147c2-7ca1-487c-9144-56630e5a6f80"
        ],
        "Id_History": [
          "4f3147c2-7ca1-487c-9144-56630e5a6f80,0180bd3c-1b98-4832-8ddf-f3aa7b7eb97b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Automatically Lock Inactive User Accounts"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Automatically Lock Inactive User Accounts"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Applications written using Servlets or JSP.</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Automatically lock inactive user accounts. Log the instance when accounts have been locked.</p>\n  <h1>Why</h1>\n  <p>Inactive user accounts increase the attack surface of the application and can be used by an attacker as a means of entry.</p>\n  <h1>When</h1>\n  <p>Design your application so that inactive user accounts can be detected and locked. After deployment, set the system to lock inactive accounts after an appropriate amount of time.</p>\n  <h1>How</h1>\n  <p>Use the following steps when locking inactive user accounts:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Set a lockout policy. </strong>Create the application's lockout policy. Determine the necessary duration of inactivity before an account can be locked/disabled. This policy can vary depending on whether the account is of a normal user or an administrator. For example, disable normal accounts after 45 days of inactivity and administrative accounts after 30 days of inactivity.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Keep track of user inactivity. </strong>Establish a mechanism to keep track of the last successful authentication. Successful authentication can be tracked via logs or a timestamp, which resides in the user database. Example: </p>\n      <pre>sql&gt; select username, last_login_date from users;<br />+----------+-----------------+<br />| username | last_login_date |<br />+----------+-----------------+<br />| adam     |      2013-10-11 |<br />| sue      |      2013-10-11 |<br />| jim      |      2013-10-01 |<br />| richard  |      2013-10-01 |<br />| julie    |      2013-09-23 |<br />| sam      |      2013-06-23 |<br />+----------+-----------------+</pre>\n    </li>\n    <li>\n      <p>\n        <strong>Set a lockout mechanism. </strong>Establish a mechanism to verify the current period of inactivity and automatically set the disabled bit for inactive accounts. Using the application or database server's scheduler, activate such functionality to run during the hours with least user activity. Keep in mind that inactive accounts should be disabled, but not removed until it is confirmed that they should be completely removed. <br /></p>\n      <p>For example, the following database transaction would lock all user accounts that have been inactive for more than 30 days. Such transaction should be scheduled to run once a day:</p>\n      <pre>sql&gt; update users set locked = 1<br />      where (current_date - 30) &gt; last_login_date</pre>\n      <p>\n        <strong>Note:</strong> The statement above uses Oracle syntax. Please consult your database manual if you use a&nbsp;different database engine.</p>\n    </li>\n  </ol>\n  <p>\n    <strong>Note:</strong> PCI DSS requirements state that a&nbsp;user account should be locked out after no more than 90 days of inactivity.</p>\n  <h1>Problem Example</h1>\n  <p>The following segment illustrates the user database of a multi-user application. In its current state, the application logs the last time the user has logged in but does not enforce a lockout policy for its inactive users; therefore, an attacker can gain unauthorized access to the application by compromising an inactive account.</p>\n  <pre>sql&gt; select username, locked, last_login_date from users;<br />+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2013-10-11 |<br />| sue      |      0 |      2013-10-11 |<br />| jim      |      0 |      2013-10-01 |<br />| richard  |      0 |      2013-10-01 |<br />| julie    |      0 |      2013-09-23 |<br />| sam      |      0 |      2013-06-23 |<br />+----------+--------+-----------------+</pre>\n  <h1>Solution Example</h1>\n  <p>The following segment illustrates the user database of a multi-user application. Because the application enforces a lockout policy, all of its inactive users have been locked and denied access to the application. Therefore, an attacker cannot compromise the application through its inactive users.</p>\n  <pre>sql&gt; select username, locked, last_login_date from users;<br />+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2013-10-11 |<br />| sue      |      0 |      2013-10-11 |<br />| jim      |      0 |      2013-10-01 |<br />| richard  |      0 |      2013-10-01 |<br />| julie    |      0 |      2013-09-23 |<br />| sam      |      1 |      2013-06-23 |<br />+----------+--------+-----------------+</pre>\n  <br />"
        ]
      }
    ]
  }
}