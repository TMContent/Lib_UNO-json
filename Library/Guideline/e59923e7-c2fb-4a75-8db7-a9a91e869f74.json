{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "604739165",
      "Content_Hash": "-2004756755"
    },
    "Metadata": [
      {
        "Id": [
          "e59923e7-c2fb-4a75-8db7-a9a91e869f74"
        ],
        "Id_History": [
          "e59923e7-c2fb-4a75-8db7-a9a91e869f74,3a6adcdf-2f78-4533-8e67-2f4185a1b218,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Validate Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Validate Input for Length, Range, Format, And Type"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* ASP.NET 4.0+\r\n\r\n\r\n## Solution Example ##\r\n\r\n\r\n1. **Enforce numeric range constraints.** Use the RangeValidator control to ensure any numeric values are constrained to a specific, acceptable range. Here is an example that declares an integer field in an ASP page that has a valid range from 1 to 50:\r\n\r\n\t~~~~\r\n\t<td>\r\n\t  <asp:RangeValidator id=\"Range1\"\r\n\t\t\t   ControlToValidate=\"txtState\"\r\n\t\t\t   MinimumValue=\"1\"\r\n\t\t\t   MaximumValue=\"50\"\r\n\t\t\t   Type=\"Integer\"\r\n\t\t\t   EnableClientScript=\"false\"\r\n\t\t\t   Text=\"The value must be from 1 to 10!\"\r\n\t\t\t   runat=\"server\">\r\n\t  </asp:RangeValidator></td>\r\n\t<td>State:</td>\r\n\t<td><input type=text runat=server id=txtState></td>\r\n\t~~~~\r\n\r\n\r\n2. **Validate verification fields.** Fields such as password entry are often verified by having the user re-type them to ensure they are correct. Use the CompareValidator control to make the comparisons and ensure validity/integrity. Here is an example that declares two password fields in an ASP page that must match in order to validate properly:\r\n\r\n\t~~~~\r\n\t<asp:CompareValidator runat=server\r\n\t\t\t\tControlToValidate=txtRePWord\r\n\t\t\t\tControlToCompare=txtPWord\r\n\t\t\t\tErrorMessage=\"Passwords do not match.\" />\r\n\t~~~~\r\n\r\n\tIn this case, the two fields being compared are \"txtPWord\" and \"txtRePWord\". If they do not match, validation fails with the error message, \"Passwords do not match.\".\r\n\r\n\r\n3. **Enforce type constraints on string fields.** String fields are the most difficult type of input to effectively validate because the range of acceptable characters is much larger than numeric and enumerated types. Regular expressions provide a flexible mechanism for dictating valid patterns and characters. Use the RegularExpressionValidator to perform a variety of checks on string-based fields such as zip codes and phone numbers. Here is an example that declares a text field in an ASP page that should represent a five digit zip code, consisting entirely of numeric digits, and a validator to enforce those constraints:\r\n\r\n\t~~~~\r\n\t<input type=text runat=server id=txtZip>\r\n\t\t  <asp:RegularExpressionValidator runat=server\r\n\t\t\t\t ControlToValidate=\"txtZip\"\r\n\t\t\t\t ErrorMessage=\"Zip code must be 5 digits, all numbers.\"\r\n\t\t\t\t ValidationExpression=\"[0-9]{5}\"> \r\n\t\t  </asp:RegularExpressionValidator><td>Zip code:</td>\r\n\t<td><input type=text runat=server id=txtZip></td>\r\n\t~~~~\r\n\r\n\r\n4. **Use the Regex class to validate other sources.** Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks. Use regular expressions to help validate input. The following example shows how to use the Regex class.\r\n\r\n\t~~~~\r\n\tusing System.Text.RegularExpressions;\r\n\t// Instance method:Regex reg = new Regex(@\"^[a-zA-Z'.\\s]{1,40}$\");\r\n\tResponse.Write(reg.IsMatch(Request.QueryString[\"Name\"]));\r\n\t// Static method:if (!Regex.IsMatch(Request.QueryString[\"Name\"],@\"^[a-zA-Z'.\\s]{1,40}$\"))\r\n\t{\r\n\t   // Name does not match expression\r\n\t}\r\n\tIf you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation.\r\n\t~~~~\r\n\r\n## Guideline ##\r\n\r\n* [Validate All Input](11a15f3a-7fe8-4e4c-be5e-309ab7227b3d)"
        ]
      }
    ]
  }
}