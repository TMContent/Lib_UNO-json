{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "134432327",
      "Content_Hash": "840308950"
    },
    "Metadata": [
      {
        "Id": [
          "d50b8d11-8906-40b2-a56e-eb5ef3c7824f"
        ],
        "Id_History": [
          "d50b8d11-8906-40b2-a56e-eb5ef3c7824f,784a1f57-8e8a-41d3-b69f-adf9463f6c87,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Sanitize Any File Names Or Paths from Users"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Sanitize Any File Names Or Paths from Users"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Do not accept file names or paths from users.&nbsp; If you must accept a file name or a path from a user, sanitize it very carefully. </p>\r\n  <h1>Why</h1>\r\n  <p>Accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources. </p>\r\n  <h1>When</h1>\r\n  <p>If it is unavoidable to accept a file name from a user and to then use it to acccess or store data in the file system, that file name or path must be very carefully sanitized. </p>\r\n  <h1>How</h1>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>File Names.</strong> Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.&nbsp; When checking file names, obtain the full name of the file by using the <b>System.IO.Path.GetFullPath</b> method. </p>\r\n      <li>\r\n        <p>\r\n          <strong>File Paths. </strong>If you use <b>MapPath</b> to map a supplied virtual path to a physical path on the server, use the overloaded <b>Request.MapPath</b> method that accepts a <b>bool</b> parameter so that you can prevent cross-application mapping. The following code example shows this technique. </p>\r\n        <pre>try<br />&#123;<br /> string mappedPath = Request.MapPath( inputPath.Text,<br />                                       Request.ApplicationPath, false);<br />&#125;<br />catch (HttpException)<br />&#123;<br /> // Cross-application mapping attempted <br />&#125;</pre>\r\n        <p>The final <b>false</b> parameter prevents cross-application mapping.&nbsp; This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <b>HttpException</b>. </p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}