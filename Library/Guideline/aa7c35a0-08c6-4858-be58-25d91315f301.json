{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-70790093",
      "Content_Hash": "-1918338675"
    },
    "Metadata": [
      {
        "Id": [
          "aa7c35a0-08c6-4858-be58-25d91315f301"
        ],
        "Id_History": [
          "aa7c35a0-08c6-4858-be58-25d91315f301,3b0ef048-3128-4704-be23-71644cf1cc44,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Encrypt ViewStates That Contain Sensitive Data"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Encrypt ViewStates That Contain Sensitive Data"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>If your <em>ViewState</em> contains sensitive data (and this data must reside in the <em>ViewState</em> instead of in server-side session variables), you should encrypt the <em>ViewState</em> to protect the information against tampering and disclosure.</p>\r\n  <h1>Why</h1>\r\n  <p>Using TLS protects <em>ViewState</em> while it is passed over the network between server and browser, but it does not stop it being viewed and modified on the user's computer. If the data in your <em>ViewState</em> should not be viewable or modifiable by end users, only signing and encryption will protect it.</p>\r\n  <h1>When</h1>\r\n  <p>Ideally, the <em>ViewState</em> does not contain sensitive data, which should instead be stored in a server-side session state variable. If this is not possible, you should use <em>ViewState</em> encryption. Do not use it if your <em>ViewState</em> does not contain sensitive data because encryption significantly adds to the size of the <em>ViewState</em> and this impacts performance.</p>\r\n  <h1>How</h1>\r\n  <p>The default ASP.NET settings ensure that <em>ViewState</em> is tamper proof. This ensures that any modification of the <em>ViewState</em> either on the client's computer or over the network is detected when the server processes the data. If you need to use round trips for potentially sensitive data, you can force encryption of <em>ViewState</em> for a specific page by following these steps:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Check the &lt;pages&gt; element.</strong> Check that the <em>viewStateEncryptionMode</em> attribute of the &lt;<em>pages</em>&gt; element is set to <em>Always</em>, as shown in the following example.</p>\r\n      <pre>&lt;pages<br /> ...<br /> viewStateEncryptionMode=\"Always\"<br /> ...<br /> /&gt;</pre>\r\n      <p>If you do not want every page to used encrypted ViewState, check that the <em>viewStateEncryptionMode</em> attribute of the &lt;<em>pages</em>&gt; element is set to <em>Auto</em>, as shown in the following example.</p>\r\n      <pre>&lt;pages<br /> ...<br /> viewStateEncryptionMode=\"Auto\"<br /> ...<br /> /&gt;</pre>\r\n      <p>Then, from within your code, call the <em>RegisterRequiresViewStateEncryption</em> method as shown in the following example.</p>\r\n      <pre>Page.RegisterRequiresViewStateEncryption();</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Specify the encryption algorithm.</strong> Specify the encryption algorithm to use on the validation attribute, as shown in the following example.</p>\r\n      <pre>&lt;machineKey<br /> ...<br /> validation=\"AES\"<br /> ...<br /> /&gt;</pre>\r\n      <p>The validation attribute is overloaded and can be used to specify either the hashing algorithm or the encryption algorithm. You can specify either 3DES or AES. Because AES offers larger key sizes (128 bits, 192 bits, or 256 bits) than 3DES (56 bits), it is considered more secure and should be used.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Check the &lt;machineKey&gt; element.</strong> Review the <em>decryptionKey</em> and <em>validationKey</em> attribute of the &lt;<em>machineKey</em>&gt; element:</p>\r\n      <pre>&lt;machineKey validationKey=\"AutoGenerate,IsolateApps\"<br /> decryptionKey=\"AutoGenerate,IsolateApps\"<br /> ...<br /> /&gt;</pre>Unless your application is installed in a Web farm, you should leave the <em>decryptionKey</em> and <em>validationKey</em> attribute with the default values shown in the example. To encrypt ViewState in a web farm, you need to manually set the <em>validationKey</em> and <em>decryptionKey</em> valueâ€”these values should be same across all machines in the web farm. </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>Due to their interaction with their internal billing system, an e-commerce site is forced to send billing details, including order amounts and (non-public) discount percentages round-trip through the user's browser. All of this information is stored in a <em>ViewState</em>. An attacker can extract all of the information in the <em>ViewState</em>, although they cannot modify it. Thus, their competitors can learn the site's discount structure without having to compromise any server side machines.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>Due to their interaction with their internal billing system, an e-commerce site is forced to send billing details, including order amounts and (non-public) discount percentages round-trip through the user's browser. All of this information is stored in an encrypted ViewState. An attacker is unable to read the information stored in this ViewState, even when it passes through their machine. Thus, sensitive information stays private.</p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}