{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1791280793",
      "Content_Hash": "-224957704"
    },
    "Metadata": [
      {
        "Id": [
          "f75a5171-660b-49d5-be73-3c7d5a066fe7"
        ],
        "Id_History": [
          "f75a5171-660b-49d5-be73-3c7d5a066fe7,109075ea-427d-4768-8b2e-299ab56ab520,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Full Assembly Names When You Dynamically Load Assemblies"
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Full Assembly Names When You Dynamically Load Assemblies"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>If your code supports the dynamic loading of assemblies and you load the assembly by calling <b>Activator.CreateInstance</b>, make sure to refer to the assembly by using its strong name. </p>\r\n  <h1>Why</h1>\r\n  <p>This prevents your application from accidentally loading a malicious assembly with the same name as a legitimate assembly.</p>\r\n  <h1>When</h1>\r\n  <p>When your code supports the dynamic loading of assemblies.</p>\r\n  <h1>How</h1>\r\n  <p>The strong name of an assembly contains the public-key token that the assembly was signed with, providing evidence of the author.</p>\r\n  <p>The following example shows how to find the strong name for an assembly.</p>\r\n  <pre>public static StrongName GetStrongName(Assembly assembly)<br />&#123;<br />&nbsp;&nbsp;&nbsp; if(assembly == null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ArgumentNullException(\"assembly\");</pre>\r\n  <pre>&nbsp;&nbsp;&nbsp; AssemblyName assemblyName = assembly.GetName();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; // get the public key blob<br />&nbsp;&nbsp;&nbsp; byte&#91;&#93; publicKey = assemblyName.GetPublicKey();<br />&nbsp;&nbsp;&nbsp; if(publicKey == null &#124;&#124; publicKey.Length == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new InvalidOperationException(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String.Format(\"&#123;0&#125; is not strongly named\", <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assembly));<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; StrongNamePublicKeyBlob keyBlob = <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new StrongNamePublicKeyBlob(publicKey);</pre>\r\n  <pre>&nbsp;&nbsp;&nbsp; // create the StrongName<br />&nbsp;&nbsp;&nbsp; return new StrongName(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; keyBlob, assemblyName.Name, assemblyName.Version);<br />&#125;</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}