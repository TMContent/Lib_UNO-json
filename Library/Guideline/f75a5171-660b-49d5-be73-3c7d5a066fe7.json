{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1791280793",
      "Content_Hash": "-224957704"
    },
    "Metadata": [
      {
        "Id": [
          "f75a5171-660b-49d5-be73-3c7d5a066fe7"
        ],
        "Id_History": [
          "f75a5171-660b-49d5-be73-3c7d5a066fe7,109075ea-427d-4768-8b2e-299ab56ab520,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Use Full Assembly Names When You Dynamically Load Assemblies"
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Use Full Assembly Names When You Dynamically Load Assemblies"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* .NET\r\n\r\n## Summary ##\r\n\r\nIf your code supports the dynamic loading of assemblies and you load the assembly by calling Activator.CreateInstance, make sure to refer to the assembly by using its strong name. This prevents your application from accidentally loading a malicious assembly with the same name as a legitimate assembly.\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe strong name of an assembly contains the public-key token that the assembly was signed with, providing evidence of the author. The following example shows how to find the strong name for an assembly.\r\n\r\n~~~~\r\npublic static StrongName GetStrongName(Assembly assembly)\r\n{\r\n    if(assembly == null)\r\n        throw new ArgumentNullException(\"assembly\");\r\n    AssemblyName assemblyName = assembly.GetName();\r\n        \r\n    // get the public key blob\r\n    byte[] publicKey = assemblyName.GetPublicKey();\r\n    if(publicKey == null || publicKey.Length == 0)\r\n        throw new InvalidOperationException(\r\n            String.Format(\"{0} is not strongly named\", \r\n            assembly));\r\n    \r\n    StrongNamePublicKeyBlob keyBlob = \r\n        new StrongNamePublicKeyBlob(publicKey);\r\n    // create the StrongName\r\n    return new StrongName(\r\n        keyBlob, assemblyName.Name, assemblyName.Version);\r\n}\r\n~~~~\r\n\r\n---\r\nAdapted from Microsoft patterns & practices guidance."
        ]
      }
    ]
  }
}