{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "235563839",
      "Content_Hash": "-685556687"
    },
    "Metadata": [
      {
        "Id": [
          "740a1606-d091-4a93-bfd8-f0d4226adbf1"
        ],
        "Id_History": [
          "740a1606-d091-4a93-bfd8-f0d4226adbf1,435d60e8-af77-4008-89b8-70d2c447d892,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Force Re-authentication When Executing Critical Functionality"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Force Re-authentication When Executing Critical Functionality"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Force the user to re-authenticate when executing security-critical functionality including, but not limited to, password changes, account modifications, and critical transactions.</p>\r\n  <h1>Why</h1>\r\n  <p>Forcing the user to re-authenticate verifies the user's decision to execute the given functionality and preserves the application's integrity in the event that a user's account has been compromised via session hijacking.</p>\r\n  <h1>When</h1>\r\n  <p>Force re-authentication prior to executing security-critical functionality.</p>\r\n  <h1>How</h1>\r\n  <p>Follow these steps when forcing re-authentication:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify critical functionality:</strong> Evaluate your application's design and requirements and determine what parts and resources of your application are very important to your organization's business model or your application's security architecture. This could include activities such as financial transactions or resetting user passwords. Your application should force re-authentication at these points in the code. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Adopt re-authentication mechanism:</strong> Establish a mechanism that requires the user to verify their authenticity:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Current password:</strong> The user uses their current password to confirm the identity. This technique ensures that the given user is aware of the action to be performed and holds responsibility for executing it. </p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>CAPTCHA:</strong> CAPTCHA are mechanisms designed to ensure that a human, not an automated script, is using the system. Using a CAPTCHA should be seen as a way of augmenting a password in this kind of situation, not a way of replacing it. Many CAPTCHA systems embed distorted letters or numbers into displayed images which the user must enter. There are a number of problems with many CAPTCHA systems, so they should not be relied on too heavily. First, many graphical CAPTCHAs can be trivially broken by optical character recognition systems, and ensuring that a CAPTCHA is sufficiently strong to be useful without having too high of a failure rate for real users is difficult. If CAPTCHAs are reused, the attacker can simply record the session IDs of CAPTCHAs with known values and replay them. CAPTCHAs can also be broken by using a man in the middle technique where the image is saved and forwarded to another site controlled by the attacker. An unsuspecting user of that site solves the CAPTCHA and the attacker forwards the answer on to the victim site. CAPTCHAs also create accessibility problems for users, as blind and sometimes even color-blind individuals can find them impossible. If you choose to implement a CAPTCHA, be aware of the trade-offs involved and ensure that the system you use is appropriately protected against the attacks you expect to see.</p>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Enforce the re-authentication mechanism:</strong> Once the critical functionality is identified and the re-authentication mechanism is established, enforce the re-authentication mechanism at the appropriate places inside the code.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code processes a payment transaction. Unfortunately, the code executes the payment without verifying that the user is aware of the transaction.</p>\r\n  <pre>public void ProcessPayment(PaymentInfo paymentInfo)<br />{    <br />  // Prepare and execute the transaction<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code processes a payment transaction. Before executing the payment, the code verifies that the user is aware of the transaction by re-authenticating him.</p>\r\n  <pre>public void ProcessPayment(PaymentInfo paymentInfo, string username, string password)<br />{    <br />  MembershipProvider membershipProvider = Membership.Provider;     <br />  if (membershipProvider.ValidateUser(username, password))    <br />  {        <br />    // Prepare and execute the transaction    <br />  }<br />}</pre>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}