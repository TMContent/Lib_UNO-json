{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2023967331",
      "Content_Hash": "402272746"
    },
    "Metadata": [
      {
        "Id": [
          "67060e7b-7145-4e84-b574-c07548f81d9f"
        ],
        "Id_History": [
          "67060e7b-7145-4e84-b574-c07548f81d9f,6799fc9c-ba08-4514-be19-03a42496be5f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Validate All Input Passed to the Database"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Validate All Input Passed to the Database"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java\r\n* Servlets or JSP \r\n* SQL Database\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code allows the user to query a database. Unfortunately, the application fails to validate the user's input; therefore, an attacker can access the backend database on behalf of the application through the use of SQL injection.\r\n\r\n~~~~\r\npublic void doGet(HttpServletRequest request,\r\n     HttpServletResponse response) throws ServletException, IOException{\r\n     PrintWriter out = response.getWriter();\r\n     String query = request.getParameter(\"query\");\r\n     String retData = \"\";\r\n\r\n     // The application fails to validate the user-supplied\r\n     // query before submitting it to the database server\r\n     retData = queryDB(query);\r\n\r\n     ...\r\n\r\n     out.flush();\r\n     out.close();\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code allows the user to query a database. Because the application validates the user's input, it is much more difficult for an attacker to access the backend database through a SQL injection attack.\r\n\r\n~~~~\r\npublic void doGet(HttpServletRequest request,\r\n     HttpServletResponse response) throws ServletException, IOException{\r\n     PrintWriter out = response.getWriter();\r\n     String query = request.getParameter(\"query\");\r\n     String retData = \"\";\r\n\r\n     // The application validates the user-supplied query\r\n     // before submitting it to the database server\r\n     if (validateQuery(query))\r\n     {\r\n          retData = queryDB(query);\r\n\r\n          ...\r\n\r\n     }\r\n\r\n     out.flush();\r\n     out.close();\r\n}\r\n\r\n\r\npublic boolean validateQuery(String input){\r\n\r\n      // The input can be only of numeric characters\r\n      String goodPattern = \"[0-9]++\";\r\n\r\n      Pattern p = Pattern.compile(goodPattern);\r\n      Matcher m = p.matcher(input);\r\n\r\n      if(!m.matches())\r\n      {\r\n            return false;\r\n      }\r\n\r\n      return true;\r\n}\r\n~~~~"
        ]
      }
    ]
  }
}