{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1925690157",
      "Content_Hash": "1510357325"
    },
    "Metadata": [
      {
        "Id": [
          "baa5a0b3-8b7d-4c91-a6f5-ac287c62e8db"
        ],
        "Id_History": [
          "baa5a0b3-8b7d-4c91-a6f5-ac287c62e8db,b0ad9077-6385-4de1-ba4b-e3683e6ecee4,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Use Sizeof() to Determine Sizes of Objects"
        ],
        "Category": [
          "Unmanaged Code"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Sizeof() to Determine Sizes of Objects"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use sizeof() to determine sizes of objects instead of using hardcoded values.</p>\r\n  <h1>Why</h1>\r\n  <p>Different platforms may represent the same data structures differently in memory. Using hardcoded values for object memory sizes may result in errors when performing memory management operations.</p>\r\n  <h1>How</h1>\r\n  <p>Search code for hardcoded memory sizes. If found, replace hardcoded values with run-time calls to sizeof() to measure sizes of objects in memory. </p>\r\n  <p>Avoid using sizeof() to calculate sizes of arrays. When an array is passed to a function as a parameter, it is passed as a pointer. If that function then calls sizeof() using that pointer as an argument, sizeof() will return the size of the pointer, not the size of the array. To get the amount of memory used by an array or a string correctly, use sizeof() in the same scope in which the array or string is declared. Store the memory size of an array or a string as a variable and pass it as an argument to other functions when it is necessary to know the size of the array or string outside of the scope where it is declared.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about using sizeof(), please see \"EXP09-C. Use sizeof to determine the size of a type or variable\" at <a href=\"https://www.securecoding.cert.org/confluence/display/seccode/EXP09-C.&#43;Use&#43;sizeof&#43;to&#43;determine&#43;the&#43;size&#43;of&#43;a&#43;type&#43;or&#43;variable\">https://www.securecoding.cert.org/confluence/display/seccode/EXP09-C.&#43;Use&#43;sizeof&#43;to&#43;determine&#43;the&#43;size&#43;of&#43;a&#43;type&#43;or&#43;variable</a></li>\r\n  </ul>"
        ]
      }
    ]
  }
}