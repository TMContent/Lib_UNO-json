{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1727473855",
      "Content_Hash": "1472701215"
    },
    "Metadata": [
      {
        "Id": [
          "8c23cde8-ec0b-4d00-8661-fd8ac632683f"
        ],
        "Id_History": [
          "8c23cde8-ec0b-4d00-8661-fd8ac632683f,c2b6ebe3-38e1-4b2d-b5cc-43e826e14ecd,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[VERIFYME] Use Regular Expressions in Schemas to Validate Format, Range Or Length"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Regular Expressions in Schemas to Validate Format, Range Or Length"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \r\n<li>Microsoft Visual Studio® 2008</li></li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Consider using regular expressions in schemas to validate format, range or length.</p>\r\n  <h1>Why</h1>\r\n  <p>Using regular expressions in schemas for validation will allow you to use complex validation logic without need for implementing the complex validation code. Also it will allow decoupling the validation logic from the business logic.</p>\r\n  <h1>When</h1>\r\n  <p>All input should always be validated, regardless of source. Unless data is actually static within the scope of the local code base, it could be modified by a malicious user—even data in a database which is supposed to be static. </p>\r\n  <h1>How</h1>\r\n  <p>Schema validation provides a way to create validation for data types using XML rules, for validity check in regards to format, length and type. It supports using regular expressions. Without regular expressions, complex validation code would be required.</p>\r\n  <p>The example schema below exemplifies the validation of integer with values of between 1 and 5, the string of length 5 and social security number and zip code with valid formats.</p>\r\n  <pre>&lt;xs:schema elementFormDefault=\"qualified\" targetNamespace=\"<a href=\"http://microsoft.patternpractices.wcfguide/\">http://Microsoft.PatternPractices.WCFGuide</a>\" xmlns:xs=\"<a href=\"http://www.w3.org/2001/XMLSchema\">http://www.w3.org/2001/XMLSchema</a>\" xmlns:tns=\"<a href=\"http://microsoft.patternpractices.wcfguide/\">http://Microsoft.PatternPractices.WCFGuide</a>\"&gt;<br />  &lt;xs:element name=\"GetData\"&gt;<br />    &lt;xs:complexType&gt;<br />      &lt;xs:sequence&gt;<br />        &lt;xs:element minOccurs=\"1\" name=\"CustomerInfo\" nillable=\"false\" type=\"tns:CustomerData\" /&gt;<br />      &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br />  &lt;/xs:element&gt;<br />  &lt;xs:complexType name=\"CustomerData\"&gt;<br />    &lt;xs:sequence&gt;<br />      &lt;xs:element name=\"CustomerID\" type=\"tns:CustIDLimitor\"&gt;<br />      &lt;/xs:element&gt;<br />      &lt;xs:element name=\"text\" type=\"tns:CustomerN\"&gt;<br />      &lt;/xs:element&gt;<br />      &lt;xs:element name=\"ssn\" type=\"tns:SSN\"&gt;<br />      &lt;/xs:element&gt;<br />      &lt;xs:element name=\"zip\" type=\"tns:us-zipcode\"&gt;<br />      &lt;/xs:element&gt;<br />    &lt;/xs:sequence&gt;<br />  &lt;/xs:complexType&gt;<br />  &lt;xs:simpleType name=\"SSN\"&gt;<br />    &lt;xs:restriction base=\"xs:token\"&gt;<br />      &lt;xs:pattern value=\"[0-9]{3}-[0-9]{2}-[0-9]{4}\"/&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:simpleType name=\"us-zipcode\"&gt;<br />    &lt;xs:restriction base=\"xs:string\"&gt;<br />      &lt;xs:pattern value=\"[0-9]{5}(-[0-9]{4})?\"/&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:simpleType name=\"CustomerN\"&gt;<br />    &lt;xs:restriction base=\"xs:string\"&gt;<br />      &lt;xs:minLength value=\"1\" /&gt;<br />      &lt;xs:maxLength value=\"5\" /&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:simpleType name=\"CustIDLimitor\"&gt;<br />    &lt;xs:restriction base=\"xs:int\"&gt;<br />      &lt;xs:minInclusive value=\"1\" /&gt;<br />      &lt;xs:maxInclusive value=\"5\" /&gt;<br />    &lt;/xs:restriction&gt;<br />  &lt;/xs:simpleType&gt;<br />  &lt;xs:element name=\"GetDataResponse\"&gt;<br />    &lt;xs:complexType&gt;<br />      &lt;xs:sequence&gt;<br />        &lt;xs:element minOccurs=\"1\" name=\"GetDataResult\" nillable=\"false\" type=\"tns:CustomerData\" /&gt;<br />      &lt;/xs:sequence&gt;<br />    &lt;/xs:complexType&gt;<br />  &lt;/xs:element&gt;<br />&lt;/xs:schema&gt;<br /></pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}