{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2134193538",
      "Content_Hash": "-1442827774"
    },
    "Metadata": [
      {
        "Id": [
          "0196cc1e-01c4-48ac-87d5-aab9c6fbb78c"
        ],
        "Id_History": [
          "0196cc1e-01c4-48ac-87d5-aab9c6fbb78c,d292bef3-597c-4113-a6da-077d4a04eb53,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Consider Log Throttling"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Consider Log Throttling"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Consider using log throttling.</p>\r\n  <h1>Why</h1>\r\n  <p>Logging too quickly or logging large amounts of data are the ideal conditions for a denial-of service attack and loss of logged entries. Poisoning the logs by repeatedly executing an operation allows an attacker to overwhelm the logging mechanism and cover up intrusions. </p>\r\n  <h1>When</h1>\r\n  <p>If your application performs logging operations, consider log throttling.</p>\r\n  <h1>How</h1>\r\n  <p>To perform log throttling:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the need for log throttling.</strong> Log throttling should be used when a given security event can be executed unlimited times within a limited period of time. If each occurrence of the event is logged, it can allow an attacker to poison your application's logs. </p>\r\n      <li>\r\n        <p>\r\n          <strong>Establish a log throttling mechanism.</strong> Determine which security events can be throttled. Establish a throttling policy and design the throttling mechanism around it. For example, design a smart logging mechanism where repeatedly executed operations would be buffered and combined into a single log entry. </p>\r\n        <p>Another approach for preventing poisoning of the logs is to prioritize the logged events such that an administrator can easily distinguish the important security events even if there is an attempt to poison the logs. For example, create a mechanism that:</p>\r\n        <ol>\r\n          <li>Establishes an importance rating so that each logged&amp;nbsp;event is&amp;nbsp;labeled with a different importance rating as appropriate. For example, financial transactions would be labeled as critical, authentication attempts as high, balance inquiries as medium, etc. <li>Categorizes logs according to importance. This makes it possible for an operator to efficiently pick out the important events that happened in the system. <li>Does not allow events with low or medium importance ratings to be logged more than a given threshold over a period of time.</li></li></li>\r\n        </ol>\r\n        <li>\r\n          <p>\r\n            <strong>Apply the log throttling mechanism.</strong> Identify the appropriate places in your application where log throttling should be applied. Follow the established mechanism when implementing log throttling. For instance, apply the smart throttling mechanism at places where the users can perform the same action unlimited times&amp;nbsp;such as&amp;nbsp;adding items into a shopping cart.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>MyApp's security auditing mechanism logs every security event inside the application. Because there is no log throttling on the \"add to shopping cart\" event in the application, it is possible for anybody to poison MyApp's logs by repeatedly executing that event; therefore, an attacker can hide an intrusion by poisoning the logs. </p>\r\n  <h1>Solution Example</h1>\r\n  <p>MyApp's security auditing mechanism logs every security event inside the application. Because there is an established log throttling mechanism at the \"add to shopping cart\" event, the application is able to detect and prevent attempted log poisoning through repeated executions of that event; therefore, an attacker cannot use the \"add to shopping cart\" event to poison the logs and hide an intrusion.</p>"
        ]
      }
    ]
  }
}