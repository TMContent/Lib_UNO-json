{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "2130280256",
      "Content_Hash": "625330730"
    },
    "Metadata": [
      {
        "Id": [
          "b070122f-f1d1-47da-a378-57f845d5db61"
        ],
        "Id_History": [
          "b070122f-f1d1-47da-a378-57f845d5db61,7d4289ee-7a54-4450-8537-0984382bf987,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Encrypt Communication Links"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Encrypt Communication Links"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* .NET\r\n\r\n\r\n## Summary ##\r\n\r\nEncrypt the communication channels when interacting with other software across the network. Encrypting the communication links allows the application to preserve confidentiality and integrity of the transmitted data.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code establishes a connection between two servers. Unfortunately, the communication is not encrypted and it is possible for an attacker to eavesdrop on the connection.\r\n\r\n~~~~\r\npublic Stream Connect(string remoteHost, int remotePort)\r\n{\r\n    TcpClient client = new TcpClient(remoteHost, remotePort);\r\n    NetworkStream netStream = client.GetStream();\r\n    return netStream;\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code establishes a connection between two servers. Because the communication is encrypted the confidentiality of the data in transit is preserved and it is impossible for an attacker to eavesdrop on the connection.\r\n\r\n~~~~\r\npublic Stream Connect(string remoteHost, int remotePort)\r\n{\r\n    TcpClient client = new TcpClient(remoteHost, remotePort);\r\n    SslStream netStream = new SslStream(client.GetStream(), false,\r\n               new RemoteCertificateValidationCallback(this.ValidateSSLCertificate));\r\n    try\r\n    {\r\n        netStream.AuthenticateAsClient(remoteHost);\r\n    }\r\n    catch (AuthenticationException ae)\r\n    {\r\n        client.Close();\r\n        throw ae;\r\n    }\r\n    return netStream;\r\n}\r\n~~~~\r\n\r\n---\r\nAdapted from Microsoft patterns & practices guidance."
        ]
      }
    ]
  }
}