{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1380939698",
      "Content_Hash": "2032322134"
    },
    "Metadata": [
      {
        "Id": [
          "c929277f-5bb0-44d5-9bf5-112c55927783"
        ],
        "Id_History": [
          "c929277f-5bb0-44d5-9bf5-112c55927783,8bdf0262-627e-4cd8-ab6d-b9c1b15de38b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Escape All Untrusted Data in HTML Contexts in JSF"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Escape All Untrusted Data in HTML Contexts in JSF"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Java <li>JSF</li></li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Escape HTML special characters in all user input that is displayed on web pages in HTML contexts. Data is said to be in a HTML context when that data is rendered as a part of a HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. The differences of encoding arise from the fact that different contexts have different special symbols and keywords. Output encoding routines have to be designed with the understanding of the context of the output in mind.</p>\r\n  <h1>Why</h1>\r\n  <p>It is important to properly encode all user-controlled data before it is outputted to a dynamically generated Web page. If data is not encoded then it will make its way to the browser in its original representation, which could be executable script code, causing the browser to interpret and run it. The most common case is of user-controlled input making its way into plain HTML; in this case it should be HTML-encoded before being inserted into the page.</p>\r\n  <h1>How</h1>\r\n  <p>To escape HTML characters in user input:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all pages that display data entered by users.</strong> Enumerate all the pages in the application. Make a list of all the pages that display user input.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Use &lt;h:outputText&gt; tags whenever displaying data entered by users.</strong> Review each page that displays data entered by users. Verify that Java code in each page uses &lt;<em>h:outputText</em>&gt; tags to escape special characters in user input. The syntax is very simple - please, see the solution example below.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Use third-party libraries to escape displayed user input if needed.</strong> It may be the case that more sophisticated functionality may be required, for example for XML or JavaScript contexts. In such cases, it is recommended to use third party libraries, such as <em>jTidy HTMLEncode, OWASP Reform, </em>or <em>OWASP ESAPI</em>. Links to these libraries are available at the bottom of this page. Different libraries have different capabilities and different weaknesses. Please, refer to the vendor's documentation of each potential encoding library to make sure that it provides comprehensive coverage for your application.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <pre>&lt;p&gt;User input is: #&amp;#123;user.input&amp;#125;&lt;/p&gt;</pre>\r\n  <p>The problem example above is vulnerable to XSS attacks - if the <em>user.input</em> expression contains malicious script entered by an attacker, whoever views the page with the code above will be at risk of running that script in the context of their browser.</p>\r\n  <h1>Solution Example</h1>\r\n  <pre>&lt;p&gt;User input is: &lt;h:outputText value=\"#&amp;#123;user.input&amp;#125;\"/&gt;&lt;/p&gt;</pre>\r\n  <p>In the solution example above, HTML tags are escaped in the expression <em>user.input</em> when being displayed. If the expression <em>user.input</em> contains malicious script entered by an attacker, it will not be executable, because HTML tags will have been escaped, and thus not interpreted as script by the browser.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about preventing XSS vulnerabilities, please see <a href=\"https://www.owasp.org/index.php/XSS_&amp;#37;28Cross_Site_Scripting&amp;#37;29_Prevention_Cheat_Sheet\">https://www.owasp.org/index.php/XSS_&amp;#37;28Cross_Site_Scripting&amp;#37;29_Prevention_Cheat_Sheet</a><li>For information about preventing DOM-based XSS vulnerabilities, please see <a href=\"https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet\">https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</a></li></li>\r\n  </ul>"
        ]
      }
    ]
  }
}