{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1530765147",
      "Content_Hash": "-473427541"
    },
    "Metadata": [
      {
        "Id": [
          "62593693-31c2-441a-b6f8-4fc47acac06d"
        ],
        "Id_History": [
          "62593693-31c2-441a-b6f8-4fc47acac06d,087b853a-f437-497b-a8d5-54111398c1d6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Store Passwords Securely"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "Store Passwords Securely"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* PHP\r\n\r\n\r\n## What to Do ##\r\n\r\nUse iterative hashing to protect stored passwords.\r\n\r\n\r\n## Why ##\r\n\r\nStoring hashes instead of plain-text passwords assures that an attacker cannot easily recover the passwords if he gains access to the password files. Adding salt to hashed files makes hashes much harder to break with dictionary attacks. Hashing should be applied multiple times to make hashing take longer and thus increase the computational resources required to attack the hashes. Iterative hashing applies a hashing function multiple times to a password and a salt, drastically increasing the time required to perform dictionary attacks.\r\n\r\n\r\n## When ##\r\n\r\nUse iterative hashing when storing passwords.\r\n\r\n\r\n## How ##\r\n\r\nThe following steps show how to use iterative hashing:\r\n\r\n1. **Define password storage requirements.** Most applications with a database back-end store the passwords in a database table. Another option is to store the passwords in files. If your application implements the policy of preventing users from entering previously used passwords, then the salted hashes of the previously used passwords have to be stored also. If the amount of the previously used passwords that cannot be used is configurable, it is recommended to use a separate table or file to store the hashes and salts of the previously used passwords.\r\n2. **Hash the password and the salt using multiple iterations.** Use the `password_hash` function to hash and salt the password using multiple iterations. The amount of iterations has to be the same when storing the password and when checking the password during authentication. The value returned by the `password_hash` function includes the hash and the salt.\r\n3. **Store the hash and the salt.** Store the hash and the salt in the file or database of your choosing. \r\n4. **Implement password verification.** During authentication, the password entered by the user should be checked against the value calculated using the `password_verify` function. Supply the password that the user has entered as the first argument to the `password_verify` function. Retrieve the stored hash and supply it as the second argument to the `password_verify` function. If the `password_verify` function returns `true`, then the user has entered the correct password.\r\n\r\n\r\n## Guideline ##\r\n\r\n* [Store Passwords Securely](00000000-0000-0000-0000-0000006adfa3)"
        ]
      }
    ]
  }
}