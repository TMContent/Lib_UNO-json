{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-378652903",
      "Content_Hash": "1456964144"
    },
    "Metadata": [
      {
        "Id": [
          "0949fe39-0723-49ec-970b-a914bb722695"
        ],
        "Id_History": [
          "0949fe39-0723-49ec-970b-a914bb722695,48d4230c-938f-4dbe-8569-fa94ba62a491,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Stored Procedures for SQL Queries"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Stored Procedures for SQL Queries"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASPNET4"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Always use stored procedures when interacting with a database. This increases performance and reduces the risk of a successful SQL injection attack.</p>\r\n  <h1>Why</h1>\r\n  <p>Using stored procedures helps prevent SQL injection attacks.</p>\r\n  <h1>When</h1>\r\n  <p>Whenever interaction with a database is required</p>\r\n  <h1>How</h1>\r\n  <p>First the stored procedure will have to be created on the database, this can be done using the following SQL syntax:</p>\r\n  <pre>CREATE PROCEDURE <br />sp_AddNewUser( @UserName nvarchar(255), @Email  nvarchar(255), <br />@FirstName nvarchar(255), @LastName nvarchar(255)) AS</pre>\r\n  <pre>-- INSERT the new user<br />INSERT INTO Users_Table(UserName, Email, FirstName, LastName)<br />VALUES(@UserName, @Email, @FirstName, @LastName)<br />--This will return the new user’s IDSELECT SCOPE_IDENTITY()</pre>\r\n  <p>Now to call the stored procedure we can use the following .NET code:</p>\r\n  <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string)<br />;myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand(\"sp_AddNewUser\", myConnection);<br />//Specify our command is a stored proceduremy<br />Command.CommandType = Command<br />Type.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);<br />UserParameter.Direction = ParameterDirection.Input;<br />UserParameter.Value = \"TestUser\";<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Repeat this code to add commands for each parameter in the SPROC<br />//Execute the command on the Database<br />myCommand.ExecuteNonQuery();</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>There are many ways to create a SQL injection vulnerability, and it’s even possible to do using stored procedures. The vulnerability lies in dynamically creating a SQL statement without bound parameters. In the following example the developer has built the SELECT statement by appending the components of the statements together with user provided input.</p>\r\n  <p>The developer wants to execute the following command where [username] is the username of the user whose e-mail we would like to return</p>\r\n  <pre>SELECT Email from Users_Table where <br />UserName = [username];<br /></pre>\r\n  <pre>The following code will create that statement an execute it on the database:<br />//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />string selectCommand = \"SELECT Email from Users_Table WHERE UserName = \"<br />         + userNameBox.Text;<br />SqlCommand myCommand = new SqlCommand(selectCommand);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>First a stored procedure needs to be created on the database, the following SQL syntax can be used to create the same select statement as above:</p>\r\n  <pre>CREATE PROCEDURE sp_ReturnEmail( @UserName nvarchar(255)) <br />ASSELECT Email FROM Users_Table where UserName = @UserName;</pre>\r\n  <p>Now the following code can be used to query the database using the stored procedure:</p>\r\n  <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand(\"sp_ReturnEmail\", myConnection);<br />//Specify our command is a stored procedure<br />myCommand.CommandType = CommandType.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);U<br />serParameter.Direction = ParameterDirection.Input;UserParameter.Value = [username];<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}