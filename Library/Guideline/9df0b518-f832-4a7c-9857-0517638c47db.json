{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1655607170",
      "Content_Hash": "1712994302"
    },
    "Metadata": [
      {
        "Id": [
          "9df0b518-f832-4a7c-9857-0517638c47db"
        ],
        "Id_History": [
          "9df0b518-f832-4a7c-9857-0517638c47db,bfee012f-2493-448e-a547-dad5f9c99c38,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Make Security Decisions Based on Client-Accessible Parameters"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Make Security Decisions Based on Client-Accessible Parameters"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Avoid making security decisions based on parameters that are sent by the client. </p>\r\n  <h1>Why</h1>\r\n  <p>Using client-accessible data to make security decisions allows the users to access and modify it. Therefore, an attacker would be able to bypass security measures.</p>\r\n  <h1>When</h1>\r\n  <p>If your application accepts and processes client-side information, avoid using that information to make security decisions.</p>\r\n  <h1>How</h1>\r\n  <p>Security decisions should not be based on any data that the client has control over. Common mistakes include relying on data inside unprotected cookies, hidden fields or query strings. </p>\r\n  <p>Use the following steps to ensure that no security decisions are based on client-accessible data:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify security decision points. </strong>Carefully examine the points in the code that are related to your application's security model. It is critical that no decision points are placed in the client. Because this is a design issue, it is recommended to use threat modeling to determine and evaluate the security decision points.</p>\r\n      <p />\r\n      <li>\r\n        <p>\r\n          <strong>Trace data that influences security decisions. </strong>Tracing the data that influences security decisions helps&amp;nbsp;determine if the data is vulnerable to any client-based attacks. Make sure that the client cannot modify or influence this data. </p>\r\n        <p />\r\n        <li>\r\n          <p>\r\n            <strong>Prove that security-related data cannot be tampered with by the client. </strong>Use cryptography or your application's design to ensure that security related data cannot be tampered with by the client. </p>\r\n          <li>\r\n            <p>\r\n              <strong>Mark all exceptions to this guideline. </strong>Note all exceptions made to this guideline. Thoroughly examine the code associated with such instances. Verify that all instances are provided in the business logic and are intended.</p>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code illustrates a servlet that accepts user-supplied input. Unfortunately, the application obtains the user's ID from the client which allows&amp;nbsp;an attacker to tamper withj&amp;nbsp;data that influences security decisions.</p>\r\n  <pre>public void doGet(HttpServletRequest request,<br />      HttpServletResponse response) throws ServletException, IOException&amp;#123;<br />      String userID = request.getParameter(\"userid\");<br />       ...<br /> &amp;#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code illustrates a servlet that accepts user-supplied input. Because the application obtains the user's ID from the user's session, it is not possible for an attacker to tamper with such data.</p>\r\n  <pre>public void doGet(HttpServletRequest request,<br />      HttpServletResponse response) throws ServletException, IOException&amp;#123;<br />      Session sess = request.getSession();<br />      String userID = (String)sess.getAttribute(\"userid\");<br /><br />      ...<br /><br />&amp;#125;</pre>"
        ]
      }
    ]
  }
}