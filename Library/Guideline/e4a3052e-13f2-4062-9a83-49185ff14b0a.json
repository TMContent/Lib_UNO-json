{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1592272971",
      "Content_Hash": "-1977801456"
    },
    "Metadata": [
      {
        "Id": [
          "e4a3052e-13f2-4062-9a83-49185ff14b0a"
        ],
        "Id_History": [
          "e4a3052e-13f2-4062-9a83-49185ff14b0a,4d2131dd-c52f-4832-84cb-5ab82e3c3f11,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Centralize Error Handling"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Centralize Error Handling"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Write a class or library dedicated to error handling. </p>\r\n  <h1>Why</h1>\r\n  <p>Centralized error handling is easier to test and implement correctly. Handling errors is important for security, so better error handling improves security.</p>\r\n  <h1>When</h1>\r\n  <p>Use the error handling class or library whenever error handling is necessary.</p>\r\n  <h1>How</h1>\r\n  <p>Perform the following actions to implement centralized error handling:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify existing error handling code.</strong> Review your code to find your existing error handling code. This code may be reused to write a centralized error handling subsystem.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Identify possible types of errors.</strong> Review your application design to identify possible errors that you don't already have error handling code for. This information will be used to write new error handling code.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Create a class for handling errors.</strong> Create a class or library for your centralized error handling code.</p>\r\n          <li>\r\n            <p>\r\n              <strong>Move error handling code.</strong> Move your existing error handling code to the new centralized error handling class or library.</p>\r\n            <li>\r\n              <p>\r\n                <strong>Add error handling code.</strong> Use information about errors and exceptions that may need to be handled to write functions to handle them.</p>\r\n              <li>\r\n                <p>\r\n                  <strong>Replace error handling code.</strong> Replace your existing error and exception handling code with calls to the new centralized error handling functions.</p>\r\n                <li>\r\n                  <p>\r\n                    <strong>Global exception handler.</strong> Write a handler for exceptions that are not handled by any other code specifically. Use the global exception handler throughout all code to catch exceptions when no other exception handler catches them.</p>\r\n                  <li>\r\n                    <p>\r\n                      <strong>Use centralized error handling.</strong> When adding new functionality to the program, use the centralized error handling subsystem to handle errors and exceptions.</p>\r\n                  </li>\r\n                </li>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>"
        ]
      }
    ]
  }
}