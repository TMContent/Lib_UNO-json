{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1038304500",
      "Content_Hash": "676936577"
    },
    "Metadata": [
      {
        "Id": [
          "a7c46576-d513-4086-9e2d-67a9673ed8f3"
        ],
        "Id_History": [
          "a7c46576-d513-4086-9e2d-67a9673ed8f3,aaac7c5b-6a47-48bc-8157-8cf1d2b9a942,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Serialize Sensitive Data"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Serialize Sensitive Data"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>If you must serialize your class and it contains sensitive data, avoid serializing the fields that contain the sensitive data. Either implement <b>ISerializable</b> to control the serialization behavior or decorate fields that contain sensitive data with the &#91;<b>NonSerialized</b>&#93; attribute. </p>\n  <h1>Why</h1>\n  <p>This is important because serialization places the data in memory, often in preparation for sending it over a network, making it easier for an attacker to gain access to it.</p>\n  <h1>When</h1>\n  <p>You need to be able to marshal object by value across a .NET remoting boundary (that is, across application domains, processes, or computers) or if you want to be able to persist the object state to create a flat data stream, perhaps for storage on the file system.</p>\n  <h1>How</h1>\n  <p>By default, all private and public fields are serialized. </p>\n  <p>The following example shows how to use the <b>&#91;NonSerialized&#93;</b> attribute to ensure that a specific field which contains sensitive data cannot be serialized.</p>\n  <pre>&#91;Serializable&#93;<br />public class Employee &#123;<br />&nbsp; // OK for name to be serialized<br />&nbsp; private string name;<br />&nbsp; // Prevent salary being serialized<br />&nbsp; &#91;NonSerialized&#93; private double annualSalary;<br />&nbsp; . . .<br />&#125;</pre>\n  <p>Alternatively, implement the <b>ISerializable</b> interface and explicitly control the serialization process. If you must serialize the sensitive item or items of data, consider encrypting the data first. The code that de-serializes your object must have access to the decryption key.</p>\n  <h1>&nbsp;</h1>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}