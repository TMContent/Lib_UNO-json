{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-463083924",
      "Content_Hash": "-483360"
    },
    "Metadata": [
      {
        "Id": [
          "24e081c4-0c62-4c93-a91a-42a96892d74d"
        ],
        "Id_History": [
          "24e081c4-0c62-4c93-a91a-42a96892d74d,a0ba1d3a-d81d-4ddb-9b8d-771e804f96d0,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Use Role Caching If Role Store Lookups Are Too Costly"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Role Caching If Role Store Lookups Are Too Costly"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Use role caching if role store lookups are too costly. </p>\r\n  <h1>Why</h1>\r\n  <p>If the performance overhead of role lookup is too great, perhaps because of slow data access or a large number of roles, role caching offers a way to improve performance.&amp;nbsp; If role cookies are properly protected, this change does not directly weaken system security, although it does increase the application's attack surface. </p>\r\n  <h1>When</h1>\r\n  <p>Applications which are running into performance problems related to role store lookups should consider role caching.&amp;nbsp; As it increases the attack surface of the application and requires some care to ensure that vulnerabilities are not introduced, it should only be used when needed. </p>\r\n  <h1>How</h1>\r\n  <p>Enable role caching in the roles cookie by setting the <b>cacheRolesInCookie</b> attribute to <b>true</b> in the Web.config file as shown here. </p>\r\n  <pre>&lt;roleManager enabled=\"true\"             <br />&amp;#9;cacheRolesInCookie=\"true\"      ... &gt;<br />&lt;/roleManager&gt;</pre>\r\n  <p>When role checks are performed, the roles cookie is checked before calling the role provider to check the list of roles within the data source. This improves performance.&amp;nbsp; The cookie is dynamically updated to cache the most recently validated role names.&amp;nbsp; If the role information for a user is too long to store in a cookie, ASP.NET stores only the most recently used role information in the cookie and then it looks up additional role information in the data source as required.&amp;nbsp; The most recently referred to roles end up being cached in the cookie. </p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}