{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1633027854",
      "Content_Hash": "1400333414"
    },
    "Metadata": [
      {
        "Id": [
          "0949b803-4421-4fd3-a291-38fd1a582fe2"
        ],
        "Id_History": [
          "0949b803-4421-4fd3-a291-38fd1a582fe2,0df67cea-7263-47d8-a35d-6be68760944e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Consider Authorization Granularity"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Consider Authorization Granularity"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies to ##\r\n\r\n- ASP.NET\r\n\r\n## What to Do ##\r\n\r\nConsider the authorization granularity that you use in the authenticated parts of your site. Choose the identity or identities that should be used to access resources across the layers of your application.\r\n\r\n\r\n## Why ##\r\n\r\nTo support per-user authorization, auditing, and per-user data retrieval you may need to flow the original caller's identity through various application tiers and across multiple computer boundaries. For example, if a back-end resource manager needs to perform per-caller authorization, the caller's identity must be passed to that resource manager. Based on resource manager authorization requirements and the auditing requirements of your system, identify which identities need to be passed through your application. \r\n\r\n\r\n## When ##\r\n\r\nTo access resources from Web-based applications, and optionally Web services, Enterprise Services and .NET Remoting components.\r\n\r\n\r\n## How ##\r\n\r\nThere are three common authorization models, each with varying degrees of granularity and scalability.\r\n\r\nThe most granular approach relies on impersonation. Resource access occurs using the security context of the caller. Windows ACLs on the secured resources (typically files or tables, or both) determine whether the caller is allowed to access the resource. If your application provides access primarily to user specific resources, this approach may be valid. It has the added advantage that operating system level auditing can be performed across the tiers of your application, because the original caller's security context flows at the operating system level and is used for resource access. However, the approach suffers from poor application scalability because effective connection pooling for database access is not possible. As a result, this approach is most frequently found in limited scale intranet-based applications.\r\n\r\nThe least granular but most scalable approach uses the application's process identity for resource access. This approach supports database connection pooling but it means that the permissions granted to the application's identity in the database are common, irrespective of the identity of the original caller. The primary authorization is performed in the application's logical middle tier using roles, which group together users who share the same privileges in the application. Access to classes and methods is restricted based on the role membership of the caller. To support the retrieval of per user data, a common approach is to include an identity column in the database tables and use query parameters to restrict the retrieved data. For example, you may pass the original caller's identity to the database at the application (not operating system) level through stored procedure parameters, and write queries similar to the following: `SELECT field1, field2, field3 FROM Table1 WHERE {some search criteria} AND UserName = @originalCallerUserName`. This model is referred to as the trusted subsystem or sometimes as the trusted server model.\r\n\r\nThe third option is to use a limited set of identities for resource access based on the role membership of the caller. This is really a hybrid of the two models described earlier. Callers are mapped to roles in the application's logical middle tier, and access to classes and methods is restricted based on role membership. Downstream resource access is performed using a restricted set of identities determined by the current caller's role membership. The advantage of this approach is that permissions can be assigned to separate logins in the database, and connection pooling is still effective with multiple pools of connections. The downside is that creating multiple thread access tokens used to establish different security contexts for downstream resource access using Windows authentication is a privileged operation that requires privileged process accounts. This is counter to the principle of least privilege.\r\n\r\n---\r\n\r\nAdapted from Microsoft patterns & practices guidance.\r\n"
        ]
      }
    ]
  }
}