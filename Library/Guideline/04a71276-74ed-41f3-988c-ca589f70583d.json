{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1641501692",
      "Content_Hash": "-1696764925"
    },
    "Metadata": [
      {
        "Id": [
          "04a71276-74ed-41f3-988c-ca589f70583d"
        ],
        "Id_History": [
          "04a71276-74ed-41f3-988c-ca589f70583d,b5e03655-d861-4284-b39f-6223d1bc6e1b,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Know Your Authorization Options"
        ],
        "Category": [
          "Design Considerations"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Know Your Authorization Options"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \n<li>Microsoft Visual Studio® 2008</li></li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Consider what authentication and authorizations options you have and which makes sense for your scenario.</p>\n  <h1>How</h1>\n  <p>Know your authorization options and choose the most appropriate for your scenario. First decide if you want to use resource-based or role-based authorization.&nbsp; Resource-based authorization uses ACLs on the resource to authorize the original caller.&nbsp; Role-based allows you to authorize access to service operations or resources based upon the group a user is in.</p>\n  <ul>\n    <li>If you choose to use role-based authorization then you can store your roles in Windows groups or in ASPNET roles.&nbsp;&nbsp; \n<li>If you are using Active Directory then consider using Windows groups based on ease of maintenance and the fact you maintain both roles and credentials in the Active Directory store.&nbsp; If you are not using Active Directory, consider using ASPNET roles and the ASP.NET Role Provider.</li></li>\n  </ul>\n  <p>Your authorization strategy may also be influenced by your choice of authentication:</p>\n  <ul>\n    <li>Resource-based authorization \n<ul><li>If you are using certificates authentication you will need to map certificates to Windows groups. \n<li>If you are using username authentication you will need to perform protocol transition. \n<li>Windows authentication will work with resource-based authorization by default. \n<li>Basic authentication will work with resource-based authorization by default. \n<li>Note: You need to impersonate for resource-based authorization.<br /></li></li></li></li></li></ul><li>Role-based authorization \n<ul><li>If you are using certificates authentication you will need to map certificates to Windows groups. \n<li>If you are using username authentication with Windows groups, you will need to perform protocol transition. \n<li>Username authentication will work with ASPNET roles by default. \n<li>Windows authentication will work with Windows groups by default. \n<li>Basic authentication will work with Windows groups by default.</li></li></li></li></li></ul></li></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}