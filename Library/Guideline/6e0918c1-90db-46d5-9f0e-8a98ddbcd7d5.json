{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "349567652",
      "Content_Hash": "-256852793"
    },
    "Metadata": [
      {
        "Id": [
          "6e0918c1-90db-46d5-9f0e-8a98ddbcd7d5"
        ],
        "Id_History": [
          "6e0918c1-90db-46d5-9f0e-8a98ddbcd7d5,19b901da-da17-4040-bf0c-5c9daaee317b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Store Passwords Securely"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Store Passwords Securely"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java 8+\r\n\r\n## What to Do ##\r\n\r\nUse iterative hashing to protect stored passwords.\r\n\r\n## How ##\r\n\r\nThe following steps show how to use iterative hashing:\r\n\r\n1. **Define password storage requirements.** Most applications with a database back-end store the passwords in a database table. Another option is to store the passwords in files. If your application implements the policy of preventing users from entering previously used passwords, then the salted hashes of the previously used passwords have to be stored also. If the amount of the previously used passwords that cannot be used is configurable, it is recommended to use a separate table or file to store the hashes and salts of the previously used passwords.\r\n2. **Generate a random salt value.** Each bit of salt doubles the memory and computational requirements for dictionary attacks. Recommended salt lengths are 64-bit or more. Use a random number generator of your choice to generate a random number of required size. Use this number as the salt.\r\n3. **Hash the password and the salt using multiple iterations.** Use the `SecretKeyFactory` API  with the `PBKDF2WithHmacSHA256` algorithm to hash and salt the password using multiple iterations. The amount of iterations has to be the same when storing the password and when checking the password during authentication.\r\n4. **Store the hash and the salt.** Store the hash in the file or database of your choosing. It is important to store both the hash and the salt, because the salt will have to be used when comparing user entered passwords to the hashed value.\r\n5. **Implement password verification.** During authentication, the password entered by the user should be checked against the value calculated using PBKDF2. To do this, retrieve the hash value and the salt from password storage. Use PBKDF2 to calculate a value based on user input and the stored salt and compare the resulting string against the stored hash. If the resulting hash is the same as the stored hash, the user has entered the correct password.\r\n\r\n**Note:** Never store the user credentials or their hashes on the client side (e.g. in cookies, hidden fields, etc.). Use sessions when there is a need to track the user or store their hashed credentials. \r\n\r\n## Solution Example ##\r\n\r\nThe following code validates the user based on a given username and password. It calculated the PBKDF2 using the password and salt. Then it compares the username and the produced hash against the hash stored in the backend database. Therefore, the password is not stored in the database.\r\n\r\n~~~~\r\npublic boolean validateUser(String user, char[] pass)\r\n\t\r\n{\r\n\ttry {\r\n\t\t...\r\n\t\tbyte[] storedPassHash;\r\n\t\tbyte[] salt;\r\n\t\t// set storedPassHash and salt to values from database\r\n\t\tbyte[] passHash = hashCredentials(pass, salt);\r\n\t\treturn Arrays.equals(passHash, storedPassHash);\r\n\t} catch (NoSuchAlgorithmException nsae) {\r\n\t\t// Add the appropriate logging and exception handling mechanisms\r\n\t\treturn false;\r\n\t} catch (InvalidKeySpecException ikse) {\r\n\t\t// Add the appropriate logging and exception handling mechanisms\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\npublic String hashCredentials(char[] pass, byte[] salt)\r\n       throws NoSuchAlgorithmException, InvalidKeySpecException\r\n{\r\n\tString algorithm = “PBKDF2WithHmacSHA256”;\r\n\tint derivedKeyLength = 160;\r\n\tint iterations = 10000;\r\n\r\n\tKeySpec spec = newPBEKeySpec(pass, salt, iterations, derivedKeyLength);\r\n\tSecreyKeyFactory skf = SecreyKeyFactory.getInstance(algorithm);\r\n\r\n\tReturn skf.generateSecret(spec).getEncoded();\r\n} \r\n\r\n~~~~\r\n\r\n## Guideline ##\r\n\r\n* [Store Passwords Securely](00000000-0000-0000-0000-0000006adfa3)"
        ]
      }
    ]
  }
}