{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1592794539",
      "Content_Hash": "1173379580"
    },
    "Metadata": [
      {
        "Id": [
          "4dfedb8e-17d3-495d-843e-476c5e470f27"
        ],
        "Id_History": [
          "4dfedb8e-17d3-495d-843e-476c5e470f27,2c5a6b77-4a47-455a-a795-9db947567582,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Encode All Output That Contains Untrusted Data by Context"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Encode All Output That Contains Untrusted Data by Context"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASP.NET 3.5"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Always encode output which contains untrusted data appropriately for the context in which it will be used. </p>\r\n  <h1>Why</h1>\r\n  <p>This prevents potentially malicious script tags from being interpreted as code by the client's browser</p>\r\n  <h1>When</h1>\r\n  <p>Whenever your application will echo untrusted input to the client use this guideline.&nbsp; Untrusted input can come from the user, from the client, from a database, or from untrusted code that your application calls into.</p>\r\n  <h1>How</h1>\r\n  <p>If you write output that includes user input or data from a shared database or a local file that you do not trust, encode it.&nbsp; Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks, among other problems.&nbsp; Encoding the data ensures that it is treated as literal text and not as script.&nbsp; You can use the <b>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</b> method.&nbsp; Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <b>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</b> to make them safe. </p>\r\n  <p>\r\n    <b>Note</b> &nbsp; &nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&nbsp; Also, early encoding of some data can result in double encoding problems. </p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}