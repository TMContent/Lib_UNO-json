{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "765155645",
      "Content_Hash": "-170310625"
    },
    "Metadata": [
      {
        "Id": [
          "461370b3-66e7-4ac3-900f-7e2f757c54a8"
        ],
        "Id_History": [
          "461370b3-66e7-4ac3-900f-7e2f757c54a8,db8b28a8-40d0-405b-bbef-e2964d35aca7,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Use a Global Exception Handler"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Use a Global Exception Handler for Unhandled Exceptions"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* ASP.NET 4.0+\r\n\r\n\r\n## Summary ##\r\n\r\nUse a global exception handler to catch unhandled exceptions. A global exception handler improves the application's robustness and minimizes the risk of information disclosure.\r\n\r\nUnhandled exceptions can be a serious stumbling block to an application's performance and security. Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions.\r\n\r\n\r\n## Problem Example ##\r\n\r\nAn ASP.NET application connects to a SQL database. However, the application does not have a generic error handler specified. As a result, when the connection times out application details are revealed to the client in the exception.\r\n\r\n\r\n## Solution Example ##\r\n\r\nAn ASP.NET application has code to connect to a SQL database. It has defined an application-level global error handler to trap and log all unhandled exceptions. This allows the application to present a generic error message to the client while logging more detailed information to the server.\r\n\r\n~~~~\r\n<%@ Application Language=\"C#\" %>\r\n<%@ Import Namespace=\"System.Diagnostics\" %>\r\n <script language=\"C#\" runat=\"server\">\r\n void Application_Error(object sender, EventArgs e)\r\n {\r\n     // Add the appropriate logging code\r\n     Exception ex = Server.GetLastError();\r\n     if (ex.GetType().Name.Equals(\"SQLException\"))\r\n     { \r\n        Server.Transfer(\"dbError.html\");\r\n     }\r\n     else\r\n     {\r\n         Server.Transfer(\"genericError.html\");\r\n     }\r\n         Server.ClearError();\r\n }\r\n </script>\r\n~~~~\r\n\r\n---\r\nAdapted from Microsoft patterns & practices guidance."
        ]
      }
    ]
  }
}