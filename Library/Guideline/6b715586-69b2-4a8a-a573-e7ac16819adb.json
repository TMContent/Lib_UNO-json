{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1142412021",
      "Content_Hash": "490559039"
    },
    "Metadata": [
      {
        "Id": [
          "6b715586-69b2-4a8a-a573-e7ac16819adb"
        ],
        "Id_History": [
          "6b715586-69b2-4a8a-a573-e7ac16819adb,c850f035-4052-49be-bea2-bea78243ce1d,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "If You Use the TCP Channel with .NET Remoting, Consider System.Net.Security.NegotiateStream"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "If You Use the TCP Channel with .NET Remoting, Consider System.Net.Security.NegotiateStream"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>Encrypt and sign the data transported over the channel and to authenticate callers. for this, you can configure the &lt;<b>channel</b>&gt; element and set <strong>authenticationMode</strong> as \"<strong>IndentifyCallers</strong>\" and <strong>secure</strong> as \"<strong>true</strong>\",&nbsp;in the Machine.config file, the Web.config file, or the App.config file, depending on whether you want to apply the setting across all applications on your computer or to a specific application.</p>\n  <h1>Why</h1>\n  <p>When data is sent over a wire, it typically passes through several intermediate relays on it's way towards&nbsp;some final destination. Using a&nbsp;encryption and authentication&nbsp;to transmit information is important because it adds protection against inadvertent eavesdropping and modification in mid transport.</p>\n  <h1>When</h1>\n  <p>This guideline should be followed when implementing an application to use TCP channel with remoting.</p>\n  <h1>How</h1>\n  <p>The following example shows how a server specifies that authentication is required and that the channel should be protected with encryption.</p>\n  <pre>&lt;channel ref=\"tcp\" port=\"1234\"<br />          authenticationMode=\"IdentifyCallers\" secure=\"true\" /&gt;  </pre>\n  <p>To authenticate clients by using their domain credentials, you need to set the <b>useDefaultCredentials</b> attribute of the &lt;<b>channel</b>&gt; in the client configuration to true. The following example shows a sample client configuration.</p>\n  <pre>&lt;channel ref=\"tcp\" useDefaultCredentials=\"true\" secure=\"true\"<br />          impersonationLevel=\"Identify\" /&gt;  </pre>\n  <p>To use Kerberos authentication, the client must specify a service principal name (SPN). This can be done programmatically or in the client's configuration file, as shown in the following example.</p>\n  <pre>&lt;channel ref=\"tcp\"<br />          useDefaultCredentials=\"true\"<br />          impersonationLevel=\"Identify\"<br />          spn=\"someService/somehost.com\" /&gt;  </pre>\n  <blockquote>\n    <b>Note</b>&nbsp;&nbsp;&nbsp;Use of .NET remoting is not encouraged for interprocess or server-to-server communication. .NET remoting is for cross-application domain communication within a process.</blockquote>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}