{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1553279434",
      "Content_Hash": "-864052134"
    },
    "Metadata": [
      {
        "Id": [
          "4b852978-8733-4636-bc8d-a83f111e0ec6"
        ],
        "Id_History": [
          "4b852978-8733-4636-bc8d-a83f111e0ec6,b81d7d3b-dc3b-430e-87c2-8061189af501,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "1sink junk Do Not Store Secrets in Inappropriate Places"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Web Application"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Store Secrets in Inappropriate Places"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>\r\n      <div>Web Application</div>\r\n    </li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Are there secrets or critical intellectual property embedded in the code? Review the design to make sure that it is absolutely necessary to store the secret. Ensure that the code eliminate secrets from memory.</p>\r\n  <h1>Why</h1>\r\n  <p>If the secrets are stored in code which is on the server, an attacker may be able to download it. Secrets are visible in binary assemblies. Managed code is easy to decompile. It is possible to recover code from the final executable that is very similar to the original code. Any sensitive intellectual property or hard coded secrets can be stolen with ease. An obfuscator can make this type of theft more difficult, but cannot entirely prevent it. Another common problem is to use hidden form fields thinking this information will not be visible to the user. </p>\r\n  <h1>When</h1>This is important guideline and should be followed all the time.&amp;nbsp; <h1>How</h1><p>Do not hard code secrets in code. Even if the source code is not exposed on the Web server, it is possible to extract string constants from compiled executable files. A configuration vulnerability may allow an attacker to retrieve the executable.</p><p>Avoid storing secrets such as database connection strings, passwords, and keys in plaintext. Use encryption and store encrypted strings.</p><p>Avoid the LSA because your application requires administration privileges to access it. This violates the core security principle of running with least privilege. Also, the LSA can store secrets in only a restricted number of slots. A better approach is to use DPAPI, available on Microsoft Windows&amp;#174;&amp;nbsp;2000 and later operating systems.</p><p>To store secrets such as database connection strings or service account credentials, use DPAPI. The main advantage to using DPAPI is that the platform system manages the encryption/decryption key and it is not an issue for the application. The key is either tied to a Windows user account or to a specific computer, depending on flags passed to the DPAPI functions.</p><p>DPAPI is best suited for encrypting information that can be manually recreated when the master keys are lost, for example, because a damaged server requires an operating system re-install. Data that cannot be recovered because you do not know the plaintext value, for example, customer credit card details, require an alternate approach that uses traditional symmetric key-based cryptography such as the use of triple-DES.</p><p>For more information about using DPAPI from Web applications, see Chapter 10, \"Building Secure ASP.NET Web Pages and Controls.\" at <a href=\"http://msdn2.microsoft.com/en-us/library/aa302426.aspx\">http://msdn2.microsoft.com/en-us/library/aa302426.aspx</a></p><h1>Additional Resources</h1><ul><li>For more information see, \"Chapter 4 - Design Guidelines for Secure Web Applications\" at <a href=\"http://msdn2.microsoft.com/en-us/library/aa302420.aspx\">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>&amp;nbsp; </li></ul><hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}