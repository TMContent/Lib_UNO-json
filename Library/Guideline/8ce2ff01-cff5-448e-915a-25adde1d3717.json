{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1733603537",
      "Content_Hash": "1441995915"
    },
    "Metadata": [
      {
        "Id": [
          "8ce2ff01-cff5-448e-915a-25adde1d3717"
        ],
        "Id_History": [
          "8ce2ff01-cff5-448e-915a-25adde1d3717,8137a4b1-2eb3-488e-8228-9b1f2bd7dcb5,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "1sink junk Be Careful with Canonicalization Issues"
        ],
        "Category": [
          "Canonicalization"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Web Application"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Be Careful with Canonicalization Issues"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Web Application</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Determine whether your application uses names such as user names, file names, or URLs&amp;nbsp;that are based on input to make security decisions. If it does, your code is susceptible to canonicalization issues. </p>\r\n  <h1>Why</h1>\r\n  <p>These are notorious for canonicalization issues because of the many ways that the names can be represented. If your application does accept names as input, make sure that they are validated and converted to their canonical representation before processing. </p>\r\n  <h1>When</h1>\r\n  <p>If your application does accept file names or URLs as input, make sure that they are validated and converted to their canonical representation before processing. </p>\r\n  <h1>How</h1>\r\n  <p>Data in canonical form is in its most standard or simplest form. Canonicalization is the process of converting data to its canonical form. File paths and URLs are particularly prone to canonicalization issues and many well-known exploits are a direct result of canonicalization bugs. For example, consider the following string that contains a file and path in its canonical form.</p>\r\n  <pre>c:\\temp\\somefile.dat</pre>\r\n  <p>The following strings could also represent the same file.</p>\r\n  <pre>somefile.dat<br />c:\\temp\\subdir\\..\\somefile.dat<br />c:\\temp\\somefile.dat..\\somefile.dat<br />c%3A%5Ctemp%5Csubdir%5C%2E%2E%5Csomefile.dat</pre>\r\n  <p />In the last example, characters have been specified in hexadecimal form: <ul><li>%3A is the colon character. </li><li>%5C is the backslash character. </li><li>%2E is the dot character. </li></ul><p>You should generally try to avoid designing applications that accept input file names from the user to avoid canonicalization issues. Consider alternative designs instead. For example, let the application determine the file name for the user.</p><p>If you do need to accept input file names, make sure they are strictly formed before making security decisions such as granting or denying access to the specified file.</p><hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}