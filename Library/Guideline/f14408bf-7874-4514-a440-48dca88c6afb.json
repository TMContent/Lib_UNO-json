{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-82811200",
      "Content_Hash": "-580620276"
    },
    "Metadata": [
      {
        "Id": [
          "f14408bf-7874-4514-a440-48dca88c6afb"
        ],
        "Id_History": [
          "f14408bf-7874-4514-a440-48dca88c6afb,64ad1da0-8cb1-4116-9a14-361876441c1b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Regular Expressions to Validate Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Regular Expressions to Validate Input"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Do ##\n\nUse regular expressions to validate input.\n\n\n## Why ##\n\nA good input validation strategy is to constrain input to known valid values, reject known bad values and to sanitize the input that passes validation. Rejecting bad values is not to be relied on, because there are too many possible bad values. However, it is possible to filter out at least some bad input. Constraining input can be done effectively using regular expressions.\n\n\n## When ##\n\nConstrain input as the first step of input validation.\n\n\n## How ##\n\nPerform the following actions to constrain input using regular expressions:\n\n1. **Use a regular expression library.** C++ does not have built-in regular expression functionality. Find a trusted library that provides regular expression functionality.\n\n2. **Determine valid input patterns.** Identify the types of valid input for your input application. For example, some input follows obvious patterns, such as social security or credit card numbers. Other types of input may have less obvious patterns, such as file names. Write regular expressions that describe valid input for your application. \n\n3. **Validate length before applying regular expressions.** Applying regular expressions to very long data can result in denial of service conditions, so length of data should be validated first.\n\n4. **Use regular expressions to constrain input.** Use the regular expressions you have written to constrain input as the first step of your input validation strategy.\n\n\n## Additional Resources ##\n\n* For examples of regular expressions that can be used for input validation, see [https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository](https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository)\n\n\n---\n\nAdapted from Microsoft patterns & practices guidance.\n"
        ]
      }
    ]
  }
}