{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1876038580",
      "Content_Hash": "263523384"
    },
    "Metadata": [
      {
        "Id": [
          "8aeb811d-3c04-48a4-889f-25871e535933"
        ],
        "Id_History": [
          "8aeb811d-3c04-48a4-889f-25871e535933,26cac755-aa07-45b5-8667-b779e262b977,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Define a Security Policy"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Define a Security Policy"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Applications written using Servlets or JSP.</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Define a security policy for your application while applying the principle of least privilege. Restrict application execution to allow only&nbsp;the minimum set of necessary actions.</p>\n  <h1>Why</h1>\n  <p>Defining a Java security policy is a defense in-depth mechanism for restricting your application from performing tasks that the operating system would otherwise allow. This is especially important in&nbsp;the event&nbsp;your application becomes compromised by an attacker.</p>\n  <h1>When</h1>\n  <p>Always define a security policy for your application. This process should take place during your application's design stage.</p>\n  <h1>How</h1>\n  <p>Although Java applications run inside a virtual machine, do not execute your application in the context of a privileged user. Consider tightening the restrictions on your application by employing Java Policies.</p>\n  <p>Use the following steps to successfully utilize Java Permissions:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify the system resources that your application uses. </strong>Enumerate all resources that your application will need to access. Identify the types of permissions that your application requires to access those resources. For example, your application will need to connect to your database via a socket connection or write to your logs.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Identify your application. </strong>Your application can be identified via two ways inside a Java policy â€” code signing or code base.</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Code signing.</strong> Always sign your code whenever possible. This ensures the authenticity of your code. Use Java's KeyTool when signing your code.</p>\n        </li>\n        <li>\n          <p>\n            <strong>Code base.</strong> Identify the location of your code. Example:</p>\n          <pre>codeBase \"file:e:/myapp/bin/\"</pre>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Create the appropriate policy. </strong>Once all required resources are enumerated, create a Java policy that reflects the type of access that is required for each resource. Example:</p>\n      <pre>grant codeBase \"file:e:/myapp/bin/-\" <br />{<br />    // A placeholder for all appropriate permissions<br />};</pre>\n      <p>Assign a permission for each required resource. Java provides different types of permissions, each of which can be customized to meet your application's needs:</p>\n      <ul>\n        <li>\n          <p>\n            <strong>java.security.AllPermission:</strong>\n            <em>AllPermission</em> grants all other permissions to the code. It should seldom&nbsp;be used. Example:</p>\n          <pre>permission java.security.AllPermission;</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.sound.sampled.AudioPermission:</strong>\n            <em>AudioPermission</em> grants access rights to the system's audio components. It should be used only when the application is required to play or record audio. Example:</p>\n          <pre>permission javax.sound.sampled.AudioPermission \"play\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.AuthPermission:</strong>\n            <em>AuthPermission</em> is used during authentication procedures. The <em>AuthPermission's</em> only argument is the name of the security configuration parameter. This permission class is used to guard access to the <em>Policy, Subject, LoginContext</em>, and <em>Configuration</em> objects. Example:</p>\n          <pre>permission javax.security.auth.AuthPermission \"modifyPrincipals\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.awt.AWTPermission:</strong>\n            <em>AWTPermission</em> grants access to the system's user experience and graphical interface. For example, the following permission would allow the application to access the system's clipboard:</p>\n          <pre>permission java.awt.AWTPermission \"accessClipboard\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.kerberos.DelegationPermission:</strong>\n            <em>DelegationPermission</em> restricts the usage of the Kerberos delegation model. Example:</p>\n          <pre>permission javax.security.auth.kerberos.DelegationPermission<br />       \"\\\"host/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\\\"\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.io.FilePermission:</strong>\n            <em>FilePermission</em> grants access to files on the local system. Access right are read, write, execute, delete. Note that <em>FilePermission</em> always grants read access to files within the code's directory and any subdirectories. Example:</p>\n          <pre>permission java.io.FilePermission \"e:/myapp/logs/20061016.log\", \"write\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.util.logging.LoggingPermission:</strong>\n            <em>LoggingPermission</em> is associated with Java's standard logging mechanism. Currently <em>LoggingPermission</em> grants only the right to control Java's logging configuration. Example:</p>\n          <pre>permission java.util.logging.LoggingPermission \"control\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.net.NetPermission:</strong>\n            <em>NetPermission</em> grants access to various network permissions. For example, the following permission allows the ability to specify a stream handler when constructing a URL:</p>\n          <pre>permission java.net.NetPermission \"specifyStreamHandler\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.PrivateCredentialPermission:</strong>\n            <em>PrivateCredentialPermission</em> protects access to the private <em>Credentials</em> belonging to a particular <em>Subject</em>. Example:</p>\n          <pre>permission javax.security.auth.PrivateCredentialPermission<br />                \"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\",\"read\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.util.PropertyPermission:</strong>\n            <em>PropertyPermission</em> specifies the read/write access to an object's or System's properties. Example:</p>\n          <pre>permission java.util.PropertyPermission \"java.home\", \"read\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.lang.reflect.ReflectPermission:</strong>\n            <em>ReflectPermission</em> grants access to reflective operations. Currently it only allows suppressing the standard Java language access checks (i.e. public, protected and private) by reflected objects at their point of use. Example:</p>\n          <pre>permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.lang.RuntimePermission:</strong>\n            <em>RuntimePermission</em> grants access to runtime operations such as loading external libraries and halting the JVM. Example:</p>\n          <pre>permission java.lang.RuntimePermission \"accessDeclaredMembers\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.security.SecurityPermission:</strong>\n            <em>SecurityPermission</em> is used any security related events. Example:</p>\n          <pre>permission java.security.SecurityPermission \"createAccessControlContext\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.io.SerializablePermission:</strong>\n            <em>SerializablePermission</em> grant access to more advanced features of Java's serialization model. For example, the following permission allows the substitution of one object for another during serialization:</p>\n          <pre>permission java.io.SerializablePermission \"enableSubstitution\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.kerberos.ServicePermission:</strong>\n            <em>ServicePermission</em> protects the access to Kerberos services and any supplemental credentials. Example:</p>\n          <pre>permission javax.security.auth.kerberos.ServicePermission<br />                                    \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.net.SocketPermission:</strong>\n            <em>SocketPermission</em> grants access to the network via sockets. It allows your application to connect to a host, accept connections from a host, listen on a given port, or resolve the other host's IP/hostname. Example:</p>\n          <pre>permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.sql.SQLPermission:</strong>\n            <em>SQLPermission</em> grants access to operations executed during database access. Currently all standard Java methods that use <em>SQLPermission</em> are deprecated.<br /></p>\n        </li>\n        <li>\n          <p>\n            <strong>javax.net.ssl.SSLPermission:</strong>\n            <em>SSLPermission</em> grants access to SSL related operations. For example, an <em>SSLPermission</em> would be required to get the <em>SSLSessionContext</em> of an <em>SSLSession</em>:</p>\n          <pre>permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";</pre>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Load the policy at runtime. </strong>By default Java provides two policy files: a system policy file<em> ({java.home}/lib/security/java.policy)</em> and a user policy file <em>({user.home}/.java.policy)</em>. Use the <em>-Djava.security.policy(={policy file})</em> flag to load your policy during the start-up routine of your application's server. Make sure you use only a single <strong>=</strong> to append your policy to the JVM's default policies as <strong>==</strong> will force the JVM to load your policy only. Example: </p>\n      <pre>-Djava.security.policy=e:/myapp/config/myapp.policy</pre>\n    </li>\n    <li>\n      <p>\n        <strong>Enforce your application's policy. </strong>To fully enforce your application's policy, attach a <em>SecurityManager</em> to the System object. Because most standard Java packages come with built-in permission checks that are linked to the System's <em>SecurityManager</em>, enforcing a certain set of permissions is a fairly easy task. Example: </p>\n      <pre>if (System.getSecurityManager() == null)<br />{<br />      System.setSecurityManager(new SecurityManager());<br />}</pre>\n      <p>or</p>\n      <pre>-Djava.security.manager</pre>\n      <p>Be aware that enforcing a security policy may restrict access to various resources that are essential to the application's environment. Examples of such resources include, but are not limited to, use of network sockets, application server's local files, etc. Use the following steps to resolve such problems:</p>\n      <ol>\n        <li>\n          <p>\n            <strong>Enumerate all permissions that are granted to your application's environment. </strong>Enumerating all granted permissions to your application's environment helps identify the basic functionality that it requires for its normal operations. The following code helps you identify all permissions that your application inherits from its environment:</p>\n          <pre>public void doGet(HttpServletRequest request, HttpServletResponse response)<br />      throws ServletException, IOException<br />{<br />      PrintWriter out = response.getWriter();<br />      CodeSigner[] cSign = null;<br />      CodeSource cSource = new CodeSource(null, cSign);<br />      Principal[] principals = new Principal[0];<br />      ProtectionDomain pDomain = new ProtectionDomain(cSource,<br />                                                    null, null, principals);<br />      java.security.Policy policy = java.security.Policy.getPolicy();<br />      PermissionCollection permCollect = policy.getPermissions(pDomain);<br />      Enumeration permList = permCollect.elements();<br />      while (permList.hasMoreElements())<br />      {<br />            out.println( \"&lt;br&gt;\" + permList.nextElement().toString());<br />      }<br />}</pre>\n          <p>Note that the code snippet will perform its intended action only if the System's <em>SecurityManager</em> is set to <em>null</em>.</p>\n        </li>\n        <li>\n          <p />\n          <strong>Check if your application's environment performs unauthorized actions. </strong>Enable the <em>SecurityManager</em> during the start-up routine of your application's environment. Monitor the environment's logs for any <em>access denied</em> errors. For instance, Tomcat will not function properly if the administrator does not grant a <em>SocketPermission</em> to connect and resolve 127.0.0.1 on port 8005: <p /><pre>Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"<br />     java.security.AccessControlException: access denied<br />          (java.lang.RuntimePermission setContextClassLoader)<br />...<br />Caused by: java.security.AccessControlException: access denied<br />          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)</pre></li>\n        <li>\n          <p>\n            <strong>Grant the essential permissions for your application's environment. </strong>Grant all essential permissions into the security policy for your application's environment to allow the environment to function properly.</p>\n        </li>\n      </ol>\n    </li>\n    <li>\n      <p>\n        <strong>Protect security policy files. </strong>Make sure that appropriate security measures are taken when storing the security policy files.</p>\n      <ul>\n        <li>\n          <strong>Choose a security policy directory:</strong> Dedicate a directory for storing your application's security policy files. Make sure the directory is not web-accessible. This limits the scope of users&nbsp;who can potentially compromise the contents inside the directory. </li>\n        <li>\n          <strong>Set appropriate permissions:</strong> Apply the appropriate filesystem permissions such that the security policy files can be only accessed by your application and its administrators.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Avoid common mistakes</strong>.</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Delegate a Policy Manager:</strong> Java allows its applications to alter the JVM's policies during runtime. If your application needs to alter its policies during runtime, create a custom Policy Manager and delegate it the task of altering Java policies. Using the <em>SecurityPermission class</em>, enforce strict access control to the manager's functionality such that only authorized components can request modifications to the JVM's policies.</p>\n          <p>The following permissions must be granted to the Policy Manager's code:</p>\n          <pre>java.security.SecurityPermission \"getPolicy\";<br />java.security.SecurityPermission \"setPolicy\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>Enforce the security policy as early as possible:</strong> Delaying the enforcement of the security policies provides a bigger window of opportunity for an attacker to execute a payload through your compromised application.</p>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The following snippet shows part of the Java policy for an application. Because the developer has not identified his component, the applied permission will be valid for any other component hosted within the same Java application.</p>\n  <pre>grant <br />{<br />permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";<br />}; </pre>\n  <h1>Solution Example</h1>\n  <p>The following snippet shows part of the Java policy for an application. Because the developer has identified his component, the applied permission will be valid only for his component hosted within the Java application.</p>\n  <pre>grant codeBase \"file:e:/myapp/bin/DBManager/-\" <br />{<br />permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";<br />};</pre>\n  <br />"
        ]
      }
    ]
  }
}