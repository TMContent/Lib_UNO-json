{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-687718551",
      "Content_Hash": "-1338941739"
    },
    "Metadata": [
      {
        "Id": [
          "73c9c4be-a26e-4d66-8067-cea0862f086b"
        ],
        "Id_History": [
          "73c9c4be-a26e-4d66-8067-cea0862f086b,18521469-00d0-4dcc-8911-6dca0d313ccd,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Free Dynamically Allocated Memory Once"
        ],
        "Category": [
          "Unmanaged Code"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Free Dynamically Allocated Memory Once"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* C++\r\n\r\n\r\n## What to Do ##\r\n\r\nWrite code in such a way that provides a guarantee that allocated memory is freed only once.\r\n\r\n\r\n## Why ##\r\n\r\nFreeing memory multiple times may corrupt heap data structures and result in vulnerabilities that allow arbitrary code execution.\r\n\r\n\r\n## How ##\r\n\r\nWrite code in a way that guarantees that dynamically allocated memory is freed only once. Avoid freeing memory from loops, conditional statements, or error handling code. In the event that it is necessary to delete objects in such circumstances, pay particular care to write code in such a way that objects are not deleted multiple times. Rewrite code if there is no guarantee that deallocation is performed only once.\r\n\r\n\r\n## Problem Example ##\r\n\r\n~~~~\r\nfloat *array = new float [5];\r\nint errorcode = somefunction(array);\r\nif(errorcode < 1)\r\n{\r\n  //handle error\r\n  delete[] array;\r\n}\r\ndelete[] array;\r\n~~~~\r\n\r\nThere are two mistakes in this code:\r\nThe pointer is not set to null after deallocation.\r\nDynamically allocated memory may be deallocated twice if the error code returned by somefunction is less than 1.\r\n\r\n\r\n## Solution Example ##\r\n\r\n~~~~\r\nfloat *array = new float [5];\r\nint errorcode = somefunction(array);\r\nif(errorcode <1)\r\n{\r\n  //handle error\r\n}\r\ndelete[] array;\r\narray = NULL;\r\n~~~~\r\n\r\nDynamically allocated memory is only deallocated once, because the delete operator has been removed from error handling code. The pointer is set to null to prevent dangling pointer vulnerabilities."
        ]
      }
    ]
  }
}