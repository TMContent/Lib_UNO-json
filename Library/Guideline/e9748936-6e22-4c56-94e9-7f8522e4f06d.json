{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1858646381",
      "Content_Hash": "-907549900"
    },
    "Metadata": [
      {
        "Id": [
          "e9748936-6e22-4c56-94e9-7f8522e4f06d"
        ],
        "Id_History": [
          "e9748936-6e22-4c56-94e9-7f8522e4f06d,155fbb17-007a-4926-b5fe-4046a7ae4db4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Convert Integers Correctly"
        ],
        "Category": [
          "Memory Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Convert Integers Correctly"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* C++\r\n\r\n\r\n## What to Do ##\r\n\r\nConvert integers in a way that does not cause truncation or lose sign information.\r\n\r\n\r\n## Why ##\r\n\r\nIf data is lost during conversion, an unpredictable/unintended value may be stored in a variable. If this variable is used for program flow control, memory operations, or array indexing, an arbitrary code execution vulnerability may result.\r\n\r\n\r\n## How ##\r\n\r\nIdentify all integer conversion operations. Add range checks to verify that the result of integer conversion is valid before assigning the result to a variable.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code may result in truncation, because an unsigned integer has a larger maximum value than a signed integer. The exact error may be different on different platforms.\r\n\r\n~~~~\r\nunsigned short a = 50000;\r\nsigned short b = static_cast<signed short>(a);\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nTo fix the problem example above, add range checks before assigning the result of conversion to a variable.\r\n\r\n~~~~\r\nunsigned short a = 50000;\r\nif (a > SHRT_MIN && a < SHRT_MAX) signed short b = static_cast<signed short>(a);\r\nelse {/*handle error*/}\r\n~~~~"
        ]
      }
    ]
  }
}