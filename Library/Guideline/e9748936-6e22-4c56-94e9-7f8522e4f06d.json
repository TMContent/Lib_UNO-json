{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1858646381",
      "Content_Hash": "-907549900"
    },
    "Metadata": [
      {
        "Id": [
          "e9748936-6e22-4c56-94e9-7f8522e4f06d"
        ],
        "Id_History": [
          "e9748936-6e22-4c56-94e9-7f8522e4f06d,155fbb17-007a-4926-b5fe-4046a7ae4db4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Convert Integers Correctly"
        ],
        "Category": [
          "Memory Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Convert Integers Correctly"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Convert integers in a way that does not cause truncation or lose sign information.</p>\r\n  <h1>Why</h1>\r\n  <p>If data is lost during conversion, an unpredictable/unintended value may be stored in a variable. If this variable is used for program flow control, memory operations, or array indexing, an arbitrary code execution vulnerability may result.</p>\r\n  <h1>How</h1>\r\n  <p>Identify all integer conversion operations. Add range checks to verify that the result of integer conversion is valid before assigning the result to a variable.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code may result in truncation, because an unsigned integer has a larger maximum value than a signed integer. The exact error may be different on different platforms.</p>\r\n  <pre>unsigned short a = 50000;<br />signed short b = static_cast&lt;signed short&gt;(a);</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>To fix the problem example above, add range checks before assigning the result of conversion to a variable.</p>\r\n  <pre>unsigned short a = 50000;<br />if (a &gt; SHRT_MIN && a &lt; SHRT_MAX) signed short b = static_cast&lt;signed short&gt;(a);<br />else &#123;/&#42;handle error&#42;/&#125;</pre>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345\">Protect Against Integer Overflows</a>\r\n    </li>\r\n  </ul>\r\n  <br />"
        ]
      }
    ]
  }
}