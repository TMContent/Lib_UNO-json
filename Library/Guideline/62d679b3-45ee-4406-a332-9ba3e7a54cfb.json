{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-244877153",
      "Content_Hash": "-140942460"
    },
    "Metadata": [
      {
        "Id": [
          "62d679b3-45ee-4406-a332-9ba3e7a54cfb"
        ],
        "Id_History": [
          "62d679b3-45ee-4406-a332-9ba3e7a54cfb,7f7b8636-af3e-4394-a25a-c51db37c3e4f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Do Not Log Sensitive Information"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Log Sensitive Information"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Ensure that any sensitive information a user submits to your site does not get logged, either intentionally or as a side-effect of the system design. For instance, if you are resetting a user's password, do not transmit the new password as the argument to an HTTP GET request, as it will be logged in the web server's logs (and potentially also the logs of any intermediate web proxy). Alternately, when designing logging in an order management system, make sure that details like shipping addresses, customer names, and (most importantly) payment details like credit card numbers don't end up in the transaction log.</p>\r\n  <h1>Why</h1>\r\n  <p>The permissions required to access log files are often less restrictive than what is required to view sensitive information in an application. By logging sensitive information you may be allowing a less privileged user to view information they would otherwise not have access to. This also increases your attack surface by making your log files a target of interest for attackers.</p>\r\n  <h1>When</h1>\r\n  <p>Apply this guideline if your application handles sensitive data and produces logs. Logs may be file, database, event log, or network based.</p>\r\n  <h1>How</h1>\r\n  <p>Ensuring that sensitive information isn't logged is very easy, with a little bit of care. The following steps will walk you through the process.</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive data in your application</strong>: In the design phase, create a list of all sensitive user data your system handles. Include composite data elements which are sensitive in combination, like multi-part registration credentials or fields which together uniquely identify an individual. Remember that sensitive data can come in a wide variety of formats. Names of customers, government issued ID numbers, credit card or other financial information, passwords, and private keys are all examples of sensitive information. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. In general sensitive data can be defined as follows: </p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with users. </li>\r\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\r\n        <li>Information that comes from an external trusted source that is not designed to be shared with users. </li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure sensitive data does not get logged</strong>: When designing a logging architecture for your application, pay special attention to components that will handle sensitive data. Design logging systems for these components so that they do not collect sensitive data. When recording transactions inside your system, log only the minimum amount of information needed. If you're logging a new order from a customer, log only the time, customer ID, and order ID. Information like customer names, items ordered, or payment information can be reconstructed from transaction records and can be left out of the logging system. </p>\r\n      <p>Take special care with error logs, which are a frequent cause of problems. If you create a log event when an exception occurs or when a SQL transaction is rolled back, be sure to sanitize any sensitive information that might exist in the exception context or SQL error before logging it. It's ok to have a verbose logging mode for use when debugging a system, but ensure that verbose logging is not turned on in production. If a problem occurs in production which requires the use of verbose logging, treat any logs generated as sensitive information. If it's likely that this is going to happen, design the logging system to segregate and protect sensitive data. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Be aware of logs created by external systems</strong>: If your application relies on other systems, understand what data they log and design your system so that sensitive values are not accidentally captured. Keep in mind that these interactions may be transparent within the application's code, such as HTTP server logs which record all values in a GET request.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>An ASP.NET application implements an online order entry system. Customers connect to the web front end and place their orders, which are stored in a database for later fulfillment. There are three logging systems, the HTTP logs from IIS and the application health monitoring logs, both on the front end web application server, and the SQL transaction log on the database server. </p>\r\n  <ul>\r\n    <li>HTTP requests are made via a mixture of GETs and POSTs, with the result that a number of pieces of sensitive data regularly appear in the web server logs. </li>\r\n    <li>Exceptions are logged verbosely and without any filtering, so any and all user data in scope at the time of the exception ends up in the health monitoring log. Also, SQL transaction rollbacks log all query data for debugging purposes, resulting in even more sensitive information being logged. </li>\r\n    <li>Inside the stored procedures on the database side, all transactions are written to a log table for debugging purposes. The entries in the log table contain all the details of the transaction, so any support personnel with access to the transaction log can see all customer information.</li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <p>An ASP.NET application implements an online order entry system. Customers connect to the web front end and place their orders, which are stored in a database for later fulfillment. There are three logging systems, the HTTP logs from IIS and the application health monitoring logs, both on the front end web application server, and the SQL transaction log on the database server. </p>\r\n  <ul>\r\n    <li>To sanitize the web server logs, all HTTP requests which have sensitive information in them take place via POST, not GET. This way, sensitive data is not logged by the web server. </li>\r\n    <li>The application health monitoring logs are slightly more complicated. The application logs only the exception or SQL error occurred and the context in which it happened. There are two separate log handlers; a more verbose one which is used when no sensitive data can be logged (i.e., there is no sensitive data in the current context), and a default, less verbose handler. For detailed debugging dumps, a seperate facility exists to write them out to a file which is ACLed to prevent users who should not have access to the information in question from reading them. For higher security environments, a separate encrypted remote logging facility is used instead of local logs. </li>\r\n    <li>The database logs are simplified so they contain only a timestamp, order ID, and possibly a user ID for each transaction. This keeps your data normalized and means that users with appropriate privileges retrieve all the data, while administrators or support personnel can see only basic information.</li>\r\n  </ul>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}