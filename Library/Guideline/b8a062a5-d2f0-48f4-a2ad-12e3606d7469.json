{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-880847783",
      "Content_Hash": "713523604"
    },
    "Metadata": [
      {
        "Id": [
          "b8a062a5-d2f0-48f4-a2ad-12e3606d7469"
        ],
        "Id_History": [
          "b8a062a5-d2f0-48f4-a2ad-12e3606d7469,c4eefac5-d421-4016-aa18-be73248f5679,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Use Structured Exception Handling"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Structured Exception Handling"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \r\n<li>Microsoft Visual Studio® 2008</li></li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use structured exception handling and catch exception conditions. </p>\r\n  <h1>Why</h1>\r\n  <p>Doing this improves robustness and avoids leaving your application in an inconsistent state that may lead to information disclosure. It also helps protect your application from denial of service attacks.&nbsp;</p>\r\n  <h1>When</h1>\r\n  <p>Use structured exceptions whenever erroneous or exceptional conditions can be raised in a given program. </p>\r\n  <h1>How</h1>\r\n  <p>In C#, you can use the try / catch and finally construct to implement the structured exception handling. You can protect code by placing it inside try blocks, and implement catch blocks to log and process exceptions. Also, use the finally construct to ensure that critical system resources such as connections are closed, whether an exception condition occurs or not.<br /></p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For exceptions reference, see the Exceptions Reference at <a href=\"http://msdn2.microsoft.com/en-us/library/ms733763.aspx\">http://msdn2.microsoft.com/en-us/library/ms733763.aspx</a><li>For exception management Q&A, see the Exception Management section of “WCF 3.5 Questions and Answers “ at <a href=\"http://www.codeplex.com/WCFSecurity/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home\">http://www.codeplex.com/WCFSecurity/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home</a></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}