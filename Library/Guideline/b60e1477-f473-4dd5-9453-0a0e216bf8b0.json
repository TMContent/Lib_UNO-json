{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "394308897",
      "Content_Hash": "-605881494"
    },
    "Metadata": [
      {
        "Id": [
          "b60e1477-f473-4dd5-9453-0a0e216bf8b0"
        ],
        "Id_History": [
          "b60e1477-f473-4dd5-9453-0a0e216bf8b0,78db04eb-5237-48a2-a5f6-0cb39fe4034c,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "WCF Use a Global Exception Handler"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Use a Global Exception Handler to Catch Unhandled Exceptions"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* WCF\r\n\r\n\r\n## Summary ##\r\n\r\nUse a global exception handler to catch unhandled exceptions and prevent them from being propagated to the client.\r\n\r\n\r\n## Solution Example ##\r\n\r\nYou can handle the unhandled exceptions in a WCF service by subscribing to the Faulted event of a service host object. By subscribing to this event you can determine the cause of a failure, and then perform the necessary actions to abort or restart the service.\r\n\r\nThe following code snippet shows how to subscribe to the Faulted event.\r\n\r\n~~~~\r\n// hosting a WCF service \r\nServiceHost customerServiceHost;\r\ncustomerServiceHost = new ServiceHost(…);\r\n…\r\n// Subscribe to the Faulted event of the customerServiceHost object\r\ncustomerServiceHost.Faulted += new EventHandler(faultHandler);\r\n…\r\n// FaultHandler method - invoked when customerServiceHost enters the Faulted state\r\nvoid faultHandler(object sender, EventArgs e)\r\n{     // log the reasons for the fault…\r\n}\r\n~~~~\r\n\r\n---\r\nAdapted from Microsoft patterns & practices guidance."
        ]
      }
    ]
  }
}