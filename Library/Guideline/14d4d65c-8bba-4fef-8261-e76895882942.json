{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "691191408",
      "Content_Hash": "-789923001"
    },
    "Metadata": [
      {
        "Id": [
          "14d4d65c-8bba-4fef-8261-e76895882942"
        ],
        "Id_History": [
          "14d4d65c-8bba-4fef-8261-e76895882942,709e2e59-8d22-4454-93d4-91aacbf9b0b4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Do Not Rely on Client-side Validation"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Do Not Rely on Client-side Validation"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* ASP.NET 4.0\r\n\r\n\r\n## Problem Example ##\r\n\r\nConsider a very simple form for an online shopping cart. The cart component consists of two components:\r\n\r\nAn HTML form that contains all of the fields that make up the order to be submitted for processing:\r\n\r\n~~~~\r\n<html>\r\n  <head>\r\n    <title>Widget shopping cart</title>\r\n  </head>\r\n  <body>\r\n    <H1>welcome to the most boring shopping cart on the web!</H1> \r\n    A widget's current price is $19.95 USD. Please use the following form to submit an order.\r\n    <form action=\"process_order.aspx\" method=\"POST\">  \r\n      <p>Please enter the number of widgets you would like to purchase:</p>\r\n      quantity:<br/>\r\n      <select name=\"WidgetQuantity\">\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option> \r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n      </select>\r\n      ...\r\n      <input type=\"submit\" value=\"order\"/>\r\n    </form>\r\n  </body>\r\n</html>\r\n~~~~\r\n\r\nAn ASP.NET page that processes the form submissions and performs the necessary steps to create the order.\r\n\r\n~~~~\r\nint dQuantity = Request(\"WidgetQuantity\");\r\ndouble dPrice = 19.95;\r\ndouble dCost = dQuantity * dPrice;\r\n~~~~\r\n\r\nThis server side page is problematic because it lacks validation to ensure the quantity field is correct. The application works fine in the case where a user plays by the rules and submits the form as it is shown, because the quantity field ensures that the range constraints for the order quantity are always valid. However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs later on.\r\n\r\n\r\n## Solution Example ##\r\n\r\nConsider the following ASP.NET page that processes the form submissions and performs the necessary steps to create an order:\r\n\r\n~~~~\r\n<%@ Page Language=\"vb\" %>\r\n<script runat=server>\r\npublic sub OnSubmit(source as Object, e as EventArgs)\r\n    if Page.IsValid then\r\n        ' Now we can perform our transaction.\r\n       int dQuantity = Request(\"WidgetQuantity\");\r\n       double dPrice = 19.95;\r\n       double dCost = dQuantity * dPrice;\r\n    end if\r\nend sub\r\n</script>\r\n<html>\r\n<head>\r\n<title>Validation Sample</title>\r\n</head>\r\n<body>\r\n<form runat=server>\r\n<asp:ValidationSummary runat=server headertext=\"There were errors on the page:\" />\r\n<table>\r\n  <tr>\r\n    <td>\r\n        <asp:RequiredFieldValidator runat=server \r\n            controltovalidate=\"WidgetQuantity\"\r\n            errormessage=\"WidgetQuantity is required.\">*\r\n        </asp:RequiredFieldValidator>\r\n    </td>\r\n    <td>A widget's current price is $19.95 USD. Please use the following form to submit an order.</td>\r\n    <td>\r\n      <select name=\"WidgetQuantity\">\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n      </select>\r\n     <asp:RegularExpressionValidator runat=server display=dynamic\r\n            controltovalidate=\"WidgetQuantity\"  \r\n            errormessage=\"WidgetQuantity must be a non-zero, positive integer.\" \r\n            validationexpression=\"[1-9]{1}[0-9]{0,7}\" />\r\n    </td>\r\n  </tr>\r\n...\r\n</table><br>\r\n<input type=submit runat=server id=cmdSubmit value=Submit onserverclick=OnSubmit>\r\n</form>\r\n</body>\r\n</html>\r\n~~~~\r\n\r\nThe ASP.NET Validator control provides client-side validation to reduce roundtrips to the server and improve user experience, but also provides server-side validation to ensure that the widget quantity field is a positive integer. It is also validated as a required field that must be provided before submitting the order.\r\n\r\n---\r\nAdapted from Microsoft patterns & practices guidance."
        ]
      }
    ]
  }
}