{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1640756633",
      "Content_Hash": "804612464"
    },
    "Metadata": [
      {
        "Id": [
          "e7fd382a-c074-42e5-b02c-4d773627d23b"
        ],
        "Id_History": [
          "e7fd382a-c074-42e5-b02c-4d773627d23b,61645ddf-942b-4ef2-84ae-4b84ecfb5f4f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Use User Input in Format Strings"
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "Don't Use User Input in Format Strings"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* C and C++\r\n\r\n## What to Do ##\r\n\r\nDon't use user input in format strings. Use C++ stream functions to avoid using formatted input-output functions, if possible. (Re-)Write code to guarantee that user input is never used in format strings.\r\n\r\n## Why ##\r\n\r\nAn attacker that can control the contents of a format string may be able to execute arbitrary code.\r\n\r\n## When ##\r\n\r\nAvoid using user input in format strings when using formatted input-output functions.\r\n\r\n## How ##\r\n\r\nPerform the following actions to assure that user input is not used in format strings:\r\n\r\n1. **Identify code that uses formatted input-output functions.** The following is a list of formatted input-output functions:\r\n\r\n        sprintf\r\n        _snprintf\r\n        printf\r\n        fprintf\r\n        scanf \r\n        fscanf\r\n        sscanf\r\n        swprintf\r\n        wsprintfA\r\n        wsprintfW\r\n        vsprintf\r\n        vswprintf\r\n        _snwprintf\r\n        _vsnprintf\r\n        _vsnwprintf\r\n        vprintf\r\n        vwprintf\r\n        vfprintf\r\n        vwfprintf\r\n        fwscanf\r\n        wscanf\r\n        swscanf\r\n\r\n2. **Avoid using formatted functions.** Consider replacing formatted input-output functions with iostream C++ functions, which are not prone to format string vulnerabilities.\r\n\r\n3. **(Re-)Write code to exclude user input from format strings.** Use static format strings with formatted I/O functions or avoid using formatted I/O functions altogether.\r\n\r\n## Problem Example ##\r\n\r\nA classic format string vulnerability example:\r\n\r\n\t#include <stdio.h>\r\n\t#include <string.h>\r\n\r\n\tint main(int argc, char* argv[]) {\r\n\tif (argc != 2) return 0;\r\n\r\n\tprintf(argv[1]);\r\n\treturn 1;\r\n\t}\r\n\t\r\nCompilers can often detect such vulnerabilities and produce warnings like this:\r\n\r\nformat_string_vuln.c:7:1: warning: format not a string literal and no format arguments [-Wformat-security]\r\n\r\n## Solution Example ##\r\n\r\nMake sure that user input is not processed as a format string by specifying a static format string and then passing user input as data to it:\r\n\r\n\t#include <stdio.h>\r\n\t#include <string.h>\r\n\r\n\tint main(int argc, char* argv[]) {\r\n\tif (argc != 2) return 0;\r\n\r\n\tprintf(\"%s\", argv[1]);\r\n\treturn 1;\r\n\t}\r\n\r\n## Additional Resources ##\r\n\r\nFor more information about excluding user input from format strings, see [https://www.securecoding.cert.org/confluence/display/c/FIO30-C.+Exclude+user+input+from+format+strings](https://www.securecoding.cert.org/confluence/display/c/FIO30-C.+Exclude+user+input+from+format+strings)\r\n"
        ]
      }
    ]
  }
}