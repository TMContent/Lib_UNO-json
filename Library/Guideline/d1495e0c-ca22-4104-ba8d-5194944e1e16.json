{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1111139310",
      "Content_Hash": "1077209499"
    },
    "Metadata": [
      {
        "Id": [
          "d1495e0c-ca22-4104-ba8d-5194944e1e16"
        ],
        "Id_History": [
          "d1495e0c-ca22-4104-ba8d-5194944e1e16,fe6b4e51-d765-4a86-8ff8-f8a164c4a0bd,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Force Password Renewal"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Force Password Renewal"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* ASP.NET\r\n\r\n\r\n## Summary ##\r\n\r\nForce users to renew their passwords after a given period of time. Forcing users to renew their passwords reduces the risk of valid credentials becoming exposed.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code is part of the application's authentication routine. Because the application fails to force the user to renew their password, it allows more time for an attacker to guess the user's password.\r\n\r\n~~~~\r\n<!-- The application's login control -->\r\n<asp:Login ID=\"Login1\" runat=\"server\" DestinationPageUrl=\"~/Protected.aspx\" />\r\n // The Page_Load method of Protected.aspxprotected \r\nvoid Page_Load(object sender, EventArgs e){}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code is part of the application's authentication routine. Because the application forces its users to renew their passwords, there is limited time for an attacker to guess the user's password.\r\n\r\n~~~~\r\n<!-- The application's login control -->\r\n<asp:Login ID=\"Login1\" runat=\"server\" DestinationPageUrl=\"~/Protected.aspx\" /> \r\n// The Page_Load method of Protected.aspxprotected \r\nvoid Page_Load(object sender, EventArgs e)\r\n{    \r\n  CheckPasswordMaturity();\r\n} \r\nvoid CheckPasswordMaturity()\r\n{    \r\n  bool changePass = false;    \r\n  string username = HttpContext.Current.User.Identity.Name;    \r\n  MembershipProvider membershipProvider = Membership.Provider;    \r\n  MembershipUser user = membershipProvider.GetUser(username, true);     \r\n  TimeSpan diff = DateTime.Now - user.LastPasswordChangedDate;    \r\n  if (Roles.IsUserInRole(\"Admin\") && diff.Days >= 30)    \r\n  {        \r\n    changePass = true;    \r\n  }     \r\n  if (Roles.IsUserInRole(\"Users\") && diff.Days >= 90)    \r\n  {        \r\n    changePass = true;    \r\n  }     \r\n  if (changePass)    \r\n  {        \r\n    HttpContext.Current.Response.Redirect(\"ChangePass.aspx\", true);    \r\n  }\r\n}\r\n~~~~\r\n\r\n---\r\nAdapted from Microsoft patterns & practices guidance.\r\n\r\n"
        ]
      }
    ]
  }
}