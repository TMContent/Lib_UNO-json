{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-879039793",
      "Content_Hash": "418465527"
    },
    "Metadata": [
      {
        "Id": [
          "86e905f3-25a9-438c-bdc6-5b242584be2a"
        ],
        "Id_History": [
          "86e905f3-25a9-438c-bdc6-5b242584be2a,3b01641b-eda7-484e-bb16-90000627850f,"
        ],
        "Title": [
          "Use ASP.NET Role Manager for Roles Authorization"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use ASP.NET Role Manager for Roles Authorization"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>Use the ASP.NET role manager for role-based authorization instead of writing custom code. </p>\n  <h1>Why</h1>\n  <p>ASP.NET provides a role manager feature that automatically allows you to create, manage, and look up roles for the currently authenticated user.&amp;nbsp; Role managers reduce possibilities for serious security issues from programmer errors and reduce the amount of custom code needed for an application. </p>\n  <h1>When</h1>\n  <p>If your application uses windows authentication&amp;nbsp;or stores roles in SQL server you&amp;nbsp;should use ASP.NET role managers.&amp;nbsp; If you need an authorization scheme or a feature not present in the provided role managers, write a custom role manager instead of an entirely custom authorization scheme so you can leverage the existing interfaces. </p>\n  <h1>How</h1>\n  <p>Roles are accessed from the configured role store by the <b>RoleManager</b> HTTP module by using the configured role provider.&amp;nbsp; This occurs after the user is authenticated but before URL authorization and file authorization access checks occur and before programmatic role checks can occur. </p>\n  <p />To use the role manager feature in an ASP.NET application, you need to do the following: \n<ol><li>Add a <b>roleManager</b>&gt; element beneath the <b>system.web</b>\n section of your application's Web.config file and enable role manager by setting its <b>enabled</b> attribute to <b>true</b>. <li>Add a connection string to the <b>connectionStrings</b>&gt; section to point to your roles store. If you are using the <b>AuthorizationStoreRoleProvider</b>, this is an LDAP query string pointing to your Authorization Manager Policy store in Active Directory or ADAM. If you are using the <b>SqlRoleProvider</b>, this is a database connection string that points to your role store database. <li>Configure the specific provider in the <b>roleManager</b>&gt;<b></b>element in your application's Web.config file. The role manager system supports the following providers: <li>If your application roles are in an Authorization Manager Policy store in Active Directory or ADAM, use the <b>AuthorizationStoreRoleProvider</b>. <li>If your application roles are in a SQL Server database, use the <b>SqlRoleProvider.</b><li>If your application uses Windows groups as roles, use the <b>WindowsTokenRoleProvider</b>. Note that this is recommended to be used with Windows Authentication only. <li>If your application roles are in a store other than those previously listed, create a custom roles provider inheriting <b>RoleProvider</b> base class. <li>Set the <b>defaultProvider</b> attribute on the <b>roleManager</b>&gt; element to the chosen role provider. </li></li></li></li></li></li></li></li></ol><p>To check roles and manage roles, use the Role Manager API (for example <b>Roles.IsUserInRole </b>and <b>Roles.CreateRole</b>). </p><p>If your application needs role-based authorization, use the following guidelines: </p><ul><li><p><b>Use role providers to perform role authorization.</b>&nbsp; Role providers allow you to load the roles for users without writing and maintaining code.&nbsp; Additionally, the role providers offer a consistent way for you to check the role membership of your users, regardless of the underlying data store.&nbsp; Where possible, use one of the supplied roles providers; these include <b>SqlRoleProvider</b>, <b>WindowsTokenRoleProvider</b>, and <b>AuthorizationStoreRoleProvider</b>.&nbsp; If you already have a custom role store in a non-SQL Server database or in a non-Active Directory LDAP store, consider implementing your own custom role provider. </p><p>The following code shows how to use the role manager API and specifically <b>Roles.IsUserInRole</b>. </p><pre>// Tests whether the currently authenticated user is a member<br />// of a particular role.<br />if(Roles.IsUserInRole(\"Manager\"))<br />   // Perform restricted operation else<br />   // Return unauthorized access error.<br />// Tests whether any given user is a member of a role:<br />if(Roles.IsUserInRole(\"Bob\",\"Manager\"))<br />   // Perform restricted operation<br />else<br />   // Return unauthorized access error.</pre><li><p><b>Use the SqlRoleProvider when your roles are in SQL Server.</b>&nbsp; If you store role information in SQL Server, configure your application to use the <b>SqlRoleProvider</b>.&nbsp; You can also configure forms authentication with the <b>SqlMembershipProvider</b> to use the same database for authentication and authorization, although this is not required. </p><li><p><b>Use the WindowsTokenRoleProvider when you use Windows groups as roles.</b>&nbsp; If your application uses Windows authentication and you use Windows groups as roles, configure your application to use the <b>WindowsTokenRoleProvider</b>. </p><li><p><b>Use the AuthorizationStoreRoleProvider when your application roles are in ADAM.</b>&nbsp; If your application uses Windows authentication against Active Directory, and you need application specific roles instead of using your domain Windows group membership, you can store role information in SQL Server or in an Authorization Manager (AzMan) policy store in ADAM.&nbsp; Authorization Manager provides a Microsoft Management Console (MMC) snap-in, to create and manage roles, and to manage role membership for users. </p><p>If your user accounts are in Active Directory, but you cannot use Windows authentication and must use forms authentication, a good solution for roles management is to use the <b>AuthorizationStoreRoleProvider</b> with an AzMan policy store in ADAM. </p></li></li></li></li></ul><p><b>Note:</b>&nbsp;&nbsp;The <b>AuthorizationStoreRoleProvider</b> does not directly support Authorization Manager business logic such as operations and tasks. To do this, you must use P/Invoke and call the Authorization Manager API directly.&nbsp;&nbsp;</p><hr /><p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}