{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1755633030",
      "Content_Hash": "1998780762"
    },
    "Metadata": [
      {
        "Id": [
          "b58e9872-85d4-4f2b-b658-0aa74132c48a"
        ],
        "Id_History": [
          "b58e9872-85d4-4f2b-b658-0aa74132c48a,42b027d1-2e53-41e8-ad1e-2b2e7e5b3db4,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "If You Need to Perform Fine-Grained Authorization Based on Business Logic, Use Imperative Authorization"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "If You Need to Perform Fine-Grained Authorization Based on Business Logic, Use Imperative Authorization"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 </li>\n    <li>Microsoft Visual Studio® 2008</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>If you need to perform fine-grained authorization based on business logic, consider using Imperative Authorization.</p>\n  <h1>When</h1>\n  <p>Use imperative role-based authorization when you need to make fine-grained authorization choices based upon business logic or when finer-grained access control beyond the level of a code method is required. </p>\n  <h1>How</h1>\n  <p>\n    <strong>Imperative check using a windows principal:</strong>\n  </p>\n  <pre>WindowsPrincipal myPrincipal = new WindowsPrincipal(ServiceSecurityContext.Current.WindowsIdentity);<br />if(myPrincipal.IsInRole(@\"domain\\Accounting\"))<br />{<br /><span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>    //authorized<br />}<br />else<br />{<br /><span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>    //not authorized<br />}</pre>\n  <p>\n    <strong>Imperative check using the ASP.NET role provider:</strong>\n  </p>\n  <pre>if (Roles.IsUserInRole(@\"accounting\"))\n{\n   //authorized\n}\nelse\n{\n   //authorization failed\n}\n</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information on authorization, see “Authorization” at <a href=\"http://msdn2.microsoft.com/en-us/library/ms733071.aspx\">http://msdn2.microsoft.com/en-us/library/ms733071.aspx</a></li>\n    <li>For authorization Q&A, see the Authorization section of “WCF 3.5 Questions and Answers “ at <a href=\"http://www.codeplex.com/WCFSecurity/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home\">http://www.codeplex.com/WCFSecurity/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home</a></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}