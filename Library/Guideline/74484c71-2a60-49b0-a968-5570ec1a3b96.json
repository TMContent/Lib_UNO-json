{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1709506116",
      "Content_Hash": "642375176"
    },
    "Metadata": [
      {
        "Id": [
          "74484c71-2a60-49b0-a968-5570ec1a3b96"
        ],
        "Id_History": [
          "74484c71-2a60-49b0-a968-5570ec1a3b96,4375f45e-a89f-497c-9d5c-fa7c828a22c2,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Protect the Encryption Key Store"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Protect the Encryption Key Store"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* ASP.NET 4.0\r\n\r\n\r\n## What to Do ##\r\n\r\nApplication Keys should be stored in a well defined location, such as the encrypted sections of the application's web.config or encrypted in the Windows Registry. Do not hard code them or store them as plaintext inside configuration files.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code shows a hard-coded encryption key inside the application. A determined attacker will be able to compromise the key once they gain access to the source code.\r\n\r\n~~~~\r\nbyte[] salt = MyApp.Crypto.GenerateSalt();\r\nstring secretString = \"application's encryption key\";\r\nHMACSHA512 md = new HMACSHA512(salt);\r\nmd.Initialize();\r\nbyte[] rawKey =\r\n md.ComputeHash(Encoding.ASCII.GetBytes(secretString));\r\nmd.Clear();\r\nRijndael encMD = Rijndael.Create();\r\nencMD.Key = rawKey;\r\nencMD.IV = salt;\r\nICryptoTransform encCT = encMD.CreateEncryptor();\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code shows an application that securely stores its encryption keys. Because the keys are stored into the Windows Registry and are protected with the ASP.NET's DPAPI encryption keys, it is extremely difficult for an attacker to steal the actual key without compromising the password associated with the ASP.NET local system account.\r\n\r\n~~~~\r\nbyte[] salt = MyApp.Crypto.GenerateSalt(); \r\nRegistryKey regKey =\r\n Registry.LocalMachine.OpenSubKey(\"SOFTWARE\\\\MyApp\\\\KeyStore\", true);\r\nbyte[] rawKey = (byte[])regKey.GetValue(\"encKey\", null);\r\nrawKey =\r\n ProtectedData.Unprotect(rawKey, salt, DataProtectionScope.CurrentUser); \r\nRijndael encMD = Rijndael.Create();\r\nencMD.Key = rawKey;\r\nencMD.IV = salt;\r\nICryptoTransform encCT = encMD.CreateEncryptor();\r\nAdapted from Microsoft patterns & practices guidance.\r\n~~~~\r\n"
        ]
      }
    ]
  }
}