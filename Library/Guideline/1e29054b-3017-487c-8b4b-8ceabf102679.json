{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1058800201",
      "Content_Hash": "1776769548"
    },
    "Metadata": [
      {
        "Id": [
          "1e29054b-3017-487c-8b4b-8ceabf102679"
        ],
        "Id_History": [
          "1e29054b-3017-487c-8b4b-8ceabf102679,2eb62d7a-f544-4380-b224-48f8925fa47b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Constrain, Reject, And Sanitize Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Constrain, Reject, And Sanitize Input"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Do ##\r\n\r\nCheck for known good data by validating for type, length, format, and range. Reject known bad input and then sanitize the input.\r\n\r\n\r\n## Why ##\r\n\r\nThere are no assumptions of trust that can be made regarding the safety of unchecked input. Most application-level attacks involve malicious input. Failure to validate input means that data could contain injection attacks.\r\n\r\n\r\n## When ##\r\n\r\nAll applications should constrain and sanitize their input.\r\n\r\n\r\n## How ##\r\n\r\nThe preferred approach to validating input is to constrain what you allow from the beginning. It is much easier to validate data for known valid types, patterns, and ranges than it is to validate data by looking for known bad characters. When you design your application, you know what your application expects. The range of valid data is generally a more finite set than potentially malicious input. However, for defense in depth you may also want to reject known bad input and then sanitize the input.\r\n\r\nTo create an effective input validation strategy, be aware of the following approaches:\r\n\r\n1. **Constrain Input.** Constraining input is about allowing good data. This is the preferred approach. The idea here is to define a filter of acceptable input by using type, length, format, and range. Define what is acceptable input for your application fields and enforce it. Reject everything else as bad data. Constraining input may involve setting character sets on the server so that you can establish the canonical form of the input in a localized way. String fields should be length checked and in many cases checked for appropriate format. For example, ZIP codes, personal identification numbers, and so on have well defined formats that can be validated using regular expressions. Thorough checking is not only good programming practice; it makes it more difficult for an attacker to exploit your code. The attacker may get through your type check, but the length check may make executing their favorite attack more difficult.\r\n\r\n2. **Reject Known Bad Input.** Deny \"bad\" data; although do not rely completely on this approach. This approach is generally less effective than using the \"allow\" approach described earlier and it is best used in combination. To deny bad data assumes your application knows all the variations of malicious input. Remember that there are multiple ways to represent characters. This is another reason why \"allow\" is the preferred approach. While useful for applications that are already deployed and when you cannot afford to make significant changes, the \"deny\" approach is not as robust as the \"allow\" approach because bad data, such as patterns that can be used to identify common attacks, do not remain constant. Valid data remains constant while the range of bad data may change over time.\r\n\r\n4. **Sanitize Input.** Sanitizing is about making potentially malicious data safe. It can be helpful when the range of input that is allowed cannot guarantee that the input is safe. This includes anything from stripping a null from the end of a user-supplied string to escaping out values so they are treated as literals. Another common example of sanitizing input in Web applications is using URL encoding or HTML encoding to wrap data and treat it as literal text rather than executable script. \r\n\r\n\r\n## Computer Based Training ##\r\n\r\nUse the following Computer Based Training course for more information about data validation:\r\n\r\n* [AWA 101 Fundamentals of Application Security](https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127105) - This two-part course is ideal for security and development practitioners that want to understand software security risk and seek specific implementation guidance on how to build and deploy more secure software applications.  It starts off describing why software security is critical and the risk that software vulnerabilities represent, and proceeds to lay the foundation for secure software development by presenting specific security controls and principles that development teams can implement immediately to reduce software risk. \r\n\r\n*Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.*\r\n\r\n\r\n## Related Pages ##\r\n\r\n* [Validate All Input](11a15f3a-7fe8-4e4c-be5e-309ab7227b3d)\r\n* [Data Validation Guide](bf53d602-1d86-489c-858d-f5efb6424412)\r\n\r\n---\r\n\r\nAdapted from Microsoft patterns & practices guidance.\r\n"
        ]
      }
    ]
  }
}