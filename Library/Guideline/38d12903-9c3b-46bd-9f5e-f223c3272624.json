{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1216089275",
      "Content_Hash": "-1428756797"
    },
    "Metadata": [
      {
        "Id": [
          "38d12903-9c3b-46bd-9f5e-f223c3272624"
        ],
        "Id_History": [
          "38d12903-9c3b-46bd-9f5e-f223c3272624,7a8a49e8-63f1-4088-a5d6-9540d839c584,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Make Sure Authentication Controls Fail Securely"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Make Sure Authentication Controls Fail Securely"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Java</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Make sure authentication controls fail securely.</p>\r\n  <h1>Why</h1>\r\n  <p>Designing authentication to fail securely when abnormal conditions occur reduces the risk of attackers bypassing authentication by disabling it.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following best practices to fail securely:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Use generic error messages.</strong> Show generic error messages that supply the user with feedback denoting that some error happened. These messages should be written in a broad way and should not provide too much information.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use global exception handlers.</strong> Global exception handlers should catch any unforeseen exceptions that occur. These handlers are a safety net mechanism to ensure that the application does not behave in an unexpected way if an error occurs. </p>\r\n      <p>Catch any specific exceptions first. Use a generic error message, which ensures that no extra information is disclosed to an attacker through the error messages provided. In this specific exception handler, you could write an error message that is more specific to the error in order to help the user.</p>\r\n      <p>Always catch the global exception class last. This picks up any unforeseen errors and keeps your application from leaking potentially harmful information to an attacker or leaving your application in a vulnerable state.</p>\r\n      <p>It is always a best practice to include finally blocks with your try statements, which will ensure that the application reverts back to a secure state when the try block ends. This block will be executed regardless of whether an exception is thrown or not.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Handle errors properly.</strong> Implement proper handling of the application state in error handling code by:</p>\r\n      <ul>\r\n        <li>Closing all connections to databases or other systems </li>\r\n        <li>Reverting to lower privileges, if applicable </li>\r\n        <li>Closing all sensitive files </li>\r\n        <li>Logging the failure <ul></ul></li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <br />"
        ]
      }
    ]
  }
}