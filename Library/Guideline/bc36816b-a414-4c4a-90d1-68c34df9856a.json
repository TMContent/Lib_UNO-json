{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-857363015",
      "Content_Hash": "1049435213"
    },
    "Metadata": [
      {
        "Id": [
          "bc36816b-a414-4c4a-90d1-68c34df9856a"
        ],
        "Id_History": [
          "bc36816b-a414-4c4a-90d1-68c34df9856a,c7c41d7b-3caa-4ae7-abaf-21bbcf9840d4,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Check for Null Before Dereferencing an In-Parameter Pointer"
        ],
        "Category": [
          "Unmanaged Code"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Check for Null Before Dereferencing an In-Parameter Pointer"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>If your function takes parameters that are pointers, check for null before dereferencing the pointer. </p>\r\n  <h1>Why</h1>\r\n  <p>Dereferencing a null pointer can lead to an application crash or other instability issues.</p>\r\n  <h1>When</h1>\r\n  <p>In any C or C&#43;&#43; function that takes a pointer in-parameter. </p>\r\n  <h1>How</h1>\r\n  <p>Check for null by using an if statement that explicitly checks the incoming parameter for null. If it is null you can choose to return from your function with an error code or take some other action that will allow you to handle the condition gracefully. Do not assume that your caller will follow the rules and never pass you a null parameter, even if your callers are always from components or code that you or your team controls. By performing appropriate null value checking you can improve the stability of your function not only for the current code that is calling it but also for the future when the function may be called from new code or in different conditions.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following example, the function takes a pointer parameter and dereferences it before checking for null.</p>\r\n  <pre>bool GetConfig(config &#42;configPointer) <br />&#123;<br />&nbsp; configPointer-&gt;configurationSet = true;<br />  return true; <br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following example, the function takes a pointer and checks for null before use.</p>\r\n  <pre>bool GetConfig(config &#42;configPointer) <br />&#123;<br />  if (null == configPointer)<br />  &#123;<br />      return false; <br />  &#125;<br />  configPointer-&gt;configurationSet = true;<br />&nbsp; return true; <br />&#125;</pre>"
        ]
      }
    ]
  }
}