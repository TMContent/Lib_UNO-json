{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "826408129",
      "Content_Hash": "300767628"
    },
    "Metadata": [
      {
        "Id": [
          "82840838-deed-4697-ad57-c6d1aafc9adf"
        ],
        "Id_History": [
          "82840838-deed-4697-ad57-c6d1aafc9adf,74a71e9e-96b2-4ccf-96a1-dcbf28dfedf6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Set the CustomErrors Mode to On to Prevent Detailed Error Messages"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Set the CustomErrors Mode to On to Prevent Detailed Error Messages"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Set the <b>customErrors</b> mode attribute to <strong>On</strong> to prevent detailed error messages from reaching the caller. </p>\r\n  <h1>Why</h1>\r\n  <p>Detailed error messages provide an attacker with valuable system&nbsp;configuration information, making the system far easier to compromise.&nbsp; Furthermore, some detailed error messages may contain sensitive user information.&nbsp; Depending on how your application handles errors, leaving detailed error messages on could directly result in the disclosure of sensitive customer data. </p>\r\n  <h1>When</h1>\r\n  <p>All applications should set <b>customErrors</b> to <strong>On</strong> for normal operations.&nbsp; <b>RemoteOnly</b> is an acceptable choice for situations when local debugging is required in an emergency, but is not the preferred setting.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following steps to prevent detailed error messages:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Set CustomErrors. </strong>Prevent detailed error messages from being displayed by setting the <b>mode</b> attribute of the <b>&lt;customErrors&gt;</b> element to <strong>On. </strong>This will ensure that&nbsp;callers receive only filtered exception information.&nbsp; Do not use <b>mode=\"Off\"</b> because this allows detailed error pages intended for application developers that contain system-level information to be returned to the client. </p>\r\n      <li>\r\n        <p>\r\n          <strong>Choose a default error page.</strong> Use the <b>&lt;customErrors&gt;</b> section of the Web.config file as shown in the following code example to specify a default error page to display, along with other required error pages for specific HTTP response codes that indicate errors. </p>\r\n        <p>The following example shows <b>&lt;customErrors&gt;</b> set correctly, with custom error pages specified:</p>\r\n        <pre>&lt;customErrors mode=\"On\" defaultRedirect=\"ErrDefault.aspx\"&gt;    <br />&#9;&lt;error statusCode=\"401\" redirect=\"ErrUnauthorized.aspx\" /&gt;    <br />&#9;&lt;error statusCode=\"404\" redirect=\"ErrPageNotFound.aspx\" /&gt;   <br />&#9;&lt;error statusCode=\"500\" redirect=\"ErrServer.htm\" /&gt;<br />&lt;/customErrors&gt;</pre>\r\n        <p>The <b>defaultRedirect</b> attribute allows you to use a custom error page for your application, which, for example, might include support contact details.&nbsp; Use these application-wide error pages to provide user-friendly responses for errors that are not caught in a structured event handling. </p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}