{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1048554001",
      "Content_Hash": "-1894409903"
    },
    "Metadata": [
      {
        "Id": [
          "1057099e-dd79-4f41-8b7e-36f00f1343e4"
        ],
        "Id_History": [
          "1057099e-dd79-4f41-8b7e-36f00f1343e4,8d95cb16-54b7-4498-b662-4a7d14bb5348,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Use a Secure Key Storage Location"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Use a Secure Key Storage Location"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Servlets or JSP\r\n\r\n\r\n## Summary ##\r\n\r\nApplication keys should be stored in a well defined location, such as the Java KeyStore. Do not hard code them or store them as plaintext inside configuration files or source code.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code shows a hard-coded encryption key inside the application. A determined attacker will be able to compromise the key once they gain access to the source code.\r\n\r\n~~~~\r\nString encKey = \"encryption key\";\r\nMessageDigest md = MessageDigest.getInstance(\"SHA-512\");\r\nmd.update(encKey.getBytes(\"UTF-8\"));\r\nbyte[] rawKey = md.digest();\r\nmd.reset();\r\nSecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code loads the encryption key from the Java key store. Because the key is properly stored, it is impossible for an attacker to steal the actual key without also stealing the master password.\r\n\r\n~~~~\r\nString keyStoreName = MyApp.getKeyStoreName();\r\nchar[] keyStorePass = MyApp.getKeyStorePass(); \r\nKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\nFileInputStream keyStoreFile = new FileInputStream(keyStoreName);\r\nkeyStore.load(keyStoreFile, keyStorePass);\r\nkeyStoreFile.close();\r\n final String keyName = \"MyAppEncryptionKey\";\r\n// Note: Although the example uses the same password for storing the KeyStore\r\n// on disk and adding keys to the KeyStore, the 2 passwords can be different \r\n// from one another\r\nSecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);\r\n~~~~\r\n"
        ]
      }
    ]
  }
}