{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "991735125",
      "Content_Hash": "907680232"
    },
    "Metadata": [
      {
        "Id": [
          "ff95311e-797f-417f-bd0b-e6cf610f706c"
        ],
        "Id_History": [
          "ff95311e-797f-417f-bd0b-e6cf610f706c,db9aad12-5f67-476b-99da-7adb12de1f72,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Leave Passwords in Memory"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Leave Passwords in Memory"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Clear passwords from memory after their use.</p>\r\n  <h1>Why</h1>\r\n  <p>Passwords are sensitive data that are used to establish a trust relationship. Leaving them in memory after their use can expose them to an attacker.</p>\r\n  <h1>When</h1>\r\n  <p>If your application handles passwords, do not leave them in memory.</p>\r\n  <h1>How</h1>\r\n  <p>Passwords can be cleared by overwriting the memory where the passwords were stored. Deallocating the memory is not sufficient since the Java garbage collector gives no guarantee as to when the deallocated memory will be collected or reused.</p>\r\n  <p>Be aware that any time you assign a password to a new buffer, or pass it as a parameter, the password is being copied and is now in memory in a new location. When clearing memory, ensure you clear every instance.</p>\r\n  <p />Keep in mind the following considerations when handling passwords: <ol><li><p><strong>Identify all password use. </strong>Locate all code segments, both functions and data members, that handle passwords. These can be functions and data structures scattered throughout the application. If the application cannot be managed as easy, centralize all code that handles passwords. </p></li><li><p><strong>Store passwords in mutable objects. </strong>Mutable objects allow the data in them to be overwritten. This is especially useful in Java as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the password instance will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. <em>char[]</em>). Java strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing a password into an array, make sure you use arrays of primitive data types such as <em>byte</em>, <em>char</em>, and <em>int</em> but not arrays of the wrapper classes that Java provides for primitive types such as <em>Byte</em>, <em>Character</em>, and <em>Integer</em>. </p></li><li><p><strong>Clear all password instances. </strong>Make sure that all memory locations, where passwords have been stored, are cleared/overwritten after their use. Losing a pointer to a password instance can result in not cleaning that particular memory and allowing the password to leak. </p></li></ol><h1>Problem Example</h1><p>The following code makes a use of a password. Although the pointer to the string is removed after garbage collection is called, Java does not guarantee the data will be erased.</p><pre>String pass = getPassword();<br />...<br />pass = null;<br />System.gc();</pre><h1>Solution Example</h1><p>The following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use. </p><pre>char[] pass = getPassword();<br />...<br />clearPassword(pass);<br />pass = null;<br />...<br />void clearPassword(char[] pass)<br />{<br />      for(int i=0; i&lt;pass.length; i++)<br />      {<br />            pass[i] = ' ';<br />      }<br />}</pre><br />"
        ]
      }
    ]
  }
}