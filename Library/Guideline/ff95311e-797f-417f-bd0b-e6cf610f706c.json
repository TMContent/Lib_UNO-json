{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "991735125",
      "Content_Hash": "907680232"
    },
    "Metadata": [
      {
        "Id": [
          "ff95311e-797f-417f-bd0b-e6cf610f706c"
        ],
        "Id_History": [
          "ff95311e-797f-417f-bd0b-e6cf610f706c,db9aad12-5f67-476b-99da-7adb12de1f72,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Minimize Sensitive Data in Memory"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Do Not Leave Passwords in Memory"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java\r\n\r\n\r\n## Summary ##\r\n\r\nClear passwords from memory after their use. Passwords are sensitive data that are used to establish a trust relationship. Leaving them in memory after their use can expose them to an attacker.\r\n\r\nPasswords can be cleared by overwriting the memory where the passwords were stored. Deallocating the memory is not sufficient since the Java garbage collector gives no guarantee as to when the deallocated memory will be collected or reused.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code makes a use of a password. Although the pointer to the string is removed after garbage collection is called, Java does not guarantee the data will be erased.\r\n\r\n~~~~\r\nString pass = getPassword();\r\n...\r\npass = null;\r\nSystem.gc();\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use.\r\n\r\n~~~~\r\nchar[] pass = getPassword();\r\n...\r\nclearPassword(pass);\r\npass = null;\r\n...\r\nvoid clearPassword(char[] pass)\r\n{\r\n      for(int i=0; i<pass.length; i++)\r\n      {\r\n            pass[i] = ' ';\r\n      }\r\n}\r\n~~~~"
        ]
      }
    ]
  }
}