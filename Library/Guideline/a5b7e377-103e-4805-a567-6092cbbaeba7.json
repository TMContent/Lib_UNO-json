{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "2062504706",
      "Content_Hash": "881543443"
    },
    "Metadata": [
      {
        "Id": [
          "a5b7e377-103e-4805-a567-6092cbbaeba7"
        ],
        "Id_History": [
          "a5b7e377-103e-4805-a567-6092cbbaeba7,1eb45898-9f3d-4b66-9da4-ea616244bcc0,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Partition Application Between Public And Private Domains"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Partition Application Between Public And Private Domains"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>Define a boundary between public and restricted content in both the URL namespace and the filesystem namespace.</p>\n  <h1>Why</h1>\n  <p>Defining a boundary between public and restricted content simplifies the task of user authorization and is generally less prone to error. When the content is separated, server configuration can be used to automatically apply authorization rules without relying on the developer to explicitly add checks in the code.</p>\n  <h1>When</h1>\n  <p>Consider using this guideline when your application restricts access to specific resources. For instance, anonymous users are granted access to some, but not all of the application while authenticated users are granted access based on their role.</p>\n  <h1>How</h1>\n  <p>Defining the boundary requires: </p>\n  <ol>\n    <li>\n      <p>\n        <strong>Determine roles</strong>: Define the various types of user and their rights. Build a security policy that documents the rights required to access each page of your application.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Determine pages that should require SSL</strong>: This would include pages that transmit credentials, unprotected authentication cookies, or sensitive user information such as credit card or social security numbers. Such pages should be transmitted using SSL only.</p>\n      <p>It should be noted that the Forms Authentication cookie is unprotected in the sense that it is vulnerable to HTTP Replay Attacks. As such, any page in a Forms Auth ASP.Net application that requires an authenticated user should only be accessible via SSL.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Structure the URL namespace</strong>: Structure the application URL namespace to first separate the pages that require SSL from those that do not. Then define separate directories according to the various roles defined for your application. For instance you might have the following directories under your application root:</p>\n      <pre>//secure/usr/secure/admin</pre>\n    </li>\n    <li>\n      <p>\n        <strong>Configure IIS to require SSL on the appropriate portions of your application</strong>:</p>\n      <ol>\n        <li>Right-click on 'My Computer' and select 'Manage </li>\n        <li>Under the 'Services and Applications' node, expand 'Internet Information Services' and locate your website </li>\n        <li>Right click on the restricted folder and choose 'Properties' </li>\n        <li>Click on 'Edit' under the 'Secure Communications' section to require SSL connections. (NOTE: If you have not installed configured a certificate for this server, see the related section for steps to setup SSL on your IIS website)</li>\n      </ol>\n    </li>\n    <li>\n      <p>\n        <strong>Use absolute URLs to transition to or from the sensitive portion of the namespace</strong>: Relative links use the same protocol (HTTP or HTTPS) as the current page. This can result in broken links that point to pages within your application that require SSL. It can also lead to unnecessary use of SSL, which does have an associated performance hit.</p>\n      <p>The fix for both of these issues is to use absolute URLs that explicitly specify the protocol instead of relative URLs. An example redirection using an absolute URL is shown below.</p>\n      <pre>private void btnLogon_Click( object sender, System.EventArgs e ){// Form an absolute path using the server name and v-dir namestring serverName = HttpUtility.UrlEncode(Request.ServerVariables[\"SERVER_NAME\"]);string vdirName = Request.ApplicationPath;Response.Redirect(\"https://\" + serverName + vdirName + \"/Restricted/Login.aspx\");}</pre>\n    </li>\n    <li>\n      <p>\n        <strong>Use URL Authorization Restrict Access</strong>: Use an <strong>&lt;authorization&gt;</strong> element to ensure that only authenticated users can access secure pages. Place this element beneath the closing <strong>&lt;/system.web&gt;</strong> tag, as shown here.</p>\n      <pre>&lt;!-- The secure folder is for authenticated and SSL access only. --&gt;&lt;location path=\"Secure\" &gt;  &lt;system.web&gt;    &lt;authorization&gt;      &lt;deny users=\"?\" /&gt;    &lt;/authorization&gt;  &lt;/system.web&gt;&lt;/location&gt;</pre>\n      <p>Additionally, the following configuration ensures that unauthenticated users are allowed to access pages in the application's root directory. Place this configuration in the main <strong>&lt;system.web&gt;</strong> element.</p>\n      <pre>&lt;system.web&gt;  &lt;!-- The virtual directory root folder contains general pages.       Unauthenticated users can view them and they do not need        to be secured with SSL. --&gt;  &lt;authorization&gt;    &lt;allow users=\"*\" /&gt;  &lt;/authorization&gt;&lt;/system.web&gt;</pre>\n      <p>\n        <strong>Note:</strong> If you use this type of site structure, your application must not rely on the user's identity on the non-SSL pages. In the preceding configuration, no forms authentication ticket is sent for requests for non-SSL pages. As a result, the user is considered anonymous. This has implications for related features, such as personalization, that require the user name.</p>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>MyApp is a financial tool that generates reports based on sensitive data. It allows the user to upload the financial data and download the report. Since the application is small, all of its content is located within the same directory. The access control is enforced by the web application through checking the required permissions before a given call is executed.</p>\n  <p>Since both data and code is within the same directory, it may be possible for an attacker to gain access to the raw financial data.</p>\n  <h1>Solution Example</h1>\n  <p>MyApp is a financial tool that generates reports based on some sensitive data. It allows the user to upload the financial data and download the report. The application has a dedicated /data/ directory for the financial data. Access to contents within the /data/ directory is handled by the server hosting MyApp, making it much more difficult for an unauthorized user to gain access.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}