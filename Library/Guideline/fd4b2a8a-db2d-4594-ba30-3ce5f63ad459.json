{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "378222500",
      "Content_Hash": "-1766364082"
    },
    "Metadata": [
      {
        "Id": [
          "fd4b2a8a-db2d-4594-ba30-3ce5f63ad459"
        ],
        "Id_History": [
          "fd4b2a8a-db2d-4594-ba30-3ce5f63ad459,202eb71a-19c5-45f2-b993-dfe7cbc25243,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "JSP Use Error Pages"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Do Not Include Debug Data in Output"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java\r\n* JSP\r\n\r\n\r\n## Summary ##\r\nAvoid disclosing debug information to the client. Debug information may include sensitive information, such as call stack, fragments of the source code, and more. This information may aid an attacker by giving them inside information.\r\n\r\n\r\n## Solution Example ##\r\n\r\nJSP error pages provide an effective way of telling the user that something went wrong. The location of the appropriate error page is specified in your application's web deployment descriptor (e.g. web.xml) using the <location> tag.\r\n\r\nFor example:\r\n\r\n~~~~\r\n<!-- Catch a system error using an HTML page -->\r\n<error-page>\r\n  <exception-type>java.lang.NullPointerException</exception-type>\r\n  <location>/NPEerror.html</location>\r\n</error-page>\r\n~~~~\r\n\r\nEnsure that there are error pages written for all specific exceptions that you need to handle, including one that covers java.lang.Throwable. This will catch all previously unhandled exceptions and redirect the user to the specified error page. In addition to handling exceptions, you should also handle HTTP error codes. An example is below.\r\n\r\n~~~~\r\n<ERROR-PAGE><ERROR-CODE><error-page>\r\n   <error-code>404</error-code>\r\n   <location>/error/error404.jsp</location>\r\n</error-page>   </ERROR-PAGE>\r\n~~~~\r\n\r\nThe JSP error pages should begin with the <%@page %> tag.\r\n\r\nFor example:\r\n\r\n~~~~\r\n<%@page isErrorPage=\"true\" %>\r\n~~~~\r\n\r\nCreating error pages for specific exception types not only allows you to ensure sensitive data is not sent to the client, but it also improves the user experience. Design your error pages so they are useful for a typical user (not a developer), and you are unlikely to include any information that an attacker will find useful.\r\n"
        ]
      }
    ]
  }
}