{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "378222500",
      "Content_Hash": "-1766364082"
    },
    "Metadata": [
      {
        "Id": [
          "fd4b2a8a-db2d-4594-ba30-3ce5f63ad459"
        ],
        "Id_History": [
          "fd4b2a8a-db2d-4594-ba30-3ce5f63ad459,202eb71a-19c5-45f2-b993-dfe7cbc25243,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Include Debug Data in Output"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Include Debug Data in Output"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Avoid disclosing debug information to the client. </p>\r\n  <h1>Why</h1>\r\n  <p>Debug information may&nbsp;include sensitive information, such as call stack, fragments of the source code, and more. This information may aid an attacker by giving them inside information.</p>\r\n  <h1>When</h1>\r\n  <p>Though it may be useful during development,&nbsp;do not&nbsp;disclose data contained inside exceptions to the client after your application has been deployed.</p>\r\n  <h1>How</h1>\r\n  <p>The purpose of debug information is to identify and troubleshoot potential problems within your application. Use the following steps to ensure debug information is not transmitted to the client:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Collect debug information via a logging mechanism.</strong> Use a logging mechanism instead of transmitting debug information through the HTTP response to the client. </p>\r\n      <li>\r\n        <p>\r\n          <strong>Use proper exception handling.</strong> There are two approaches to placing an exception handler that allows your application to exit gracefully and hide debug and source data from the user:</p>\r\n        <ul>\r\n          <li>\r\n            <p>\r\n              <strong>Dynamic Handling</strong>: This allows the handling to be conducted inside the Java code. It consists of placing the entire root execution code inside a <em>try/catch/finally</em> block. Using dynamic handling allows your application to log the error and provide an error message to the user without having to disclose any detailed information about the raised exception. Example: </p>\r\n            <pre>public void doGet(HttpServletRequest request,<br />      HttpServletResponse response) throws ServletException, IOException<br />&#123;<br />      PrintWriter out = response.getWriter();<br />      workDone = false;<br /><br />      try<br />      &#123;<br />            ...<br />      &#125;<br />      catch (Exception e)<br />      &#123;<br />            // Add appropriate logging and exception handling mechanisms<br />             out.println(\"An error has occurred.\");<br />      &#125;<br />      out.flush();<br />      out.close();<br />&#125;</pre>\r\n            <li>\r\n              <p>\r\n                <strong>JSP Error Pages</strong>: JSP error pages provide an effective way of telling the user that something went wrong. The location of the appropriate error page is specified in your application's web deployment descriptor (e.g. web.xml) using the <em>&lt;location&gt;</em> tag. </p>\r\n              <p>For example:</p>\r\n              <pre>&lt;&#33;-- Catch a system error using an HTML page --&gt;<br />&lt;error-page&gt;<br />  &lt;exception-type&gt;java.lang.NullPointerException&lt;/exception-type&gt;<br />  &lt;location&gt;/NPEerror.html&lt;/location&gt;<br />&lt;/error-page&gt;</pre>\r\n              <p>Ensure that there are error pages written for all specific exceptions that you need to handle, including one that covers java.lang.Throwable. This will catch all previously unhandled exceptions and redirect the user to the specified error page. In addition to handling exceptions, you should also handle HTTP error codes. An example is below.</p>\r\n              <pre>&lt;ERROR-PAGE&gt;&lt;ERROR-CODE&gt;&lt;error-page&gt;<br />&nbsp;&nbsp; &lt;error-code&gt;404&lt;/error-code&gt;<br />&nbsp;&nbsp; &lt;location&gt;/error/error404.jsp&lt;/location&gt;<br />&lt;/error-page&gt;&#9;&lt;/ERROR-PAGE&gt;</pre>\r\n              <p>The JSP error pages should begin with the <em>&lt;&#37;&#64;page &#37;&gt;</em> tag.</p>\r\n              <p>For example:</p>\r\n              <pre>&lt;&#37;&#64;page isErrorPage=\"true\" &#37;&gt;</pre>\r\n              <p>Creating error pages for specific exception types not only allows you to ensure sensitive data is not sent to the client, but it also improves the user experience. Design your error pages so they are useful for a typical user (not a developer), and you are unlikely to include any information that an attacker will find useful.</p>\r\n            </li>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code produces a data analysis based on a financial index. Unfortunately, there is no global exception handling. Therefore, an attacker can force the application to reveal its call stack and possibly the source code filenames&nbsp;by triggering an unhandled exception.</p>\r\n  <pre>import java.io.&#42;;<br />import java.util.&#42;;<br />import java.lang.&#42;;<br />import javax.servlet.&#42;;<br />import javax.servlet.http.&#42;;<br />import java.util.regex.&#42;;<br /><br />public final class DataAggregator extends HttpServlet<br />&#123;<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      &#123;<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br />             // The application does not provide a global exception handler<br />            if (validateSearchTerm(searchTerm))<br />            &#123;<br />                  String retString;<br />                  retString = \"The queried index \\\"\";<br />                  retString &#43;= encodeHtml(searchTerm);<br />                  retString &#43;= \"\\\" produced the following results:&lt;br&gt; \";<br />                  out.println(retString);<br />                  common.aggregateData(out, searchTerm);<br />            &#125;<br />            else<br />            &#123;<br />                  // Add the appropriate logging and exception<br />                  // handling mechanisms. Consult the Exception<br />                  // Handling and Logging sections<br />                   out.println(\"We cannot handle your request at the moment.\"<br />                           &#43; \" Please try again later.\");<br />            &#125;<br />            out.flush();<br />            out.close();<br />      &#125;<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code produces a data analysis based on a financial index. Because the code provides a global exception, it is impossible for an unhandled exception to surface to the client. Therefore, no debug and source data will be disclosed with the attacker.</p>\r\n  <blockquote>\r\n    <pre>import java.io.&#42;;<br />import java.util.&#42;;<br />import java.lang.&#42;;<br />import javax.servlet.&#42;;<br />import javax.servlet.http.&#42;;<br />import java.util.regex.&#42;;<br /><br />public final class DataAggregator extends HttpServlet<br />&#123;<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      &#123;<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br /><br />            // The application provides a global exception handler<br />            try<br />            &#123;<br />                  if (validateSearchTerm(searchTerm))<br />                  &#123;<br />                        String retString;<br />                        retString = \"The queried index \\\"\";<br />                        retString &#43;= encodeHtml(searchTerm);<br />                        retString &#43;= \"\\\" produced the following results:&lt;br&gt; \";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  &#125;<br />                  else<br />                  &#123;<br />                        // Add the appropriate logging and exception<br />                        // handling mechanisms. Consult the Exception<br />                        // Handling and Logging sections<br />                         out.println(\"We cannot handle your request at the moment.\"<br />                                 &#43; \" Please try again later.\");<br />                  &#125;<br />            &#125;<br /><br />            catch (Exception e)<br />            &#123;<br />                   // Add the appropriate logging and exception<br />                   // handling mechanisms. Consult the Exception<br />                   // Handling and Logging sections<br />                   out.println(\"We cannot handle your request at the moment.\"<br />                           &#43; \" Please try again later.\");<br />            &#125;<br /><br />            out.flush();<br /><br />            out.close(); <br />     &#125;<br />&#125;</pre>\r\n  </blockquote>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about using JSP error pages, see: <a href=\"http://java.sun.com/developer/EJTechTips/2003/tt0114.html\">JSP Error Pages and Preventing Repeated Operations</a>.</li>\r\n  </ul>\r\n  <h1>Java Error Handling Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/fceefe0c-900a-4c29-9c2e-ee662aa9e1f1\">Use Structured Exception Handling</a>\r\n      <li>\r\n        <a href=\"/article/3e815c74-4d57-4c1b-8446-750b319ea046\">Use a Global Exception Handler for Unhandled Exceptions</a>\r\n        <li>\r\n          <a href=\"/article/30abc3c9-d288-4e8a-a614-fd1a1f331270\">Do Not Disclose Valuable Information During Authentication Errors</a>\r\n          <li>\r\n            <a href=\"/article/56ad1852-7fc3-4d1f-b109-bbcce29170f7\">Do Not Disclose Exception Details to the Client</a>\r\n            <li>\r\n              <a href=\"/article/fd4b2a8a-db2d-4594-ba30-3ce5f63ad459\">Do Not Include Debug Data in Output</a>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/2739df30-b3da-417e-8856-2201a2b2a17a\">Structured Exception Handling Is Used</a>\r\n      <li>\r\n        <a href=\"/article/c88e1b49-357d-4202-aafc-86ce0de485bd\">A Global Exception Handler Is Used for Unhandled Exceptions</a>\r\n        <li>\r\n          <a href=\"/article/e574d1d8-acae-4c64-90db-a0f6b98ca45f\">Valuable Information Is Not Disclosed During Authentication Errors</a>\r\n          <li>\r\n            <a href=\"/article/d13e57d7-f6f5-4bd4-8629-26c45f9f029b\">Exception Details Are Not Disclosed to the Client</a>\r\n            <li>\r\n              <a href=\"/article/d33cc3de-517c-4c84-95bd-24f14d9d99d6\">Debug Data Is Not Included in Output</a>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/5556fc17-3f60-4fc0-8717-0a2ff1c12701\">How to Test for Exception Information Disclosure Bugs in Java</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}