{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "739841830",
      "Content_Hash": "-559573699"
    },
    "Metadata": [
      {
        "Id": [
          "429edd20-ad22-4593-8a8a-833abfd6d731"
        ],
        "Id_History": [
          "429edd20-ad22-4593-8a8a-833abfd6d731,4fac1d93-4bae-4ff0-adc1-bd9fe6106769,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Perform Penetration Testing"
        ],
        "Category": [
          "Security Engineering"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Perform Penetration Testing"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>Test your application(s) for vulnerabilities. There are different methodologies for performing penetration testing and the actual procedures often depend on the specifics of the system or application being tested. One option is to contract an information security consulting company to perform the penetration test. One methodology for carrying out penetration tests involves examining the application environment for common vulnerabilities, using automated tools to search for low hanging fruit, then manually checking the application for the most dangerous and common vulnerability types and attack vectors.</p>\n  <h1>Why</h1>\n  <p>Penetration testing helps discover vulnerabilities before someone else does.</p>\n  <h1>When</h1>\n  <p>Perform penetration testing during the testing stage of the application development life cycle.</p>\n  <h1>How</h1>\n  <p>When your application is ready for a penetration test, be sure to use your Threat Model to improve your test planning. One of the goals of the threat model is to enumerate and classify risks to your application - this is a perfect starting place for a penetration test. You can use the threat model to determine attack vectors as well as the conditions under which your attacks may be successful. Test each of these vectors and attack conditions and you will have already achieved good coverage of your application.</p>\n  <p>Keep in mind that security testing is different than functional testing. Where functional testing is focused on what your application should be doing, security testing focuses on what your application should not be doing. Security vulnerabilities can be subtle so be sure to consider all the signs of a successful attack, such as unexpected changes to the file system, or unexpected network traffic.</p>\n  <p>Many flaws are caused by environment interaction. Consider what happens if a resource is not available, data is paged to disk and other aspects of the platform - many flaws are only discoverable after analyzing the application’s environment. See if you can discover sensitive information by sniffing the network or uncover temporary files with sensitive information. Use automated tooling for low-hanging fruit. Use proven manual testing techniques for elusive bugs.</p>\n  <p>When conducting a penetration test, it is very useful to have a set of common attacks and vulnerabilities in mind. This slide gives a good selection of techniques you can use to find vulnerabilities. If you want to learn more, Security Innovation’s eLearning course, entitled How to Break Software Security, covers this topic in detail. Some common attacks and vulnerabilities are:</p>\n  <ul>\n    <li>\n      <strong>Dependency Attacks</strong>\n      <ul>\n        <li>block access to libraries</li>\n        <li>manipulate registry values</li>\n        <li>force application to use corrupt files (write protected, inaccessible, data errors...) and file names</li>\n        <li>replace files that the application reads from, writes to, creates and executes</li>\n        <li>force application to operate in stressed memory/disk space/network availability conditions</li>\n        <li>User Interface Attacks</li>\n        <li>overflow input buffers</li>\n        <li>examine all command line switches and input options</li>\n        <li>explore escape characters, character sets and commands</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Design Attacks</strong>\n      <ul>\n        <li>try common default and test account names and passwords</li>\n        <li>expose unprotected test APIs</li>\n        <li>connect to all ports</li>\n        <li>fake the source of data</li>\n        <li>exploit loop conditions</li>\n        <li>use alternate routes to accomplish the same task</li>\n        <li>force the system to reset values</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Implementation Attacks</strong>\n      <ul>\n        <li>time of check and time of use</li>\n        <li>create files with the same name as files protected with a higher classification</li>\n        <li>force all error messages</li>\n        <li>look for temporary files and screen their contents for sensitive information</li>\n      </ul>\n    </li>\n  </ul>\n  <br />\n  <h1>&nbsp;</h1>"
        ]
      }
    ]
  }
}