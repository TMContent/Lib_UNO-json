{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-364851773",
      "Content_Hash": "607821481"
    },
    "Metadata": [
      {
        "Id": [
          "66a3ee42-7c75-4867-902f-0449a79bd9f3"
        ],
        "Id_History": [
          "66a3ee42-7c75-4867-902f-0449a79bd9f3,43edf758-c870-4f18-9382-425f2c27b90a,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Use Read-only Properties Appropriately"
        ],
        "Category": [
          "Design Considerations"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Read-only Properties Appropriately"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Mark properties read-only unless the caller needs to be able to make a modification. </p>\r\n  <h1>Why</h1>\r\n  <p>This prevents a caller from accidentally modifying a field.</p>\r\n  <h1>When</h1>\r\n  <p>This is important guideline and should be followed all the time. Do not expose your fields to caller modification unless absolutely necessary. </p>\r\n  <h1>How</h1>\r\n  <p>Mark properties read-only unless the caller needs to be able to make a modification. </p>\r\n  <p>\r\n    <strong>Note</strong>&nbsp;&nbsp;&nbsp;Read-only properties are enforced at compile time only. When malicious code runs in a full trust environment, it could use reflection or unmanaged pointers to bypass these visibility restrictions.</p>\r\n  <p>Here is an example of using read-only property, the employeeName can be set in the constructor of the class or while initalizing it.</p>\r\n  <pre>public class Employee<br />&#123;<br />&nbsp;&nbsp;&nbsp; private readonly string employeeName;<br />&nbsp;&nbsp;&nbsp; public string Name<br />&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.employeeName; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &#125;<br />&#125;</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}