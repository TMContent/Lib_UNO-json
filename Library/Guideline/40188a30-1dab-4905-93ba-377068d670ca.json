{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "562669835",
      "Content_Hash": "1868886606"
    },
    "Metadata": [
      {
        "Id": [
          "40188a30-1dab-4905-93ba-377068d670ca"
        ],
        "Id_History": [
          "40188a30-1dab-4905-93ba-377068d670ca,2502175c-4556-442f-b09b-ae9ae77c0eb3,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Verify the Application's Authenticity to the User"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Verify the Application's Authenticity to the User"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Allow the user to verify the authenticity of your application.</p>\r\n  <h1>Why</h1>\r\n  <p>Some applications are targets for phishing attacks. Failure to authenticate against the user allows attackers to spoof the application; therefore, fooling the users into submitting their credentials or other sensitive information into an attackers' malicious application.</p>\r\n  <h1>When</h1>\r\n  <p>This guideline should be followed for all applications that handle sensitive data and allow public access.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following measures to authenticate your application to its users:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Use SSL. </strong>Due to the nature of the SSL certificates, SSL can be used to certify the remote host's name. Because of SSL's chain of trust and DNS limitations, spoofing a host that uses SSL is very difficult. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Display personalized and identifiable content.</strong> Do not ask the user for credentials at once. Following the user to entering a username, display a personal and identifiable content to which the user can relate. Examples of such are a personal user-supplied question, an image that has been pre-selected from a library, or a personalized color schema. After the user has authenticated the application, they may enter their password. This should only be used as an additional measure to verify the authenticity of your application and should not be used to replace SSL.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>MyApp is a financial application with a public web interface. Because the application does not use SSL to certify its identity in front of the user, an attacker can set up a fake site and pretend to be MyApp. Because the user's browser has no mechanism of identifying the real from the fake MyApp interface, it will not provide any warning signs to the user. Once a user accesses the fake MyApp interface, they may be fooled into providing their credentials to the attacker.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>MyApp is a financial application with a public web interface. Because the application uses SSL to certify its identity in front of the user, the user's browser uses the SSL chain of trust and MyApp's URL to verify MyApp's identity. If an attacker attempts to spoof the MyApp interface, the user's browser has a mechanism for detecting the fake site; therefore the user will be warned that they are not accessing the real MyApp interface.</p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}