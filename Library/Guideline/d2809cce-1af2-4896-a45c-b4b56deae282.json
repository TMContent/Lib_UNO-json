{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "855776438",
      "Content_Hash": "-41036407"
    },
    "Metadata": [
      {
        "Id": [
          "d2809cce-1af2-4896-a45c-b4b56deae282"
        ],
        "Id_History": [
          "d2809cce-1af2-4896-a45c-b4b56deae282,bc8bf061-0fda-4ca5-a388-8c46bce5534a,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Use Parameterized APIs for Data Access"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Use Parameterized APIs for Data Access"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To  ##\r\n\r\n* Java\r\n* Servlets\r\n* JSP\r\n\r\n\r\n## Summary ##\r\n\r\nUse Prepared Statements to execute SQL statements. Do not generate SQL statements directly from user input.\r\n\r\nParameterized Queries mitigate the number one risk for database-facing Web applications: SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database engine, not the actual application. It exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (') or double quote (\") characters). Using this method, an attacker inserts valid SQL statement fragments as part of user input so they, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating system.\r\n\r\nParameterized Queries offer a simple yet efficient mitigation since they automatically contain user-input in a non-escaped form, \"compiling\" the query and passing the input as parameters, much like a function call. There is no known method of injecting custom SQL over Parameterized Queries.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code validates the user based on a given username and password. It hashes the password with a random salt, then it compares the username and the produced hash against the data stored in the backend database. Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.\r\n\r\n~~~~\r\npublic boolean validateUser(String user, char[] pass)\r\n{\r\n      // Hash the credentials before querying the credential store\r\n      // The application crafts the SQL query based on user's input\r\n      Connection cn = MyApp.getDBConnection();\r\n      Statement st = cn.createStatement();\r\n      String query = \"select login_attempts from myappUsers where user = \\\"\"\r\n                    + user + \"\\\" and pass = \\\"\" + passHash + \"\\\";\";\r\n      ResultSet rs = st.executeQuery(query);\r\n      // Execute the rest of the authentication steps\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code validates the user based on given username and password. It hashes the password with a random salt, then it compares the username and the produced hash against the data stored in the backend database. Because the application uses PreparedStatement, it is much more difficult for an attacker to gain access to the application's database server through the use of SQL injection.\r\n\r\n~~~~\r\npublic boolean validateUser(String user, char[] pass)\r\n{\r\n      // Hash the credentials before querying the credential store\r\n      // The application uses parameterized queries\r\n      Connection cn = MyApp.getDBConnection();\r\n      PreparedStatement st = cn.prepareStatement(\"select user from myappUsers\"\r\n                            + \" where user = ? and pass = ?;\");\r\n      st.setString(1, user);\r\n      st.setString(2, passHash);\r\n      ResultSet rs = st.executeQuery();\r\n      // Execute the rest of the authentication steps\r\n}\r\n~~~~\r\n\r\n## Guideline ##\r\n\r\n* [Use Prepared Statements for SQL Queries](397488da-ce91-4768-9ad9-1e6928980d72)"
        ]
      }
    ]
  }
}