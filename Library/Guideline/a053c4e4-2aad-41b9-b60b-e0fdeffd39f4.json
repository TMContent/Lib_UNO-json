{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-737804985",
      "Content_Hash": "-858543666"
    },
    "Metadata": [
      {
        "Id": [
          "a053c4e4-2aad-41b9-b60b-e0fdeffd39f4"
        ],
        "Id_History": [
          "a053c4e4-2aad-41b9-b60b-e0fdeffd39f4,20ad70a8-8e02-4353-8056-2aafce895325,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Log Important Security Operations"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Log Important Security Operations"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>Log all important operations that are relevant to your application's security model. Such operations include, but are not limited to, authentication attempts, change of user accounts, and activation of new accounts.</p>\n  <h1>Why</h1>\n  <p>A log trail of security operations can help you recognize application misuse and/or malicious activity. It can also help you track what happened in order to assess damage and improve future protections.</p>\n  <h1>When</h1>\n  <p>Apply this guideline if your application has user roles or performs authentication and authorization.</p>\n  <h1>How</h1>\n  <p>Use the following steps to log important security operations:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Determine what is important to log for your application</strong>: Review your application's architecture and security objectives to determine which operations are important to log. In general, you should log anything that can help you recognize or track malicious attack on your system. This could include:</p>\n      <ul>\n        <li>\n          <strong>Authentication attempts</strong>: Log all authentication attempts whether they are successful or not. You may choose to include additional information such as remote host IP/name. Logging authentication attempts provides a record when accounts have been compromised or your application has been used for malicious activities. </li>\n        <li>\n          <strong>Account changes</strong>: Log any changes made to a user's account. Such changes include, but are not limited to, change of password/PIN, account details, and contact information. Such logs are useful when tracking the damage caused by a breach or when enforcing a lockout policy. </li>\n        <li>\n          <strong>Transactions performed by logged users</strong>: Log transactions performed by a logged user that have some value. For instance, you should log e-commerce purchases since they have monetary value. It is also recommended to log the occurrence of user transactions when sensitive data is involved; however, do not log the actual sensitive data. </li>\n        <li>\n          <strong>Creation, activation, and locking/unlocking of accounts</strong>: Log any operations regarding the creation, activation, and lockout of users. Logged information should include remote IP and a valid e-mail address. These logs can be useful when investigating compromised accounts and non-legitimate users. </li>\n        <li>\n          <strong>System and security related administration events</strong>: Log any event pertaining to the overall wellness of your application. Examples of such would be configuring, starting, and terminating your application, auditing events, etc.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Determine the required level of logging for each activity</strong>: How much information you need to log about each activity depends on what you need to be able to say about an occurrence of the activity after the fact. There are three rough levels of logging, namely tracking, verification, and non-repudiation, each of which has an increasing requirement for what needs to be logged.</p>\n      <ul>\n        <li>\n          <strong>Logging for tracking</strong>: Logging for tracking purposes is appropriate when you only need to provide statistical data about transactionsâ€”frequency, timing, etc. As the statistics need to be accurate, per-event logging is still appropriate, particularly if flexibility is desired in the actual statistics to be gathered. </li>\n        <li>\n          <strong>Logging for verification</strong>: Verification is slightly more in depth; all relevant basic information about the transaction should be recorded. The goal of logging at this level is to provide a full record of transactions, sufficient to manually re-create the transaction. This is the default level to log at for most business logic. </li>\n        <li>\n          <strong>Logging for nonrepudiation</strong>: Nonrepudiation is a significantly higher standard. The goal here is to ensure that, if one of the parties to a transaction disputes the transaction, proof of the validity of the transaction can be produced. Being able to provide this proof is an architecture-level issue, which will have implications for many security-relevant design issues, especially authentication, but the issue is fundamentally a logging one. The hard part for nonrepudiation is ensuring that sufficient data exists within the system. Log files designed to support nonrepudiation should include all data related to the transaction. This data should ideally include cryptographic signatures, and should itself be signed to prevent tampering, and stored securely.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Choose a logging mechanism</strong>: Review your application's infrastructure and establish a logging mechanism that suits your application's business needs. Make sure that your application's logging mechanism meets your application's requirements as defined according to Step 1.</p>\n      <p>If your application has not adopted a logging framework, it is recommended to use the ASP.NET Health Monitoring component. Health Monitoring is an easy-to-use component that provides flexibility when logging application-wide events. By default, health monitoring is enabled for ASP.NET applications and all Web infrastructure error events (inheriting from <strong>System.Web.Management.WebErrorEvent</strong>) and all audit failure events (inheriting from <strong>System.Web.Management.WebFailureAuditEvent</strong>) are written to the event log. The default configuration is defined in the <strong>&lt;healthMonitoring&gt;</strong> element in the machine-level Web.config file. To audit additional events, you create custom event types by deriving from one of the built-in types.</p>\n      <p>The health monitoring feature has built-in providers that allow you to log events in an e-mail message (<strong>SimpleMailWebEventProvider</strong>, <strong>TemplatedMailWebEventProvider</strong>), to SQL Server (<strong>SqlWebEventProvider</strong>), to the event log (<strong>EventLogWebEventProvider</strong>), as ASP.NET trace output (<strong>TraceWebEventProvider</strong>), or to the Windows Management Instrumentation (WMI) Web event provider (<strong>WMIWebEventProvider</strong>). You can configure health monitoring in the machine or application Web.config file to modify the events that are logged and the way in which they are logged.</p>\n      <p>In-database logging can be implemented either inside the stored procedures which you use to interact with the data, or via triggers. Logging via triggers may be preferable in some cases, because alterations to the data which occur outside of stored procedures (say, via a SQL injection vulnerability) will still be logged. Care should be taken when implementing in-database logging to ensure that the process which is normally generating the log entries cannot overwrite them.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Identify areas of code that perform important operations</strong>: Once you understand the important operations that should be tracked, conduct a thorough review of your application's design and code. The goal of this review should be to pinpoint each component, class, and function in your system in which logging should take place.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Add logging code for both success and error conditions</strong>: Log the beginning and end of all key security operations according to the logging mechanism adopted within your application. The logging schema should include universal date/time stamps, application name, subject/user ID, event type and resource, and state whether the event was a success or failure. Be careful not to log sensitive data that should otherwise be available only to privileged users.</p>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>An e-commerce site does hundreds of transactions an hour, but only has basic web and database logs. When an attacker finds a flaw in the application's security implementation, it gets lost in the noise of all of the other site traffic, as not all security events are specifically logged. The attacks aren't noticed until they've made a serious financial dent, and when they are, forensics and problem solving are complicated by the fact that critical data was never logged by the system, and that there is no way to correlate the information which exists into a business-level view of the system.</p>\n  <h1>Solution Example</h1>\n  <p>An e-commerce site does hundreds of transactions an hour, and logs data at the web and database levels, along with a separate security log that monitors all user and security-related events. The logs are monitored 24x7 by the operations team, who can respond quickly to attacks and contact the developers if they need more assistance. When an attacker finds a vulnerability in the application's security logic, the abnormal transactions show up immediately in the security log, and the monitoring team immediately reverses the transactions, blocks the attacker, and works with development to deploy a fix.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}