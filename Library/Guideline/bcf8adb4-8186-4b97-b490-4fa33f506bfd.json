{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-673704899",
      "Content_Hash": "1817082169"
    },
    "Metadata": [
      {
        "Id": [
          "bcf8adb4-8186-4b97-b490-4fa33f506bfd"
        ],
        "Id_History": [
          "bcf8adb4-8186-4b97-b490-4fa33f506bfd,33964def-ceba-4d30-a9fa-999d2eaf81c2,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Limit Access to the Credential Store"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Limit Access to the Credential Store"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Servlets or JSP\r\n\r\n\r\n## Summary ##\r\n\r\nLimit the access to the credential store. Unauthorized access to the credential store can lead to users' credentials being overwritten, thereby allowing the attacker to gain access to application resources without obtaining valid credentials prior to the attack.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code authenticates a user based on their credentials. Because the code discloses the credentials to the user database, anybody with access to the code also has access to the credential store.\r\n\r\n~~~~\r\npublic boolean validateUser(String user, char[] pass)\r\n{\r\n      boolean valid;\r\n      Connection cn;\r\n\r\n      // Prepare credentials before querying the credential store\r\n      ...\r\n      try\r\n      {\r\n            // The application discloses the credentials necessary for\r\n            // accessing the user database\r\n            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());\r\n            cn = DriverManager.getConnection(\"jdbc:oracle:thin:@testbox:1521:orcl2\",\r\n                                             \"myapp\", \"pass\");\r\n            // Query the credential store and perform the rest\r\n            // of the authentication steps\r\n            ...\r\n      }\r\n      catch (SQLException se)\r\n      {\r\n            // Add the appropriate logging and exception handling mechanisms\r\n            return false;\r\n      }\r\n\r\n      return valid;\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code authenticates a user based on their credentials. The code relies on other parts of the application to handle database connectivity. Therefore, the code does not reveal the application's credentials to the credential store.\r\n\r\n~~~~\r\npublic boolean validateUser(String user, char[] pass)\r\n{\r\n      boolean valid;\r\n      // Prepare credentials before querying the credential store\r\n      ...\r\n      try\r\n      {\r\n            // The credentials to the application's user database\r\n            // are not hard-coded in the authentication routine\r\n            cn = MyApp.getDBConnection();\r\n            // Query the credential store and perform the rest\r\n            // of the authentication steps\r\n            ...\r\n      }\r\n      catch (SQLException se)\r\n      {\r\n            // Add the appropriate logging and exception handling mechanisms\r\n            return false;\r\n      }\r\n      return valid;\r\n}\r\n~~~~"
        ]
      }
    ]
  }
}