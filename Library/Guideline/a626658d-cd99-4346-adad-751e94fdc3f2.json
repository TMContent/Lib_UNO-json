{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "826493958",
      "Content_Hash": "-451571104"
    },
    "Metadata": [
      {
        "Id": [
          "a626658d-cd99-4346-adad-751e94fdc3f2"
        ],
        "Id_History": [
          "a626658d-cd99-4346-adad-751e94fdc3f2,c13aaa18-dc20-4720-9b74-65dcd50df878,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Consider Using Programmatic Instead of Declarative Impersonation"
        ],
        "Category": [
          "Impersonation and Delegation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Consider Using Programmatic Instead of Declarative Impersonation"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>If you are using impersonation, consider using programmatic instead of declarative impersonation. </p>\n  <h1>Why</h1>\n  <p>Programmatic impersonation is a finer-grained approach that can reduce security risk. </p>\n  <h1>When</h1>\n  <p>Use programmatic impersonation to impersonate the original caller or the ASP.NET service account calling into your service. </p>\n  <h1>How</h1>\n  <p>Programmatic impersonation allows you to impersonate on specific lines of code rather than the entire operation. This finer-grained approach to impersonation can reduce security risk, however be aware that it is easier to make a mistake during implementation that could leave your code impersonating at higher privilege in the event of an error. Use the using statement to revert impersonation automatically.</p>\n  <p>The following code snippet shows how to impersonate programmatically:</p>\n  <pre>public string GetData(int value)<br />&#123; <br /> using (ServiceSecurityContext.Current.WindowsIdentity.Impersonate())<br /> &#123;<br />     // return the impersonated user (original users identity)<br />     return string.Format(\"Hi, &#123;0&#125;, you have entered: &#123;1&#125;\",<br />          WindowsIdentity.GetCurrent().Name, value);<br /> &#125;   <br />&#125;</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information, see &#8220;Delegation and Impersonation with WCF&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms730088.aspx\">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><li>For impersonation and delegation Q&A, see the Impersonation/Delegation section of &#8220;WCF 3.5 Questions and Answers&#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Questions&#37;20and&#37;20Answers&#37;20&#37;28Q&#37;26A&#37;29&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Questions&#37;20and&#37;20Answers&#37;20&#37;28Q&#37;26A&#37;29&referringTitle=Home</a></li></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}