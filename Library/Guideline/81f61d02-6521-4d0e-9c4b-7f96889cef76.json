{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-986712101",
      "Content_Hash": "-459948851"
    },
    "Metadata": [
      {
        "Id": [
          "81f61d02-6521-4d0e-9c4b-7f96889cef76"
        ],
        "Id_History": [
          "81f61d02-6521-4d0e-9c4b-7f96889cef76,48e0b35d-f01f-4597-8b4f-ffaf44973151,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Create Files Safely on Windows"
        ],
        "Category": [
          "File I/O"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "Create Files Safely on Windows"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* C++\r\n* Windows\r\n\r\n\r\n## What to Do ##\r\n\r\nCreate files safely.\r\n\r\n\r\n## Why ##\r\n\r\nAllowing user input in the lpFileName parameter of CreateFile() can lead to the creation or opening of unexpected objects.\r\n\r\n\r\n## When ##\r\n\r\nApply this guideline whenever creating files programmatically on Windows systems.\r\n\r\n\r\n## How ##\r\n\r\nPerform the following actions to assure that files are created safely on Windows:\r\n\r\n1. **Review code.** Search for all calls to the CreateFile() function.\r\n\r\n2. **Validate file handles.** Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created.\r\n\r\n\r\n## Problem Example ##\r\n\r\nIn the code example below, the code is calling CreateFile and passing a command line argument (argv[1]) into the lpFileName parameter. A malicious attacker can exploit this code to force your application to open an unexpected object other than a file.\r\n\r\n~~~~\r\nint main(int argc, char *argv[])\r\n{\r\n    HANDLE hFile = CreateFile(\r\n      argv[1],\r\n      GENERIC_READ | GENERIC_WRITE,\r\n      NULL,\r\n      NULL,\r\n      CREATE_ALWAYS,\r\n      FILE_ATTRIBUTE_NORMAL,\r\n      NULL);\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nUse GetFileType() to ensure that you are creating a file instead of some other unexpected object.\r\n\r\n~~~~\r\nint main(int argc, char *argv[])\r\n{\r\n    HANDLE hFile = CreateFile(\r\n      argv[1],\r\n      GENERIC_READ | GENERIC_WRITE,\r\n      NULL,\r\n      NULL,\r\n      CREATE_ALWAYS,\r\n      FILE_ATTRIBUTE_NORMAL,\r\n      NULL);\r\n   if (GetFileType(hFile) != FILE_TYPE_DISK)\r\n   {\r\n  // Error Handling\r\n  CloseHandle(hFile);\r\n   }\r\n}\r\n~~~~"
        ]
      }
    ]
  }
}