{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-986712101",
      "Content_Hash": "-459948851"
    },
    "Metadata": [
      {
        "Id": [
          "81f61d02-6521-4d0e-9c4b-7f96889cef76"
        ],
        "Id_History": [
          "81f61d02-6521-4d0e-9c4b-7f96889cef76,48e0b35d-f01f-4597-8b4f-ffaf44973151,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Create Files Safely on Windows"
        ],
        "Category": [
          "File I/O"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Create Files Safely on Windows"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n    <li>Windows</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Create files safely.</p>\n  <h1>Why</h1>\n  <p>Allowing user input in the lpFileName parameter of CreateFile() can lead to the creation or opening of unexpected objects.</p>\n  <h1>When</h1>\n  <p>Apply this guideline whenever creating files programmatically on Windows systems.</p>\n  <h1>How</h1>\n  <p>Perform the following actions to assure that files are created safely on Windows:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Review code.</strong> Search for all calls to the CreateFile() function.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Validate file handles.</strong> Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created.</p>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>In the code example below, the code is calling CreateFile and passing a command line argument (argv&#91;1&#93;) into the lpFileName parameter. A malicious attacker can exploit this code to force your application to open an unexpected object other than a file.</p>\n  <pre>int main(int argc, char &#42;argv&#91;&#93;)<br />&#123;<br />&nbsp;&nbsp;&nbsp; HANDLE hFile = CreateFile(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; argv&#91;1&#93;,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_READ &#124; GENERIC_WRITE,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_ALWAYS,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_ATTRIBUTE_NORMAL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL);<br />&#125;</pre>\n  <h1>Solution Example</h1>\n  <p>Use GetFileType() to ensure that you are creating a file instead of some other unexpected object.</p>\n  <pre>int main(int argc, char &#42;argv&#91;&#93;)<br />&#123;<br />&nbsp;&nbsp;&nbsp; HANDLE hFile = CreateFile(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; argv&#91;1&#93;,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_READ &#124; GENERIC_WRITE,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_ALWAYS,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_ATTRIBUTE_NORMAL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL);<br />&nbsp;&nbsp; if (GetFileType(hFile) &#33;= FILE_TYPE_DISK)<br />&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;// Error Handling<br />&nbsp;&nbsp;CloseHandle(hFile);<br />&nbsp;&nbsp; &#125;<br />&#125;</pre>"
        ]
      }
    ]
  }
}