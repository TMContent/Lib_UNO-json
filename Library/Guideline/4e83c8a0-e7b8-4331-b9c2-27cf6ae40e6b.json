{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2027208128",
      "Content_Hash": "-55299469"
    },
    "Metadata": [
      {
        "Id": [
          "4e83c8a0-e7b8-4331-b9c2-27cf6ae40e6b"
        ],
        "Id_History": [
          "4e83c8a0-e7b8-4331-b9c2-27cf6ae40e6b,ebfb43ca-1120-4cc3-8df1-f0a407ee40a9,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Pass Sensitive Data from Page to Page"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Pass Sensitive Data from Page to Page"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>Avoid using any of the client-side state management options, such as ViewState, cookies, query strings, or hidden form-field variables, to store sensitive data. </p>\n  <h1>Why</h1>\n  <p>ViewState, cookies, query strings and hidden form-fields are common mechanisms by which sensitive data is mistakenly revealed to an attacker in plain text.&amp;nbsp; Access to the data varies and could be achieved through network sniffing or compromising the client machine. Avoiding use of these client-side mechanisms for the storage of sensitive data will significantly reduce your application's attack surface.</p>\n  <h1>When</h1>\n  <p>Follow this guideline when your application displays or manipulates sensitive information.&amp;nbsp;</p>\n  <h1>How</h1>\n  <p>Use the following steps to avoid exposing sensitive information on the client:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Review pages for sensitive data.</strong>&amp;nbsp; Review all of your pages for instances of sensitive data. This could include, but is not limited to:</p>\n      <ul>\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with users. </li>\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\n        <li>Information that comes from an external trusted source that is not designed to be shared with users. </li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Migrate to server-side state management options</strong>. Use server-side state management options, such as application state, session state&amp;nbsp;or a&amp;nbsp;SQL Server database. Use application state if the information should be global to the application.&amp;nbsp; Use session state if the information should be specific to an individual session.</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Application State. </strong>ASP.NET provides application state via the HttpApplicationState class as a method of storing global application-specific information that is visible to the entire application. Application state variables are, in effect, global variables for an ASP.NET application. <br /></p>\n        </li>\n        <li>\n          <p>\n            <strong>Session State. </strong>ASP.NET provides a session state, available as the HttpSessionState class, as a method of storing session-specific information that is visible within the session only. <br /></p>\n          <p>You can store your session-specific values and objects in session state, which is then managed by the server and available to the browser or client device. The ideal data to store in session-state variables is short-lived, sensitive data that is specific to an individual session.</p>\n        </li>\n        <li>\n          <p>\n            <strong>SQL Database. </strong>In some cases, you may wish to use database support to maintain state on your Web site. Typically, database support is used in conjunction with cookies or session state. For example, it is quite common for an e-commerce Web site to maintain state information using a relational database for the following reasons: </p>\n          <ul>\n            <li>Security </li>\n            <li>Personalization </li>\n            <li>Consistency </li>\n            <li>Data mining </li>\n          </ul>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
        ]
      }
    ]
  }
}