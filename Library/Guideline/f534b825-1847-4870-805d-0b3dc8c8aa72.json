{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-737984665",
      "Content_Hash": "73527510"
    },
    "Metadata": [
      {
        "Id": [
          "f534b825-1847-4870-805d-0b3dc8c8aa72"
        ],
        "Id_History": [
          "f534b825-1847-4870-805d-0b3dc8c8aa72,9c92444c-99f9-48d0-b1dc-99bdc4b8d646,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Hard Code Connection Strings"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Hard Code Connection Strings"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Do not hard code connection string in your assembly. Store connection strings externally, for example in configuration files.</p>\r\n  <h1>Why</h1>\r\n  <p>An attacker with access to your application can extract this information directly from the assembly. An attacker can use a decompiler to reconstitute your code, and make discovery of this information even easier.</p>\r\n  <h1>How</h1>\r\n  <p>Store connection strings in the &lt;<b>connectionStrings</b>&gt; section of Web.config file, as shown in the following configuration example.</p>\r\n  <pre>\r\n    <pre>\r\n      <br />&lt;configuration&gt;<br />&nbsp;&lt;connectionStrings&gt;<br />&nbsp; <br />&nbsp;&nbsp; &lt;add name=\"MyDbConn\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connectionString=\"Server=MyServer; Database=pubs; User Id=MyUser; password=P&#64;ssw0rd\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; providerName=\"System.Data.SqlClient\" /&gt;<br />&nbsp;&lt;/connectionStrings&gt;<br />&lt;/configuration&gt;</pre>\r\n  </pre>\r\n  <p>To use the connection string in your application, simply access the string value at run time as shown in the following example.</p>\r\n  <div>\r\n    <div>\r\n      <div>\r\n      </div>\r\n    </div>\r\n    <pre>string dbConn = ConfigurationManager.ConnectionString&#91;\"MyDbConn\"&#93;.ToString();  </pre>\r\n  </div>\r\n  <p>Sensitive data items such as connection string stored in configuration files should be encrypted. Encrypting connection strings is particularly important if they contain user credentials; for example, connection strings used with SQL authentication.</p>\r\n  <h1>Additional Resources</h1>\r\n  <p>For more information, see the following documents: </p>\r\n  <ul>\r\n    <li>ConfigurationManager Class <a href=\"http://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.aspx\">http://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.aspx</a></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}