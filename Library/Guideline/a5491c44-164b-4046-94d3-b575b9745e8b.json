{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1336300173",
      "Content_Hash": "815628058"
    },
    "Metadata": [
      {
        "Id": [
          "a5491c44-164b-4046-94d3-b575b9745e8b"
        ],
        "Id_History": [
          "a5491c44-164b-4046-94d3-b575b9745e8b,6ceb5713-4e85-40fe-8408-cc1d1bc9df85,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Filter All User-Supplied Filename And Path Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Filter All User-Supplied Filename And Path Input"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Servlets or JSP\r\n\r\n\r\n## What to Do ##\r\n\r\nCarefully validate filename and path input. Apply whitelist techniques when validating input.\r\n\r\nFilenames and paths interact directly with the underlying filesystem. Allowing malicious users to manipulate file system operations directly or indirectly through their input can expose important sensitive system files. Canonicalization vulnerabilities can result in an attacker gaining access to unexpected resources.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code allows the user to read the contents of a report file, located in /myapp/temp/. Unfortunately, the code is missing filename validation; therefore, the application is exposed to a directory traversal attack:\r\n\r\n~~~~\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.*;\r\n\r\npublic final class ReportDownloader extends HttpServlet\r\n{\r\n      public void doGet(HttpServletRequest request,\r\n            HttpServletResponse response) throws ServletException, IOException\r\n      {\r\n            response.setContentType(\"application/vnd.ms-excel\");\r\n            String baseDir = \"/myapp/temp/\";\r\n            PrintWriter out = response.getWriter();\r\n            String filename = request.getParameter(\"file\");\r\n            BufferedReader fin;\r\n            String data = \"\";\r\n\r\n            try\r\n            {\r\n                  File reportFile = new File(baseDir + filename);\r\n                  // The application fails to validate the user-supplied filename\r\n                  fin = new BufferedReader(new FileReader(reportFile));\r\n                  StringBuilder sb = new StringBuilder();\r\n                  while (data != null)\r\n                  {\r\n                        data = fin.readLine();\r\n                        if (validateData(data))\r\n                        {\r\n                              sb.append(data);\r\n                        }\r\n                        else\r\n                        {\r\n                              // Add the appropriate logging and exception handling\r\n                              // mechanisms. Consult the Exception Handling and\r\n                              // Logging sections\r\n                              out.println(\"We cannot handle your request at the moment.\"\r\n                                        + \"Please try again later.\");\r\n                              return;\r\n                        }\r\n                  }\r\n                  out.println(sb.toString());\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                  // Add the appropriate logging and exception handling mechanisms\r\n                  // Consult the Exception Handling and Logging sections\r\n                  out.println(\"We cannot handle your request at the moment.\"\r\n                            + \"Please try again later.\");\r\n            }\r\n\r\n            out.flush();\r\n            out.close();\r\n      }\r\n\r\n      boolean validateData(String input)\r\n      {\r\n             // Implement a validation routine for the format of the reports\r\n      }\r\n}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code allows the user to read the contents of a report file, located in /myapp/temp/. Since the filename is validated, an attacker cannot execute directory traversal attacks.\r\n\r\n~~~~\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.*;\r\n\r\npublic final class ReportDownloader extends HttpServlet\r\n{\r\n      public void doGet(HttpServletRequest request,\r\n            HttpServletResponse response) throws ServletException, IOException\r\n      {\r\n            response.setContentType(\"application/vnd.ms-excel\");\r\n            String baseDir = \"/myapp/temp/\";\r\n            PrintWriter out = response.getWriter();\r\n            String filename = request.getParameter(\"file\");\r\n            BufferedReader fin;\r\n            String data = \"\";\r\n\r\n            try\r\n            {\r\n                  File reportFile = new File(baseDir + filename);\r\n\r\n                  // The application validates the user-supplied filename\r\n                  if (validateFilename(reportFile))\r\n                  {\r\n                        fin = new BufferedReader(new FileReader(reportFile));\r\n                        StringBuilder sb = new StringBuilder();\r\n                        while (data != null)\r\n                        {\r\n                              data = fin.readLine();\r\n                              if (validateData(data))\r\n                              {\r\n\r\n                                    sb.append(data);\r\n                              }\r\n                              else\r\n                              {\r\n                                    // Add the appropriate logging and exception\r\n                                    // handling mechanisms. Consult the Exception\r\n                                    // Handling and Logging sections\r\n                                     out.println(\"We cannot handle your request at\"\r\n                                               + \"the moment. Please try again later.\");\r\n                                    return;\r\n                              }\r\n                        }\r\n                        out.println(sb.toString());\r\n                  }\r\n                  else\r\n                  {\r\n                        // Add the appropriate logging and exception handling mechanisms\r\n                        // Consult the Exception Handling and Logging sections\r\n                        out.println(\"We cannot handle your request at the moment.\"\r\n                                  + \"Please try again later.\");\r\n                  }\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                  // Add the appropriate logging and exception handling mechanisms\r\n                  // Consult the Exception Handling and Logging sections\r\n                  out.println(\"We cannot handle your request at the moment. \"\r\n                             + \"Please try again later.\");\r\n            }\r\n\r\n            out.flush();\r\n            out.close();\r\n      }\r\n\r\n      boolean validateFilename(File file)\r\n      {\r\n            // This represents the format /myapp/temp/<filename>\r\n            String goodPattern = \"/myapp/temp/(\\\\w|\\\\s|\\\\.|-|){1,20}\";\r\n            Pattern p = Pattern.compile(goodPattern);\r\n            Matcher m = p.matcher(file.getCanonicalPath());\r\n            if (!m.matches())\r\n            {\r\n                  return false;\r\n            }\r\n            return true;\r\n      }\r\n\r\n      boolean validateData(String input)\r\n      {\r\n            // Implement a validation routine for the format of the reports\r\n      }\r\n}\r\n~~~~"
        ]
      }
    ]
  }
}