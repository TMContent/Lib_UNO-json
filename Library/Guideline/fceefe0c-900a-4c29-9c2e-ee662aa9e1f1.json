{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "672462200",
      "Content_Hash": "-1498313326"
    },
    "Metadata": [
      {
        "Id": [
          "fceefe0c-900a-4c29-9c2e-ee662aa9e1f1"
        ],
        "Id_History": [
          "fceefe0c-900a-4c29-9c2e-ee662aa9e1f1,a1ffa183-ce84-403a-a253-4ad2231ba8db,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Structured Exception Handling"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Structured Exception Handling"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use structured exception handling.</p>\r\n  <h1>Why</h1>\r\n  <p>Structured exception handling improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure.</p>\r\n  <h1>When</h1>\r\n  <p>Structured exception handling should be used any time multiple types of exceptions can be thrown.</p>\r\n  <h1>How</h1>\r\n  <p>Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the <em>try/catch</em> block should have multiple catch clauses to satisfy each type of exception. For example, if a <em>FileNotFoundException</em> and <em>UnsupportedCallbackException</em> are expected, then there should be an exception handler for each type of exception:</p>\r\n  <pre>try{<br />      ...<br />}<br />catch (FileNotFoundException fnf)<br />{<br />      logger.warning(fnf.toString());<br />}<br />catch (UnsupportedCallbackException uce)<br />{<br />      logger.warning(uce.toString());<br />}<br />finally<br />{<br />      //Execute clean-up routine<br />}</pre>\r\n  <p>\r\n    <strong>Note:</strong> The example above assumes that there is a global exception handling mechanism placed at the root of the code execution.<br /></p>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code shows part of an implementation of a JAAS Login Module. Because the code uses a single exception handler, the application cannot log the exception information appropriately.</p>\r\n  <pre>public boolean login() throws LoginException{<br /><br />      if(callbackHandler == null)<br />      {<br />            throw new LoginException(\"Authentication failed.\");<br />      }<br /><br />      // Prompt strings and echo flag not used in callbacks<br />      Callback[] callbacks = new Callback[2];<br />      callbacks[0] = new NameCallback(\"User: \");<br />      callbacks[1] = new PasswordCallback(\"Pass: \", false);<br /><br />      try<br />      {<br />            callbackHandler.handle(callbacks);<br />            NameCallback nameCall = (NameCallback)callbacks[0];<br />            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];<br /><br />            user = nameCall.getName();<br />            char[] tempPass = pwdCall.getPassword();<br />            if(tempPass == null)<br />            {<br />                  pass = null;<br />            }<br />            else<br />            {<br />                  pass = new char[tempPass.length];<br />                  common.copyArray(tempPass, pass);<br />            }<br /><br />            pwdCall.clearPassword();<br /><br />            // Verify credentials<br />            if(validUser())<br />            {<br />                  succeeded = true;<br />                  return true;<br />            }<br />            else<br />            {<br />                  succeeded = false;<br />                  clearCredentials();<br />                  throw new FailedLoginException(\"Authentication failed.\");<br />            }<br />      }<br /><br />      // The application has a single exception handler when<br />      // IOException and UnsupportedCallbackException are expected<br />      catch (Exception e)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br /><br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code shows part of an implementation of a JAAS Login Module. Because the code uses structured exception handling, the application can log the exception information appropriately.</p>\r\n  <pre>public boolean login() throws LoginException{<br /><br /><br />      if(callbackHandler == null)<br />      {<br />            throw new LoginException(\"Authentication failed.\");<br />      }<br /><br />      // Prompt strings and echo flag not used in callbacks<br />      Callback[] callbacks = new Callback[2];<br />      callbacks[0] = new NameCallback(\"User: \");<br />      callbacks[1] = new PasswordCallback(\"Pass: \", false);<br /><br />      try<br />      {<br />            callbackHandler.handle(callbacks);<br />            NameCallback nameCall = (NameCallback)callbacks[0];<br />            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];<br /><br />            user = nameCall.getName();<br />            char[] tempPass = pwdCall.getPassword();<br />            if(tempPass == null)<br />            {<br />                  pass = null;<br />            }<br />            else<br />            {<br />                  pass = new char[tempPass.length];<br />                  common.copyArray(tempPass, pass);<br />            }<br /><br />            pwdCall.clearPassword();<br /><br />            // Verify credentials<br />            if(validUser())<br />            {<br />                  succeeded = true;<br />                  return true;<br />            }<br />            else<br />            {<br />                  succeeded = false;<br />                  clearCredentials();<br />                  throw new FailedLoginException(\"Authentication failed.\");<br />            }<br />      }<br /><br /><br />      // The application uses structured exception handling for<br />      // the expected IOException and UnsupportedCallbackException<br />      catch (IOException ioe)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />      catch (UnsupportedCallbackException uce)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br /><br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />      catch (Exception e)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br /><br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />  }</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about Java exceptions, visit: <a href=\"http://download.oracle.com/javase/tutorial/essential/exceptions/index.htmll\">Lesson: Exceptions</a> available from Oracle.</li>\r\n  </ul>\r\n  <h1>Java Error Handling Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/fceefe0c-900a-4c29-9c2e-ee662aa9e1f1\">Use Structured Exception Handling</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/3e815c74-4d57-4c1b-8446-750b319ea046\">Use a Global Exception Handler for Unhandled Exceptions</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/30abc3c9-d288-4e8a-a614-fd1a1f331270\">Do Not Disclose Valuable Information During Authentication Errors</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/56ad1852-7fc3-4d1f-b109-bbcce29170f7\">Do Not Disclose Exception Details to the Client</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/fd4b2a8a-db2d-4594-ba30-3ce5f63ad459\">Do Not Include Debug Data in Output</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/2739df30-b3da-417e-8856-2201a2b2a17a\">Structured Exception Handling Is Used</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c88e1b49-357d-4202-aafc-86ce0de485bd\">A Global Exception Handler Is Used for Unhandled Exceptions</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/e574d1d8-acae-4c64-90db-a0f6b98ca45f\">Valuable Information Is Not Disclosed During Authentication Errors</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d13e57d7-f6f5-4bd4-8629-26c45f9f029b\">Exception Details Are Not Disclosed to the Client</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d33cc3de-517c-4c84-95bd-24f14d9d99d6\">Debug Data Is Not Included in Output</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/5556fc17-3f60-4fc0-8717-0a2ff1c12701\">How to Test for Exception Information Disclosure Bugs in Java</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}