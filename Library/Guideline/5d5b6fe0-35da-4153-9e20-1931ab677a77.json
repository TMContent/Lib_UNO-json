{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1464193471",
      "Content_Hash": "-29435316"
    },
    "Metadata": [
      {
        "Id": [
          "5d5b6fe0-35da-4153-9e20-1931ab677a77"
        ],
        "Id_History": [
          "5d5b6fe0-35da-4153-9e20-1931ab677a77,5c79f18f-893e-47af-97e0-99b22b2bb9ba,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Consider Exception Filter Issues"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Consider Exception Filter Issues"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>If you use programmatic impersonation, use structured exception handling and put the impersonation code inside <b>try</b> blocks. Use a <b>catch</b> block to handle exceptions and to prevent exceptions propagating. Use a <b>finally</b> block to ensure that the impersonation is reverted.</p>\n  <h1>Why</h1>\n  <p>If your code fails to catch exceptions and your code uses impersonation, a malicious user could use exception filters to execute code that runs under the impersonated security context, even if you are reverting the impersonation in your <b>finally</b> block. This is particularly serious if your code impersonates a privileged account. If your code does not catch the exception, exception filters higher in the call stack can be executed before code in your <b>finally</b> block is executed.</p>\n  <h1>When</h1>\n  <p>This is important guideline and should be followed wehnever working with programmatic impersonation.</p>\n  <h1>How</h1>\n  <p>If you use programmatic impersonation, use structured exception handling and put the impersonation code inside <b>try</b> blocks. Use a <b>catch</b> block to handle exceptions and to prevent exceptions propagating. Use a <b>finally</b> block to ensure that the impersonation is reverted, as shown in the following example.</p>\n  <pre>using System.Security.Principal;<br />. . .<br />WindowsIdentity winIdentity = new WindowsIdentity(\"<a href=\"mailto:username@domainName\">username@domainName</a>\");<br />WindowsImpersonationContext ctx = null;<br />try<br />{</pre>\n  <pre>&amp;nbsp; ctx = winIdentity.Impersonate();<br />&amp;nbsp; // Do work.<br />&amp;nbsp; ...<br />}<br />// Do not let the exception propagate. Catch it here.<br />catch(Exception ex)<br />{<br />&amp;nbsp; ...<br />}<br />finally<br />{<br />&amp;nbsp; // Stop impersonating.<br />&amp;nbsp; ctx.Undo();<br />}  </pre>\n  <p>By using a <b>finally</b> block, you make ensure that the impersonation token is removed from the current thread, even if an exception is generated. By preventing the exception from propagating from the <b>catch</b> block, you make sure that exception filter code higher in the call stack does not execute while the thread still has an impersonation token attatched to it.</p>\n  <blockquote>\n    <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;Exception filters are supported by Microsoft Intermediate Language (MSIL) and Visual Basic .NET.</blockquote>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}