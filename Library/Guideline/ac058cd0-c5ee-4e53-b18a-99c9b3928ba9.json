{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "587011624",
      "Content_Hash": "-1221406383"
    },
    "Metadata": [
      {
        "Id": [
          "ac058cd0-c5ee-4e53-b18a-99c9b3928ba9"
        ],
        "Id_History": [
          "ac058cd0-c5ee-4e53-b18a-99c9b3928ba9,c6135cce-c5b5-4720-a60f-d2546e0ce223,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Use Properties to Expose Fields"
        ],
        "Category": [
          "Design Considerations"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Properties to Expose Fields"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\n  <p>Use properties to expose non-private fields.</p>\n  <h1>Why</h1>\n  <p>Properties allow you to add additional constraints, such as input validation or permission demands.</p>\n  <h1>When</h1>\n  <p>This is an important guideline and should be followed all the time.</p>\n  <h1>How</h1>\n  <p>Fields should not be exposed directly to calling code. Mark fields as private, and create read/write or read-only properties to access them.</p>\n  <blockquote>\n    <p>\n      <b>Note</b>&nbsp;&nbsp;&nbsp;Private fields are enforced at compile time only. When malicious code runs in a full trust environment, it could use reflection or unmanaged pointers to bypass these visibility restrictions.</p>\n  </blockquote>\n  <p>Here is an example of how to use property for adding input validation.&nbsp;</p>\n  <pre>public class Employee<br />&#123;<br />&nbsp;&nbsp;&nbsp; private String employeeName;<br />&nbsp;&nbsp;&nbsp; public String Name<br />&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.employeeName; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(&#33;Regex.IsMatch(value,&#64;\"&#94;&#91;a-zA-Z'.\\s&#93;&#123;1,40&#125;&#36;\"))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ArgumentException(\"Employee Name is not well formed\");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.employeeName = value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp; &#125;<br />&#125;</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>Using Properties at&nbsp;<a href=\"http://msdn.microsoft.com/en-us/library/w86s7x04.aspx\">http://msdn.microsoft.com/en-us/library/w86s7x04.aspx</a></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}