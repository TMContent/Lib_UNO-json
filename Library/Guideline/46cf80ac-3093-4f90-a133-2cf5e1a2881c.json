{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "978673893",
      "Content_Hash": "2005153097"
    },
    "Metadata": [
      {
        "Id": [
          "46cf80ac-3093-4f90-a133-2cf5e1a2881c"
        ],
        "Id_History": [
          "46cf80ac-3093-4f90-a133-2cf5e1a2881c,15eef21b-6c2e-4ed7-a89c-836dd23a0c0b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          ".NET Set Strict Domains And Paths in Session Cookies"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Set Strict Domains And Paths in Session Cookies"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* ASP.NET 4.0\r\n\r\n\r\n## Summary ##\r\n\r\nSet strict domains and paths for session cookies. Setting strict domains and paths in session cookies makes it harder for attackers to hijack user sessions.\r\n\r\n\r\n## Solution Example ##\r\n\r\n\r\nSet the cookie path. \r\n\r\n~~~~\r\nif (Response.Cookies.Count > 0)\r\n{\r\n    foreach (string cookie in Response.Cookies.AllKeys)\r\n    {\r\n        if (cookie == “ASP.NET_SessionId”){\r\n             Response.Cookies[cookie].Path = \"StrictPath\";\r\n        }\r\n    }\r\n}\r\n~~~~\r\n\r\nIn the code above, \"StrictPath\" is the strict path value defined for the session cookie. The code example above is bulky to make sure that the session cookie exists, because otherwise the application will throw an exception. \r\n\r\n\r\nSet the cookie domain. \r\n\r\n~~~~\r\nif (Response.Cookies.Count > 0)\r\n{\r\n    foreach (string cookie in Response.Cookies.AllKeys)\r\n    {\r\n        if (cookie == “ASP.NET_SessionId”){\r\n             Response.Cookies[cookie].Domain = \"StrictDomain\";\r\n        }\r\n    }\r\n}\r\n~~~~\r\n\r\nIn the code above, \"StrictDomain\" is the strict domain value defined for the session cookie. The code example above is bulky to make sure that the session cookie exists, because otherwise the application will throw an exception. "
        ]
      }
    ]
  }
}