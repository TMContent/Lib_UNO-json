{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1999689783",
      "Content_Hash": "-570382073"
    },
    "Metadata": [
      {
        "Id": [
          "9e556cb2-130f-4df7-91dd-dd6fea6afdcf"
        ],
        "Id_History": [
          "9e556cb2-130f-4df7-91dd-dd6fea6afdcf,6e65672e-432f-4c40-b996-64e78179cf82,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Do Not Log Or Reveal Sensitive Information"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Log Or Reveal Sensitive Information"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>Avoid logging sensitive or private data such as user passwords. Do not reveal too much information to the caller. <h1>Why</h1><p>Permissions required to access logs are often different than permissions required to access sensitive or private user data.&amp;nbsp; Logging such data can results in unintended information disclosure.</p><p>Exception details can include operating system and .NET Framework version numbers, method names, computer names, SQL command statements, connection strings, and other details that are very useful to attackers</p><h1>When</h1><p>Follow this guideline when designing a logging architecture and when handling exceptions.</p><h1>How</h1><p>Use the following steps to avoid revealing sensitive information:</p><ol><li>In the design phase, create a list of all sensitive user data your system handles.&amp;nbsp; Include composite data elements which are sensitive in combination, like multi-part registration credentials or fields which together uniquely identify an individual.&amp;nbsp; Remember that sensitive data can come in a wide variety of formats.&amp;nbsp; Names of customers, government issued ID numbers, credit card or other financial information, passwords, and private keys are all examples of sensitive information.&amp;nbsp; Some industries, such as health care and banking, have regulatory standards that define sensitive information.&amp;nbsp; Use regulatory requirements, as they apply to your application, to identify sensitive data.&amp;nbsp; In general sensitive data can be defined as follows: <ol><li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with users. </li><li>Information that a user provides that they would not want shared with other users of the application. </li><li>Information that comes from an external trusted source that is not designed to be shared with users. </li></ol></li><li>Ensure sensitive data does not get logged. When designing a logging architecture for your application, pay special attention to components that will handle sensitive data.&amp;nbsp; Design logging systems for these components so that they do not collect sensitive data.&amp;nbsp; When recording transactions inside your system, log only the minimum amount of information needed.&amp;nbsp; If you're logging a new order from a customer, log only the time, customer ID, and order ID.&amp;nbsp; Information like customer names, items ordered, or payment information can be reconstructed from transaction records and can be left out of the logging system. </li><li>Make sure that exception details are not allowed to propagate beyond the application boundary to the client. The rich exception details included in <b>Exception</b> objects are valuable to developers and attackers alike. </li><li>Log details by writing them in the event log to aid problem diagnosis but return generic error messages to the user.</li></ol><hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}