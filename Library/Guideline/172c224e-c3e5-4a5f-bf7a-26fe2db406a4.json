{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1486758888",
      "Content_Hash": "137835978"
    },
    "Metadata": [
      {
        "Id": [
          "172c224e-c3e5-4a5f-bf7a-26fe2db406a4"
        ],
        "Id_History": [
          "172c224e-c3e5-4a5f-bf7a-26fe2db406a4,cf854fa3-eb83-44e0-b6d2-9be0bd3f8b27,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Encrypt Communication Links"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Encrypt Communication Links"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java\r\n\r\n\r\n## Summary ##\r\n\r\nEncrypt the communication channels when interacting with other software across the network. Encrypting the communication links allows the application to preserve the confidentiality and integrity of the transmitted data.\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code establishes a connection between two servers. Unfortunately, the communication is not encrypted; therefore, it is possible for an attacker to eavesdrop on the connection.\r\n\r\n~~~~\r\nString remoteHost = \"server02.example.com\";\r\nint remotePort = \"1337\";\r\n\r\nSocket sock = new Socket(remoteHost, remotePort);\r\nInputStreamReader isr = new InputStreamReader(sock.getInputStream());\r\nBufferedReader input = new BufferedReader(isr);\r\nPrintWriter output = new PrintWriter(sock.getOutputStream(), true);\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code establishes a connection between two servers. Because the communication is encrypted, the confidentiality of the data in transit is preserved; therefore, it is impossible for an attacker to eavesdrop on the connection.\r\n\r\n~~~~\r\nString remoteHost = \"server02.example.com\";\r\nint remotePort = \"1337\";\r\n\r\nSSLSocketFactory sslSF = (SSLSocketFactory) SSLSocketFactory.getDefault();\r\nSSLSocket sslSock = (SSLSocket) sslSF.createSocket(remoteHost, remotePort);\r\n\r\nInputStreamReader isr = new InputStreamReader(sslSock.getInputStream());\r\nBufferedReader input = new BufferedReader(isr);\r\nPrintWriter output = new PrintWriter(sslSocket.getOutputStream(), true);\r\n~~~~"
        ]
      }
    ]
  }
}