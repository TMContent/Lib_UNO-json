{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-632114422",
      "Content_Hash": "-2144988167"
    },
    "Metadata": [
      {
        "Id": [
          "41b5df05-32be-44df-93b6-f3cb4117f676"
        ],
        "Id_History": [
          "41b5df05-32be-44df-93b6-f3cb4117f676,74ad2b6d-3cc2-4302-b360-4801491f1c28,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Use Locks with Mutexes to Avoid Deadlocks"
        ],
        "Category": [
          "Concurrency"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Locks with Mutexes to Avoid Deadlocks"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Use the std::lock_guard C&#43;&#43; class template to assure that mutexes are released automatically.</p>\n  <h1>Why</h1>\n  <p>Using std::lock_guard makes it simpler to prevent deadlocks, because it unlocks mutexes automaticaly when a function exits.</p>\n  <h1>When</h1>\n  <p>Use std::lock_guard when using mutexes in multi-threaded applications.</p>\n  <h1>How</h1>\n  <p>Perform the following actions to use locks with mutexes:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify unsafe code.</strong> Search for code that manually locks and unlocks mutexes by calling lock() and unlock() functions.</p>\n      <li>\n        <p>\n          <strong>Add locks.</strong> Add locks to functions that manually lock() and unlock() mutexes by declaring them in a manner such as const std::lock_guard&lt;std::mutex&gt;(mutex);</p>\n        <li>\n          <p>\n            <strong>Remove old code.</strong> Remove calls to lock() and unlock() from the functions where a lock is now being used.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Solution Example</h1>\n  <p>In the following example, a lock is being used with the mutex. Notice that nothing else is necessary to assure concurrency when using a lock. Yes, it really is that simple.</p>\n  <pre>static std::mutex mutex;</pre>\n  <pre>void function()&#123;</pre>\n  <pre>   const std::lock_guard&lt;std::mutex&gt;(mutex);</pre>\n  <pre>   //do stuff<br />&#125;</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information about using locks, please see \"CON02-CPP. Use lock classes for mutex management\" at <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.&#43;Use&#43;lock&#43;classes&#43;for&#43;mutex&#43;management\">https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.&#43;Use&#43;lock&#43;classes&#43;for&#43;mutex&#43;management</a></li>\n  </ul>"
        ]
      }
    ]
  }
}