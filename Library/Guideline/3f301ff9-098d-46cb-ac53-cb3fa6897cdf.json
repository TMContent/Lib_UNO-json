{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1979490337",
      "Content_Hash": "1865910825"
    },
    "Metadata": [
      {
        "Id": [
          "3f301ff9-098d-46cb-ac53-cb3fa6897cdf"
        ],
        "Id_History": [
          "3f301ff9-098d-46cb-ac53-cb3fa6897cdf,6f3d588a-ba00-41f3-ba67-9d6030a863c7,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Protect Sensitive Data Inside Configuration Files"
        ],
        "Category": [
          "Hardening"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Protect Sensitive Data Inside Configuration Files"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Servlets\r\n* JSP\r\n\r\n\r\n## Problem Example ##\r\n\r\nThe following code retrieves database credentials from a configuration file. Unfortunately, the credentials are not encrypted; therefore, anybody with access to the configuration file can retrieve the credentials and access the database on behalf of the application.\r\n\r\n~~~~\r\npublic Properties loadDatabaseCredentials() throws IOException{\r\n      Properties prop = new Properties();\r\n      InputStream propStream = new FileInputStream(\"../../config/testProp.config\");\r\n      prop.load(propStream);\r\n      propStream.close();\r\n\r\n      return prop;}\r\n~~~~\r\n\r\n\r\n## Solution Example ##\r\n\r\nThe following code retrieves database credentials from a configuration file. Because the credentials are encrypted, the application decrypts them in real time, protecting the credentials' confidentiality in case the local access to the configuration file is not properly secured.\r\n\r\n~~~~\r\npublic Properties loadDatabaseCredentials()\r\n      throws GeneralSecurityException, IOException{\r\n      // Set the decryption mechanism\r\n      byte[] rawKey = getEncryptionKey();\r\n      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\r\n      Cipher cipher = Cipher.getInstance(\"AES\");\r\n      cipher.init(Cipher.DECRYPT_MODE, skeySpec);\r\n\r\n      // Decrypt config file\r\n\r\n      File configFile = new File(\"../../config/testProp.config\");\r\n      byte[] tempBuff = new byte[(int)configFile.length()];\r\n      FileInputStream fileStream = new FileInputStream(configFile);\r\n      fileStream.read(tempBuff, 0, tempBuff.length);\r\n\r\n      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));\r\n      prop.load(propStream);\r\n      propStream.close();\r\n      fileStream.close();\r\n\r\n      return prop;}\r\n~~~~"
        ]
      }
    ]
  }
}