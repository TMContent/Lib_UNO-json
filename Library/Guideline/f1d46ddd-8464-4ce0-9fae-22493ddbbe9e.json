{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-421642814",
      "Content_Hash": "1925612607"
    },
    "Metadata": [
      {
        "Id": [
          "f1d46ddd-8464-4ce0-9fae-22493ddbbe9e"
        ],
        "Id_History": [
          "f1d46ddd-8464-4ce0-9fae-22493ddbbe9e,201529ad-7b0e-45ed-8ef4-310af5ccc4e6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Avoid Creating Temporary Files in Unsafe Locations"
        ],
        "Category": [
          "File I/O"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Avoid Creating Temporary Files in Unsafe Locations"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## What to Do ##\r\n\r\nAvoid using temporary files if possible. If temporary files are necessary, place them in folders secured with ACLs, use random file names, and remove them before the program exits.\r\n\r\n\r\n## Why ##\r\n\r\nPlacing temporary files in locations where other programs and users may access them may result in multiple vulnerabilities, depending on exactly what the temporary files are used for. In some cases, placing sensitive data in publicly available temporary files may result in information disclosure vulnerabilities. In other cases, an attacker may tamper with the contents of the temporary files and alter program behavior.\r\n\r\n\r\n## When ##\r\n\r\nUse this guideline if your program creates temporary files.\r\n\r\n\r\n## How ##\r\n\r\nFollow these steps to assure that your temporary files are created and used securely:\r\n\r\n1. **Avoid using temporary files.** If temporary files are used to share data with other processes, consider using other inter-process communication mechanisms, such as sockets, shared memory, or remote procedure calls.\r\n\r\n2. **Secure the temporary directory.** Create a separate directory and secure it with ACLs. Use this directory for temporary files.\r\n\r\n3. **Use unique names.** Generate (pseudo-)random strings and use them for temporary file names to assure that it is difficult for an attacker to predict the names of the temporary files.\r\n\r\n4. **Clean up.** Remove temporary files before the program exits.\r\n\r\n\r\n## Additional Resources ##\r\n\r\n* For more information about creating temporary files in secure locations, see [https://www.securecoding.cert.org/confluence/display/cplusplus/FIO19-CPP.+Do+not+create+temporary+files+in+shared+directories](https://www.securecoding.cert.org/confluence/display/cplusplus/FIO19-CPP.+Do+not+create+temporary+files+in+shared+directories)"
        ]
      }
    ]
  }
}