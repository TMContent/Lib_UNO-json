{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1568503334",
      "Content_Hash": "-1051805425"
    },
    "Metadata": [
      {
        "Id": [
          "03a6163b-a68c-409f-b19e-11ca604119bc"
        ],
        "Id_History": [
          "03a6163b-a68c-409f-b19e-11ca604119bc,a7d8b316-a9d6-4e16-bebc-7aff5fb08deb,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] Isolate Unmanaged API Calls in a Wrapper Assembly"
        ],
        "Category": [
          "Unmanaged Code"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Isolate Unmanaged API Calls in a Wrapper Assembly"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>To make it easier maintain and review your code, place all unmanaged API calls in a wrapper assembly</p>\r\n  <h1>Why</h1>\r\n  <p>his allows you to: </p>\r\n  <ul>\r\n    <li>Easily determine the set of unmanaged APIs your application is dependant on. <li>Isolate your unmanaged calls in a single assembly. <li>Isolate the <b>UnmanagedCodePermission </b>to a single assembly.</li></li></li>\r\n  </ul>\r\n  <h1>How</h1>\r\n  <p>Isolate all unmanaged API calls in a wrapper assembly.&amp;nbsp;Use naming conventions to keep native code risks in mind when you develop and review code. Categorize your unmanaged code and use a prefix to indicate the types that you use to encapsulate the unmanaged APIs. </p>\r\n  <p>Use the word <i>Safe </i>to identify code that poses no possible security threat and is harmless for any code, malicious or otherwise, to call. You can annotate safe classes with the <b>SuppressUnmanagedCodeSecurity</b> attribute, which turns off the code-access security permission's demand for full trust. </p>\r\n  <pre>&amp;#91;SuppressUnmanagedCodeSecurity&amp;#93;<br />class SafeNativeMethods &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; DllImport(\"user32\")&amp;#93;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; internal static extern void MessageBox(string text);<br />&amp;#125;  </pre>\r\n  <p>Use the word <i>Native</i> to identify unmanaged code that is potentially unsafe but is protected with a full stack-walking demand for the unmanaged code permission. These are implicitly made by the interop layer unless they have been suppressed with the <b>SuppressUnmanagedCodeSecurity</b> attribute. </p>\r\n  <pre>class NativeMethods &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;DllImport(\"user32\")&amp;#93;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; internal static extern void FormatDrive(string driveLetter);<br />&amp;#125;  </pre>\r\n  <p>Use the word <i>Unsafe</i> to identify unmanaged code that is potentially unsafe and that has the security demand for the unmanaged code permission declaratively suppressed. Any caller of these methods must do a full security review to ensure that the usage is safe because no stack walk is performed. </p>\r\n  <pre>&amp;#91;SuppressUnmanagedCodeSecurity&amp;#93;<br />class UnsafeNativeMethods &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;DllImport(\"user32\")&amp;#93;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; internal static extern void CreateFile(string fileName);<br />&amp;#125;</pre>\r\n  <h1>&amp;nbsp;</h1>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}