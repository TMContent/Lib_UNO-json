{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1460688119",
      "Content_Hash": "1402807187"
    },
    "Metadata": [
      {
        "Id": [
          "eb00762e-1c8a-4c03-ae23-b0656b697524"
        ],
        "Id_History": [
          "eb00762e-1c8a-4c03-ae23-b0656b697524,49a76878-ab5d-4b08-8f55-a9c6b521f2d3,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Use New And Delete Instead of Direct Memory Operations"
        ],
        "Category": [
          "Unmanaged Code"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use New And Delete Instead of Direct Memory Operations"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use object-oriented operators new and delete instead of direct memory operations, such as malloc, calloc, realloc, and free.</p>\r\n  <h1>Why</h1>\r\n  <p>One advantage of using object-oriented operators instead of direct memory operations is that new and delete operators automatically call constructors and destructors - this significantly reduces the likelihood of a number of typical programming errors. Calling constructors automatically removes the possibility of accessing memory of an object before it is initialized.</p>\r\n  <h1>When</h1>\r\n  <p>Use new and delete operators whenever initiating objects based on classes.</p>\r\n  <h1>How</h1>\r\n  <p>New and delete operators are very basic operators in C&#43;&#43; programming.</p>\r\n  <ul>\r\n    <li>\r\n      <p>\r\n        <strong>To use the new operator:</strong> declare a class, declare a variable of that class type, and initialize the variable by calling the new operator. Arguments to the new operator are passed as arguments to the constructor.</p>\r\n      <li>\r\n        <p>\r\n          <strong>To use the delete operator:</strong> call the delete operator on a previously declared and initialized pointer of a non-system class type. Memory allocation and deallocation of basic system types, such as int, double, char, etc. are handled automatically.</p>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about using C&#43;&#43; operators instead of direct memory operations, please see <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.&#43;Use&#43;new&#43;and&#43;delete&#43;rather&#43;than&#43;raw&#43;memory&#43;allocation&#43;and&#43;deallocation\">https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.&#43;Use&#43;new&#43;and&#43;delete&#43;rather&#43;than&#43;raw&#43;memory&#43;allocation&#43;and&#43;deallocation</a></li>\r\n  </ul>"
        ]
      }
    ]
  }
}