{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "940d6e95-fc25-4e9d-8545-2262ed6e99ba"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000057c0df,940d6e95-fc25-4e9d-8545-2262ed6e99ba,6eb04491-2a7c-4938-af9d-52bef9adb69f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Code Injection"
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Code Injection"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nScripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application. Code injection vulnerabilities affect all scripting languages, but typically occur in web applications written in PHP. \n\n=Impact\n\nAn attacker gains full control of the application and the ability to use any operating system functions that are available to the scripting environment. Code injection is one of the most dangerous vulnerability types, if not the most dangerous. On top of being extremely powerful, code injection vulnerabilities are typically easy to exploit, especially in web applications. \n\n=Countermeasures\n\nTo prevent code injection vulnerabilities, validate all input and avoid using dangerous APIs. \n\nValidate all input:\n* [[c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52|Use Positive Input Validation]]\n\nAvoid using dangerous APIs:\n* [[fe289976-08f4-46b3-a6ec-b80828d090b6|Disable Dangerous Functions]]\n* [[f54eacd2-ec2f-47a8-9639-67c01a1fcdd0|Disable Loading Libraries from URLs]]\n\n=Application Check\n\nTo check your application for code injection, find all the calls to dangerous functions and verify that data passed to them is sufficiently validated, and ensure that dangerous APIs are avoided.\n\nAll input is validated:\n* [[d4129497-3a66-44d1-881e-e6f004af2e0d|Positive Input Validation Is Used]]\n\nDangerous APIs are avoided:\n* [[50ff859f-1562-4b27-b230-1e3d5bd8a3b9|Dangerous Functions Are Disabled]]\n\n=Computer Based Training Links=\n\nUse the following Computer Based Training courses for more background information about this type of vulnerabilities.\n\n==Creating Secure PHP Code==\n\nThis course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. After completing this course, you will be able to describe the best practices for developing secure PHP code, explain common PHP vulnerabilities and learn mitigation techniques to avoid common PHP vulnerabilities and write secure code.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127620|COD 315 Creating Secure PHP Code]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\n\n=Additional Resources\n\n* For more information about code injection, see http://en.wikipedia.org/wiki/Code_injection"
        ]
      }
    ]
  }
}