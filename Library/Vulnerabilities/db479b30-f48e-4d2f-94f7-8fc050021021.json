{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "db479b30-f48e-4d2f-94f7-8fc050021021"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-000000140c0a,db479b30-f48e-4d2f-94f7-8fc050021021,9c7d9e84-650a-4768-bd7f-e69004171ed8,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Parameter Tampering"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Parameter Tampering"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nA parameter tampering vulnerability occurs when an attacker can modify parameters used by a web application that have security implications. For example, a vulnerable application may allow an attacker to change his user id by changing request parameters. The vulnerability stems from relying on user-accessible parameters to store security sensitive information. Common vulnerable areas are data stored in cookies, hidden form fields, and HTTP request parameters. This vulnerability type applies to web applications. \n\n=Impact\n\nThe exact impact of parameter tampering depends on the parameters that are available for tampering. This vulnerability usually allows the attacker to change his status from regular user to admin. In that case, the attacker is able to take full control of the application and its data. Another common impact is that the attacker is able to change his user id to that of another user. In that case the attacker can access and modify the user's data and impersonate that user. Parameter tampering usually allows the attacker to impersonate any user of his choosing. \n\n=Countermeasures\n\nTo prevent this problem, use platform provided session management, and don't store sensitive data in user accessible parameters. \n\nDon't store sensitive data in user accessible parameters:\n* [[9df0b518-f832-4a7c-9857-0517638c47db|Do Not Make Security Decisions Based on Client-Accessible Parameters]]\n\n=Application Check\n\nTo check for adequate protection against this vulnerability, ensure that platform provided session management is used, and sensitive data is not stored in user accessible parameters. Identify all user-mutable parameters and verify that tampering with them does not result in elevated privileges. \n\nPlatform-provided session management is used:\n* [[3f2660b3-a935-4b4e-85ff-27ae28683f5b|Session Management Offered by the Framework Is Used]]\n\nSensitive data is not stored in user accessible parameters:\n* [[4436e342-64d9-4b1b-ae9b-3e00696053fb|Security Decisions Are Not Made Based on Client-Accessible Parameters]]\n\n=Computer Based Training Links=\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n==Software Security Awareness==\n\nThis course is ideal for anyone that is involved in the Software Development process or information security personnel that need to better understand software security. Upon course completion, you will be familiar with the key attributes of a secure software development lifecycle and specific activities that need to be performed to develop secure software.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127651|AWA 102 Software Security Awareness]] \n\n==Creating Secure Code – JRE Foundations==\n\nIn this course, you will learn to recognize and remediate common Java Web software security vulnerabilities.  This course has three modules, which introduce you to these vulnerabilities and help you to identify and remediate them.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127615|COD 211 Creating Secure Code – JRE Foundations]]\n\n==Fundamentals of Web 2.0 Security==\n\nThis course introduces you to the fundamentals of secure Web 2.0 development. The course begins with a discussion about Web 2.0, its evolution, and the technologies behind it. The course describes common Web 2.0 attacks that can cause significant loss to organizations. It reviews the best practices that you should incorporate to mitigate the risks from Web 2.0 attacks, as well as practices to avoid. The course concludes with a walk-through of a software system scenario that can help you better understand Web 2.0 attacks and apply the best practices discussed in the course.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127634|COD 151 Fundamentals of Web 2.0 Security]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\n\n=Additional Resources\n\n* For more information about parameter tampering, see https://www.owasp.org/index.php/Web_Parameter_Tampering"
        ]
      }
    ]
  }
}