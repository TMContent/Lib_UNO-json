{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "fdd2fa70-27b7-4399-ba3c-3b0b1bc7360b"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000003a00a,fdd2fa70-27b7-4399-ba3c-3b0b1bc7360b,68be14d0-fb9e-45eb-9cd1-a7595334ceb4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Open Redirect"
        ],
        "Category": [
          "Redirects and Forwards"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Open Redirect"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\r\n\r\nMany web applications use URL redirection to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker may be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website. This vulnerability applies to all applications that use URL redirection. \r\n\r\n=Impact\r\n\r\nOpen redirects allow an attacker to send users to a malicious site via a legitimate-looking URL. Many users are tricked by the legitimate-looking URL into thinking that they are browsing a trusted site. The malicious site may have an authentic looking login page, which tempts unsuspecting users into entering their usernames and passwords. When personal information is entered into the malicious login page, it is recorded for the attacker's use. Once the attacker has valid user credentials, he can access or modify users' data in the application. If the attacker is able to take over an administrative account, he may gain full control of the application. \r\n\r\n=Countermeasures\r\n\r\nTo prevent this problem, avoid using redirects altogether, if possible.  If redirects are necessary, avoid redirection based on user input if possible. If user input is necessary for redirects, use reference maps to limit permissible redirect destinations, and always validate destinations of redirects. \r\n\r\nThe choice depends on how much user input is required to determine where to redirect to. The less user input, the safer the application. If redirection takes place regardless of user input, destinations can be calculated without user input. If user input is necessary, ensure that there is a clearly defined list of valid redirection targets, and use these to build reference maps to limit permissible redirect destinations, and always validate the destinations.  NOTE: If valid targets cannot be reduced to a list of safe destinations, then an open redirect vulnerability is virtually guaranteed and it's better not to redirect at all.  \r\n\r\nIf redirection can be calculated without user input:\r\n* [[e4f51a77-5401-4aec-8c64-4198b2718b8d|Calculate Destinations of Redirects And Forwards Without User Input]]\r\n\r\nIf user input is necessary, and it is possible to clearly define valid redirection targets:\r\n* [[2869a8f0-93b8-4689-b531-d59367988a33|Use Mapping Values When Redirecting on User Input]]\r\n\r\n=Application Check\r\n\r\nTo check for adequate protection against this problem, choose the application checks below that fit the above Countermeasures strategy you have chosen:  Ensure that redirects are not used.  OR  Ensure that redirection is not based on user input.  OR  If user input is needed, ensure that reference maps are used to limit permissible redirect destinations, and always validate the destinations of redirects.\r\n\r\nIf redirects can be calculated without user input:\r\n* [[68b7a084-36f3-470f-bea4-c28bed4a0411|Destinations of Redirects And Forwards Are Calculated Without User Input]]\r\n\r\nIf user input is necessary, and it is possible to clearly define valid redirection targets:\r\n* [[13912b44-0b4e-4792-a649-ee6bc16a3ede|Mapping Values Are Used for Redirects And Forwards]]\r\n\r\n=Computer Based Training Links=\r\n\r\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\r\n\r\n==Fundamentals of Application Security==\r\n\r\nThis two-part course is ideal for security and development practitioners that want to understand software security risk and seek specific implementation guidance on how to build and deploy more secure software applications.  It starts off describing why software security is critical and the risk that software vulnerabilities represent, and proceeds to lay the foundation for secure software development by presenting specific security controls and principles that development teams can implement immediately to reduce software risk. \r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127105|AWA 101 Fundamentals of Application Security]]\r\n\r\n==OWASP Top Threats & Mitigations==\r\n\r\nThis course examines in depth the vulnerabilities, threats, and mitigations described in the OWASP Top 10 2013. Upon completion of this class, participants will be able to identify and mitigate the greatest threats that web application developers face, including: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References, Security Misconfiguration, Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery (CSRF), Using Components with Known Vulnerabilities, and Unvalidated Redirects and Forwards.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/139631|DES 221 OWASP Top Threats & Mitigations]]\r\n\r\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\r\n\r\n=Additional Resources\r\n* For more information about open redirect vulnerabilities, see https://www.owasp.org/index.php/Open_redirect"
        ]
      }
    ]
  }
}