{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "2abc6c1b-dd8b-41d3-ad24-c717807e43e9"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-000000729437,2abc6c1b-dd8b-41d3-ad24-c717807e43e9,24d24483-50a9-492c-8d4e-91a8f96df25b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "SQL Injection"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "SQL Injection"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\r\n\r\nSQL injection is a type of vulnerabilities in database access code that allows attackers to execute unauthorized queries on the database. SQL injection typically occurs when an application uses input to construct dynamic SQL statements to access the database. SQL injection may also occur if stored procedures use dynamic queries that include untrusted input. Using the SQL injection attack, an attacker can execute arbitrary commands on the database with the privileges of the application. SQL injection applies to all applications that query SQL databases. \r\n\r\n=Impact\r\n\r\nSQL injection allows the attacker to access any data in the database. The attacker will usually use this to extract any sensitive data from the database. If there are any passwords in the database, the attacker is likely to try to use them to login as the administrator and take over the application or the server. Some database servers allow so-called \"stacked queries\". \"Stacked queries\" allow executing multiple queries separated by a semi-colon from one string. If \"stacked queries\" are enabled, SQL injection allows the attacker to execute any queries on the database server. This usually allows the attacker to take full control of the application. Many database servers also allow executing arbitrary operating system commands. The attacker may abuse that functionality with SQL injection to take full control of the application or the server. \r\n\r\n=Countermeasures\r\n\r\nTo prevent this problem, validate all input and use parameterized APIs for database access.\r\n\r\nValidate all input:\r\n* [[c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52|Use Positive Input Validation]]\r\n\r\nUse parameterized APIs for database access:\r\n* [[0f4cb1a2-b00a-4d71-9e26-627e6d425798|Use Prepared Statements for Data Access]]\r\n\r\n=Application Check\r\n\r\nTo check for adequate protection against this vulnerability, find all queries generated by the application and verify that all input is validated, and that parameterized APIs are used for database access. \r\n\r\nAll input is validated:\r\n* [[d4129497-3a66-44d1-881e-e6f004af2e0d|Positive Input Validation Is Used]]\r\n\r\nParameterized APIs are used for database access:\r\n* [[8850ea3d-c43e-48bd-bf5c-f5a6ef898038|Prepared Statements Are Used for Data Access]]\r\n\r\n=Computer Based Training Links=\r\n\r\nUse the following Computer Based Training course(s) to learn more about SQL injection including techniques for remediation and prevention.\r\n\r\n==OWASP Top Threats & Mitigations==\r\n\r\nThis course examines in depth the vulnerabilities, threats, and mitigations described in the OWASP Top 10 2013. Upon completion of this class, participants will be able to identify and mitigate the greatest threats that web application developers face, including: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References, Security Misconfiguration, Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery (CSRF), Using Components with Known Vulnerabilities, and Unvalidated Redirects and Forwards.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/139631|DES 221 OWASP Top Threats & Mitigations]]\r\n\r\n==Creating Secure PHP Code==\r\n\r\nThis course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. After completing this course, you will be able to describe the best practices for developing secure PHP code, explain common PHP vulnerabilities and learn mitigation techniques to avoid common PHP vulnerabilities and write secure code. \r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127620|COD 315 Creating Secure PHP Code]].\r\n\r\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\r\n\r\n=Additional Resources\r\n\r\n* For more information about SQL injection attacks, please see http://en.wikipedia.org/wiki/SQL_injection"
        ]
      }
    ]
  }
}