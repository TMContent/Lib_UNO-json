{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "b29a1f85-4dfa-4a3d-ae2b-79688d3fb131"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000004be9ad,b29a1f85-4dfa-4a3d-ae2b-79688d3fb131,174eb232-5061-460c-a04a-5ec7be868f8b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "File Canonicalization Vulnerability"
        ],
        "Category": [
          "Canonicalization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "File Canonicalization Vulnerability"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description\n\nFile canonicalization vulnerabilities allow attackers to access unauthorized resources by entering obscure file names or paths. The process of resolving different forms of input that refer to the same standard name (the canonical name) is called canonicalization. Code is particularly susceptible to canonicalization issues if it makes security decisions based on the name of a resource that is passed to the program as input. Files, paths, host names, and URLs are resource types that are vulnerable to canonicalization because, in each case, there are many different ways to represent the same name.\n\n==Impact==\n\nExploiting file canonicalization vulnerabilities allows attackers to access files that are outside of the scope of those allowed by the application. The exact capabilities that a file canonicalization vulnerability can grant to an attacker depend on which operation is performed by the vulnerable code. If the vulnerable code reads from a poorly canonicalized file location, then the attacker will be able to read files for which they have no authorized access. And, if the vulnerable code writes to a poorly canonicalized file location, then the attacker will be able to write to files for which they have no authorized access. The damage potential of file canonicalization vulnerabilities is limited by the operating system access controls imposed on the vulnerable application. If the vulnerable application is running under a limited user account, then the attacker will only be able to access files that can be accessed by that limited user account. In practice, file canonicalization vulnerabilities are most likely to be used to read sensitive files, especially those that might contain authentication credentials or configuration settings; to read source code; to overwrite source code files with malicious code; and to overwrite configuration files with malicious data. The objective of exploiting file canonicalization vulnerabilities is typically to gain unauthorized access to the web application server and to be able to execute arbitrary code with the same permissions as the user account used by the vulnerable application.\n\n==Countermeasures\n \nTo prevent this vulnerability type, avoid file name or path input, validate all input, and do not rely on client-side validation for security.\n\nAvoid file name or path input:\n* [[30a85330-dbcd-456e-8538-aa9aff177821|Avoid File Name Or Path Input]]\n\nValidate all input:\n* [[3de41277-0cc1-4ebc-8dd7-e96d161aa0ef|Validate All Input]]\n* [[e59923e7-c2fb-4a75-8db7-a9a91e869f74|Validate Input for Length, Range, Format, And Type]]\n\nDo not rely on client-side validation for security:\n* [[14d4d65c-8bba-4fef-8261-e76895882942|Do Not Rely on Client-side Validation]]\n\n==Application Check\n\nTo check for adequate protection against this vulnerability type, ensure that file name and path input are avoided, all input is validated, and client-side validation is not relied on for security.\n\nAll input is validated:\n* [[a210fcb7-f142-4c2e-844a-c43e0859f90d|All Input Is Validated]]\n* [[0e71dd64-87d1-4cf5-9569-ea320f209977|Input Is Validated for Length, Range, Format, And Type]]\n\nClient-side validation is not relied on for security:\n* [[eda2c482-6e7f-4370-9d2f-deeca845c82b|Client-side Validation Is Not Relied On]]\n\n==Computer Based Training Links=\n\nUse the following Computer Based Training course(s) to learn more about File Canonicalization including techniques for remediation and prevention.\n\n==Creating Secure C# Code==\n\nThis course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127608|COD 314 Creating Secure C# Code]].\n\n==Creating Secure Code – .NET 4.0 Foundations==\n\nThis course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127611|COD 215 Creating Secure Code – .NET 4.0 Foundations]].\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\n\n==Additional Resources\n\n* For more information about canonicalization, please see http://en.wikipedia.org/wiki/Canonicalization\n* For more information about canonicalization, please see https://www.owasp.org/index.php/Canonicalization,_locale_and_Unicode"
        ]
      }
    ]
  }
}