{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "e724620c-b128-403f-b1a0-e9261c8375e6"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000001bf5e7,e724620c-b128-403f-b1a0-e9261c8375e6,4bec333c-f425-4ed6-bb12-ef52e6cd6043,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Information Exposure Through an Error Message"
        ],
        "Category": [
          "Error Handling"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Information Exposure Through an Error Message"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\r\n\r\nInformation exposure through an error message occurs when an error message discloses sensitive information that may help an attacker. Typical examples include disclosing whether a username is valid during failed authentication and disclosing SQL queries that cause database errors. The latter example is particularly dangerous because it greatly simplifies SQL injection attacks. The danger of error message information disclosure is that it makes other attacks easier and, in some cases, it is required for an attack to succeed. In general, error messages should not disclose sensitive information to the end user. All applications are affected by this vulnerability type, but especially ones that use authentication and SQL databases. \r\n\r\n=Impact\r\n\r\nInformation exposure through an error message provides information to the attacker that enables him to carry out additional attacks. The two most common and dangerous scenarios are disclosing whether a username is valid during failed authentication, and disclosing SQL queries after database errors. Knowing the username greatly simplifies password guessing attacks. Disclosing SQL queries during errors helps the attacker determine whether a SQL injection vulnerability is present and what exactly the syntax of the vulnerability is. Displaying invalid SQL queries to the attacker also makes extracting data from the database via SQL injection a lot easier, because SQL injection can be formed in such a way that sensitive data is displayed as a part of an invaild query. This scenario is commonly used to extract password hashes from the database for administrative accounts. \r\n\r\n=Countermeasures\r\n\r\nTo prevent error message information disclosure, handle all errors, use simple error messages, and log detailed error information. \r\n\r\nHandle All Errors:\r\n* [[461370b3-66e7-4ac3-900f-7e2f757c54a8|Use a Global Exception Handler for Unhandled Exceptions]]\r\n\r\nUse Simple Error Messages:\r\n* [[00000000-0000-0000-0000-00000020f866|Use Simple Error Messages]]\r\n\r\nLog Detailed Error Information:\r\n* [[14f3d913-78ec-4ff5-99aa-56b32faa67c4|Log Important Event Details]]\r\n\r\n=Application Check\r\n\r\nTo check for adequate protection against error message information disclosure, verify that all errors are handled, that simple error messages are used, and detailed error information is logged.\r\n\r\nAll Errors Are Handled:\r\n\r\n* [[f0c2bed2-b530-46bc-9e64-8041e0def190|Global Error Handlers Are Used to Catch Unhandled Exceptions]]\r\n\r\nSimple Error Messages Are Used:\r\n* [[00000000-0000-0000-0000-0000002f7a79|Simple Error Messages Are Used]]\r\n\r\nDetailed Error Information Is Logged:\r\n* [[088663ea-793b-4fdd-9b66-d4c34a59da2c|Important Event Details Are Logged]]\r\n\r\n=Computer Based Training Links=\r\n\r\nUse the following Computer Based Training courses to learn more about Information Exposure Through an Error Message including techniques for remediation and prevention.\r\n\r\n==Creating Secure ASP.NET Code==\r\n\r\nThis in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607|COD 311 Creating Secure ASP.NET Code]].\r\n\r\n==Creating Secure C# Code==\r\n\r\nThis course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127608|COD 314 Creating Secure C# Code]].\r\n\r\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//"
        ]
      }
    ]
  }
}