{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "ed436f22-7c9f-4f44-a17c-49cb425c4d65"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000003f54e3,ed436f22-7c9f-4f44-a17c-49cb425c4d65,e08c1079-d168-4255-9ab6-ba4f0889c665,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Cookieless Authentication"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Cookieless Authentication"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\r\n\r\nMost web applications use cookies to keep track of session state. Some applications use other mechanisms to keep track of authenticated sessions. These custom authentication schemes are usually vulnerable to session hijacking. An attacker exploiting cookieless authentication schemes may gain elevated privileges by tampering with user-mutable parameters, or may hijack an authenticated session by intercepting it using some form of a man-in-the-middle attack. \r\n\r\n=Impact\r\n\r\nUsing cookieless authentication often allows an attacker to hijack user sessions. Once the attacker has hijacked a user's session, he can do anything that the user is allowed to do by the application. This usually allows the attacker to access and modify the user's data. If the attacker hijacks an administrator's session, he may be able to take full control of the application.\r\n\r\n=Countermeasures\r\nTo prevent this problem, use platform-provided session management, use TLS to protect authentication, set HTTP-Only and Secure flags on session cookies, and send session cookies only over TLS. \r\n\r\nUse platform-provided session management:\r\n\r\n* [[96059535-1543-458e-afb7-e40360b9dcd2|Use ASP.NET Session Management]]\r\n\r\nUse TLS for authentication:\r\n\r\n* [[00000000-0000-0000-0000-000000960e37|Use TLS to Communicate Authentication Credentials]]\r\n\r\nSet HTTP-Only and Secure flags on session cookies:\r\n\r\n* [[00000000-0000-0000-0000-000000894eab|Set HTTP-Only and Secure Flags on Session Cookies]]\r\n\r\nSend session cookies only over TLS:\r\n\r\n* [[00000000-0000-0000-0000-000000737bd8|Send Session Cookies Only Using TLS]]\r\n\r\n=Application Check\r\nTo check for adequate protection against this vulnerability, ensure that platform-provided session management is used, TLS is used for authentication, HTTP-Only and Secure flags are set on session cookies, and session cookies are sent only over TLS.\r\n\r\nPlatform-provided session management is used:\r\n\r\n* [[505042f3-ae71-4a3a-bf71-03fa1dbe34a7|ASP.NET Session Management Is Used]]\r\n\r\nTLS is used for authentication:\r\n\r\n* [[00000000-0000-0000-0000-0000008f91de|TLS Is Used to Communicate Authentication Credentials]]\r\n\r\nHTTP-Only and Secure flags are set on session cookies:\r\n\r\n* [[00000000-0000-0000-0000-000000570fbb|HTTP-Only and Secure Flags Are Set on Session Cookies]]\r\n\r\nSession cookies are sent only over TLS:\r\n\r\n* [[00000000-0000-0000-0000-00000071f956|Session Cookies Are Sent Only over TLS]]\r\n\r\n=Computer Based Training Links=\r\n\r\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\r\n\r\n==OWASP Top Threats & Mitigations==\r\n\r\nThis course examines in depth the vulnerabilities, threats, and mitigations described in the OWASP Top 10 2013. Upon completion of this class, participants will be able to identify and mitigate the greatest threats that web application developers face, including: Injection, Broken Authentication and Session Management, Cross-Site Scripting (XSS), Insecure Direct Object References, Security Misconfiguration, Sensitive Data Exposure, Missing Function Level Access Control, Cross-Site Request Forgery (CSRF), Using Components with Known Vulnerabilities, and Unvalidated Redirects and Forwards.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/139631|DES 221 OWASP Top Threats & Mitigations]]\r\n\r\n==Creating Secure ASP.NET Code==\r\n\r\nThis in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607|COD 311 Creating Secure ASP.NET Code]]\r\n\r\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\r\n\r\n"
        ]
      }
    ]
  }
}