{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "d18c00d5-2365-45c8-bde7-0e189f812ff6"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-000000133551,d18c00d5-2365-45c8-bde7-0e189f812ff6,e76a42b5-3a95-40fc-b76c-321ff130fbad,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Use of Hard-coded Password"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Use of Hard-coded Password"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\r\n\r\nApplications that use authentication need a method for storing passwords. One of the simplest ways to store passwords is to hard-code them into the application. This approach is not secure, because anyone with access to the application code is able to recover these passwords. Once an attacker has recovered the passwords, he can use them to authenticate with the application. \r\n\r\nTo check for this vulnerability, examine all code that uses authentication and find where it stores the passwords. \r\n\r\n=Impact\r\n\r\nOnce the attacker has obtained the hard-coded password, he can use it to access the application. Usually, administrative passwords are the ones that are hard-coded. In that case, the attacker gains full access to the application. The attacker may be able to leverage this access to take full control of the application server. \r\n\r\n=Countermeasures\r\n\r\nTo prevent this vulnerability, provide a secure admin interface that allows changing passwords, and store passwords securely. \r\n\r\nProvide a secure administrative interface that allows changing passwords:\r\n* [[00000000-0000-0000-0000-0000008f19de|Provide a Secure Administrative Interface that Allows Changing Passwords]]\r\n\r\nStore passwords securely:\r\n* [[6e0918c1-90db-46d5-9f0e-8a98ddbcd7d5|Store Passwords Securely]]\r\n* [[bcf8adb4-8186-4b97-b490-4fa33f506bfd|Limit Access to the Credential Store]]\r\n\r\n=Application Check\r\n\r\nTo check for adequate protection against this vulnerability, ensure that a secure admin interface that allows changing passwords is provided, and that passwords are stored securely.\r\n\r\nA secure administrative interface that allows changing passwords is provided:\r\n* [[00000000-0000-0000-0000-00000018ecb4|A Secure Administrative Interface that Allows Changing Passwords Is Provided]]\r\n\r\nPasswords are stored securely:\r\n* [[d74fe6bf-387f-4ff1-9edb-d0275eedffc0|Passwords Are Stored Securely]]\r\n* [[9031f577-80b0-4a2e-9652-7b470439a0df|Access to the Credential Store Is Limited]]\r\n\r\n=Computer Based Training Links=\r\n\r\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\r\n\r\n==Six Fundamentals of Information Security==\r\n\r\nThis eLearning course is intended to allow individuals to recognize information security concerns and respond accordingly using a set of six best practices provided in this course.  Throughout the course, students are provided with interactive games and simulations designed to practice and reinforce the concepts that were introduced.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127650|AWA 103 Six Fundamentals of Information Security]]\r\n\r\n==Fundamentals of Secure Database Development==\r\n\r\nThis course introduces developers to the fundamentals of secure database development. The course begins with a discussion on the role of databases and how they are used in today's software systems. It also discusses the common database attacks that could be used to cause significant loss to organizations. Next, it reviews the best practices that developers should incorporate to mitigate the risks from database attacks, including practices that developers should avoid. Finally, the course concludes with a walk-through of a software system scenario that allows you to apply the database attacks and developer best practices discussed throughout the course.\r\n\r\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127628|COD 141 Fundamentals of Secure Database Development]]\r\n\r\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\r\n\r\n=Additional Resources\r\n\r\n* For more information about the Use of Hard-coded Password vulnerability, see https://www.owasp.org/index.php/Use_of_hard-coded_password"
        ]
      }
    ]
  }
}