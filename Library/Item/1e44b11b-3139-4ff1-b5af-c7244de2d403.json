{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1924633633",
      "Content_Hash": "-509240320"
    },
    "Metadata": [
      {
        "Id": [
          "1e44b11b-3139-4ff1-b5af-c7244de2d403"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "CWE-250: Execution with Unnecessary Privileges"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "CWE-250: Execution with Unnecessary Privileges"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>Description</h2>\r\n  <p>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.</p>\r\n  <p>New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security\r\n vulnerabilities if they occur while operating at raised privileges.</p>\r\n  <p>Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers\r\n and spawned processes run with the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.</p>\r\n  <h2>Discussion</h2>\r\n  <p>Spider Man, the well-known comic superhero, lives by the motto \"With great power comes great responsibility.\" Your software may need special privileges to perform certain operations, but wielding those privileges longer than necessary can be extremely risky.\r\n When running with extra privileges, your application has access to resources that the application's user can't directly reach. For example, you might intentionally launch a separate program, and that program allows its user to specify a file to open; this\r\n feature is frequently present in help utilities or editors. The user can access unauthorized files through the launched program, thanks to those extra privileges. Command execution can happen in a similar fashion. Even if you don't launch other programs, additional\r\n vulnerabilities in your software could have more serious consequences than if it were running at a lower privilege level.</p>\r\n  <h2>Detection</h2>\r\n  <p>The detection methods for execution with unnecessary privileges vulnerabilities are:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Manual Analysis.</strong> This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\r\n These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Black Box.</strong> Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or\r\n if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as\r\n<em>truss</em> (Solaris) and <em>strace</em> (Linux); system activity monitors such as\r\n<em>FileMon, RegMon, Process Monitor</em>, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that\r\n indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users. Note that this technique is only useful for privilege issues related to system resources. It is not likely to detect application-level\r\n business rules that are related to privileges, such as if a blog system allows a user to delete a blog entry without first checking that the user has administrator privileges.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Mitigation</h2>\r\n  <p>The following mitigation methods for execution with unnecessary privileges are available:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Run your code using the lowest privileges that are required to accomplish the necessary tasks.</strong> If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately\r\n give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Isolate the privileged code.</strong> Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as\r\n much as possible from other code. Raise your privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with your privileged\r\n code, such as a secondary socket that you only intend to be accessed by administrators.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Validate all input.</strong> Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Double-check that privileges have been dropped successfully.</strong> When you drop privileges, ensure that you have dropped them successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may\r\n fail even if it seems like they have succeeded. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>If circumstances force you to run with extra privileges, then determine the minimum access level necessary.</strong> First identify the different permissions that the software and its users will need to perform their actions, such as file read and\r\n write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. It is more effective\r\n to just drop the privileges.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that the application works correctly in a hardened environment.</strong> Ensure that your software runs properly under the\r\n<em>Federal Desktop Core Configuration (FDCC)</em> or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Additional Information</h2>\r\n  <ul>\r\n    <li>For more information about execution with unnecessary privileges vulnerabilities, please see\r\n<a href=\"http://cwe.mitre.org/top25/index.html#CWE-250\">http://cwe.mitre.org/top25/index.html#CWE-250</a></li>\r\n  </ul>"
        ]
      }
    ]
  }
}