{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-666964382",
      "Content_Hash": "-1134539971"
    },
    "Metadata": [
      {
        "Id": [
          "22bd15c4-126e-49e3-9d4e-fed34a3d8ee9"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "CWE-134: Uncontrolled Format String"
        ],
        "Category": [
          "APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "CWE-134: Uncontrolled Format String"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>Description</h2>\r\n  <p>The software uses externally-controlled format strings in printf-style functions, which can lead to buffer overflows or data representation problems.</p>\r\n  <h2>Discussion</h2>\r\n  <p>The mantra is that successful relationships depend on communicating clearly, and this applies to software, too. Format strings are often used to send or receive well-formed data. By controlling a format string, the attacker can control the input or output\r\n in unexpected ways - sometimes, even, to execute code.</p>\r\n  <h2>Detection</h2>\r\n  <p>The following detection methods for uncontrolled format string vulnerabilities are available:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Automated Static Analysis.</strong> This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Black Box.</strong> Since format strings often occur in rarely-occurring erroneous conditions (e.g. for error message logging), they can be difficult to detect using black box methods. It is highly likely that many latent issues exist in executables\r\n that do not have associated source code (or equivalent source.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Mitigation</h2>\r\n  <p>The following mitigation methods are available for uncontrolled format string vulnerabilities:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Choose a language that is not subject to this flaw.</strong>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use static format strings. </strong>Ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, use\r\n functions that do not support the <em>%n</em> operator in format strings.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Heed the warnings of compilers and linkers, since they may alert you to improper usage.</strong>\r\n      </p>\r\n    </li>\r\n  </ol>\r\n  <h2>Additional Information</h2>\r\n  <ul>\r\n    <li>For more information about uncontrolled format string vulnerabilities, please see\r\n<a href=\"http://cwe.mitre.org/top25/index.html#CWE-134\">http://cwe.mitre.org/top25/index.html#CWE-134</a></li>\r\n  </ul>"
        ]
      }
    ]
  }
}