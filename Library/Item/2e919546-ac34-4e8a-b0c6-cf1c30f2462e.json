{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1064864270",
      "Content_Hash": "-1236760882"
    },
    "Metadata": [
      {
        "Id": [
          "2e919546-ac34-4e8a-b0c6-cf1c30f2462e"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "Use OS Buffer Overflow Protection"
        ],
        "Category": [
          "Hardening"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Principle"
        ],
        "DirectLink": [
          "Use OS Buffer Overflow Protection"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>What to Do</h2>\r\n  <p>Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent. This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition,\r\n it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.</p>\r\n  <p>Use a feature like Address Space Layout Randomization (ASLR). This is not a complete solution. However, it forces the attacker to guess an unknown value that changes each time the program is executed. In addition, an attack could still cause a denial of\r\n service, since the typical response is to exit the application.</p>"
        ]
      }
    ]
  }
}