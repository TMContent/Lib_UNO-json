{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "863621958",
      "Content_Hash": "650438737"
    },
    "Metadata": [
      {
        "Id": [
          "70aa0034-8fb1-4692-aedd-1dd0879a0e4b"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "Use Session Management Offered by the Framework"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Session Management Offered by the Framework"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>What to Do</h2>\n  <p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. With a stateless protocol such as HTTP, use a framework that maintains the state for you. Examples include ASP.NET\n<em>View State</em> and the OWASP <em>ESAPI Session Management </em>feature. Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.</p>\n  <h1>Why</h1>\n  <p>The framework works on a lower level than the application and is therefore better suited to provide session management. Most mature web application frameworks offer secure session management functionality.</p>\n  <h1>How</h1>\n  <p>To use session management offered by the framework, please refer to the documentation for your chosen framework.\n</p>"
        ]
      }
    ]
  }
}