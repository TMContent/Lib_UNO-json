{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-719503951",
      "Content_Hash": "540706265"
    },
    "Metadata": [
      {
        "Id": [
          "16899649-7200-4411-b92e-d04befe037e2"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "Check the Range of Numeric Input"
        ],
        "Category": [
          "Input Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Check the Range of Numeric Input"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>What to Do</h2>\r\n  <p>Perform input validation on any numeric input by ensuring that it is within the expected range. Ensure that the input meets both the minimum and maximum requirements for the expected range. Use unsigned integers where possible. This makes it easier to perform\r\n sanity checks for integer overflows. If you must use signed integers, make sure that your range check includes minimum values as well as maximum values.</p>\r\n  <h1>Why</h1>\r\n  <p>Integer-type variables have minimum and maximum limits on data that they can store. Placing too much data in an integer-type variable results in an integer overflow. Different platforms fail differently as a result of integer overflows, but there is a possibility\r\n of an arbitrary code execution resulting from an integer overflow bug. When values that are too high or too low are assigned to unsigned integers, integer-wrapping results, which usually means that unexpected values are produced. Conversions between signed\r\n and unsigned integers, and other data types, may result in truncation or losing sign information. All of these bugs may result in very dangerous vulnerabilities. All of these bugs may be prevented by validating values of integer operations before assigning\r\n them to variables.</p>\r\n  <h1>How</h1>\r\n  <p>To validate the range of numeric input:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify code.</strong> Identify all code that assigns values to integer-type variables. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first. Some development environments and compilers\r\n may be able to detect these types of errors, but automatic detection should not be relied on for critical software components.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Add range checks.</strong> Use platform-defined constants to check that values being assigned to integer-type variables are valid.</p>\r\n    </li>\r\n  </ol>"
        ]
      }
    ]
  }
}