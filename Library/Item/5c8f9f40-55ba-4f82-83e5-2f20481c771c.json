{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1159469050",
      "Content_Hash": "-2115487487"
    },
    "Metadata": [
      {
        "Id": [
          "5c8f9f40-55ba-4f82-83e5-2f20481c771c"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "Validate All Input"
        ],
        "Category": [
          "Input Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Validate All Input"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>What to Do</h2>\n  <p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into\n something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be\n rejected outright.</p>\n  <h1>Why</h1>\n  <p>Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities that would allow an attacker to gain unauthorized access to sensitive data or otherwise compromise an application.</p>\n  <p>While input validation can be used to remediate the majority of known security vulnerabilities, it should not be used as the only line of defense, as there are vulnerabilities which input validation is not effective at remediating.</p>\n  <h2>How</h2>\n  <p>To validate all input:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify sources of input.</strong> Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request\n headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed\n that certain inputs could not be modified, especially for cookies and URL components.\n</p>\n    </li>\n    <li>\n      <p>\n        <strong>Validate all relevant input properties. </strong>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across\n related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use whitelist input validation.</strong> When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just\n parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected\n to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer.\n Therefore, validating ALL parts of the HTTP request is recommended. Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use whitelists for filename validation.</strong> When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude\n directory separators such as \"/\" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist,\n which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces\n dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Allow only safe file extensions.</strong> Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before you allow .html or .htm file types. Ensure that\n only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that \"filename.php.gif\" is fed to the PHP interpreter. When running on a web server that supports case-insensitive\n filenames, ensure that you perform case-insensitive evaluations of the extensions that are provided.\n</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use whitelist input validation for OS command execution.</strong> When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. Use runtime policy enforcement\n to create a whitelist of allowable commands, then prevent use of any command that does not appear in the whitelist. Technologies such as AppArmor are available to do this.</p>\n    </li>\n  </ol>"
        ]
      }
    ]
  }
}