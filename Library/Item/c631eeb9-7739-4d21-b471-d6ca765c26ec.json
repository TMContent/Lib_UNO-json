{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-98054501",
      "Content_Hash": "816249278"
    },
    "Metadata": [
      {
        "Id": [
          "c631eeb9-7739-4d21-b471-d6ca765c26ec"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "CWE-311: Missing Encryption of Sensitive Data"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "CWE-311: Missing Encryption of Sensitive Data"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>Description</h2>\r\n  <p>The software does not encrypt sensitive or critical information before storage or transmission. The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.</p>\r\n  <h2>Discussion</h2>\r\n  <p>Whenever sensitive data is being stored or transmitted anywhere outside of your control, attackers may be looking for ways to get to it. Thieves could be anywhere - sniffing your packets, reading your databases, and sifting through your file systems. If\r\n your software sends sensitive information across a network, such as private data or authentication credentials, that information crosses many different nodes in transit to its final destination. Attackers can sniff this data right off the wire, and it doesn't\r\n require a lot of effort. All they need to do is control one node along the path to the final destination, control any node within the same networks of those transit nodes, or plug into an available interface. If your software stores sensitive information on\r\n a local file or database, there may be other ways for attackers to get at the file. They may benefit from lax permissions, exploitation of another vulnerability, or physical theft of the disk. You know those massive credit card thefts you keep hearing about?\r\n Many of them are due to unencrypted storage. In 2011, many breaches of customer emails and passwords made the attacker's job easier by storing critical information without any encryption. Once the attacker got access to the database, it was game over. In June\r\n 2011, the LulzSec group grabbed headlines by grabbing and publishing unencrypted data.</p>\r\n  <h2>Detection</h2>\r\n  <p>The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g.\r\n stored data or unencrypted network transfer) that require manual evaluation.</p>\r\n  <p>Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.</p>\r\n  <h2>Mitigation</h2>\r\n  <p>The mitigation methods for missing encryption of sensitive data vulnerabilities are:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive data.</strong> Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.\r\n Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify where to use encryption.</strong> Using threat modeling or other techniques, assume that your data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data you\r\n believe should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732).</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Integrate encryption into the system.</strong> Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:</p>\r\n      <ul>\r\n        <li>Encryption that is needed to store or transmit private data of the users of the system.\r\n</li>\r\n        <li>Encryption that is needed to protect the system itself from unauthorized disclosure or tampering.\r\n</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify encryption requirements.</strong> Identify the separate needs and contexts for encryption:</p>\r\n      <ul>\r\n        <li>One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.\r\n<p /></li>\r\n        <li>Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable\r\n only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.\r\n<p /></li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use strong encryption algorithms.</strong> Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations. As with all cryptographic mechanisms, the source code should be available\r\n for analysis. For example, US government systems require FIPS 140-2 certification. Periodically ensure that you aren't using obsolete cryptography. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days\r\n or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. When you use industry-approved techniques, you need to use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are\r\n often essential for preventing common attacks.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Do not develop your own cryptographic algorithms.</strong> They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If your algorithm can be compromised if attackers find out how\r\n it works, then it is especially weak.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Compartmentalize the system.</strong> Compartmentalize your system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with\r\n a compartment outside of the safe area.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Additional Information</h2>\r\n  <ul>\r\n    <li>For more information about missing encryption vulnerabilities, please see <a href=\"http://cwe.mitre.org/top25/index.html#CWE-311\">\r\nhttp://cwe.mitre.org/top25/index.html#CWE-311</a></li>\r\n  </ul>"
        ]
      }
    ]
  }
}