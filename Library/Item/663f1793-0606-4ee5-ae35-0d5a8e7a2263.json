{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1571366589",
      "Content_Hash": "-1020123918"
    },
    "Metadata": [
      {
        "Id": [
          "663f1793-0606-4ee5-ae35-0d5a8e7a2263"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "CWE-798: Use of Hard-coded Credentials"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>Description</h2>\n  <p>The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.</p>\n  <p>Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected,\n it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:</p>\n  <ul>\n    <li>\n      <p>\n        <strong>Inbound:</strong> the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. In the Inbound variant, a default administration account is created, and a simple password is hard-coded\n into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching\n the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across\n different organizations, this enables massive attacks such as worms to take place.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Outbound: </strong>the software connects to another system or component, and it contains hard-coded credentials for connecting to that component. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end\n service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded\n passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.</p>\n    </li>\n  </ul>\n  <h2>Discussion</h2>\n  <p>Hard-coding a secret password or cryptograpic key into your program is bad manners, even though it makes it extremely convenient - for skilled reverse engineers. While it might shrink your testing and support budgets, it can reduce the security of your customers\n to dust. If the password is the same across all your software, then every customer becomes vulnerable if (rather, when) your password becomes known. Because it's hard-coded, it's usually a huge pain for sysadmins to fix. And you know how much they love inconvenience\n at 2 AM when their network's being hacked - about as much as you'll love responding to hordes of angry customers and reams of bad press if your little secret should get out. Most of the CWE Top 25 can be explained away as an honest mistake; for this issue,\n though, many customers won't see it that way. The high-profile Stuxnet worm, which caused operational problems in an Iranian nuclear site, used hard-coded credentials in order to spread. Another way that hard-coded credentials arise is through unencrypted\n or obfuscated storage in a configuration file, registry key, or other location that is only intended to be accessible to an administrator. While this is much more polite than burying it in a binary program where it can't be modified, it becomes a\n<em>Bad Idea</em> to expose this file to outsiders through lax permissions or other means.</p>\n  <h2>Detection</h2>\n  <p>The ways to detect hard-coded credentials are:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Black Box.</strong> Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Automated Static Analysis.</strong> Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad\n range of methods.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Manual Static Analysis.</strong> This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the software, there can be sufficient time for the analyst to find incoming authentication\n routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to\n design and business rules.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Manual Dynamic Analysis.</strong> For hard-coded credentials in incoming authentication: use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source\n code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as\n<em>truss</em> (Solaris) and <em>strace</em> (Linux); system activity monitors such as\n<em>FileMon, RegMon, Process Monitor</em>, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output,\n examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.</p>\n    </li>\n  </ol>\n  <h2>Mitigation</h2>\n  <p>The methods for mitigating hard-coded credential vulnerabilities are:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Encrypt sensitive data.</strong> For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including\n other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.<br />\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Change the default authentication credentials after first use.</strong> For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode\n that requires the user to enter a unique strong password or key.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Limit access to functions that use hard-coded credentials.</strong> If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded\n credentials. For example, a feature might only be enabled through the system console instead of through a network connection.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Hash and salt passwords.</strong> For inbound authentication using passwords: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database\n still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate.\n This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Protect back-end connections.</strong> For front-end to back-end connections: Three solutions are possible, although none are complete.</p>\n      <ul>\n        <li>The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n<p /></li>\n        <li>Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n<p /></li>\n        <li>Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\n<p /><ul></ul></li>\n      </ul>\n    </li>\n  </ol>\n  <h2>Additional Information</h2>\n  <ul>\n    <li>For more information about use of hard-coded credentials vulnerabilities, please see\n<a href=\"http://cwe.mitre.org/top25/index.html#CWE-798\">http://cwe.mitre.org/top25/index.html#CWE-798</a></li>\n  </ul>"
        ]
      }
    ]
  }
}