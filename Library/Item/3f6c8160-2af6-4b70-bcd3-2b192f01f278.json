{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "403777938",
      "Content_Hash": "2082782956"
    },
    "Metadata": [
      {
        "Id": [
          "3f6c8160-2af6-4b70-bcd3-2b192f01f278"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "CWE-863: Incorrect Authorization"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "CWE-863: Incorrect Authorization"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>Description</h2>\n  <p>The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.</p>\n  <p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access\n control checks&amp;nbsp;are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</p>\n  <p>\"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is also distinct from \"AuthC,\" which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could\n be used for either authentication or authorization.</p>\n  <h2>Discussion</h2>\n  <p>While the lack of authorization is more dangerous (see elsewhere in the Top 25), incorrect authorization can be just as problematic. Developers may attempt to control access to certain resources, but implement it in a way that can be bypassed. For example,\n once a person has logged in to a web application, the developer may store the permissions in a cookie. By modifying the cookie, the attacker can access other resources. Alternately, the developer might perform authorization by delivering code that gets executed\n in the web client, but an attacker could use a customized client that removes the check entirely.</p>\n  <h2>Detection</h2>\n  <p>The following methods for detecting incorrect authorization are available:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Automated Static Analysis.</strong> Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as\n<em>.htaccess</em> in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes,\n they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Automated Dynamic Analysis.</strong> Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Manual Analysis.</strong> This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business\n rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</p>\n    </li>\n  </ol>\n  <h2>Mitigation</h2>\n  <p>The following mitigation methods for incorrect authorization are available:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Separate the application into public and secure areas.</strong> Divide your application into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based\n access control (RBAC) to enforce the roles at the appropriate boundaries.Note that this approach may not protect against attackers who already have “valid” access to those menus.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Ensure that you perform access control checks related to your business logic.\n</strong>These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific\n database user, but each record might only be intended to be accessible to the patient and the patient's doctor.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use a secure framework.</strong> Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the\n<em>JAAS Authorization Framework</em> and the OWASP <em>ESAPI Access Control</em> feature.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use server-side security controls.</strong> For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information\n by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session\n token associated with a user who has the required permissions to access that page.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use OS access controls.</strong> Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.</p>\n    </li>\n  </ol>\n  <h2>Additional Information</h2>\n  <ul>\n    <li>For more information about incorrect authorization vulnerabilities, please see\n<a href=\"http://cwe.mitre.org/top25/index.html#CWE-863\">http://cwe.mitre.org/top25/index.html#CWE-863</a></li>\n  </ul>"
        ]
      }
    ]
  }
}