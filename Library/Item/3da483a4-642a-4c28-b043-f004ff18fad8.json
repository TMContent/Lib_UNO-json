{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1609856890",
      "Content_Hash": "-1226232059"
    },
    "Metadata": [
      {
        "Id": [
          "3da483a4-642a-4c28-b043-f004ff18fad8"
        ],
        "Library_Id": [
          "e7d92b5b-e1d8-4039-b019-8b02594ea93a"
        ],
        "Title": [
          "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')"
        ],
        "Category": [
          "Memory Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h2>Description</h2>\r\n  <p>The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.</p>\r\n  <p>A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause\r\n of buffer overflows, is the \"classic\" case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic\r\n of security protections.</p>\r\n  <p>Many issues that are now called \"buffer overflows\" are substantively different than the \"classic\" overflow, including entirely different bug types that rely on overflow exploit techniques, such as integer signedness errors, integer overflows, and format\r\n string bugs. This imprecise terminology can make it difficult to determine which variant is being reported.</p>\r\n  <h2>Discussion</h2>\r\n  <p>Buffer overflows are Mother Nature's little reminder of that law of physics that says: if you try to put more stuff into a container than it can hold, you're going to make a mess. The scourge of C applications for decades, buffer overflows have been remarkably\r\n resistant to elimination. However, copying an untrusted input without checking the size of that input is the simplest error to make in a time when there are much more interesting mistakes to avoid. That's why this type of buffer overflow is often referred\r\n to as \"classic.\" It's decades old, and it's typically one of the first things you learn about in Secure Programming 101.</p>\r\n  <h2>Detection</h2>\r\n  <p>Multiple methods for detecting buffer overflows are available:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Automated Static Analysis.</strong> This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis\r\n generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows\r\n that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Automated Dynamic Analysis.</strong> This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault\r\n injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Manual Analysis.</strong> Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since\r\n the attack surface can be too large.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Mitigation</h2>\r\n  <p>Multiple options for for fixing or preventing buffer overflows are available:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Use a managed language.</strong> Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl,\r\n are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even\r\n if the language itself is theoretically safe.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use a secure library.</strong> Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the\r\n<em>Safe C String Library (SafeStr)</em> by Messier and Viega, and the <em>Strsafe.h</em> library from Microsoft. These libraries provide safer versions of overflow-prone string-handling functions.\r\n<br /><strong>Note:</strong> This is not a complete solution, since many buffer overflows are not related to strings.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use compiler flags.</strong> Run or compile your software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic\r\n buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio\r\n<em>/GS</em> flag, Fedora/Red Hat <em>FORTIFY_SOURCE</em> GCC flag, <em>StackGuard</em>, and\r\n<em>ProPolice</em>. <br /><strong>Note:</strong> This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Double check buffer size.</strong> Consider adhering to the following rules when allocating and managing an application's memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy,\r\n such as <em>strncpy</em>(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past\r\n the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Assume all input is malicious.</strong> Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or\r\n transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that\r\n they should be rejected outright.<br />\r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an\r\n example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use server-side input validation.</strong> For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\r\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use platform buffer overflow protection.</strong> Use a feature like Address Space Layout Randomization (ASLR). Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent. Most mitigating technologies at the compiler\r\n or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess\r\n an unknown value that changes every program execution.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Avoid dangerous APIs.</strong> Replace unbounded copy functions with analogous functions that support length arguments, such as\r\n<em>strcpy</em> with <em>strncpy</em>. Create these if they are not available.<br /><strong>Note:</strong> This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use refernce maps.</strong> When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use the principle of least privilege.</strong> Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That\r\n way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use a sandbox.</strong> Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or\r\n which commands can be executed by your software. OS-level examples include the Unix\r\n<em>chroot</em> jail, <em>AppArmor</em>, and <em>SELinux</em>. In general, managed code may provide some protection. For example,\r\n<em>java.io.FilePermission</em> in the <em>Java SecurityManager</em> allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be\r\n subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\r\n<br /><strong>Note:</strong> The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting\r\n the portion of the file system that can be accessed.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Additional Information</h2>\r\n  <ul>\r\n    <li>For more information about buffer overflow vulnerabilities, please see <a href=\"http://cwe.mitre.org/top25/index.html#CWE-120\">\r\nhttp://cwe.mitre.org/top25/index.html#CWE-120</a></li>\r\n  </ul>"
        ]
      }
    ]
  }
}