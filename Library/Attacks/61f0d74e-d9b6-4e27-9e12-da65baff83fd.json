{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1134918211",
      "Content_Hash": "-720422532"
    },
    "Metadata": [
      {
        "Id": [
          "61f0d74e-d9b6-4e27-9e12-da65baff83fd"
        ],
        "Id_History": [
          "4eb11739-a13f-4dbb-9f28-68ebf96110d0,61f0d74e-d9b6-4e27-9e12-da65baff83fd,9f0d7802-8541-41c7-b6b1-9268fe37d0e4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "LDAP Injection Attack"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Attack"
        ],
        "DirectLink": [
          "LDAP Injection Attack"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "wikitext"
        },
        "Data": [
          "=Applies To\r\n\r\nApplications using LDAP.\r\n\r\n=Description\r\n\r\nLightweight Directory Access Protocol (LDAP) is a widely used protocol for accessing directory services. Directories provide a set of attributes about people that are organized in a hierarchical manner, for example the phone directory.\r\n\r\nLDAP injection is a technique for exploiting applications that use input from users to query an LDAP directory. In principle this is exactly the same attack as SQL or XML injection. The only difference is the query language used and the database accessed. Because directories are primarily used to maintain information about people, LDAP injection gives an attacker the potential to view, modify, or remove personal information about anyone in the directory. The most common mistake that leads to an LDAP injection vulnerability is creating filter statements dynamically without validating user input.\r\n\r\n=Impact\r\n\r\n    *Unintentional information disclosure,\r\n    *Elevation of privilege through manipulation of query results,\r\n    *Corruption of LDAP data store through manipulation of updates,\r\n\r\n=Vulnerabilities\r\n\r\n    *Building dynamic LDAP queries using untrusted input.\r\n\r\n=Countermeasures\r\n\r\n    *Validate untrusted input against an inclusion list before use (e.g., RegEx pattern, primitive type casting, domain constraint, etc.).\r\n\r\n=Example\r\n\r\nVulnerable code:  The following PHP code connects to an LDAP server on localhost and searches for records where the surname equals the value supplied by the user.\r\n\r\n{{{\r\n<?php$ds=ldap_connect(\"localhost\");\r\n if ($ds)\r\n {\r\n    $ok=ldap_bind($ds);\r\n // anonymously bind for read-only access\r\n    $surname=$_GET['surname'];\r\n    $filter = \"(sn=\" . $surname . \")\";\r\n    $sr=ldap_search($ds, \"o=My Company, c=US\", $filter);\r\n    $info = ldap_get_entries($ds, $sr);\r\n    echo \"<p>There are \" . $info[\"count\"] . \" entries for that search:<p>\";\r\n\r\n    for ($i=0; $i<$info[\"count\"]; $i++) \r\n{\r\n        echo \"common name: \" . $info[$i][\"cn\"][0] . \"<br />\";\r\n        echo \"telephone: \" . $info[$i][\"telephoneNumber\"][0] . \"<br />\";\r\n        echo \"email: \" . $info[$i][\"mail\"][0] . \"<br /><hr />\";\r\n}\r\n\r\n    ldap_close($ds);\r\n\r\n}\r\n else \r\n{\r\n    echo \"<h4>connection error</h4>\";\r\n}\r\n?>\r\n}}}\r\n\r\nIf this code is in {{{index.php at teammentorexample.com}}} then the following URL would return all records where surname is Smith.\r\n\r\n{{{http://teammentorexample.com/index.php?surname=Smith}}}\r\n\r\n//\r\n//\r\nAttack example:  Now suppose an attacker entered:\r\n\r\n{{{\r\n    x)(|(cn=*\r\n}}}\r\n  \r\n\r\ninstead of Smith. That is, the attacker could do the following:\r\n\r\n{{{http://teammentorexample.com/index.php?surname=x)(|(cn=*}}}\r\n\r\nExamining a few lines of the above code reveals that this would return a list of everyone in the directory.\r\n\r\n{{{\r\n    $sirname=$_GET['surname'];\r\n    // $surname = x)(|(cn=*)\r\n    $filter = \"(sn=\" . $surname . \")\";\r\n    // $filter = (sn=x)(|cn=*)\r\n     $sr=ldap_search($ds, \"o=My Company, c=US\", $filter);\r\n    // this reads: search My Companies directory for people\r\n    //      having surname equal to x or anything\r\n}}}\r\n\r\n=Additional Resources\r\n\r\n    *For more information on LDAP Injection, see: https://www.owasp.org/index.php/Interpreter_Injection#LDAP_Injection\r\n    *For more information on LDAP, see: http://en.wikipedia.org/wiki/Ldap\r\n    *For more information on IETF's RFC 2251 on LDAP, see: http://www.ietf.org/rfc/rfc2251.txt\r\n\r\n=Related Items\r\n\r\n    *[[b1757bda-0a0d-48e7-b101-3c4088e41878|Attack: SQL Injection Attack]]\r\n    *[[e4a899ec-9301-4751-ae07-69a265336d8b|Attack: AJAX Injection Attack]]\r\n    *[[9d60faca-687b-4c69-91ba-f5712af0fd02|Attack: Server-Side Code Injection Attack]]\r\n    *[[ae392dbb-fdb4-443f-9d17-78240b4acc95|Attack: XML Injection Attack]]\r\n    *[[1508d763-03f1-4b43-bf8e-ad7cf8edebd7|Attack: Xpath-XQuery Attack]]\r\n    *[[1408d3c3-7fc1-4ff0-910e-cdf0e191b669|Attack: Client-side Validation Attack]]"
        ]
      }
    ]
  }
}