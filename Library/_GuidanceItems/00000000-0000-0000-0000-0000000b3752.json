{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000000b3752"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000000b3752,d8c8a0bf-d9ff-4ce2-92ed-367e4a4c0d95,"
        ],
        "Library_Id": [
          "c4b9cb6a-4561-4451-9b6c-4e59d73584f6"
        ],
        "Title": [
          "XML Data Is Validated Using a Schema"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "XML Data Is Validated Using a Schema"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* Java\n\n\n==What to Check For==\n\nCheck that the application validates all XML data input against a schema to ensure that it is well-formed and free of malicious input.\n\n\n==Why==\n\nAn attacker might be able to inject malicious XML content into your application, expose local files and private data, modify data, starve server resources, or perform other attacks. Validating XML input reduces these risks by ensuring that the input received matches the expected format. \n\n\n==How to Check==\n\nTo verify that XML data is validated against a schema:\n\n# **Review code to identify any input processed by an XML parser or combined with XML in the application.** Find application code that parses XML data.\n# **Ensure that code first validates XML input before sending it to the XML parser.** Review each piece of code that parses XML data to make sure that it validates XML data against a schema before processing it.\n\n\n==How to Fix==\n\nTo validate XML data against a schema:\n# **Create a //Schema// object.** Use the //SchemaFactory// class to create a //Schema// object.\n# **Create a //SAXParserFactory// object.** The //SAXParserFactory// will be used to create a parser for working with the XML data.\n# **Assign the //Schema// object to the //SAXParserFactory// object.** Use the //setSchema// method to assign the //Schema// object to the //SAXParserFactory// object. This will cause the parser produced by the factory object to use our schema to validate data.\n# **Create a //SAXParser// object.** Use the //SAXParserFactory// object to create a parser. Since a schema has been assigned to the factory, the parser will validate XML data that is parses against the schema. This parser can then be used to load XML data.\n\n\n==Problem Example==\n\nThis code does not validate XML data using a schema:\n\n{{{\nprivate void getXMLStream(InputStream inStream, DefaultHandler defHandler) {\n  SAXParserFactory factory = SAXParserFactory.newInstance();\n  try {\n    SAXParser saxParser = factory.newSAXParser();\n    saxParser.parse(inStream, defHandler);\n  } catch (Throwable t) { \n    ...\n  }\n}\n}}}\n\n\n==Solution Example==\n\nThis article is focused entirely on making sure the data is actually validated using a schema, so it is assumed that a schema file //schema.xsd// already exists. The following code validates XML data using the schema:\n\n{{{\nprivate static void getXMLStream(InputStream inStream, DefaultHandler defHandler) \n  throws ParserConfigurationException, SAXException, IOException {\n  try {\n    SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n    sf.setErrorHandler(defHandler);\n    StreamSource ssrc = new StreamSource(new File(\"schema.xsd\"));\n    Schema schema = sf.newSchema(ssrc);\n    SAXParserFactory spf = SAXParserFactory.newInstance();\n    spf.setSchema(schema);\n    SAXParser saxParser = spf.newSAXParser();\n    saxParser.parse(inStream, defHandler);   \n  } catch (Throwable t) { \n    ...\n  }\n} \n}}}"
        ]
      }
    ]
  }
}