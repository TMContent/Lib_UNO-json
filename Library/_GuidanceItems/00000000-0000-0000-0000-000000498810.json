{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-000000498810"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-000000498810,3dfd4a83-6a13-48cf-8da8-3c536f792d71,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "X-Frame-Options Are Used to Prevent Clickjacking"
        ],
        "Category": [
          "HTTP Headers"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "X-Frame-Options Are Used to Prevent Clickjacking"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* HTML5\r\n\r\n==What to Check For==\r\n\r\nVerify that the X-Frame-Options response header is used to reduce the potential for clickjacking attacks.\r\n\r\n==Why==\r\n\r\nThe X-Frame-Options response header instructs the browser to disallow the use of iframes across domains or limit their use to the same origin. This protects against clickjacking, a malicious technique that uses iframes to overlay (hide) a clickable link or button on a web page. In a clickjacking attack, a user thinks he or she is clicking the intended link but actually clicks the overlaid iframe link, thus sending data to an unintended website. \r\n\r\n==When==\r\n\r\nUse this guideline when implementing HTML5 web applications where the web page is not intended for rendering in a frame or iframe.\r\n\r\nIn addition, Mozilla Firefox version 18 and later supports a third option: ALLOW-FROM. ALLOW-FROM takes a directive of a uniform resource indicator (URI) . This URI specifies the page can only be rendered in an iframe within that specified URI. \r\n\r\n==How to Check==\r\n\r\nTo verify that the X-Frame-Options response header is used to reduce the potential for clickjacking attacks:\r\n\r\n# **Use an attack proxy application to examine the response headers of the application.** Using an attack proxy application, such as the Burp Suite, connect to the application and use it in a manner that a typical user would, going through the most commonly used features of the application. \r\n# **Monitor the session and analyze the response headers.** Monitor the session using the attack proxy. Pay particular attention to the response headers from the server. Take note of whether the X-Frame-Options header is present in the response headers. Analyze the restrictions imposed by the X-Frame-Options headers to make sure they are consistent with the application requirements.\r\n\r\n\r\n==How to Fix==\r\n\r\nYou can set the X-Frame-Options header in one of three ways, which will be described in detail below: \r\n\r\n# **Configure the web server.** Configure the web server to inject the X-Frame-Options response header after every page request to restrict framing for the entire application. If you are using Apache Web Server, add the following to the httpd.conf configuration file to deny any framing in the application: {{{ Header always append X-FRAME-OPTIONS DENY }}}. Alternatively, add the following to the httpd.conf configuration file to allow framing only from the same domain as the application: {{{ Header always append X-FRAME-OPTIONS SAMEORIGIN }}}. Restart the web server or reload the configuration.\r\n# **Manually build the header into the response.** In PHP, add the following to the response at the top of the PHP page to deny any framing in the page: {{{ header(\"x-frame-options: DENY\"); }}} Alternatively, add the following to the response at the top of the PHP page to allow framing in the page only from the same domain as the application: {{{ header(\"x-frame-options: SAMEORIGIN\"); }}}\r\n# **Implement a filter to inject the header in each page response.** The name of the Filter class is arbitrary, but it must implement the javax.Servlet.Filter interface. The work in the Filter class is in the doFilter method. \\\\ {{{ public void doFilter(ServletRequest req, ServletResponse resp,FilterChain chain) throws IOException, ServletException }}} \\\\ {{{ HttpServletResponse response = (HttpServletResponse) resp; }}} \\\\ {{{ response.addHeader(“x-frame-options”,”DENY”); }}} \\\\ {{{ chain.doFilter(req, resp); }}} \\\\ {{{ } }}} \\\\ Add the filter to the application web.xml file. For example, the following snippet is for a filter with the class name XframeOptionFilter: \\\\ {{{ <filter> }}} \\\\ {{{ <filter-name>XframeOptionFilter</filter-name> }}} \\\\ {{{ <filter-class> }}} \\\\ {{{ com.example.servlet.filters.XframeOptionFilter }}} \\\\ {{{ </filter-class> }}} \\\\ {{{ </filter> }}} \\\\ {{{ <filter-mapping> }}} \\\\ {{{ <filter-name>XframeOptionFilter</filter-name> }}} \\\\ {{{ <url-pattern>/*</url-pattern> }}} \\\\ {{{ </filter-mapping> }}}\r\n\r\n==Problem Example==\r\n\r\nExample.com is a popular social media site that allows users to “like” certain applications. The site does not protect against clickjacking.  As shown below, Example.com's   social_media_like_it.php page has a like button, which has been overlayed by an iframe that says \"Click here for latest sports.\" When a user clicks for the latest sports news, he unknowingly “likes” the particular web page. \r\n\r\n{{{\r\n<html> \r\n<head> \r\n<title>Sports Page</title> \r\n</head> \r\n<body\"> \r\n<div style=\"position:absolute; left:100px; top:100px;\">Click here for latest sports!</DIV>\r\n<iframe style=\"opacity:0;\" height=\"500\" width=\"500\" scrolling=\"no\" \r\nsrc=\"http://www.example.com/social_media_like_it.php\"></iframe> \r\n</body> \r\n</html>\r\n}}}\r\n\r\nHere is the server header for http://www.example.com/social_media_like_it.php:\r\n\r\n{{{\r\nHTTP/1.1 200 OK\r\nDate: Tue, 16 Apr 2013 05:23:17 GMT\r\nServer: Apache/2.2.16 (Win32) mod_ssl/2.2.16 OpenSSL/0.9.8o\r\nX-Powered-By: PHP/5.3.8-ZS5.5.0 ZendServer\r\nSet-Cookie: ZDEDebuggerPresent=php,phtml,php3; path=/\r\nKeep-Alive: timeout=5, max=100\r\nConnection: Keep-Alive\r\nTransfer-Encoding: chunked\r\nContent-Type: text/html\r\n}}}\r\n\r\n==Solution Example==\r\n\r\nTo correct the situation, Example.com developers deny framing of any of the application’s pages. In the httpd.conf configuration file of their Apache 2.0 server, they add \r\n\r\n{{{ \r\nHeader always append X-FRAME-OPTIONS DENY \r\n}}}\r\n\r\nand reload the Apache configuration. As a result, the social_media_like_it.php page will not be rendered. This eliminates the possibility that the user will unknowingly click Like.\r\n\r\nServer Header Response:\r\n\r\n{{{\r\nHTTP/1.1 200 OK\r\nDate: Tue, 16 Apr 2013 05:33:43 GMT\r\nServer: Apache/2.2.16 (Win32) mod_ssl/2.2.16 OpenSSL/0.9.8o\r\nX-FRAME-OPTIONS: DENY\r\nX-Powered-By: PHP/5.3.8-ZS5.5.0 ZendServer\r\nSet-Cookie: ZDEDebuggerPresent=php,phtml,php3; path=/\r\nKeep-Alive: timeout=5, max=99\r\nConnection: Keep-Alive\r\nTransfer-Encoding: chunked\r\nContent-Type: text/html\r\n}}}\r\n\r\n\\\\\r\n==Additional Resources==\r\n\r\n* For more information about X-Frame-Options, see http://tools.ietf.org/html/draft-ietf-websec-x-frame-options-00\r\n* For more information about X-Frame-Options, see  https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options\r\n* For more information about Clickjacking, see https://www.owasp.org/index.php/Clickjacking\r\n\r\n\r\n==HTTP Header Guidelines==\r\n\r\n* [[00000000-0000-0000-0000-00000028bb7d|Use X-Content-Security-Policy to Mitigate XSS]]\r\n* [[00000000-0000-0000-0000-0000009026c0|Use X-XSS-Protection to Prevent Reflected XSS]]\r\n* [[00000000-0000-0000-0000-000000204a22|Use X-Frame-Options to Prevent ClickJacking]]\r\n* [[9e0f93ba-0b80-4aab-b93c-c17b9af2a19c|Use a Filter to Inject X-Frame-Options]]\r\n* [[ae2dc4f8-af3d-4002-9417-f3f1d5c9128b|Add X-Frame Options to Responses]]\r\n* [[00000000-0000-0000-0000-00000063561d|Use the Strict-Transport-Security Header to Enforce HTTPS]]\r\n* [[00000000-0000-0000-0000-000000225f24|Use includeSubDomains with Strict-Transport-Security]]\r\n\r\n==HTTP Header Checklist Items==\r\n\r\n* [[00000000-0000-0000-0000-0000006b6766|X-Content-Security-Policy Is Used to Mitigate XSS]]\r\n* [[00000000-0000-0000-0000-0000007122c6|X-XSS-Protection Is Used to Prevent Reflected XSS]]\r\n* [[00000000-0000-0000-0000-000000498810|X-Frame-Options Are Used to Prevent Clickjacking]]\r\n* [[0d1871fe-76d3-4ea3-87be-ef63662dd772|A Filter Is Used to Inject X-Frame Options]]\r\n* [[26caffea-d597-40fd-9ed0-36fb025d188b|X-Frame Options Are Added to Responses]]\r\n* [[00000000-0000-0000-0000-0000001b501f|The Strict-Transport-Security Header is Used to Enforce HTTPS]]\r\n* [[0078cd3f-9e84-4eb4-9a2f-7f51e3100801|IncludeSubDomains is Used with Strict-Transport-Security]]\r\n"
        ]
      }
    ]
  }
}