{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000016877f"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000016877f,726e1db5-c141-46bc-82e2-c1351bae4d52,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Stored Sensitive Data Is Encrypted"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Android"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Stored Sensitive Data Is Encrypted"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "WikiText"
        },
        "Data": [
          "==What to Check For==\n\nVerify that stored sensitive data is encrypted.\n\n==Why==\n\nSensitive data at rest should be encrypted to make it difficult for an attacker to recover this data in the event that the device is stolen or compromised.\n\n==How to Check==\n\nTo verify that stored sensitive data is encrypted:\n\n# **Identify sensitive data.** Make a list of types of sensitive information handled by your application. Some examples are.\n# **Determine if sensitive data needs to be stored.** For each type of sensitive data, determine whether it needs to be stored at all. Do not store sensitive data unless it is absolutely necessary. For data that needs to be stored, make a list of the locations where it is stored and which functions access each piece of sensitive data.\n# **Review encryption requirements for sensitive data that is stored in files.** Determine the level of protection that is the most appropriate for each type of sensitive data handled by the application that is stored in files.\n# **Verify that stored sensitive data is encrypted.** Examine the code that is responsible for storing each type of data that needs to be encrypted to make sure that it satisfies the defined encryption requirements.\n\n==How to Fix==\n\nTo encrypt stored sensitive data:\n\n# **Identify sensitive data.** Make a list of types of sensitive information handled by your application. Some examples are.\n# **Determine if sensitive data needs to be stored.** For each type of sensitive data, determine whether it needs to be stored at all. Do not store sensitive data unless it is absolutely necessary. For data that needs to be stored, make a list of the locations where it is stored and which functions access each piece of sensitive data.\n# **Add an encryption subsystem to your application.** Implement a centralized set of encryption functions to be used by your application. A centralized encryption subsystem is simpler to manage and to implement correctly than ad hoc code spread out throughout the application. The encryption system should provide encryption and decryption functions; functions for managing the encryption keys might also be useful.\n# **Use the //Cipher// class for encryption.** The Android SDK includes the //Cipher// class, which provides access to industry standard cryptographic algorithms.\n# **Use a strong encryption algorithm and mode.** Use the //getInstance// method of the //Cipher// class to specify an encryption algorithm and mode. One recommended algorithm and mode is //\"AES/CBC/PKCS5Padding\"//. \n# **Use strong encryption keys.** Make sure to use strong encryption keys when protecting sensitive data. The most important factor in encryption key strength is length. The recommended length of encryption keys for the AES algorithm is 256-bit. Pass the key as a byte array to the constructor of the //SecretKeySpec// class to get a //SecretKeySpec// object that can be used with the //Cipher// for encryption or decryption. The key may be generated by using the //KeyGenerator// class.\n# **Explicitly specify character encoding.** Make sure to explicitly specify the character encoding when encrypting and decrypting data by using the //Charset.forName// method.\n# **Use //CipherOutputStream// and //CipherInputStream// classes to access encrypted streams.** The //CipherOutputStream// and //CipherInputStream// classes provide cryptographic wrappers for stream objects - this might be simpler to use for cryptographic I/O than using the //Cipher// class directly for each byte.\n# **Use your application's encryption subsystem to encrypt stored sensitive data.** Once your encryption subsystem has been defined, use it to protect all files that store sensitive data. Encryption functions need to be called whenever sensitive data is stored and decryption functions need to be called whenever sensitive data is loaded.\n\n\n==Additional Resources==\n\n* For more information about the //Cipher// class, see http://developer.android.com/reference/javax/crypto/Cipher.html\n* For more information about the //CipherOutputStream// class, see http://developer.android.com/reference/javax/crypto/CipherOutputStream.html\n* For more information about the //CipherInputStream// class, see http://developer.android.com/reference/javax/crypto/CipherInputStream.html\n* For more information about the //KeyGenerator// class, see http://developer.android.com/reference/javax/crypto/KeyGenerator.html\n* For an encryption code example, please see http://www.java2s.com/Code/Java/Security/EncryptionanddecryptionwithAESECBPKCS7Padding.htm\n"
        ]
      }
    ]
  }
}