{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000006b6766"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000006b6766,6a62c042-26a8-4967-a8d5-da142a3a776a,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "X-Content-Security-Policy Is Used to Mitigate XSS"
        ],
        "Category": [
          "HTTP Headers"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "X-Content-Security-Policy Is Used to Mitigate XSS"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* HTML5 and JavaScript\n\n==What to Check For==\n\nVerify that the X-Content-Security-Policy header in included in the HTTP header information to tell your browser which scripts it may execute. \n\n==Why==\n\nX-Content-Security-Policy lets you define a security policy that instructs your browser to execute only scripts that you allow, and block any others. Note that this policy can be used to block scripts within iframe elements. \n\nThis helps prevent content injection attacks such as cross-site scripting (XSS). Because the value is part of the HTTP message and not in the HTML, it cannot be compromised by JavaScript from untrusted locations.\n\nIf you don't define a security policy, the default behavior of your browser is to execute any script included (intentionally or not) in your application. Your application may then be susceptible to XSS attacks that lead to execution of scripts from untrusted locations.\n\n==When==\n\nInclude X-Content-Security-Policy in all web pages and, in all of your HTTP transmissions.\n\n==How to Check==\n\nTo verify that the X-Content-Security-Policy header is included in HTTP headers:\n# **Take inventory of your web application’s script needs.** Use a white list approach. If there is a script that is allowed in your web application, gather the domain names of the source so that you can include the script in the policy. \n# **Verify that the X-Content-Security-Policy header is being used.** Search the code for \"X-Content-Security-Policy\" to locate the code that sets this header in most Web Application programming languages, including PHP, ASP.NET and Java. Review each piece of code that sets the X-Content-Security-Policy header to make sure that it applies the correct restrictions.\n\n\n==How to Fix==\n\nTo define a policy to your browser that limits the scripts it executes, follow these steps:\n# **Take inventory of your web application’s script needs.** Use a white list approach. If there is a script that is allowed in your web application, gather the domain names of the source so that you can include the script in the policy. \n# **Add code in your server application to add the X-Content-Security-Policy header to the response.** Specify the allowed value(s) of the X-Content-Security-Policy. The browser will execute only the scripts that you allow. For example, if you only want to allow script that is included in the web page itself, specify script-src 'self'.\n# **Test to ensure that your browser executes the allowed scripts, and blocks others.** Script that is on your page should still execute normally. To verify that non-allowed scripts are blocked, include an iframe on your page for testing purposes. Set the src attribute of the iframe element to a web page that contains a script, and verify that the browser blocks the script's execution.\n\n==Problem Example==\n\nThe following demonstrates a web page with no security policy set, and shows the HTTP header information:\n\n{{{\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 440\n\n\n<%@page language=\"java\"\n\tcontentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%>\n\n\n<title>index</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n\n\n<iframe src=\"http://www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2Fpages%2FWeb-development%2F109644819062307%3Fref%3Dts%26fref%3Dts\" style=\"border:none; overflow:hidden; width:450px;\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n}}}\n\nIn this example, the browser will execute the script that is included in the iframe element’s src: \n\n{{{\n(\"http://www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2Fpages%2FWeb-development%2F109644819062307%3Fref%3Dts%26fref%3Dts\"). \n}}}\n\nThis introduces the potential for malicious script to execute.\n\n==Solution Example==\n\nTo correct the situation, add the X-Content-Security-Policy header to your HTTP response to tell your browser not to execute any code that is inside an iframe:\n\n{{{\n// snipped package imports…\n\n/**\n * Servlet implementation class ServletWithCSP\n */\n@WebServlet(\"/ServletWithCSP\")\npublic class ServletWithCSP extends HttpServlet {\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) \n\t\t\tthrows ServletException, IOException {\n\t\t// Set a policy that enables by default only \n\t\tfinal String cspDirective = \"default-src 'self'; frame-src 'none'\";\n\t\t// Set the HTTP header for content security policy\n\t\tresponse.setHeader(\"X-Content-Security-Policy\", cspDirective);\n\t\tresponse.getWriter().append(\"\");\n\t\tresponse.getWriter().append(\"\");\n\t\tresponse.getWriter().append(\"\");\n\t\tresponse.getWriter().append(\"\");\n\t\tresponse.getWriter().append(\"\");\n\t\tresponse.getWriter().append(\"<iframe src=\"\\\"http://www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2Fpages%2FWeb-development%2F109644819062307%3Fref%3Dts%26fref%3Dts\\\"\" style=\"\\\"border:none;\" overflow:hidden;=\"\" width:450px;\\\"=\"\" allowtransparency=\"\\\"true\\\"\" frameborder=\"\\\"0\\\"\" scrolling=\"\\\"no\\\"\"></iframe>\");\n\t\tresponse.getWriter().append(\"\");\n\t\tresponse.getWriter().append(\"\");\n\t\tresponse.getWriter().flush();\n\t}\n\n}\n}}}\n\nThe value sent to the browser, including the HTTP header, will be as follows:\n\n{{{\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nX-Content-Security-Policy: default-src 'self'; frame-src 'none'\nTransfer-Encoding: chunked\n\n<!DOCTYPE HTML>\n<html>\n<head></head>\n<body>\n<iframe src=\"http://www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2Fpages%2FWeb-development%2F109644819062307%3Fref%3Dts%26fref%3Dts\" scrolling=\"no\" frameborder=\"0\" style=\"border:none; overflow:hidden; width:450px;\" allowTransparency=\"true\"></iframe>\n</body>\n</html>\n}}}\n\n\\\\\n==Additional Resources==\n\n* For more information about W3C's Content Security Policy 1.0, see http://www.w3.org/TR/CSP/#content-security-policy-header-field\n* For OWASP's Content Security Policy, see https://www.owasp.org/index.php/Content_Security_Policy\n\n\n==HTTP Header Guidelines==\n\n* [[00000000-0000-0000-0000-00000028bb7d|Use X-Content-Security-Policy to Mitigate XSS]]\n* [[00000000-0000-0000-0000-0000009026c0|Use X-XSS-Protection to Prevent Reflected XSS]]\n* [[00000000-0000-0000-0000-000000204a22|Use X-Frame-Options to Prevent ClickJacking]]\n* [[9e0f93ba-0b80-4aab-b93c-c17b9af2a19c|Use a Filter to Inject X-Frame-Options]]\n* [[ae2dc4f8-af3d-4002-9417-f3f1d5c9128b|Add X-Frame Options to Responses]]\n* [[00000000-0000-0000-0000-00000063561d|Use the Strict-Transport-Security Header to Enforce HTTPS]]\n* [[00000000-0000-0000-0000-000000225f24|Use includeSubDomains with Strict-Transport-Security]]\n\n==HTTP Header Checklist Items==\n\n* [[00000000-0000-0000-0000-0000006b6766|X-Content-Security-Policy Is Used to Mitigate XSS]]\n* [[00000000-0000-0000-0000-0000007122c6|X-XSS-Protection Is Used to Prevent Reflected XSS]]\n* [[00000000-0000-0000-0000-000000498810|X-Frame-Options Are Used to Prevent Clickjacking]]\n* [[0d1871fe-76d3-4ea3-87be-ef63662dd772|A Filter Is Used to Inject X-Frame Options]]\n* [[26caffea-d597-40fd-9ed0-36fb025d188b|X-Frame Options Are Added to Responses]]\n* [[00000000-0000-0000-0000-0000001b501f|The Strict-Transport-Security Header is Used to Enforce HTTPS]]\n* [[0078cd3f-9e84-4eb4-9a2f-7f51e3100801|IncludeSubDomains is Used with Strict-Transport-Security]]\n"
        ]
      }
    ]
  }
}