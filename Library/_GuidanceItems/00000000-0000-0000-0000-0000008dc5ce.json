{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000008dc5ce"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000008dc5ce,0f3e46fb-9c1e-480d-9349-09ef1ca4556b,"
        ],
        "Library_Id": [
          "f215ceee-9a08-41d9-b2c1-bbcc058a8f32"
        ],
        "Title": [
          "Avoid Using Native Code"
        ],
        "Category": [
          "Memory Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Android"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Avoid Using Native Code"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "WikiText"
        },
        "Data": [
          "==Applies To==\r\n\r\n* All Android applications.\r\n\r\n==What to Do==\r\n\r\nAvoid using native code to develop applications.\r\n\r\n==Why==\r\n\r\nUsing native code increases the risk of memory management vulnerabilities, such as buffer overflows and format string vulnerabilities.\r\n\r\n==How==\r\n\r\nExamine the application architecture and identify any native code components. Consider replacing any native code components with Java equivalents. It may be appropriate to keep native code components if they carry out simple but performance-sensitive operations. Avoid using native code in the future. Weigh the risks of additional vulnerabilities against the performance benefits when considering using native code.\r\n\r\n==Related Items==\r\n\r\n* [[00000000-0000-0000-0000-0000007a4847|Native Code Is Not Used Unless Necessary]]"
        ]
      }
    ]
  }
}