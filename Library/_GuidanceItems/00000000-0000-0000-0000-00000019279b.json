{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000019279b"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000019279b,a512acbb-a5e2-4525-9672-991ba36f914d,"
        ],
        "Library_Id": [
          "c4b9cb6a-4561-4451-9b6c-4e59d73584f6"
        ],
        "Title": [
          "Unique Tokens Are Included in Redirects"
        ],
        "Category": [
          "Redirects and Forwards"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Unique Tokens Are Included in Redirects"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* Java\n\n==What to Check For==\n\nVerify that unique tokens are included in redirects.\n\n\n==Why==\n\nInclude unique tokens in redirects to prevent Cross-Site History Manipulation (XSHM) attacks. XSHM are actually web browser vulnerabilities, but it's possible to protect against them within the application. XSHM should really be prevented by the web browser. This guidance article exists more for informational purposes, because adding this security control might not justify the overhead that it creates.\n\n\n==How To Check==\n\nTo verify that unique tokens are included in redirects:\n\n# **Consider the threat of XSHM.** Cross-Site History Manipulation is a web browser vulnerability that revolves around the fact that a web site may access the amount of items in web browser history via JavaScript. A malicious site may load a URL in a hidden frame and then check the history count again. If the history count didn't change, then the page has been loaded before and the malicious site knows about it. Thus confidentiality of the user is breached. XSHM should really be mitigated by the web browser and is a low-risk vulnerability. Mitigation of XSHM on the server-side is possible and is described below. Consider whether implementing this security control is worth the effort that it takes.\n# **Find all pages that use redirection.** Review the application to find all pages that initiate redirection. Make a list of these pages.\n# **Verify that unique tokens are added to redirection URLs.** For each page that initiates redirection, find the code that generates the target URL. Make a list of all possible target pages. Check for the presence of code that creates a random and unique token and appends it as a parameter to the redirection URL. The unique token also needs to be stored in the session state so that it can be validated as having originated from the server. \n# **Verify that redirection targets include validation code.** Use the list of redirection targets from the previous step to check for the presence of code that validates the unique redirection token when the page loads. \n\n\n==How To Fix==\n\nTo include unique tokens in redirects:\n\n# **Consider the threat of XSHM.** Cross-Site History Manipulation is a web browser vulnerability that revolves around the fact that a web site may access the amount of items in web browser history via JavaScript. A malicious site may load a URL in a hidden frame and then check the history count again. If the history count didn't change, then the page has been loaded before and the malicious site knows about it. Thus confidentiality of the user is breached. XSHM should really be mitigated by the web browser and is a low-risk vulnerability. Mitigation of XSHM on the server-side is possible and is described below. Consider whether implementing this security control is worth the effort that it takes.\n# **Find all pages that use redirection.** Review the application to find all pages that initiate redirection. Make a list of these pages.\n# **Add unique tokens to redirection URLs.** For each page that initiates redirection, find the code that generates the target URL. Make a list of all possible target pages. Add code that creates a random and unique token and appends it as a parameter to the redirection URL. The unique token will also need to be stored in the session state so that it can be validated as having originated from the server. Add code that stores the unique token in the session state for the user. It is best to use the same method for generating and passing these unique tokens for all pages that use redirection.\n# **Add validation code to the targets of the redirection.** Use the list of redirection targets from the previous step to add code that validates the unique redirection token when the page loads. Check the unique token passed in the request against the token stored in the session state. Display an error message if the security token is not valid. Since there may be many redirection targets and they may not all be a part of the same application, this step might become quite cumbersome."
        ]
      }
    ]
  }
}