{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000005f2e4a"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000005f2e4a,257eff37-396a-4eb8-896e-94ef051ea5ba,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use TLS to Encrypt WebSocket Connections"
        ],
        "Category": [
          "WebSockets"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use TLS/SSL to Encrypt WebSocket Connections"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* HTML5\n\n==What to Do==\n\nWhen using WebSockets, connect with Transport Layer Security (TLS).\n\n==Why==\n\nJust as TLS protects and encrypts the communication tunnel in HTTP, it can encrypt a WebSockets tunnel to protect against eavesdropping and man-in-the-middle attacks. (By default, the communication tunnel with the WebSocket protocol is not encrypted.) \n\n==When==\n\nUse this guideline for applications that employ the WebSocket protocol and need to protect sensitive data.\n\n==How==\n\nThe WebSockets protocol specification is built on HTTP. With that in mind:\n\n# **Enable security certificates and keys.** Consult your web server documentation to ensure that your web site produces a valid certificate with HTTPS connections.\n# **Enable TLS on the WebSocket server.** The configuration may vary depending upon the Websocket server implementation in use. \n# **Connect the client to the WebSocket server and ensure connections to the WebSocket are secure.** When connecting to HTML5 web applications, ensure that client browsers connect with HTTPS. Note that the code accessing the WebSocket server should use the wss protocol, which is basically ws over TLS. As such, use {{{wss://<url>}}} instead of the typical {{{ws://<url>}}} in the HTML5 application code. \n\n\n==Problem Example==\n\nBelow is a client-side code connection to a WebSocket server. The connection uses standard ws over standard, unencrypted HTTP. An intruder who has access to the communication stream over the network could easily intercept the communication.\n\nClient Connection:\n\n{{{\n\n$(\"#open\").click (function (evt) {\nevt.preventDefault();\n\nvar host = ‘example.com’;\nvar port = ‘8887’;\nvar uri = ‘very_private’;\n\nws = new WebSocket(\"ws://” + host + “:” + port + “/” + uri );\n\nws.onmessage = function(evt) {alert(\"Non encrypted message has been received”)};\nws.onclose = function(evt) { alert(\"Non encrypted connection is closed\"); };\nws.onopen = function(evt) { alert(“Non encrypted connection has opened”) };\n});\n\n}}}\n\n\\\\\n==Solution Example==\n\nBelow is a client-side code connection to a WebSocket server using wss, which takes advantage of TLS over HTTP port 443. This change makes it much more difficult for an intruder to intercept the communication tunnel.\n\nClient Connection:\n\n{{{\n\n$(\"#open\").click(function(evt) {\nevt.preventDefault();\n\nvar host = ‘example.com’;\nvar port = ‘8887’;\nvar uri = ‘very_private’;\n\nws = new WebSocket(\"wss://” + host + “:” + port + “/” + uri );\nws.onmessage = function(evt) {alert(\"TLS message has been received”)};\nws.onclose = function(evt) { alert(\"TLS connection is closed\"); };\nws.onopen = function(evt) { alert(“TLS connection has opened”) };\n});\n\n}}}\n\nWhen the handshake is performed using wss, you’ll see the typical handshake for TLS over port 443 to establish the secure connection.\n\nBelow is a partial communication stream seen when connecting to a WebSocket testing server at http://www.websocket.org/echo.html, and the view of the stream using a web debugging tool.\n\n{{{\n\nHTTP/1.1 200 Connection Established\nFiddlerGateway: Direct\nStartTime: 22:24:09.760\nConnection: close\n\nEncrypted HTTPS traffic flows through this CONNECT tunnel. HTTPS Decryption is enabled in Fiddler, so decrypted sessions running in this tunnel will be shown in the Web Sessions list.\n\nSecure Protocol: Tls\nCipher: Rc4 128bits\nHash Algorithm: Sha1 160bits\nKey Exchange: RsaKeyX 2048bits\n\n== Server Certificate ==========\n[Subject]\n  CN=*.websocket.org, OU=Domain Control Validated, O=*.websocket.org\n\n[Issuer]\n  SERIALNUMBER=07969287, CN=Go Daddy Secure Certification Authority, OU=http://certificates.godaddy.com/repository, O=\"GoDaddy.com, Inc.\", L=Scottsdale, S=Arizona, C=US\n\n[Serial Number]\n  27F9ADF2DB9921\n\n[Not Before]\n  10/19/2012 2:43:55 AM\n\n[Not After]\n  10/28/2014 5:06:24 PM\n\n[Thumbprint]\n  8A95FEB7BE9825FBE3F4F50A6662DC880764C876\n\n}}}\n\n"
        ]
      }
    ]
  }
}