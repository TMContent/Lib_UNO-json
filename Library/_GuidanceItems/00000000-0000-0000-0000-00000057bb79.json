{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000057bb79"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000057bb79,3e2121ad-a610-4f56-b524-8719eb97657f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Strong Session Identifiers"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "Use Strong Session Identifiers"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n* Java\n\n==What to Do==\n\nUse strong session identifiers if your application keeps session state.\n\n==Why==\nUsing cryptographically strong session identifiers prevents attackers from easily guessing session ids and taking over users' sessions. If an attacker hijacks the session he/she can perform the same functions as the logged in user. This will lead to a compromise of user account and in case the user is an administrator, the whole application.\n\n==How==\nJava //HttpSession// interface uses strong session IDs by default. Please, make sure that your application uses the default. Rewrite the application session state handling code, if necessary, to use the default //HttpServletRequest.getSession// to generate new session ID. \n\n"
        ]
      }
    ]
  }
}