{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-000000179eb6"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-000000179eb6,49f0b9fd-a014-4efd-b239-849b147cc65d,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use Parameterized APIs to Execute External Commands"
        ],
        "Category": [
          "Dangerous APIs"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "Use Parameterized APIs to Execute External Commands"
        ],
        "Tag": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n* Java\r\n\r\n## What to Do ##\r\n\r\nAvoid calling external commands as much as possible, but when it is necessary, use parameterized APIs to do so. When using parameterized APIs, avoid invoking the operating system shell, because that effectively negates the use of parameterization.\r\n\r\n## Why ##\r\n\r\nCommand injection vulnerabilities typically occur when user data is used to spawn external processes. Usually, the developers don't want the users to be able to choose which external commands are executed. The most effective way to enforce which external process is executed is to use parameterized APIs to call it. This doesn't work is the external process, which is being called, is able to spawn another process based on parameters passed to it. For example, if cmd.exe or bash is used as an external process, an attacker can pass data to it to call any command - this is a command injection vulnerability.\r\n\r\n## How ##\r\n\r\nTo use `ProcessBuilder` to execute external commands:\r\n\r\n1. **Find all code that executes external commands.** Search the application code for the following keywords to find all code that executes external commands: `getRuntime`, `exec`, `start`, `ProcessBuilder`.\r\n2. **Avoid using external processes.** Review each case where an external process is called to make sure it is absolutely necessary. Command injection vulnerabilities are very dangerous, so calling external processes should be avoided as much as possible to reduce the risk of such vulnerabilities. Replace code that calls external processes with Java code that does the same thing, if possible.\r\n3. **Don't let the user choose the external application.** This should go without saying, but the user should not be able to choose the external process which is being executed. If this is absolutely necessary, it might be an option for an administrative user, and then this functionality should be protected with access controls and ideally not exposed to the Internet. Allowing the user to choose which external command to execute is essentially the definition of a command injection vulnerability.\r\n4. **Use parameterized APIs.** `ProcessBuilder` is the parameterized API for calling external commands in Java. Replace all code that uses `Runtime.exec()` with code that uses `ProcessBuilder`. Avoid calling processes that can spawn other processes based on parameters passed to them. For example, calling `cmd.exe` or `bash` and passing parameters to them essentially negates the use of parameterization, because shell interpreters can spawn other processes based on parameters passed to them. \r\n5. **Validate user data passed to external commands.** Use positive input validation on data passed to external commands. \r\n\r\n\r\n## Guideline ##\r\n\r\n* [Separate Parameters from Command Names](042253ce-3fe6-4138-926b-c3169ec0ea78)"
        ]
      }
    ]
  }
}