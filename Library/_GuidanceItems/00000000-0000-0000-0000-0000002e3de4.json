{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000002e3de4"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000002e3de4,4602a341-99a3-4b53-9218-6028a3ede913,"
        ],
        "Library_Id": [
          "b6f408c5-6e6e-4bc0-90a5-0bb10becc2ce"
        ],
        "Title": [
          "Implement Code Integrity Checks"
        ],
        "Category": [
          "Code Integrity"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "iOS"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Implement Code Integrity Checks"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "WikiText"
        },
        "Data": [
          "==Applies To==\n\n* All iOS applications.\n\n==What to Do==\n\nImplement code integrity checks that are difficult to bypass.\n\n==Why==\n\nCode integrity checks help prevent software piracy and unauthorized modifications to the application. Code integrity checks do not provide 100% assurance of code integrity, but they make it harder for an attacker to modify the application binary code without breaking it.\n\n==How==\n\nTo check code for integrity:\n\n# **Write piracy check functions.** Piracy check functions often try to determine whether the application is running on a jailbroken device. The application is not necessarily pirated if it is on a jailbroken device, but there are no fool-proof anti-piracy or code integrity measures for jailbroken devices. Piracy checks can determine whether a device is jailbroken by looking for files that only appear on jailbroken devices, such as Cydia. If piracy is not a concern, this step may be omitted.\n# **Write integrity check functions.** The most common ways to implement code integrity checks is to check classes for expected addresses or checksums. The //class_getMethodImplementation// method returns a pointer to a method; checking the value of this pointer against the expected value provides reasonable assurance that the method has not been modified during runtime.\n# **Define integrity check functions as inline.** The integrity check functions written in the previous step should be defined as //inline// so that the compiler inserts the full integrity checking code wherever it is invoked.\n# **Scatter integrity check functions throughout the application.** Multiple integrity check function calls spread out throughout the application make it harder for an attacker to find them all and patch them.\n\n==Code Integrity Guidelines==\n* [[00000000-0000-0000-0000-0000002e3de4|Implement Code Integrity Checks]]\n* [[00000000-0000-0000-0000-000000470103|Sign iOS Application Updates]]\n* [[00000000-0000-0000-0000-000000986af1|Sign iOS Applications]]\n\n==Code Integrity Checklists==\n* [[00000000-0000-0000-0000-0000002d9dac|Code Integrity Checks Are Implemented]]\n* [[00000000-0000-0000-0000-000000892dc7|iOS Application Updates Are Signed]]\n* [[00000000-0000-0000-0000-00000039db6a|iOS Applications Are Signed]]\n\n==Additional Resources==\n\n* For more information about the //class_getMethodImplementation// method, please see https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html"
        ]
      }
    ]
  }
}