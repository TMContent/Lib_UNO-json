{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000063561d"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000063561d,1fcfbe04-bb81-4e55-80dc-6ce15bf3fcbb,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Use the Strict-Transport-Security Header to Enforce HTTPS"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use the Strict-Transport-Security Header to Enforce HTTPS"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* HTML5\n\n==What to Do==\n\nUse the Strict-Transport-Security response header to enforce secure communication with the browser via HTTPS. This header is often referred to as HTTP Strict Transport Security, or simply HSTS.\n\n==Why==\n\nThe Strict-Transport-Security header instructs the browser to communicate with the server only via HTTPS, a secure communication tunnel that prevents eavesdropping. Without the header, there is no way for the browser to “know” that a web page should be accessed over HTTPS. This leaves open the possibility of using standard, unencrypted HTTP whether through a malicious link or direct URL access. \n\n==When==\n\nUse this guideline when implementing HTML5 web applications that transmit confidential data.\n\n==How==\n\nNote that, as of this writing, the latest releases of Mozilla Firefox, Google Chrome, and Opera all support the HSTS header. However, Internet Explorer does not.\n\n# **Enable the //mod_header// module in the //httpd.conf// configuration file (if it is not already enabled).** For example, if you are using Apache Web Server, first enable\n//LoadModule headers_module modules/mod_headers.so//\n# **Add the HSTS header to the //httpd.conf// configuration file.** Include the required directive //max-age//. This specifies the time, in seconds, that a compliant browser will abide by forced HTTPS, even in the event a standard HTTP connection is attempted. For example, in the Apache //httpd.conf// configuration file, add the following line: //Header always append Strict-Transport-Security: \"max-age=7776000\"//. This directive instructs the browser to connect only via HTTPS for the next 90 days. The server will inject this header information into each application page rendered.\n# **Reload or restart the web server configuration.** The first time the user connects to your website using HTTPS, the browser reads the HSTS header, including the //max-age// directive. The browser will know it should connect only via HTTPS for the specified //max-age// time period.\n\n==Problem Example==\n\nExample.com is a popular stock-trading site that handles confidential financial information for its users. In this scenario, it is the intention that all requests from users are sent using HTTPS. However, no Strict-Transport-Security response header is sent from the Example.com server.\n\nA hacker at a coffee shop uses his laptop to intercept all unencrypted traffic on the local wireless network. A user visits the coffee shop, and clicks a link to log in to the secure Example.com website. However, the link is http://www.example.com/login.php instead of https://www.example.com/login.php. Though the user is visiting the correct website, the hacker can eavesdrop, because the communication tunnel is unencrypted.\n\n{{{\n\n<a href=\"http://www.example.com/login.php\"> Click here </a> to login securely connect to example.com\n\n}}}\n\nEven though the verbiage indicates a secure connection, the hyperlink clearly is not secure.\n\n{{{\n\nServer Response:\nHTTP/1.1 200 OK\nDate\tThu, 25 Apr 2013 06:49:05 GMT\nServer\tApache/2.2.22 (Win32) mod_ssl/2.2.22 OpenSSL/0.9.8t\nX-Powered-By\tPHP/5.3.8-ZS5.5.0 ZendServer\nSet-Cookie\tZDEDebuggerPresent=php,phtml,php3; path=/\nKeep-Alive\ttimeout=5, max=100\nConnection\tKeep-Alive\nTransfer-Encoding\tchunked\nContent-Type\ttext/html\n\n}}}\n\n\\\\\n==Solution Example==\n\nTo correct the situation, the developers at Example.com include the Strict-Transport-Security response header. In the configuration file of their Apache 2 server, they enable //mod_header//, and then add:\n\n{{{\n\nHeader always append Strict-Transport-Security: \"max-age=7776000 \" \n\n}}}\n\nAssuming that the user has logged in previously to Example.com, the browser will now detect that the connection should be HTTPS and connect securely.\n\n{{{\n\nServer Response:\nHTTP/1.1 200 OK\nDate\tThu, 25 Apr 2013 07:01:05 GMT\nServer\tApache/2.2.22 (Win32) mod_ssl/2.2.22 OpenSSL/0.9.8t\nX-Powered-By\tPHP/5.3.8-ZS5.5.0 ZendServer\nSet-Cookie\tZDEDebuggerPresent=php,phtml,php3; path=/\nStrict-Transport-Security\tmax-age=7776000\nKeep-Alive\ttimeout=5, max=100\nConnection\tKeep-Alive\nTransfer-Encoding\tchunked\nContent-Type\ttext/html\n\n}}}\n\n\\\\\n==Additional Resources==\n\n* For information about the Strict-Transport-Security header, see http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec-14#section-6.1\n* For the TLS protocol specs, see http://tools.ietf.org/html/rfc5246\n* For a list of useful HTTP headers, see https://www.owasp.org/index.php/List_of_useful_HTTP_headers\n\n\n==HTTP Header Guidelines==\n\n* [[00000000-0000-0000-0000-00000028bb7d|Use X-Content-Security-Policy to Mitigate XSS]]\n* [[00000000-0000-0000-0000-0000009026c0|Use X-XSS-Protection to Prevent Reflected XSS]]\n* [[00000000-0000-0000-0000-000000204a22|Use X-Frame-Options to Prevent ClickJacking]]\n* [[9e0f93ba-0b80-4aab-b93c-c17b9af2a19c|Use a Filter to Inject X-Frame-Options]]\n* [[ae2dc4f8-af3d-4002-9417-f3f1d5c9128b|Add X-Frame Options to Responses]]\n* [[00000000-0000-0000-0000-00000063561d|Use the Strict-Transport-Security Header to Enforce HTTPS]]\n* [[00000000-0000-0000-0000-000000225f24|Use includeSubDomains with Strict-Transport-Security]]\n\n==HTTP Header Checklist Items==\n\n* [[00000000-0000-0000-0000-0000006b6766|X-Content-Security-Policy Is Used to Mitigate XSS]]\n* [[00000000-0000-0000-0000-0000007122c6|X-XSS-Protection Is Used to Prevent Reflected XSS]]\n* [[00000000-0000-0000-0000-000000498810|X-Frame-Options Are Used to Prevent Clickjacking]]\n* [[0d1871fe-76d3-4ea3-87be-ef63662dd772|A Filter Is Used to Inject X-Frame Options]]\n* [[26caffea-d597-40fd-9ed0-36fb025d188b|X-Frame Options Are Added to Responses]]\n* [[00000000-0000-0000-0000-0000001b501f|The Strict-Transport-Security Header is Used to Enforce HTTPS]]\n* [[0078cd3f-9e84-4eb4-9a2f-7f51e3100801|IncludeSubDomains is Used with Strict-Transport-Security]]\n\n"
        ]
      }
    ]
  }
}