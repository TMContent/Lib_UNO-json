{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000005d57a0"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000005d57a0,35f09fd4-1eea-40ad-b515-9958a507555f,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "Data Used in WebSQL Queries is Parameterized"
        ],
        "Category": [
          "WebSQL"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Data Used in WebSQL Queries is Parameterized"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* HTML5\r\n\r\n==What to Check For==\r\n\r\nVerify that data used in WebSQL is parameterized instead of concatenated with the query and passed in a string to the executeSql method.\r\n\r\n==Why==\r\n\r\nWhen executing database queries, placing data in parameters is an effective way to prevent SQL injection attacks. In WebSQL, the executeSQL method allows you to execute a query from a string or to pass data as parameters to the query. The first approach is likely to result in SQL injection vulnerabilities if the attacker is able to force SQL escape characters into the data. The second approach prevents SQL injection vulnerabilities by making sure that data is not interpreted as a part of the query. Though WebSQL injection is not a serious threat, because WebSQL is a client-side technology and the client has full access to the WebSQL database anyway, parameterizing SQL queries is still good practice.\r\n\r\n==How to Check==\r\n\r\nTo verify that data used in WebSQL queries is parameterized:\r\n\r\n# **Identify all WebSQL queries.** Search application code for \"executeSql\" to locate all code that executes WebSQL queries. Create a spreadsheet to list the code that executes WebSQL queries.\r\n# **Identify whether WebSQL queries are parameterized.** Examine each WebSQL query and determine whether it is parameterized. If the query contains any data that is passed from elsewhere in the application, such as user input, and this data is concatenated with the query, then it is not parameterized. If data is passed from the application to the WebSQL database using parameters of the executeSql method, then the query is parameterized. The wrong way to execute SQL queries is to concatenate data into the query, like this: tx.executeSql('SELECT * FROM users WHERE id=' + id); The correct way is to pass data as parameters, like this: tx.executeSql('SELECT * FROM users WHERE id=?', [id]);\r\n\r\n==How to Fix==\r\n\r\nTo parameterize data used in WebSQL queries:\r\n\r\n# **Identify all WebSQL queries.** Search the application code for \"executeSql\" to locate all code that executes WebSQL queries. Create a spreadsheet to list the code that executes WebSQL queries. \r\n# **Identify the WebSQL queries that are not parameterized.** Identify each WebSQL query in the spreadsheet that is not parameterized. If the query contains any data that is passed from elsewhere in the application, such as user input, and this data is concatenated with the query, then it is not parameterized. If data is passed from the application to the WebSQL database using parameters of the //executeSql// method, then the query is parameterized. The wrong way to execute SQL queries is to concatenate data into the query, like this: {{{ tx.executeSql('SELECT * FROM users WHERE id=' + id); }}} The correct way is to pass data as parameters, like this: {{{ tx.executeSql('SELECT * FROM users WHERE id=?', [id]); }}}\r\n# **For each WebSQL query that is not parameterized, identify all data placed in the query.** Examine each WebSQL query that is not parameterized and identify the data passed from the application to the WebSQL database in the query. Create a spreadsheet to list each piece of data passed to the database, the data type, and where it comes from. The data that is passed to WebSQL databases from the application should already be stored in variables; note the names of these variables in the spreadsheet as well.\r\n# **Rewrite non-parameterized WebSQL queries to take data as parameters.** Remove code that concatenates data from the application into WebSQL queries. Write the WebSQL queries as the first argument to the executeSql method and replace data that is passed from the application with a question mark. Pass the data from the application to the database as an array of variables through the second argument of the //executeSql// method. For example: {{{ tx.executeSql('SELECT * FROM users WHERE id=?', [id]); }}} In this example, the id is a piece of data that is passed from the application to the database and it is passed as a parameter. \r\n\r\n==Additional Resources==\r\n\r\n* For more information about executing WebSQL queries, see http://dev.w3.org/html5/webdatabase/#executing-sql-statements\r\n\r\n==WebSQL Guideline==\r\n\r\n* [[00000000-0000-0000-0000-0000005c692a|Parameterize Data Used in WebSQL Queries]]\r\n\r\n==WebSQL Checklist Item==\r\n\r\n* [[00000000-0000-0000-0000-0000005d57a0|Data Used in WebSQL Queries is Parameterized]]"
        ]
      }
    ]
  }
}