{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000052525d"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000052525d,0b6eb38c-d1b0-4913-b774-51db2afb60d8,"
        ],
        "Library_Id": [
          "c4b9cb6a-4561-4451-9b6c-4e59d73584f6"
        ],
        "Title": [
          "Ensure Proper Thread Safety of HttpSession Object Access"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Ensure Proper Thread Safety of HttpSession Object Access"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* Java\r\n\r\n\r\n==What to Do==\r\n\r\nMultiple threads within a servlet session may have access to the same //HttpSession// objects. Avoid using instance and static class variables and always consider thread safety during object initialization or modification.\r\n\r\n\r\n==Why==\r\n\r\nImproper handling of //HttpSession// objects can lead to race conditions and concurrency issues.\r\n\r\n\r\n==How==\r\n\r\nTo ensure thread safety:\r\n\r\n# **Identify all //HttpSession// objects that may be modified by multiple threads.** Find all code that modifies //HttpSession// objects, which may be accessed by multiple threads. One approach is to search code for the //HttpSession// keyword and then trace each //HttpSession// object throughout the code.\r\n# **Use immutable objects as much as possible.** Using immutable objects is a sound practice for avoiding concurrency issues and should be used as much as possible. The specifics of using immutable objects are different for different applications.\r\n# **Use class methods and local variables data handling.** For each piece of code that modifies //HttpSession// objects, use \"thread-safe\" class methods and local variables if possible. \r\n# **Synchronize critical sections that must be executed as a single operation.** For complex operations on //HttpSession// objects, make sure that critical sections are synchronized.\r\n\r\n\r\n==Problem Example==\r\n\r\nA shopping cart has a Pay Now button that finalizes a purchase and charges the customerâ€™s credit card. An application that is not thread safe may allow for a user to double-click the button and charge the customer twice for the same transaction.\r\n\r\n\r\n==Solution Example==\r\n\r\nSynchronized critical sections or immutable objects both can help prevent concurrency issues that might lead to simultaneous credit card transactions.  \r\n\r\n\r\n==Additional Resources==\r\n\r\n* For more information about using immutable objects, see http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html\r\n</add:></replace>"
        ]
      }
    ]
  }
}