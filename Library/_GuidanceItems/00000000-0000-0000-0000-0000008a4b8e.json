{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000008a4b8e"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000008a4b8e,9a89e4af-a4a1-4c8d-adda-8bf80b560cfa,"
        ],
        "Library_Id": [
          "c037d0d2-0617-44f3-b846-21dc3d02c4f8"
        ],
        "Title": [
          "Input Included in Output Is Encoded"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Input Included in Output Is Encoded"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* PHP\n\n==What to Check For==\n\nVerify that input that is going to be included in output in HTML contexts is encoded.\n\n==Why==\n\nEncoding untrusted data before displaying it prevents Cross-Site Scripting vulnerabilities.\n\n==How to Check==\n\nTo check if input included in output is encoded:\n\n# **Identify all pages that display user entered data.** Enumerate all the pages used by the application. Make a list of all the pages that display data that comes from untrusted sources.\n# **Identify all user input that is displayed in HTML contexts.** For each page that displays untrusted data, make a list of all untrusted data that is displayed and the context in which it is displayed. Most commonly, untrusted data is displayed as HTML. Other possibilities include displaying user input inside JavaScript or CSS.\n# **Check the encoding functions for each context.** PHP includes functions for encoding HTML and XML special characters. PHP does not include encoding functions for other contexts. If your application displays untrusted data in other contexts, you will need to write your own encoding functions or use a third-party encoding library, such as OWASP ESAPI. Identify these functions within your application and take note if they are not present.\n# **Identify functions that display untrusted user data.** For each instance of untrusted data being displayed by your application, identify what function outputs that untrusted data. Make a list of these functions and note the code that is directly responsible for displaying untrusted data.\n# **Examine the functions that display untrusted user data.** Focus on the code that is directly responsible for displaying untrusted data. Make sure that all untrusted data is encoded before being displayed. Make sure that data is encoded using the correct encoding method.\n\n\n==How to Fix==\n\nTo encode PHP input included in output:\n\n# **Identify all pages that display user entered data.** Enumerate all the pages used by the application. Make a list of all the pages that display data that comes from untrusted sources.\n# **Identify all user input that is displayed in HTML contexts.** For each page that displays untrusted data, make a list of all untrusted data that is displayed and the context in which it is displayed. Most commonly, untrusted data is displayed as HTML. Other possibilities include displaying user input inside JavaScript or CSS.\n# **Implement encoding functions for corresponding contexts.** PHP has a function for encoding HTML special characters, called //htmlspecialchars//. PHP does not have encoding functions for data being displayed inside JavaScript and CSS contexts. If your application displays data in contexts other than plain HTML, you will need to write your own encoding functions or use third-party ones. It is recommended to use a third-party encoding library, such as OWASP ESAPI.\n# **Identify functions that display untrusted user data.** For each instance of untrusted data being displayed by your application, identify what function outputs that untrusted data. Make a list of these functions and note the code that is directly responsible for displaying untrusted data.\n# **Add calls to encoding functions to functions that display untrusted data.** Add calls to encoding functions in a way that all untrusted data is encoded before being displayed. Make sure that output data is encoded correctly for its respective context.\n\n==Additional Resources==\n\n* For more information about //htmlspecialchars//, see http://php.net/manual/en/function.htmlspecialchars.php\n"
        ]
      }
    ]
  }
}