{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000008d3865"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000008d3865,d7153654-8ff1-43bb-af71-09324f5bff91,"
        ],
        "Library_Id": [
          "b6f408c5-6e6e-4bc0-90a5-0bb10becc2ce"
        ],
        "Title": [
          "Do Not Reference Freed Objects"
        ],
        "Category": [
          "Memory Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "iOS"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Reference Freed Objects"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "WikiText"
        },
        "Data": [
          "==Applies To==\n\n* All iOS applications\n\n==What to Do==\n\nWrite code in a way that guarantees that pointers are not used after memory that they point to has been deallocated.\n\n==Why==\n\nAccessing memory that has been deallocated may result in an exploitable vulnerability. This type of vulnerability is called a \"dangling pointer vulnerability\". The deallocated memory is accessed via a pointer that has been used to free the memory earlier - this pointer is the \"dangling pointer\".\n\n==How==\n\nWrite code in such a way that pointers cannot be used after memory that they point to has been deallocated. One way to do this is to deallocate memory at the end of functions, so that there is no code that accesses memory after it has been deallocated. Perform the following actions to assure that deallocated memory is not accessed:\n\n# **Search for deallocation code.** Review code to find all places where memory is being deallocated.\n# **Move deallocation code.** Place deallocation code right before exit points of the function. Set pointers to null. Make sure that deallocated pointers are not being used elsewhere in the application.\n\n==Memory Management Guidelines==\n* [[00000000-0000-0000-0000-000000112fc5|Compile Applications with Stack Cookies Enabled]]\n* [[00000000-0000-0000-0000-0000008d3865|Do Not Reference Freed Objects]]\n* [[00000000-0000-0000-0000-000000798d06|Use Automatic Reference Counting]]\n\n==Memory Management Checklists==\n* [[00000000-0000-0000-0000-000000841cc6|Applications Are Compiled with Stack Cookies Enabled]]\n* [[00000000-0000-0000-0000-000000842659|Freed Objects Are Not Referenced]]\n* [[00000000-0000-0000-0000-000000189cf8|Automatic Reference Counting Is Used]]\n"
        ]
      }
    ]
  }
}