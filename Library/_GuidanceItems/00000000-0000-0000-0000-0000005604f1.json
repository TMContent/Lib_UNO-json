{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000005604f1"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000005604f1,42fbb0ba-ef2e-4a4a-a42a-3773408f8d30,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Java Validate XML Data Using a Schema"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Code Example"
        ],
        "DirectLink": [
          "Validate XML Data Using a Schema"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* Java\n\n\n==How==\n\nTo validate XML data using a schema:\n# **Create a //Schema// object.** Use the //SchemaFactory// class to create a //Schema// object.\n# **Create a //SAXParserFactory// object.** The //SAXParserFactory// will be used to create a parser for working with the XML data.\n# **Assign the //Schema// object to the //SAXParserFactory// object.** Use the //setSchema// method to assign the //Schema// object to the //SAXParserFactory// object. This will cause the parser produced by the factory object to use our schema to validate data.\n# **Create a //SAXParser// object.** Use the //SAXParserFactory// object to create a parser. Since a schema has been assigned to the factory, the parser will validate XML data that is parsed against the schema. This parser can then be used to load XML data.\n\n==Problem Example==\n\nThis code does not validate XML data using a schema:\n\n{{{\nprivate void getXMLStream(InputStream inStream, DefaultHandler defHandler) {\n  SAXParserFactory factory = SAXParserFactory.newInstance();\n  try {\n    SAXParser saxParser = factory.newSAXParser();\n    saxParser.parse(inStream, defHandler);\n  } catch (Throwable t) { \n    ...\n  }\n}\n}}}\n\n\n==Solution Example==\n\nThis article is focused entirely on making sure the data is actually validated using a schema, so it is assumed that a schema file //schema.xsd// already exists. The following code validates XML data using the schema:\n\n{{{\nprivate static void getXMLStream(InputStream inStream, DefaultHandler defHandler) \n  throws ParserConfigurationException, SAXException, IOException {\n  try {\n    SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n    sf.setErrorHandler(defHandler);\n    StreamSource ssrc = new StreamSource(new File(\"schema.xsd\"));\n    Schema schema = sf.newSchema(ssrc);\n    SAXParserFactory spf = SAXParserFactory.newInstance();\n    spf.setSchema(schema);\n    SAXParser saxParser = spf.newSAXParser();\n    saxParser.parse(inStream, defHandler);   \n  } catch (Throwable t) { \n    ...\n  }\n} \n}}}"
        ]
      }
    ]
  }
}