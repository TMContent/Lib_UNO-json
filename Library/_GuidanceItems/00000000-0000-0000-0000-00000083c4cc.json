{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000083c4cc"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000083c4cc,06aeed4b-19f3-472b-8638-7fd2a9f655ad,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "Do Not Pass Code to Web Workers to eval()"
        ],
        "Category": [
          "Web Workers"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Pass Code to Web Workers to eval()"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* HTML5\r\n\r\n==What to Do==\r\n\r\nRemove all code that has Web Workers execute stored user data as code.\r\n\r\n==Why==\r\n\r\nPassing code to Web Workers for evaluation might introduce a DOM-based XSS vulnerability. If user data is executed as code by Web Workers, it is possible for an attacker to supply malicious code to be executed in other users' sessions. In such a scenario, Web Workers could be used to perform a denial of service (DoS) attack within the browsers of the target users, or to carry out actions on behalf of the target users within the application. \r\n\r\n==How==\r\n\r\nTo remove all code that has Web Workers execute stored user data as code:\r\n\r\n# **Identify all Web Worker scripts.** Create a spreadsheet to list all the scripts used by Web Workers.\r\n# **Find all code that calls the eval function.** For each script used by Web Workers, create a spreadsheet to list all code that uses the eval function.\r\n# **Examine code that calls the eval function.** Code that calls the eval function should always be examined closely, because it's a dangerous function. Review each call to the eval function to identify whether it executes user-supplied data. Create a spreadsheet of all calls to eval that execute user-supplied data.\r\n# **Implement alternatives.** For each instance where eval is used to execute user-supplied data, consider other ways to implement the same functionality. If there are no other ways, that functionality will probably need to be removed altogether. The risk of DOM-based XSS has to be weighed against the value of this functionality and the decision has to be made by the development team. It is recommended to remove the dangerous functionality.\r\n# **Remove code that executes stored user data.** Go through the spreadsheet of all instances where eval is used to execute user-supplied data and remove the code that makes these dangerous function calls. In some cases, entire features may need to be removed because of this, but usually not.\r\n\r\n==Web Worker Guidelines==\r\n\r\n* [[00000000-0000-0000-0000-00000083c4cc|Do Not Pass Code to Web Workers to eval()]]\r\n* [[00000000-0000-0000-0000-00000006a783|Validate Data Received by Web Workers]]\r\n\r\n==Web Worker Checklist Items==\r\n\r\n* [[00000000-0000-0000-0000-000000392041|Web Workers Do Not eval() Data Pased to Them]]\r\n* [[00000000-0000-0000-0000-0000002f59fd|Data Received by Web Workers Is Validated]]\r\n"
        ]
      }
    ]
  }
}