{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000007e38aa"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000007e38aa,4eeaf2ff-947a-42ea-bb32-e58e27a0ac46,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Parameterized Methods Are Used for Database Access"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Android"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Parameterized Methods Are Used for Database Access"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "WikiText"
        },
        "Data": [
          "==Applies To==\n\n* Android applications that use SQL databases.\n\n==What to Check For==\n\nVerify that parameterized methods are used for database access.\n\n==Why==\n\nUsing parameterized query methods for database access prevents SQL injection vulnerabilities.\n\n==How to Check==\n\nTo verify that parameterized methods are used for database access:\n\n# **Identify all code that executes SQL queries.** Review application code to find all queries that are executed by the application and the code that executes them.\n# **Verify that parameterized APIs are used to execute SQL queries.** Make sure that data is passed to queries as parameters. Make sure that data, especially untrusted data, is never concatenated with the query strings and then executed.\n\n==How to Fix==\n\nThe Android API includes parameterized functions for querying SQLite databases. Avoid using the rawQuery method, because it may be used in a manner that introduces SQL injection vulnerabilities, by including untrusted input in the SQL query string.\n\nUse the following method for SELECT statements:\n\n*//query//\n\nUse the following methods for INSERT statements:\n\n*//insert//\n*//insertOrThrow//\n*//insertWithOnConflict//\n\nUse the following methods for UPDATE statements:\n\n*//update//\n*//updateWithOnConflict//\n\nUse the following method for DELETE statements:\n\n*//delete//\n\nIf your application uses some other API, please make sure that it uses parameterized methods for database access.\n\n\n==Additional Resources==\n\n*For more information about the Android SQLite API, please see http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html\n"
        ]
      }
    ]
  }
}