{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000097f1a4"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000097f1a4,9fd1ed5c-5b26-4bb7-86f2-8a65fc62f1ab,"
        ],
        "Library_Id": [
          "c4b9cb6a-4561-4451-9b6c-4e59d73584f6"
        ],
        "Title": [
          "Proper Thread Safety of HttpSession Object Access Is Assured"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Proper Thread Safety of HttpSession Object Access Is Assured"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* Java\n\n\n==What to Check For==\n\nIdentify code that makes use of the //HttpSession// object and look for blocks of code that make assumptions about session values.\n\n\n==Why==\n\nImproper handling of //HttpSession// objects can lead to race conditions and concurrency issues.\n\n\n==How to Check==\n\nTo ensure proper thread safety of //HttpSession// objects:\n\n# **Identify all //HttpSession// objects that may be modified by multiple threads.** Find all code that modifies //HttpSession// objects, which may be accessed by multiple threads. One approach is to search code for the //HttpSession// keyword and then trace each //HttpSession// object throughout the code.\n# **Follow the progress of data values throughout a session and consider values that might be changed from another thread.** Make special note of atomic operations that must be executed together.\n\n\n==How to Fix==\n\nTo ensure thread safety:\n\n# **Identify all //HttpSession// objects that may be modified by multiple threads.** Find all code that modifies //HttpSession// objects, which may be accessed by multiple threads. One approach is to search code for the //HttpSession// keyword and then trace each //HttpSession// object throughout the code.\n# **Use immutable objects as much as possible.** Using immutable objects is a sound practice for avoiding concurrency issues and should be used as much as possible. The specifics of using immutable objects are different for different applications.\n# **Use class methods and local variables data handling.** For each piece of code that modifies //HttpSession// objects, use thread-safe class methods and local variables if possible. \n# **Synchronize critical sections that must be executed as a single operation.** For complex operations on //HttpSession// objects, make sure that critical sections are synchronized.\n\n\n==Problem Example==\n\nA shopping cart has a Pay Now button that finalizes a purchase and charges the customerâ€™s credit card. An application that is not thread safe may allow for a user to double-click the button and charge the customer twice for the same transaction.\n\n\n==Solution Example==\n\nSynchronized critical sections or immutable objects both can help prevent concurrency issues that might lead to simultaneous credit card transactions.  \n\n\n==Additional Resources==\n\n* For more information about using immutable objects, see http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html\n\n"
        ]
      }
    ]
  }
}