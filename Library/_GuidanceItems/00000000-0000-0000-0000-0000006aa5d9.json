{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000006aa5d9"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000006aa5d9,eb9d497d-23ad-4521-b8e1-aeb2339525be,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Disable Self-signed TLS Certificates"
        ],
        "Category": [
          "Communication Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "iOS"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "Disable Self-signed SSL Certificates"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\n\n* iOS applications that send or receive sensitive data over the network.\n\n==What to Do==\n\nDisable the use of self-signed TLS certificates.\n\n==Why==\n\nAllowing the use of self-signed TLS certificates enables some types of man-in-the-middle attacks.\n\n==How==\n\nSelf-signed TLS certificates are not allowed by default. Do not allow them. Avoid using the //allowsAnyHTTPSCertificateForHost// method in production releases, because it allows self-signed TLS certificates. Do not use the //continueWithoutCredentialForAuthenticationChallenge// selector within the //didReceiveAuthenticationChallenge// delegate method of //NSURLConnection// objects, because it enables self-signed TLS certificates.\n"
        ]
      }
    ]
  }
}