{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-000000736a21"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-000000736a21,fc53bc00-ad07-4652-8ef1-1b646ba12649,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Check the Origin Attribute of WebSocket Messages"
        ],
        "Category": [
          "WebSockets"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Check the Origin Attribute of WebSocket Messages"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* HTML5 and JavaScript\r\n\r\n==What to Do==\r\n\r\nWhen processing events such as {{{onmessage}}} using WebSocket, always check the origin attribute to make sure the message is coming from the source you expect.\r\n\r\n==Why==\r\n\r\nIf you do not check the origin of the MessageEvent to confirm that it is coming from a safe domain, your application may be open to attacks. These attacks may be in the form of messages sent from other servers and may contain messages harmful to your application.\r\n\r\n==When==\r\n\r\nAlways verify the origin attribute of the incoming message.\r\n\r\n==How==\r\n\r\nThe technique for checking the origin attribute depends on whether you would like to verify a specific server or a specific domain. \r\n\r\n# **If the origin is expected to be a specific server, check it against the server name.** Use the JavaScript {{{===}}} operator to verify equality between the expected server name and the value of the origin attribute. \r\n# **If the origin is expected to be from one or more domains, check it against the domain name(s).** Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.\r\n# **Identify the allowed domains from which a message will be accepted.** Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.\r\n# **Create a function for validating the domains to centralize the logic.** Creating a function also allows you to test the code more easily.\r\n# **Check the length of the domain before validating it.** Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS. \r\n# **Build the regular expression for validating your domains.** The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035: {{{ ^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$ }}}. This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression {{{([a-z][-a-z0-9]+[a-z0-9]\\.)*}}} will match one or more host names, so {{{ http://myserver.example.com }}} as well as {{{ http://www.mysubdomain.example.com }}} will match.\r\n# **Inside the new function, create a regular expression object with your expression.** Pass the expression to the RegExp constructor, as shown here: {{{ var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/); }}}\r\n# **Use the test() method of the RegExp object to verify that the origin attribute matches.** The test() method can be used like this: {{{ return pattern.test(origin); }}}\r\n# **Call the function from your {{{onmessage}}} event handler.** Pass the value of the origin attribute to your function: {{{ webSocket.onmessage = function(event) ... }}}\r\n# **Test thoroughly.** Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation.\r\n\r\n==Problem Example==\r\n\r\nThe following code handles the event message without checking the origin attribute. In this example, the message could be sent from almost anywhere, including an attacker sending malicious content:\r\n\r\n{{{\r\n\r\nvar socket = new WebSocket(\"ws://echo.websocket.org\");\r\n\r\nsocket.onmessage = function(event) {\r\nvar mydiv = document.getElementById(\"div1\");\r\nmydiv.innerHTML = event.data;\r\n}\r\n\r\n}}}\r\n\r\n\\\\\r\n==Solution Example==\r\n\r\nThe following code properly checks the origin attribute using a custom function that verifies that the message has been sent from an expected source:\r\n\r\n{{{\r\n\r\nfunction isOriginValid(origin) {\r\nvar pattern = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);\r\n\treturn pattern.test(origin);\r\n}\r\nvar socket = new WebSocket(\"ws://echo.websocket.org\");\r\n\r\nsocket.onmessage = function(event) {\r\n\tif (isOriginValid(event.origin)) {\r\n\tvar mydiv = document.getElementById(\"div1\");\r\n\tmydiv.innerHTML = event.data;\r\n}\r\n\r\n}}}\r\n\r\nThe expression in the {{{isOriginValid()}}} method ensures that the origin string starts with {{{ http:// }}} or {{{ https:// }}} and ends with example.com, which in this case represents the expected domain.\r\n\r\n\r\n==WebSocket Guidelines==\r\n\r\n* [[00000000-0000-0000-0000-000000869806|Validate Data Coming from WebSockets]]\r\n* [[00000000-0000-0000-0000-00000093dea4|Check the Origin Header in the WebSocket Handshake]]\r\n* [[00000000-0000-0000-0000-0000005f2e4a|Use TLS to Encrypt WebSocket Connections]]\r\n* [[00000000-0000-0000-0000-000000736a21|Check the Origin Attribute of WebSocket Messages]]\r\n* [[00000000-0000-0000-0000-0000005326a8|Use the Latest WebSocket RFC 6455 Standard]]\r\n* [[00000000-0000-0000-0000-00000085bc2f|Do Not Tunnel TCP via WebSockets]]\r\n\r\n==WebSocket Checklist Items==\r\n\r\n* [[00000000-0000-0000-0000-00000086537e|Data Coming from WebSockets Is Validated]]\r\n* [[00000000-0000-0000-0000-00000077e316|The Origin Header in WebSocket Handshake is Checked]]\r\n* [[bd870268-f104-4f6f-ba0d-6628dc34eb2a|TLS is Used to Encrypt WebSocket Connections]]\r\n* [[00000000-0000-0000-0000-0000002f39d7|The Origin Attribute of WebSocket Messages Is Checked]]\r\n* [[18d5564d-00a4-4afe-a853-707269df2566|Latest RFC 6455 Standard is Used]]\r\n* [[00000000-0000-0000-0000-00000091ce5a|TCP Is Not Tunneled via WebSockets]]\r\n"
        ]
      }
    ]
  }
}