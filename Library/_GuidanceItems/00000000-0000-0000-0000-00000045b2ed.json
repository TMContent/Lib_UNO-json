{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-00000045b2ed"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-00000045b2ed,2d305f08-c3e8-4aa6-975e-96aed5ddf9f8,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Parameterized Methods Are Used for Database Access"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "iOS"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Parameterized Methods Are Used for Database Access"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "WikiText"
        },
        "Data": [
          "==Applies To==\n\n* iOS applications that use SQL databases.\n\n==What to Check For==\n\nVerify that parameterized methods are used for database access.\n\n==Why==\n\nUsing parameterized methods for database access helps prevent SQL injection vulnerabilities.\n\n==How to Check==\n\nTo verify that parameterized methods are used for database access:\n\n# **Identify all code that executes SQL queries.** Review application code to find all queries that are executed by the application.\n# **Verify that parameterized APIs are used to execute SQL queries.** Make sure that data is passed to queries as parameters. Make sure that data, especially untrusted data, is never concatenated with the query strings and then executed.\n\n==How to Fix==\n\nTo use parameterized methods for local database access:\n\n# **Identify the APIs used for SQL database access.** The most common library for SQL database access in iOS applications is SQLite.\n# **Identify available parameterized SQL access APIs.** Research the APIs for executing queries provided by the API used in your application and choose ones that separate SQL commands and data. The dangerous APIs are the ones that accept SQL queries as strings - they should be avoided. For SQLite, the statements and the data must first be converted to UTF-8 or UTF-16 character encodings. In SQLite, the way to use parameterized queries is to use prepared statements and pass data as parameters. The //sqlite3_prepare//, //sqlite3_prepare_v2//, //sqlite3_prepare16//, and //sqlite3_prepare16_v2// functions allow creating prepared statements. After a statement is prepared, variables are bound to it using //sqlite3_bind_*// functions. After variables have been bound, the query is executed using the //sqlite3_step// function as many times as necessary to get the full resultant data set - each call to //sqlite3_step// produces one row. The query can be reset by using the //sqlite3_reset// function - this resets the query result pointer to zero, so that //sqlite3_step// would start from the first resultant row again. After database access is complete, the query and its result should be destroyed using the //sqlite3_finalize// function.\n# **Identify code that executes SQL queries.** Examine application code to find code that executes SQL queries.\n# **Use parameterized APIs to execute SQL queries.** Make sure that parameterized queries are used by code that executes SQL queries. Rewrite existing code if necessary or add code that uses parameterized queries to perform database access. \n\nThere is no practical way to access remote SQL databases using native iOS API calls, so the most common way to access remote SQL databases from iOS applications is by writing a Web Service wrapper for the database server. To use parameterized methods for remote database access:\n\n# **Set up a Web Service back-end server.** Choose a platform for deploying the Web Services back-end and configure the server appropriately. \n# **Write the Web Service code.** Implement the necessary Web Services on the platform of your choice.\n# **Use parameterized APIs to execute SQL queries.** When implementing the Web Services, make sure to use parameterized APIs for database access to prevent SQL injection vulnerabilities.\n# **Connect the application to the back-end.** Add code to the iOS application to interact with the back-end. It might be necessary to add some pages for configuring the connection to the back-end, such as setting the URL of the Web Services and the authentication credentials.\n\n"
        ]
      }
    ]
  }
}