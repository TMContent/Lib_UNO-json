{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-2095669178",
      "Content_Hash": "-1621311366"
    },
    "Metadata": [
      {
        "Id": [
          "b8c5a48b-1d43-4563-890a-847610df7da6"
        ],
        "Id_History": [
          "b8c5a48b-1d43-4563-890a-847610df7da6,aa53cdf9-19b0-42ce-810e-5b437686d1ff,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Authorize Users Against the ASP.Net Role Provider"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Authorize Users Against the ASP.Net Role Provider"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>If you use windows groups for authorization, consider using the ASP.NET Role Provider with the <strong>AspNetWindowsTokenRoleProvider </strong>name. This allows you to separate the design of the authorization from the implementation inside your service. If you decide to change the role provider, it will not affect the code needed to perform the authorization. Also consider using imperative checks using the role manager API instead of performing authorization checks with <strong>WindowsPrincipal.IsInrole</strong>. </p>\r\n  <p>Use the following steps to declaratively authorize users with the ASP.NET role provider:</p>\r\n  <ol>\r\n    <li>Configure the SQL Role provider in the service app.config or web.config file as follows:<ol><pre>  &lt;system.web&gt;<br />    &lt;&#33;-- Configure the Sql Role Provider --&gt;<br />    &lt;roleManager enabled =\"true\" <br />                 defaultProvider =\"SqlRoleProvider\" &gt;<br />      &lt;providers&gt;<br />        &lt;add name =\"SqlRoleProvider\" <br />             type=\"System.Web.Security.SqlRoleProvider\" <br />             connectionStringName=\"SqlConn\" <br />             applicationName=\"MembershipAndRoleProviderSample\"/&gt;<br />      &lt;/providers&gt;<br />    &lt;/roleManager&gt;<br />  &lt;/system.web&gt;</pre></ol><li>Configure the ASP.NET role provider to use roles that are stored in the SQL Role provider database:<ol><pre>    &lt;behaviors&gt;<br />      &lt;serviceBehaviors&gt;<br />        &lt;behavior name=\"CalculatorServiceBehavior\"&gt;<br />          &lt;&#33;-- Configure role based authorization to use the Role Provider --&gt;<br />          &lt;serviceAuthorization principalPermissionMode =\"UseAspNetRoles\"<br />                                roleProviderName =\"SqlRoleProvider\" /&gt;<br />          &lt;serviceCredentials&gt;<br />            &lt;&#33;-- Configure user name authentication to use the Membership Provider --&gt;<br />            &lt;userNameAuthentication userNamePasswordValidationMode =\"MembershipProvider\" <br />                                    membershipProviderName =\"SqlMembershipProvider\"/&gt;<br />        &lt;/behavior&gt;<br />      &lt;/serviceBehaviors&gt;<br />    &lt;/behaviors&gt;</pre></ol><li>Authorize windows groups declaratively by adding the PrincipalPermission attribute above each service method that requires authorization. Specify the Windows user group required to access the method in the Role field.<ol><pre>&#91;PrincipalPermission(SecurityAction.Demand, Role = \"accounting\")&#93;<br />public double Add(double a, double b)<br />&#123;<br />    return a &#43; b;<br />&#125;</pre></ol></li></li></li>\r\n  </ol>\r\n  <p>Use the following steps to imperatively authorize users with the ASP.NET role provider:</p>\r\n  <ol>\r\n    <li>Configure the SQL Role provider in the service app.config or web.config file as follows:<ol><pre>  &lt;system.web&gt;<br />    &lt;&#33;-- Configure the Sql Role Provider --&gt;<br />    &lt;roleManager enabled =\"true\" <br />                 defaultProvider =\"SqlRoleProvider\" &gt;<br />      &lt;providers&gt;<br />        &lt;add name =\"SqlRoleProvider\" <br />             type=\"System.Web.Security.SqlRoleProvider\" <br />             connectionStringName=\"SqlConn\" <br />             applicationName=\"MembershipAndRoleProviderSample\"/&gt;<br />      &lt;/providers&gt;<br />    &lt;/roleManager&gt;<br />  &lt;/system.web&gt;</pre></ol><li>Configure the ASP.NET role provider to use roles that are stored in the SQL Role provider database:<ol><pre>    &lt;behaviors&gt;<br />      &lt;serviceBehaviors&gt;<br />        &lt;behavior name=\"CalculatorServiceBehavior\"&gt;<br />          &lt;&#33;-- Configure role based authorization to use the Role Provider --&gt;<br />          &lt;serviceAuthorization principalPermissionMode =\"UseAspNetRoles\"<br />                                roleProviderName =\"SqlRoleProvider\" /&gt;<br />          &lt;serviceCredentials&gt;<br />            &lt;&#33;-- Configure user name authentication to use the Membership Provider --&gt;<br />            &lt;userNameAuthentication userNamePasswordValidationMode =\"MembershipProvider\" <br />                                    membershipProviderName =\"SqlMembershipProvider\"/&gt;<br />        &lt;/behavior&gt;<br />      &lt;/serviceBehaviors&gt;<br />    &lt;/behaviors&gt;</pre></ol><li>Authorize windows groups imperatively by using the Roles.IsUserInRole method to authorize the client. The role can be contained in a variable and changed dynamically if needed, as shown below: <ol><pre>  string RequiredGroup = &#8220;Administrators&#8221;;<br />  try<br />  &#123;<br />    if (&#33;Roles.IsUserInRole(User.Identity.Name, &#8220;RequiredGroup&#8221;))<br />    &#123;<br />      Msg.Text = \"You are not authorized to view user roles.\";<br />      UsersListBox.Visible = false;<br />      return;<br />    &#125;<br />  &#125;<br />  catch (HttpException e)<br />  &#123;<br />    Msg.Text = \"There is no current logged on user. Role membership cannot be verified.\";<br />    return;<br />  &#125;<br /></pre></ol></li></li></li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on the ASP.NET role provider, &#8220;How to: Use the ASP.NET Role Provider with a Service&#8221; at <a href=\"http://msdn.microsoft.com/en-us/library/aa702542.aspx\">http://msdn.microsoft.com/en-us/library/aa702542.aspx</a><li>For Roles.IsUserInRole method information, see <a href=\"http://msdn.microsoft.com/en-us/library/4z6b5d42.aspx\">http://msdn.microsoft.com/en-us/library/4z6b5d42.aspx</a><li>For more information on authorization, see &#8220;Authorization&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms733071.aspx\">http://msdn2.microsoft.com/en-us/library/ms733071.aspx</a><li>For authorization Q&A, see the Authorization section of &#8220;WCF 3.5 Questions and Answers &#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home</a><br /></li></li></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}