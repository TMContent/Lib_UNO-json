{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-61917851",
      "Content_Hash": "-1570079610"
    },
    "Metadata": [
      {
        "Id": [
          "65b8d766-709b-449a-aa97-010856045efc"
        ],
        "Id_History": [
          "65b8d766-709b-449a-aa97-010856045efc,1752a85c-c767-4d9f-84cd-db3bb20baafd,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] How to Create a Service Account for an ASP.NET Application"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Create a Service Account for an ASP.NET Application"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASP.NET 3.5"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Internet Information Services (IIS) version 6.0 or later&amp;nbsp;<li>Microsoft Windows Server 2003 or later&amp;nbsp;operating system </li></li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>This How to shows you how to create and configure a custom least-privileged service account to run an ASP.NET Web application. By default, an ASP.NET application on Microsoft Windows Server 2003 pr later and IIS runs using the built-in Network Service account. In production environments, you usually run your application using a custom service account. By using a custom service account, you can audit and authorize your application separately from others, and your application is protected from any changes made to the privileges or permissions associated with the Network Service account. To use a custom service account, you must configure the account by running the Aspnet_regiis.exe utility with the <b>-ga</b> switch, and then configure your application to run in a custom application pool that uses the custom account's identity.</p>\r\n  <h1>Contents</h1>\r\n  <ul>\r\n    <li>\r\n      <div>Objectives</div>\r\n      <li>\r\n        <div>Overview</div>\r\n        <li>\r\n          <div>Guidelines</div>\r\n          <li>\r\n            <div>Summary of Steps</div>\r\n            <li>\r\n              <div>Step 1. Create a New User Account</div>\r\n              <li>\r\n                <div>Step 2. Assign ASP.NET Permissions to the New Account</div>\r\n                <li>\r\n                  <div>Step 3. Create a Test ASP.NET Application</div>\r\n                  <li>\r\n                    <div>Step 4. Create an Application Pool with a Custom Identity</div>\r\n                    <li>\r\n                      <div>Step 5. Configure Your Application to Run in the New Application Pool</div>\r\n                      <li>\r\n                        <div>Step 6. Test the Custom Service Account</div>\r\n                        <li>\r\n                          <div>Custom Account vs. Network Service</div>\r\n                          <li>\r\n                            <div>Additional Considerations</div>\r\n                            <li>\r\n                              <div>Additional Resources</div>\r\n                            </li>\r\n                          </li>\r\n                        </li>\r\n                      </li>\r\n                    </li>\r\n                  </li>\r\n                </li>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Create a least privileged custom account. <li>Assign the necessary privileges and permissions to the custom account. <li>Configure an application to run using a custom service account. <li>Confirm the identity that your application uses to run. </li></li></li></li>\r\n  </ul>\r\n  <h1>Overview</h1>\r\n  <p>By default, an ASP.NET application on Windows Server 2003 or later and IIS runs in the ASP.NET&amp;nbsp;application pool. This application pool uses the built-in Network Service account. This account is least privileged, although it does have network credentials which means that you can use it to authenticate against network servers.</p>\r\n  <p>The following scenarios may prevent you from using a network service account or a custom domain-level service account: </p>\r\n  <ul>\r\n    <li>Your Web server is not in a domain. <li>Your Web server and downstream remote server are in separate domains with no trust relationship. <li>Your Web server and downstream remote server are separated by a firewall and you cannot open the ports required for NTLM or Kerberos authentication. </li></li></li>\r\n  </ul>\r\n  <p>In the above cases you can use mirrored local accounts. With this approach, you use two local accounts with the same user name and password on both servers. Alternatively, you can use SQL authentication, although this is not recommended because it offers weaker security than Windows authentication offers.</p>\r\n  <p>By using a custom service account and a dedicated application pool, you gain a number of advantages: </p>\r\n  <ul>\r\n    <li>You help to isolate applications from one another. <li>You can establish different access controls for each application on local and remote resources. For example, other applications cannot access your application's databases if access is restricted to your application's account. <li>You can use Windows auditing to track the activity of the application separately from other applications. <li>You ensure that any accidental or deliberate changes to the access controls or permissions associated with the general purpose Network Service account do not affect your application. </li></li></li></li>\r\n  </ul>\r\n  <h1>Guidelines</h1>\r\n  <p>When you create a custom service account to run your application: </p>\r\n  <ul>\r\n    <li>Adhere to the principle of least privilege, and grant the account the minimum set of privileges and permissions required. <li>Avoid running ASP.NET using the SYSTEM account. <li>Avoid granting your application's account the <b>Act</b><b>as part of the operating system</b> user right. </li></li></li>\r\n  </ul>\r\n  <blockquote>\r\n    <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;An<b></b>ASP.NET application does not impersonate by default. Therefore, access controls on resources must be configured for your application's identity, and not for end user accounts or user groups.</blockquote>\r\n  <h1>Summary of Steps</h1>\r\n  <p>Follow these steps to create and test a dedicated application pool that uses a custom service account identity: </p>\r\n  <ul>\r\n    <li>Step 1. Create a new user account. <li>Step 2. Assign ASP.NET permissions to the new account. <li>Step 3. Assign minimum privileges to the new account. <li>Step 4. Create a test ASP.NET application. <li>Step 5. Create an application pool with a custom identity. <li>Step 6. Configure your application to run in the new application pool. <li>Step 7. Test the custom service account. </li></li></li></li></li></li></li>\r\n  </ul>\r\n  <h1>Step 1. Create a New User Account </h1>\r\n  <p>Start by creating a new Windows account.</p>\r\n  <p>\r\n    <b>To create a new account</b>\r\n  </p>\r\n  <ol>\r\n    <li>Create a new local or domain user account. Create a local account by using the Computer Management tool in the Control Panel. Create a domain account by using the Active Directory Users and Computers tool in the Control Panel. <li>Give the account an appropriate name, for example, CustomASP<b>.</b> Clear the <b>User must change password at next logon</b> and select <b>Password never expires</b>. <blockquote><b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;Make sure you use a strong password for the account. Strong passwords should include at least seven characters and should bee a mixture of uppercase and lowercase letters, numbers, and other characters such as &amp;#42;, ?, or &amp;#36;.</blockquote></li></li>\r\n  </ol>\r\n  <h1>Step 2. Assign ASP.NET Permissions to the New Account</h1>\r\n  <p>When you use a custom service account, the account needs appropriate permissions to access the IIS metabase and the file system folders that are used by ASP.NET. ASP.NET provides the Aspnet_regiis.exe utility, which allows you to grant appropriate permissions.</p>\r\n  <p>\r\n    <b>To assign ASP.NET permissions to the new account</b>\r\n  </p>\r\n  <ol>\r\n    <li>Run the following command from a command window. <p><b>aspnet_regiis -ga <i>MachineName</i>\\<i>AccountName</i></b></p></li>\r\n  </ol>\r\n  <blockquote>Where <i>MachineName</i> is the name of your server or the domain name if you are using a domain account, and <i>AccountName</i> is the name of your custom account.</blockquote>\r\n  <ol>\r\n    <li>Review the permissions required by your custom account. When you run Aspnet_regiis.exe with the <b>-ga</b> switch, the command grants the following rights to the account: <ul><li>Access to the IIS Metabase <li>Permission to write to the &amp;#37;Windir&amp;#37;\\Microsoft.NET\\Framework\\<i>version</i>\\Temporary ASP.NET Files folder </li></li></ul><p>The account is also a member of the local <b>Users</b> group; therefore, it has read access to the \\Inetpub directory tree (these directories have an ACL that grants read access to the <b>Users</b> group). </p><blockquote><b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;The <b>-ga</b> switch makes a number of global changes. If you want to restrict access to specific folders, you need to manually adjust the ACLs on those folders.</blockquote></li>\r\n  </ol>\r\n  <h1>Step 3. Create a Test ASP.NET Application</h1>\r\n  <p>In this step, you create a test ASP.NET application with a single page that displays the Windows identity used to run the application.</p>\r\n  <p>\r\n    <b>To create the test application</b>\r\n  </p>\r\n  <ol>\r\n    <li>Create a new Web application in Visual Studio .NET called <b>TestCustomPool</b>. <li>Add the following code in the Default.aspx page load event handler. <div><pre>using System.Security.Principal;<br />...&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />WindowsIdentity id = WindowsIdentity.GetCurrent();<br />Response.Write(\"&lt;b&gt;Windows Identity Check&lt;/b&gt;&lt;br&gt;\");<br />Response.Write(\"Name: \" &amp;#43; id.Name &amp;#43; \"&lt;br&gt;\");  </pre></div><li>Compile the test application and run it. Note the output, which shows that the application currently runs under the default Network Service account. <p>The browser should display the following text: </p><div><div></div><div><pre>&amp;nbsp;Windows Identity Check<br />Name: NT AUTHORITY\\NETWORK SERVICE<br />&amp;nbsp; </pre></div></div></li></li></li>\r\n  </ol>\r\n  <h1>Step 4. Create an Application Pool with a Custom Identity</h1>\r\n  <p>In this step, you create a new application pool to run your ASP.NET application, and you configure it to use the custom service that you created earlier.</p>\r\n  <p>\r\n    <b>To create an application pool that runs using a custom service account</b>\r\n  </p>\r\n  <ol>\r\n    <li>Start Internet Information Services (IIS) Manager. <li>In the left pane, expand the local computer and then expand <b>Application Pools</b>. <li>Right-click the <b>Application Pools</b> node, click <b>New</b>, and then click <b>Application Pool</b>. <li>In the <b>Add New Application Pool</b> dialog box, type <b>TestPool</b> in the <b>Application Pool ID</b> text box. Leave the <b>Use default settings for new application pool</b> option selected, and click <b>OK</b>. This creates a new application pool called <b>TestPool</b>. <li>Right-click the new application pool. and click <b>Properties</b>. <li>Click the <b>Identity</b> tab. <li>In the <b>Application pool identity</b> section, click <b>Configurable</b>. <li>Type <b>CustomASP</b> in the <b>User name</b> text box. <li>Type the password for the <b>CustomASP</b> account in the <b>Password</b> text box, and click <b>Apply</b>. <li>The <b>Confirm Password</b> dialog box appears. Type the password again, click <b>OK</b>, and then click <b>OK</b> again. </li></li></li></li></li></li></li></li></li></li>\r\n  </ol>\r\n  <h1>Step 5. Configure Your Application to Run in the New Application Pool</h1>\r\n  <p>In this step, you configure your test ASP.NET application to run in the new application pool. This ensures that it runs using the custom service account identity. </p>\r\n  <ol>\r\n    <li>Return to the Internet Information Services (IIS) Manager. <li>Locate your test application, <b>TestCustomPool</b>, in the left pane of the IIS Manager console. <li>Right-click <b>TestCustomPool</b> and click <b>Properties</b>. <li>On the <b>Directory</b> tab in the <b>Properties</b> dialog box, in the <b>Application Settings</b> section, select <b>TestPool</b> from the <b>Application pool</b> list, and then click <b>OK</b>. </li></li></li></li>\r\n  </ol>\r\n  <h1>Step 6. Test the Custom Service Account</h1>\r\n  <p>Browse to the Default.aspx page of your test application. It should display the name of your custom service account, confirming that your application is running using this identity. The browser should display the following:</p>\r\n  <div>\r\n    <pre>Windows Identity Check<br />Name: &lt;ServerName&gt;\\CustomASP  </pre>\r\n  </div>\r\n  <p>Where &lt;<i>ServerName</i>&gt; is the name of your server.</p>\r\n  <h1>Custom Account vs. Network Service</h1>\r\n  <p>If you need your application to use a specific identity to access resources, you have two main choices. You can use a custom application pool identity, or run using the default Network Service identity and then call the <b>LogonUser</b> API to create a Windows identity that you can then impersonate in the specific methods that require an alternate identity. There are advantages and disadvantages to both approaches.</p>\r\n  <h2>Using a Custom Account</h2>\r\n  <p>With this approach, you run your application in an application pool configured to run using a specific Windows identity.</p>\r\n  <h3>Advantages</h3>\r\n  <p>Using a custom account has the following advantages: </p>\r\n  <ul>\r\n    <li>The account credentials are stored in the IIS metabase, which is readable only by the SYSTEM account and members of the Administrators group. <li>Your application does not need to manage thread security context, which can be difficult to do correctly. Mistakes can lead to handle leaks and lost impersonation tokens because of asynchronous thread switches. </li></li>\r\n  </ul>\r\n  <h3>Disadvantages</h3>\r\n  <p>Using a custom account has the following disadvantages: </p>\r\n  <ul>\r\n    <li>When you change the identity of your application pool to use a domain account instead of a machine account, you lose the ability to perform Kerberos authentication until a domain administrator runs the Setspn utility to create a service principal name (SPN) for the domain account. If you have multiple applications on the same server that use separate domain identities and they need to use Kerberos authentication, then you need to use separate Domain Name System (DNS) names for each application. <li>In addition to adding the custom account to the IIS_WPG group, it is likely that you will need to configure additional file system ACLs for the custom account. <li>You have to manage account lifetimes and credentials on each Web server in a farm. <li>If the operation that your Web application needs to perform using a custom identity requires extended privileges, ;you need to run the entire Web application with these privileges, and that means that you have a great deal of code to run. </li></li></li></li>\r\n  </ul>\r\n  <h2>Using Network Service</h2>\r\n  <p>With this approach, you run your application using the least privileged Network Service account. However, when your application needs to access resources or perform operations using a specific identity, you call the <b>LogonUser</b> API to create a new Windows identity. You then impersonate that identity only in those methods that require it.</p>\r\n  <h3>Advantages</h3>\r\n  <p>Using the Network Service account has the following advantages: </p>\r\n  <ul>\r\n    <li>You can discretely limit elevation of privilege to those parts of the application that need it. If an attacker compromises the application, the attacker needs to do more work to exploit the extended privileges. <li>No reconfiguration of file system ACLs are required. <li>Account credential storage could be centrally located; for example, in a database with restricted access to the machine identity or similar, or in a Web.config file protected using shared RSA keys. This provides an easier Web farm rollout if the farm belongs to a domain (ideally, this should be a restricted domain in the perimeter network), and domain accounts are used when you call the <b>LogonUser </b>API. </li></li></li>\r\n  </ul>\r\n  <h3>Disadvantages</h3>\r\n  <p>Using the Network Service account has the following disadvantages: </p>\r\n  <ul>\r\n    <li>This approach leads to additional complexity in managing thread security context. This is especially difficult if your application uses asynchronous causalities or has many calls from different places. <li>Credentials must be stored and read by your application. Therefore, an attacker who compromises your application can eventually obtain those credentials. <li><b>LogonUser</b> should be avoided on Windows 2000, because calls to the <b>LogonUser</b> API require that you grant your process identity the <b>Act as part of the operating system</b> powerful user right. This user right is not required to call <b>LogonUser</b> on Windows Server 2003 and later. </li></li></li>\r\n  </ul>\r\n  <h1>Additional Considerations</h1>\r\n  <p>Other issues to consider when creating a service account to run an ASP.NET application include: </p>\r\n  <ul>\r\n    <li>\r\n      <b>Creating service principal names (SPNs) for domain accounts</b>\r\n      <li>\r\n        <b>Using IIS 5.0 isolation mode</b>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h2>Creating Service Principal Names (SPNs) for Domain Accounts</h2>\r\n  <p>When you switch from using a machine account, such as Network Service, to a domain account and if your application uses Kerberos authentication to authenticate its clients, Kerberos authentication will stop working unless you have a service principal name for the domain account registered in Microsoft&amp;#174; Active Directory&amp;#174; directory service.</p>\r\n  <p>\r\n    <b>To create an SPN for a domain account</b>\r\n  </p>\r\n  <ol>\r\n    <li>Install the Windows Server tools from the Windows Server CD. <li>From a command prompt, run the Setspn tool as follows: <p><b>setspn -A HTTP/webservername domain\\customAccountName</b></p><p><b>setspn -A HTTP/webservername.fullyqualifieddomainname domain\\customAccountName</b></p></li></li>\r\n  </ol>\r\n  <p>The tool creates an SPN for the custom domain account (domain\\customAccountName) and associates the account with the HTTP service on the specified Web server. By running the command twice as shown above you can associate the account with the NetBIOS server name and the fully qualified domain name of the server. This ensures that the SPN is established correctly even if your environment does not consistently use fully qualified domain names.</p>\r\n  <blockquote>\r\n    <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;You cannot have multiple Web applications with the same host name if you want them to have multiple identities. This is an HTTP limitation, not a Kerberos limitation. The workaround is to have multiple DNS names for the same host, and start the URLs for each Web application with a different DNS name. For example, you would use http://app1 and http://app2 rather than http://site/app1 and http://site/app2.</blockquote>\r\n  <h2>Using IIS 5.0 Isolation Mode</h2>\r\n  <p>If you configure your IIS server to run in IIS 5.0 isolation mode, then ASP.NET applications run using account credentials defined on the &lt;<b>processModel</b>&gt; element<b></b>in the Machine.config file. With this configuration, ASP.NET applications run in a shared worker process called Aspnet_wp.exe, and they do not use IIS application pools. If you change the account credentials on the &lt;<b>processModel</b>&gt;<b></b>element, you cause all ASP.NET applications on the server to run under the specified account.</p>\r\n  <p>For more information about how to modify the account credentials using the &lt;<b>processModel</b>&gt; element, see How to: Create a Custom Account to Run ASP.NET.</p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}