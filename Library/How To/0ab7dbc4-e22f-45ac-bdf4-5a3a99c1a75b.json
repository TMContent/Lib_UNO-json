{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1638855471",
      "Content_Hash": "363667338"
    },
    "Metadata": [
      {
        "Id": [
          "0ab7dbc4-e22f-45ac-bdf4-5a3a99c1a75b"
        ],
        "Id_History": [
          "0ab7dbc4-e22f-45ac-bdf4-5a3a99c1a75b,7c8a0962-4759-4db6-b482-5076fa1f633c,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Authorize Imperatively If You Use Role Provider"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Authorize Imperatively If You Use Role Provider"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>If you are using role provider you can do imperative checks by calling Roles.isUserInRole. If you are using the AspNetWindowsToken Role Provider, you can use Imperative authorization against Windows roles. Imperative security is useful when the resource to be accessed or action to be performed is not known until run time or when finer-grained access control beyond the level of a code method is required. </p>\r\n  <p>Authorize windows groups or roles that can be SQL or custom roles imperatively by using the Roles.IsUserInRole method to authorize the client. The role can be contained in a variable and changed dynamically if needed, as shown below:</p>\r\n  <pre>string RequiredGroup = \"Administrators\";<br />  try<br />  &#123;<br />    if (&#33;Roles.IsUserInRole(User.Identity.Name, \"RequiredGroup\"))<br />    &#123;<br />      Msg.Text = \"You are not authorized to view user roles.\";<br />      UsersListBox.Visible = false;<br />      return;<br />    &#125;<br />  &#125;<br />catch (HttpException e)<br />  &#123;<br />    Msg.Text = \"There is no current logged on user. Role membership cannot be verified.\";<br />    return;<br />  &#125;<br /></pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on authorization, see &#8220;Authorization&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms733071.aspx\">http://msdn2.microsoft.com/en-us/library/ms733071.aspx</a><li>For Roles.IsUserInRole method information, see <a href=\"http://msdn.microsoft.com/en-us/library/4z6b5d42.aspx\">http://msdn.microsoft.com/en-us/library/4z6b5d42.aspx</a><li>For authorization Guidelines, see the Authorization section of &#8220;WCF 3.5 Guidelines &#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home</a><br /></li></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}