{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "714247924",
      "Content_Hash": "-1975562227"
    },
    "Metadata": [
      {
        "Id": [
          "dea6d53c-e0e6-467e-b211-59b1612f3015"
        ],
        "Id_History": [
          "dea6d53c-e0e6-467e-b211-59b1612f3015,464a35fb-97ee-4c8f-8ea2-d7fa90fe9fa6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for ARP Poisoning Vulnerabilities"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for ARP Poisoning Vulnerabilities"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "Andres De Vivanco"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "html"
        },
        "Data": [
          "<h1>\n    <span>Applies To</span>\n  </h1>\n  <ul>\n    <li>\n      <span>Switched Ethernet and wireless networks</span>\n    </li>\n  </ul>\n  <h1>\n    <span>Summary</span>\n  </h1>\n  <p>\n    <span>ARP (Address Resolution Protocol) enables any computer to query the MAC address of an IP so that packets can reach their final physical destination. When a node wants to communicate with certain IP it checks it has the MAC address for that IP in its APR cache.<span></span>If the node doesn’t have the MAC it broadcasts an ARP request.<span></span>When the destination IP receives the ARP request it sends and ARP reply back to the node containing its MAC address.<span></span>After receiving the ARP reply, the node updates its ARP cache and associates the MAC address with the destination IP.</span>\n  </p>\n  <p>\n    <span>During ARP poisoning, also known as ARP spoofing or ARP cache poisoning, the attacker sends ARP replies to a victim node to poison the victim’s ARP cache. Since the ARP protocol is stateless, the attacker can trivially modify the ARP cache and replace a legitimate MAC address with the attacker MAC address for any target IP in the victim’s cache.<span></span>A successful ARP poisoning attack leads to a Man-in-the Middle conditions since any network traffic form the victim node to the target IP will go through the attacker first.</span>\n  </p>\n  <p>\n    <span>Follow the next steps to test for ARP poisoning bugs:</span>\n  </p>\n  <ul>\n    <li>\n      <span>Step 1: Understand Attack Scenarios</span>\n    </li>\n    <li>\n      <span>Step 2:<span></span>Analyze Causes and Countermeasures</span>\n    </li>\n    <li>\n      <span>Step 3:<span></span>Start Testing and Exploring</span>\n    </li>\n    <li>\n      <span>Step 4:<span></span>Perform Additional Testing</span>\n    </li>\n  </ul>\n  <h1>\n    <span>Step 1:<span></span>Understand Attack Scenarios</span>\n  </h1>\n  <p>\n    <span>The first step in testing ARP poisoning attacks is to understand the basic attack scenarios.<span></span>The following are common ARP poisoning scenarios:</span>\n  </p>\n  <ul>\n    <li>\n      <span>ARP poisoning to sniff network traffic</span>\n    </li>\n    <li>\n      <span>ARP poisoning to execute phishing attack</span>\n    </li>\n  </ul>\n  <h2>\n    <span>\n      ARP poisoning to Sniff Network Traffic\n    </span>\n  </h2>\n  <p>\n    <span>The most common ARP poisoning scenario targets disclosing information by means of sniffing a network communication.<span></span>An attacker selects two victims (A and B) to execute the eavesdropping attack.<span></span>It then sends ARP replies to victim A indicating that the MAC for B’s IP is the attacker’s MAC and ARP replies to victim B indicating that the MAC for A’s IP is the attacker’s MAC. The attacker then sets IP forwarding so that packets are forward from A to B. Finally, the attacker uses a network monitoring tool to view the contents of the packets being exchanged from A to B.</span>\n  </p>\n  <p>\n    <span>In detail:</span>\n  </p>\n  <ol>\n    <li>\n      <span>Attacker selects victim nodes. In many cases the attacker selects the gateway as one of the victims to sniff all traffic between the other victim and the Internet.</span>\n    </li>\n    <li>\n      <span>Attacker sends ARP replies to victim to poison its cache.</span>\n    </li>\n    <li>\n      <span>Attacker sets IP packet forwarding in his box.</span>\n    </li>\n    <li>\n      <span>Attacker waits until ARP caches are poison and starts monitoring the traffic using a network monitoring tool.</span>\n    </li>\n  </ol>\n  <h2>\n    <span>\n      ARP poisoning to Execute Phishing Attack\n    </span>\n  </h2>\n  <p>\n    <span>Another dangerous application of ARP poisoning consists of executing a phishing attack on a network node.<span></span>For example, the attacker poisons a victim’s ARP cache so that when the victim visits its online banking site it receives a phished version of the banking site entirely controlled by the attacker instead of the original site.<span></span>In a switched network this is done by tunneling all DNS responses from the gateway to the victim through the attacker.<span></span>Upon receiving the DNS responses for the bank, the gateway will forward them to the attacker who can modify them at his own will and change the original bank’s IP with an IP corresponding to a phishing site.</span>\n  </p>\n  <p>\n    <span>In detail:</span>\n  </p>\n  <ol>\n    <li>\n      <span>Attacker selects victim.<span></span></span>\n    </li>\n    <li>\n      <span>Attacker sends ARP replies to the victim and the gateway to tell the victim that the MAC of the gateway is the attacker’s MAC, and to tell the gateway that the MAC of the victim is the attacker’s MAC.</span>\n    </li>\n    <li>\n      <span>Attacker waits until ARP caches of the gateway and victim are poisoned.</span>\n    </li>\n    <li>\n      <span>Attacker sets an event to intercept the traffic that comes from the target IP (in the example an online bank).</span>\n    </li>\n    <li>\n      <span>Victim client makes a DNS request to the target IP (through the gateway).</span>\n    </li>\n    <li>\n      <span>Gateway forwards the DNS request and receives a response from the DNS server to resolve the target IP.</span>\n    </li>\n    <li>\n      <span>Gateway forwards the DNS response to the attacker’s MAC.<span></span></span>\n    </li>\n    <li>\n      <span>Attacker modifies the DNS response by changing the original target IP with a phishing IP.</span>\n    </li>\n    <li>\n      <span>Attack forwards modified DNS response to the victim.</span>\n    </li>\n  </ol>\n  <h1>\n    <span>Step 2:<span></span>Analyze Causes and Countermeasures</span>\n  </h1>\n  <p>\n    <span>The next step in testing ARP poisoning bugs is to understand what causes them and how to defend against them.<span></span>This will tell you what networks are susceptible to this attack and what measures to take to protect against them.</span>\n  </p>\n  <h2>\n    <span>\n      ARP Poisoning Causes\n    </span>\n  </h2>\n  <p>\n    <span>Switched Local Area Networks (LANs) are networks that utilize switches instead of hubs.<span></span>Switches are more secure than hubs because they deliver packets to specific nodes rather than acting as broadcasters. As opposed to hub networks, a network node sniffing packets in promiscuous mode will not be able to monitor the traffic between another two nodes in a switched network. ARP Poisoning attacks are specific to switched networks and exist by default. Switched networks work by sending ARP requests and receiving ARP replies.<span></span>The problem and root cause of this bug is that this protocol is stateless. A network node doesn’t check that an ARP reply actually comes as a reply from a legitimate ARP request. It just assumes that all ARP requests are legitimate giving room to ARP poisoning attacks.<span></span></span>\n  </p>\n  <h2>\n    <span>\n      ARP Poisoning Countermeasures\n    </span>\n  </h2>\n  <p>\n    <span>ARP poisoning can’t be totally prevented but can be mitigated.<span></span>A way of doing this is to have static ARP tables so that any changes in the ARP tables are disallowed.<span></span>However, this is impractical in large or rapidly changing networks.<span></span>A more reliable countermeasure consists of proactively denying ARP packets in a switched network. This method known as DHCP Snooping’s ARP Security, or Dynamic ARP Inspection, enforces a network policy that disallows any ARP packets to be forwarded if the source IP (Source Protocol Address field) is not genuine.</span>\n  </p>\n  <p>\n    Additional ARP poisoning detection and prevention tools are available in the Internet.<span></span>For instance, Unix-based <i>Arpwatch </i>sends an email notification as soon as an ARP cache entry changes or Windows-based <i>XArp </i>also offers configuration options to intercept any malicious ARP packets. Finally, it is also possible to configure Network Intrusion Detection Systems (NIDS) to add rules to protect against ARP spoofing attacks.\n  </p>\n  <h1>\n    <span>Step 3:<span></span>Start Testing and Exploring</span>\n  </h1>\n  <p>\n    <span>Now that you’ve learned ARP Poisoning attack scenarios, why are they caused, and how to defend against them, this guides on how to execute ARP poisoning basic test cases.</span>\n  </p>\n  <h2>\n    <span>\n      Test for ARP Poisoning to Sniff Network Traffic\n    </span>\n  </h2>\n  <p>\n    <span>To test for ARP poisoning for network sniffing you will need two boxes (a victim and an attacker) in the same network and a gateway box.<span></span>Follow these steps:</span>\n  </p>\n  <ol>\n    <li>\n      Download and install <i>Cain </i>and <i>Wireshark </i>on the attacker’s box.\n    </li>\n    <li>\n      Run <i>Cain</i>. \n    </li>\n    <li>\n      Click <i>Configure </i>in the menu and select the network interface (can be wireless interface).\n    </li>\n    <li>\n      Click on the <i>Sniffer </i>tab and the <i>Hosts </i>sub tab.\n    </li>\n    <li>\n      <span>Start the sniffer and click the plus (+) sign.</span>\n    </li>\n    <li>\n      <span>Select a range of IPs to scan their MAC (include the target box in the range) and click OK.<span></span>Both the gateway and victim IPs (and their MACs) should appear in the hosts list.</span>\n    </li>\n    <li>\n      Click the <i>ARP poisoning </i>sub tab.\n    </li>\n    <li>\n      <span>Click on the plus sign and add an ARP route from the victim to the gateway.</span>\n    </li>\n    <li>\n      Start ARP poisoning by pressing the <i>ARP </i>button.<span></span>As soon as the victim becomes active its status changes from “<i>idle</i>” to “<i>poisoning</i>”.<span></span>The lower pane starts showing the packets being intercepted.\n    </li>\n    <li>\n      Start <i>Wireshark </i>and start capturing network traffic in the same interface selected in <i>Cain</i>.\n    </li>\n  </ol>\n  <p>\n    <span>Expected results: </span>The first check you can to see if the ARP attack was successful do is running the <i>arp -a</i> command in the victim box (or its Unix equivalent). After executing the attack the entry for the gateway must be different. For instance, in windows running <i>arp -a </i>before the attack gives this:</p>\n  <p>\n    <font face=\"'Courier New'\">C:\\&gt;arp -a<br />Interface: 192.168.1.33 --- 0x8<br />Internet Address      IP Address            Type<br />192.168.1.1           00-13-49-5c-e3-de     dynamic<br />192.168.1.255         ff-ff-ff-ff-ff-ff     static<br />224.0.0.22            01-00-5e-00-00-16     static</font>\n  </p>\n  <p>After the attack the gateway entry in the victim’s ARP cache must be different (it is now equal to the attacker’s MAC):</p>\n  <p>\n    <font face=\"'Courier New'\">C:\\&gt;arp -a<br />Interface: 192.168.1.33 --- 0x8<br />Internet Address      IP Address            Type<br />192.168.1.1           00-1b-77-b2-73-f2     dynamic<br />192.168.1.255         ff-ff-ff-ff-ff-ff     static<br />224.0.0.22            01-00-5e-00-00-16     static</font>\n  </p>\n  <p>A successful ARP poisoning attack will be visible both in <i>Cain </i>and <i>Wireshark</i>. In <i>Cain</i>, the lower pain of the <i>Sniffer-&gt;ARP</i> tab shows the packets being sniffed. You can use <i>Wireshark </i>to see the actual contents of the packets.</p>\n  <p>\n    <b>\n      <i>\n        <span>\n        </span>\n      </i>\n    </b>\n  </p>\n  <h2>\n    <span>\n      Test for ARP Poisoning to Execute Phishing Attack<span>s</span></span>\n  </h2>\n  <p>\n    To test for phishing of a network node we will use <i>Cain</i>’s ARP-DNS feature. The ARP-DNS feature does more than just sniffing network packets.<span></span>It modifies the contents of any DNS reply to the victim and replaces the IP of the target DNS domain with the attacker’s IP.<span></span>Follow these steps to execute the test case:\n  </p>\n  <ol>\n    <li>\n      <span>Repeat steps 1 to 8 from previous test case (installing Wireshark is optional).</span>\n    </li>\n    <li>\n      In <i>Cain</i>, click on the<i> Sniffer-&gt;ARP</i> tab and select <i>ARP-DNS</i>.\n    </li>\n    <li>Add an entry that redirects <i>www.facebook.com</i> to<i> ha.ckers.org</i>. \n</li>\n    <li>\n      Start ARP poisoning by pressing the <i>ARP </i>button.<span></span>As soon as the victim becomes active its status changes from “<i>idle</i>” to “<i>poisoning</i>”.<span></span>The lower pane starts showing the packets being intercepted.\n    </li>\n    <li>\n      In the victim’s box, open a browser and browse to <i>www.facebook.com</i>.\n    </li>\n  </ol>\n  <p>\n    <span>Expected results: </span>You can verify if the ARP poisoning was successful by running the arp command as in the previous example. To verify the redirection/defacement check if step 5 takes you to <i>ha.ckers.org</i>.</p>\n  <h1>\n    <span>Step 4:<span></span>Perform Additional Testing</span>\n  </h1>\n  <p>\n    Now that you’ve executed the basic ARP poisoning test cases, you must consider additional attacks.<span></span>This step consists of executing test cases such as sniffing an TLS connection and recovering a password by means of an ARP poisoning attack.<span></span>Use tools such as <i>Ettercap </i>or <i>Cain </i>to execute the multiple attack variations of ARP poisoning including:\n  </p>\n  <ul>\n    <li>\n      <span>HTTP session sniffing.</span>\n    </li>\n    <li>\n      <span>Voice over IP (VOIP) sniffing.</span>\n    </li>\n    <li>\n      <span>Password recovery and password cracking.</span>\n    </li>\n    <li>\n      <span>Denial of services.</span>\n    </li>\n  </ul>\n  <h1>\n    <span>Conclusions</span>\n  </h1>\n  <p>\n    <span>The problem with ARP poisoning attacks is that, while trivial to execute, they carry a high impact.<span></span>In addition, operating systems like Windows don’t defend against them by default.<span></span>It is necessary that you understand the attack scenarios related to ARP poisoning so that you realize the danger of these attacks. Then go over the causes and the countermeasures available.<span></span>Finally, execute the basic test cases and any additional ones depending on the ARP poisoning attack variations you want.</span>\n  </p>"
        ]
      }
    ]
  }
}