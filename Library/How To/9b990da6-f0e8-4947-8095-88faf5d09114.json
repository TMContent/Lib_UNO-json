{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "507410189",
      "Content_Hash": "-1135752993"
    },
    "Metadata": [
      {
        "Id": [
          "9b990da6-f0e8-4947-8095-88faf5d09114"
        ],
        "Id_History": [
          "9b990da6-f0e8-4947-8095-88faf5d09114,f4e1e3b0-b5bd-4d24-b664-0288641fcf5e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "0sink How to Use Crypto Algorithms To Encrypt Data"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Crypto Algorithms To Encrypt Data"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Description</h1>\r\n  <p>You can use classes in the <b>System.Security.Cryptography</b> namespace to encrypt data with the various cryptography algorithms. Use symmetric algorithms, such as RC2, TripleDES, and Rijndael to encrypt large chunks of data. Use asymmetric algorithms, such as RSA, to encrypt small amounts of data. Also, consider using asymmetric encryption to encrypt symmetric encryption keys. </p>\r\n  <p>The following code shows how to encrypt data using symmetric encryption with the <b>RijndaelManaged</b> class: </p>\r\n  <pre>using System.Security.Cryptography;<br />using System.IO;<br />RijndaelManaged myRijndael = new RijndaelManaged();<br />// Create a new key and initialization vector.<br />// If a key is not provided, a key of appropriate length is<br />// automatically generated. You can retrieve its value through the Key<br />// property. Similarly, an initialization vector is automatically<br />// generated if you do not specify one.myRijndael.GenerateKey();<br />myRijndael.GenerateIV();<br />// Get the key and IV.<br />byte&amp;#91;&amp;#93; key = myRijndael.Key;<br />byte&amp;#91;&amp;#93; iv = myRijndael.IV;<br />// Get the encryptor.<br />ICryptoTransform encryptor = myRijndael.CreateEncryptor(key, IV);<br />// Define a new <b>CryptoStream</b> object to hold the encrypted bytes<br />// and encrypt the data.MemoryStream msEncrypt = new MemoryStream();<br />CryptoStream csEncrypt = new CryptoStream(msEncrypt,<br />                                    encryptor, CryptoStreamMode.Write);<br />// Convert the data to a byte array.ASCIIEncoding textConverter = new ASCIIEncoding();<br />byte&amp;#91;&amp;#93; toEncrypt = textConverter.GetBytes(\"Secret data to encrypt\");<br />// Encrypt the data by writing it to the <b>CryptoStream</b> object.<br />// Write all data to the crypto stream and flush it.<br />csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);<br />csEncrypt.FlushFinalBlock(); <br />// Get encrypted array of bytes from the memory stream.<br />byte&amp;#91;&amp;#93; encrypted = msEncrypt.ToArray();<br />// Pass the encrypted data to a recipient. The recipient needs to know the<br />// key and initialization vector used for encryption. You can also <br />// encrypt your secret key by using a public key algorithm, and then <br />// pass it to the message recipient with the encrypted message.<br />// Get a decryptor that uses the same key and IV as the encryptor.<br />ICryptoTransform decryptor = myRijndael.CreateDecryptor(key, iv);<br />// Now decrypt the previously encrypted data using the decryptor.<br />MemoryStream msDecrypt = new MemoryStream(encrypted);<br />CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor,<br />                                            CryptoStreamMode.Read);<br />byte&amp;#91;&amp;#93; fromEncrypt = new byte&amp;#91;encrypted.Length&amp;#93;;<br />// Read the data out of the crypto stream.csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);<br />// Convert the byte array back into a string.<br />string roundtrip = textConverter.GetString(fromEncrypt);<br />// Display the original data and the decrypted data.<br />Console.WriteLine(\"Original:   &amp;#123;0&amp;#125;\", original);<br />Console.WriteLine(\"Round Trip: &amp;#123;0&amp;#125;\", roundtrip);</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}