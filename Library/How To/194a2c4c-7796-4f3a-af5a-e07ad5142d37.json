{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1179530605",
      "Content_Hash": "-1102206682"
    },
    "Metadata": [
      {
        "Id": [
          "194a2c4c-7796-4f3a-af5a-e07ad5142d37"
        ],
        "Id_History": [
          "194a2c4c-7796-4f3a-af5a-e07ad5142d37,da7c525a-14d4-4215-baf5-a1a7187df40e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for Buffer Underflow Bugs"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for Buffer Underflow Bugs"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C++</li>\r\n  </ul>\r\n  <p />\r\n  <h1>Summary</h1>\r\n  <p>In software security, a buffer underflow -or underrun- is a programming error that occurs due to incorrect memory handling. This bug occurs when an application uses an index variable to access a memory buffer and lets this variable take an unexpected value, allowing it to reference a memory segment outside of the buffer like a location in the stack. Attackers use buffer underflow conditions to write to critical stack locations like the return address of a function and get execution control of the target application.</p>\r\n  <p>Follow these steps to test for buffer underrun vulnerabilities:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Execute test cases </li>\r\n    <li>Step 4: Execute additional testing</li>\r\n  </ul>\r\n  <p />\r\n  <h1>Step 1: Understand Attack Scenarios </h1>\r\n  <p>First, it is necessary to understand the anatomy of a buffer underflow vulnerability. Similar to buffer overflow attacks, during this attack the attacker’s main goal is to elevate his or her privileges in the target program by getting execution control of the target. </p>\r\n  <p>The attack starts by submitting malformed input to the application. Mainly, the attacker submits input strings of incorrect size in order to cause an indexing variable to take an incorrect value. Once the attacker discovers that a specific sized string is causing a buffer underflow, the attacker modifies the attack string to include the shellcode and the address of the shellcode. Then the attacker triggers the underflow by submitting the attack string to the application. Once the underflow is triggered the attacker is able to overwrite a return address of the vulnerable function with the address of the shellcode. Then, as the stack unwinds, the execution controlled is passed to the actual shellcode.</p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The attacker submits input of incorrect length to find a buffer underflow. </li>\r\n    <li>The attacker submits the shellcode and shellcode offset as input to the application and triggers the buffer underflow. Upon triggering the underflow, a return address in the stack is overwritten with the address of the shellcode. </li>\r\n    <li>The stack unwinds and execution control is transferred to the shellcode.</li>\r\n  </ol>\r\n  <p>\r\n    <b>\r\n    </b>\r\n  </p>\r\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\r\n  <p>Next, it is necessary to understand what causes buffer underflow vulnerabilities and how to protect against them. </p>\r\n  <p>Buffer underflows are always caused by the same reason: an indexing variable takes an unexpected value which is lower than the address of the start of the buffer; this is why this bug is known as an underflow or underrun. </p>\r\n  <p>The following function (compiled in Windows Vista using Visual C++ 2008) takes an input buffer and an index variable that indicates quantity of padding characters (asterisks). The function uses an internal display buffer to which it starts copying the asterisks characters indicated by the index variable. Then the function gets a pointer to the location next to where the last padding character was copied and concatenates the rest of the string to the buffer. Finally the function prints the padded buffer.</p>\r\n  <pre>int padAndPrintBuffer(char* str, int index)<br />{ <br />char* pointer = NULL;<br />char buffer[1000] = \"\";      <br />for (int i = 0; i &lt; index; i++)<br />buffer[i] = '*'; <br /><strong>pointer = &buffer[index];</strong><br />lstrcpyA(pointer , str); <br />printf(\"%s\\n\", buffer); <br />return 1;<br />}<br /></pre>\r\n  <p>The function assumes that the <i>index</i> variable will always within the boundaries of the buffer internal (between 0 and 999). Therefore, the following call returns the output below:</p>\r\n  <pre>input: padAndPrintBuffer(\"AAAA\", 10);<br />output: *********AAAA    </pre>\r\n  <p>However, if the <i>index</i> variable is negative then the <i>pointer</i> variable takes an address outside of the buffer. It actually takes an address in the lower part of the stack, where the return address for the <i>lstrcpyA</i> function will be stored. For this example, calling the vulnerable function with the following parameters causes the instruction pointer EIP to be filled with an address controlled by the attacker’s choice:</p>\r\n  <pre>input: padAndPrintBuffer(\"AAAA\", -92);</pre>\r\n  <p>The output result is that the program crashes and EIP points to 0x41414141. </p>\r\n  <p>However, in order to use this vulnerable code for a buffer underflow attack, an attacker must control the input to the padAndPrintBuffer function. A common scenario where this happens is when an application performs padding or internal manipulation of strings. The following code was used by D. Litchfield as a proof-of-concept on defeating Execution Protection Mechanisms (XPMs) in Windows [i]. It takes an input string and pads it with zero characters before displaying it. However, the function expects an input string of 32 characters or less. If an attacker passes a string longer than 32 characters the padding variable takes a negative value and the overrun occurs:</p>\r\n  <pre>int foo(char *str)<br />{<br />int padding = 0;<br />int i=0;<br />char *p=NULL;<br />char buffer[33]=\"\";<br /><br />// Ooops!<br /><strong>padding = 32 - strlen(str);</strong><br />for( i = 0; i &lt; padding; ++i )<br />buffer[i] = '0';<br /><br />// Ooops, again!<br /><strong>p = &buffer[ padding ];</strong><br />lstrcpyA( p , str );<br />printf(\"%s\\n\",buffer);<br />return 0;<br />}<br /></pre>\r\n  <p>To protect against this vulnerability developers must add code that checks the values of indexing variables to detect an index that is outside of the buffer. In the case above, a simple check to verify if the index is within a valid range (0 to 999) would have been enough to mitigate the attack.</p>\r\n  <p />\r\n  <pre>\r\n    <pre>int padAndPrintBuffer(char* str, int index)<br />{<br /><strong>if ((index &lt; 0) ||(index &gt; 999))</strong><br /><strong>return 0</strong>;<br />char* pointer = NULL;<br />char buffer[1000] = \"\";<br />for (int i = 0; i &lt; index; i++)<br />buffer[i] = '*';<br />pointer = &buffer[index];<br />lstrcpyA(pointer , str );<br />printf(\"%s\\n\", buffer);<br />return 1;<br />}</pre>\r\n  </pre>\r\n  <h1>Step 3: Execute Test Cases</h1>\r\n  <p>Now that you’ve revised the theory pertaining to buffer underflow bugs, it is necessary to execute test cases to test for this vulnerability in your application.</p>\r\n  <h2>\r\n    <em>Test for buffer underflow</em>\r\n  </h2>\r\n  <p>Testing for buffer underflows is similar to testing for buffer overflows whereas the tester needs to submit malicious input of incorrect length to the application. However, different to buffer overflow testing, your main goal when testing for underflows is to modify an indexing variable into a negative value, and this is difficult to achieve without knowledge of the application’s source code. However a possible way to create an underflow, as shown in the previous section, is to use input of inappropriate length.</p>\r\n  <p>It is recommended to follow these steps to test for underflows:</p>\r\n  <ol>\r\n    <li>Attach a debugger to the target application. </li>\r\n    <li>Determine how to submit test case data. </li>\r\n    <li>Start submitting strings of different length. It is recommended that you submit strings of a single character such as a string of A’s or any other predetermined value so that you can identify the test case data in the debugger in case it causes an access violation (see Figure 1).</li>\r\n    <li>Check if the application breaks into the debugger. </li>\r\n    <li>If the application breaks into the debugger, alter the length of the string submitted in step 3 to see how it affects the memory location where the access violation occurs.</li>\r\n  </ol>\r\n  <p>Expected results: if the location of the access violation changes for different input lengths it is likely that the application is vulnerable to a buffer underflow bug (since the application is accessing memory outside of the buffer based on the length of the input string).</p>\r\n  <b>Figure 1 - Use strings of a single character to identify test case data in debugger</b>\r\n  <table>\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          <p>A x 9 </p>\r\n          <p>A x 13 </p>\r\n          <p>A x 37</p>\r\n          <p>A x 69</p>\r\n          <p>A x 133</p>\r\n          <p>A x 261</p>\r\n          <p>A x 517</p>\r\n          <p>A x 1029</p>\r\n          <p>…</p>\r\n          <p>A x 16389</p>\r\n          <p>A x 32773</p>\r\n          <p>A x 65541</p>\r\n          <p>\r\n            <b>A x MAX_PATH + 5</b>\r\n          </p>\r\n          <p>\r\n            <b>A x MAX_LENGH + 5</b>\r\n          </p>\r\n          <p>\r\n            <b>A x MAX_BUFFER + 5</b>\r\n          </p>\r\n          <p>\r\n            <b>A x BUFFER_SIZE + 5</b>\r\n          </p>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <p>\r\n    <strong>\r\n    </strong>&nbsp;</p>\r\n  <p>\r\n    <strong>\r\n    </strong>\r\n  </p>\r\n  <h1>Step 4: Execute Additional Testing</h1>\r\n  <p>Finally, it is recommended to extend any test automation to include testing for buffer underflow bugs. Automated testing is able to execute a number of test cases in a short time amount of time that would be otherwise be&nbsp;impossible to execute by hand. The automated testing methods to use for buffer underflow bugs are similar to the ones used in buffer overflow testing such as using random fuzz data, replacing escape or special characters, and performing bit-wise operations.</p>\r\n  <p>\r\n    <i>\r\n    </i>\r\n  </p>\r\n  <h1>Conclusions</h1>\r\n  <p>Buffer underflows are dangerous as they allow for remote code execution in vulnerable applications as well as local privileged code execution attacks from low privileged attackers. To learn how to test for them it is important to understand how attackers exploit them as well as what causes and how to countermeasure them. Then you must execute test cases similar to the ones when testing buffer overflows using attack strings of different lengths. Finally, you must expand any automation to cover buffer underflow bugs using similar automation methods as when testing for buffer overflows.</p>\r\n  <p />\r\n  <br />\r\n  <hr />\r\n  <p>[i] <b>Buffer Underruns, DEP, ASLR and improving the Exploitation Prevention Mechanisms (XPMs) on the Windows platform</b>. David Litchfield. <a href=\"http://www.ngssoftware.com/papers/xpms.pdf\">www.ngssoftware.com/papers/xpms.pdf</a></p>"
        ]
      }
    ]
  }
}