{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-768928495",
      "Content_Hash": "1962336409"
    },
    "Metadata": [
      {
        "Id": [
          "f1ebdb81-6130-4c79-973b-1edbb3183440"
        ],
        "Id_History": [
          "f1ebdb81-6130-4c79-973b-1edbb3183440,eb004f02-4994-4f4c-9187-b26c5096cada,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] How to Constrain Input For Length Range Format And Type"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Constrain Input For Length Range Format And Type"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Description</h1>\r\n  <p>When input is from a server, you can use validation controls, such as <b>RangeValidator</b>, <b>CustomValidator</b>, and <b>RegularExpressionValidator</b>, to constrain the input by length, range, format, and type. </p>\r\n  <p>When input carries an ID from any other source (such as HTML controls, query string, cookies, HTTP headers, and so on), use the <b>System.Text.RegularExpression.Regex</b> class to constrain input for length, range, format, and type. </p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}