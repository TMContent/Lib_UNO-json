{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1436676024",
      "Content_Hash": "1866831867"
    },
    "Metadata": [
      {
        "Id": [
          "7f8ce864-0ed8-40c1-94c2-f525662eaaf7"
        ],
        "Id_History": [
          "7f8ce864-0ed8-40c1-94c2-f525662eaaf7,9088f7b5-3e95-47ab-b7c7-dd1703feefed,"
        ],
        "Library_Id": [
          "26bd1a04-beed-4a66-917d-b6ab0a7d634c"
        ],
        "Title": [
          "How to Use Health Monitoring"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Health Monitoring"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0&nbsp;</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>This How to shows you how to use health monitoring to instrument your application for a custom event. To create a custom health monitoring event, you create a class that derives from <em>System.Web.Management.WebBaseEvent</em>, configure the &lt;<em>healthMonitoring</em>&gt;<b></b>element in your application's <em>Web.config</em> file, and instrument your code to raise the event. Custom events are useful for recording security related events beyond those automatically recorded by ASP.NET health monitoring. For example, you could add an event that tracks successful and unsuccessful attempts to access restricted and sensitive business logic.</p>\r\n  <h1>Contents</h1>\r\n  <ul>\r\n    <li>Objectives <li>Overview <li>Event Providers <li>Summary of Steps <li>Step 1. Create a Custom Web Event <li>Step 2. Create an ASP.NET Application for Monitoring <li>Step 3. Configure Health Monitoring <li>Step 4. Instrument Your Application <li>Step 5. Test Health Monitoring <li>More Information <li>Additional Resources</li></li></li></li></li></li></li></li></li></li></li>\r\n  </ul>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Create a custom health monitoring event. <li>Configure health monitoring. <li>Instrument an application to raise a custom event. </li></li></li>\r\n  </ul>\r\n  <h1>Overview</h1>\r\n  <p>ASP.NET health monitoring supports many standard events that you can use to monitor the health of your application. Examples of security related events that are automatically generated include logon failures and successes when using the ASP.NET membership system, attempts to tamper with or reuse forms authentication tickets, and infrastructure events such as disk access failures. This How to explains how to create custom events that use the same underlying infrastructure and raise them in your code to supplement the system-defined events. </p>\r\n  <h1>Event Providers</h1>\r\n  <p>ASP.NET health monitoring supports an event provider model. Event providers encapsulate the underlying event stores and provide a consistent API. You can configure event providers to log events to different event sinks. The following providers are supported: </p>\r\n  <ul>\r\n    <li>\r\n      <b>SimpleMailWebEventProvider.</b> This provider sends e-mail for event notifications. <li><b>TemplatedMailWebEventProvider.</b> This provider uses templates to define and format e-mail messages sent for event notifications. <li><b>SqlWebEventProvider. </b>This provider logs event details to a SQL Server database. If you use this provider, you should encrypt the connection string in your Web.config file by using the <em>Aspnet_regiis.exe</em> tool. <li><b>EventLogWebEventProvider.</b> This provider logs events to the Windows application event log. <li><b>TraceWebEventProvider.</b> This provider logs events as ASP.NET trace messages. <li><b>WmiWebEventProvider.</b> This provider maps ASP.NET health monitoring events to Windows Management Instrumentation (WMI) events. </li></li></li></li></li></li>\r\n  </ul>\r\n  <p>You can also create custom event providers to write events to custom stores by creating a class that inherits from <em>System.Web.Management.WebEventProvider</em>.</p>\r\n  <h1>Summary of Steps</h1>\r\n  <p>Perform the following steps to create a custom Web event and configure health monitoring to use that event in your ASP.NET application: </p>\r\n  <ul>\r\n    <li>Step 1. Create a custom Web event. <li>Step 2. Create an ASP.NET Application for monitoring. <li>Step 3. Configure health monitoring. <li>Step 4. Instrument your application. <li>Step 5. Test health monitoring. </li></li></li></li></li>\r\n  </ul>\r\n  <h1>Step 1. Create a Custom Web Event</h1>\r\n  <p>In this step, you create a custom Web event by creating a class that inherits from <em>System.Web.Management.WebAuditEvent</em>.</p>\r\n  <h2>To create a custom Web Event </h2>\r\n  <ol>\r\n    <li>Use Visual Studio .NET to create a new class library named <em>MyWebEvents</em>. <li>Rename <em>Class1.cs</em> to<em> MyCriticalEvent.cs</em>. <li>Add a reference to <em>System.Web</em> and add the following <em>using</em> statements to the top of the <em>MyCriticalEvent.cs</em>. <pre>using System.Web;<br />// For the reference to HttpContext<br />using System.Web.Management;  </pre><li>Derive <em>MyCriticalEvent</em> from <em>WebAuditEvent</em> and create appropriate public constructors that call the protected equivalents in the parent <em>WebAuditEvent</em> class as shown in the following code. Notice how this code also obtains some custom details from the <em>HttpContext</em> inside the event's constructors. <pre>public class MyCriticalEvent : WebAuditEvent<br />&#123;<br />&nbsp;&nbsp;&nbsp; private string userID;<br />&nbsp;&nbsp;&nbsp; private string authType;<br />&nbsp;&nbsp;&nbsp; private bool isAuthenticated;<br />&nbsp;&nbsp;&nbsp; public MyCriticalEvent(string msg, object eventSource, int eventCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode)<br />&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Obtain the HTTP Context and store authentication details<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userID = HttpContext.Current.User.Identity.Name;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; authType = HttpContext.Current.User.Identity.AuthenticationType;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isAuthenticated = HttpContext.Current.User.Identity.IsAuthenticated;<br />&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp;  <br />    public MyCriticalEvent(string msg, object eventSource, int eventCode, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int eventDetailCode)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(msg, eventSource, eventCode, eventDetailCode)<br />&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Obtain the HTTP Context and store authentication details<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userID = HttpContext.Current.User.Identity.Name;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; authType = HttpContext.Current.User.Identity.AuthenticationType;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isAuthenticated = HttpContext.Current.User.Identity.IsAuthenticated;<br />&nbsp;&nbsp;&nbsp; &#125;<br />&#125;   </pre><li>If you want to log custom details, such as authentication details in this example, override the <em>FormatCustomEventDetails</em> method to augment the standard event output with custom data, as shown in the following code example. <pre>// Formats Web request event information.<br />// This method is invoked indirectly by the provider using one of the<br />// overloaded ToString methods. If buffering is enabled, this method is<br />// called asynchronously on a non-Web request thread, where the <br />// HttpContext is not available.<br />public override void FormatCustomEventDetails(WebEventFormatter formatter)<br />&#123;<br />&nbsp;&nbsp;&nbsp; base.FormatCustomEventDetails(formatter);<br />&nbsp;&nbsp;&nbsp; formatter.AppendLine(\"User ID: \" &#43; userID);<br />&nbsp;&nbsp;&nbsp; formatter.AppendLine(\"Authentication Type: \" &#43; authType);<br />&nbsp;&nbsp;&nbsp; formatter.AppendLine(\"User Authenticated: \" &#43; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isAuthenticated.ToString());<br />&nbsp;&nbsp;&nbsp; formatter.AppendLine(\"Activity Description: Critical Operation\");<br />&#125;  </pre><p><b>Note:</b>&nbsp;With buffering enabled for the provider, the <em>FormatCustomEventDetails</em> method is called on a separate non-Web request thread, where the <em>HttpContext</em> is not available. If you need to access information from the <em>HttpContext</em>, access the context in the class' constructor, extract the required information (do not keep the pointer to the <em>HttpContext</em> object), and save the information in the event's private instance state.</p><li>Compile the assembly. If you want to use the assembly in multiple applications, you should sign the assembly with a strong-name and install it in the global assembly cache. </li></li></li></li></li></li>\r\n  </ol>\r\n  <h1>Step 2. Create an ASP.NET Application for Monitoring</h1>\r\n  <p>In this step, you create an ASP.NET application that you will monitor and instrument with a custom event.</p>\r\n  <h2>To create an ASP.NET application </h2>\r\n  <ol>\r\n    <li>Use Visual Studio .NET 2008 to create a new ASP.NET Web application. <li>Add a reference to the assembly that contains your custom Web event that you created earlier. <li>Add a <em>Web.config</em> file to your application so that you can configure health monitoring. </li></li></li>\r\n  </ol>\r\n  <h1>Step 3. Configure Health Monitoring</h1>\r\n  <p>By default, health monitoring is enabled for ASP.NET applications. You can see the default configuration in the machine-level <em>Web.config.comments</em> file in the <em>&#37;windir&#37;\\Microsoft .NET\\Framework\\&#123;version&#125;\\CONFIG</em><strong></strong>configuration file directory.</p>\r\n  <p>The &lt;<em>healthMonitoring</em>&gt; element contains the following sub-elements.</p>\r\n  <pre>&lt;healthMonitoring heartbeatInterval=\"0\" enabled=\"true\"&gt;<br />&nbsp; &lt;bufferModes/&gt;<br />&nbsp; &lt;providers/&gt;<br />&nbsp; &lt;profiles/&gt;<br />&nbsp; &lt;rules/&gt;<br />&nbsp; &lt;eventMappings/&gt;<br />&lt;/healthMonitoring&gt;  </pre>\r\n  <p>To make further changes to health monitoring configuration, you can apply configuration settings to your application's specific Web.config file or to the machine-level <em>Web.config</em> file if you want to configure all Web applications on your server. </p>\r\n  <p>To configure health monitoring, configure the following elements: </p>\r\n  <ul>\r\n    <li>\r\n      <em>&lt;bufferModes&gt;</em>\r\n      <li>\r\n        <em>&lt;providers&gt;</em>\r\n        <li>\r\n          <em>&lt;profiles&gt;</em>\r\n          <li>\r\n            <em>&lt;rules&gt;</em>\r\n            <li>\r\n              <em>&lt;eventMappings&gt;</em>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h2>&lt;bufferModes&gt;</h2>\r\n  <p>Buffer modes are used to define the buffering properties used by any provider that inherits from <em>System.Web.Management.BufferedWebEventProvider</em>. Currently, this includes <em>MailWebEventProvider</em> and <em>SqlWebEventProvider</em>. You can also derive custom Web event providers from that base class and use buffer modes.</p>\r\n  <p>You configure buffering to minimize the performance impact and overhead of recording events. You can use the &lt;<em>bufferModes</em>&gt;<b></b>configuration to define how long events are buffered before they are written to the provider and you can distinguish between urgent or critical events and regular events.</p>\r\n  <p>You can use any of the default buffer modes (Critical Notification, Notification, Analysis or Logging) configured in the machine-level <em>Web.config.default</em> file or you can configure a custom buffer mode.</p>\r\n  <p>\r\n    <b>Note:</b>&nbsp;For buffering to be enabled, you need to set <em>buffer=\"true\"</em> on your provider configuration. You can reference the specific buffering configuration by using the <em>bufferMode</em> attribute on your provider definition as shown in the following code example.</p>\r\n  <pre>&lt;providers&gt;<br />&nbsp; &lt;add name=\"providerName\" buffer=\"true\" bufferMode=\"bufferModeName\" ... /&gt;<br />&lt;/providers&gt;  </pre>\r\n  <h3>To configure a custom buffer mode </h3>\r\n  <ul>\r\n    <li>Add the following configuration to your application's <em>Web.config</em> file. <pre>&lt;healthMonitoring&gt;<br />&nbsp; &lt;bufferModes&gt;<br />&nbsp;&nbsp;&nbsp; &lt;add name=\"Extra Critical Notification\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxBufferSize=\"10\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxFlushSize=\"5\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; urgentFlushThreshold=\"1\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regularFlushInterval=\"Infinite\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; urgentFlushInterval=\"00:01:00\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxBufferThreads=\"1\"<br />&nbsp;&nbsp;&nbsp; /&gt;<br />&nbsp; &lt;/bufferModes&gt;<br />&lt;/healthMonitoring&gt;  </pre></li>\r\n  </ul>\r\n  <p>The attributes are as follows: </p>\r\n  <ul>\r\n    <li>\r\n      <b>name. </b>This is a name for the buffer mode used to reference it from other elements. For example, the &lt;<em>provider</em>&gt; element references the specific buffer mode configuration by referencing the name in its <em>bufferMode</em> attribute. <li><b>maxBufferSize.</b> This is the maximum number of events that can be buffered by a provider before flushing them out and writing them to a store. <li><b>maxFlushSize.</b> This is the maximum number of events per flush. Its value should be between 1 and <em>maxBufferSize</em>. <li><b>urgentFlushThreshold.</b> This is the minimum number of events after which the events should be flushed. Its value should be less then or equal to <em>maxBufferSize</em>. <li><b>regularFlushInterval. </b>This is the time interval per flush. Its value cannot be zero. <li><b>urgentFlushInterval. </b>This is the minimum time between flushes. Its value must be between 0 and <em>regularFlushInterval</em>. <li><b>maxBufferThreads. </b>This is the maximum number of threads used for flushing. </li></li></li></li></li></li></li>\r\n  </ul>\r\n  <h2>&lt;providers&gt;</h2>\r\n  <p>You use the &lt;<em>providers</em>&gt; element to indicate what logging sinks are available for logged events. Note that any event providers you configure are not actually used for reporting events until you configure an event rule that specifies a configured provider. For more information, see \"&lt;<em>rules</em>&gt;\" later in this document.</p>\r\n  <p>The default configuration in the machine-level <em>Web.config</em> file defines the following providers: </p>\r\n  <ul>\r\n    <li>\r\n      <b>EventLogWebEventProvider. </b>This provider uses the <em>EventLogWebEventProvider</em> class to log to the Windows application event log. <li><b>SqlWebEventProvider.</b> This provider uses the <em>SqlWebEventProvider</em> class for logging to a SQL Server or SQL Server Express instance. <li><b>WmiWebEventProvider.</b> This provider uses the <em>WmiWebEventProvider</em> class for logging to WMI. </li></li></li>\r\n  </ul>\r\n  <p>You can use any of these default event providers in your own health monitoring configuration, or you can configure new providers using any of the standard Web event provider classes. You can also use any custom Web event provider class that derives from the <em>WebEventProvider</em> base class. </p>\r\n  <h3>To configure a SQL Server provider</h3>\r\n  <p>If you want to configure an event provider that writes to a SQL Server instance, you must create the database used by the <em>SqlWebEventProvider</em>, configure a connection string, and configure a provider definition. </p>\r\n  <ol>\r\n    <li>Install the Web event database by running the following command from the Visual Studio command prompt: <pre>aspnet_regsql.exe -E -S &lt;ServerName&gt; -A w </pre><p>This command uses the following switches: </p><ul><li><em>-E.</em> This switch indicates to use Windows authentication to connect to the database. <li><em>-S &lt;ServerName&gt;.</em> This switch indicates the name of the server where the database will be installed, or is already installed. <li><em>-A w.</em><strong></strong>This switch indicates to add Web event support. This creates the relevant tables and stored procedures required by the <em>SqlWebEventProvider</em>. </li></li></li></ul><li>Create a SQL Server logon for your Web application's identity. For example, create a network service and then create a database user for this logon in the <em>Aspnetdb</em> database. <li>Grant the database user <em>execute</em> permission on the <em>aspnet_WebEvent_LogEvent</em> stored procedure. <li>Add the following connection string to your application's <em>Web.config</em> file. <pre>&lt;connectionStrings&gt; <br />&nbsp;&nbsp; &lt;add name=\"MySqlConnection\" connectionString=<br />&nbsp; \"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" <br />&nbsp;&nbsp; /&gt; <br />&lt;/connectionStrings&gt;  </pre><li>Add the following &lt;<em>providers</em>&gt; configuration within the &lt;<em>healthMonitoring</em>&gt; section in <em>Web.config</em>. <pre>&lt;providers&gt; <br />&nbsp; &lt;add connectionStringName=\"MySqlConnection\" <br />&nbsp;&nbsp;&nbsp;&nbsp; maxEventDetailsLength=\"1073741823\" <br />&nbsp;&nbsp;&nbsp;&nbsp; buffer=\"true\" <br />&nbsp;&nbsp;&nbsp;&nbsp; bufferMode=\"Extra Critical Notification\"&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp; name=\"MySqlWebEventProvider\"&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp; type=\"System.Web.Management.SqlWebEventProvider,System.Web,Version=3.5.0.0,<br />&#9;&#9;Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a\" /&gt; <br />&lt;/providers&gt;   </pre></li></li></li></li></li>\r\n  </ol>\r\n  <p>The following list describes the most important attributes you can set when configuring event providers: </p>\r\n  <ul>\r\n    <li>\r\n      <b>name. </b>This is a name for the buffer mode used to reference it from other elements. <li><b>type.</b> This is a fully-qualified assembly reference to the provider class. This class should implement the <em>System.Configuration.Provider.ProviderBase</em> class. <li><b>buffer.</b> If you are using the <em>SqlWebEventProvider</em>, use this attribute to enable event buffering. If this attribute is <em>true</em>, you must configure the <em>bufferMode</em> attribute. The default value is <em>false</em>. <li><b>bufferMode.</b> If you are using the <em>SqlWebEventProvider</em>, use this attribute to specify the friendly name of the buffer mode to be used for buffering the events. <li><b>connectionStringName.</b> If you are using the <em>SqlWebEventProvider</em>, use this attribute to specify the friendly name of the connection string used for connecting to the SQL Server database. <li><b>maxEventDetailsLength.</b> This is the maximum length of the event details. </li></li></li></li></li></li>\r\n  </ul>\r\n  <p>\r\n    <b>Note:</b>&nbsp;If you want to use the <em>SqlWebEventProvider</em> to write to a local or remote SQL Server instance, use the <em>Aspnet_regsql</em> tool to configure the necessary database tables and roles as described in \"Step 3. Configure Health Monitoring.\"<b></b></p>\r\n  <h2>&lt;profiles&gt;</h2>\r\n  <p>You use the &lt;<em>profiles</em>&gt; element to specify sets of parameters to use when configuring events. These parameters indicate the minimum number instances after which the event should be logged, the maximum number of instances, and the minimum interval between logging two similar events. This element can be critical in controlling the amount of information generated by defining when monitoring begins and when it ends by setting thresholds. </p>\r\n  <p>You can use this element to throttle the event occurrences. It can help prevent an attack against the eventing system itself or an event sink such as SQL Server or the event log. You can review the default settings in the machine-level <em>Web.config</em> file. The following code example shows the default settings from the machine-level <em>Web.config.default</em> file</p>\r\n  <pre>&lt;profiles&gt;<br />&nbsp; &lt;add name=\"Default\" minInstances=\"1\" maxLimit=\"Infinite\" minInterval=\"00:01:00\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; custom=\"\" /&gt;<br />&nbsp; &lt;add name=\"Critical\" minInstances=\"1\" maxLimit=\"Infinite\" minInterval=\"00:00:00\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; custom=\"\" /&gt;<br />&lt;/profiles&gt;  </pre>\r\n  <p>You can use the default profiles in your own health monitoring configuration, and you can create new profiles. </p>\r\n  <h3>To create a new profile</h3>\r\n  <p>Add the following configuration to your application's <em>Web.config</em> file inside the existing &lt;<em>healthMonitoring</em>&gt; section, as shown in the following code example.</p>\r\n  <pre>&lt;profiles&gt;<br />&nbsp; &lt;add name=\"Throttle\"<br />&nbsp;&nbsp;&nbsp; minInstances=\"1\"<br />&nbsp;&nbsp;&nbsp; maxLimit=\"1000\"<br />&nbsp;&nbsp;&nbsp; minInterval=\"00:00:01\"/&gt;<br />&lt;/profiles  </pre>\r\n  <p>The &lt;<em>add</em>&gt; child element of the &lt;<em>profiles</em>&gt; element takes the following attributes: </p>\r\n  <ul>\r\n    <li>\r\n      <b>name. </b>This is a name for the buffer mode used to reference it from other elements. <li><b>minInstances.</b> This is the minimum number of occurrences before an event is fired and logged. <li><b>maxLimit.</b> If you want to set a maximum limit after which the specific events should stop firing and logging, use this attribute. The default setting is <em>Infinite</em>. <li><b>minInterval.</b> If you want to set a minimum time interval between logging same event again, use this attribute. The format is \"<em>hh:mm:ss</em>\" and the default is <em>00:00:00</em>. </li></li></li></li>\r\n  </ul>\r\n  <h2>&lt;eventMappings&gt; </h2>\r\n  <p>Event mappings are named groups of events that you want to monitor. Note that you can include a particular event in more than one named group. The default event mappings name the most commonly required groupings of events. The default event mappings include two high-level groupings, <em>All Events</em> and<em> All Audits</em>, that include all events and all audits respectively. There are also subsets of each of those groupings. For example, <em>All Errors</em> includes all error events, and <em>Failure Audits</em> includes all audit failure events. You can review the default settings in the machine-level <em>Web.config.default</em> file.<b></b></p>\r\n  <p>You can use the default event mappings in your own health monitoring configuration or you can create new event mappings. You must create event mappings for any custom Web events you create. </p>\r\n  <h3>To create an event mapping for a custom Web event </h3>\r\n  <p>Add the following &lt;<em>eventMappings</em>&gt; element beneath the &lt;<em>healthMonitoring</em>&gt; section in your application's <em>Web.config</em> file. This references the custom event you created earlier.</p>\r\n  <pre>&lt;eventMappings&gt; <br />&nbsp;&nbsp;&nbsp; &lt;add name=\"My Critical Event\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type=\"MyWebEvents.MyCriticalEvent,MyWebEvents\"/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&lt;/eventMappings&gt;      </pre>\r\n  <p>The &lt;<em>add</em>&gt; child element of the &lt;<em>eventMappings</em>&gt; element takes the following attributes: </p>\r\n  <ul>\r\n    <li>\r\n      <b>name.</b> This is the event name used to reference it from rules. <li><b>type. </b>This is a fully-qualified assembly reference to the event class. <li><b>startEventCode.</b> If you want to map events of a similar type in a specific range of event codes, use this attribute to set the starting event code for the range of events codes. The default setting is <em>0</em>. <li><b>endEventCode.</b> If you want to map events of a similar type in a specific range of event codes, use this attribute to set the top end of the range of event codes. The default setting is <em>Infinite</em>. </li></li></li></li>\r\n  </ul>\r\n  <h1>Step 4. Instrument Your Application </h1>\r\n  <p>The ASP.NET runtime is instrumented to raise standard events at the appropriate time. You must instrument your application to raise custom events.</p>\r\n  <h2>To create a test application for the MyCriticalEvent custom event </h2>\r\n  <ol>\r\n    <li>Add the following <em>using</em> statements to your <em>Default.aspx.cs</em> file. <pre>using System.Web.Management;using MyWebEvents;    </pre><li>Add a button to your application's <em>Default.aspx</em> page and then add the following code to the button click event handler. The code creates a new custom event object of type <em>MyCriticalEvent</em> and calls its <em>Raise</em> method to fire the event. <pre>protected void Button1_Click(object sender, EventArgs e)<br />&#123;<br />&nbsp; MyCriticalEvent testEvent = new MyCriticalEvent(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"Critical Operation Performed\", <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebEventCodes.WebExtendedBase &#43; 1);<br />&nbsp; testEvent.Raise();<br />&#125;  </pre><p><b>Note:</b>&nbsp;When you raise a custom Web event, you must specify an event code that is greater than <em>System.Web.Management.WebEventCodes.WebExtendedBase</em>. Codes less than this value are reserved for system-generated events.</p></li></li>\r\n  </ol>\r\n  <h3>&lt;rules&gt; </h3>\r\n  <p>Use the &lt;<em>rules</em>&gt; element to specify which events to log through which event provider. As an option, you can apply a profile to an event logging rule by specifying the name of a &lt;<em>profiles</em>&gt; entry, or you can apply the same attributes used in the &lt;<em>profiles</em>&gt; definition directly to a &lt;<em>rule</em>&gt; definition. </p>\r\n  <p>The default rule settings are defined in the machine-level <em>Web.config.default</em> file. The default rules cause the <em>All Errors</em> and <em>Failure Audits</em> event mappings to be logged to the Windows event log. </p>\r\n  <pre>&lt;rules&gt;<br />&nbsp;&lt;add name=\"All Errors Default\" eventName=\"All Errors\" provider=\"EventLogProvider\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; profile=\"Default\" minInstances=\"1\" maxLimit=\"Infinite\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; minInterval=\"00:01:00\" custom=\"\" /&gt;<br />&nbsp;&lt;add name=\"Failure Audits Default\" eventName=\"Failure Audits\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider=\"EventLogProvider\" profile=\"Default\" minInstances=\"1\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxLimit=\"Infinite\" minInterval=\"00:01:00\" custom=\"\" /&gt;<br />&lt;/rules&gt;  </pre>\r\n  <p>You can disable the default rules mappings by using the &lt;<em>clear</em>&gt; child element inside the &lt;<em>rules</em>&gt; element, before adding your own rules.<b></b></p>\r\n  <h2>To create a new event rule for a custom event</h2>\r\n  <p>To create a new event rule for the custom event you created earlier, add the following &lt;<em>rules</em>&gt;<b></b>element inside the &lt;<em>healthMonitoring</em>&gt; section in your application's <em>Web.config</em>, as shown in the following code example.</p>\r\n  <pre>&lt;rules&gt; <br />&nbsp; &lt;add name=\"Critical event\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventName=\"My Critical Event\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider=\"MySqlWebEventProvider\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; profile=\"Throttle\"/&gt;<br />&lt;/rules&gt;  </pre>\r\n  <p>You can set the following attributes when defining rules: </p>\r\n  <ul>\r\n    <li>\r\n      <b>name. </b>This is a name for the buffer mode used to reference it from other elements. <li><b>eventName.</b> This is the name of the event you want to monitor for which the rule is being configured. <li><b>provider.</b> Use this attribute to specify the friendly name of the provider to use to log this event. <li><b>profile. </b>If you want to use a preconfigured profile, specify the friendly name of the profile using this attribute. Note that if you specify a profile, the profile supplies the values for the <em>minInstances</em>, <em>maxLimit</em> and <em>minInterval</em> rules attributes. <li><b>minInstances. </b>If you want to specify the minimum number of occurrences before an event is fired and logged, use this attribute. If you specify a profile attribute, this attribute overrides the <em>minInstances</em> value in the profile. <li><b>maxLimit.</b> If you want to set a maximum limit after which the specific events should stop firing and logging, use this attribute. The default setting is <em>Infinite</em>. If you specify a profile attribute, this attribute overrides the <em>maxLimit</em> value in the profile. <li><b>minInterval.</b> If you want to set a minimum time interval between logging the same event again, use this attribute. The format is \"<em>hh:mm:ss</em>\" and the default is <em>00:00:00</em>. If you specify an equivalent profile attribute, this attribute overrides the <em>minInterval</em> value in the profile. </li></li></li></li></li></li></li>\r\n  </ul>\r\n  <h1>Step 5. Test Health Monitoring</h1>\r\n  <p>In this step you test health monitoring and verify that your custom event works as expected.</p>\r\n  <p>\r\n    <b>To test health monitoring</b>\r\n  </p>\r\n  <ol>\r\n    <li>Build your Web application and browse to its <em>Default.aspx</em> page. <li>Click the button to fire the custom event. <li>Open the <em>aspnet_WebEvent_Events</em> table in the <em>Aspnetdb</em> database on your SQL Server. The Details column contains information similar to that shown in the following code example, including the custom event information. <pre>Event code: 100001Event code: 100001<br />Event message: Critical Operation Performed<br />Event time: 7/11/2009 5:27:12 PM<br />Event time (UTC): 7/12/2009 12:27:12 AM<br />Event ID: 369ca7f9e5744234be2831aced671191<br />Event sequence: 8<br />Event occurrence: 1<br />Event detail code: 0<br />Application information:<br />&nbsp;&nbsp;&nbsp; Application domain: /LM/w3svc/1/ROOT/HealthMonitoring-7-127656015969887178<br />&nbsp;&nbsp;&nbsp; Trust level: Full<br />&nbsp;&nbsp;&nbsp; Application Virtual Path: /HealthMonitoring<br />&nbsp;&nbsp;&nbsp; Application Path: c:\\inetpub\\wwwroot\\HealthMonitoring\\<br />&nbsp;&nbsp;&nbsp; Machine name: MACHINENAME<br />Custom event details: <br />&nbsp;&nbsp;&nbsp; User ID: DomainName\\UserName<br />&nbsp;&nbsp;&nbsp; Authentication Type: Negotiate<br />&nbsp;&nbsp;&nbsp; User Authenticated: True<br />&nbsp;&nbsp;&nbsp; Activity Description: Critical Operation  </pre></li></li></li>\r\n  </ol>\r\n  <p>\r\n    <b>Note:</b>&nbsp;You can redirect the logged output to the event log by setting <em>provider=\"EventLogProvider\"</em> instead of <em>provider=\"MySqlWebEventProvider\"</em> as shown here:</p>\r\n  <pre>&lt;rules&gt; <br />&nbsp; &lt;add name=\"Critical event\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventName=\"My Critical Event\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider=\"EventLogProvider\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; profile=\"Throttle\"/&gt;<br />&lt;/rules&gt;    </pre>\r\n  <h1>More Information </h1>\r\n  <p>The following lists describe the optional attributes available while configuring various event logging providers that you can use to customize provider behavior.</p>\r\n  <h2>SimpleMailWebEventProvider and TemplatedMailWebEventProvider</h2>\r\n  <p>Use the <em>SimpleMailWebEventProvider</em> or <em>TemplatedMailWebEventProvider</em> to send an e-mail message when an event is raised. When you are configuring providers using these classes, set the following attributes to control the behavior of these providers. </p>\r\n  <ul>\r\n    <li>\r\n      <b>from</b>, <b>to</b>, <b>bcc</b> and <b>cc.</b> These specify the sender and receivers of the event notification mail. <li><b>maxEventLengthForSimpleMessage.</b> Use this attribute to limit the number of characters of event details being mailed. This setting is potentially dangerous if the message size is not limited. The default value is 5,000 characters. <li><b>maxSizeForSimpleMessage.</b> Use this attribute to limit the size of the notification message sent. The default value is 1,024 KB. <li><b>maxEventCountForTemplateMessage.</b> Use this attribute to limit the number of events in each message notification. <li><b>maxMessagesPerNotification.</b> Use this attribute to limit the number of messages per event. <li><b>priority.</b> Use this attribute to set the priority of mail messages. </li></li></li></li></li></li>\r\n  </ul>\r\n  <p>When you are using the <em>SimpleMailWebEventProvider</em>, use the following attributes to format the mail notification: </p>\r\n  <ul>\r\n    <li>\r\n      <b>bodyFooter. </b>Use this attribute to specify a message to be included at the bottom of the body of the notification e-mail message. <li><b>bodyHeader.</b> Use this attribute to specify a message to be included at the top of the body of the e-mail notification. <li><b>separator.</b> Use this attribute to include specific text between each event and after each section header in simple email format. <li><b>subjectPrefix.</b> Use this attribute to prefix custom text to the mail subject. This helps you distinguish event-related e-mail messages. </li></li></li></li>\r\n  </ul>\r\n  <p>When you use the <em>TemplatedMailWebEventProvider</em><strong>,</strong> use the following attribute to format the mail notification: </p>\r\n  <ul>\r\n    <li>\r\n      <b>template.</b> Use this attribute to specify an .aspx page that is used to create the message body of the notification. This attribute cannot be specified along with <em>bodyHeader</em>, <em>bodyFooter</em>, or <em>separator</em> settings. </li>\r\n  </ul>\r\n  <h2>SQLEventProvider</h2>\r\n  <p>Use the following attributes to restrict the event size: </p>\r\n  <ul>\r\n    <li>\r\n      <b>maxEventDetailsLength.</b> Use this attribute to specify the maximum event details size. Set this attribute to a suitable value to limit the maximum length of data that can be written to the database. <li><b>commandTimeout.</b> Use this attribute to override the default ADO.NET command time out (30 seconds).</li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}