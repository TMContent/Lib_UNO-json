{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "457020349",
      "Content_Hash": "-471746170"
    },
    "Metadata": [
      {
        "Id": [
          "d45f796d-e484-487a-a34c-29ba7abb1c7c"
        ],
        "Id_History": [
          "d45f796d-e484-487a-a34c-29ba7abb1c7c,cf064d3c-d168-4de9-968e-de048c8ca046,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[VERIFYME] How to Use Forms Authentication with Active Directory in Multiple Domains"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Forms Authentication with Active Directory in Multiple Domains"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>This How to shows you how to use the ASP.NET membership feature with multiple Active Directory domains. It shows you how to configure an <em>ActiveDirectoryMembershipProvider</em> for each domain and the corresponding connection strings. It also shows how to get an instance of <em>MembershipProvider</em> corresponding to a specific domain and how to call membership APIs, such as <em>ValidateUser</em>, through the relevant provider.</p>\r\n  <h1>Contents</h1>\r\n  <ul>\r\n    <li>Objectives <li>Overview <li>Summary of Steps <li>Step 1. Create a Web Application with a Login Page <li>Step 2. Configure the Web Application for Forms Authentication <li>Step 3. Configure the Web Application to Use ActiveDirectoryMembershipProvider <li>Step 4. Use Membership APIs for Authentication <li>Security Considerations <li>Additional Considerations <li>Additional Resources</li></li></li></li></li></li></li></li></li></li>\r\n  </ul>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Use the <em>ActiveDirectoryMembershipProvider</em> with forms authentication. <li>Learn how to configure the <em>ActiveDirectoryMembershipProvider</em> when using multiple domains. <li>Learn key production considerations when using membership and forms authentication. <li>Learn key security considerations when using membership and forms authentication. </li></li></li></li>\r\n  </ul>\r\n  <h1>Overview</h1>\r\n  <p>The ASP.NET membership feature provides an abstraction for the underlying data store used to maintain user credentials, such as user names and passwords, and provides an API that enables you to validate user credentials and manage the user database. Supported membership providers include <em>SqlServerMembershipProvider</em> for SQL Server user store databases and <em>ActiveDirectoryMembershipProvider</em> for Active Directory and Active Directory Application Mode (ADAM) user stores.</p>\r\n  <p>This How to shows you how to develop a simple Web site that uses forms authentication against Active Directory in a multiple domain scenario. It shows you how to configure the <em>ActiveDirectoryMembershipProvider</em> when using multiple domains and how to authenticate users against the relevant domain controller. </p>\r\n  <h1>Summary of Steps</h1>\r\n  <p>To develop a simple application that uses forms authentication with the Active Directory membership provider in a multiple domain scenario, perform the following steps: </p>\r\n  <ul>\r\n    <li>Step 1. Create a Web application with a login page. <li>Step 2. Configure the Web application for forms authentication. <li>Step 3. Configure the Web application to use ActiveDirectoryMembershipProvider. <li>Step 4. Use Membership APIs for Authentication. </li></li></li></li>\r\n  </ul>\r\n  <h1>Step 1. Create a Web Application with a Login page </h1>\r\n  <p>When implementing forms authentication with membership in a multiple domain scenario, you cannot use the login controls provided in ASP.NET. Instead, you must directly call the membership APIs. You must create your own custom login page using the server controls like <em>TextBox</em> and <em>Button</em>. The login page enables the existing user to login and new users to register by creating new accounts.</p>\r\n  <h3>To create a Web application with a login page </h3>\r\n  <ol>\r\n    <li>Start Microsoft Visual Studio .NET development system, and then create a new ASP.NET Web site named <em>FormsAuthAD</em>. <li>Use Solution Explorer to add a new Web form named <em>Login.aspx </em>to the site. <li>Add a <em>Label</em> and a <em>TextBox</em> server control to accept the user ID. <li>Add a <em>Label</em> and a <em>TextBox</em> server control to accept the password. Make sure that you set the <em>TextMode</em> property of the <em>TextBox</em> to <em>Password</em>. <li>Add a <em>Button</em> server control and set its <em>Text</em> property to <em>Login</em>. </li></li></li></li></li>\r\n  </ol>\r\n  <h1>Step 2. Configure the Web application for Forms Authentication</h1>\r\n  <p>In this step, you configure your ASP.NET application to use forms authentication. </p>\r\n  <h3>To configure the Web application for forms authentication </h3>\r\n  <ol>\r\n    <li>Use Solution Explorer to add a <em>Web.config</em> file to your project. <li>Locate the &lt;<em>authentication</em>&gt; element and change the mode attribute to <em>Forms</em>. <li>Add the following &lt;<em>forms</em>&gt; element as a child of the &lt;<em>authentication</em>&gt; element and set the name and timeout attributes as follows. <pre>&lt;authentication mode=\"Forms\"&gt;<br />&amp;nbsp; &lt;forms<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=\".ADAuthCookie\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; timeout=\"10\" /&gt;<br />&lt;/authentication&gt;  </pre><p>If you only set the <em>mode</em> attribute on the &lt;<em>authentication</em>&gt; element and omit setting the attribute on the &lt;<em>forms</em>&gt; element, default settings are used for the &lt;<em>forms</em>&gt; configuration. You should configure only those attributes that you want to overwrite. The default settings for forms authentication as defined in the Machine.config.comments file are shown here. </p><pre>&lt;forms name=\".ASPXAUTH\" loginUrl=\"login.aspx\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultUrl=\"default.aspx\" protection=\"All\" timeout=\"30\" path=\"/\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; requireSSL=\"false\" slidingExpiration=\"true\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieless=\"UseDeviceProfile\" domain=\"\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enableCrossAppRedirects=\"false\"&gt;<br />&amp;nbsp; &lt;credentials passwordFormat=\"SHA1\" /&gt;<br />&lt;/forms&gt;  </pre><li>Add the following &lt;<em>authorization</em>&gt; element beneath the &lt;<em>authentication</em>&gt; element in your <em>Web.config</em> file, which allows all authenticated users to access the Web page. <pre>&lt;authorization&gt; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;deny users=\"?\" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;allow users=\"&amp;#42;\" /&gt;<br />&lt;/authorization&gt;  </pre><p>This configuration allows only authenticated users to access the application. The \"<em>?</em>\" indicates unauthenticated users and the \"<em>&amp;#42;</em>\" indicates all users. By denying unauthenticated users, any requests made by unauthenticated users are redirected to your login page. The <em>loginUrl</em> attribute on the &lt;<em>forms</em>&gt; element determines the name of the login page. The default setting of this attribute in <em>Machine.config.comments</em> is<em> Login.aspx</em>. </p></li></li></li></li>\r\n  </ol>\r\n  <h1>Step 3. Configure the Web Application to Use ActiveDirectoryMembershipProvider</h1>\r\n  <p>Identify all the domains that your application supports in your Active Directory forest and then configure <em>ActiveDirectoryMembershipProvider</em> instances for each domain.</p>\r\n  <h3>To configure ASP.NET Membership providers for multiple domains </h3>\r\n  <ol>\r\n    <li>\r\n      <p />In the <em>Web.config</em> file, add connection strings similar to those shown in the following example that point to your Active Directory user database for each domain. <pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name=\"TestDomain1ConnectionString\" connectionString=\"<a href=\"ldap://testdomain1.test.com/CN=Users,DC=testdomain1,DC=test,DC=com\">LDAP://testdomain1.test.com/CN=Users,DC=testdomain1,DC=test,DC=com</a>\" /&gt;<br />&amp;nbsp; &lt;add name=\"TestDomain2ConnectionString\" connectionString=\"<a href=\"ldap://testdomain2.test.com/CN=Users,DC=testdomain2,DC=test,DC=com\">LDAP://testdomain2.test.com/CN=Users,DC=testdomain2,DC=test,DC=com</a>\" /&gt;<br />&amp;nbsp; &lt;add name=\"TestDomain3ConnectionString\" connectionString=\"<a href=\"ldap://testdomain3.test.com/CN=Users,DC=testdomain3,DC=test,DC=com\">LDAP://testdomain3.test.com/CN=Users,DC=testdomain3,DC=test,DC=com</a>\" /&gt;<br />&lt;/connectionStrings&gt;  </pre><b>Note:</b>&amp;nbsp;The connection strings shown here connect to the <em>Users</em> container within three test domains. Update these strings to point to the relevant <em>Users</em> container within your domains.<b></b><li><p />In the <em>Web.config</em> file, configure the &lt;<em>membership</em>&gt; element with <em>ActiveDirectoryMembershipProvider</em> instances pointing to each domain as shown here. <pre>&lt;membership &gt;<br />&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=\"TestDomain1ADMembershipProvider\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type=\"System.Web.Security.ActiveDirectoryMembershipProvider, System.Web, Version=2.0.0.0, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName=\"TestDomain1ConnectionString\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionUsername=\"testdomain1\\administrator\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionPassword=\"password\"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=\"TestDomain2ADMembershipProvider\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type=\"System.Web.Security.ActiveDirectoryMembershipProvider, System.Web, Version=2.0.0.0, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName=\"TestDomain2ConnectionString\"&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionUsername=\"testdomain2\\administrator\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionPassword=\"password\"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=\"TestDomain3ADMembershipProvider\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type=\"System.Web.Security.ActiveDirectoryMembershipProvider, System.Web, Version=2.0.0.0, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName=\"TestDomain3ConnectionString\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionUsername=\"testdomain3\\administrator\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionPassword=\"password\"/&gt;<br />&amp;nbsp; &lt;/providers&gt;<br />&lt;/membership&gt;  </pre><p>Make sure you set the <em>connectionStringName</em> attribute to the correct connection string name specified earlier in your &lt;<em>connectionStrings</em>&gt; section. </p></li></li>\r\n  </ol>\r\n  <p />\r\n  <b>Note: </b>In the preceding example, it is assumed that you are working in a test domain and have the password of an administrator account capable of creating new accounts. The domain administrator name and password have to be supplied in plaintext. As a result, you should encrypt this configuration section along with the &lt;<em>connectionStrings</em>&gt; section. <h2>Connecting to Active Directory</h2><p>When the <em>ActiveDirectoryMembership</em> provider connects to Active Directory, it uses the account whose credentials are specified on the <em>connectionUsername</em> property (note the lower-case <i>n</i>, which is different from the <em>connectionStringName</em> property). If you specify the <em>connectionUsername</em> property, you must also specify the <em>connectionPassword</em> property, otherwise an exception is thrown. If you do not specify account credentials, Active Directory uses your ASP.NET Web application's process account.</p><p><b>Note: </b>The service account that you use to connect to Active Directory must have sufficient permissions in Active Directory. If you place your user accounts in an Active Directory organizational unit (OU), you can create and use a service account that has only read, write, and delete access on that OU (and, optionally, reset password privilege).<b></b></p><h1>Step 4. Use Membership APIs for Authentication</h1><p>The format of the user name you use when validating users depends on the <em>attributeMapUsername</em> attribute of the &lt;<em>membership</em>&gt; element. The default configuration for the <em>ActiveDirectoryMembershipProvider</em> uses user principal names (UPNs) for name mapping as shown here.</p><pre>attributeMapUsername=\"userPrincipalName\"  </pre><p>Because of this, all user names must have the format <i>UserName&amp;#64;DomainName</i>; for example, <i>mary&amp;#64;testdomain.com</i> or <i>steve&amp;#64;testdomain.com</i>.</p><p>You can change the name mapping so that it uses simple user name format by setting the following attribute in the membership provider configuration in the <em>Web.config</em> file.</p><pre>attributeMapUsername=\"sAMAccountName\"  </pre><p>With this configuration, you can use simple user names; for example, Mary or Steve.</p><h3>To extract username and domain from a UPN</h3><p>This procedure assumes you want to capture usernames of the format <i>username&amp;#64;domainname</i>. </p><ol><li>Add code to your login form to validate input and ensure that the user name is entered in the format <i>username&amp;#64;domainName</i>. For example, you could use a <em>RegularExpressionValidator</em> control like the one shown here. <pre>&lt;asp:RegularExpressionValidator id=\"unameRegex\" runat=\"server\" <br />&amp;nbsp;&amp;nbsp; ErrorMessage=\"Invalid user name. Format: <a href=\"mailto:username&amp;#64;domainName\">username&amp;#64;domainName</a>\" <br />&amp;nbsp;&amp;nbsp; ValidationExpression=\"&amp;#94;&amp;#91;\\w-&amp;#93;&amp;#43;(&amp;#91;\\. &amp;#93;&amp;#91;\\w-&amp;#93;&amp;#43;)&amp;#42;&amp;#64;\\w&amp;#43;(&amp;#91;-.&amp;#93;\\w&amp;#43;)&amp;#42;\\.\\w&amp;#43;(&amp;#91;-.&amp;#93;\\w&amp;#43;)&amp;#42;\"<br />&amp;nbsp;&amp;nbsp; ControlToValidate=\"UserNameTextBox\"&gt;<br />&lt;/asp:RegularExpressionValidator&gt;  </pre><li>Add code similar to the following to your login button click event handler. <pre>string&amp;#91;&amp;#93; partsOfUserName = UserNameTextBox.Text.Split(\"&amp;#64;\".ToCharArray());<br />string domainName = partsOfUserName&amp;#91;1&amp;#93;;  </pre></li></li></ol><h3>To extract username and domain from a simple user name</h3><p>This procedure assumes you want to capture user names of the format <i>doma</i>i<i>nName\\userName</i>. You only need a simple user name to perform authentication, but you must still know the correct domain for the user so that you can select the correct <em>ActiveDirectoryMembershipProvider</em> instance with which to validate. There are two ways you can do this: </p><ul><li>Add another <em>TextBox</em> with a suitable prompt <em>Label</em> to the login form where the user enters the domain <li>Require the user to enter his or her user name using the format <i>domainName\\userName</i>. </li></li></ul><p>The next steps assume the second approach. </p><ol><li>Add code to your login form to validate input and ensure that the user name is entered in the format <i>domainName\\userName</i>. For example, you can use a <em>RegularExpressionValidator</em> control like the one shown here. <pre>&lt;asp:RegularExpressionValidator id=\"unameRegex\" runat=\"server\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage=\"Invalid user name. Format: domainName\\username\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ValidationExpression=\"&amp;#94;\\w&amp;#43;(&amp;#91;-.&amp;#93;\\w&amp;#43;)&amp;#42;\\\\&amp;#91;\\w-&amp;#93;&amp;#43;(&amp;#91;\\. &amp;#93;&amp;#91;\\w-&amp;#93;&amp;#43;)&amp;#42;\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate=\"UserNameTextBox\"&gt;<br />&amp;nbsp; &lt;/asp:RegularExpressionValidator&gt;  </pre><li>Add code similar to the following to your login button click event handler. <pre>string&amp;#91;&amp;#93; partsOfUserName = UserNameTextBox.Text.Split(\"\\\\\".ToCharArray());<br />string domainName = partsOfUserName&amp;#91;0&amp;#93;;<br />string userName = partsofUserName&amp;#91;1&amp;#93;;  </pre></li></li></ol><h3>To authenticate users </h3><p>Add code to your login form to validate input and ensure that the user name is entered in the format <i>username&amp;#64;domainName</i>. For example, use a <em>RegularExpressionValidator</em> control. After the code you just entered to extract the username and domain, add code similar to the following to your login button click event handler. </p><pre>MembershipProvider domainProvider;<br />switch (domainName)<br />&amp;#123;<br />&amp;nbsp; case \"TestDomain1.test.com\":<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; domainProvider = Membership.Providers&amp;#91;\"TestDomain1ADMembershipProvider\"&amp;#93;;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;<br /><br />&amp;nbsp; case \"TestDomain2.test.com\":<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; domainProvider = Membership.Providers&amp;#91;\"TestDomain2ADMembershipProvider\"&amp;#93;;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;<br /><br />&amp;nbsp; case \"TestDomain3.test.com\":<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; domainProvider = Membership.Providers&amp;#91;\"TestDomain3ADMembershipProvider\"&amp;#93;;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;<br /><br />&amp;nbsp; default:<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw(new Exception(\"This domain is not supported\"));<br />&amp;#125;<br /><br />// Validate the user with the membership system.<br />if(domainProvider.ValidateUser(UserNameTextBox.Text, PasswordTextBox.Text))<br />&amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // If there is a RequestUrl query string attribute, the user has<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // been redirected to the login page by forms authentication after<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // requesting another page while not authenticated.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (Request.QueryString&amp;#91;\"ReturnUrl\"&amp;#93; &amp;#33;= null)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // RedirectFromLoginPage sets the authorization cookie and then<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // redirects to the page the user originally requested.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set second parameter to false so cookie is not persistent<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // across sessions.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FormsAuthentication.RedirectFromLoginPage(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UserNameTextBox.Text, false);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // If there is no RequestUrl query string attribute, just set<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // the authentication cookie. Provide navigation on the login page<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // to pages that require authentication, or user can use browser<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // to navigate to protected pages. <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set second parameter to false so cookie is not persistent<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // across sessions.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FormsAuthentication.SetAuthCookie(UserNameTextBox.Text, false);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;#125;<br />else<br />&amp;#123;<br />&amp;nbsp; Response.Write(\"Invalid UserID and Password\");<br />&amp;#125;  </pre><h1>Security Considerations</h1><p>Failing to protect authentication tickets is a common vulnerability that can lead to unauthorized spoofing and impersonation, session hijacking, and elevation of privilege. When you use forms authentication, consider the following recommendations to help ensure a secure authentication approach: </p><ul><li><b>Restrict the authentication cookie to HTTPS connections.</b> To prevent forms authentication cookies from being captured and tampered with while crossing the network, ensure that you use Secure Sockets Layer (SSL) with all pages that require authenticated access and restrict forms authentication tickets to SSL channels. <li><b>Partition the site for SSL.</b> This allows you to avoid using SSL for the entire site.<b></b><li><b>Do not persist forms authentication cookies. </b>Do not persist authentication cookies because they are stored in the user's profile on the client computer and can be stolen if an attacker gets physical access to the user's computer <li><b>Consider reducing ticket lifetime. </b>Consider reducing the cookie lifetime to reduce the time window in which an attacker can use a captured cookie to gain access to your application with a spoofed identity. <li><b>Consider using a fixed expiration.</b> In scenarios where you cannot use SSL, consider setting <em>slidingExpiration=\"false\"</em>. <li><b>Enforce strong user management policies.</b> Use and enforce strong passwords for all user accounts to ensure that people cannot guess one another's passwords and to mitigate the risk posed by dictionary attacks. <li><b>Enforce password complexity rules.</b> Validate passwords entered through the <em>CreateUserWizard</em> control, by setting its <em>PasswordRegularExpression</em> property to an appropriate regular expression. Also configure the membership provider on the server to use the same regular expression.<b></b><li><b>Perform effective data validation on all requests.</b> Perform strict data validation to minimize the possibilities of SQL injection and cross-site scripting. <li><b>Use distinct cookie names and paths.</b> By ensuring unique cookie names and paths, you prevent possible problems that can occur when hosting multiple applications on the same server. <li><b>Keep authentication and personalization cookies separate.</b> Keep personalization cookies that contain user-specific preferences and non-sensitive data separate from authentication cookies. <li><b>Use absolute URLs for navigation. </b>This is to avoid potential issues caused by redirecting from HTTP to HTTPS pages. </li></li></li></li></li></li></li></li></li></li></li></ul><h1>Additional Considerations</h1><p>The <em>ActiveDirectoryMembershipProvider</em> supports many more attributes than those described in this How to. </p><hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}