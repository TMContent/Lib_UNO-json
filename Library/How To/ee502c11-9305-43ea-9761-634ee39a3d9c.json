{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1267264695",
      "Content_Hash": "-680596672"
    },
    "Metadata": [
      {
        "Id": [
          "ee502c11-9305-43ea-9761-634ee39a3d9c"
        ],
        "Id_History": [
          "ee502c11-9305-43ea-9761-634ee39a3d9c,c6cd3529-fc12-49f8-91c3-ee5a65b1ee7b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Prevent SQL Injection"
        ],
        "Category": [
          "Database Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Prevent SQL Injection"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP,SQL, SQLi,SQL Injection"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "markdown"
        },
        "Data": [
          "## Applies To ##\r\n\r\n- ASP.NET 4.0 and Higher\r\n\r\n## Summary ##\r\n\r\nThis How to shows a number of ways to help protect your ASP.NET application from SQL injection attacks. SQL injection can occur when an application uses input to construct dynamic SQL statements. Successful SQL injection attacks enable malicious users to execute arbitrary queries on the application's database.\r\n\r\nCountermeasures include validating input, using parameterized SQL for data access, and using a least privileged account that has restricted permissions in the database. Using stored procedures with parameterized SQL is the recommended approach because SQL parameters are type safe. Type-safe SQL parameters can also be used with dynamic SQL. \r\n\r\n\r\n## Overview ##\r\n\r\nA successful SQL injection attack enables a malicious user to execute queries on your application's database by using the privileges granted to your application's login. The problem is more severe if your application uses an over-privileged account to connect to the database. For example, if your application's login has privileges to eliminate a database, then without adequate safeguards, an attacker might be able to perform this operation.\r\n\r\nCommon vulnerabilities that make your data access code susceptible to SQL injection attacks include:\r\n\r\n- Weak input validation.\r\n- Dynamic construction of SQL statements without the use of type-safe parameters.\r\n- Use of over-privileged database logins.\r\n\r\n\r\n### Step 1. Constrain Input ###\r\n\r\nYou should validate all input to your ASP.NET applications for type, length, format, and range. By constraining the input used in your data access queries, you can protect your application from SQL injection.\r\n\r\nNote: When constraining input, it is a good practice to create a list of acceptable characters and use regular expressions to reject any characters that are not on the list. The potential risk associated with using a list of unacceptable characters is that it is always possible to overlook an unacceptable character when defining the list; also, an unacceptable character can be represented in an alternate format to pass validation.\r\n\r\n\r\n### Constrain Input in ASP.NET Web Pages ###\r\n\r\nStart by constraining input in the server-side code for your ASP.NET Web pages. Do not rely on client-side validation because it can be easily bypassed. Use client-side validation only to reduce round trips and to improve the user experience.\r\n\r\nIf you use server controls, use the ASP.NET validator controls, such as the `RegularExpressionValidator` and `RangeValidator` controls to constrain input. If you use regular HTML input controls, use the Regex class in your server-side code to constrain input.\r\n\r\nIf in the previous code example, the SSN value is captured by an ASP.NET TextBox control, you can constrain its input by using a `RegularExpressionValidator` control as shown in the following.\r\n\r\n\t<%@ language=\"C#\" %>\r\n\t<form id=\"form1\" runat=\"server\">\r\n\t\t<asp:TextBox ID=\"SSN\" runat=\"server\"/>\r\n\t\t<asp:RegularExpressionValidator ID=\"regexpSSN\" runat=\"server\"         \r\n\t\t\t ErrorMessage=\"Incorrect SSN Number\" \r\n\t\t\t ControlToValidate=\"SSN\"         \r\n\t\t\t ValidationExpression=\"^\\d{3}-\\d{2}-\\d{4}$\" />\r\n\t</form>  \r\n\r\nIf the SSN input is from another source, such as an HTML control, a query string parameter, or a cookie, you can constrain it by using the `Regex` class from the `System.Text.RegularExpressions` namespace. The following example assumes that the input is obtained from a cookie.\r\n\r\n\tusing System.Text.RegularExpressions;\r\n\r\n\tif (Regex.IsMatch(Request.Cookies[\"SSN\"], \"^\\d{3}-\\d{2}-\\d{4}$\"))\r\n\t{\r\n\t\t// access the database\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// handle the bad input\r\n\t}  \r\n\r\n\t\r\n### Constrain Input in Data Access Code ###\r\n\r\nIn some situations, you need to provide validation in your data access code, perhaps in addition to your ASP.NET page-level validation. Two common situations where you need to provide validation in your data access code are:\r\n\r\n- Untrusted clients. If the data can come from an untrusted source or you cannot guarantee how well the data has been validated and constrained, add validation logic that constrains input to your data access routines.\r\n- Library code. If your data access code is packaged as a library designed for use by multiple applications, your data access code should perform its own validation, because you can make no safe assumptions about the client applications.\r\n\r\nThe following example shows how a data access routine can validate its input parameters by using regular expressions prior to using the parameters in a SQL statement.\r\n\r\n\tusing System;\r\n\tusing System.Text.RegularExpressions;\r\n\r\n\tpublic void CreateNewUserAccount(string name, string password)\r\n\t{\r\n\t\t// Check name contains only lower case or upper case letters, \r\n\t\t// the apostrophe, a dot, or white space. Also check it is \r\n\t\t// between 1 and 40 characters long\r\n\t\tif ( !Regex.IsMatch(userIDTxt.Text, @\"^[a-zA-Z'./s]{1,40}$\"))\r\n\t\t  throw new FormatException(\"Invalid name format\");\r\n\r\n\t\t// Check password contains at least one digit, one lower case \r\n\t\t// letter, one uppercase letter, and is between 8 and 10 \r\n\t\t// characters long\r\n\t\tif ( !Regex.IsMatch(passwordTxt.Text, \r\n\t\t\t@\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\" ))\r\n\t\t  throw new FormatException(\"Invalid password format\");\r\n\r\n\t\t// Perform data access logic (using type safe parameters)\r\n\t\t...\r\n\t}\r\n\r\n\r\n### Step 2. Use Parameters with Stored Procedures ###\r\n\r\nUsing stored procedures does not necessarily prevent SQL injection. The important thing to do is use parameters with stored procedures. If you do not use parameters, your stored procedures can be susceptible to SQL injection if they use unfiltered input as described in the \"Overview\" section of this document.\r\n\r\nThe following code shows how to use `SqlParameterCollection` when calling a stored procedure.\r\n\r\n\tusing System.Data;\r\n\tusing System.Data.SqlClient;\r\n\r\n\tusing (SqlConnection connection = new SqlConnection(connectionString))\r\n\t{\r\n\t  DataSet userDataset = new DataSet();\r\n\t  SqlDataAdapter myCommand = new SqlDataAdapter( \r\n\t\t\t\t \"LoginStoredProcedure\", connection);\r\n\t  myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;\r\n\t  myCommand.SelectCommand.Parameters.Add(\"@au_id\", SqlDbType.VarChar, 11);\r\n\t  myCommand.SelectCommand.Parameters[\"@au_id\"].Value = SSN.Text;\r\n\r\n\t  myCommand.Fill(userDataset);\r\n\t}  \r\n\r\nIn this case, the @au_id parameter is treated as a literal value and not as executable code. Also, the parameter is checked for type and length. In the preceding code example, the input value cannot be longer than 11 characters. If the data does not conform to the type or length defined by the parameter, the `SqlParameter` class throws an exception.\r\n\r\n\r\n### Review Your Application's Use of Parameterized Stored Procedures ###\r\n\r\nBecause using stored procedures with parameters does not necessarily prevent SQL injection, you should review your application's use of this type of stored procedure. For example, the following parameterized stored procedure is unsafe:\r\n\r\n\tCREATE PROCEDURE dbo.RunQuery(@var ntext) AS\r\n\texec sp_executesql @var;\r\n\r\nThis stored procedure ultimately concatenates data passed to it into SQL syntax, thus negating parameterization. Consider the @var variable being set to: `DROP TABLE ORDERS;` In this case, the ORDERS table will be dropped. The main principle for preventing SQL injection is never concatenating untrusted data into SQL syntax or in other words never treating data as SQL syntax. In this example, data is being treated as SQL syntax.\r\n\r\n\r\n### Step 3. Use Parameters with Dynamic SQL ###\r\n\r\nIf you cannot use stored procedures, you should still use parameters when constructing dynamic SQL statements. The following code shows how to use the `SqlParametersCollection` with dynamic SQL.\r\n\r\n\tusing System.Data;\r\n\tusing System.Data.SqlClient;\r\n\r\n\tusing (SqlConnection connection = new SqlConnection(connectionString))\r\n\t{\r\n\t  DataSet userDataset = new DataSet();\r\n\t  SqlDataAdapter myDataAdapter = new SqlDataAdapter(\r\n\t\t\t \"SELECT au_lname, au_fname FROM Authors WHERE au_id = @au_id\", \r\n\t\t\t connection);                \r\n\t  myCommand.SelectCommand.Parameters.Add(\"@au_id\", SqlDbType.VarChar, 11);\r\n\t  myCommand.SelectCommand.Parameters[\"@au_id\"].Value = SSN.Text;\r\n\t  myDataAdapter.Fill(userDataset);\r\n\t}\r\n\r\n\r\n### Using Parameter Batching ###\r\n\r\nA common misconception is that if you concatenate several SQL statements to send a batch of statements to the server in a single round trip, you cannot use parameters. However, you can use this technique if you make sure that parameter names are not repeated. You can easily do this by making sure that you use unique parameter names during SQL text concatenation, as shown here.\r\n\r\n\tusing System.Data;\r\n\tusing System.Data.SqlClient;\r\n\t...\r\n\tusing (SqlConnection connection = new SqlConnection(connectionString))\r\n\t{\r\n\t  SqlDataAdapter dataAdapter = new SqlDataAdapter(\r\n\t\t   \"SELECT CustomerID INTO #Temp1 FROM Customers \" +\r\n\t\t   \"WHERE CustomerID > @custIDParm; SELECT CompanyName FROM Customers \" +\r\n\t\t   \"WHERE Country = @countryParm and CustomerID IN \" +\r\n\t\t   \"(SELECT CustomerID FROM #Temp1);\",\r\n\t\t   connection);\r\n\t  SqlParameter custIDParm = dataAdapter.SelectCommand.Parameters.Add(\r\n\t\t\t\t\t\t\t\t\t\t\t  \"@custIDParm\", SqlDbType.NChar, 5);\r\n\t  custIDParm.Value = customerID.Text;\r\n\r\n\t  SqlParameter countryParm = dataAdapter.SelectCommand.Parameters.Add(\r\n\t\t\t\t\t\t\t\t\t\t  \"@countryParm\", SqlDbType.NVarChar, 15);\r\n\t  countryParm.Value = country.Text;\r\n\r\n\t  connection.Open();\r\n\t  DataSet dataSet = new DataSet();\r\n\t  dataAdapter.Fill(dataSet);\r\n\t}\r\n\t...  \r\n\r\n\r\n### Avoid Disclosing Error Information ###\r\n\r\nUse structured exception handling to catch errors and prevent them from propagating back to the client. Log detailed error information locally, but return limited error details to the client.\r\n\r\nIf errors occur while the user is connecting to the database, be sure that you provide only limited information about the nature of the error to the user. If you disclose information related to data access and database errors, you could provide a malicious user with useful information that he or she can use to compromise your database security. Attackers use the information in detailed error messages to help deconstruct a SQL query that they are trying to inject with malicious code. A detailed error message may reveal valuable information such as the connection string, SQL server name, or table and database naming conventions.\r\n\r\n---\r\n\r\nAdapted from Microsoft patterns & practices guidance.\r\n"
        ]
      }
    ]
  }
}