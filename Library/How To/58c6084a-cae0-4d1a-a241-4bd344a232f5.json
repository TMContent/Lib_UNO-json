{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1426004683",
      "Content_Hash": "-1821203979"
    },
    "Metadata": [
      {
        "Id": [
          "58c6084a-cae0-4d1a-a241-4bd344a232f5"
        ],
        "Id_History": [
          "58c6084a-cae0-4d1a-a241-4bd344a232f5,9a463c4e-7255-4e0e-9ffd-3eb063e8f1ed,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "0sink How to Generate A Random Number"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Generate A Random Number"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Description</h1>\r\n  <p>If you need to generate encryption keys programmatically, use the <b>RNGCryptoServiceProvider</b> class to create keys and initialization vectors and do not use the <b>Random</b> class. Unlike the <b>Random</b> class, <b>RNGCryptoServiceProvider</b> creates cryptographically strong random numbers that are FIPS-140 compliant. The following code example shows how to use this function. </p>\r\n  <pre>\r\n    <pre>using System.Security.Cryptography;<br />. . .<br />RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();<br />byte&amp;#91;&amp;#93; key = new byte&amp;#91;keySize&amp;#93;;rng.GetBytes(key);</pre>\r\n  </pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}