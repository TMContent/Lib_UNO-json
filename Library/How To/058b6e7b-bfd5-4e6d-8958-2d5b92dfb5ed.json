{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "905408629",
      "Content_Hash": "-1929583414"
    },
    "Metadata": [
      {
        "Id": [
          "058b6e7b-bfd5-4e6d-8958-2d5b92dfb5ed"
        ],
        "Id_History": [
          "058b6e7b-bfd5-4e6d-8958-2d5b92dfb5ed,e81ac2ef-15b0-4b87-b2d2-9c9a04405ec4,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Delay-sign An Assembly With A Strong Name"
        ],
        "Category": [
          "Hardening"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Delay-sign An Assembly With A Strong Name"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Description</h1>\n  <p>By using delay signing, you can restrict access to your company's private key. Members of the development team only require access to your company's public key. Use .snk files if you need to delay sign your assemblies. </p>\n  <ul>\n    <li>Create a key pair for your organization with the following command:</li>\n  </ul>\n  <pre>sn.exe -k keypair.snk </pre>\n  <ul>\n    <li>Use the following command to extract the public key from the key pair file:</li>\n  </ul>\n  <pre>sn -p keypair.snk publickey.snk </pre>\n  <p>Secure Keypair.snk, which contains both the private and public keys. For example, put it on a compact disc, and physically secure it. Then make Publickey.snk available to all developers. For example, put it on a network share. </p>\n  <p>To delay sign the assembly, click the <b>Signing</b> tab from the project properties page in Visual Studio, and then select the <b>Sign the assembly</b> and <b>Delay sign only</b> check boxes. Select your strong-name key file and then build your assembly. </p>\n  <blockquote>\n    <b>Note</b>&nbsp;&nbsp;&nbsp;A delay-signed project will not run and cannot be debugged. You can, however, use the Strong Name Tool (Sn.exe) with the <b>-Vr</b> option to skip verification during development.</blockquote>\n  <p>The delay signing process and the absence of an assembly signature mean that the assembly will fail verification at load time. To work around this, to disable verification for a specific assembly, use the following command: </p>\n  <pre>sn -Vr assembly.dll </pre>\n  <p>To disable verification for all assemblies that have a particular public key, use the following command: </p>\n  <pre>sn -Vr &#42;,publickeytoken </pre>\n  <p>To extract the public key and key token (a truncated hash of the public key), use the following command: </p>\n  <pre>sn -Tp assembly.dll </pre>\n  <blockquote>\n    <b>Note</b>&nbsp;&nbsp;&nbsp;Use an uppercase <b>-T</b> switch.<b></b></blockquote>\n  <p>To fully complete the signing process and create a digital signature to restrict access to the assembly, use the following command. This requires the private key, and as a result, the operation is normally performed as part of the formal build and release process. The following command re-signs an assembly called Assembly.dll with a strong name using the Keypair.snk key file. </p>\n  <pre>sn -R assembly.dll keypair.snk </pre>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}