{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1316892315",
      "Content_Hash": "514875976"
    },
    "Metadata": [
      {
        "Id": [
          "040f5c69-406a-41c7-8fb6-f8cb88fb61c0"
        ],
        "Id_History": [
          "040f5c69-406a-41c7-8fb6-f8cb88fb61c0,595a4417-27c7-4c4f-b050-566149f04c06,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Authorize Users Against Windows Groups Using the AspNetWindowsTokenRoleProvider"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Authorize Users Against Windows Groups Using the AspNetWindowsTokenRoleProvider"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>If you use windows groups for authorization, consider using ASP.NET Role Provider with the AspNetWindowsTokenRoleProvider name. This allows you to separate the design of the authorization from the implementation inside your service. If you decide to change the role provider, it will not affect the code needed to perform the authorization. Also, when doing imperative checks, consider using the role manager API instead of performing authorization checks with WindowsPrincipal.IsInrole. </p>\r\n  <p>The following configuration example shows how to configure AspNetWindowsTokenRoleProvider.</p>\r\n  <ol>\r\n    <li>Enable the role manager and configure to use the default AspNetWindowsTokenRoleProvider:<ol><pre>&lt;system.web&gt;<br />&#8230;<br />&lt;roleManager enabled=\"true\"<br />defaultProvider=\"AspNetWindowsTokenRoleProvider\" /&gt;<br />&#8230;<br />&lt;/system.web&gt;</pre></ol><li>Configure the service behavior to use ASPNetRoles and the role provider:<ol><pre>&lt;behaviors&gt;<br />    &lt;serviceBehaviors&gt;<br />        &lt;behavior name=\"BehaviorConfiguration\"&gt;<br />            &lt;serviceAuthorization principalPermissionMode=\"UseAspNetRoles\"<br />                roleProviderName=\" AspNetWindowsTokenRoleProvider \" /&gt;<br />            &lt;serviceMetadata /&gt;<br />        &lt;/behavior&gt;<br />    &lt;/serviceBehaviors&gt;<br />&lt;/behaviors&gt;<br /></pre></ol></li></li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on authorization, see &#8220;Authorization&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms733071.aspx\">http://msdn2.microsoft.com/en-us/library/ms733071.aspx</a><li>For Roles.IsUserInRole method information, see <a href=\"http://msdn.microsoft.com/en-us/library/4z6b5d42.aspx\">http://msdn.microsoft.com/en-us/library/4z6b5d42.aspx</a><li>For authorization Guidelines, see the Authorization section of &#8220;WCF 3.5 Guidelines &#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home</a></li></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}