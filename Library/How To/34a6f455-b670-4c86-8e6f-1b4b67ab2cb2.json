{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-751718359",
      "Content_Hash": "-423510722"
    },
    "Metadata": [
      {
        "Id": [
          "34a6f455-b670-4c86-8e6f-1b4b67ab2cb2"
        ],
        "Id_History": [
          "34a6f455-b670-4c86-8e6f-1b4b67ab2cb2,ca687970-40c1-403b-8268-bfbcc9e36b2a,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Use Hashing"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Hashing"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Description</h1>\r\n  <p>Use a hashing algorithm, such as SHA256 or MD5, when you need a principal to prove it knows a secret that it shares with you. The following code example shows how to use a hashing algorithm, such as SHA256, to hash data. </p>\r\n  <pre>using System.Security.Cryptography;...<br />// Create a new instance of the hash crypto service provider.<br />HashAlgorithm hashAlg = new SHA256CryptoServiceProvider(); <br />// Convert the data to hash to an array of Bytes.<br />byte&#91;&#93; bytValue = System.Text.Encoding.UTF8.GetBytes(stringDataToHash);<br />// Compute the Hash. This returns an array of Bytes.<br />byte&#91;&#93; bytHash = hashAlg.ComputeHash(bytValue);<br />// Optionally, represent the hash value as a base64-encoded string, <br />// For example, if you need to display the value or transmit it over a network.<br />string base64 = Convert.ToBase64String(bytHash);  </pre>\r\n  <p>When you have computed and stored a hash value for a password (for example), you can check that a caller knows the password by prompting for the password, using the supplied data to recalculate the hash value, and then comparing the result to the stored hash. </p>\r\n  <blockquote>\r\n    <b>Note</b>&nbsp;&nbsp;&nbsp;Password hashing enables you to verify&#8212;but not retrieve&#8212;a password value.</blockquote>\r\n  <p>If you use hashes to store passwords in a database, you should combine the password with a random salt value before computing the hash. You can compute the salt value by using the <b>RNGCryptoServiceProvider</b> class, as shown in the following code example. </p>\r\n  <pre>using System.Security.Cryptography;...<br />private static string CreateSalt(int size)&#123;<br />    // Generate a cryptographic random number using the cryptographic <br />    // service provider<br />    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();<br />    byte&#91;&#93; buff = new byte&#91;size&#93;;<br />    rng.GetBytes(buff);<br />    // Return a Base64 string representation of the random number<br />    return Convert.ToBase64String(buff);<br />&#125;  </pre>\r\n  <blockquote>\r\n    <b>Note</b>&nbsp;&nbsp;&nbsp;If you use the ASP.NET SQL Server membership provider, you can configure it to store password hashes with added salt by setting <b>passwordFormat=\"Hashed\"</b> on the provider configuration.&nbsp;</blockquote>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}