{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "936615468",
      "Content_Hash": "-1013472532"
    },
    "Metadata": [
      {
        "Id": [
          "dd581f52-80a4-4cdf-81f4-7f374ea636a8"
        ],
        "Id_History": [
          "dd581f52-80a4-4cdf-81f4-7f374ea636a8,d0b51749-29be-42d1-badd-48bb5b76096d,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "[SINK] How to Use Forms Authentication with SQL Server in ASP.NET"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Forms Authentication with SQL Server in ASP.NET"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASP.NET 3.5"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>SQL Server </li>\n  </ul>\n  <h1>Summary</h1>\n  <p>This How to shows you how you can use forms authentication with the SQL Server membership provider. Forms authentication with SQL Server is most applicable in situations where users of your application are not part of your Windows domain, and as a result, they do not have Active Directory accounts. This How to explains how to create a login page using the new membership <b>Login</b> control, configure your Web application to use forms authentication, create the user store database, grant database access to your Web application account, configure ASP.NET membership settings, and set password complexity rules.</p>\n  <h1>Contents</h1>\n  <ul>\n    <li>\n      <div>Objectives</div>\n      <li>\n        <div>Overview</div>\n        <li>\n          <div>Summary of Steps</div>\n          <li>\n            <div>Step 1. Create a Web Application with a Login Page</div>\n            <li>\n              <div>Step 2. Configure the Web Application for Forms Authentication</div>\n              <li>\n                <div>Step 3. Configure ASP.NET for Membership</div>\n                <li>\n                  <div>Step 4. Test the Forms Authentication</div>\n                  <li>\n                    <div>Deployment Considerations</div>\n                    <li>\n                      <div>Security Considerations</div>\n                      <li>\n                        <div>Additional Considerations</div>\n                        <li>\n                          <div>Additional Resources</div>\n                        </li>\n                      </li>\n                    </li>\n                  </li>\n                </li>\n              </li>\n            </li>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ul>\n  <h1>Objectives</h1>\n  <ul>\n    <li>Use the <b>SqlMembershipProvider</b> with forms authentication. <li>Set up the SQL Server membership database. <li>Restrict the forms authentication cookie to HTTPS connections. <li>Use the membership feature to enforce password complexity rules. <li>Learn key production considerations when using membership and forms authentication. <li>Learn key security considerations when using membership and forms authentication. </li></li></li></li></li></li>\n  </ul>\n  <h1>Overview</h1>\n  <p>The ASP.NET membership feature provides an abstraction for the underlying data store used to maintain user credentials such as user names and passwords, and it provides an API that allows you to easily validate user credentials and manage the user database. ASP.NET supports SQL Server and Active Directory providers, and you can also create your own providers for custom stores.</p>\n  <p>This How to shows you how to develop a simple Web site that uses forms authentication with the SQL Server membership provider. This provider uses an underlying SQL Server database as its user store.</p>\n  <h1>Summary of Steps</h1>\n  <p>To develop a simple application that uses forms authentication with the SQL Server membership provider, perform the following steps: </p>\n  <ul>\n    <li>Step 1. Create a Web application with a login page. <li>Step 2. Configure the Web application for forms authentication. <li>Step 3. Configure ASP.NET for membership. <li>Step 4. Test the forms authentication. </li></li></li></li>\n  </ul>\n  <h1>Step 1. Create a Web Application with a Login Page </h1>\n  <p>In this step, you create a simple Web application with a default page and a login page. The login page allows existing users to login and new users to register by creating new accounts.</p>\n  <h3>To create a Web application with a login page </h3>\n  <ol>\n    <li>Start Visual Studio .NET and create a new ASP.NET Web site named FormsAuthSQL. <li>Use Solution Explorer to add a new Web form named Login.aspx to the site. <li>Add a <b>Login</b> control to Login.aspx. <p>By default, this control displays user name and password fields and a <b>Remember me next time</b> check box. If the user selects this check box, a persistent authentication cookie is created and the user's browser stores it on the user's hard disk. </p><p>To prevent an attacker from stealing an authentication cookie from the client's computer, you should generally not create persistent authentication cookies. To disable this feature, set the <b>DisplayRememberMe</b> property of the <b>Login</b> control to <b>false</b>. </p><p>Note that when a user clicks <b>login</b> on the <b>Login</b> control, it automatically validates the user by calling the configured membership provider, creates a forms authentication ticket, and then redirects the user back to the originally requested page. It executes code similar to the following example. </p><div><pre>if (Membership.ValidateUser(username, password))<br />&amp;#123;<br />&amp;nbsp; // User has supplied valid credentials<br />&amp;nbsp; // In the following method call, the second Boolean parameter <br />&amp;nbsp; // determines whether a persistent authentication cookie<br />&amp;nbsp; // is created.<br />&amp;nbsp; FormsAuthentication.RedirectFromLoginPage(username,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rememberMeIsChecked);<br />&amp;#125;  </pre></div><li>Add a <b>CreateUserWizard</b> control beneath the <b>Login</b> control to allow new users to register with your site and create new accounts. </li></li></li></li>\n  </ol>\n  <h1>Step 2. Configure the Web Application for Forms Authentication </h1>\n  <p>In this step, you configure the ASP.NET application to use forms authentication.</p>\n  <h3>To configure the Web application for forms authentication </h3>\n  <ol>\n    <li>Use Solution Explorer to add a Web.config file to your project. <li>Locate the &lt;<b>authentication</b>&gt; element, and then change the <b>mode</b> attribute to <b>\"Forms\"</b>. <li>Add the following &lt;<b>forms</b>&gt; element as a child of the &lt;<b>authentication</b>&gt; element, and then set the <b>name</b> and <b>timeout</b> attributes as follows. <div><pre>&lt;authentication mode=\"Forms\"&gt;<br />&amp;nbsp; &lt;forms<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=\"SqlAuthCookie\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; timeout=\"10\" /&gt;<br />&lt;/authentication&gt;  </pre></div><p>If you just set the <b>mode</b> attribute of the &lt;<b>authentication</b>&gt; element and omit the &lt;<b>forms</b>&gt; element, default settings are used for the &lt;<b>forms</b>&gt;<b></b>configuration. You should configure only those attributes that you need to overwrite. The default settings for forms authentication as defined in the Machine.config.comments file are shown here. </p><div><pre>&lt;forms name=\".ASPXAUTH\" loginUrl=\"login.aspx\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultUrl=\"default.aspx\" protection=\"All\" timeout=\"30\" path=\"/\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; requireSSL=\"false\" slidingExpiration=\"true\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieless=\"UseDeviceProfile\" domain=\"\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enableCrossAppRedirects=\"false\"&gt;<br />&amp;nbsp; &lt;credentials passwordFormat=\"SHA1\" /&gt;<br />&lt;/forms&gt;  </pre></div><li>Add the following &lt;<b>authorization</b>&gt; element under the &lt;<b>authentication</b>&gt;<b></b>element in the Web.config file. This allows all authenticated users to access your Web site. <div><pre>&lt;authorization&gt; <br />&amp;nbsp; &lt;deny users=\"?\" /&gt;<br />&amp;nbsp; &lt;allow users=\"&amp;#42;\" /&gt;<br />&lt;/authorization&gt;  </pre></div><p>The preceding configuration allows only authenticated users to access the application. The <b>\"?\"</b> indicates unauthenticated users and the <b>\"&amp;#42;\"</b> indicates all users. By denying unauthenticated users, any requests made by unauthenticated users are redirected to the login page. The <b>loginUrl</b> attribute of the &lt;<b>forms</b>&gt; element determines the name of the login page. The default setting of this attribute in the Machine.config.comments file is Login.aspx. </p></li></li></li></li>\n  </ol>\n  <h1>Step 3. Configure ASP.NET for Membership</h1>\n  <p>In this step, you configure the SQL Server membership provider by performing the following actions: </p>\n  <ul>\n    <li>Create a user store database. <li>Grant database access to your Web application account. <li>Configure ASP.NET membership settings. </li></li></li>\n  </ul>\n  <h2>Create a User Store Database</h2>\n  <p>The SQL Server membership provider stores user information in a SQL Server database. You can create your SQL Server user store manually by using Aspnet_regsql.exe from the command line. Alternatively, you can run Aspnet_regsql.exe in Wizard mode or use the ASP.NET Web Site Configuration tool available on the <b>Website</b> menu in Visual Studio.</p>\n  <h3>To create the user store database</h3>\n  <p>Use Aspnet_regsql.exe to create the membership database. From a Visual Studio command prompt, run the following command.</p>\n  <p>\n    <b>aspnet_regsql -S (local) -E -A m</b>\n  </p>\n  <p>\n    <b>-S</b> specifies the server, which is <b>(local)</b> in this example.</p>\n  <p>\n    <b>-E</b> specifies to use Windows authentication to connect to SQL Server.</p>\n  <p>-<b>A m</b> specifies to add only the membership feature. For simple authentication against a SQL Server user store, only the membership feature is required.</p>\n  <p>For a complete list of the commands, run <b>Aspnet_regsql /?</b>.</p>\n  <h3>Expected Results</h3>\n  <p>If the Aspnetdb database does not exist, two database files are created: </p>\n  <ul>\n    <li>Aspnetdb.mdf <li>Aspnetdb_log.LDF </li></li>\n  </ul>\n  <p>Within the Aspnetdb database, the following tables are created if they do not exist: </p>\n  <ul>\n    <li>aspnet_Applications <li>aspnet_Membership <li>aspnet_SchemaVersions <li>aspnet_Users </li></li></li></li>\n  </ul>\n  <h2>Grant Database Access to Your Web Application Account</h2>\n  <p>Your Web application process account requires access to the Aspnetdb database. If you run your application under Microsoft Internet Information Services (IIS) 6.0 on Windows Server 2003 or later, the NT AUTHORITY\\Network Service account is used by default to run Web applications.</p>\n  <h3>To grant database access </h3>\n  <ol>\n    <li>Create a SQL Server login for NT AUTHORITY\\Network Service. <li>Grant the login access to the Aspnetdb database by creating a database user. <li>Add the user to the <b>aspnet_Membership_FullAccess</b> database role. </li></li></li>\n  </ol>\n  <p>You can perform these steps by using Enterprise Manager or you can run the following script in SQL Query Analyzer.</p>\n  <div>\n    <pre>-- Create a SQL Server login for the Network Service account<br />sp_grantlogin 'NT AUTHORITY\\Network Service'</pre>\n    <pre>-- Grant the login access to the membership database<br />USE aspnetdb<br />GO<br />sp_grantdbaccess 'NT AUTHORITY\\Network Service', 'Network Service'</pre>\n    <pre>-- Add user to database role<br />USE aspnetdb<br />GO<br />sp_addrolemember 'aspnet_Membership_FullAccess', 'Network Service'  </pre>\n  </div>\n  <h2>Configure ASP.NET Membership Settings</h2>\n  <p>In this step, you specify membership settings for the Web site.</p>\n  <h3>To configure the Membership settings </h3>\n  <ol>\n    <li>In the Web.config file, add a connection string similar to the following to point to your membership database. <div><pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name=\"MyLocalSQLServer\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString=\"Initial Catalog=aspnetdb;data source=localhost;<br />&amp;#9;&amp;#9;&amp;#9;&amp;#9;&amp;#9;Integrated Security=SSPI;\" /&gt;<br />&lt;/connectionStrings&gt;  </pre></div><p>In this case, MyLocalSQLServer is the name you will use for this connection. Set the <b>connectionString</b> attribute to the membership database you created earlier. </p><li>Add a &lt;<b>membership</b>&gt; element after the &lt;<b>authorization</b>&gt; element as shown in the following example. Note the use of the &lt;<b>clear/</b>&gt; element. This prevents the default provider from being loaded and then never used. <div><pre>&lt;membership defaultProvider=\"MySqlMembershipProvider\" &gt;<br />&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;clear/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name=\"MySqlMembershipProvider\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName=\"MyLocalSQLServer\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName=\"MyAppName\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type=\"System.Web.Security.SqlMembershipProvider, System.Web, Version=2.0.0.0,<br />&amp;#9;&amp;#9;&amp;#9; Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /&gt;<br />&amp;nbsp; &lt;/providers&gt;<br />&lt;/membership&gt;  </pre></div><p>Make sure you set the <b>connectionStringName</b> attribute to the same name (\"MyLocalSQLServer\") you specified earlier in the <b>connectionStrings</b> section. Also set the <b>applicationName</b> attribute to a unique value representing the application. User details are organized by application name within the membership database. </p><blockquote><b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;You must set the <b>defaultProvider</b> attribute of the &lt;<b>membership</b>&gt; element to point to the provider definition. The login controls use this attribute to determine which property to use by default. However, these controls also expose a <b>MembershipProvider</b> property that lets you use non-default providers with the controls. While you can also set the <b>MembershipProvider</b> property of the login controls, it is good practice to set the <b>defaultProvider</b> attribute.<b></b></blockquote></li></li>\n  </ol>\n  <h1>Step 4. Test the Forms Authentication</h1>\n  <p>In this step, you test forms authentication.</p>\n  <h2>Add a Page_Load Event Handler</h2>\n  <p>Add the following code to the <b>Page_Load</b> event handler of your Default.aspx page. This page should only be displayed to authenticated users. To prove that this is the case, the code displays information obtained from the forms authentication ticket issued to authenticated users.</p>\n  <div>\n    <pre>protected void Page_Load(object sender, EventArgs e)<br />&amp;#123;<br />&amp;nbsp; Response.Write(\"Hello, \" &amp;#43; Server.HtmlEncode(User.Identity.Name));</pre>\n    <pre>&amp;nbsp; FormsIdentity id = (FormsIdentity)User.Identity;<br />&amp;nbsp; FormsAuthenticationTicket ticket = id.Ticket;</pre>\n    <pre>&amp;nbsp; Response.Write(\"&lt;p/&gt;TicketName: \" &amp;#43; ticket.Name );<br />&amp;nbsp; Response.Write(\"&lt;br/&gt;Cookie Path: \" &amp;#43; ticket.CookiePath);<br />&amp;nbsp; Response.Write(\"&lt;br/&gt;Ticket Expiration: \" &amp;#43;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ticket.Expiration.ToString());<br />&amp;nbsp; Response.Write(\"&lt;br/&gt;Expired: \" &amp;#43; ticket.Expired.ToString());<br />&amp;nbsp; Response.Write(\"&lt;br/&gt;Persistent: \" &amp;#43; ticket.IsPersistent.ToString());<br />&amp;nbsp; Response.Write(\"&lt;br/&gt;IssueDate: \" &amp;#43; ticket.IssueDate.ToString());<br />&amp;nbsp; Response.Write(\"&lt;br/&gt;UserData: \" &amp;#43; ticket.UserData);<br />&amp;nbsp; Response.Write(\"&lt;br/&gt;Version: \" &amp;#43; ticket.Version.ToString());<br />&amp;#125;  </pre>\n  </div>\n  <h2>Create a New User</h2>\n  <p>In this step, you create a new user to test the login functionality.</p>\n  <h3>To create a new user </h3>\n  <ol>\n    <li>Browse to your application's Default.aspx page. <p>The earlier configuration of the &lt;<b>authorization</b>&gt; element prevents unauthenticated users from accessing any pages in the application and redirects you to the Login.aspx page. </p><li>Create a new user with a strong password. The default rules applied by the SQL membership provider for the password are as follows: <ul><li>The password must be at least 7 characters long. <li>The password must contain at least 1 non-alphanumeric character. </li></li></ul><li>Log in with your new user account. If successful, you should be redirected to the Default.aspx page that you initially requested, and details from the forms authentication ticket should be displayed. </li></li></li>\n  </ol>\n  <h1>Deployment Considerations</h1>\n  <p>When using forms authentication, you should consider the following when you deploy your application: </p>\n  <ul>\n    <li>Connecting to a remote database <li>Connecting to a remote database without Windows authentication </li></li>\n  </ul>\n  <h2>Connecting to a Remote Database</h2>\n  <p>If your database is on a remote server, you should use Windows authentication to connect. By using Windows authentication, you avoid storing credentials in connection strings and avoid passing passwords over the network to the database server. To use Windows authentication, you usually use a custom domain service account to run your application. This account's identity is then used to authenticate against the remote server. </p>\n  <h3>To authorize your application's domain account in the database</h3>\n  <p>Use the following T-SQL commands to create a SQL Server login for your domain account and grant it access to the membership database.</p>\n  <div>\n    <pre>-- Create a SQL Server login for your application's domain account<br />sp_grantlogin 'domain\\webservername&amp;#36;'</pre>\n    <pre>-- Grant the login access to the membership database<br />USE aspnetdb<br />GO<br />sp_grantdbaccess 'domain\\webservername&amp;#36;', 'Web Server Name'</pre>\n    <pre>-- Add user to database role<br />USE aspnetdb<br />GO<br />sp_addrolemember 'aspnet_Membership_FullAccess', 'domain\\webservername&amp;#36;'  </pre>\n  </div>\n  <p>You should also encrypt your connection string in the Web.config file to avoid disclosing server and database names. To do this, use either the DPAPI or RSA protected configuration providers. If you deploy your application in a Web farm, use RSA because it is easy to export and import RSA keys across servers.</p>\n  <h3>Connecting to a Remote Database Without Windows Authentication</h3>\n  <p>When you use Windows authentication to connect to SQL Server, you use either Kerberos or NTLM authentication, depending on the configuration of your servers and domain. You might not be able to use Windows authentication if: </p>\n  <ul>\n    <li>Your database client and database server are separated by a firewall that prevents Kerberos or NTLM authentication. <li>Your application server and database server are in separate domains with no trust. </li></li>\n  </ul>\n  <p>In these situations, you can use either mirrored local accounts or SQL Authentication. With mirrored local accounts, you configure two accounts on each server with identical user names and passwords. You must ensure that the passwords remain the same.</p>\n  <p>If you use SQL Authentication, you must: </p>\n  <ul>\n    <li>Manage the credentials yourself. <li>Protect the credentials in the connection string, for example by encrypting the connection string in the Web.config file. <li>(Potentially) protect the credentials passed over the network from the Web server to the database. </li></li></li>\n  </ul>\n  <h1>Security Considerations</h1>\n  <p>Failing to protect authentication tickets is a common vulnerability that can lead to unauthorized spoofing and impersonation, session hijacking, and elevation of privilege. When you use forms authentication, consider the following recommendations to help ensure a secure authentication approach: </p>\n  <ul>\n    <li>\n      <b>Restrict the authentication cookie to HTTPS connections.</b> To prevent forms authentication cookies from being captured and tampered with while crossing the network, ensure that you use Secure Sockets Layer (SSL) with all pages that require authenticated access and restrict forms authentication tickets to SSL channels. <li><b>Partition the site for SSL.</b> This allows you to avoid using SSL for the entire site.<b></b><li><b>Do not persist forms authentication cookies.</b> Do not persist authentication cookies because they are stored in the user's profile on the client computer and can be stolen if an attacker gets physical access to the user's computer <li><b>Consider reducing ticket lifetime.</b> Consider reducing the cookie lifetime to reduce the time window in which an attacker can use a captured cookie to gain access to your application with a spoofed identity. <li><b>Consider using a fixed expiration. </b>In scenarios where you cannot use SSL, consider setting <b>slidingExpiration=\"false\"</b>. <li><b>Enforce strong user management policies.</b> Use and enforce strong passwords for all user accounts to ensure that people cannot guess one another's passwords and to mitigate the risk posed by dictionary attacks. <li><b>Enforce password complexity rules.</b> Validate passwords entered through the <b>CreateUserWizard</b> control, by setting its <b>PasswordRegularExpression</b> property to an appropriate regular expression. Also configure the membership provider on the server to use the same regular expression.<b></b><li><b>Perform effective data validation on all requests.</b> Perform strict data validation to minimize the possibilities of SQL injection and cross-site scripting. <li><b>Use distinct cookie names and paths. </b>By ensuring unique cookie names and paths, you prevent possible problems that can occur when hosting multiple applications on the same server. <li><b>Keep authentication and personalization cookies separate.</b> Keep personalization cookies that contain user-specific preferences and non-sensitive data separate from authentication cookies. <li><b>Use absolute URLs for navigation.</b> This is to avoid potential issues caused by redirecting from HTTP to HTTPS pages. </li></li></li></li></li></li></li></li></li></li></li>\n  </ul>\n  <h1>Additional Considerations</h1>\n  <p>In addition to the preceding guidance, consider the following additional items to offer further protection: </p>\n  <ul>\n    <li>Password complexity <li>Account lockout </li></li>\n  </ul>\n  <h2>Password Complexity</h2>\n  <p>The membership provider that the <b>CreateUserWizard</b> and <b>Login</b> controls use determines password complexity requirements. For example, by default, the SQL Membership provider requires passwords of at least seven characters in length with at least one non-alphanumeric character.</p>\n  <h3>Configuring Provider Enforced Strong Passwords</h3>\n  <p>To configure the precise password complexity rules enforced by the <b>SqlMembershipProvider</b>, you can set the following additional attributes: </p>\n  <ul>\n    <li>passwordStrengthRegularExpression. The default is \"\". <li>minRequiredPasswordLength. The default is seven. <li>minRequiredNonalphanumericCharacters. The default is one. </li></li></li>\n  </ul>\n  <p>The following configuration supplies a custom regular expression to constrain the passwords used by the membership provider.</p>\n  <div>\n    <pre>&lt;membership defaultProvider=\"MySqlMembershipProvider\"&gt;<br />&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name=\"MySqlMembershipProvider\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName=\"MyLocalSQLServer\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName=\"MyAppName\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; passwordStrengthRegularExpression=<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \"&amp;#94;(?=.&amp;#42;\\d)(?=.&amp;#42;&amp;#91;a-z&amp;#93;)(?=.&amp;#42;&amp;#91;A-Z&amp;#93;).&amp;#123;8,10&amp;#125;&amp;#36;\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type=\"System.Web.Security.SqlMembershipProvider, System.Web, Version=3.5.0.0,<br />&amp;#9;&amp;#9; Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"/&gt;<br />&amp;nbsp; &lt;/providers&gt;<br />&lt;/membership&gt;  </pre>\n  </div>\n  <p>The regular expression in the preceding fragment constrains the password to between 8 and 10 characters. It must also contain a combination of uppercase, lowercase, and numeric digits, with no special characters. The (.&amp;#42;\\d) refers to the digits, the (.&amp;#42;&amp;#91;a-z&amp;#93;) refers to the lowercase characters, the &amp;#42;&amp;#91;A-Z&amp;#93; refers to the uppercase characters and the &amp;#123;8,10&amp;#125; constrains the range to be between 8 to 10 characters. </p>\n  <p>Note that the <b>SqlMembershipProvider</b> always first evaluates the password against the <b>minRequiredPasswordLength</b> and <b>minRequiredNonalphanumericCharacters</b> attributes. If the regular expression is intended to be the authoritative match, you should set the other two attributes to weaker values; for example, a minimum length of 1 and zero non-alphanumeric characters.</p>\n  <p>The following configuration uses the <b>minRequiredPasswordLength</b> and <b>minRequiredNonalphanumericCharacters</b> attributes to constrain the password.</p>\n  <div>\n    <pre>&lt;membership defaultProvider=\"MySqlMembershipProvider\"&gt;<br />&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name=\"MySqlMembershipProvider\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName=\"MyLocalSQLServer\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName=\"MyAppName\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minRequiredPasswordLength=\"8\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minRequiredNonalphanumericCharacters=\"2\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type=\"System.Web.Security.SqlMembershipProvider, System.Web, Version=3.5.0.0, <br />&amp;#9;&amp;#9;&amp;#9;Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"/&gt;<br />&amp;nbsp; &lt;/providers&gt;<br />&lt;/membership&gt;  </pre>\n  </div>\n  <h3>Validating Strong Passwords</h3>\n  <p>You can also use a regular expression with the <b>CreateUserWizard</b> control to enforce passwords complexity rules. By doing this, you benefit from both client-side validation and server-side validation. </p>\n  <p>To validate a password entered through the <b>CreateUserWizard</b> control, set its <b>PasswordRegularExpression</b> property to an appropriate regular expression, such as the that follows. However, note that you should then also configure a similar regular expression on the server with the membership provider. You should not rely on the client-side checks.</p>\n  <div>\n    <pre>&amp;#94;(?=.&amp;#42;\\d)(?=.&amp;#42;&amp;#91;a-z&amp;#93;)(?=.&amp;#42;&amp;#91;A-Z&amp;#93;).&amp;#123;8,10&amp;#125;&amp;#36;  </pre>\n  </div>\n  <h2>Account Lockout </h2>\n  <p>You can configure the account lockout policy. To do this, use the following two provider attributes: </p>\n  <ul>\n    <li>\n      <b>maxInvalidPasswordAttempts.</b> This defines the number of failed password attempts or failed password answer attempts that are allowed before locking out a user's account. When the number of failed attempts equals the value set in this attribute, the user's account is locked out. The default value is five. <li><b>passwordAttemptWindow.</b> This defines the time window, in minutes, during which failed password attempts and failed password answer attempts are tracked. The default value is ten. </li></li>\n  </ul>\n  <p>With these defaults, if there are five failed login attempts within ten minutes, the account will be locked out.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}