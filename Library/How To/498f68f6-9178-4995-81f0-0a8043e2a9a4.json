{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-852260880",
      "Content_Hash": "937158110"
    },
    "Metadata": [
      {
        "Id": [
          "498f68f6-9178-4995-81f0-0a8043e2a9a4"
        ],
        "Id_History": [
          "498f68f6-9178-4995-81f0-0a8043e2a9a4,2b6d8826-164a-4985-bfe0-0e0861f18826,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for Insecure Keystore Bugs"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for Insecure Keystore Bugs"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Applications that utilize cryptography</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>Software applications that implement cryptography need to create and store cryptographic keys and possibly certificates to properly operate and service their clients.   These keys and certificates might be stored in memory while the application uses them or stored in a permanent store for later use.   In either case, developers must take the appropriate security measures to limit the access to this store also known as <i>keystore. </i>  An insecure keystore bug allows an attacker to read cryptographic material such as keys and certificates from the keystore to use them during a cryptographic attack.</p>\n  <p>Follow these steps to test for insecure keystore bugs:</p>\n  <ul>\n    <li>Step 1: Understand attack scenarios </li>\n    <li>Step 2: Analyze causes and countermeasures </li>\n    <li>Step 3: Execute test cases\n  </li>\n  </ul>\n  <h1>Step 1: Understand attack scenarios</h1>\n  <p>During this first step, it is necessary to review the different attack scenarios for insecure keystore bugs:</p>\n  <ul>\n    <li>Temporary data stores </li>\n    <li>Persistent data stores</li>\n  </ul>\n  <h2>\n    <em>Scenario 1: Temporary data stores</em>\n  </h2>\n  <p>An application can either store cryptographic keys persistently or temporarily use them by placing them in memory.   In both cases, the location that the application uses to store the crypto keys must be protected from unauthorized users.  During this scenario, the attacker sniffs the different sources of temporary data stores such as system memory (RAM or cache) as well as page/swap files and crash dump files.   The attacker’s goal is to find the location of the keystore to recover a key in order to mount further cryptographic attacks using the stolen key.</p>\n  <h2>\n    <em>Scenario 2: Persistent data stores</em>\n  </h2>\n  <p>This scenario assumes that the keystore is stored persistently as a file or in other persistent data store location where permissions can be used, such as the Windows registry.  During this scenario the attacker logs into the target computer either locally or remotely, navigates to the folder (or registry location) where the keystore is stored, and accesses the file (or registry key) to steal its contents to execute further cryptographic attacks using the stolen keystore material.  The attack depends on weak permissions set in the keystore file or registry location that allows an unauthorized attacker to access the sensitive information.  </p>\n  <p>\n  </p>\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\n  <p>The next step in discovering insecure keystore bugs is to analyze what causes and how to countermeasure them.</p>\n  <h2>\n    <em>Temporary data stores attacks</em>\n  </h2>\n  <p>There are two different types of insecure keystore attacks.  The first type targets temporary data stores such as system memory (RAM or operating system’s cache) or page/swap and crash dump files which are temporarily stored in the file system by the operating system.  Each attack is caused by different reasons, depending on the memory type.  For example, key material insecurely left in RAM occurs because the application doesn’t properly clean out data structures used to store key: </p>\n  <pre>void Authenticate(char *strUser) {\n char key[64];\n if (ValidateKey(key, sizeof(key))) {\n  if (AuthenticateUser(strUser, key)) {\n\n   // Use key to authenticate user\n\n  }\n }\n}\n</pre>\n  <p>To countermeasure this attack scenario developers must properly clear the key from memory:</p>\n  <pre>void Authenticate(char *strUser) {\n char key[64];\n if (ValidateKey(key, sizeof(key))) {\n  if (AuthenticateUser(strUser, key)) {\n\n   // Use key to authenticate user\n\n  }\n }\n memset(key, 0, sizeof(key));\n}</pre>\n  <p>However, be careful when using <i>memset</i> since compiler optimizations might render the <i>memset</i> call useless.  It is recommended that you disable optimizations when using memset to clean out keystore material.  To secure keystore material and avoid secure compiler optimizations, CERT recommends implementing secure memset function named <i>memset_s</i> of the following form [i]:</p>\n  <pre>void *memset_s(void \\*v, int c, size_t n) {\n volatile char *p = v;\n while(n--)\n  *p++ = c;\n\n return v;\n}</pre>\n  <p>Developers must then replace calls to memset with the secure version for any keystore material:</p>\n  <pre>void Authenticate(char *strUser) {\n char key[64];\n if (ValidateKey(key, sizeof(key))) {\n  if (AuthenticateUser(strUser, key)) {\n\n   // Use key to authenticate user\n\n  }\n }\n memset_s(key, 0, sizeof(key));\n}</pre>\n  <p>Even if cleaning out cryptographic material from memory, this sensitive data might still make it to swap and crash dump files.  Developers should look at the different options like protecting keys and certificates from making it to swap files by using <i>mlock</i> or <i>VirtualLock, </i>as well as avoiding an application from producing application crash dumps using functions such as <i>setrlimit.  </i>However<i>, </i>keystore material might still make it to the file system in system wide memory dumps.  To prevent against this scenario administrators must look at system configuration options to limit the creation of system crash dumps. </p>\n  <h2>\n    <em>Persistent data stores attacks</em>\n  </h2>\n  <p>The second scenario relates to attacks that are achieved by accessing keystore files or registry keys in the target computer and it is caused due to insecure permissions set on those files or registry keys.    For example, the Java code below deals with a keystore that exists in the file system:</p>\n  <pre>KeyStore keyStore = KeyStore.getInstance(\"JKS\");\nString fileName = System.getProperty(\"java.home\") + \"/lib/security/myKeyStore.jks\";\n\nFileInputStream stream = new FileInputStream(new File(fileName));\nkeyStore.load( stream, \"storeit\".toCharArray()); </pre>\n  <p>If the folder named <i>java.home/lib/security</i> allows read permissions on all users, the application is vulnerable to insecure keystore attacks by a low privileged attacker able to log in to the target computer.</p>\n  <p>\n  </p>\n  <h1>Step 3: Execute Test Cases</h1>\n  <p>Now that you’ve reviewed the theoretical aspects of insecure keystore bugs it is necessary to execute the necessary test cases to check if your application is vulnerable.</p>\n  <h2>\n    <em>Test for insecure keystore in RAM (temporary store)</em>\n  </h2>\n  <p>Follow these steps to create a record of physical memory in a text file in Windows platforms:</p>\n  <ol>\n    <li>Log into a Windows host running application under test. </li>\n    <li>Download and install ManTech’s Memory DD (<a href=\"https://sourceforge.net/projects/mdd/)\">https://sourceforge.net/projects/mdd/)</a>. </li>\n    <li>Open command prompt as a user possessing administrative privileges. </li>\n    <li>Run mdd as follows:  <b>mdd_1.3.exe -o c:\\ram.txt -v</b></li>\n    <li>Once mdd finish executing scan through the output file <i>ram.txt</i> for sensitive information.</li>\n  </ol>\n  <p>Expected results:  ram.txt must not show any cryptographic keys.</p>\n  <h2>\n    <em>Test for insecure keystore in virtual memory (temporary store)</em>\n  </h2>\n  <p>The best way to search your application’s virtual memory for secrets is to use a debugger to create a dump of the virtual memory space at any given time:</p>\n  <ol>\n    <li>Log into a Windows host running application under test. </li>\n    <li>Download and run user-mode Windows debugging <i>windbg.</i></li>\n    <li>Attach windbg to application under test. </li>\n    <li>Break into the debugger and specify option to create a full dump for the application’s virtual memory:  <b>.dump /f c:\\dump.txt</b></li>\n  </ol>\n  <p>Expected results:  The output file dump.txt must not show any cryptographic keys.</p>\n  <p>\n  </p>\n  <p>\n    <b>\n      <i>Test for insecure keystore in swap files (temporary store)</i>\n    </b>\n  </p>\n  <p>In Windows, swap files are stored in the <i>pagefile:  </i></p>\n  <ol>\n    <li>Log into a Windows host running application under test. </li>\n    <li>Find location of the pagefile<i>.</i>  It is named <i>pagefile.sys</i> and it’s usually on the root drive of the Windows partition (i.e. c:\\pagefile.sys). </li>\n    <li>Open read-only copy of file. </li>\n    <li>Search for sensitive key  information in the pagefile.</li>\n  </ol>\n  <p>Expected results:  The pagefile must not show any cryptographic keys.</p>\n  <p>\n  </p>\n  <h2>\n    <em>Test for insecure keystore in dump files (temporary store)</em>\n  </h2>\n  <p>Follow these steps test for insecure keystore in dump files:</p>\n  <ol>\n    <li>Log into a Windows host running application under test. </li>\n    <li>Find out the location of dump files (in Windows this is indicated in <i>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl</i>). </li>\n    <li>Open dump file and search for sensitive information. </li>\n    <li>Repeat for each one of the dump files.</li>\n  </ol>\n  <p>Expected results:  The dump files must not contain any cryptographic keys.</p>\n  <p>\n    <b>\n      <i>\n      </i>\n    </b>\n  </p>\n  <h2>\n    <em>Test for insecure keystore in file system (persistent store)</em>\n  </h2>\n  <p>Follow these steps to test for insecure keystore in the file system:</p>\n  <ol>\n    <li>Log into the target computer (i.e. computer storing the keystore) using  a low privileged or guest account. </li>\n    <li>Browse to the folder containing the keystore files. </li>\n    <li>Open a keystore file and read its contents.</li>\n  </ol>\n  <p>Expected results: The application is vulnerable if it allows reading the keystore files using a low privileged account.</p>\n  <h2>\n    <em>Test for insecure keystore in the Windows registry (persistent store)</em>\n  </h2>\n  <p>Follow these steps to test for insecure keystore in the file system:</p>\n  <ol>\n    <li>Log into a target computer (computer storing the keystore) using a low privileged or guest account. </li>\n    <li>Open the Windows <i>Run</i> dialog box (<b>Start Menu</b>-&gt;<b>Run</b>). </li>\n    <li>Type <i>regedit</i> and click OK. </li>\n    <li>In Registry Editor, browse to the registry location holding the keystore and read its contents.</li>\n  </ol>\n  <p>Expected results: the application is vulnerable if it allows reading the keystore registry keys using a low privileged account.</p>\n  <p>\n  </p>\n  <h1>Conclusions</h1>\n  <p>Applications that implement cryptography need to store cryptographic keys and certificates in a temporary or persistent memory location known as the keystore.   If an application doesn’t properly secure this location it enables attackers to retrieve the keystore contents and use the information for further cryptographic attacks.  To protect against this vulnerability, developers must properly secure keystore material both in temporary memory and in the file system.  To test for this bug it is suggested to execute memory dumping test cases as well as insecure storage test cases while searching for cryptographic keys and certificates in memory dumps, files, and registry keys.</p>\n  <div>\n    <br />\n    <hr />\n    <div>\n      <p>[i] <b>MSCxx-A. Be aware of insecure compiler optimization when dealing with sensitive data. </b>Added by Joe Damato, edited by Shaun Hedrick. CERT.  <a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2982545&navigatingVersions=true\">https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2982545&navigatingVersions=true</a></p>\n      <p>\n      </p>\n    </div>\n  </div>"
        ]
      }
    ]
  }
}