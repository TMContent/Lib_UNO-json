{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1331834971",
      "Content_Hash": "-1080191749"
    },
    "Metadata": [
      {
        "Id": [
          "6d5d816e-2dc3-492e-b5dd-e344a01c7124"
        ],
        "Id_History": [
          "6d5d816e-2dc3-492e-b5dd-e344a01c7124,0d2fb99b-e3d8-4cfb-94bb-4db0401cbe18,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Create an Error Handler to Log Details of Faults for Auditing Purposes"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \n<li>Microsoft Visual Studio® 2008</li></li>\n  </ul>\n  <h1>Description</h1>\n  <p>You can create an error handler to log the fault details by implementing the IErrorHandler interface methods in your service. By using this you log and suppress the exceptions or you can log and throw them as FaultException.</p>\n  <pre>public interface IErrorHandler <br />{ <br />        bool HandleError(Exception error, MessageFault fault); <br />        void ProvideFault(Exception error, ref MessageFault fault, ref string faultAction); <br />} </pre>\n  <p>To suppress the fault message, implement the HandleError method and return false. In this method you can add your code for logging capabilities.</p>\n  <p>To raise FaultException instead of suppressing, implement the ProvideFault method to provide the MessageFault value. The following code shows a sample implementation of the ProvideFault method </p>\n  <pre>//code snippet<br />public void ProvideFault(Exception error, MessageVersion version, ref Message fault)<br />{<br />  FaultException newEx = new FaultException();<br />  MessageFault msgFault = newEx.CreateMessageFault();<br />  fault = Message.CreateMessage(version, msgFault, newEx.Action);<br />}</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at &lt;A href=\"http://msdn.microsoft.com/en-us/library/ms733721. \n<hr /><p>Adapted from Microsoft patterns & practices guidance.</p></li>\n  </ul>"
        ]
      }
    ]
  }
}