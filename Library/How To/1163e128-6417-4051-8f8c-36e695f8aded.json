{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-727543895",
      "Content_Hash": "1251207828"
    },
    "Metadata": [
      {
        "Id": [
          "1163e128-6417-4051-8f8c-36e695f8aded"
        ],
        "Id_History": [
          "1163e128-6417-4051-8f8c-36e695f8aded,927355ee-58ed-4502-b456-55d96a36cb5f,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for XML Injection Vulnerabilities"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for XML Injection Vulnerabilities"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>\n     Applies To \n  </h1>\n  <ul>\n    <li>\n       Web services that use XML \n    </li>\n    <li>\n       Web services that use SOAP  </li>\n  </ul>\n  <h1>\n     Summary \n  </h1>\n  <p>\n     XML stands for Extensible Markup Language.   Similar to HTML, it utilizes tags to store structured data.   However, XML is extensible as it allows users to define their own elements in user defined tags. \n  </p>\n  <p>\n     In web software, the two most noticeable uses for XML are:  \n  </p>\n  <ol>\n    <li>\n       Store structured data as an alternative to a database.  \n    </li>\n    <li>\n       Provide a transaction protocol for business-to-business and business-to-client communications such as SOAP. \n    </li>\n  </ol>\n  <h2>\n     \n      Store structured data as an alternative to a database\n     \n  </h2>\n  <p>\n     A server stores user names, passwords, and emails in the user element.    It uses a web form to collect user data.  A user enters the following data and clicks on the Create User button:</p>\n  <p>\n    <font face=\"'Courier New'\">Username: JohnyC<br />Password: qwerty<br />E-mail: johnyc@examplesite.com</font>\n  </p>\n  <p>The client sends this URL to the server application:</p>\n  <p>\n    <font face=\"'Courier New'\">http://www.examplesite.com/GetProfile.php?username=JohnyC&password=qwerty &email=JohnyC@examplesite.com</font>\n  </p>\n  <p>Once the server receives the URL it creates a user XML element node:\n    \n       </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;user&gt; <br />   &lt;username&gt;JohnyC&lt;/username&gt; <br />   &lt;password&gt;qwerty&lt;/password&gt; <br />   &lt;userid&gt;111&lt;userid/&gt;<br />   &lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;<br />&lt;/user&gt;    </font>\n  </p>\n  <h2>\n     \n      Provide a transaction protocol for business-to-business and business-to-client communications (such as SOAP)\n     \n  </h2>\n  <p>\n     The second and most used XML benefit is to integrate web services.    SOAP is the communication protocol for XML web services. Before XML, systems had to implement Remote Procedure Calls (RPC) to integrate cross platform services on the web.   At that time COBRA or DCE were mostly used to achieve integration, but they were too complex.   SOAP defined a standard XML communication protocol that was adopted because of its simplicity.   As Microsoft released SOAP, they also released a toolkit that translated COM to SOAP, as well as one to translate Java Functions to SOAP. \n  </p>\n  <p>\n     The following code shows an XML-based SOAP client that invokes the  \n     sayHello  \n     method on a SOAP server: \n  </p>\n  <pre>Dim x, h\nSet x = CreateObject(\"MSXML2.DOMDocument\")\nx.loadXML \"&lt;s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'\nxmlns:xsi='http://www.w3.org/1999/XMLSchema-instance'\nxmlns:xsd='http://www.w3.org/1999/XMLSchema'&gt;&lt;s:Body&gt;&lt;m:sayHello\nxmlns:m='urn:Example1'&gt;&lt;name xsi:type='xsd:string'&gt;James&lt;/name&gt;&lt;\n/m:sayHello&gt;&lt;/s:Body&gt;&lt;/s:Envelope&gt;\"\nmsgbox x.xml, , \"Input SOAP Message\"\nSet h = CreateObject(\"Microsoft.XMLHTTP\")\nh.open \"POST\", \"http://localhost:8080\"\nh.send (x)\nwhile h.readyState &lt;&gt; 4\nwend\nmsgbox h.responseText,,\"Output SOAP Message\"</pre>\n  <h2>\n     \n      XML Injection Bugs\n     \n  </h2>\n  <p>\n     XML injection means to maliciously feed crafted data to a XML-based web service in order to execute an attack.   An XML injection attack varies from adding extra elements in an XML store to tamper with sensitive information to modifying XML store tags to execute cross-site scripting code in a target browser. \n  </p>\n  <p>\n     The following steps are needed to test for XML Injection: \n  </p>\n  <ol>\n    <li>\n       Understand XML Injection attack scenarios. \n    </li>\n    <li>\n       Identify high risk components. \n    </li>\n    <li>\n       Start testing and exploring. \n    </li>\n    <li>\n       Tune test cases. \n    </li>\n  </ol>\n  <p>\n     It is necessary to differentiate XML injection with XPATH or XQUERY bugs. They are similar as they both relate to XML, but the logic involved is fundamentally different and will be discussed in individual articles.  </p>\n  <h1>\n     Step 1:   Understand XML Injection attack scenarios \n  </h1>\n  <p>\n     During the first step, you need to understand how an XML injection attack works both in storage and communication.   The following two scenarios elaborate on XML injection attacks: \n  </p>\n  <ul>\n    <li>\n       Injecting an extra tag to a XML data store. \n    </li>\n    <li>\n       Executing cross-site scripting attacks by manipulating the CDATA tag.  </li>\n  </ul>\n  <h2>\n     \n      Scenario 1:   Injecting an extra tag to a XML data store\n     \n  </h2>\n  <p>\n     A bank site exposes a simple web page to create checking accounts.    It takes data from a web form like the one above and builds a URL like this one: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">http://www.examplesite.com/CreateChecking.php?username=JohnyC&password=qwerty&email=JohnyC@examplesite.com</font>\n  </p>\n  <p>\n     The bank uses the data in the URL to construct the following XML in its data store: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;user&gt; <br />   &lt;username&gt;JohnyC&lt;/username&gt; <br />   &lt;password&gt;qwerty&lt;/password&gt; <br />   &lt;userid&gt;111&lt;userid/&gt;<br />   &lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;<br />   &lt;account type=”checking”&gt; <br />      &lt;created&gt;02-21-2008&lt;/created&gt;<br />      &lt;number&gt;1249109&lt;/number&gt;<br />      &lt;balance&gt;1201&lt;/balance&gt;<br />   &lt;/account&gt; <br />&lt;/user&gt;</font>\n  </p>\n  <p>\n     The bank doesn’t provide a web interface to create saving accounts.   In order to open a saving account, clients need to go to the bank and provide additional information. The bank exposes a security vulnerability that allows the attacker to feed malicious data in the web form.   The attacker submits the following URL request: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">http://www.examplesite.com/CreateChecking.php?username=JohnyC&password=qwerty&email=JohnyC@examplesite.com&lt;/mail&gt;&lt;account type=\"savings\"&gt;&lt;created&gt;03-02-2008&lt;/created&gt;&lt;number&gt;12345678&lt;/number&gt;&lt;balance&gt;1000000&lt;/balance&gt;&lt;/account&gt;</font>\n  </p>\n  <p>When the bank receives this request it doesn't check for extra tags and builds the following element in its data store:</p>\n  <p>\n    <font face=\"'Courier New'\">&lt;user&gt; <br />   &lt;username&gt;JohnyC&lt;/username&gt; <br />   &lt;password&gt;qwerty&lt;/password&gt; <br />   &lt;userid&gt;111&lt;userid/&gt;<br />   &lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;<br />   &lt;account type=\"savings\"&gt; <br />      &lt;created&gt;03-02-2008&lt;/created&gt;<br />      &lt;number&gt;12345678&lt;/number&gt;<br />      &lt;balance&gt;1000000&lt;/balance&gt;<br />   &lt;/account&gt;<br />      &lt;account type=”checking”&gt; <br />      &lt;created&gt;02-21-2008&lt;/created&gt;<br />      &lt;number&gt;1249109&lt;/number&gt;<br />      &lt;balance&gt;1201&lt;/balance&gt;<br />   &lt;/account&gt;  <br />&lt;/user&gt;</font>\n  </p>\n  <p>The bug in the bank web application here allows the attacker to remotely create a savings account with a $1000000 balance. </p>\n  <h2>\n     \n      Scenario 2:    Executing cross-site scripting attacks by manipulating the CDATA tag \n     \n  </h2>\n  <p>\n    XML uses the <i>CDATA </i>tag to escape blocks of text that would be otherwise recognized as markup.   All data enclosed in between the tags <i>&lt;![CDATA[</i> and <i>]]&gt;</i> \n    \n    will not be parsed as markup.    </p>\n  <p>\n    A vulnerable server uses a file named <i>scenarios.xml</i> to store the title and the data for each scenario:</p>\n  <p>\n    <font face=\"'Courier New'\">&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;<br />&lt;scenarios&gt;<br />   &lt;scenario&gt;<br />      &lt;title&gt;XSS scenario&lt;/title&gt;<br />      &lt;data&gt;&lt;![CDATA[this is not to be parsed &lt;!-- as XML '\"&gt;&lt;]]&gt;&lt;/data&gt;<br />   &lt;/scenario&gt;<br />   etc…<br />&lt;/scenarios&gt;</font>\n  </p>\n  <p>\n    The application blindly builds a page (<i>scenarios.php</i>) from the XML file using the following code and then sends the page back to the client:</p>\n  <pre>&lt;?php\n$objDOM = new DOMDocument();\n$objDOM-&gt;load(\"scenarios.xml\");\n$scenario = $objDOM-&gt;getElementsByTagName(\"scenario\");\nforeach( $scenario as $value )\n{\n$title  = $value-&gt;getElementsByTagName(\"title\")-&gt;item(0)-&gt;nodeValue;\n$data =   $value-&gt;getElementsByTagName(\"data\")-&gt;item(0)-&gt;nodeValue;\necho \"$title:&lt;br&gt;$data&lt;br&gt;\";\n}\n?&gt;</pre>\n  <p>\n     The scenario above will generate the following output: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">XSS scenario<br />this is not be parsed as XML '\"&gt;&lt;</font>\n  </p>\n  <p>Now the attacker gets control of <i>scenarios.xml </i>and modifies the data tag to look like this:</p>\n  <p>\n    <font face=\"'Courier New'\">&lt;scenario&gt;<br />   &lt;title&gt;XSS scenario&lt;/title&gt;<br />   &lt;data&gt;&lt;![CDATA[&lt;script&gt;alert('XSS')&lt;/script&gt;]]&gt;&lt;/data&gt;<br />&lt;/scenario&gt; </font>\n  </p>\n  <p>\n     This will result in the vulnerable application building a page that executes attacker specified JavaScript and sending it to the client.  That results in a cross-site scripting attack because the server doesn't validate the XML output before sending it back as HTML to the client. </p>\n  <h1>\n     Step 2:   Identify high risk components \n  </h1>\n  <p>\n     The next steps for XML Injection testing are to list all of the places where code builds XML statements from user supplied input; and to understand how and where our application manipulates statements, and how it uses them to modify its data store or to invoke XML web methods.   The most common are: \n  </p>\n  <ul>\n    <li>\n       Profile-related web pages. \n    </li>\n    <li>\n       E-Commerce or financial account-related pages. \n    </li>\n    <li>\n       XML web service interaction methods. \n    </li>\n    <li>\n       XML-based system-level clients. \n    </li>\n    <li>\n       Systems that read from XML back-end and blindly construct responses to Internet clients.  </li>\n  </ul>\n  <h2>\n     \n      Identify all high risk components \n     \n  </h2>\n  <p>\n     This subtask consists of indentifying the coding errors that lead to XML injection bugs.   XML injection bugs exist for two main reasons.   First, when a server-side application directly utilizes user-supplied strings that arrive over the Internet to add into their XML data store or perform other XML-related tasks.   The application doesn’t do any sort of data validation on the strings, and therefore allows for injection of XML tags.   In the second case, an application is vulnerable if it reads from an XML store and blindly constructs an HTML page to send back to the client. \n  </p>\n  <p>\n     During this subtask, you need to go through all web pages in the application under test and look for any XML interaction.   Any page or method that uses XML to transmit data must be listed as a high risk component.   Following are some common examples of what you need to look for when reviewing code for XML injection bugs. \n  </p>\n  <h2>\n     \n      Identify the usage of XML parsers\n     \n  </h2>\n  <p>\n     Server-side applications can choose from a wide variety of XML parsers depending on the language they are written.   It is important that you recognize if the application you’re testing uses any of these parsers. If so, it is a clear indication that the application manipulates XML.     \n  </p>\n  <ul>\n    <li>\n      <i>\n         SAXParser (Java) \n      </i>\n    </li>\n    <li>\n      <i>\n         MSXML (including Microsoft XML DOM Parser) \n      </i>\n    </li>\n    <li>\n      <i>\n         Xerces (Java, C++, Perl) \n      </i>\n    </li>\n    <li>\n      <i>\n         Oracle XML Parser \n      </i>\n    </li>\n    <li>\n      <i>\n         XML Booster \n      </i>\n    </li>\n    <li>\n      <i>\n         XML::Parser (form Perl) \n      </i>\n    </li>\n    <li>\n      <i>XParse</i>\n    </li>\n  </ul>\n  <p>\n     This short list illustrates that the programmer has different choices when selecting an XML parser.   Make sure to look for the presence of any of these.   In addition, keep up with the latest XML parsing technology and research for additional parsers that your application might use. \n  </p>\n  <h2>\n     \n      Look for code that writes XML from user-supplied input\n     \n  </h2>\n  <p>\n     Any code that uses user-supplied input (from web forms, URLs, etc) must be marked as high risk.   Below is an example that uses the input parameter from a URL to construct XML: \n  </p>\n  <pre>set xmlDoc=CreateObject(\"Microsoft.XMLDOM\")\nxmlDoc.async=\"false\"\nxmlDoc.load(\"accounts.xml\")\nfor each x in xmlDoc.documentElement.childNodes\ndocument.write(x.nodename)\ndocument.write(\": \")\ndocument.write(x.text)\ndocument.write(Request.QueryString(\"input\"))\nnext</pre>\n  <h2>\n     \n      Detect applications that use the CDATA tag\n     \n  </h2>\n  <p>\n    Look at both the application code and storage XML files to identify the usage of the <i>CDATA</i> tag.   Identifying <i>CDATA </i>tags inside XML documents is easy.   Just search the contents of all XML documents in your application looking for the string <i>CDATA</i>.   Then track down the code that uses the data read from this kind of tag.   Any component that directly writes the contents of <i>CDATA </i>tags to an HTML response is vulnerable to cross-site scripting attacks through XML injection.</p>\n  <h2>\n     \n      Don’t rely on XML Document Type Definitions (DTDs)\n     \n  </h2>\n  <p>\n     Programmers might assume that defining XML tags using DTD protects them against XML injection attacks. As we will see later on, this is a misconception.   Include any document that handles XML (using DTD or not) as a high risk component.  </p>\n  <h2>\n     \n      Match High Risk Components with Entry Points\n     \n  </h2>\n  <p>\n     Non-validated XML data can come from any application entry point.   Make sure to cover all the possible sources of malicious data which might get passed to a client.   Common data sources include: \n  </p>\n  <ul>\n    <li>\n       Web forms \n    </li>\n    <li>\n       URL contents \n    </li>\n    <li>\n       Flash parameters \n    </li>\n    <li>\n       XML store contents \n    </li>\n    <li>\n       Web service data \n    </li>\n    <li>\n       Graphical User Interface  </li>\n  </ul>\n  <p>\n     List the high risk application components (usually web pages such as the ones in the scenarios above) and their related entry points to systematically aid with your testing: \n  </p>\n  <p>\n  </p>\n  <table>\n    <tbody>\n      <tr>\n        <td>\n          <b>\n               Component \n            </b>\n        </td>\n        <td>\n          <b>\n               Line \n            </b>\n        </td>\n        <td>\n          <b>\n               URL \n               \n               \n            </b>\n        </td>\n        <td>\n          <b>\n               Form \n               \n               \n            </b>\n        </td>\n        <td>\n          <b>\n               Flash \n               \n               \n            </b>\n        </td>\n        <td>\n          <b>\n               DB \n               \n               \n            </b>\n        </td>\n        <td>\n          <b>Service</b>\n        </td>\n      </tr>\n      <tr>\n        <td>\n      \n             CreateChecking.php \n       \n        </td>\n        <td>\n              101 \n      \n        </td>\n        <td>\n              X \n      \n        </td>\n        <td>\n      \n             X \n       \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        </td>\n        <td>\n\n             112 \n\n        </td>\n        <td>\n\n             X \n        \n        </td>\n        <td>\n       \n             X \n \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        </td>\n        <td>\n      \n             165 \n      \n        </td>\n        <td>\n       \n             X \n        \n        </td>\n        <td>\n         \n             X \n  \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n      </tr>\n      <tr>\n        <td>\n      \n             Response.php \n     \n        </td>\n        <td>\n       \n             1001 \n       \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n       \n             X \n     \n        </td>\n        <td>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        </td>\n        <td>\n     \n             1116 \n        \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n       \n             X \n    \n        </td>\n        <td>\n        </td>\n      </tr>\n      <tr>\n        <td>\n     \n             Present.php \n     \n        </td>\n        <td>\n     \n             234 \n      \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        \n             X \n         \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        </td>\n        <td>\n        \n             531 \n      \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n     \n             X \n        \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n      </tr>\n      <tr>\n        <td>\n       \n             showAccount.php \n       \n        </td>\n        <td>\n    \n             432 \n      \n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n        </td>\n        <td>\n     \n             X \n    \n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <h1>\n     Step 3:    Start Testing and Exploring                                   \n  </h1>\n  <p>\n    This step of testing is focused on submitting basic XML injection fuzz strings and observing how the application reacts. Then, we will try to execute two simple XML injection attacks as shown in the previous scenarios: tag injection and <i>CDATA</i> XSS.   Try all of the tests in this step through the easiest entry point for each high risk component. In step 4 you will tune your test case data to cover the different formats and encoding depending on the remaining entry points. </p>\n  <h2>\n     \n      Start with simple fuzz strings\n     \n  </h2>\n  <p>\n     Successful XML injection testing depends on whether the tester is able to send XML data that will end up being processed as expected XML.  It is recommend that you start testing with a simple XML string consisting of a single quote, a closing tag character, an opening tag character and a double quote. Try these four characters separately and combined:</p>\n  <p>\n    <font face=\"'Courier New'\">'<br />\"<br />&gt;<br />&lt;</font>\n  </p>\n  <p>or </p>\n  <p>\n    <font face=\"'Courier New'\">\n       ' \n       \"&gt;&lt;<br /> \n       \n         &gt; \n       \n       ' \n       \"&lt;<br /> \n       \n         &lt;&gt; \n       \n       ' \n       \" \n    </font>\n  </p>\n  <p>\n     Then, observe how the XML-based server responds.   The idea is to modify a valid XML tag such as the first string below, to the second one.  An invalid XML message from the server is a good indication that there are potential XML injection vulnerabilities present in the server application.</p>\n  <p>\n     Another way to generate invalid XML is to add the start of an XML comment: \n       \n  </p>\n  <p>\n    <font face=\"'Courier New'\">xyz&lt;!--</font>\n  </p>\n  <p>\n     Let’s say that you entered the string above as the username.   The resulting XML will now look like this and will end up being invalid: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;user&gt; <br />   &lt;username&gt;xyz&lt;!--&lt;/username&gt;<br />   &lt;password&gt;qwerty&lt;/password&gt; <br />   &lt;userid&gt;111&lt;userid/&gt;<br />   &lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;<br />&lt;/user&gt;</font>\n  </p>\n  <p>XML uses the ampersand character to refer to another entity in its user-defined XML schema. For example, if the user passes the following string as the username, it will result in the corresponding XML:</p>\n  <p>\n    <font face=\"'Courier New'\">&xyz</font>\n  </p>\n  <p>\n     Results in: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;user&gt;<br />   &lt;username&gt;&xyz&lt;/username&gt;<br />   &lt;password&gt;qwerty&lt;/password&gt; <br />   &lt;userid&gt;111&lt;userid/&gt;<br />   &lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;<br />&lt;/user&gt;</font>\n  </p>\n  <p>\n     This will attempt to refer to the  \n     &xyz \n      entity of the XML document.   If the document doesn’t contain this entity, then the newly built tag above will result in an invalid XML document.  </p>\n  <h2>\n     \n      Learn from error messages to conduct a real attack\n     \n  </h2>\n  <p>\n     The purpose of creating invalid XML documents is so that you can start gaining information about the underlying XML format based on error messages they generate.   Let’s say you inserted the following fuzz string ( ‘ ) in an input field and the server responded with the following error message: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">Invalid XML:<br />&lt;user name='''/&gt;<br />   &lt;id ='1232'/&gt;<br />   &lt;realname='tester'&gt;<br />   &lt;password='ind3$truct'/&gt;<br />&lt;user&gt;</font>\n  </p>\n  <p>Now, consider how you can utilize this information to create an additional, valid user while conserving the structure and format of the original XML document:</p>\n  <p>\n    <font face=\"'Courier New'\">attacker'&gt;&lt;id ='1234'/&gt;&lt;realname='hacker'&gt;&lt;password='qwerty'/&gt;&lt;/user&gt;&lt;user name ='real_user </font>\n  </p>\n  <p>\n     results in the server creating an extra element: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;user name='attacker'/&gt;<br />   &lt;id ='1234'/&gt;<br />   &lt;realname='hacker'&gt;<br />   &lt;password='ind3$truct'/&gt;<br />&lt;/user&gt;<br />&lt;user name='real_user'/&gt;<br />   &lt;id ='1232'/&gt;<br />   &lt;realname='tester'&gt;<br />   &lt;password='realuserpassword'/&gt;<br />&lt;/user&gt;</font>\n  </p>\n  <p>\n  </p>\n  <h2>\n     \n      Try to exploit CDATA tags with Cross-Site Scripting (XSS) attacks\n     \n  </h2>\n  <p>\n    To finish this step try to exploit the contents of CDATA tags to see if you can execute an XSS attack. This test is quite straight forward, simply remember that the XML parser extracts all data enclosed in between the tags <i>&lt;![CDATA[</i> and <i>]]&gt;</i> to form a new string.   For example:</p>\n  <p>\n    <font face=\"'Courier New'\">&lt;![CDATA[xyz]]&gt;</font>\n  </p>\n  <p>\n     Becomes: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">xyz</font>\n  </p>\n  <p>\n     In the same manner: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;![CDATA[&lt;]]&gt;script&lt;![CDATA[&gt;]]&gt;</font>\n  </p>\n  <p>Becomes:</p>\n  <p>\n    <font face=\"'Courier New'\">&lt;script&gt;</font>\n  </p>\n  <p>\n     Finally \n     : \n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;![CDATA[&lt;script&gt;alert('XSS')&lt;/script&gt;]]&gt;</font>\n  </p>\n  <p>\n     Becomes: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;script&gt;alert('XSS')&lt;/script&gt;</font>\n  </p>\n  <h1>\n     Step 4:   Tune Test Cases \n     \n     \n  </h1>\n  <p>\n     During this step you must focus in modifying your test case data to cover all entry points based on the format of each specific entry point.   In addition, you must tune your test case data in order to execute additional XML Injection payloads.  \n     \n     \n  </p>\n  <h2>\n     \n      Consider string format and encoding according to entry point\n     \n  </h2>\n  <h3>\n     Web Forms \n  </h3>\n  <p>\n     \n     \n     Web forms are the easiest to test since they commonly allow most ASCII strings.   An attacker can try entering this string into an input field, for instance in the web form below: \n  </p>\n  <p>\n     \n     \n     An attacker might try to enter this string in the email text field to execute an XML injection attack: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">JohnyC@examplesite.com&lt;/mail&gt;&lt;account type=\"savings\"&gt;&lt;created&gt;03-02-2008&lt;/created&gt;&lt;number&gt;12345678&lt;/number&gt;&lt;balance&gt;1000000&lt;/balance&gt;&lt;/account&gt;</font>\n  </p>\n  <p>\n     It’s possible that client side checks are in place to match the contents of this text field with a valid email format.   However, client side checks are easily bypassed by removing them at the attacker’s end.  </p>\n  <h3>\n     URL Contents \n  </h3>\n  <p>\n     The format of URLs tends to be more complex than that of other input fields.   This is due to the need for URLs to contain special or reserved characters, such as spaces, questions marks, single quotes, less than/greater than (&lt;/&gt;) symbols, and ampersands as data, rather than URL directives.   The client encodes the URL and then sends it to the server, which decodes it so that the special characters can be processed as data. \n  </p>\n  <p>\n     How the encoding and decoding is done depends on the programming language in use.   For example, sometimes the encoding function replaces the blank spaces with a plus (+) sign, or the characters %20, so that: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">Joseph Cohen</font>\n  </p>\n  <p>\n     Becomes: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">Joseph+Cohen</font>\n  </p>\n  <p>or</p>\n  <p>\n    <font face=\"'Courier New'\">Joseph%20Cohen</font>\n  </p>\n  <p>\n     The most common URL encoding scheme consists of replacing special and reserved characters with a percent sign and then their hexadecimal values (e.g.  \n     %HH \n     ).   Using this encoding scheme the URL seen below will be translated from: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">http://www.examplesite.com/CreateChecking.php?username=JohnyC&password=qwerty&email=JohnyC@examplesite.com&lt;/mail&gt;&lt;account type=\"savings\"&gt;&lt;created&gt;03-02-2008&lt;/created&gt;&lt;number&gt;12345678&lt;/number&gt;&lt;balance&gt;1000000&lt;/balance&gt;&lt;/account&gt;</font>\n  </p>\n  <p>to: </p>\n  <p>\n    <font face=\"'Courier New'\">http://www.examplesite.com/CreateChecking.php?username=JohnyC&password=qwerty&email=JohnyC%40examplesite.com%3c%2fmail%3e%3caccount%20type%3d%22savings%22%3e%3ccreated%3e03-02-2008%3c%2fcreated%3e%3cnumber%3e12345678%3c %2fnumber%3e%3cbalance%3e1000000%3c%2fbalance%3e%3c%2faccount%3e</font>\n  </p>\n  <p>\n     This is because the below characters translate to their hex encoding like this:  </p>\n  <div>\n    <table>\n      <tbody>\n        <tr>\n          <td>\n            <p>\n               space \n               \n               \n            </p>\n          </td>\n          <td>\n            <p>\n               @ \n               \n               \n            </p>\n          </td>\n          <td>\n            <p>\n               &lt; \n                 \n            </p>\n          </td>\n          <td>\n            <p>\n               / \n               \n               \n            </p>\n          </td>\n          <td>\n            <p>\n               &gt; \n                 \n            </p>\n          </td>\n          <td>\n            <p>\n               = \n               \n               \n            </p>\n          </td>\n          <td>\n            <p>\n               \" \n               \n               \n            </p>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <p>\n               %20 \n            </p>\n          </td>\n          <td>\n            <p>\n               %40 \n            </p>\n          </td>\n          <td>\n            <p>\n               %3c \n            </p>\n          </td>\n          <td>\n            <p>\n               %2f \n            </p>\n          </td>\n          <td>\n            <p>\n               %3e \n            </p>\n          </td>\n          <td>\n            <p>\n               %3d \n            </p>\n          </td>\n          <td>\n            <p>\n               %22 \n            </p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <h3>\n     Flash Parameters \n  </h3>\n  <p>\n     Flash uses the  \n     \n      <i>FlashVars </i>\n     \n     parameter tag from HTML embedded objects to collect user input: \n  </p>\n  <p>\n    <font face=\"'Courier New'\">    &lt;object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"<br />     codebase=\"http://macromedia.com/cabs/swflash.cab#version=6,0,0,0\"<br />     width=\"250\" height=\"250\" id=\"flaMovie1\" align=\"center\"&gt;<br />     &lt;param name=movie value=\"flaMovie1.swf\"&gt;<br />     &lt;param name=FlashVars value=\"input=userInput\"&gt; <br />       &lt;param name=quality value=high&gt; <br />    &lt;/object&gt;</font>\n  </p>\n  <p>\n     When testing through  \n     \n      <i>FlashVars </i>\n     \n     you need to replace the  \n     userInput  \n     value with the XML injection string.  Make sure that you also try different encodings when you test through this entry point. </p>\n  <h3>\n     XML store contents \n  </h3>\n  <p>\n  </p>\n  <p>\n    You must also tune your test case data when modifying the <i>CDATA </i>tag within XML files to execute a successful XSS attack.   For instance, some applications may blacklist any input that contains the following string, thus not allowing it to be placed in the XML data store:</p>\n  <p>\n    <font face=\"'Courier New'\">&lt;script&gt;</font>\n  </p>\n  <p>\n  </p>\n  <p>\n    Here you may need to tweak your attack data to hide the script tags by adding extra <i>CDATA </i>tags\n    \n      \n        : \n      \n    \n    \n      \n         </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;data&gt;&lt;[CDATA[&lt;sc]]&gt;&lt;![CDATA[ript&gt;alert('XSS')&lt;/sc]]&gt;&lt;![CDATA[ript&gt;]]&gt;&lt;/data&gt;</font>\n  </p>\n  <p>\n  </p>\n  <p>\n    At the end the contents within the <i>CDATA </i>tags get concatenated to construct a valid <i>&lt;script&gt;</i> tag.   This will bypass any checks done for <i>&lt;script&gt;</i> before the final concatenation. </p>\n  <h3>\n     Additional entry points \n       \n  </h3>\n  <p>\n     Each application will have different ways of processing input from users, files, services, and other software entities.   Ensure that you understand the format of each entry point and cover the different formats on each entry point for each high risk component.  </p>\n  <h2>\n     Try additional payloads \n  </h2>\n  <p>\n     So far you’ve learned how to execute two payloads: \n  </p>\n  <ul>\n    <li>\n       Tag injection. \n    </li>\n    <li>\n       Cross-site scripting through CDATA tags. \n    </li>\n  </ul>\n  <p>\n     There are other payloads that you can try such as: \n  </p>\n  <ul>\n    <li>\n       Denial of service by consuming extra memory with excessive tags. \n    </li>\n    <li>\n       Denial of service by resource exhaustion via recursive elements. \n    </li>\n    <li>\n       Information disclosure attacks using XML External Entities (XEE) \n    </li>\n  </ul>\n  <p>\n     Each payload will require special tweaking of the XML attack data and might add new entry points to the scenario.   However, it is imperative that you keep up to date with the latest attack techniques related to XML injection and include them in your security test suite.  </p>\n  <h1>\n     Conclusions \n     \n     \n  </h1>\n  <p>\n     Testing for XML injection requires that you understand how the application under test uses XML.   There are different scenarios ranging from when systems take XML as input, to when systems respond with XML as HTML output.   To successfully test for XML injection you need to understand these different scenarios.   Then, familiarize yourself with any potentially dangerous code and characteristics of any high risk components that are present.   Create a test plan that matches high risk components with their different entry points.   Then, start testing with simple test strings and observe how the application responds.   Finally, to achieve the most complete coverage, ensure that you tune your attack data to cover all formats in all entry points, and try different, up to date payloads. \n  </p>\n  <p />"
        ]
      }
    ]
  }
}