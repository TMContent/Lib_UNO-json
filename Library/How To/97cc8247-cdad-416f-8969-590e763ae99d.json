{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1432963947",
      "Content_Hash": "1134950286"
    },
    "Metadata": [
      {
        "Id": [
          "97cc8247-cdad-416f-8969-590e763ae99d"
        ],
        "Id_History": [
          "97cc8247-cdad-416f-8969-590e763ae99d,900d088a-6ec0-41ae-ac92-aedbbd71d80b,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Use Security Transparency"
        ],
        "Category": [
          "Code Access Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Security Transparency"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Description</h1>\r\n  <p>If you need to make an entire assembly transparent to indicate that the assembly does not contain any critical code and does not elevate the privileges of the call stack in any way, you can explicitly add transparency to an assembly with the following attribute: </p>\r\n  <pre> &#91;assembly: SecurityTransparent&#93;  </pre>\r\n  <p>If you need to mix critical and transparent code in the same assembly, start by marking the assembly with the <b>System.Security.SecurityCriticalAttribute</b> attribute to indicate that the assembly <i>can</i> contain critical code, as shown here. </p>\r\n  <pre> &#91;assembly: SecurityCritical&#93;  </pre>\r\n  <p>If you want to perform security-critical actions, you must explicitly mark the code that will perform the critical action with another <b>SecurityCritical</b> attribute, as shown in the following code example. </p>\r\n  <pre> &#91;assembly: SecurityCritical&#93;public&nbsp;class A<br />&#123;<br />    &#91;SecurityCritical&#93;    public void Critical()<br />    &#123;<br />        // critical<br />    &#125;<br />    public int SomeProp<br />    &#123;<br />        get &#123;/&#42; transparent &#42;/&nbsp;&#125;<br />        set &#123;/&#42; transparent &#42;/&nbsp;&#125;<br />    &#125;<br />&#125;<br />public class B&#123;<br />        internal string SomeOtherProp<br />    &#123;<br />        get &#123; /&#42; transparent &#42;/&nbsp;&#125;<br />        set &#123; /&#42; transparent &#42;/&nbsp;&#125;<br />    &#125;<br />&#125;  </pre>\r\n  <p>The above code is transparent (this is the default setting, even with the assembly-level <b>SecurityCritical</b> attribute) except for the <b>Critical</b> method, which is explicitly marked as critical. </p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}