{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1493362815",
      "Content_Hash": "-2055573786"
    },
    "Metadata": [
      {
        "Id": [
          "ebef460c-f5f6-4862-a489-b046512aa32f"
        ],
        "Id_History": [
          "ebef460c-f5f6-4862-a489-b046512aa32f,fe87d4d2-f287-4b72-ac5a-a934bc726b3b,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Authenticate Users Against a Custom User Store"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Authenticate Users Against a Custom User Store"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>To authenticate users against a custom user store, configure your application to use username authentication with a custom username and password validator. Configure the custom validator in a service behavior and implement it in a class library. Your service uses the username and password validator to authenticate your users&#8217; based on your custom user store.</p>\r\n  <p>The following configuration snippet shows how to configure a custom validator for your WCF service:</p>\r\n  <pre>&lt;serviceCredentials&gt;<br />&lt;userNameAuthentication userNamePasswordValidationMode=\"Custom\" customUserNamePasswordValidatorType=\"MyUserNamePasswordValidator,Host\"/&gt;<br />&lt;serviceCertificate findValue=\"CN=FabrikamEnterprises\"/&gt;<br />&lt;/serviceCredentials&gt;</pre>\r\n  <p>The following code snippet shows how to implement a custom username and password validator:</p>\r\n  <pre>using System;<br />using System.Collections.Generic;<br />using System.IdentityModel.Selectors;<br />using System.IdentityModel.Tokens;<br />using System.Text;</pre>\r\n  <pre>namespace DerivativesCalculator<br />&#123;<br />    public class MyUserNamePasswordValidator : UserNamePasswordValidator<br />    &#123;<br />        public override void Validate(string userName, string password)<br />        &#123;<br />            Console.Write(\"\\nValidating username, &#123;0&#125;, and password, &#123;1&#125; ... \", userName, password);<br />            if ((string.Compare(userName, \"don\", true) &#33;= 0) &#124;&#124; (string.Compare(password, \"hall\", false) &#33;= 0))<br />            &#123;<br />                throw new SecurityTokenException(\"Unknown user.\");<br />            &#125;<br />            Console.Write(\"Done: Credentials accepted. \\n\");<br />        &#125;<br />    &#125;<br />&#125;<br /></pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on password validators, see &#8220;User Name Password Validator&#8221; at <a href=\"http://msdn.microsoft.com/en-us/library/aa354513.aspx\">http://msdn.microsoft.com/en-us/library/aa354513.aspx</a></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}