{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1651179399",
      "Content_Hash": "1449407233"
    },
    "Metadata": [
      {
        "Id": [
          "d29c26bc-0973-4ad8-a244-e4192a93ff35"
        ],
        "Id_History": [
          "d29c26bc-0973-4ad8-a244-e4192a93ff35,4ef3ba69-d34e-42e7-b5e7-af1fe17a7f7c,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for Race Condition Vulnerabilities"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for Race Condition Vulnerabilities"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 4.0,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\n  <ul>\n    <li>ASP.NET 4.0</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>A race condition occurs when more than one application thread or process tries to access the same resource at the same time or when a thread accesses a resource in a time window where the application is not expecting it.&nbsp;If an application doesn’t handle another thread or process modifying or locking the dependant resource at the specific target window of time, it might end up executing undesired behavior. Depending on specific timing, an attacker can access a resource and modify it to change the applications behavior and execute logical attacks on the application or execute denial-of-service (DoS) attacks on the target application.</p>\n  <p>Follow these steps to test for race condition bugs in ASP.NET:</p>\n  <ul>\n    <li>Step 1: Understand attack scenarios </li>\n    <li>Step 2: Analyze causes and countermeasures </li>\n    <li>Step 3: Execute test cases&nbsp;</li>\n  </ul>\n  <h1>Step 1: Understand Attack Scenarios</h1>\n  <p>First, in order to properly understand how race condition flaws affect ASP.NET applications, it is recommended to review the common attack scenarios involved:</p>\n  <ul>\n    <li>Logical attacks </li>\n    <li>Denial-of-service attacks&nbsp;</li>\n  </ul>\n  <h2>\n    Scenario 1: Logical attacks\n  </h2>\n  <p>ASP .NET applications using multithreading might fall victim to logical attacks through race conditions.&nbsp;If developers don’t properly protect static member variables from being modified from a different thread, an attacker can use a different thread to tamper with the value of a static member variable.&nbsp;In some cases, the attacker can actually tamper with a static member at the correct time in order to launch a logical attack on the application. This scenario is similar to time-of-check, time-of-use (TOCTOU) attacks where a resource is changed by an attacker in between the time it is checked and the time it is used.&nbsp;Consider this code:</p>\n  <p>\n    <font face=\"'Courier New'\">1&nbsp; class PriceCalculator()<br />2&nbsp; {<br />3 &nbsp; &nbsp;&nbsp;static int number_of_coupons = 0; &nbsp;<br />4<br />5 &nbsp; &nbsp; public int CalculatePrice()<br />6&nbsp;&nbsp;&nbsp;&nbsp; {<br />7 &nbsp; &nbsp; &nbsp; &nbsp; int balance = 5000;<br />8 &nbsp; &nbsp; &nbsp; &nbsp; int maximum_coupons_allowed = 10;<br />9<br />10 &nbsp; &nbsp; &nbsp; &nbsp;if (number_of_coupons &lt; maximum_coupons_allowed)&nbsp;<br />11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int total = balance - 10*number_of_coupons;&nbsp;<br />13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return total;<br />14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />15 &nbsp; &nbsp; &nbsp; &nbsp;return 0;<br />16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />17<br />18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void GrabCoupon()<br />19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; number_of_coupons++;<br />21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />22<br />23&nbsp; }&nbsp;</font>\n  </p>\n  <p>The code in the function above looks harmless. However, the <i>number_of_coupons</i> was defined as a static member of a class in line 3.&nbsp;This means that in a multithreading application a different thread might change the value of the <i>number_of_coupons</i> variable after the instruction in line 10 executes but before executing the instruction in line 12. &nbsp;</p>\n  <p>Now notice the following method in the class <i>GrapCoupon </i>that can be used to increase the number of coupons.&nbsp;If an attacker can invoke the <i>GrabCoupon</i> method from a&nbsp; different thread he or she might be able to modify the total price calculated in the <i>CalculatePrice</i> method.&nbsp;For instance, an attacker might discover that a request to the following URL invokes the GrabCoupon method, increasing the <i>number_of_coupons </i>static member variable:&nbsp;</p>\n  <p>\n    <span style=\"font-family: 'Courier New'; \">http://some_site/sumbitCoupon.aspx?method=GrabCoupon</span>\n  </p>\n  <p>To launch the attack, the attacker calls the <i>CalculatePrice()</i> function while making repeated requests to the URL above.&nbsp;This may cause the <i>number_of_coupons</i> to be less than the maximum allowed at the time of check (line 10) but be larger than the maximum allowed at the time of use (line 12), resulting in the application calculating a lower price than the one expected.&nbsp;</p>\n  <h2>\n    Scenario 2:&nbsp; Denial-of-services (DoS) attacks\n  </h2>\n  <p>During this second scenario the application doesn’t need to be multithreaded.&nbsp;The attack scenario consists of an attacker accessing and locking a resource that is necessary&nbsp;for the ASP.NET application to properly function, such as a critical file or network port.&nbsp;If the attacker can lock the resource before the ASP.NET application can access it, he or she causes the application to malfunction, thus creating a denial-of-service scenario.&nbsp;</p>\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\n  <p>The following step in learning how to test for race condition bugs in ASP.NET is to understand what causes and how to protect against them.&nbsp;This will help you to identify this bug in code as well as to prepare you for executing the necessary test cases.</p>\n  <h2>\n    References to static members of classes\n  </h2>\n  <p>A common cause for race condition bugs is to allow static members of a class to be changed in between time of check and time of use (TOCTOU).&nbsp;This cause is what allows the first scenario in which the attacker logically attacks the application by changing a static member <i>number_of_coupons</i> in between TOCTOU.&nbsp;To prevent race condition attacks using this scenario, developers can refrain from defining static members of classes and use local variables inside functions and methods:</p>\n  <p>\n    <font face=\"'Courier New'\">1&nbsp; class PriceCalculator()<br />2&nbsp; {<br />3<br />4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int CalculatePrice()<br />5&nbsp;&nbsp;&nbsp;&nbsp; {<br />6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int number_of_coupons = GetCouponCount();&nbsp;&nbsp;<br />7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int balance = 5000;<br />8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int maximum_coupons_allowed = 10;<br />9<br />10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (number_of_coupons &lt; maximum_coupons_allowed)&nbsp;<br />11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int total = balance - 10*number_of_coupons;&nbsp;<br />13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return total;<br />14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<br />16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />17<br />18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void GrabCoupon()<br />19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; number_of_coupons++;<br />21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />22<br />23&nbsp; }</font> &nbsp;</p>\n  <p>Now the ASP.NET application defines <i>number_of_coupons</i> inside a method so the local variables with exist in the stack of each thread and will not be shared across threads, preventing attackers from modifying a shared version of the variable to execute the attack.</p>\n  <p>If developers must use static member variables, they can add a lock in between time of check and time of use to avoid race condition attacks:</p>\n  <p>\n    <font face=\"'Courier New'\">1&nbsp; class PriceCalculator()<br />2&nbsp; {<br />3<br />4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static int number_of_coupons;<br />5&nbsp;&nbsp;&nbsp;&nbsp; static object synchLock = new Object();<br />6<br />7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int CalculatePrice()<br />8&nbsp;&nbsp;&nbsp;&nbsp; {<br />9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int balance = 5000;<br />10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int maximum_coupons_allowed = 10;<br />11<br />12 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;lock(synchLock)<br />13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { &nbsp; &nbsp; &nbsp;<br />14<br />15 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (number_of_coupons &lt; maximum_coupons_allowed)&nbsp;<br />16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int total = balance - 10*number_of_coupons;&nbsp;<br />18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return total;<br />19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />20 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return 0;<br />21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />22&nbsp;&nbsp;&nbsp;&nbsp; }<br />23 &nbsp; &nbsp;&nbsp;<br />24&nbsp;&nbsp;&nbsp;&nbsp; public void GrabCoupon()<br />25&nbsp;&nbsp;&nbsp;&nbsp; {<br />26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock(synchLock)<br />27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; number_of_coupons++;<br />29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />30&nbsp;&nbsp;&nbsp;&nbsp; }<br />31<br />32 }</font>\n  </p>\n  <p>The <i>lock</i> instruction makes sure that only one thread executes the code within the <i>synchLock</i> variable.&nbsp;This means that two threads can’t be checking and using the <i>number_of_coupons</i> static member variable at the same time and that the attack is no longer possible.</p>\n  <h2>\n    Accessing locked resources\n  </h2>\n  <p>The second cause of race condition bugs in ASP.NET applications is relying on resources that can be accessed by low privileged users to properly operate. For instance, depending on a file that can be deleted or locked by a guest user can enable attackers to DoS a target application using the guest account.&nbsp;To protect against this variation, developers must properly secure the attack surface of the application so that no critically-dependant resources can be changed by low privileged attackers.&nbsp;</p>\n  <h1>Step 3: Execute Test Cases</h1>\n  <p>Now that you’ve reviewed the theoretical aspects of race condition bugs in ASP.NET, it is necessary to understand the necessary test cases to check if your application is vulnerable. </p>\n  <h2>\n    Test for logical attacks through race conditions\n  </h2>\n  <p>Follow these steps to test for logical attacks on the application using race conditions:</p>\n  <ol>\n    <li>Find a request to an application action that uses a static variable to calculate the outcome of the action, and where the static variable is accessible through a different thread.&nbsp;See scenario 1 above for additional detail. </li>\n    <li>Find a request, different than the action in step 1, which modifies the target static member variable. </li>\n    <li>Execute the following sub steps simultaneously: <ul><li>a.&nbsp;&nbsp;Make one request to the application found in step 1 while </li><li>b.&nbsp;&nbsp;Making continuous requests to request found in step 2. </li></ul></li>\n  </ol>\n  <p>Expected results:&nbsp;The application is vulnerable if making the continued requests that use a separate thread to alter the static variable (found in step 2) alters with the behavior of the application request found in step 1 and generates a different outcome for the desired action.</p>\n  <h2>\n    Test for denial-of-service (DoS) attacks through race conditions\n  </h2>\n  <p>Follow these steps to test for DoS attacks on the application using race conditions:</p>\n  <ul>\n    <li>Log in to the computer that is hosting the ASP.NET application using a low privileged account. </li>\n    <li>Monitor the application’s interaction with the file system.&nbsp; To execute this step you can use file system, registry, and network port monitoring tools such as Process Explorer from Systeinternals.com. </li>\n    <li>Find an application resource that is accessible to the low privileged account. </li>\n    <li>Open with write access or lock the application resource and observe how the application reacts.</li>\n  </ul>\n  <p>Expected results:&nbsp;The application is vulnerable if it stops servicing its users.&nbsp;This can occur because the application:</p>\n  <ul>\n    <li>Depends on a resource that is accessible to low privileged users. </li>\n    <li>Doesn’t fail gracefully if a dependant resource is locked or inaccessible.&nbsp;</li>\n  </ul>\n  <h1>Conclusions</h1>\n  <p>Even though race condition attacks are subtle in code, they represent a significant threat to ASP.NET applications using multithreading or relying on resources that are accessible to low privileged users.&nbsp;Attackers can exploit this vulnerability to execute logical or denial-of-service attacks on applications.&nbsp;To test for this vulnerability, it is recommended to familiarize with the common attack scenarios involved as well as with what causes this bug and how to protect against it.&nbsp;Then, you must try executing simultaneous actions to trigger different threads into accessing a shared variable or method.&nbsp;To execute race conditions for denial-of-service attacks, use a low privileged user to access any critically dependant resource to the application and see how the application handles the resource not being available.</p>"
        ]
      }
    ]
  }
}