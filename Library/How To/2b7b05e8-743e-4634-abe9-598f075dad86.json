{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "758367049",
      "Content_Hash": "2123482938"
    },
    "Metadata": [
      {
        "Id": [
          "2b7b05e8-743e-4634-abe9-598f075dad86"
        ],
        "Id_History": [
          "2b7b05e8-743e-4634-abe9-598f075dad86,5a210219-d808-4bc3-9168-43f4c64eacc3,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Impersonate the Original Caller Using S4U Kerberos Extensions"
        ],
        "Category": [
          "Impersonation and Delegation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Impersonate the Original Caller Using S4U Kerberos Extensions"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>Use the following steps to impersonate the original caller using S4U Kerberos extensions:</p>\r\n  <ol>\r\n    <li>Grant your WCF process account the <strong>Act as part of the operating system</strong> user right. If you are running using the network service account - by default it has this right. <li>Get the user name for the original caller and create a UPN for the user like the following format <strong>username&#64;FullyQualifiedDomainName.com</strong><li>Use the WindowsIdentity constructor and pass the UPN string as the parameter and get the <strong>WindowsIdentity</strong> token and impersonate the original caller.<ol><pre>   String username = &#8220;username&#64;FullyQualifiedDomainName.com&#8221;;<br />   WindowsIdentity winId = new WindowsIdentity(userName);<br />   using (winId.Impersonate())<br />   &#123;<br />       // access the local resources on behalf of the original callers       <br />   &#125;</pre></ol><li>Make sure to revert the impersonation, in the above example the using statement does it automatically for you.</li></li></li></li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information, see &#8220;Delegation and Impersonation with WCF&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms730088.aspx\">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><li>For more information, see &#8220;How to Use Protocol Transition for Impersonating and Delegating Original Caller in WCF&#8221;.</li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}