{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-996758195",
      "Content_Hash": "-1341433457"
    },
    "Metadata": [
      {
        "Id": [
          "de32cdfb-1a9b-4a0a-a05c-2d80c39332c9"
        ],
        "Id_History": [
          "de32cdfb-1a9b-4a0a-a05c-2d80c39332c9,1a0d6d1c-ea3e-4f97-9edb-ba686442931e,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Perform Role-Based Authorization"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Perform Role-Based Authorization"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\n  </ul>\n  <h1>Description</h1>\n  <p>Roles-based authorization is used to group users into groups (roles) and then set permissions on the role rather than on individual users. This eases management by allowing you to administer a smaller set of roles rather than a larger set of users. </p>\n  <p>The following are the different option for creating role-based authorization based on your authentication choice:</p>\n  <ul>\n    <li>If you are using Windows or Basic authentication, you can use Windows groups for role-based authorization <li>If you are using Username authentication, you can use ASPNET roles for role-based authorization <li>If you are using certificate authentication, you can map certificates to Windows groups for role-based authorization </li></li></li>\n  </ul>\n  <p>The following example configures the service to enable the SQL Role provider for using ASPNET roles.</p>\n  <ol>\n    <li>Configure the SQL Role provider<ol><pre>    &lt;&#33;-- Configure the Sql Role Provider --&gt;<br />    &lt;roleManager enabled =\"true\" <br />                 defaultProvider =\"SqlRoleProvider\" &gt;<br />      &lt;providers&gt;<br />        &lt;add name =\"SqlRoleProvider\" <br />             type=\"System.Web.Security.SqlRoleProvider\" <br />             connectionStringName=\"SqlConn\" <br />             applicationName=\"MembershipAndRoleProviderSample\"/&gt;<br />      &lt;/providers&gt;<br />    &lt;/roleManager&gt;<br />    &lt;&#33;-- Configure role based authorization to use the Role Provider --&gt;<br />    &lt;serviceAuthorization principalPermissionMode =\"UseAspNetRoles\"<br />                          roleProviderName =\"SqlRoleProvider\" /&gt;</pre><div></div></ol><li>Include a PrincipalPermission attribute in the service method that specifies the required authorization access role required.<ol><pre>   &#91;PrincipalPermission(SecurityAction.Demand, Role = \"Registered Users\")&#93;<br />    public double Multiply(double n1, double n2)<br />      &#123;<br />         double result = n1 &#42; n2;<br />         return result;<br />      &#125;</pre><div></div></ol><li>The following code shows how to do the authorization check in code: <ol><pre><br />if (Roles.IsUserInRole(&#64;\"accounting\"))<br />&#123;<br />//authorized<br />&#125;<br />else<br />&#123;<br />//authorization failed</pre><pre>&#125;</pre></ol><li>The following client connection supplies a username and password to call the method.</li></li></li></li>\n  </ol>\n  <blockquote>\n    <p />\n    <div>\n      <pre>      // Set credentials to Alice<br />      client.ClientCredentials.UserName.UserName = \"Alice\";<br />      client.ClientCredentials.UserName.Password = \"ecilA-123\";</pre>\n    </div>\n    <p />\n    <p />\n    <div>\n      <pre>      // Call the Add service operation.<br />      double value1 = 100.00D;<br />      double value2 = 15.99D;<br />      double result = client.Multiply(value1, value2);<br /></pre>\n    </div>\n    <p />\n  </blockquote>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information on authorization, see &#8220;Authorization&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms733071.aspx\">http://msdn2.microsoft.com/en-us/library/ms733071.aspx</a><li>For authorization Q&A, see the Authorization section of &#8220;WCF 3.5 Questions and Answers &#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home</a><br /></li></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}