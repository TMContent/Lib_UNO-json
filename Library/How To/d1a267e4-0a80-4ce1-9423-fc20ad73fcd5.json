{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1038724616",
      "Content_Hash": "1172611246"
    },
    "Metadata": [
      {
        "Id": [
          "d1a267e4-0a80-4ce1-9423-fc20ad73fcd5"
        ],
        "Id_History": [
          "d1a267e4-0a80-4ce1-9423-fc20ad73fcd5,0ae4e24b-3fa5-41c1-98bb-97b8f8dd95a6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for XPath Injection Vulnerabilities"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for XPath Injection Vulnerabilities"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "Andres De Vivanco"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>\n    <span>Applies To</span>\n  </h1>\n  <ul>\n    <li>\n      <span>Web applications that use XPath to query XML data</span>&nbsp;</li>\n  </ul>\n  <h1>\n    <span>Summary</span>\n  </h1>\n  <p>\n    <span>XPath is a language to query over XML data.<span>&nbsp;</span>Even though XPath is only used for querying data, it suffers from an injection vulnerability similar to SQL Injection.<span>&nbsp;</span>An attacker that manipulates the parameters used in an XPath query can modify the logic of an original query to perform an authentication bypass or execute information disclosure attacks. </span>\n  </p>\n  <p>\n    <span>It is recommended that you follow these steps to test for XPath Injection vulnerabilities:</span>\n  </p>\n  <ul>\n    <li>\n      <span>Step 1:<span>&nbsp; </span>Understand Attack Scenarios</span>\n    </li>\n    <li>\n      <span>Step 2:<span>&nbsp; </span>Analyze Causes and Countermeasures</span>\n    </li>\n    <li>\n      <span>Step 3:<span>&nbsp; </span>Start Testing and Exploring</span>\n    </li>\n    <li>\n      <span>Step 4:<span>&nbsp; </span>Fine-tune Test Cases</span>&nbsp;</li>\n  </ul>\n  <h1>\n    <span>Step 1:<span>&nbsp;</span>Understand Attack Scenarios</span>\n  </h1>\n  <p>\n    <span>First, you must understand the details of XPath attack scenarios.<span>&nbsp;</span>Similar to SQL injection, there are two types of XPath attacks:</span>\n  </p>\n  <ul>\n    <li>\n      <span>Normal XPath Injection </span>\n    </li>\n    <li>\n      <span>Blind XPath Injection</span>&nbsp;</li>\n  </ul>\n  <h2>\n    <span>\n      Scenario 1: Normal XPath Injection \n    </span>\n  </h2>\n  <p>\n    <span>In order to follow this and the next scenario, you must understand the background for XPath queries.<span>&nbsp;</span>XPath is a language that queries on XML data such as the file below:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&nbsp;<br />&lt;users&gt;&nbsp;<br />&nbsp; &nbsp;&lt;user&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &lt;username&gt;johns&lt;/username&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &lt;password&gt;abc123&lt;/password&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &lt;fullname&gt;John Smith&lt;/fullname&gt;&nbsp;<br />&nbsp; &nbsp;&lt;/user&gt;&nbsp;<br />&nbsp; &nbsp;&lt;user&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;username&gt;billg&lt;/username&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;password&gt;qwerty&lt;/password&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;fullname&gt;Bill Graves&lt;/fullname&gt;&nbsp;<br />&nbsp; &nbsp;&lt;/user&gt;&nbsp;<br />&nbsp; &nbsp;&lt;user&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;username&gt;mrt&lt;/username&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;password&gt;pr1v@t3&lt;/password&gt;&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;&lt;account&gt;Mr. T&lt;/account&gt;&nbsp;<br />&nbsp; &nbsp;&lt;/user&gt;&nbsp;<br />&lt;/users&gt;</font>\n  </p>\n  <p>\n    <span>An XPath query consists of expressions containing backslashes (/) and dots (.) that are used to select nodes from the root node down and predicates enclosed in squared brackets ([]) used to include when conditions:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">/users/user/username<br />/users/user[username/text() ='johns']&nbsp;</font>\n  </p>\n  <p>\n    <span>The first query returns all username nodes while the second uses a predicate to search all usernames that match the string <i>johns</i>.</span>\n  </p>\n  <p>\n    <span>A common scenario is to use XPath to perform authentication.<span>&nbsp;</span>For example, the next query grabs a username and password from a web form and check if they match the ones of a valid user:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">//users/user[username/text()='\" + Request.QueryString(\"username\") + \"' and password/text()='\" + Request.QueryString(\"password\") + \"']\";</font>\n  </p>\n  <p>\n    If a user enters safe values <i>(</i><i>username=test, password=123</i><i>)</i> the application builds a standard authentication query:</p>\n  <p>\n    <font face=\"'Courier New'\">//users/user[username/text()='test' and password/text()='123']</font>\n  </p>\n  <p>\n    However an attacker can use the web form to submit the following injection string as the <i>username </i>and <i>123 </i>as the <i>password</i>:</p>\n  <p>\n    <font face=\"'Courier New'\">user' or '1' = '1</font>\n  </p>\n  <p>The resulting XPath query looks like this:</p>\n  <p>\n    <font face=\"'Courier New'\">/users/user[username/text()='user' or '1' = '1' and password/text()='123']</font>\n  </p>\n  <p>\n    <span>Unlike SQL, XPath disallows commenting the rest of the expression so the attacker needs to insert an or condition that makes the password check irrelevant.<span>&nbsp;</span>The modified query returns all the users and the result is an attack against the authentication scheme in use.</span>&nbsp;</p>\n  <h2>\n    <span>\n      Scenario 2: Blind XPath Injection \n    </span>\n  </h2>\n  <p>\n    <span>Similar to blind SQL Injection, blind XPath Injection uses true and false conditions to infer confidential information.<span>&nbsp;</span>For example, an attacker wants to retrieve another userâ€™s password but has no way of forcing the web application to display it on screen.<span>&nbsp;</span>The attacker uses blind XPath injection to steal the victim passwords character by character.<span>&nbsp; </span></span>\n  </p>\n  <p>\n    <span>In the example below, the attacker now logs in with a valid account (</span>\n    <span>\n      <i>johns</i>\n    </span>\n    <span>) and tries to steal the password of another user.<span>&nbsp;</span>The attacker passes this attack string to check if the password for the third user in the document tree (</span>\n    <span>\n      <i>mrt</i>\n    </span>\n    <span>) starts with an&nbsp;</span>\n    <span>\n      <i>a</i>\n    </span>\n    <span>:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">johns' and substring((//user[position()=3]/child::node()[position()=2]),1,1)=\"a\" and '1' = '1</font>\n  </p>\n  <p>\n    <span>The resulting XPath query looks the one below (note that the attacker needs to pass his valid username and password). The statement only returns true if the </span>\n    <span>\n      <i>substring()</i>\n    </span>\n    <span> condition is true:<span>&nbsp;</span></span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">/users/user[username/text()='johns' and substring((//user[position()=3]/child::node()[position()=2]),1,1)=\"a\" and '1' = '1' and password/text()='abc123']</font>\n  </p>\n  <p>\n    The attacker can craft similar blind commands to check data lengths using \n    <i>string-length()</i>.\nFor instance, the next query returns true if the length of the target password is 7:</p>\n  <p>\n    <font face=\"'Courier New'\">/users/user[username/text()='johns' and string-length(//user[position()=3]/child::node()[position()=2]) and '1' = '1' and password/text()='abc123']</font>\n  </p>\n  <p>\n    The attacker can use additional functions such as \n    <i>count()</i>, <i>contains()</i>\n     to reveal both the contents of an XML store as well as its structure.&nbsp;Exploring the logic and hierarchy of an XML document is known as XML Crawling.&nbsp;</p>\n  <h1>\n    <span>Step 2:<span>&nbsp; </span>Analyze Causes and Countermeasures</span>\n  </h1>\n  <p>\n    <span>The following step in testing for XPath Injection bugs is to understand what causes them and how to defend against them.</span>\n  </p>\n  <h2>\n    <span>\n      XPath Injection Cause\n    </span>\n  </h2>\n  <p>\n    <span>XPath Injection bugs exist due to poor input validation on and failing to sanitize the parameters used in an XPath query.<span>&nbsp;</span>For example, consider the following PHP code:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">&lt;?php<br />&nbsp; &nbsp;$xml = simplexml_load_file(\"users.xml\");<br />&nbsp; &nbsp;$result = $xml-&gt;xpath(\"//users/user[username/text()='\". $_GET['name'] . \"']\");<br />&nbsp; &nbsp;print_r($result);<br />?&gt;</font>\n  </p>\n  <p>\n    <span>The PHP application uses the value passed in the URL parameter </span>\n    <span>name</span>\n    <span> in the XPath query without checking for injected commands.&nbsp;</span>Make sure to look at the API functions that your application uses to execute XPath queries.&nbsp;</p>\n  <p>\n    <span>\n    </span>\n  </p>\n  <h2>\n    <span>\n      XPath Injection Countermeasures\n    </span>\n  </h2>\n  <p>\n    <span>XPath Injection vulnerabilities can be prevented by sanitizing user input.<span>&nbsp;</span>Specifically, the application needs to disallow any single or double quotes inputted by a user from making it to an XPath query.<span>&nbsp;</span>Sometimes the input doesnâ€™t come directly from the user but is read from a persistent data source such as a database or an environment variable.&nbsp;In these cases, the application must sanitize the data coming from the data source and into the XPath query.&nbsp;</span>A proposed method consists of escaping any single quotes.&nbsp;Other methods include using parameterized XPath queries to properly handle user input.</p>\n  <h1>\n    <span>Step 3:<span>&nbsp;</span>Start Testing and Exploring</span>\n  </h1>\n  <p>\n    <span>Now that you are familiar with the inner workings of XPath injection attacks and able to recognize both its causes and countermeasures,<span>&nbsp;</span>you must continue by executing basic XPath Injection black box test cases and exploring the results.</span>\n  </p>\n  <h2>\n    <span>\n      Start with a simple test string\n    </span>\n  </h2>\n  <p>\n    <span>Almost all XPath Injection strings must contain either a single or a double quote.<span>&nbsp;</span>Your first test pass must consist of submitting a string containing quotes to see how the application reacts to it:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">abc'xyz\"</font>\n  </p>\n  <p>If the server doesnâ€™t return an error message and uses this string for an XPath query, it is almost certain that youâ€™ll find an XPath Injection bug.&nbsp;</p>\n  <h2>\n    <span>\n      Testing for Normal XPath Injection Authentication Bypass \n    </span>\n  </h2>\n  <p>\n    <span>Hardware Requirements:<span>&nbsp;</span>One client computer and one server computer running the web application.</span>\n  </p>\n  <p>\n    <span>Tools:&nbsp;Web browser.</span>\n  </p>\n  <p>\n    <span>Testing steps:</span>\n  </p>\n  <ol>\n    <li>\n      <span>In the client computer, open the web browser and navigate to an authentication page in the server that uses XPath.</span>\n    </li>\n    <li>\n      <span>Enter a string (first for the username and then for the password) containing and additional true command.</span>\n    </li>\n    <li>\n      <span>Submit the authentication form to the server.</span>\n    </li>\n  </ol>\n  <p>\n    <span>\n    </span>\n  </p>\n  <p>\n    <span>Expected results:&nbsp;The application should not authenticate the client.<span>&nbsp; </span></span>\n  </p>\n  <p>\n    <span>\n    </span>\n  </p>\n  <h2>\n    <span>\n      Testing for Normal XPath Injection Information Disclosure\n    </span>\n  </h2>\n  <p>\n    <span>Hardware Requirements:&nbsp;One client computer and one server computer running the web application.</span>\n  </p>\n  <p>\n    <span>Tools:&nbsp;Web browser.</span>\n  </p>\n  <p>\n    <span>Testing steps:</span>\n  </p>\n  <ol>\n    <li>\n      <span>In the client computer, open the web browser and navigate to any web form or other entry point that the server uses to build an XPath query.</span>\n    </li>\n    <li>\n      <span>Enter a string containing an additional command that executes an XPath query on another userâ€™s node.</span>\n    </li>\n    <li>\n      <span>Submit the form to the server.</span>\n    </li>\n  </ol>\n  <p>\n    <span>\n    </span>\n  </p>\n  <p>\n    <span>Expected results:&nbsp;The application should not send a response containing data from the other userâ€™s XML node.</span>\n  </p>\n  <p>\n    <span>\n    </span>\n  </p>\n  <h2>\n    <span>\n      Testing for Blind XPath Injection Information Disclosure\n    </span>\n  </h2>\n  <p>\n    <span>Hardware Requirements:&nbsp;One client box computer one server computer running the web application.</span>\n  </p>\n  <p>\n    <span>Tools:&nbsp;Web browser.</span>\n  </p>\n  <p>\n    <span>Testing steps:</span>\n  </p>\n  <ol>\n    <li>\n      <span>In the client computer, open the web browser and navigate to any web form or other entry point that the server uses to build an XPath query.</span>\n    </li>\n    <li>\n      <span>Enter a string containing an additional command that gathers partial knowledge of confidential information in the XML store.</span>\n    </li>\n    <li>\n      <span>Submit the form to the server.</span>\n    </li>\n    <li>\n      <span>Repeat steps 2 and 3 until the desired information is fully disclosed.</span>\n    </li>\n  </ol>\n  <p>\n    <span>\n    </span>\n  </p>\n  <p>\n    <span>Expected results:&nbsp;The application should not disclose the desired information.</span>&nbsp;</p>\n  <h1>\n    <span>Step 4:<span>&nbsp;</span>Fine-tune Test Case Data</span>\n  </h1>\n  <p>\n    <span>Finally, to achieve proper test case coverage, you must submit tests cases through different application entry points and adapt the format of the test data depending on the data format required for each entry point and each type of attack that can be carried out.<span>&nbsp;</span></span>\n  </p>\n  <h2>\n    <span>\n      Tune test case data format according to entry points\n    </span>\n  </h2>\n  <p>\n    <span>Like when testing for any injection bug, it is important that you adapt the data used in test cases according to the entry point under test.<span>&nbsp;</span>For example, when testing through URL parameters, the first string might look like the second or the third depending on the URL-encoding schema:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">user' or '1' = '1 -&nbsp;original test string<br />user'+or+'1'+=+'1 -&nbsp;string under URL encoding schema 1<br />user'%20or%20'1'%20=%20'1 - string under URL encoding schema 2</font>\n  </p>\n  <p>\n    <span>You must consider tuning the test case format for different entry points below such as URL parameters, web form fields, web services methods, flash parameters, etc.</span>&nbsp;</p>\n  <h2>\n    <span>\n      Fine-tune test case data according to different attack objectives\n    </span>\n  </h2>\n  <p>\n    <span>Finally, you must consider the different variations and constructs depending on the attack objective that the test case executed.<span>&nbsp;</span>The table below shows test case constructs depending on the objective.</span>\n  </p>\n  <table>\n    <tbody>\n      <tr>\n        <td>\n          <p>\n            <b>\n              <span>Construct</span>\n            </b>\n          </p>\n        </td>\n        <td>\n          <p>\n            <span>\n              <b>Attack Objective</b>\n            </span>\n          </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <p>\n            <font face=\"'Courier New'\">a' or '1=1'<br />a\" or \"1\"=\"1<br />a'] or '1'='1<br />a\"] or \"1\"=\"1<br />' or 1=1 or ''='</font>\n          </p>\n        </td>\n        <td>\n          <p>\n            <span>Authentication bypass</span>\n          </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <p>\n            <font face=\"'Courier New'\">\n              <span>(string-length(S))<br /></span>(substring(S,N,1))<br />count(//user/child::node())</font>\n          </p>\n        </td>\n        <td>\n          <p>\n            <span>Blind XPath injection</span>\n          </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <p>\n            <font face=\"'Courier New'\">\n              <span>namespace-uri(path)<br /></span>name(path)<br />count(path/child::node())<br />count(path/child::text())<br />count(path/child::comment())<br />count(path/child::*)<br />count(path/child::processing-instruction())</font>\n          </p>\n        </td>\n        <td>\n          <p>\n            <span>XML Crawling</span>\n          </p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <h1>\n    <span>Conclusions</span>\n  </h1>\n  <p>\n    <span>XPath Injection is a vulnerability that allows bypassing authentication and accessing an entire XML document.<span>&nbsp;</span>It is caused because the vulnerable application fails to properly validate and sanitize user input and uses the input as part of an XPath query.<span>&nbsp;</span>There are different test cases to execute depending on the type of XPath Injection under test: normal or simple XPath Injection, blind XPath Injection, and XML crawling.<span>&nbsp;</span></span>\n  </p>\n  <div>\n    <div>\n      <p />\n      <p>\n        <span>\n        </span>\n      </p>\n    </div>\n    <div>\n      <p>\n        <span>\n        </span>\n      </p>\n    </div>\n  </div>"
        ]
      }
    ]
  }
}