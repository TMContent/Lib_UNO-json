{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1490688001",
      "Content_Hash": "-538606825"
    },
    "Metadata": [
      {
        "Id": [
          "b1993b12-1cd9-4028-8176-fc1ec8c23f3c"
        ],
        "Id_History": [
          "b1993b12-1cd9-4028-8176-fc1ec8c23f3c,cf3c36df-e641-40f3-a2bc-b3b665b29739,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How To Improve Security When Hosting Multiple Applications in ASP.NET"
        ],
        "Category": [
          "Hardening"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How To Improve Security When Hosting Multiple Applications in ASP.NET"
        ],
        "Tag": [
          "ASP.NET,ASP.NET 3.5,ASP"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "ASP.NET 3.5"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>Windows Server 2003 <li>Internet Information Services (IIS) 6.0 </li></li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>This How To shows how you can isolate multiple applications from one another and from shared system resources in a Web hosting environment. The hosting environment might be a Web server provided by an Internet Service Provider (ISP) that hosts multiple untrusted applications from different companies, or it might be a shared Web server in a single organization that hosts multiple applications. Without adequate isolation, a poorly designed application or an application containing malicious code can adversely affect the operations of other applications on the server.</p>\r\n  <h1>Contents</h1>\r\n  <ul>\r\n    <li>Objectives <li>Overview <li>IIS 6.0 Process-Model Isolation <li>Summary of Steps <li>Step 1. Configure Your Application for Partial Trust <li>Step 2. Use Application Pool for Process Isolation <li>Step 3. Review machineKey Settings <li>Trust Levels Summary <li>Additional Resources </li></li></li></li></li></li></li></li></li>\r\n  </ul>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Use code access security to isolate multiple applications on a shared server. <li>Run multiple applications in separate IIS 6.0 application pools with custom identities. <li>Establish appropriate machineKey element settings for servers that host multiple applications. </li></li></li>\r\n  </ul>\r\n  <h1>Overview</h1>\r\n  <p>If you host multiple ASP.NET Web applications on a shared Web server, you should consider using application isolation. For example, how can you ensure that individual applications will not affect one another at run time? How can you prevent a single, poorly designed application from consuming critical system-level resources on the server that are necessary to keep other applications running properly? How can you ensure that one application from one company cannot access sensitive data contained in another company's application?</p>\r\n  <p>The issue of security is particularly significant for Internet Service Providers (ISPs) who host large numbers of untrusted applications from different companies. In a hosting scenario, it is essential to ensure that the installation of a new application cannot adversely affect the operation of existing applications.</p>\r\n  <p>The main ways to isolate ASP.NET applications are as follows: </p>\r\n  <ul>\r\n    <li>\r\n      <b>Use code access security</b>. You can run each application with partial trust, for example, by using the ASP.NET Medium trust level. This provides a constrained execution environment (which is also known as a sandbox) for each application where permissions to access system resources and resources belonging to other applications are limited. <li><b>Use separate processes for each application</b>. On Windows Server&nbsp;2003 and IIS&nbsp;6.0, run each application in its own application pool that is configured to run under a unique identity. This enables you to use Windows auditing to audit the activity of each application separately, and it allows you to configure Windows access control lists (ACLs) independently for each application. <li><b>Use separate encryption and decryption keys</b>. Ensure that the keys specified in the <b>machineKey</b> element are unique for each application. These keys are used to encrypt items, including forms authentication tickets and view state. By having separate keys, you help ensure data integrity, even if data from one application is accessed by another. </li></li></li>\r\n  </ul>\r\n  <h1>IIS 6.0 Process-Model Isolation</h1>\r\n  <p>In Windows Server 2003, IIS 6.0 enables multiple worker processes to be used to host separate Web applications. This is shown in Figure&nbsp;1.</p>\r\n  <p>\r\n    <img alt=\"\" src=\"http://msdn2.microsoft.com/en-us/library/Aa480478.iis6architecture(en-us,MSDN.10).gif\" border=\"0\" />\r\n  </p>\r\n  <p>\r\n    <b>Figure 1. ASP.NET architecture on Windows Server 2003 with IIS 6.0</b>\r\n  </p>\r\n  <p>Separate instances of the IIS worker process (W3wp.exe) can be used to host Web applications. By default, these processes run using the NetworkService account, which is a local account with restricted permissions that acts as the computer account over the network. A Web application that runs in the context of the NetworkService account presents the computer's credentials to remote servers for authentication.</p>\r\n  <p>To help provide isolation, you should run each application on a shared server by using a separate custom account. This allows you to audit the activity of each application separately, and to authorize each application with Windows access control lists (ACLs) separately.</p>\r\n  <h1>Summary of Steps</h1>\r\n  <p>To improve security when hosting multiple applications in ASP.NET, perform the following steps: </p>\r\n  <ul>\r\n    <li>Step 1. Configure your application for partial trust <li>Step 2. Use application pools for process isolation <li>Step 3. Review machineKey settings. </li></li></li>\r\n  </ul>\r\n  <h1>Step 1. Configure Your Application for Partial Trust</h1>\r\n  <p>By default, ASP.NET&nbsp;Web applications and Web services run with Full trust. As a result, code access security places no restrictions on the resources and operations that applications can access, and resource access is based solely on operating-system security and ACLs.</p>\r\n  <p>You can use code access security to provide a constrained execution environment (or a sandbox) to restrict which resources and operations your application can perform and to isolate applications from one another. Choose the appropriate trust level for your hosting scenario. Medium trust has been provided specifically for the needs of ISPs and other deployment environments that need to enforce strict security isolation between application code bases that are written by different organizations or customers. In other scenarios, you might need to create custom policy that grants a custom permission set.</p>\r\n  <h2>Using Medium Trust</h2>\r\n  <p>If you need to host multiple applications on a shared server, such as in an ISP scenario, use the Medium trust level to constrain the applications. The ASP.NET Medium trust level provides a constrained execution environment that is suitable for isolating multiple applications hosted on ISP servers.</p>\r\n  <h3>To configure all applications on your server to run with Medium trust </h3>\r\n  <ol>\r\n    <li>Open the machine-level Web.config file in the &#37;windir&#37;\\Microsoft.NET\\Framework\\&#123;version&#125;\\CONFIG folder. <li>Configure the <b>trust</b> element by changing the default setting for the <b>trust level</b> attribute from <b>Full</b> to <b>Medium</b> as shown in the following code example: <div><pre>&lt;location allowOverride=\"true\"&gt;<br />&nbsp; &lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; &lt;securityPolicy&gt;<br />&nbsp;&nbsp;&nbsp; ...<br />&nbsp;&nbsp;&nbsp; &lt;/securityPolicy&gt;<br />&nbsp;&nbsp;&nbsp; &lt;trust level=\"Medium\" originUrl=\"\" /&gt;<br />&nbsp; &lt;/system.web&gt;<br />&lt;/location&gt;  </pre></div><blockquote><b>Note</b>&nbsp;&nbsp;&nbsp;If present, the<b> originUrl</b> attribute can be used by certain permissions, such as <b>WebPermission</b>, to restrict connectivity to a defined set of network addresses.</blockquote><li>Ensure that the trust setting is locked in the machine-level Web.config file to prevent individual application settings from overriding the global setting. </li></li></li>\r\n  </ol>\r\n  <h2>Lock the Trust Level</h2>\r\n  <p>Service providers, or anyone responsible for running multiple Web applications on the same server, should apply the trust policy setting in the machine-level Web.config file, and then lock the trust level for all Web applications.</p>\r\n  <p>To do this, set the <b>allowOverride</b> attribute to <b>false</b> in the machine-level Web.config file, as shown in the following code example:</p>\r\n  <div>\r\n    <pre>&lt;location allowOverride=\"false\"&gt;<br />&nbsp; &lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; &lt;securityPolicy&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name=\"Full\" policyFile=\"internal\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name=\"High\" policyFile=\"web_hightrust.config\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name=\"Medium\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; policyFile=\"web_mediumtrust.config\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name=\"Low\"&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; policyFile=\"web_lowtrust.config\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;trustLevel name=\"Minimal\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; policyFile=\"web_minimaltrust.config\" /&gt;&nbsp; <br />&nbsp;&nbsp;&nbsp; &lt;/securityPolicy&gt;<br />&nbsp; &lt;trust level=\"Medium\" originUrl=\"\" /&gt;<br />&nbsp; &lt;/system.web&gt;<br />&lt;/location&gt;  </pre>\r\n  </div>\r\n  <p>Setting the <b>allowOverride</b> attribute to <b>false</b> prevents an individual developer from overriding the Medium trust setting in their application's Web.config file.</p>\r\n  <h2>Using Custom Policy</h2>\r\n  <p>If you are hosting multiple applications on a shared intranet server, you might need to develop custom policy to support the specific requirements of your applications. </p>\r\n  <h3>To choose an appropriate trust level </h3>\r\n  <ol>\r\n    <li>Determine the permission requirements of the application to be hosted. You can determine permission requirements manually by analyzing the code and determining the types of resources it accesses, the kind of resource access it requires (such as read/write), and the privileged operations it performs. You can also use the PermCalc tool to help. <li>Examine each trust level, beginning with High trust. Open the Web_HighTrust.config policy file from the &#37;windir&#37;\\Microsoft.NET\\Framework\\&#123;version&#125;\\CONFIG folder, and then examine the permissions to determine whether the High trust level settings are restrictive enough for your application <li>If your application requires fewer code access security permissions than those provided by the High trust level, then examine the Medium trust level. <blockquote><b>Note</b>&nbsp;&nbsp;&nbsp;The Low and Minimal trust levels are designed for locked down execution environments or environments where most of the Web application exists in assemblies in the global assembly cache (GAC) instead of the physical .aspx page code.</blockquote></li></li></li>\r\n  </ol>\r\n  <p>This process will help you to identify a trust level that matches your application's permission requirements for code access security as closely as possible without granting permissions that your application does not need. You might need to create a custom policy file if your application's permission requirements are not directly suited to one of the provided trust levels. For more information about how to do this, see <a href=\"http://msdn2.microsoft.com/en-us/library/ms998326.aspx\">How To: Use Code Access Security with ASP.NET 2.0</a></p>\r\n  <h1>Step 2. Use Application Pools for Process Isolation</h1>\r\n  <p>When running Windows Server&nbsp;2003 and IIS&nbsp;6.0, you should use multiple application pools and configure each application to run in its own worker process (W3wp.exe) with its own unique identity. This provides process-level isolation, which enables you to audit applications separately and to restrict individual applications with appropriately configured ACLs.</p>\r\n  <blockquote>\r\n    <b>Note</b>&nbsp;&nbsp;&nbsp;You can only use application pools when IIS is running in worker process isolation mode (the default) and not in IIS&nbsp;isolation mode.</blockquote>\r\n  <h2>To use application pools for isolation </h2>\r\n  <ol>\r\n    <li>Create a set of custom local or domain accounts, one per application, to run each application-pool process instance. <blockquote><b>Note</b>&nbsp;&nbsp;&nbsp;By not running your application as the default NetworkService account, you ensure that deliberate or accidental changes to the permission of this account do not impact your applications. In addition, having separate identities enables you to benefit from separate auditing and the ability to configure ACLs separately for each application.</blockquote><li>Configure NTFS permissions for each account to ensure that each account has access to only the appropriate file system files and folders and cannot access critical resources, such as operating system tools. To add your custom service account to the local IIS_WPG group: <ol><li>On the <b>Start</b> menu, click <b>Control Panel</b>,<b></b>click <b>Administrative</b><b>Tools</b>, and then click <b>Computer Management</b>. <li>Double-click (expand) <b>Local Users and Groups</b>, and then double-click (expand) <b>Groups</b>. <li>Right-click the <b>IIS_WPG</b> group, and then click <b>Add to Group</b>. <li>Click <b>Add</b>, type the custom account name, and then click <b>OK</b>. </li></li></li></li></ol><p>By adding your account to the IIS_WPG group, you grant the account appropriate access rights to file-system folders and registry keys, and you give the account the necessary user rights for running a Web application process. </p><li>For each account, run the following ASP.NET IIS Registration Tool (Aspnet_regiis.exe) command to assign the relevant ASP.NET permissions to the account: <p><b>aspnet_regiis -ga accountname</b></p><blockquote><b>Note</b>&nbsp;&nbsp;&nbsp;In Windows Server&nbsp;2003, running the &lt;CODE&gt;<b><i>Aspnet_regiis.exe</i></b><b><i>-ga</i></b>&lt;/CODE&gt; command adds the account to the IIS_WPG group. The IIS_WPG group provides the <b>Log on as batch job</b> permission and ensures that the necessary file-system permissions are granted.</blockquote><p>For more information about this tool, see \"ASP.NET IIS Registration Tool (Aspnet_regiis.exe)\" at <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cptools/html/cpgrfaspnetiisregistrationtoolaspnet_regiisexe.asp\">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cptools/html/cpgrfaspnetiisregistrationtoolaspnet_regiisexe.asp</a>. </p><li>Create new application pools and configure them to run under the new accounts. <ol><li>Start Internet Information Services (IIS) Manager and in the left pane, double-click (expand) the local computer node and then double-click (expand) <b>Application Pools</b>. <li>Right-click Application Pools, and then click New -Application Pool <li>In the <b>Add New Application Pool</b> dialog box, type a unique application pool name that is relevant to your hosted application. Leave the <b>Use default settings for new application pool</b> option selected and click <b>OK</b>. A new application pool with the specified name is created. <li>Right-click the new application pool and click <b>Properties</b>. <li>Click the <b>Identity</b> tab. In the <b>Application pool identity</b> section, click <b>Configurable</b>. <li>Type an account name and password, and then click <b>Apply</b>. The <b>Confirm Password</b> dialog box appears. Type the password again, click <b>OK</b>, and then click <b>OK</b> again. </li></li></li></li></li></li></ol><li>Configure each application to run in its own application pool. </li><ol><li>In IIS, right-click your hosted application's virtual directory, and then click <b>Properties</b>. <li>On the <b>Directory</b> tab, in the <b>Application settings</b> section, select the application pool you created earlier and then click <b>OK</b>. </li></li></ol></li></li></li></li>\r\n  </ol>\r\n  <h1>Step 3. Review machineKey Settings </h1>\r\n  <p>The <b>machineKey</b> element in the Web.config file is used to specify encryption and validation algorithms and keys used to help protect forms authentication cookies, role cookies, anonymous identification cookies, and page-level view state. You should ensure that the encryption and validation keys are different for each application. This prevents cross-application authentication, authorization, and anonymous identification; and it helps ensure that view state is not accessible between different applications. By default, the validation and encryption keys are set to unique values for each application with the following default configuration: </p>\r\n  <div>\r\n    <pre>...<br />&lt;system.web&gt;<br />&nbsp; &lt;machineKey validationKey=\"AutoGenerate,IsolateApps\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decryptionKey=\"AutoGenerate,IsolateApps\" ... /&gt;<br />&lt;/system.web&gt;<br />...  </pre>\r\n  </div>\r\n  <p>For additional security, you should specify custom <b>validationKey</b> and <b>decryptionKey</b> values in each application's Web.config file. </p>\r\n  <blockquote>\r\n    <b>Note</b>&nbsp;&nbsp;&nbsp;If you deploy your application in a Web farm, you must ensure that the configuration files on each server for a specific application share the same value for <b>validationKey</b> and <b>decryptionKey</b>. This is required because you cannot guarantee which server will handle successive requests. You must also ensure that they are set to different values for separate applications.</blockquote>\r\n  <h1>Trust Levels Summary</h1>\r\n  <p>The capabilities that are available to applications running at the various trust levels are summarized in Table&nbsp;1.</p>\r\n  <p>\r\n    <b>Table 1. Trust Levels and Their Key Capabilities and Restrictions</b>\r\n  </p>\r\n  <div>\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          <th>Trust level</th>\r\n          <th>Key capabilities and restrictions</th>\r\n        </tr>\r\n        <tr>\r\n          <td>Full</td>\r\n          <td>No restrictions imposed by code access security.</td>\r\n        </tr>\r\n        <tr>\r\n          <td>High</td>\r\n          <td>No unmanaged code.<br />No enterprise services.<br />Can access Microsoft SQL Server and other OLE DB data sources.<br />Can send e-mail by using SMTP servers.<br />Very limited reflection permissions. No ability to invoke private code by using reflection.<br />A broad set of other framework features are available. Applications have full access to the file system and to sockets.</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Medium</td>\r\n          <td>Permissions are limited to what the application can access within the directory structure of the application.<br />No file access is permitted outside of the application's virtual directory hierarchy.<br />Can access SQL Server data sources.<br />Can send e-mail by using SMTP servers.<br />Limited rights to certain common environment variables.<br />No reflection permissions whatsoever.<br />No sockets permission.<br />To access Web resources or Web services, you must explicitly add endpoint URLs &#8212; either in the <b>originUrl</b> attribute of the <b>trust</b> element or inside the policy file.</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Low</td>\r\n          <td>Intended to model the concept of a read-only application with no network connectivity or an application where most of the code is located in assemblies stored in the global assembly cache.<br />Read only access for file I/O within the application's virtual directory structure.<br />No ability to change the <b>IPrincipal</b> on a thread or on the <b>HttpContext</b></td>\r\n        </tr>\r\n        <tr>\r\n          <td>Minimal</td>\r\n          <td>Execute only.<br />No ability to change the <b>IPrincipal</b> on a thread or on the <b>HttpContext</b>.</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}