{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1810374285",
      "Content_Hash": "368690506"
    },
    "Metadata": [
      {
        "Id": [
          "275b15cc-ef5c-4637-ae77-62d8d4d1d4e2"
        ],
        "Id_History": [
          "275b15cc-ef5c-4637-ae77-62d8d4d1d4e2,5390c9a9-eaa8-426d-8ed8-79f226c857fc,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Throw an Exception with Complex Types Or Data Contracts with a Fault Exception"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          ""
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \r\n<li>Microsoft Visual Studio® 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>The following steps show an example of how to throw an exception with a data contract that has a complex type.</p>\r\n  <ol>\r\n    <li>Define the DataContract type to pass the details of SOAP faults as exceptions from a service back to a client\r\n<ol><pre>[DataContract]<br />public class DatabaseFault<br />{<br />[DataMember]<br />public string DbOperation;<br />[DataMember]<br />public string DbReason<br />[DataMember]<br />public string DbMessage;<br />}</pre></ol><li>Use the FaultContract attribute in the ListCustomers method to generate SOAP faults.\r\n<ol><pre>[ServiceContract]<br />public interface ICustomerService<br />{<br />// Get the list of customers<br />[FaultContract(typeof(DatabaseFault))]<br />[OperationContract]<br />List&lt;string&gt; ListCustomers();<br />…<br />}</pre></ol><li>Create and populate the DatabaseFault object with the details of the exception in the Service implementation class and then throw a FaultException object with the DatabaseFault object details.\r\n<ol><pre>catch(Exception e)<br />{    DatabaseFault df = new DatabaseFault();<br />df.DbOperation = \"ExecuteReader\";<br />df.DbReason = \"Exception in querying the Northwind database.\";<br />df.DbMessage = e.Message;<br />throw new FaultException&lt;DatabaseFault&gt;(df);<br />}<br /></pre></ol></li></li></li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at <a href=\"http://msdn.microsoft.com/en-us/library/ms733721.aspx\">http://msdn.microsoft.com/en-us/library/ms733721.aspx</a></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}