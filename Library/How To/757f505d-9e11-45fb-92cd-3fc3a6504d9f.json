{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "713357244",
      "Content_Hash": "1421446029"
    },
    "Metadata": [
      {
        "Id": [
          "757f505d-9e11-45fb-92cd-3fc3a6504d9f"
        ],
        "Id_History": [
          "757f505d-9e11-45fb-92cd-3fc3a6504d9f,ba7b121a-cda0-42eb-ac11-17aefc6fa68c,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Flow the Original Caller from an ASP.NET Client to WCF"
        ],
        "Category": [
          "Impersonation and Delegation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Flow the Original Caller from an ASP.NET Client to WCF"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\n  <ul>\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\n  </ul>\n  <h1>Description</h1>\n  <p>Use the following steps to impersonate the original caller from an ASP.NET client to a WCF Service:</p>\n  <ol>\n    <li>Configure your WCF Service to Use Windows Authentication<li>Configure the ASP.NET Application&#8217;s process identity for Constrained Delegation to WCF service<li>Impersonate the Original Caller in ASP.NET when Calling the WCF Service<ol><pre>using System.Security.Principal;<br />&#8230;<br />protected void Button1_Click(object sender, EventArgs e)<br />&#123;<br />    // Obtain the authenticated user's Identity and impersonate the original caller<br />    using (((WindowsIdentity)HttpContext.Current.User.Identity).Impersonate())<br />    &#123;<br />        WCFTestService.ServiceClient myService = new WCFTestService.ServiceClient();<br />        Response.Write(myService.GetData(123) &#43; \"&lt;br/&gt;\");<br />        myService.Close();<br />    &#125;<br />&#125;<br />&#8230;</pre></ol></li></li></li>\n  </ol>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information, see &#8220;Delegation and Impersonation with WCF&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms730088.aspx\">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><li>For more information see &#8220;How to Impersonate the Original Caller in WCF calling from Web Application&#8221; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=How&#37;20To&#37;20-&#37;20Impersonate&#37;20the&#37;20Original&#37;20Caller&#37;20in&#37;20WCF&#37;20calling&#37;20from&#37;20Web&#37;20Application&referringTitle=How&#37;20Tos\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=How&#37;20To&#37;20-&#37;20Impersonate&#37;20the&#37;20Original&#37;20Caller&#37;20in&#37;20WCF&#37;20calling&#37;20from&#37;20Web&#37;20Application&referringTitle=How&#37;20Tos</a></li></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}