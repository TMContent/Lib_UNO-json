{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-969111469",
      "Content_Hash": "-517431858"
    },
    "Metadata": [
      {
        "Id": [
          "9075bfd3-2ad8-4bac-9ab7-e0c3d96a99ae"
        ],
        "Id_History": [
          "9075bfd3-2ad8-4bac-9ab7-e0c3d96a99ae,653dddc8-b05a-4729-ae76-f764341ec3cc,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Use Health Monitoring in WCF"
        ],
        "Category": [
          "Auditing and Logging"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Health Monitoring in WCF"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>You can use Health Monitoring to log custom events in your service based on business logic. You can use health monitoring to Instrument your application and monitor user management events around authentication and authorization. This instrumentation can help you to detect and react to potentially suspicious behavior. It also enables you to gather operations data; for example, to track who is accessing your application and when user account passwords need to be reset.</p>\r\n  <p>Use the following steps to configure your WCF service to use Health Monitoring:</p>\r\n  <ol>\r\n    <li>Create a custom health monitoring event. <li>Configure your WCF service for health monitoring. <li>Instrument your application to raise a custom event.</li></li></li>\r\n  </ol>\r\n  <p>\r\n    <strong>Create a custom health monitoring event</strong>\r\n    <br />Create a Custom user management web event, by creating a class library and then create a class that inherits from WebAuditEvent.</p>\r\n  <pre>using System.Web.Management;</pre>\r\n  <pre> public class MyEvent : WebAuditEvent<br />    &#123;</pre>\r\n  <pre>        public MyEvent(string msg, object eventSource, int eventCode)<br />            : base(msg, eventSource, eventCode)<br />        &#123;<br />        &#125;</pre>\r\n  <pre>        public MyEvent(string msg, object eventSource, int eventCode, int eventDetailCode)<br />            : base(msg, eventSource, eventCode, eventDetailCode)<br />        &#123;<br />        &#125;<br />   public override void FormatCustomEventDetails(WebEventFormatter formatter)<br />        &#123;<br />            base.FormatCustomEventDetails(formatter);</pre>\r\n  <pre>            // Display some custom event message<br />            formatter.AppendLine(\"Some Critical Event Fired\");<br /> &#125;</pre>\r\n  <p>\r\n    <strong>Configure your WCF Service for Health Monitoring</strong>\r\n    <br />Add a health monitoring element to your configuration file as follows:</p>\r\n  <pre>&#8230;<br />&lt;system.web&gt;<br /> &lt;healthMonitoring&gt;<br />  &lt;eventMappings&gt;<br />   &lt;add name=\"Some Custom Event\" type=\"MyEventLibrary.MyEvent, MyEventLibrary\"/&gt;<br />  &lt;/eventMappings&gt;<br />  &lt;rules&gt;<br />   &lt;add name=\"Custom event\" eventName=\"Some Custom Event\" provider=\"EventLogProvider\" minInterval=\"00:00:01\"/&gt;<br />  &lt;/rules&gt;<br /> &lt;/healthMonitoring&gt;<br />&lt;/system.web&gt;<br />&#8230;</pre>\r\n  <p>\r\n    <strong>Instrument your application to raise a custom event</strong>\r\n  </p>\r\n  <p>Instrument the WCF Service by raising the custom event in a service contract.</p>\r\n  <pre>&#91;OperationContract&#93;<br />string InvokeCriticalEvent();</pre>\r\n  <pre>public string InvokeCriticalEvent()<br />    &#123;<br />        MyEvent obj = new MyEvent(\"Invoking Some Custom Event\", this, WebEventCodes.WebExtendedBase &#43; 1);<br />        obj.Raise();<br />        return \"Critical event invoked\";<br />    &#125;</pre>\r\n  <p>When these steps are complete you can verify that the custom events are in the system event log after calling the service method from a test client.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on health monitoring, see &#8220;How to: Use Health Monitoring in ASP.NET 2.0&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms998306.aspx\">http://msdn2.microsoft.com/en-us/library/ms998306.aspx</a><li>For more information see &#8220;ASP.NET Health Monitoring Overview&#8221; at <a href=\"http://msdn.microsoft.com/en-us/library/bb398933.aspx\">http://msdn.microsoft.com/en-us/library/bb398933.aspx</a><li>For auditing Guidelines, see the Auditing & Logging section of &#8220;WCF 3.5 Guidelines &#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Security&#37;20Guidelines&referringTitle=Home</a></li></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}