{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1194346940",
      "Content_Hash": "381633842"
    },
    "Metadata": [
      {
        "Id": [
          "758f9997-5676-4b25-b2bf-3bb54d800068"
        ],
        "Id_History": [
          "758f9997-5676-4b25-b2bf-3bb54d800068,ffac3dd7-8f3e-4606-a636-538244072f13,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "0sink editme How to Protect Sensitive Data in Memory"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Protect Sensitive Data in Memory"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&amp;#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&amp;#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>To minimize the exposure of secrets in memory, consider the following measures: </p>\r\n  <ul>\r\n    <li>Avoid creating multiple copies of the secret. Having multiple copies of the secret data increases your attack surface. Pass references to secret data instead of making copies of the data. Also realize that if you store secrets in immutable objects such as System.String, after each object manipulation, a new copy is created. <li>Keep the secret encrypted for as long as possible. Decrypt the data at the last possible moment before you need to use the secret.<li>Clean the clear text version of the secret as soon as you are done using it.</li></li></li>\r\n  </ul>\r\n  <p>You can use SecureString method to implement the above measures. The value of a SecureString object is automatically encrypted, can be modified until your application marks it as read-only, and can be deleted from computer memory by either your application or the .NET Framework garbage collector. </p>\r\n  <p>The following C# code creates an instance of the <strong>SecureString</strong> class and stores a data value in it.</p>\r\n  <pre>using System;<br />using System.Collections.Generic;<br />using System.Text;</pre>\r\n  <pre>namespace TestSecureString <br />&amp;#123;<br />  class Program <br />  &amp;#123;<br />   static void Main(string&amp;#91;&amp;#93; args) <br />   &amp;#123;<br />   System.Security.SecureString secstr = new System.Security.SecureString();<br />   secstr.AppendChar('W');<br />   secstr.AppendChar('C');<br />   secstr.AppendChar('F');<br />   secstr.MakeReadOnly();<br />   Console.WriteLine(secstr);<br />   &amp;#125; <br />  &amp;#125; <br />&amp;#125;</pre>\r\n  <p>An exception is thrown if you attempt to alter the data because the code locks the string value with the <strong>MakeReadOnly</strong> method once the final character has been added. So this string value may not be altered.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information see &amp;#8220;SecureString Class&amp;#8220; at <a href=\"http://msdn.microsoft.com/en-us/library/system.security.securestring.aspx?ref=herseybedava.info\">http://msdn.microsoft.com/en-us/library/system.security.securestring.aspx?ref=herseybedava.info</a><li>For more information see &amp;#8220;SecureString Application Sample&amp;#8220; at <a href=\"http://msdn.microsoft.com/en-us/library/07b9wyhy.aspx\">http://msdn.microsoft.com/en-us/library/07b9wyhy.aspx</a></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
        ]
      }
    ]
  }
}