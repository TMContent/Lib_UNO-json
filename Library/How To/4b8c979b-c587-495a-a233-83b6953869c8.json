{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1955365296",
      "Content_Hash": "-1666504180"
    },
    "Metadata": [
      {
        "Id": [
          "4b8c979b-c587-495a-a233-83b6953869c8"
        ],
        "Id_History": [
          "4b8c979b-c587-495a-a233-83b6953869c8,b5ef3370-de57-4afb-946c-075598ced841,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Assign the Current Principal with IAuthorizationPolicy to Allow Authorization Using Custom Authentication"
        ],
        "Category": [
          "Authorization"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "WCF"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Assign the Current Principal with IAuthorizationPolicy to Allow Authorization Using Custom Authentication"
        ],
        "Tag": [
          "WCF 3.5"
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>If your application uses a custom authentication, you will need to create a class that derives from IAuthorizationPolicy. In this class you will retrieve the principal from the cache that was created by the custom authentication, or from the store based on the user name, so WCF can authorize the user. After you get the principal you assign it to EvaluationContext.Properties&#91;&#8220;principal&#8221;&#93; and the identity to the EvaluationContext.Properties&#91;\"Identities\"&#93;. </p>\r\n  <pre>using System;<br />using System.Collections.Generic;<br />using System.Linq;<br />using System.Text;<br />using System.IdentityModel.Claims;<br />using System.IdentityModel.Policy;<br />using System.Web;<br />using System.Security.Principal;<br />using CustomAuthenticator;</pre>\r\n  <pre>namespace AuthorizationPolicy<br />&#123;<br /><br />    public class AuthorizationPrincipalPolicy : IAuthorizationPolicy<br />    &#123;<br />        public bool Evaluate(EvaluationContext evaluationContext, ref <br />        object state)<br />        &#123;</pre>\r\n  <pre>            object obj;<br />            if (&#33;evaluationContext.Properties.TryGetValue(\"Identities\",<br />                out obj))<br />                return false;<br />            IList&lt;IIdentity&gt; identities = obj as IList&lt;IIdentity&gt;;</pre>\r\n  <pre>            // make sure there is already a default identity<br />            if (identities == null &#124;&#124; identities.Count &lt;= 0)<br />                return false;</pre>\r\n  <pre>\r\n    <br />            string username = identities&#91;0&#93;.Name;</pre>\r\n  <pre>            //get the principal from the cache or build another one  </pre>\r\n  <pre>            IPrincipal principal = <br />            UserNameAuthenticator.GetUser(username);</pre>\r\n  <pre>            if (principal == null)<br />            &#123;<br />                string&#91;&#93; roles = <br />                UserNameAuthenticator.GetRolesForUser(username);<br />                principal = new GenericPrincipal(new <br />                GenericIdentity(username, \"Custom Provider\"), roles);<br /><br />            &#125;<br /><br />            evaluationContext.Properties&#91;\"Principal\"&#93; = principal;<br />            evaluationContext.Properties&#91;\"Identities\"&#93; =<br />                   new List&lt;IIdentity&gt;() &#123; principal.Identity &#125;;            </pre>\r\n  <pre>            return true;<br />        &#125;</pre>\r\n  <pre>        public System.IdentityModel.Claims.ClaimSet Issuer<br />        &#123;<br />            get &#123; return ClaimSet.System; &#125;<br />        &#125;</pre>\r\n  <pre>        public string Id<br />        &#123;<br />            get &#123; return \"ContextPrincipalPolicy\"; &#125;<br />        &#125;<br />    &#125;<br />&#125;</pre>\r\n  <p>The Policy library is configured in the web.config or app.config configuration file or in code.  The following example configures the policy location in the config file.  Define the custom authorization policy type in the <strong>add</strong> element <strong>policyType</strong> attribute.</p>\r\n  <pre>&lt;serviceAuthorization serviceAuthorizationManagerType=\"Microsoft.ServiceModel.Samples.MyServiceAuthorizationManager, service\"&gt;<br />&lt;&#33;-- The serviceAuthorization behavior allows one to specify custom authorization policies. --&gt;<br />&lt;authorizationPolicies&gt;<br />&lt;add policyType=\"Microsoft.ServiceModel.Samples.CustomAuthorizationPolicy.MyAuthorizationPolicy, PolicyLibrary\" /&gt;<br />&lt;/authorizationPolicies&gt;<br />&lt;/serviceAuthorization&gt;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on custom authorization policies, see &#8220;How to: Create a Custom Authorization Policy&#8221; at <a href=\"http://msdn.microsoft.com/en-us/library/ms729794(VS.85).aspx\">http://msdn.microsoft.com/en-us/library/ms729794(VS.85).aspx</a><li>For more information on authorization, see &#8220;Authorization&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms733071.aspx\">http://msdn2.microsoft.com/en-us/library/ms733071.aspx</a></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}