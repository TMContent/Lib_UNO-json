{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-420520363",
      "Content_Hash": "2080573553"
    },
    "Metadata": [
      {
        "Id": [
          "3b87587a-1a9c-4bae-885a-ba3c65a62479"
        ],
        "Id_History": [
          "3b87587a-1a9c-4bae-885a-ba3c65a62479,a510ec90-616d-44f5-96d0-6742b94418e6,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for Cross-Site Request Forgery (CSRF) Vulnerabilities"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for Cross-Site Request Forgery (CSRF) Vulnerabilities"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "Andres De Vivanco"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>\n    <span>Applies To</span>\n  </h1>\n  <ul>\n    <li>\n      <span>Web applications</span>\n    </li>\n  </ul>\n  <h1>\n    <span>Summary</span>\n  </h1>\n  <p>\n    During Cross-Site Request Forgery (CSRF)-also known as XSRF or session riding- attacks, an attacker forces a victim to make an unexpected web request such as a fraudulent bank transaction.<span>&nbsp;</span>For example, an attacker tricks the victim client into calling a banking function in a vulnerable page that transfers money from the victim’s to the attacker’s account.<span>&nbsp;</span>The victim triggers the attack by following an attacker’s link or visiting an attacker’s page.<span>&nbsp;</span>The vulnerable server page doesn’t recheck the authenticity of the victim’s request and allows the transfer to proceed.\n  </p>\n  <p>\n    <span>Follow these steps to test for CSRF bugs:</span>\n  </p>\n  <ul>\n    <li>\n      <span>Step 1:&nbsp;Understand Attack Scenarios</span>\n    </li>\n    <li>\n      <span>Step 2:<span>&nbsp;</span>Analyze Causes and Countermeasures</span>\n    </li>\n    <li>\n      <span>Step 3:<span>&nbsp;</span>Start Testing and Exploring</span>\n    </li>\n    <li>\n      <span>Step 4:<span>&nbsp;</span>Fine-tune Test Cases</span>&nbsp;</li>\n  </ul>\n  <h1>\n    <span>Step 1:&nbsp;Understand Attack Scenarios</span>\n  </h1>\n  <p>\n    <span>The first step in testing for CSRF bugs is to understand its attack scenarios.<span>&nbsp;</span>Even though the anatomy of a CSRF attack is almost always constant, its objectives may vary:<span>&nbsp;</span>attackers can exploit CSRF bugs to perform unauthorized fraudulent banking transactions, send spoofed email messages, steal sensitive information, and even install a back door.<span>&nbsp;</span>The following steps detail the anatomy of a CSRF attack:</span>\n  </p>\n  <ol>\n    <li>\n      <span>Attacker finds functionality in a web application that is vulnerable to CSRF.</span>\n    </li>\n    <li>\n      <span>Attacker builds a link invoking the vulnerable function and passing the required parameters as to executed the chosen attack.</span>\n    </li>\n    <li>\n      <span>Attacker waits until the victim client authenticates with the vulnerable web application.</span>\n    </li>\n    <li>\n      <span>Attacker tricks victim client into following the malicious link.</span>\n    </li>\n    <li>\n      <span>Victim client sends forged request to vulnerable server.</span>\n    </li>\n    <li>\n      <span>Vulnerable server allows and executes the forged request. </span>\n    </li>\n  </ol>\n  <p>\n    <span>The form of the link built in step 2 depends on the payload that the attacker wants to execute.<span>&nbsp;</span>For example, the link might looks like this when they payload is to transfer money from the victim’s to the attacker’s account:</span>\n  </p>\n  <p>\n    <a>\n      <font face=\"'Courier New'\">/makeTransfer?amount=1000&dest=attacker@attackersite.com</font>\n    </a>\n  </p>\n  <p>\n    <span>The link below sends an email titled </span>\n    <i>\n      <span>Hello</span>\n    </i>\n    <span> to </span>\n    <span>\n      <i>johny@example.com</i>\n    </span>\n    <span>:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">/sendMail?to=johny@example.com&title=Hello&body=I+did+not+send+this</font>\n  </p>\n  <h1>\n    <span>Step 2:<span>&nbsp; </span>Analyze Causes and Countermeasures</span>\n  </h1>\n  <p>\n    <span>During this step you will be shown the causes behind Cross-Site Request Forgery,<span>&nbsp;</span>how to recognize it within your code base and you will be shown coding best practices, as to avoid this issue altogether.</span>\n  </p>\n  <h2>\n    <span>Cross-Site Request Forgery Causes</span>\n  </h2>\n  <p>\n    This kind of vulnerability exists because the web application trusts the forged request.<span>&nbsp;</span>Thus, the cause for this bug is a case of poor or missing authentication code.<span>&nbsp;</span>The application lacks the functionality to verify that every client request is not forged and that it actually originates from a legitimate client action.<span>&nbsp;</span>Web applications vulnerable to CSRF implement a persistent authentication system in which they validate the user against a persistent token such as a session cookie.<span>&nbsp;</span>In persistent authentication, when the server receives a request it only checks if the user is logged in and not if the request comes due to a legitimate client action.\n  </p>\n  <h2>\n    <span>\n      Cross-Site Request Forgery Countermeasures\n    </span>\n  </h2>\n  <p>\n    The main prevention against CSRF vulnerabilities is to provide a transient authentication system instead of a persistent authentication system.&nbsp;Transient authentication systems verify for the authenticity of every request by using an additional check.<span>&nbsp;</span>One way of doing this is to transmit a secret in every URL; especially require a secret in URLs that request create, update, delete, or mail actions.&nbsp;An attacker will not be able to execute an attack unless he knows the secret.<span>&nbsp;</span>The problem is that an attacker can execute a XSS attack and steal the secret.\n  </p>\n  <p>\n    There is no silver bullet against CSRF attacks so developers need to look for ways of raising the bar against attackers.<span>&nbsp;</span>A popular way to protect Internet users from CSRF is by using CAPTCHAs (Completely Automated Turing Test to Tell Computers and Humans Apart) that require the client to validate the contents of a bitmap image before the application allows any requests.\n  </p>\n  <p>\n    <span>Other preventions suggested include using POSTs instead of GETs requests to perform actions and or to check the HTTP referrer header.<span>&nbsp; </span>However, both of these countermeasures can be defeated by a knowledgeable attacker since he can easily forge a POST command using a malicious script and can also easily spoof the HTTP referrer.<span>&nbsp;</span></span>\n  </p>\n  <h1>\n    <span>Step 3:<span>&nbsp;</span>Start Testing and Exploring</span>\n  </h1>\n  <p>\n    <span>Now that you’ve learned how CSRF attacks work and how to defend against them, this step shows the basic test cases to execute to start testing for CSRF bugs.</span>\n  </p>\n  <p>\n    <b>\n      <i>\n        <span>\n        </span>\n      </i>\n    </b>\n  </p>\n  <h2>\n    <span>\n      Basic Test for Cross-site Request Forgery \n    </span>\n  </h2>\n  <p>\n    <span>Follow these test steps to test against CSRF bugs. </span>\n    <b>\n      <i>\n        <span>\n        </span>\n      </i>\n    </b>\n  </p>\n  <ol>\n    <li>\n      <span>Find a web application page that performs an action based on a user request.</span>\n    </li>\n    <li>\n      <span>Construct a page containing a link or redirect that sends a forged request to the application server.<span>&nbsp;</span>This link usually contains a tag such as an </span>\n      <i>\n        <span>img</span>\n      </i>\n      <span> or </span>\n      <i>\n        <span>iframe</span>\n      </i>\n      <span> (although mostly any tags can be used) with the source address pointing to the request:<br /></span>\n      <font face=\"'Courier New'\">&lt;a href=\"http://bank.com/transfer.do?acct=MARIA&amount=100000\"&gt;View my Pictures!&lt;/a&gt;<br />&lt;img src=\"http://bank.com/transfer.do?acct=MARIA&amount=100000\" width=\"1\" height=\"1\" border=\"0\"&gt;</font>\n      <br />Note that the links above will both generate a GET request. In order to test for POST requests you must create a page containing a form with the URL parameters passed as hidden input, and add a script to automatically submit the form:<br /><font face=\"'Courier New'\">&lt;form action=\"http://bank.com/transfer.do\" method=\"post\"&gt;<br />&nbsp; &nbsp; &nbsp; &lt;input type=\"hidden\" name=\"acct\" value=\"MARIA\"&gt;<br />&nbsp; &nbsp; &nbsp; &lt;input type=\"hidden\" name=\"ammount\" value=\"100000\"&gt;<br />&lt;/form&gt;&nbsp;<br />&lt;script&gt;<br />&nbsp; &nbsp; &nbsp; document.forms[0].submit();<br />&lt;/script&gt;</font><ul></ul><span></span></li>\n    <li>\n      <span>Open an Internet browser and log in to the web application as a legitimate user.</span>\n    </li>\n    <li>\n      <span>Open the page built in step 2 (follow the link if necessary).</span>\n    </li>\n    <li>\n      <span>Confirm if the request was successful.</span>\n    </li>\n    <li>\n      <span>Repeat test case for every application create/update/delete/mail action.</span>\n    </li>\n  </ol>\n  <p>\n    <span>Expected result:<span>&nbsp;</span>the test fails if the application trusts and processes the forged request.</span>\n  </p>\n  <h2>\n    <span>Test Use of Secret in URLs</span>\n  </h2>\n  <p>\n    <span>This test will tell you if your application uses secrets in the URL.</span>\n  </p>\n  <p>\n    <span>Testing steps:</span>\n    <b>\n      <i>\n        <span>\n        </span>\n      </i>\n    </b>\n  </p>\n  <ol>\n    <li>\n      <span>Log in to the application as a legitimate user.</span>\n    </li>\n    <li>\n      <span>Browse to a web form that makes a valid request and uses a secret in the URL:<span>&nbsp;<br /></span></span>\n      <span>\n        <font face=\"'Courier New'\">\n        </font>\n        <span>\n          <font face=\"'Courier New'\">http://example.com/makeTransfer?amount=1000&dest=attacker@attackersite.com&secret=2y9ryo2hr2</font>\n          <ul>\n          </ul>\n        </span>\n      </span>\n    </li>\n    <li>\n      Start intercepting network traffic using HTTP(s) <i>WebScarab&nbsp;</i>proxy.\n    </li>\n    <li>\n      Configure browser to use <i>WebScarab </i>proxy.\n    </li>\n    <li>\n      <span>Make another request.</span>\n    </li>\n    <li>\n      In <i>WebScarab</i>, modify the URL to change the secret to another value:<br /><font face=\"'Courier New'\">http://example.com/makeTransfer?amount=1000&dest=attacker@attackersite.com&secret=XXXXXXXXXXX</font></li>\n  </ol>\n  <p>\n    <span>\n    </span>\n  </p>\n  <p>\n    <span>Expected result:&nbsp;The server must disallow the action since the secret was changed in step 6.&nbsp;The test fails if the server allows the requested action.</span>\n    <span>\n    </span>\n  </p>\n  <p>\n    <b>\n      <i>\n        <span>\n        </span>\n      </i>\n    </b>\n  </p>\n  <h2>\n    <span>\n      Test Use of Secret in Cookies\n    </span>\n  </h2>\n  <p>\n    <span>This test will tell you if your application properly uses secrets in the cookies.</span>\n  </p>\n  <p>\n    <span>Testing steps:</span>\n    <b>\n      <i>\n        <span>\n        </span>\n      </i>\n    </b>\n  </p>\n  <ol>\n    <li>\n      Start intercepting traffic network traffic using <i>WebScarab </i>proxy.\n    </li>\n    <li>\n      Open a browser, configure it to go through <i>WebScarab </i>proxy, and log in to the application as a legitimate user.\n    </li>\n    <li>\n      <span>Browse to a page that makes a request and submits a secret using a cookie.</span>\n    </li>\n    <li>\n      <span>Submit request.</span>\n    </li>\n    <li>\n      In <i>WebScarab</i>, replace the secret in the cookie.<span>&nbsp;</span>For instance:<br /><font face=\"'Courier New'\">GET http://www.example.com/transfer?amount=1000&dest=1234 HTTP/1.1<br />Host: localhost<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; es-ES; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14<br />Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5<br />Accept-Language: es-es,es;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7<br />Keep-Alive: 300<br />Proxy-Connection: keep-alive<br />Cookie: session-ID=1089eq14; secret=1240u9309u2efijaXXXX</font></li>\n  </ol>\n  <blockquote>\n  </blockquote>\n  <p>\n    <span>Expected result:&nbsp;The server must disallow the action since the secret was changed in step 6.&nbsp;The test fails if the server allows the requested action.</span>\n  </p>\n  <h1>\n    <span>Step 4:<span>&nbsp;</span>Fine-tune Test Case Data</span>\n  </h1>\n  <p>\n    <span>The final step in testing for CSRF bugs is to fine-tune the test case data to achieve proper test coverage.<span>&nbsp;</span>Testing for CSRF bugs require you to fine-tune the test case data as to cover different attack scenarios in an automated fashion.</span>\n  </p>\n  <h2>\n    <span>\n      Fine-tune Test Case Data per objective\n    </span>\n  </h2>\n  <p>\n    <span>Attackers can use CSRF bugs to execute different kinds of attacks.<span>&nbsp;</span>It is important that you test these different payloads depending the characteristics of your application. Common objectives of CSRF attacks include:</span>\n  </p>\n  <ul>\n    <li>\n      <span>Making a fraudulent bank transaction.</span>\n    </li>\n    <li>\n      <span>Sending spoofed email.</span>\n    </li>\n    <li>\n      <span>Exploiting an administrative application.</span>\n    </li>\n    <li>\n      <span>Forcing password resets.</span>\n    </li>\n    <li>\n      <span>Changing router and firewall configurations.</span>\n    </li>\n  </ul>\n  <h2>\n    <span>\n      Automate test cases \n    </span>\n  </h2>\n  <p>\n    <span>Finally, it is recommended that you extend your test automation by adding CSRF test cases to it.<span>&nbsp;</span>Make a list of all GET requests in URLs and POST requests and write your own script that makes the requests with different session tokens.<span>&nbsp; </span></span>\n  </p>\n  <h1>Conclusions</h1>\n  <p>\n    <span>Cross-Site Request Forgery is serious attack class that affects any web application that doesn’t explicitly protect against it.&nbsp;Testing for CSRF bugs requires you to understand the attack scenarios, the cause of the bugs, and how to defend against them.<span>&nbsp;</span>In addition you must execute different CSRF test cases and fine-tune test case data according to different entry points.</span>\n  </p>\n  <h1>\n    <span>Additional Resources</span>\n  </h1>\n  <p>\n  </p>\n  <ul>\n    <li>For more information about Cross-Site Request Forgery vulnerabilities, see&nbsp;<a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">http://en.wikipedia.org/wiki/Cross-site_request_forgery</a></li>\n  </ul>\n  <p />\n  <p />"
        ]
      }
    ]
  }
}