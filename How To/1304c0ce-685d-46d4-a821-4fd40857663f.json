{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1897959311",
      "Content_Hash": "-199073400"
    },
    "Metadata": [
      {
        "Id": [
          "1304c0ce-685d-46d4-a821-4fd40857663f"
        ],
        "Id_History": [
          "1304c0ce-685d-46d4-a821-4fd40857663f,e152ec09-61b2-4d35-a61f-d3f8b4786044,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "How to Use Demand And Assert"
        ],
        "Category": [
          "Code Access Security"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Use Demand And Assert"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Description</h1>\r\n  <p>If you need to call the <b>CodeAccessPermission</b>.<b> Assert</b> method to prevent a demand from propagating beyond the current stack frame, consider demanding an alternate permission to authorize the calling code before calling <b>CodeAccessPermission</b>.<b> Assert</b>. For example, if you call an unmanaged library and need to assert the unmanaged code permission, consider demanding another built-in or custom permission first. </p>\r\n  <p>If you only need to call <b>Assert</b> to satisfy the demands of a single method that your code calls, then place <b>Assert</b> prior to the method call. Then immediately call the <b>RevertAssert</b> method to keep the assertion window as small as possible, and to ensure that any subsequent code your method calls does not inadvertently succeed because <b>Assert</b> is still in effect. A common practice is to place the call to <b>RevertAssert</b> in a <b>finally</b> block to ensure that it always gets called, even in the event of an exception. </p>\r\n  <h1>&nbsp;</h1>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}