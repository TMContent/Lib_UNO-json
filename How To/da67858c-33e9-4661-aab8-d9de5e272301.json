{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-893281636",
      "Content_Hash": "1228471390"
    },
    "Metadata": [
      {
        "Id": [
          "da67858c-33e9-4661-aab8-d9de5e272301"
        ],
        "Id_History": [
          "da67858c-33e9-4661-aab8-d9de5e272301,00a3d829-a81b-47b7-8baa-4dfce2bf6311,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for URL Redirection Bugs"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for URL Redirection Bugs"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "OWASP"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Web Applications</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>Web applications use URL redirection to redirect their web clients to another URL address, most commonly in another domain. In most cases, applications hide URL redirection from their clients, such as when using a redirect page. However, sometimes applications expose URL redirecting to their clients such as when using a URL parameter to specify the target URL location. URL redirection attacks consist of exploiting URL redirection done through URL parameters for malicious purposes. To execute this attack, an attacker creates a malicious link that attempts to redirect towards a malicious site any web client who follows it. </p>\r\n  <p>Follow these steps to test for URL redirection bugs:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Start testing and exploring </li>\r\n    <li>Step 4: Fine-tune test case data</li>\r\n  </ul>\r\n  <h1>Step 1: Understand Attack Scenarios</h1>\r\n  <p>First, it is necessary to understand the anatomy of URL redirection bugs. During a URL redirection attack the attacker’s main goal is to redirect a target web client to a malicious site. This is achieved by sending a link to the web client that starts with the application domain name but contains a URL parameter. When the client clicks the link, the client’s browser is first directed to the vulnerable application which in turn redirects the client to the malicious location indicated by the URL parameter. For the attack to succeed two conditions must be met: first, an attacker must find a vulnerable application that redirects its clients to a location indicated by a URL parameter, and, second, the target web client must click on the malicious link. </p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The attacker finds a URL in the target web application that redirects web clients to a page dictated by a URL parameter (or through a special control character such as a question mark or asterisk). </li>\r\n    <li>The attacker sends a link to a target web client with the legitimate URL (found in step 1), but the attacker modifies the destination page to one of the attacker’s choice. </li>\r\n    <li>The target client clicks on the malicious link. This causes the target client’s web browser to be redirected to the malicious page set by the attacker.</li>\r\n  </ol>\r\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\r\n  <p>Next, you must understand what causes URL redirection bugs and how to defend against them. This will help you identify this issue in source code and prepare to execute the test cases.</p>\r\n  <p>Web applications use URL redirection for different purposes. For instance, an application that has a page moved to a different location uses a redirect to send its clients to the new page location. To achieve this automatically the application can use code that invokes methods such as <i>response.redirect</i> in PHP applications and internally control the redirection. However, some applications expose the URL redirection logic to outside clients. For instance, an application might use a redirect page that takes a URL parameter as the redirect target location. Consider the following URL: </p>\r\n  <pre>http://example.com/navigate.php?redir=<strong>http://example.com/login.php</strong></pre>\r\n  <p>The web application uses the <i>redir </i>URL parameter to control the target redirect location. An attacker can leverage this fact to trick a web client who trusts <i>example.com</i> into clicking the following link: </p>\r\n  <pre>http://example.com/navigate.php?redir=<strong>http://attackers.com/gotcha.php</strong></pre>\r\n  <p>If the application is vulnerable it redirects the client who clicks the link above to the attacker’s domain. Note that the attack is possible because the application exposes the URL redirection logic to web clients through the URL and because it doesn’t check the contents of the redirection target before doing the actual redirect, allowing the target to be modified towards a malicious website. </p>\r\n  <p>To defend against this bug developers such hide any URL redirection control from outside clients. If they must expose URL redirection through URL parameters, then applications must properly validate any redirect target before performing the redirect. Developers should implement a white list containing all the allowed redirect target locations and add relevant code to the application that disallows redirects to any location that is not in the white list. </p>\r\n  <p>Another option to protect against this attack is to warn clients that they will be redirected to an arbitrary location and give them the option not to do so. <br /></p>\r\n  <p>\r\n  </p>\r\n  <h1>Step 3: Start Testing and Exploring</h1>\r\n  <p>Now that you’ve reviewed the theoretical aspects of URL redirection attacks you should follow the next test case to check for it in your application. </p>\r\n  <h2>\r\n    <em>Test for URL redirection </em>\r\n  </h2>\r\n  <p>Follow these steps to test for URL redirection:</p>\r\n  <ol>\r\n    <li>\r\n      <p>Discover an application’s page/request that executes URL redirection. Note down the URL that is used during the redirection request. It is suggested to analyze the application’s use of URLs to find any embedded URLs; any URL contained within another URL is a hint of URL redirection. </p>\r\n    </li>\r\n    <li>\r\n      <p>Once you’ve found a suspicious URL, discover what part of this URL the application uses to pass the target redirect location. The application can pass the target URL in a named URL parameter: </p>\r\n      <pre>http://domain/navigate.php?redir=http://example.com/login.php </pre>\r\n      <p>Or by appending it after a special character such as a question mark or an asterisk (another symbols may be used)</p>\r\n      <pre>http://domain/navigate.php?http://example.com/login.php </pre>\r\n    </li>\r\n    <li>\r\n      <p>Modify the target redirect URL to a different URL such as (www.google.com) and make the request using a web browser:</p>\r\n      <pre>http://domain/navigate.php?http://www.google.com</pre>\r\n    </li>\r\n  </ol>\r\n  <p>Expected results: The application is vulnerable to URL redirection attacks if it redirects the web browser to the target URL modified in step 3 without giving any warnings. </p>\r\n  <h1>Step 4: Fine-tune Test Case Data</h1>\r\n  <p>URL redirection attacks require the target client to click on a malicious link. However, Internet clients might feel uneasy&nbsp;clicking a link if they notice that part of the link is not a trusted one. Therefore, an application that allows an attacker to pad or obfuscate the target URL has an increased the risk of a URL redirection attack on Internet clients. Consider the following URL links:</p>\r\n  <pre>http://trusted_domain/nav.php?redir=http://attacker.com/run.php\r\nhttp://trusted_domain/nav.php?redir=http://64.214.88.103/run.php\r\n  </pre>\r\n  <p>Note that this list is not exhaustive and it is necessary to keep up to date with different URL padding/masquerading methods.</p>\r\n  <p>The first URL can be quite suspicious to clients if they see it in the browser’s status bar. The third URL is obfuscated by using the attacker’s domain IP address instead of the domain name. The last URL is less suspicious than the first one and increases the exploitability of URL redirection bugs. </p>\r\n  <h1>Conclusions </h1>\r\n  <p>Attackers use URL redirection attacks to trick web clients into visiting a malicious site for phishing or spoofing purposes or to redirect a target client to a page containing malware that automatically attempts to infect the client’s computer. Even though URL redirection is a valid and convenient method for redirecting web clients to legitimate locations, such as when a web page is moved or deleted or when a site changes domain names; it is dangerous when the application exposes URL redirection to web clients and allows redirection to an arbitrary domain. To test for this vulnerability you must find a request that does a redirect based on the URL and modify the URL using the methods suggested. Finally, you must fine-tune the test cases using URL padding and obfuscation to increase the exploitability of this bug. </p>\r\n  <hr />\r\n  <p>[i] <b>URL Redirection Attack with Examples</b>. Paralliverse. <a href=\"http://log0.wordpress.com/2008/06/23/url-redirection-attack-with-examples/\">http://log0.wordpress.com/2008/06/23/url-redirection-attack-with-examples/</a></p>"
        ]
      }
    ]
  }
}