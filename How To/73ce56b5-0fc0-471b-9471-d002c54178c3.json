{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "317365889",
      "Content_Hash": "353845770"
    },
    "Metadata": [
      {
        "Id": [
          "73ce56b5-0fc0-471b-9471-d002c54178c3"
        ],
        "Id_History": [
          "73ce56b5-0fc0-471b-9471-d002c54178c3,05a4c7e5-49fd-480f-b065-6232466f301b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "How to Test for Repudiation Bugs"
        ],
        "Category": [
          "Testing"
        ],
        "Phase": [
          "Test"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "How To"
        ],
        "DirectLink": [
          "How to Test for Repudiation Bugs"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>\r\n Applies to \r\n</h1>\r\n  <ul>\r\n    <li>All software applications and services that perform logging</li>\r\n  </ul>\r\n  <h1>\r\n Summary \r\n</h1>\r\n  <p>Software applications that perform audit logging keep a record of when important actions are executed along with the clients responsible for executing each one of these actions.    Repudiation bugs enable attackers to tamper with application audit logs so that the attacker’s identity is not easily discovered.    </p>\r\n  <p>Follow these steps to test for insecure repudiation bugs:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios</li>\r\n    <li>Step 2: Analyze causes and countermeasures</li>\r\n    <li>Step 3: Execute test cases</li>\r\n  </ul>\r\n  <h1>\r\n Step 1: Understand Attack Scenarios \r\n</h1>\r\n  <p>During this first step it is necessary to understand the different attack scenarios under which repudiation bugs are exploited.    Repudiation is a higher level attack meaning that it is commonly achieved by using other attacks including HTTP request tampering, SQL injection, file-system tampering, and command injection.      The attacker’s goal, however, always remains the same: covering any hint that might relate the attacker’s identity with the attack.</p>\r\n  <h2>\r\n    <em>Scenario 1: Repudiation through HTTP request tampering</em>\r\n  </h2>\r\n  <p>A possible way to repudiate is by exploiting a possible weakness in how web applications do event logging. During this scenario the attacker modifies an HTTP request that executes certain action that merits logging to make it seem as if the action was executed by someone else.     For instance, an application might use two parameters in the client-cookies; the first to identify to authenticate its clients before they execute an action and the second for logging purposes. This means that the attacker can tamper with the second cookie parameter to confuse the application into logging an incorrect user name for an action that the attacker executes.    This is shown in the following example [i]:</p>\r\n  <pre>POST http://someserver/Upload_file.jsp HTTP/1.1\r\nHost: tequila:8443<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.8.1.4)\r\nGecko/20070515 Firefox/2.0.0.4\r\nAccept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\r\nAccept-Language: en-us,en;q=0.5\r\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\nKeep-Alive: 300<br />Connection: keep-alive\r\nReferer: http://someserver/uploads.jsp\r\nCookie: JSESSIONID=EE3BD1E764CD6EED280426128201131C; user=leonardo\r\nContent-Type: multipart/form-data; boundary=---------------------------263152394310685\r\nContent-Length: 321\r\n</pre>\r\n  <p>The attacker can use an HTTP proxy tool like <i>Burp proxy</i> or <i>WebScarab</i> to replace the <i>user</i> variable in the cookie and make it look as the file upload came from someone else.</p>\r\n  <h2>\r\n    <em>Scenario 2: Repudiation through SQL Injection</em>\r\n  </h2>\r\n  <p>SQL injection bugs can be exploited for multiple purposes, including repudiation.    During this scenario the attacker injects an extra SQL command into a SQL statement to tamper or delete the application log.     For instance, a SQL Server application vulnerable to SQL injection can be exploited using an injected batch UDPATE command that modifies the log table as follows:</p>\r\n  <pre>a'='a';UPDATE log_table SET user = 'some_legitimate_user' where user='attacker'--</pre>\r\n  <p>Or the attacker can drop the entire log table using the following injection string:</p>\r\n  <pre>a'='a';DROP TABLE log_table--</pre>\r\n  <p>The attacker can also use SQL injection to tamper or modify log information that is stored outside the database and in the server’s file system:</p>\r\n  <pre>a'='a';xp_cmdshell 'delete c:\\logs\\*.*'--</pre>\r\n  <h2>\r\n    <em>Scenario 3: File system tampering</em>\r\n  </h2>\r\n  <p>In many cases, log files exist in the hard drive of the computer hosting the application.     Here, the application developers are responsible for storing the log file in a secure location or else a low privileged attacker can access and/or modify the contents of the logs.</p>\r\n  <p>During this attack the attacker must log in to the target computer with low privileges and browse to the folder containing the log file. Then the attacker just opens the file and modifies it at will.</p>\r\n  <h2>\r\n    <em>Scenario 4: Command injection</em>\r\n  </h2>\r\n  <p>Another possible repudiation scenario can be executed through command injection. Command injection flaws allow attackers to insert additional shell commands such as Windows <i>del</i> or Unix <i>rm</i> that can be used to tamper with log files. For instance, an attacker might use the following attack string to delete the files from the logs directory:</p>\r\n  <pre>file.txt|del c:\\logs\\*.* </pre>\r\n  <p>If the application is vulnerable to command injection it will execute the injected <i>del</i> command and the attacker will be able to get rid of any information in the log files.</p>\r\n  <h1>\r\n Step 2: Analyze Causes and Countermeasures \r\n</h1>\r\n  <p>During this step you will understand the different causes of repudiation bugs as well as common defenses. This will help you look for bugs in code and recognize safe coding practices.</p>\r\n  <h2>\r\n    <em>Consistency between authentication and logging</em>\r\n  </h2>\r\n  <p>As seen during the first HTTP request tampering scenario, an attacker can take advantage of inconsistencies in the way that an application performs its logging.    During this scenario, the attack is possible because the application uses one parameter to perform authentication and a different one to perform logging.    To prevent against this kind of variation of repudiation bugs, developers should always use the same reliable data source for both logging and authentication.     For example, if they authenticate their clients using the session ID then they must log any actions also based on the session ID.     </p>\r\n  <h2>\r\n    <em>File permissions</em>\r\n  </h2>\r\n  <p>Another way to execute repudiation attacks is by login in into the target computer where the log files are stored and manually modifying them if access is granted.     Access is granted by systems using weak Access Control Lists (ACLs) set on the log files.     Weak ACLs allow any logged in user such as a low privileged user or guest to read and modify the contents of log files, making repudiation attacks possible.    To protect against this variation developers or application administrators should enforce strong ACLs on log files and run the application using a low-privileged account with strong ACLs.    This way only administrators or the actual application will be able to access the audit logs. </p>\r\n  <h2>\r\n    <em>Mitigating low level attacks</em>\r\n  </h2>\r\n  <p>Two of the scenarios in the previous section are possible only if the application is vulnerable to the other sub-attacks involved (SQL injection and command injection).     </p>\r\n  <p>SQL injection is caused when an application builds SQL queries using unsanitized user input.     Web applications construct SQL queries either from variables directly submitted by the client or from permanent stores.     In either case, a SQL injection bug occurs if the application fails to sanitize the SQL-related variables before building the query.    To protect against SQL injection attacks developers should sanitize all user input against a white list consisting of only valid input constructs.    The application must disallow any user input that is not contained in the white list.</p>\r\n  <p>Command injection is also a case of a bug caused by non-sanitized user input.     A web application that doesn’t properly check user input for additional or injected commands is vulnerable to command injection and thus to this variation of repudiation attacks.    To protect against command injection developers should also use a white list approach.&nbsp;</p>\r\n  <h1>\r\n Step 3: Execute test cases \r\n</h1>\r\n  <p>Now that you’ve reviewed the theoretical aspects of repudiation attacks it is necessary to execute the following test cases to check if your application is vulnerable.</p>\r\n  <h2>\r\n    <em>Test for repudiation through HTTP request tampering</em>\r\n  </h2>\r\n  <p>Follow these steps to test for repudiation through HTTP request tampering:</p>\r\n  <ol>\r\n    <li>Discover an HTTP request that performs an action that is logged and that uses two different parameters for authentication and logging.</li>\r\n    <li>Download an HTTP proxy such as Burp proxy (<a href=\"http://portswigger.net/proxy/\">http://portswigger.net/proxy/</a>).</li>\r\n    <li>Execute Burp proxy.</li>\r\n    <li>Set Internet browser to proxy through Burp proxy.</li>\r\n    <li>Navigate to page that makes request discovered in step 1.</li>\r\n    <li>Turn intercept on in Burp proxy.</li>\r\n    <li>Submit request in web browser.</li>\r\n    <li>In Burp proxy, modify the request and change the parameter used for logging to another value.</li>\r\n    <li>Check the application’s log file entry for the request submitted in step 7.</li>\r\n  </ol>\r\n  <p>Expected results: The application is vulnerable if the log file associates the action for the request submitted in step 7 with the value set in step 8.</p>\r\n  <h2>\r\n    <em>\r\n    </em>\r\n  </h2>\r\n  <h2>\r\n    <em>Test for Repudiation through SQL injection</em>\r\n  </h2>\r\n  <p>To test for repudiation bugs using SQL injection you must execute a SQL injection string that will cause the application to drop or modify a table from the database that contains logging information.    For instance, you can use any of the following attack strings as seen in the scenarios section:</p>\r\n  <pre>a'='a';UPDATE log_table SET user = 'some_legitimate_user' where user='attacker'--\r\na'='a';DROP TABLE log_table-- \r\na'='a';xp_cmdshell 'delete c:\\logs\\*.*'--  \r\n</pre>\r\n  <p>Note that this is a destructive form of testing as it will permanently delete log files and database tables. It is not recommended to execute the test cases above in a production environment.</p>\r\n  <h2>\r\n    <em>\r\n    </em>\r\n  </h2>\r\n  <h2>\r\n    <em>Test for Repudiation through file system tampering</em>\r\n  </h2>\r\n  <p>Follow these steps to test for repudiation through file system tampering:</p>\r\n  <ol>\r\n    <li>Log into target computer (computer storing the logging information) using    a low privileged or guest account.</li>\r\n    <li>Browse to the folder containing the log files.</li>\r\n    <li>Open a log file and attempt to modify its contents.</li>\r\n  </ol>\r\n  <p>Expected results: The application is vulnerable if it allows modification of its log files using a low privileged account.</p>\r\n  <p>\r\n  </p>\r\n  <h2>Test for Repudiation through command injection</h2>\r\n  <p>To test for repudiation bugs using command injection, you must execute a command injection string that will cause the application to delete or modify a log file.    For instance, you can use any of the following attack strings:</p>\r\n  <pre>Windows: file.txt|del c:\\logs\\*.*\r\nUnix: file.txt;rm ../logs/*.*</pre>\r\n  <p>Again, it is not recommended to execute the test cases above in a production environment as it will permanently delete files in the log directories.</p>\r\n  <p>\r\n  </p>\r\n  <h1>\r\n Conclusions \r\n</h1>\r\n  <p>Repudiation is a high level attack that focuses on covering an attacker’s tracks after executing a malicious action.     It is a high level attack as it requires other attacks such as request tampering, SQL injection, insecure storage, and command injection in order to perform it.     It is important that, before jumping into executing test cases, you understand the different attack scenarios involved as well as how are they possible and how to protect against them.    The test cases consist of executing each sub attack with the goal of deleting or tampering with the files or database tables that the application or system uses for logging purposes.</p>\r\n  <hr />\r\n  <div>\r\n    <p>[i] <strong>Repudiation Attack</strong>.    OWASP. <a href=\"http://www.owasp.org/index.php/Repudiation_Attack\">http://www.owasp.org/index.php/Repudiation_Attack</a></p>\r\n    <p>\r\n    </p>\r\n  </div>"
        ]
      }
    ]
  }
}