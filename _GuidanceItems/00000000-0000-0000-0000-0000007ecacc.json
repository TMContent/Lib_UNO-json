{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000007ecacc"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000007ecacc,bd0bef32-2681-4ecf-82cd-e3830a9e63f7,"
        ],
        "Library_Id": [
          "7d2d0571-e542-45cd-9335-d7a0556c2bea"
        ],
        "Title": [
          "Use Role-based Authorization"
        ],
        "Category": [
          "CORS"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "HTML5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Role-based Authorization"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* HTML5\r\n* Server-side\r\n\r\n==What to Do==\r\n\r\nUse role-based authorization to perform access control checks. Enumerate the different types of users and create specific roles for them. When authorizing access to a resource, build the security checks on a per-role basis rather than on a per-user basis.\r\n\r\n==Why==\r\n\r\nApplication roles allow administrators to group users into categories that need the same level of privileges. The mechanism provides an easy and clear way to discover and manage the least privileges necessary for the execution of a given task. It provides a robust and flexible way of managing the application's users.\r\n\r\n==When==\r\n\r\nIf your application uses access control and authorizes its users to application resources.\r\n\r\n==How==\r\n\r\nUse the following steps when designing role-based security:\r\n\r\n# **Implement access controls on the server-side.** Access controls should be implemented on the server-side, because client-side access controls are easily bypassed.\r\n# **Understand the different types of users.** Enumerate the different types of users needed for the application. Understand how they will use the application and to which resources they will need access. Create a matrix to map the actions each role is authorized to perform with the corresponding system components. Use this matrix to identify the different types of users according to the functionality they need. It may be useful to create a threat model to ensure that you correctly understand the implications of this matrix.\r\n# **Establish the roles.** Define which resources can be accessed by each role. There are two approaches when enforcing role-based security - programmatic and declarative.\r\n## **The programmatic approach.** The programmatic approach to role-based security is written inside the code and provides additional runtime flexibility. It allows your application to dynamically create and assign roles so that user privileges can be granted and revoked without the need of restarting your application. When using the programmatic approach to role-based security, place access control checks at the appropriate locations in your application. \r\n## **The declarative approach.** The declarative approach to role-based security is done via the configuration files. It allows easy manageability as the declarations can be modified without having to recompile. By using the declarative approach, you can easily manage the security settings for large portions of the application without changing the source code. \r\n# **Manage the users.** Assign the users to their respective user roles. The application should enforce the security policy according to the user roles instead of the actual users. \r\n\r\n==Essential Server-side Security Guidelines==\r\n\r\n* [[e2c5d605-2b34-4e1c-80aa-211a0ad7b64f|Validate All Input]]\r\n* [[397488da-ce91-4768-9ad9-1e6928980d72|Use Prepared Statements for SQL Queries]]\r\n* [[496b6306-dca6-48b6-920e-67e768dbe334|Encode Input Included in Output]]\r\n* [[45d61f0a-c4d3-44f0-93b1-d8205cd13fbe|Force Reauthentication when Executing Critical Functionality]]\r\n* [[fdb460e6-5d18-4e35-a093-4b260155d79e|Include Unique Tokens in HTTP Requests]]\r\n* [[00000000-0000-0000-0000-0000007ecacc|Use Role-based Authorization]]\r\n* [[1445abaf-4bb9-474c-b7e4-7bf58fe80f39|URL-Encode Data in HTTP Response Headers]]\r\n\r\n==Essential Server-side Security Checklist Items==\r\n\r\n* [[8dfa8088-a6cb-4062-8a44-0df8f2bc1cc4|All Input Is Validated]]\r\n* [[b5fb44c5-1702-42cf-b6be-894c511af7ac|Prepared Statements Are Used for SQL Queries]]\r\n* [[0ee9bc9f-c363-4a2d-be89-f84c069bda65|Input Included in Output Is Encoded]]\r\n* [[1c2b0859-c898-4f1c-b826-21392a7fc773|Reauthentication Is Enforced When Executing Critical Functionality]]\r\n* [[a2ef2a76-e562-4dd0-af9e-a6eb2b76c0d3|Unique Tokens Are Included in HTTP Requests]]\r\n* [[00000000-0000-0000-0000-0000008495ec|Role-based Authorization Is Used]]\r\n* [[3eb26600-9126-493a-a3cf-9d4b9815efc9|Data in HTTP Response Headers Is URL-Encoded]]"
        ]
      }
    ]
  }
}