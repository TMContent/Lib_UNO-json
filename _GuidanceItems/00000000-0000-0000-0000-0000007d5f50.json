{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000007d5f50"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000007d5f50,bbf705cd-c8ba-4742-ad7b-da3e55efb2d1,"
        ],
        "Library_Id": [
          "c4b9cb6a-4561-4451-9b6c-4e59d73584f6"
        ],
        "Title": [
          "Avoid Storing Session-Specific Data in Shared Objects"
        ],
        "Category": [
          "Session Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Avoid Storing Session-Specific Data in Shared Objects"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Applies To==\r\n\r\n* Java\r\n\r\n\r\n==What to Do==\r\n\r\nAvoid storing session-specific values in shared or global objects. \r\n\r\n\r\n==Why==\r\n\r\nValues in shared or global objects are not guaranteed to be thread safe and are therefore subject to race conditions. Race conditions are difficult to detect and debug, and can lead to exposure of sensitive user data. \r\n\r\n\r\n==How=\r\n\r\n\r\nTo avoid storing session-specific data in shared objects:\r\n\r\n# **Identify code that stores session-specific data.** Enumerate all code that stores session-specific data. Identify session-specific data values as well as objects that are shared or globally accessible such as: static classes, static variables and methods, including static references to non-static classes, class instance variables, and application-level global variables.\r\n# **Avoid storing unnecessary values in any session objects.** Review all code that stores session data and consider whether each piece of session data needs to be stored. Remove code that stores unneeded session data if possible.\r\n# **Ensure that shared objects do not contain data created for a specific session.** Review all code that stores session data. If session data is stored in shared objects, rewrite the affected code to use in-memory, thread safe session management, session cookies, or database sessions instead. \r\n\r\n\r\n==Problem Example==\r\n\r\nA web-based shopping cart allows users to add and modify the contents of their cart and continue shopping. A server that stores shopping cart data in a static class variable might cause race conditions resulting in a user's shopping cart switching to another user's session, under certain load conditions, exposing sensitive account information.\r\n\r\n\r\n==Solution Example==\r\n\r\nA shopping cart that only uses local variables within methods that are tightly bound to the session token will ensure that data will not be available to other sessions. Carefully-planned session life-cycles and proper destruction of expired sessions further prevent reuse and possible data retention from other sessions. \r\n"
        ]
      }
    ]
  }
}