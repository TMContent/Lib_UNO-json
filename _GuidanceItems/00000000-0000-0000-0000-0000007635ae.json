{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "00000000-0000-0000-0000-0000007635ae"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-0000007635ae,79f7ea9e-af13-487c-aa5b-7eb74ee759ff,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Validate File Formats"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Android"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Validate File Formats"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "WikiText"
        },
        "Data": [
          "==Applies To==\r\n\r\n* Android applications that open saved files or documents.\r\n\r\n==What to Do==\r\n\r\nVerify that the format of the file is correct when opening saved files or documents.\r\n\r\n==Why==\r\n\r\nMany vulnerabilities are exploited via malformed documents supplied to the application. Attackers frequently embed malformed documents in web pages - some applications are integrated into the web browser and will open these malicious documents automatically. Validating the file format before loading files into the application makes it harder to embed exploit code into documents.\r\n\r\n==How==\r\n\r\nTo validate file formats before loading files into the application:\r\n\r\n# **Define file format.** Specify valid values for all possible fields in all document types used by your applications. This information should be a part of project documentation and the developers may already have it.\r\n# **Review code.** Search for code that loads saved files into the application. Examine the extent of the validation already being performed by the application. If some validation is already being performed, some code may be recycled for a more thorough validation routine.\r\n# **Implement validation.** Write functions to validate all fields in all document types supported by the application.\r\n# **Centralize validation.** Move the validation functions for all document fields to the centralized input and data validation class or library. Write a master file format validation function that calls all individual data field validation functions.\r\n# **Use validation.** Go back to code that loads data files into the application. Remove any old validation code. Call the master file format validation function on all files before loading them into the application.\r\n\r\n==Data Validation Guidelines==\r\n\r\n* [[00000000-0000-0000-0000-0000008d3cec|Canonicalize File Names and Paths]]\r\n* [[00000000-0000-0000-0000-0000008149ca|Validate All Input]]\r\n* [[00000000-0000-0000-0000-0000006c7089|Validate and Encode Data Inserted into XML Documents]]\r\n* [[00000000-0000-0000-0000-0000007635ae|Validate File Formats]]\r\n\r\n==Data Validation Checklists==\r\n\r\n* [[00000000-0000-0000-0000-0000009763b8|File Names and Paths Are Canonicalized]]\r\n* [[00000000-0000-0000-0000-0000004f2fec|All Input Is Validated]]\r\n* [[00000000-0000-0000-0000-00000071b4f0|Data Inserted into XML Documents Is Validated and Encoded]]\r\n* [[00000000-0000-0000-0000-00000080c790|File Formats Are Validated]]"
        ]
      }
    ]
  }
}