{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "f7b99869-f29a-421a-ae50-38587f03386d"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Test Accounts Are Removed Before Deployment"
        ],
        "Category": [
          "Administration"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          "Technology Independent"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==What to Check For==\n\nVerify that all test accounts are removed before deployment.\n\n\n==Why==\n\nTest accounts provide access to the application's functionality during development. Since they are often poorly secured and monitored, they are a common target for attackers.\n\n\n==How to Check==\n\nUse the following steps to ensure your application has all test accounts removed:\n\n# **Check if your application has existing test users.** Enumerate all of your application's users. Verify that there are no test accounts in your application's user database. Common test accounts include, but are not limited to: any account name that includes the application's name, any account name containing the word \"test\", and any account that has been identified in your application's documentation as being a test account.\n# **Check if your application has hard-coded users.** Verify that your application's code base does not contain any hard-coded users. A hard-coded user is a username and password that is initialized to a fixed value when your application starts. Common locations to look for hard-coded users include: authentication procedures, authorization procedures, procedures that involve change of privileges, and components that require access controls.\n# **Check if your application has existing test roles.** Verify that there are no existing test roles left in your application. Common test roles are any roles containing the word \"test\" and any roles that are identified as test roles in your application's documentation.\n# **Check if your application has special privileges for test roles.** Verify that there are no conditions throughout your application's code base that grant special permissions to test roles. Common locations to look for special privileges to test roles include authorization procedures, procedures that involve change of privileges, and components that require access controls.\n\n\n==How to Fix==\n\nTo remove all test accounts from applications before deployment:\n\n# **Enumerate all accounts.** List all the users to your application. This should be a full comprehensive list that includes, but is not limited to, active users, inactive users, users pending confirmation, and test accounts.\n# **Identify their use.** Examine the use/status of each account. Sort the accounts into groups according to their use/status.\n# **Remove the accounts that will no longer be used.** Once the accounts are sorted into groups, list all accounts that are used for test purposes. After identifying all test accounts, remove them from your application's database.\n# **Enforce strong passwords on the remaining accounts.** After removing all test accounts, enforce strong passwords for the remaining accounts in your application. Strong passwords decrease the probability of compromising valid users.\n\n"
        ]
      }
    ]
  }
}