{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "8f48f6cc-4007-40d9-a2f0-a83803b08555"
        ],
        "Id_History": [
          "8f48f6cc-4007-40d9-a2f0-a83803b08555,2295acce-e038-40a6-b77b-954412589f9d,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "HTTP Request Smuggling"
        ],
        "Category": [
          "Deployment Considerations"
        ],
        "Phase": [
          "Deployment"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "HTTP Request Smuggling"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "==Description==\n\nHTTP request smuggling vulnerabilities occur when a proxy or a firewall handles invalid requests in a manner that causes it to issue malicious requests to the web application that it is supposed to be serving or protecting. \n\nFor example, sending a request that contains exploit code to a vulnerable HTTP firewall will cause that firewall to forward that exploit code to the web application. This is undesired behavior because the HTTP firewall should have blocked the exploit code. In this case, the application is actually being attacked, but an HTTP request smuggling vulnerability in the HTTP firewall is exploited to make the attack possible.\n\nHTTP proxies and firewalls are potentially affected by HTTP request smuggling vulnerabilities.\n\n==Impact==\n\nThe impact of HTTP request smuggling vulnerabilities in HTTP firewalls is that the attacker will be able to bypass the HTTP firewall when attacking the application that the firewall is supposed to be protecting.\n\nThe impact of HTTP request smuggling vulnerabilities in HTTP proxies is that the attacker can manipulate the content cached by the proxy. The attacker can modify the cached content to display a defaced page, making it look like the application has been compromised, when in reality it is only the proxy that has been compromised. The attacker can also modify the cached content to include malicious script and thus carry out cross-site scripting attacks on the application's users. \n\nIn the event of successful compromise of a user's system, the attacker will gain a foothold in the application. If an administrative user account is compromised, the attacker might attempt to inject malicious code into the application or application data. In the event of successful code injection, the attacker will be able to take over the application.\n\n==Countermeasures==\n\nThere are no application security measures that can mitigate HTTP request smuggling vulnerabilities, because these vulnerabilities are in the network devices that developers usually cannot reprogram themselves. To mitigate HTTP request smuggling vulnerabilities, update network hardware.\n\n* [[af3c9f89-0145-4970-bd13-dd30bf7ab387|Update Network Hardware]]\n\n==Application Check==\n\nTo verify that HTTP request smuggling vulnerabilities are mitigated, make sure that network hardware is updated.\n\n* [[57ef23a2-5371-4d52-9ec8-53fda4542b95|Network Hardware Is Updated]]\n\n==Additional Resources==\n\n* For more information about HTTP request smuggling, see http://projects.webappsec.org/w/page/13246928/HTTP%20Request%20Smuggling\n"
        ]
      }
    ]
  }
}