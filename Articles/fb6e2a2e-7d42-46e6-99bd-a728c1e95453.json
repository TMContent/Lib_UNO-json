{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "fb6e2a2e-7d42-46e6-99bd-a728c1e95453"
        ],
        "Id_History": [
          "fb6e2a2e-7d42-46e6-99bd-a728c1e95453,1af2c633-12a1-48b8-81c4-11fc6c4e196a,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Valuable Information Is Not Disclosed During Authentication Errors"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Scala Play"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Valuable Information Is Not Disclosed During Authentication Errors"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Applies to=\r\n\r\nScala and Play Framework 2.1.0+\r\n\r\n=What to Check For=\r\n\r\nEnsure your application displays a generic message when authentication fails.\r\n\r\n=Why=\r\n\r\nDisclosing information about invalid usernames and passwords can help an \r\nattacker obtain a list of valid users.\r\n\r\n=How to Check=\r\n\r\nTo ensure that your application displays generic messages upon failed \r\nauthentication:\r\n# **Identify all segments of code that handle failed authentication.** Identify all \r\nfunctions that handle login and perform access control on resources. Trace your \r\napplication's code base to locate the origin of each failed authentication \r\nmessage. Good places to start are if-else statements, throw statements and \r\nexception handlers. It is a common practice for developers to group messages \r\ninto resource files instead of hard-coding them into your application's source \r\ncode\r\n# **Review the error messages.** Review the returned error messages. Verify that:\r\n*Structure: Error messages are brief and direct.\r\n*Contents: Error messages do not contain unnecessary contents such as internal debug information.\r\n*Variety: All error messages that pertain to failed authentication are identical.\r\n\r\n\r\n=How to Fix=\r\n\r\nTo provide secure error messages when authentication fails, use the following \r\nsteps:\r\n# **Choose an error message.** The message should be very generic. It should \r\nsignify \"yes\" or \"no\" to the authentication attempt. For example: \"Authentication \r\nfailed.\"\r\n# **Display only one message.** Your application should provide feedback only \r\nafter all credentials have been verified. Structure your code in a manner that \r\nallows all checks to be executed at once. For example:\r\n\r\n{{{\r\n           if (!validUser() || !validPass()) \r\n              { \r\n                throw new AuthenticationException(\"Authentication failed.\"); \r\n               }\r\n}}}\r\n\r\n\r\nBecause it is sometimes impossible to structure the code in a manner where all \r\nchecks are performed at once, it is important that all error messages contain the \r\nexact same information. Any variation in the error messages can give away the \r\ninformation that a username is valid.\r\n\r\n\t\r\n\r\n\r\n"
        ]
      }
    ]
  }
}