{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1542933997",
      "Content_Hash": "-265929780"
    },
    "Metadata": [
      {
        "Id": [
          "eeb8a6d5-2181-48fa-8b2a-3e44a532a50a"
        ],
        "Id_History": [
          "eeb8a6d5-2181-48fa-8b2a-3e44a532a50a,a8986aff-e637-4872-904d-9ea992ae137d,"
        ],
        "Library_Id": [
          "51eb81c3-1d23-4146-ba83-8a6bb9233c11"
        ],
        "Title": [
          "Validate Ranges of All Integer Values"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Validate Ranges of All Integer Values"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Perform range checks before values of mathematical operations or conversions are assigned to integer-type variables.</p>\r\n  <h1>Why</h1>\r\n  <p>Integer-type variables have minimum and maximum limits on data that they can store. Placing too much data in an integer-type variable results in an integer overflow. Different platforms fail differently as a result of integer overflows, but there is a possibility of an arbitrary code execution resulting from an integer overflow bug. When values that are too high or too low are assigned to unsigned integers, integer-wrapping results, which usually means that unexpected values are produced. Conversions between signed and unsigned integers, and other data types, may result in truncation or losing sign information. All of these bugs may result in very dangerous vulnerabilities. All of these bugs may be prevented by validating values of integer operations before assigning them to variables.</p>\r\n  <h1>When</h1>\r\n  <p>Validate data when assigning it to integer-type variables.</p>\r\n  <h1>How</h1>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify code.</strong> Identify all code that assigns values to integer-type variables. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first. Some development environments and compilers may be able to detect these types of errors, but automatic detection should not be relied on for critical software components.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Add range checks.</strong> Use platform-defined constants to check that values being assigned to integer-type variables are valid. Minimum and maximum values for integer-type variables are defined in limits.h. The following is a list of common maximum and minimum values for integer-type variables: </p>\r\n        <ul>\r\n          <li>INT_MIN<li>INT_MAX<li>LONG_MIN<li>LONG_MAX<li>SHRT_MIN<li>SHRT_MAX<li>UINT_MAX<li>ULONG_MAX<li>USHRT_MAX</li></li></li></li></li></li></li></li></li>\r\n        </ul>\r\n        <li>\r\n          <p>\r\n            <strong>Validate values assigned to character-type variables.</strong> Character-type variables are actually integers in C and C&#43;&#43;, therefore they should be treated the same. The following constants apply to character type variables:</p>\r\n          <ul>\r\n            <li>CHAR_BIT<li>CHAR_MAX<li>CHAR_MIN<li>SCHAR_MAX<li>SCHAR_MIN<li>UCHAR_MAX</li></li></li></li></li></li>\r\n          </ul>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345\">Protect Against Integer Overflows</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}