{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1675560699",
      "Content_Hash": "347747859"
    },
    "Metadata": [
      {
        "Id": [
          "155aadfd-39f0-454e-8d45-53553eb612d1"
        ],
        "Id_History": [
          "155aadfd-39f0-454e-8d45-53553eb612d1,c0f010d5-bf35-4448-9f59-930c80132e5b,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Check Array Indexes Before Use"
        ],
        "Category": [
          "Memory Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Check Array Indexes Before Use"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Check your array indexes before use to ensure that the index is within the array bounds.</p>\r\n  <h1>Why</h1>\r\n  <p>Array indexing errors, such as buffer overruns can lead to memory being overwritten at arbitrary locations. This can lead to application instability or, with a carefully constructed attack, can lead to code injection.</p>\r\n  <h1>When</h1>\r\n  <p>Whenever indexing into an array with a variable or calculated value.</p>\r\n  <h1>How</h1>\r\n  <p>Make sure that the following rules are followed: </p>\r\n  <ul>\r\n    <li>Make sure that indexes run from zero to n-1, where n is the number of array elements. <li>Where possible, make sure that code does not use input parameters as array indexes. <li>Make sure that any input parameters used as array indexes are validated and constrained to ensure that the maximum and minimum array bounds cannot be exceeded. </li></li></li>\r\n  </ul>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following code the array is indexed without checking to ensure the index is within the array boundaries.</p>\r\n  <pre>int ArrayIndexing(int index)<br />&#123;<br />&nbsp; return intArray&#91;index&#93;;<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following code the array index is checked before use.</p>\r\n  <pre>int ArrayIndexing(int index)<br />&#123;<br />&nbsp; if ((index &gt;= 0) &#124;&#124; (index &lt; CLOUD_REG_NUM_PROV_IFCS))<br />&nbsp; &#123;<br />&nbsp; &#9;return -1;<br />  &#125;<br />  return intArray&#91;index&#93;;<br />&#125;</pre>"
        ]
      }
    ]
  }
}