{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "38295574",
      "Content_Hash": "-1793991211"
    },
    "Metadata": [
      {
        "Id": [
          "edd3e5fa-44a1-402a-820f-1860e9361fd1"
        ],
        "Id_History": [
          "edd3e5fa-44a1-402a-820f-1860e9361fd1,b833b1a7-4f4a-4224-bbd4-ea70e1fe826e,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Protect the Account Management Functions"
        ],
        "Category": [
          "Authentication"
        ],
        "Phase": [
          "Design"
        ],
        "Technology": [
          "PHP"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Protect the Account Management Functions"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>PHP</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Separate the account administration from the main application interface.</p>\r\n  <h1>Why</h1>\r\n  <p>Account administration requires higher privileges than the main application interface. Separating the two interfaces decreases the risk of a normal user being able to escalate his privileges to that of an administrator.</p>\r\n  <h1>When</h1>\r\n  <p>If your application has an administrative interface, use this guideline to separate it from the main application interface.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following steps when designing an administrative interface:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Only privileged users can administer all accounts.</strong> Design your application such that the administrative module is separate from the main application interface. Since the separation requires using separate authentication mechanisms for the application and administration, there is a reduced risk of escalation-of-privilege attacks. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Users may be allowed to administer their own accounts.</strong> It may be necessary to allow users to administer their own accounts. This involves the ability to change passwords, account details, etc. Such administration can be done through the main application interface. Because the user is modifying sensitive data, extra security precautions must be enforced:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Force re-authentication.</strong> Enforce re-authentication when modifying the user's password. This helps verify that the user is aware of the password change and is not a victim of a session hijacking. </p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Modify accounts in sections.</strong> Do not modify all account information at once. Split the account modification procedure in sections. For example, group the account information into credentials, personal data, contact information and additional information. Modifying the account information in groups reduces the risk of information leakage when the user is updating his/her account. </p>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Use SSL when modifying accounts.</strong> The use of SSL provides encryption when transmitting sensitive data over the network. SSL also certifies the authenticity of the application against the user.</p>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <br />"
        ]
      }
    ]
  }
}