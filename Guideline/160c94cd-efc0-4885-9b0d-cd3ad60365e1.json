{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "862543064",
      "Content_Hash": "-126801099"
    },
    "Metadata": [
      {
        "Id": [
          "160c94cd-efc0-4885-9b0d-cd3ad60365e1"
        ],
        "Id_History": [
          "160c94cd-efc0-4885-9b0d-cd3ad60365e1,07263e2d-cf76-4958-b4e7-f2c82bcb0603,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Echo Untrusted Data Back to the User"
        ],
        "Category": [
          "Encoding"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Echo Untrusted Data Back to the User"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Do not echo input back to the user without first validating and/or encoding the data.&nbsp; Data which can be modified by a user must be treated as untrusted data, regardless of whether or not the user is expected to modify it during normal application use. </p>\r\n  <h1>Why</h1>\r\n  <p>Echoing input directly back to the user makes your application susceptible to malicious input attacks, such as cross-site scripting.&nbsp; If a malicious user can trick someone else into submitting dangerous input in such a way that it will be returned to the victim, or cause the site to store the malicious input they give it so it will be returned to other users, they can exploit vulnerabilities of this class.&nbsp; What constitutes bad input varies widely depending on the system in question.&nbsp; On the web, it normally means some kind of javascript. </p>\r\n  <h1>When</h1>\r\n  <p>Applications should never echo untrusted or user modifiable data back to the user without appropriate encoding. </p>\r\n  <h1>How</h1>\r\n  <p>If you write output that includes user input or data from a shared database or a local file that you do not trust, encode it.&nbsp; Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks, among other problems.&nbsp; Encoding the data ensures that it is treated as literal text and not as script.&nbsp; ASP.NET's Server.HtmlEncode function is often used to protect against cross-site scripting attacks. However, this function only encodes &lt;&gt;\"& characters. This is not sufficient to protect against all possible attacks. For instance, the following ASP.NET code would be vulnerable. </p>\r\n  <pre>&lt;img id='img&lt;%=Server.HtmlEncode(Request.QueryString[\"userId\"]) %&gt;'&nbsp;&nbsp; src='/image.gif' /&gt;</pre>\r\n  <p>An attacker could inject client-side script here by setting <strong>userId </strong>to </p>\r\n  <pre>' onload=alert('xss') alt='</pre>\r\n  <p>The safest solution is to encode all non-alphanumeric characters. Only this type of whitelist solution will catch all possible XSS attacks, regardless of context.&nbsp; This&nbsp;requires more overhead in terms of processing time and size of the resulting HTML, but it is the safest encoding mechanism for all HTML contexts:</p>\r\n  <pre>public static string HtmlEncode(string x)<br />{<br />   if (x == null)<br />   {<br />   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;return x;<br />   }<br />&nbsp;&nbsp;&nbsp;return Regex.Replace(x, \"[^a-zA-Z0-9]+\", new MatchEvaluator(WebUtility.EncodeMatch));<br />}</pre>\r\n  <p>This is also the approach that the Microsoft Anti-Cross Site Scripting Library&nbsp;takes.&nbsp; If you are using the Anti-Cross Site Scripting Library, you can use the <b>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</b> method.&nbsp; Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <b>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</b> to make them safe.&nbsp; </p>\r\n  <p>\r\n    <b>Note</b> &nbsp; &nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&nbsp; Also, early encoding of some data can result in double encoding problems. </p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
        ]
      }
    ]
  }
}