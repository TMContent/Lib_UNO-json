{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1336300173",
      "Content_Hash": "815628058"
    },
    "Metadata": [
      {
        "Id": [
          "a5491c44-164b-4046-94d3-b575b9745e8b"
        ],
        "Id_History": [
          "a5491c44-164b-4046-94d3-b575b9745e8b,6ceb5713-4e85-40fe-8408-cc1d1bc9df85,"
        ],
        "Library_Id": [
          "c4b9cb6a-4561-4451-9b6c-4e59d73584f6"
        ],
        "Title": [
          "Filter All User-Supplied Filename And Path Input"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Filter All User-Supplied Filename And Path Input"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Carefully validate filename and path input. Apply whitelist techniques when validating input.</p>\r\n  <h1>Why</h1>\r\n  <p>Filenames and paths interact directly with the underlying filesystem. Allowing malicious users to manipulate file system operations directly or indirectly through their input can expose important sensitive system files. Canonicalization vulnerabilities can result in an attacker gaining access to unexpected resources.</p>\r\n  <h1>When</h1>\r\n  <p>If your user input is used to help construct filenames or file paths, carefully validate to ensure the input is not used to gain access to unexpected resources.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following steps when validating filename and path input:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Establish a base directory. </strong>The base directory is where your application should store any user-supplied files.</p>\r\n      <ul>\r\n        <li>The location of the base directory should be carefully chosen. It should not be a subdirectory of any important directory such as <em>/etc</em> or <em>C:\\Windows</em>. <li>Write access should be allowed only to the base directory and its children, but not to its parents. <li>Because of read access misuses, it is recommended that no sensitive information is stored inside any of the base directory's parents. <li>Read/write access outside the base directory and its parents should be prohibited. This can be achieved via whitelist validation on the user-supplied filename and strict access control from the filesystem. <li>Avoid setting your application's local user account as owner of any of the base directory's parents.<br /><br /><strong>Note:</strong> If your application is Windows based, create your base directory in a partition different than the partition hosting all critical system services. Because Windows prohibits changing partitions through canonicalization, it is impossible for an attacker to access a resource that is located in another partition. For instance, if your Windows installation is located at <em>C:\\Windows</em>, place your base directory at <em>d:\\myapp\\temp</em>. </li></li></li></li></li>\r\n      </ul>\r\n      <li>\r\n        <p>\r\n          <strong>Validate using whitelisting. </strong>The syntax for accessing filesystems is well known. Use whitelist techniques to allow good input and discard bad input. Be careful with canonicalization issues. Canonicalization problems occur when the user attempts to execute directory traversal by using special pathname sequences to direct your application into a directory it should not access. <br /><br />Example:<br /><br />Assume your application has created the file</p>\r\n        <pre>d:\\myapp\\temp\\file.dat</pre>\r\n        <p>The following strings can also represent the same file:</p>\r\n        <pre>d:\\myapp\\temp\\..\\temp\\file.datd:\\myapp\\temp\\..\\temp\\..\\temp\\file.datd&#37;3A&#37;5Cmyapp&#37;5Ctemp&#37;5Cfile.dat</pre>\r\n        <p>Canonicalization problems can be avoided by using whitelist techniques and setting the right permissions at the filesystem level. If your application knows the file structure within the base directory, the following code can be applied:</p>\r\n        <pre>public boolean validateFilename(File file) throws IOException, SecurityException<br />&#123;<br />      // This represents the format d:\\myapp\\temp\\&lt;file name&gt; where the file name<br />      // can consist of alpha-numeric, space/tab, period, and dash characters and<br />      // cannot exceed 20 characters in length<br />      String goodPattern = \"d:(<a>\\\\\\\\&#124;/)myapp(\\\\\\\\&#124;/)temp(\\\\\\\\&#124;/)(\\\\w&#124;\\\\s&#124;\\\\.&#124;-)&#123;1,20</a>&#125;\";<br />      Pattern p = Pattern.compile(goodPattern, Pattern.CASE_INSENSITIVE);<br />      Matcher m = p.matcher(file.getCanonicalPath());<br /><br />      if (&#33;m.matches())<br />      &#123;<br />            return false;<br />      &#125;<br /><br />      return true;<br />&#125;</pre>\r\n        <p>Filesystem permissions are also a very important mechanism for avoiding canonicalization problems. Restricting the access rights of your application's local account can prevent access to sensitive system data. It is recommended that:</p>\r\n        <ul>\r\n          <li>full access is given only within the base directory <li>read access is given only within the base directory's parents <li>no access is given anywhere else on the filesystem<br /><br />It is also recommended to execute your application with its own local account rather than as the hosting server; therefore, any restrictions applied to your application would not affect the performance of the hosting server. <p /></li></li></li>\r\n        </ul>\r\n        <li>\r\n          <p>\r\n            <strong>Avoid common mistakes.</strong>\r\n          </p>\r\n          <ul>\r\n            <li>\r\n              <p>\r\n                <strong>Use the Java File object.</strong> Always use a <em>java.io.File</em> object instead of a <em>String</em> object to represent a file. Using the <em>File</em> object allows you to access the actual file and some useful and relevant information such as the file's size, parent, path, etc. Example:</p>\r\n              <pre>File file = new File(\"d:\\myapp\\temp\\file.dat\");</pre>\r\n              <li>\r\n                <p>\r\n                  <strong>Verify the canonical path.</strong> The <em>File</em> object provides the file's path in&nbsp;three different forms -- original, absolute and canonical. Always use the canonical path when using whitelisting to verify the file's path. </p>\r\n                <p />For instance, the file <pre>d:\\myapp\\temp\\..\\temp\\..\\temp\\file.dat</pre><p>would have the following paths:</p><pre>d:\\myapp\\temp\\..\\temp\\..\\temp\\file.dat<br /> (Original via the <strong>File.getPath</strong> method)<br />d:\\myapp\\temp\\..\\temp\\..\\temp\\file.dat<br /> (Absolute via the <strong>File.getAbsolutePath</strong> method)<br />D:\\myapp\\temp\\file.dat<br /> (Canonical via the <strong>File.getCanonicalPath</strong> method)</pre><li><p><strong>Verify&nbsp;that the filesystem is case-sensitive.</strong> Always be sure&nbsp;that your application's filesystem is case-sensitive. Because most UNIX based operating systems have case-sensitive filesystems, <em>FILE.DAT</em> and <em>file.dat</em> represent&nbsp;two different files. However, Windows has a case-insensitive filesystem; therefore, <em>FILE.DAT</em> and <em>file.dat</em> represent the same file. If your application's filesystem is case-insensitive, make sure to specify the <em>CASE_INSENSITIVE</em> flag when using regular expressions to validate your file inputs. Example:</p><pre>String goodPattern = \"d:(<a>\\\\\\\\&#124;/)myapp(\\\\\\\\&#124;/)temp(\\\\\\\\&#124;/)(\\\\w&#124;\\\\s&#124;\\\\.&#124;-&#124;)&#123;1,20</a>&#125;\";<br />Pattern p = Pattern.compile(goodPattern, Pattern.CASE_INSENSITIVE);</pre><li><p><strong>Verify the filesystem's path delimiters.</strong> Verify the path delimiters that your application's filesystem uses and keep them consistent throughout the code. For example, Windows uses '<strong><em>\\</em></strong>' or '<em>/</em>' to distinguish directories inside a path while UNIX based systems use only '/' to accomplish the same task.</p></li></li></li>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code allows the user to read the contents of a report file, located in <em>/myapp/temp/</em>. Unfortunately, the code is missing filename validation; therefore, the application is exposed to a directory traversal attack:</p>\r\n  <pre>import java.io.&#42;;<br />import java.util.&#42;;<br />import java.lang.&#42;;<br />import javax.servlet.&#42;;<br />import javax.servlet.http.&#42;;<br /><br />public final class ReportDownloader extends HttpServlet<br />&#123;<br />      public void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException<br />      &#123;<br />            response.setContentType(\"application/vnd.ms-excel\");<br />            String baseDir = \"/myapp/temp/\";<br />            PrintWriter out = response.getWriter();<br />            String filename = request.getParameter(\"file\");<br />            BufferedReader fin;<br />            String data = \"\";<br /><br />            try<br />            &#123;<br />                  File reportFile = new File(baseDir &#43; filename);<br />                  // The application fails to validate the user-supplied filename<br />                  fin = new BufferedReader(new FileReader(reportFile));<br />                  StringBuilder sb = new StringBuilder();<br />                  while (data &#33;= null)<br />                  &#123;<br />                        data = fin.readLine();<br />                        if (validateData(data))<br />                        &#123;<br />                              sb.append(data);<br />                        &#125;<br />                        else<br />                        &#123;<br />                              // Add the appropriate logging and exception handling<br />                              // mechanisms. Consult the Exception Handling and<br />                              // Logging sections<br />                              out.println(\"We cannot handle your request at the moment.\"<br />                                        &#43; \"Please try again later.\");<br />                              return;<br />                        &#125;<br />                  &#125;<br />                  out.println(sb.toString());<br />            &#125;<br />            catch (Exception e)<br />            &#123;<br />                  // Add the appropriate logging and exception handling mechanisms<br />                  // Consult the Exception Handling and Logging sections<br />                  out.println(\"We cannot handle your request at the moment.\"<br />                            &#43; \"Please try again later.\");<br />            &#125;<br /><br />            out.flush();<br />            out.close();<br />      &#125;<br /><br />      boolean validateData(String input)<br />      &#123;<br />             // Implement a validation routine for the format of the reports<br />      &#125;<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code allows the user to read the contents of a report file, located in <em>/myapp/temp/</em>. Since the filename is validated, an attacker cannot execute directory traversal attacks. </p>\r\n  <pre>import java.io.&#42;;<br />import java.util.&#42;;<br />import java.lang.&#42;;<br />import javax.servlet.&#42;;<br />import javax.servlet.http.&#42;;<br /><br />public final class ReportDownloader extends HttpServlet<br />&#123;<br />      public void doGet(HttpServletRequest request,<br />            HttpServletResponse response) throws ServletException, IOException<br />      &#123;<br />            response.setContentType(\"application/vnd.ms-excel\");<br />            String baseDir = \"/myapp/temp/\";<br />            PrintWriter out = response.getWriter();<br />            String filename = request.getParameter(\"file\");<br />            BufferedReader fin;<br />            String data = \"\";<br /><br />            try<br />            &#123;<br />                  File reportFile = new File(baseDir &#43; filename);<br /><br />                  // The application validates the user-supplied filename<br />                  if (validateFilename(reportFile))<br />                  &#123;<br />                        fin = new BufferedReader(new FileReader(reportFile));<br />                        StringBuilder sb = new StringBuilder();<br />                        while (data &#33;= null)<br />                        &#123;<br />                              data = fin.readLine();<br />                              if (validateData(data))<br />                              &#123;<br /><br />                                    sb.append(data);<br />                              &#125;<br />                              else<br />                              &#123;<br />                                    // Add the appropriate logging and exception<br />                                    // handling mechanisms. Consult the Exception<br />                                    // Handling and Logging sections<br />                                     out.println(\"We cannot handle your request at<br />                                               &#43; \"the moment. Please try again later.\");<br />                                    return;<br />                              &#125;<br />                        &#125;<br />                        out.println(sb.toString());<br />                  &#125;<br />                  else<br />                  &#123;<br />                        // Add the appropriate logging and exception handling mechanisms<br />                        // Consult the Exception Handling and Logging sections<br />                        out.println(\"We cannot handle your request at the moment.\"<br />                                  &#43; \"Please try again later.\");<br />                  &#125;<br />            &#125;<br />            catch (Exception e)<br />            &#123;<br />                  // Add the appropriate logging and exception handling mechanisms<br />                  // Consult the Exception Handling and Logging sections<br />                  out.println(\"We cannot handle your request at the moment. \"<br />                             &#43; \"Please try again later.\");<br />            &#125;<br /><br />            out.flush();<br />            out.close();<br />      &#125;<br /><br />      boolean validateFilename(File file)<br />      &#123;<br />            // This represents the format /myapp/temp/&lt;filename&gt;<br />            String goodPattern = \"/myapp/temp/(\\\\w&#124;\\\\s&#124;\\\\.&#124;-&#124;)&#123;1,20&#125;\";<br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(file.getCanonicalPath());<br />            if (&#33;m.matches())<br />            &#123;<br />                  return false;<br />            &#125;<br />            return true;<br />      &#125;<br /><br />      boolean validateData(String input)<br />      &#123;<br />            // Implement a validation routine for the format of the reports<br />      &#125;<br />&#125;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on handling files with Java, see: Documentation for <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/io/File.html\">Class File</a> in Java SDK.</li>\r\n  </ul>\r\n  <h1>Input and Data Validation Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/b531d29c-86f7-4812-90ce-5f3f0f780aba\">Validate Input from All Sources</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d\">Validate Input for Length, Range, Format, and Type</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">\r\n        <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">Validate All Input Passed to the Database</a>\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/a5491c44-164b-4046-94d3-b575b9745e8b\">Filter All User-Supplied Filename and Path Input</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8\">Do Not Rely on Client-Side Validation</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/7f8deb21-cd52-41be-80b4-8897612021dc\">Input from All Sources Is Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/61869793-2c10-40c0-b82a-babcc0312697\">Input Is Validated for Length, Range, Format and Type</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0\">All Database Input Is Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/17884af0-fc83-412a-b613-4def4a6f84ad\">User-Supplied Filenames and Paths Are Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/b1803c35-9579-4a38-9a63-30202160ef25\">The Application Does Not Rely on Client-Side Validation</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Code Examples</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/0f49430b-2abe-408f-b046-89fa739f5d53\">Input Validation Using JSF</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/18ac74df-602b-4a58-8998-52f638f3a045\">Input Validation Using SpringMVC</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d124abb1-e230-43ef-8762-1caa0dbb89ca\">Input Validation Using Struts 1</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/2f917654-65a8-49c9-b000-c17f9765bf42\">Input Validation Using Struts 2</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/38342130-4e4b-47df-afd9-c7e8c86f77ee\">Use ESAPI Executor</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4\">How to Test for Server-Side Code Injection in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0\">How to Test for Path Manipulation Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/5c99da7b-b4eb-4315-b48c-ac2598c13144\">How to Test for Double Encoding Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f\">How to Test for Client-side Validation Bypass Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1\">How to Test for Integer Overflows in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/ed20009a-59ef-415d-8e72-0ff3221a1346\">How to Test for Integer Underflow Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d7682043-0095-4700-97dd-01ce797c4ada\">How to Test for Deserialization of Untrusted Data Bugs in Java</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}