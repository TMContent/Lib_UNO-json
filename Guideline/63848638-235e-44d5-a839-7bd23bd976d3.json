{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-158328502",
      "Content_Hash": "2015887602"
    },
    "Metadata": [
      {
        "Id": [
          "63848638-235e-44d5-a839-7bd23bd976d3"
        ],
        "Id_History": [
          "63848638-235e-44d5-a839-7bd23bd976d3,f149b93a-a30e-4639-91b6-744556f9d130,"
        ],
        "Library_Id": [
          "92718d53-36b2-47bc-b6f5-e60994385f46"
        ],
        "Title": [
          "Use Absolute File Paths Where You Can"
        ],
        "Category": [
          "File I/O"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Use Absolute File Paths Where You Can"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Try to use absolute file paths where you can. Do not trust an environment variable to construct a file path. </p>\r\n  <h1>Why</h1>\r\n  <p>You cannot guarantee the value of the environment variable. Also accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources.</p>\r\n  <h1>When</h1>\r\n  <p>You should always try and avoid accepting file paths, instead strive to use absolute paths where possible.</p>\r\n  <h1>How</h1>\r\n  <p>If your application has to accept input file names, file paths, or URL paths, you need to validate that the path is in the correct format and that it points to a valid location within the context of your application. Failure to do this can result in attackers persuading your application into accessing arbitrary files and resources. </p>\r\n  <h2>Validating File Paths</h2>\r\n  <p>To prevent a malicious user manipulating your code's file operations, avoid writing code that accepts user-supplied file or path input. For example: </p>\r\n  <ul>\r\n    <li>If you must accept file names as input, use the full name of the file by using <b>System.IO.Path.GetFileName</b>. <li>If you must accept file paths as input, use the full file path by using <b>System.IO.Path.GetFullPath</b>.</li></li>\r\n  </ul>\r\n  <h2>Using MapPath to Prevent Cross Application Mapping</h2>\r\n  <p>If you use <b>MapPath</b> to map a supplied virtual path to a physical path on the server, use the overload of <b>Request.MapPath</b> that accepts a <b>bool</b> parameter so that you can prevent cross-application mapping. The following code example shows this technique.</p>\r\n  <pre>try<br />&#123;<br />&nbsp; string mappedPath = Request.MapPath( inputPath.Text, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Request.ApplicationPath, false);<br />&#125;<br />catch (HttpException)<br />&#123;<br />&nbsp; // Cross-application mapping attempted<br />&#125;  </pre>\r\n  <p>The final <b>false</b> parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains <b>\"..\"</b> to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <b>HttpException</b>.</p>\r\n  <p>If you use server controls, you can use the <b>Control.MapPathSecure</b> method to retrieve the physical path to which the virtual path is mapped. <b>Control.MapPathSecure</b> uses code access security and throws an <b>HttpException</b> if the server control does not have permissions to read the resulting mapped file. For more information, see <b>Control.MapPathSecure</b> in the .NET Framework SDK documentation.</p>\r\n  <h1>&nbsp;</h1>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}