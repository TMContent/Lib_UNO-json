{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "1587852230",
      "Content_Hash": "-929513941"
    },
    "Metadata": [
      {
        "Id": [
          "b2050dca-6329-4360-b218-070305fe6890"
        ],
        "Id_History": [
          "b2050dca-6329-4360-b218-070305fe6890,87690439-046e-42c7-ab47-ecd5236890ee,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Do Not Use Asserts for Error Handling"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "C++"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Do Not Use Asserts for Error Handling"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "C++"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Debug assertions are a useful tool that can help you determine exceptional conditions in the course of testing and debugging. Be careful, however, not to rely on them for important error handling since they will be compiled out of your code for production.</p>\r\n  <h1>Why</h1>\r\n  <p>If you rely on assertions for important error handling functionality, your production code will compile these error handlers out and your code will not be as robust or secure when released.</p>\r\n  <h1>When</h1>\r\n  <p>When using assertions and writing error handling code.</p>\r\n  <h1>How</h1>\r\n  <p>Carefully evaluate your debug assertions. Ensure they are written to cover cases that should be caught in testing or debugging but are not necessary in production. Any error handling code in assertions should probably be placed outside of the assertion so that it can be included in production code.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following example, the read API is called and then the return value is checked for errors in an assertion. </p>\r\n  <pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />  //first read from the socket<br />&nbsp; int ret = read(socket, recvBuffer, len, 0);<br /><br />  assert(ret &gt;= 0)<br /><br />  return parseBuffer(recvBuffer, len);<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following example, the read API is called and then the return value is checked for errors. </p>\r\n  <pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />  //first read from the socket<br />&nbsp; int ret = read(socket, recvBuffer, len, 0);<br /><br /><br />  if (ret &gt;= 0)<br />  &#123;<br />      //now parse the buffer<br />      return parseBuffer(recvBuffer, len);<br />  &#125;<br />  else<br />  &#123;<br />      //can call WSAGetLastError if we need error details<br />      return false;<br />  &#125;<br />&#125;</pre>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/e4a3052e-13f2-4062-9a83-49185ff14b0a\">Centralize Error Handling</a>\r\n      <br />\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}