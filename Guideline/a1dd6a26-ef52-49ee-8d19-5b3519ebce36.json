{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "-1985172466",
      "Content_Hash": "1782168202"
    },
    "Metadata": [
      {
        "Id": [
          "a1dd6a26-ef52-49ee-8d19-5b3519ebce36"
        ],
        "Id_History": [
          "a1dd6a26-ef52-49ee-8d19-5b3519ebce36,2622b573-157a-46ba-9547-8f4256194f8c,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Avoid Asserting Permissions Before Calling a Delegate"
        ],
        "Category": [
          "Other"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET 3.5"
        ],
        "Type": [
          "Guideline"
        ],
        "DirectLink": [
          "Avoid Asserting Permissions Before Calling a Delegate"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Do</h1>\r\n  <p>Avoid asserting permissions before calling a delegate.</p>\r\n  <h1>Why</h1>\r\n  <p>Asserting a permission before calling a delegate is dangerous because you have no knowledge about the nature or trust level of the code that will be executed when you invoke the delegate. The code that passes you the delegate is on the call stack and can therefore be checked with an appropriate security demand. However, there is no way of knowing the trust level or permissions granted to the delegate code itself.</p>\r\n  <h1>When</h1>\r\n  <p>When your assembly exposes a delegate or an event.</p>\r\n  <h1>How</h1>\r\n  <p>If you allow partially trusted callers, you should consider restricting permissions to the delegate. You can either use an appropriate permission demand to authorize the external code when it passes the delegate to your code, or you can use a deny or permit-only stack modifier to restrict the delegate's permissions just prior to calling it.</p>\r\n  <p>the following code grants the delegate code only execution permission to constrain its capabilities.</p>\r\n  <pre>using System.Security;<br />using System.Security.Permissions;<br />...</pre>\r\n  <pre>// Delegate definition<br />public delegate void SomeDelegate(string text);<br />&nbsp;&nbsp;&nbsp; <br />public void ExecDelegateWithExcePerm()</pre>\r\n  <pre>&#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Permit only execution, prior to calling the delegate. This prevents the<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // delegate code accessing resources or performing other privileged<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // operations<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SecurityPermission(SecurityPermissionFlag.Execution).PermitOnly();</pre>\r\n  <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Now call the \"constrained\" delegate<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SomeDelegate del = new SomeDelegate(DisplayResults);</pre>\r\n  <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Revert the permit only stack modifier<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CodeAccessPermission.RevertPermitOnly();<br />&#125;</pre>\r\n  <pre>private void DisplayResults(string result)<br />&#123;<br />...<br />&#125; </pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
        ]
      }
    ]
  }
}