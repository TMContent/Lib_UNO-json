{
  "id": "142dc670-c51c-4094-8da1-77fdc1b1893c",
  "checksum": "40ebaf124efd54c6ca2b35d64789ed8566e33724",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "h1"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "p"
    ],
    "verify": [
      "p"
    ],
    "that": [
      "p",
      "p"
    ],
    "new": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "delete": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "operators": [
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "title"
    ],
    "used": [
      "p",
      "title"
    ],
    "instead": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "of": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "direct": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "operations": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p"
    ],
    "calloc),": [
      "p",
      "p",
      "p"
    ],
    "malloc),": [
      "p",
      "p",
      "p"
    ],
    "realloc),": [
      "p",
      "p",
      "p"
    ],
    "free).": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p"
    ],
    "object-oriented": [
      "p"
    ],
    "approach": [
      "p"
    ],
    "allocation": [
      "p"
    ],
    "manifested": [
      "p"
    ],
    "by": [
      "p"
    ],
    "has": [
      "p"
    ],
    "multiple": [
      "p"
    ],
    "advantages": [
      "p"
    ],
    "over": [
      "p"
    ],
    "raw": [
      "p"
    ],
    "call": [
      "p"
    ],
    "class": [
      "p"
    ],
    "constructors": [
      "p"
    ],
    "destructors": [
      "p"
    ],
    "automatically": [
      "p"
    ],
    "thus": [
      "p",
      "p"
    ],
    "asssuring": [
      "p"
    ],
    "is allocated": [
      "p"
    ],
    "variables": [
      "p"
    ],
    "initialized": [
      "p"
    ],
    "operator": [
      "p"
    ],
    "also": [
      "p"
    ],
    "throws": [
      "p"
    ],
    "an": [
      "p"
    ],
    "exception": [
      "p"
    ],
    "if": [
      "p",
      "p"
    ],
    "it": [
      "p"
    ],
    "fails": [
      "p"
    ],
    "allocate": [
      "p"
    ],
    "which": [
      "p"
    ],
    "causes": [
      "p"
    ],
    "program": [
      "p"
    ],
    "abort": [
      "p"
    ],
    "there": [
      "p"
    ],
    "is": [
      "p"
    ],
    "no": [
      "p"
    ],
    "error": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "preventing": [
      "p"
    ],
    "unintended": [
      "p"
    ],
    "behavior": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "search": [
      "p"
    ],
    "free)": [
      "p",
      "p"
    ],
    "function": [
      "p",
      "p"
    ],
    "calls": [
      "p",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "replace": [
      "p"
    ],
    "with": [
      "p"
    ],
    "respectively": [
      "p"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "use": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Related Items"
    ],
    "ul": [
      "C++",
      "Use new and delete Instead of Direct Memory Operations"
    ],
    "li": [
      "C++",
      "Use new and delete Instead of Direct Memory Operations"
    ],
    "p": [
      "Verify that new and delete operators are used instead of direct memory operations such as: calloc(), malloc(), realloc(), and free().",
      "The object-oriented approach to memory allocation manifested by new and delete operators has multiple advantages over raw memory operations. The new and delete operators call class constructors and destructors automatically, thus asssuring that memory is allocated and variables are initialized. The new operator also throws an exception if it fails to allocate memory, which causes the program to abort if there is no error handling code, thus preventing unintended behavior.",
      "Search code for calloc(), malloc(), realloc(), and free() function calls.",
      "Replace calloc(), malloc(), realloc(), and free() function calls with new and delete operators respectively."
    ],
    "a": [
      "Use new and delete Instead of Direct Memory Operations"
    ]
  },
  "links": [
    {
      "href": "/article/eb00762e-1c8a-4c03-ae23-b0656b697524",
      "text": "Use new and delete Instead of Direct Memory Operations"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that new and delete operators are used instead of direct memory operations such as: calloc(), malloc(), realloc(), and free().</p>\r\n  <h1>Why</h1>\r\n  <p>The object-oriented approach to memory allocation manifested by new and delete operators has multiple advantages over raw memory operations. The new and delete operators call class constructors and destructors automatically, thus asssuring that memory is&nbsp;allocated and variables are initialized. The new operator also throws an exception if it fails to allocate memory, which causes the program to abort if there is no error handling code, thus preventing unintended behavior.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Search code for calloc(), malloc(), realloc(), and free() function calls.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>Replace calloc(), malloc(), realloc(), and free() function calls with new and delete operators respectively.</p>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/eb00762e-1c8a-4c03-ae23-b0656b697524\">Use new and delete Instead of Direct Memory Operations</a>\r\n    </li>\r\n  </ul>"
}