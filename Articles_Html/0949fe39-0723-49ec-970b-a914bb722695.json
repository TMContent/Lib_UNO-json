{
  "id": "0949fe39-0723-49ec-970b-a914bb722695",
  "checksum": "0c781ac423bbc95a7e07c561ebd03457c81bf828",
  "words": {
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "aspnet": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1",
      "p"
    ],
    "always": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "title"
    ],
    "stored": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "title"
    ],
    "procedures": [
      "p",
      "p",
      "p",
      "title"
    ],
    "when": [
      "p",
      "h1"
    ],
    "interacting": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "database": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "pre"
    ],
    "increases": [
      "p"
    ],
    "performance": [
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "reduces": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "risk": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p"
    ],
    "successful": [
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "injection": [
      "p",
      "p",
      "p"
    ],
    "attack": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "using": [
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "helps": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "whenever": [
      "p"
    ],
    "interaction": [
      "p"
    ],
    "is": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "required": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "first": [
      "p",
      "p"
    ],
    "procedure": [
      "p",
      "pre",
      "p",
      "p",
      "pre",
      "p"
    ],
    "will": [
      "p",
      "pre",
      "pre"
    ],
    "have": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "created": [
      "p",
      "p"
    ],
    "on": [
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p"
    ],
    "done": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p"
    ],
    "syntax": [
      "p",
      "p"
    ],
    "create": [
      "pre",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "sp_addnewuser": [
      "pre"
    ],
    "@username": [
      "pre",
      "pre",
      "pre"
    ],
    "nvarchar255),": [
      "pre",
      "pre",
      "pre"
    ],
    "@email": [
      "pre",
      "pre"
    ],
    "@firstname": [
      "pre",
      "pre"
    ],
    "@lastname": [
      "pre"
    ],
    "nvarchar255))": [
      "pre",
      "pre"
    ],
    "as": [
      "pre",
      "p"
    ],
    "--": [
      "pre"
    ],
    "insert": [
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "userinsert": [
      "pre"
    ],
    "into": [
      "pre"
    ],
    "users_tableusername,": [
      "pre"
    ],
    "email": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "firstname": [
      "pre"
    ],
    "lastnamevalues(@username,": [
      "pre"
    ],
    "@lastname--this": [
      "pre"
    ],
    "return": [
      "pre",
      "p"
    ],
    "user’s": [
      "pre"
    ],
    "idselect": [
      "pre"
    ],
    "scope_identity)": [
      "pre"
    ],
    "now": [
      "p",
      "p"
    ],
    "call": [
      "p"
    ],
    "we": [
      "p",
      "p"
    ],
    "net": [
      "p"
    ],
    "code": [
      "p",
      "pre",
      "pre",
      "p"
    ],
    "//create": [
      "pre",
      "pre"
    ],
    "connection": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "our": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "stringsqlconnection": [
      "pre",
      "pre",
      "pre"
    ],
    "myconnection": [
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sqlconnectionconnection": [
      "pre",
      "pre",
      "pre"
    ],
    "string;myconnection.open();//create": [
      "pre",
      "pre",
      "pre"
    ],
    "command": [
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "that": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "specifies": [
      "pre",
      "pre",
      "pre"
    ],
    "store": [
      "pre",
      "pre",
      "pre"
    ],
    "proceduresqlcommand": [
      "pre",
      "pre"
    ],
    "mycommand": [
      "pre",
      "pre",
      "pre"
    ],
    "sqlcommand\"sp_addnewuser\",": [
      "pre"
    ],
    "myconnection;//specify": [
      "pre",
      "pre"
    ],
    "proceduremycommandcommandtype": [
      "pre",
      "pre"
    ],
    "commandtypestoredprocedure;//create": [
      "pre",
      "pre"
    ],
    "parameter": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "carry": [
      "pre",
      "pre"
    ],
    "usernamesqlparameter": [
      "pre",
      "pre"
    ],
    "userparameter": [
      "pre",
      "pre"
    ],
    "sqlparameter\"@username\",": [
      "pre",
      "pre"
    ],
    "sqldbtypevarchar);userparameter.direction": [
      "pre",
      "pre"
    ],
    "parameterdirectioninput;userparameter.value": [
      "pre",
      "pre"
    ],
    "\"testuser\"//add": [
      "pre"
    ],
    "commandmycommandparameters.add(userparameter);//repeat": [
      "pre"
    ],
    "add": [
      "pre"
    ],
    "commands": [
      "pre"
    ],
    "for": [
      "pre",
      "title"
    ],
    "each": [
      "pre"
    ],
    "in": [
      "pre",
      "p",
      "p"
    ],
    "sproc//execute": [
      "pre"
    ],
    "databasemycommandexecutenonquery();": [
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "h1"
    ],
    "there": [
      "p"
    ],
    "are": [
      "p"
    ],
    "many": [
      "p"
    ],
    "ways": [
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "it’s": [
      "p"
    ],
    "even": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "lies": [
      "p"
    ],
    "dynamically": [
      "p"
    ],
    "creating": [
      "p"
    ],
    "statement": [
      "p",
      "p",
      "pre",
      "p"
    ],
    "without": [
      "p"
    ],
    "bound": [
      "p"
    ],
    "parameters": [
      "p"
    ],
    "developer": [
      "p",
      "p"
    ],
    "has": [
      "p"
    ],
    "built": [
      "p"
    ],
    "select": [
      "p",
      "pre",
      "p"
    ],
    "by": [
      "p"
    ],
    "appending": [
      "p"
    ],
    "components": [
      "p"
    ],
    "statements": [
      "p"
    ],
    "together": [
      "p"
    ],
    "user": [
      "p",
      "p"
    ],
    "provided": [
      "p"
    ],
    "input": [
      "p"
    ],
    "wants": [
      "p"
    ],
    "execute": [
      "p",
      "pre"
    ],
    "where": [
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "username]": [
      "p"
    ],
    "username": [
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "whose": [
      "p"
    ],
    "e-mail": [
      "p"
    ],
    "would": [
      "p"
    ],
    "like": [
      "p"
    ],
    "from": [
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "users_table": [
      "pre",
      "pre",
      "pre"
    ],
    "username];": [
      "pre"
    ],
    "an": [
      "pre"
    ],
    "it": [
      "pre"
    ],
    "database//create": [
      "pre"
    ],
    "procedurestring": [
      "pre"
    ],
    "selectcommand": [
      "pre"
    ],
    "\"select": [
      "pre"
    ],
    "\"": [
      "pre"
    ],
    "+": [
      "pre"
    ],
    "usernameboxtext;sqlcommand": [
      "pre"
    ],
    "sqlcommandselectcommand);//execute": [
      "pre"
    ],
    "databasesqldatareader": [
      "pre",
      "pre"
    ],
    "myreader": [
      "pre",
      "pre"
    ],
    "mycommandexecutereader();": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "needs": [
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "same": [
      "p"
    ],
    "above": [
      "p"
    ],
    "sp_returnemail": [
      "pre"
    ],
    "asselect": [
      "pre"
    ],
    "query": [
      "p"
    ],
    "sqlcommand\"sp_returnemail\",": [
      "pre"
    ],
    "username];//add": [
      "pre"
    ],
    "commandmycommandparameters.add(userparameter);//execute": [
      "pre"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "queries": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "ul": [
      "ASP.NET 4.0"
    ],
    "li": [
      "ASP.NET 4.0"
    ],
    "p": [
      "Always use stored procedures when interacting with a database. This increases performance and reduces the risk of a successful SQL injection attack.",
      "Using stored procedures helps prevent SQL injection attacks.",
      "Whenever interaction with a database is required",
      "First the stored procedure will have to be created on the database, this can be done using the following SQL syntax:",
      "Now to call the stored procedure we can use the following .NET code:",
      "There are many ways to create a SQL injection vulnerability, and it’s even possible to do using stored procedures. The vulnerability lies in dynamically creating a SQL statement without bound parameters. In the following example the developer has built the SELECT statement by appending the components of the statements together with user provided input.",
      "The developer wants to execute the following command where [username] is the username of the user whose e-mail we would like to return",
      "First a stored procedure needs to be created on the database, the following SQL syntax can be used to create the same select statement as above:",
      "Now the following code can be used to query the database using the stored procedure:",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "CREATE PROCEDURE sp_AddNewUser( @UserName nvarchar(255), @Email  nvarchar(255), @FirstName nvarchar(255), @LastName nvarchar(255)) AS",
      "-- INSERT the new userINSERT INTO Users_Table(UserName, Email, FirstName, LastName)VALUES(@UserName, @Email, @FirstName, @LastName)--This will return the new user’s IDSELECT SCOPE_IDENTITY()",
      "//create a new connection using our connection stringSqlConnection myConnection = new SqlConnection(connection string);myConnection.Open();//create a new command that specifies our store procedureSqlCommand myCommand = new SqlCommand(\"sp_AddNewUser\", myConnection);//Specify our command is a stored proceduremyCommand.CommandType = CommandType.StoredProcedure;//Create a new parameter to carry the usernameSqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);UserParameter.Direction = ParameterDirection.Input;UserParameter.Value = \"TestUser\";//Add the parameter to the commandmyCommand.Parameters.Add(UserParameter);//Repeat this code to add commands for each parameter in the SPROC//Execute the command on the DatabasemyCommand.ExecuteNonQuery();",
      "SELECT Email from Users_Table where UserName = [username];",
      "The following code will create that statement an execute it on the database://create a new connection using our connection stringSqlConnection myConnection = new SqlConnection(connection string);myConnection.Open();//create a new command that specifies our store procedurestring selectCommand = \"SELECT Email from Users_Table WHERE UserName = \"         + userNameBox.Text;SqlCommand myCommand = new SqlCommand(selectCommand);//Execute the command on the DatabaseSqlDataReader myReader = myCommand.ExecuteReader();",
      "CREATE PROCEDURE sp_ReturnEmail( @UserName nvarchar(255)) ASSELECT Email FROM Users_Table where UserName = @UserName;",
      "//create a new connection using our connection stringSqlConnection myConnection = new SqlConnection(connection string);myConnection.Open();//create a new command that specifies our store procedureSqlCommand myCommand = new SqlCommand(\"sp_ReturnEmail\", myConnection);//Specify our command is a stored proceduremyCommand.CommandType = CommandType.StoredProcedure;//Create a new parameter to carry the usernameSqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);UserParameter.Direction = ParameterDirection.Input;UserParameter.Value = [username];//Add the parameter to the commandmyCommand.Parameters.Add(UserParameter);//Execute the command on the DatabaseSqlDataReader myReader = myCommand.ExecuteReader();"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Always use stored procedures when interacting with a database. This increases performance and reduces the risk of a successful SQL injection attack.</p>\r\n  <h1>Why</h1>\r\n  <p>Using stored procedures helps prevent SQL injection attacks.</p>\r\n  <h1>When</h1>\r\n  <p>Whenever interaction with a database is required</p>\r\n  <h1>How</h1>\r\n  <p>First the stored procedure will have to be created on the database, this can be done using the following SQL syntax:</p>\r\n  <pre>CREATE PROCEDURE <br />sp_AddNewUser( @UserName nvarchar(255), @Email  nvarchar(255), <br />@FirstName nvarchar(255), @LastName nvarchar(255)) AS</pre>\r\n  <pre>-- INSERT the new user<br />INSERT INTO Users_Table(UserName, Email, FirstName, LastName)<br />VALUES(@UserName, @Email, @FirstName, @LastName)<br />--This will return the new user’s IDSELECT SCOPE_IDENTITY()</pre>\r\n  <p>Now to call the stored procedure we can use the following .NET code:</p>\r\n  <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string)<br />;myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand(\"sp_AddNewUser\", myConnection);<br />//Specify our command is a stored proceduremy<br />Command.CommandType = Command<br />Type.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);<br />UserParameter.Direction = ParameterDirection.Input;<br />UserParameter.Value = \"TestUser\";<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Repeat this code to add commands for each parameter in the SPROC<br />//Execute the command on the Database<br />myCommand.ExecuteNonQuery();</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>There are many ways to create a SQL injection vulnerability, and it’s even possible to do using stored procedures. The vulnerability lies in dynamically creating a SQL statement without bound parameters. In the following example the developer has built the SELECT statement by appending the components of the statements together with user provided input.</p>\r\n  <p>The developer wants to execute the following command where [username] is the username of the user whose e-mail we would like to return</p>\r\n  <pre>SELECT Email from Users_Table where <br />UserName = [username];<br /></pre>\r\n  <pre>The following code will create that statement an execute it on the database:<br />//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />string selectCommand = \"SELECT Email from Users_Table WHERE UserName = \"<br />         + userNameBox.Text;<br />SqlCommand myCommand = new SqlCommand(selectCommand);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>First a stored procedure needs to be created on the database, the following SQL syntax can be used to create the same select statement as above:</p>\r\n  <pre>CREATE PROCEDURE sp_ReturnEmail( @UserName nvarchar(255)) <br />ASSELECT Email FROM Users_Table where UserName = @UserName;</pre>\r\n  <p>Now the following code can be used to query the database using the stored procedure:</p>\r\n  <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand(\"sp_ReturnEmail\", myConnection);<br />//Specify our command is a stored procedure<br />myCommand.CommandType = CommandType.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter(\"@UserName\", SqlDbType.VarChar);U<br />serParameter.Direction = ParameterDirection.Input;UserParameter.Value = [username];<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}