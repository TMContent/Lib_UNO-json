{
  "id": "ccd8e764-32e3-4d4c-8191-6c837ea9b60e",
  "checksum": "4445b7b07a2e08178949608b9b3309a73511649e",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "web": [
      "ul",
      "li"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "what": [
      "h2"
    ],
    "check": [
      "h2",
      "p",
      "h2"
    ],
    "for": [
      "h2",
      "p",
      "ol",
      "li"
    ],
    "ensure": [
      "p",
      "ol",
      "li"
    ],
    "structured": [
      "p",
      "p",
      "title"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "title"
    ],
    "handling": [
      "p",
      "p",
      "p",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "used": [
      "p",
      "title"
    ],
    "catch": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "error": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "conditions": [
      "p"
    ],
    "why": [
      "h2"
    ],
    "using": [
      "p"
    ],
    "simplifies": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "de-clutters": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "which": [
      "p"
    ],
    "improves": [
      "p"
    ],
    "robustness": [
      "p"
    ],
    "avoids": [
      "p"
    ],
    "leaving": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "an": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "inconsistent": [
      "p"
    ],
    "state": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "it": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "provides": [
      "p"
    ],
    "more": [
      "p",
      "p"
    ],
    "information": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "regarding": [
      "p"
    ],
    "encountered": [
      "p"
    ],
    "minimizes": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong"
    ],
    "disclosure": [
      "p"
    ],
    "how": [
      "h2",
      "h2"
    ],
    "all": [
      "p",
      "ol",
      "li"
    ],
    "your": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "may": [
      "p",
      "p",
      "p"
    ],
    "fail": [
      "p",
      "p",
      "p"
    ],
    "should": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "either": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p"
    ],
    "enclosed": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "try/catch/finally": [
      "p"
    ],
    "block": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "or": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "caught": [
      "p"
    ],
    "by": [
      "p"
    ],
    "global": [
      "p"
    ],
    "handler": [
      "p",
      "ol",
      "li"
    ],
    "catching": [
      "p"
    ],
    "exceptions": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "close": [
      "p"
    ],
    "source": [
      "p",
      "ol",
      "li"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "improve": [
      "p"
    ],
    "messages": [
      "p"
    ],
    "both": [
      "p"
    ],
    "user": [
      "p"
    ],
    "experience": [
      "p"
    ],
    "debugging": [
      "p"
    ],
    "purposes": [
      "p"
    ],
    "try": [
      "p",
      "p"
    ],
    "statement": [
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "try{": [
      "pre"
    ],
    "//error": [
      "pre"
    ],
    "prone": [
      "pre"
    ],
    "code}": [
      "pre"
    ],
    "follow": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "want": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "including": [
      "p"
    ],
    "resource": [
      "p"
    ],
    "cleanup": [
      "p",
      "p",
      "p"
    ],
    "necessary": [
      "p"
    ],
    "condition": [
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "work": [
      "p"
    ],
    "needed": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "blocks": [
      "p"
    ],
    "are": [
      "p",
      "p"
    ],
    "right": [
      "p"
    ],
    "place": [
      "p"
    ],
    "do": [
      "p",
      "ol",
      "li"
    ],
    "logging": [
      "p"
    ],
    "add": [
      "p"
    ],
    "existing": [
      "p"
    ],
    "most": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "rethrow": [
      "p"
    ],
    "so": [
      "p"
    ],
    "handlers": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "above": [
      "p"
    ],
    "react": [
      "p"
    ],
    "appropriately": [
      "p"
    ],
    "only": [
      "p"
    ],
    "consume": [
      "p"
    ],
    "handle": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "completely": [
      "p"
    ],
    "ok": [
      "p"
    ],
    "use": [
      "p",
      "ol",
      "li"
    ],
    "try/finally": [
      "p"
    ],
    "without": [
      "p",
      "ol",
      "li"
    ],
    "especially": [
      "p"
    ],
    "when": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "cannot": [
      "p"
    ],
    "just": [
      "p"
    ],
    "need": [
      "p"
    ],
    "make": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "sure": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "run": [
      "p"
    ],
    "then": [
      "p"
    ],
    "create": [
      "p"
    ],
    "finally": [
      "p"
    ],
    "performs": [
      "p"
    ],
    "other": [
      "p",
      "ol",
      "li"
    ],
    "operations": [
      "p"
    ],
    "occur": [
      "p"
    ],
    "regardless": [
      "p"
    ],
    "whether": [
      "p"
    ],
    "succeeds": [
      "p"
    ],
    "fails": [
      "p"
    ],
    "fix": [
      "h2"
    ],
    "specific": [
      "p"
    ],
    "relevant": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "multiple": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "anticipated": [
      "p"
    ],
    "try/catch": [
      "p"
    ],
    "have": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "clauses": [
      "p"
    ],
    "satisfy": [
      "p"
    ],
    "each": [
      "p",
      "ol",
      "li"
    ],
    "type": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "consider": [
      "p"
    ],
    "following": [
      "p"
    ],
    "aspects": [
      "p"
    ],
    "constructing": [
      "p"
    ],
    "application's": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "location": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "very": [
      "ol",
      "li"
    ],
    "important": [
      "ol",
      "li"
    ],
    "recover": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "properly": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "damaging": [
      "ol",
      "li"
    ],
    "parts": [
      "ol",
      "li"
    ],
    "placing": [
      "ol",
      "li"
    ],
    "closer": [
      "ol",
      "li"
    ],
    "allows": [
      "ol",
      "li"
    ],
    "better": [
      "ol",
      "li"
    ],
    "current": [
      "ol",
      "li"
    ],
    "operation": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "appropriate": [
      "ol",
      "li"
    ],
    "resources": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "purpose": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "carefully": [
      "ol",
      "li"
    ],
    "choose": [
      "ol",
      "li"
    ],
    "although": [
      "ol",
      "li"
    ],
    "developers": [
      "ol",
      "li"
    ],
    "commonly": [
      "ol",
      "li"
    ],
    "wrap": [
      "ol",
      "li"
    ],
    "up": [
      "ol",
      "li"
    ],
    "after": [
      "ol",
      "li"
    ],
    "their": [
      "ol",
      "li"
    ],
    "has": [
      "ol",
      "li"
    ],
    "failed": [
      "ol",
      "li"
    ],
    "provide": [
      "ol",
      "li"
    ],
    "mechanism": [
      "ol",
      "li"
    ],
    "recovering": [
      "ol",
      "li"
    ],
    "allocated": [
      "ol",
      "li"
    ],
    "safely": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "disposing": [
      "ol",
      "li"
    ],
    "them": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "keep": [
      "ol",
      "li"
    ],
    "track": [
      "ol",
      "li"
    ],
    "associated": [
      "ol",
      "li"
    ],
    "accordingly": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "thrown": [
      "ol",
      "li"
    ],
    "handles": [
      "ol",
      "li"
    ],
    "sensitive": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "data": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong"
    ],
    "instances": [
      "ol",
      "li"
    ],
    "inside": [
      "ol",
      "li"
    ],
    "been": [
      "ol",
      "li"
    ],
    "disposed": [
      "ol",
      "li"
    ],
    "because": [
      "ol",
      "li"
    ],
    "common": [
      "ol",
      "li"
    ],
    "practice": [
      "ol",
      "li"
    ],
    "log": [
      "ol",
      "li"
    ],
    "help": [
      "ol",
      "li"
    ],
    "troubleshoot": [
      "ol",
      "li"
    ],
    "problem": [
      "ol",
      "li"
    ],
    "not": [
      "ol",
      "li"
    ],
    "contain": [
      "ol",
      "li"
    ],
    "could": [
      "ol",
      "li"
    ],
    "compromise": [
      "ol",
      "li"
    ],
    "users": [
      "ol",
      "li"
    ],
    "assets": [
      "ol",
      "li"
    ],
    "logged": [
      "ol",
      "li"
    ],
    "always": [
      "ol",
      "li"
    ],
    "best": [
      "ol",
      "li"
    ],
    "fit": [
      "ol",
      "li"
    ],
    "efforts": [
      "ol",
      "li"
    ],
    "into": [
      "ol",
      "li"
    ],
    "its": [
      "ol",
      "li"
    ],
    "normal": [
      "ol",
      "li"
    ],
    "upon": [
      "ol",
      "li"
    ],
    "encountering": [
      "ol",
      "li"
    ],
    "expected": [
      "ol",
      "li"
    ],
    "throw": [
      "ol",
      "li"
    ],
    "types": [
      "ol",
      "li"
    ],
    "handled": [
      "ol",
      "li"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix"
    ],
    "ul": [
      "Web Applications"
    ],
    "li": [
      "Web Applications",
      "Location of handlers. The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.",
      "Purpose of handlers. Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.",
      "Exception data. Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged.",
      "Type of handlers. Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly."
    ],
    "p": [
      "Check to ensure structured exception handling is used to catch error conditions.",
      "Using structured exception handling simplifies and de-clutters the application code, which improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure.",
      "All code in your application that may fail should either be enclosed in a try/catch/finally block or caught by a global exception handler. Catching exceptions close to the source can improve error messages both for user experience and debugging purposes.",
      "The code that may fail should be enclosed in a try statement such as:",
      "A catch block may follow the try block if you want to execute error handling code including resource cleanup necessary in an error condition and any work needed to fail to a secure state. Catch blocks are the right place to do exception logging and add more information to the existing exception. In most cases you should rethrow the exception so that exception handlers above your code can react appropriately. You should only consume an exception if you can handle the error completely.",
      "It is ok to use try/finally without a catch block, especially when you cannot handle the exception and just need to make sure cleanup code is run. You should then create a finally block that performs cleanup or any other operations that should occur regardless of whether the code succeeds or fails.",
      "Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the try/catch block should have multiple catch clauses to satisfy each type of exception. Consider the following aspects when constructing your application's exception handlers:"
    ],
    "pre": [
      "try\n{\n    //error prone code\n}"
    ],
    "ol": [
      "Location of handlers. The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.\n Purpose of handlers. Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.\n Exception data. Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged.\n Type of handlers. Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly."
    ],
    "strong": [
      "Location of handlers.",
      "Purpose of handlers.",
      "Exception data.",
      "Type of handlers."
    ]
  },
  "links": [],
  "html": "<h2>Applies To</h2><ul><li> Web Applications</li>\n</ul><h2>What to Check For</h2><p>Check to ensure structured exception handling is used to catch error conditions.\n</p><h2>Why</h2><p>Using structured exception handling simplifies and de-clutters the application code, which improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure.\n</p><h2>How to Check</h2><p>All code in your application that may fail should either be enclosed in a try/catch/finally block or caught by a global exception handler. Catching exceptions close to the source can improve error messages both for user experience and debugging purposes. \n</p><p>\nThe code that may fail should be enclosed in a try statement such as:\n</p><pre>\n\ntry\n{\n    //error prone code\n}\n\n</pre><p>\nA catch block may follow the try block if you want to execute error handling code including resource cleanup necessary in an error condition and any work needed to fail to a secure state. Catch blocks are the right place to do exception logging and add more information to the existing exception. In most cases you should rethrow the exception so that exception handlers above your code can react appropriately. You should only consume an exception if you can handle the error completely.\n</p><p>\nIt is ok to use try/finally without a catch block, especially when you cannot handle the exception and just need to make sure cleanup code is run. You should then create a finally block that performs cleanup or any other operations that should occur regardless of whether the code succeeds or fails.\n</p><h2>How to Fix</h2><p>Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the try/catch block should have multiple catch clauses to satisfy each type of exception. Consider the following aspects when constructing your application's exception handlers:\n</p><ol>\n<li> <strong>Location of handlers.</strong> The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.</li>\n<li> <strong>Purpose of handlers.</strong> Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.</li>\n<li> <strong>Exception data.</strong> Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged.</li>\n<li> <strong>Type of handlers.</strong> Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly.</li>\n</ol>\n"
}