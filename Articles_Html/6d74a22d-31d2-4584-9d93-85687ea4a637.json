{
  "id": "6d74a22d-31d2-4584-9d93-85687ea4a637",
  "checksum": "cbb754f246ea4159fe5cc9fdcd0c832f7a88bc7b",
  "words": {
    "0": [
      "pre"
    ],
    "10": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "scala": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "play": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "21.0+": [
      "p"
    ],
    "what": [
      "h1",
      "p"
    ],
    "do": [
      "h1"
    ],
    "enforce": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "p",
      "strong",
      "title"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "of strong": [
      "p"
    ],
    "passwords": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "enforcing": [
      "p",
      "p"
    ],
    "strong": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "minimizes": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "a credentials": [
      "p"
    ],
    "dictionary": [
      "p"
    ],
    "attack or": [
      "p"
    ],
    "guessing": [
      "p"
    ],
    "another": [
      "p"
    ],
    "user's": [
      "p",
      "p"
    ],
    "password": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "when": [
      "h1"
    ],
    "if": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "your": [
      "p"
    ],
    "application": [
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "handles": [
      "p"
    ],
    "always": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "constitutes": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "varies": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "organization": [
      "p",
      "p"
    ],
    "however": [
      "p"
    ],
    "there": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p"
    ],
    "minimum": [
      "p",
      "p"
    ],
    "requirements": [
      "p",
      "p",
      "ol",
      "ol",
      "strong",
      "li",
      "li",
      "strong",
      "p",
      "pre"
    ],
    "for": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "length": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "input": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "character": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "sets": [
      "p"
    ],
    "must": [
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "at": [
      "ul",
      "li"
    ],
    "least": [
      "ul",
      "li"
    ],
    "characters": [
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "long": [
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "contain": [
      "ul",
      "li"
    ],
    "letters": [
      "ul",
      "li"
    ],
    "numbers": [
      "ul",
      "li"
    ],
    "special": [
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p"
    ],
    "required": [
      "p"
    ],
    "define": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "requirements pick": [
      "ol",
      "li",
      "p"
    ],
    "schema": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "follow": [
      "ol",
      "li",
      "p"
    ],
    "check": [
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "them": [
      "ol",
      "li",
      "p"
    ],
    "certain": [
      "ol",
      "li",
      "p"
    ],
    "patterns": [
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "li",
      "p"
    ],
    "e.g.": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "10+": [
      "ol",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "include": [
      "ol",
      "li",
      "p"
    ],
    "large": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "li",
      "p"
    ],
    "alpha-numeric": [
      "ol",
      "li",
      "p"
    ],
    "values.": [
      "ol",
      "li",
      "p"
    ],
    "while": [
      "ol",
      "li"
    ],
    "creating": [
      "ol",
      "li"
    ],
    "modifying": [
      "ol",
      "li"
    ],
    "accounts": [
      "ol",
      "li"
    ],
    "lifetime determine": [
      "ol",
      "li",
      "p"
    ],
    "lifetime": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "force": [
      "ol",
      "li",
      "p"
    ],
    "users": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "update": [
      "ol",
      "li",
      "p"
    ],
    "their": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p"
    ],
    "given": [
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "interval": [
      "ol",
      "li",
      "p"
    ],
    "verify": [
      "ol",
      "li",
      "p"
    ],
    "new": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "is": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "different": [
      "ol",
      "li",
      "p"
    ],
    "old": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "comparing": [
      "ol",
      "li",
      "p"
    ],
    "produced": [
      "ol",
      "li",
      "p"
    ],
    "hashes": [
      "ol",
      "li",
      "p"
    ],
    "additionally": [
      "ol",
      "li",
      "p"
    ],
    "might": [
      "ol",
      "li",
      "p"
    ],
    "asked": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p",
      "p",
      "pre"
    ],
    "previously": [
      "ol",
      "li",
      "p"
    ],
    "used": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "code": [
      "p",
      "p"
    ],
    "creates": [
      "p"
    ],
    "user": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "stores": [
      "p",
      "p"
    ],
    "username": [
      "p"
    ],
    "into": [
      "p",
      "p"
    ],
    "credential": [
      "p"
    ],
    "repository": [
      "p",
      "p"
    ],
    "unfortunately": [
      "p"
    ],
    "being": [
      "p"
    ],
    "verified": [
      "p"
    ],
    "against": [
      "p"
    ],
    "policy": [
      "p",
      "pre",
      "pre"
    ],
    "def": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "adduserusername:string,pass:string": [
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "action{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "implicit": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "request": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "exists": [
      "pre",
      "pre"
    ],
    "database": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "fails": [
      "pre",
      "pre"
    ],
    "meets": [
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "add": [
      "pre",
      "pre",
      "pre"
    ],
    "application's": [
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "adds": [
      "p"
    ],
    "before": [
      "p"
    ],
    "credentials": [
      "p"
    ],
    "verifies": [
      "p",
      "pre"
    ],
    "!goodpassword(pass))": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "string": [
      "pre"
    ],
    "errmsg": [
      "pre"
    ],
    "\"user's": [
      "pre"
    ],
    "does": [
      "pre"
    ],
    "meet\"": [
      "pre"
    ],
    "+": [
      "pre"
    ],
    "\"": [
      "pre"
    ],
    "requirements\"": [
      "pre"
    ],
    "okhtml.message.main(errmsg))": [
      "pre"
    ],
    "..}": [
      "pre"
    ],
    "goodpasswordpass:string": [
      "pre",
      "pre"
    ],
    "boolean": [
      "pre",
      "pre",
      "pre"
    ],
    "alpha": [
      "pre",
      "pre",
      "pre"
    ],
    "false": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "num": [
      "pre",
      "pre",
      "pre"
    ],
    "sp": [
      "pre",
      "pre"
    ],
    "pass.length": [
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "int": [
      "pre"
    ],
    "i": [
      "pre",
      "pre"
    ],
    "!alpha": [
      "pre"
    ],
    "&&": [
      "pre",
      "pre",
      "pre"
    ],
    "characterisletter(pass[i]))": [
      "pre"
    ],
    "true": [
      "pre",
      "pre",
      "pre"
    ],
    "!num": [
      "pre"
    ],
    "characterisdigit(pass[i]))": [
      "pre"
    ],
    "!sp": [
      "pre"
    ],
    "pass[i]": [
      "pre"
    ],
    "==": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "'!'": [
      "pre"
    ],
    "||": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "passi]": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "'@'": [
      "pre"
    ],
    "'#'": [
      "pre"
    ],
    "'$'": [
      "pre"
    ],
    "'%'": [
      "pre"
    ],
    "'^')": [
      "pre"
    ],
    "&": [
      "pre",
      "pre"
    ],
    "sp}": [
      "pre"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "Scala and Play Framework 2.1.0+",
      "Enforce the use of strong passwords.",
      "Enforcing strong passwords minimizes the risk of a Credentials Dictionary Attack or guessing another user's password.",
      "If your application handles passwords, always enforce the use of strong passwords.",
      "What constitutes a strong password varies from organization to organization. However, there are minimum requirements for length and input character sets. Minimum requirements for a strong password are:",
      "The following steps are required for enforcing strong passwords:",
      "Define password requirements. Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).",
      "Enforce password lifetime. Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords.",
      "The following code creates a new user to the application. It stores the username and password into the credential repository. Unfortunately, the password is not being verified against a password policy.",
      "The following code adds a new user to the application. Before it stores the user's credentials into the repository, it verifies that the password meets the application's password requirements."
    ],
    "ul": [
      "The password must be at least 10 characters long.\n    It must contain letters, numbers, and special characters."
    ],
    "li": [
      "The password must be at least 10 characters long.",
      "It must contain letters, numbers, and special characters.",
      "Define password requirements. Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).",
      "Enforce password requirements. Enforce password requirements while creating and modifying accounts.",
      "Enforce password lifetime. Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords."
    ],
    "ol": [
      "Define password requirements. Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).\n    \n    \n      Enforce password requirements. Enforce password requirements while creating and modifying accounts.\n    \n      \n        Enforce password lifetime. Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords."
    ],
    "strong": [
      "Define password requirements.",
      "Enforce password requirements.",
      "Enforce password lifetime."
    ],
    "pre": [
      "def addUser(username:String,pass:String ) = Action{ implicit request =>",
      "// Check if user exists in the user database      // The application fails to check that the      // given password meets the password policy      // Add user to the application's user database\n  }",
      "// The application fails to check that the      // given password meets the password policy      // Add user to the application's user database",
      "def addUser(username:String,pass:String ) = Action{ implicit request =>            // Check if user exists in the user database      // The application verifies that the given      // password meets the password requirements      if (!goodPassword(pass))      {            String errMsg = \"User's password does not meet\"                           + \" the password requirements\";            Ok(html.message.main(errMsg))      }      // Add user to the application's user database      ...}  def goodPassword(pass:String ) = Action{ implicit request =>  {      boolean alpha = false;      boolean num = false;      boolean sp = false;      if (pass.length       {            return false;      }      for (int i = 0; i       {            if (!alpha && Character.isLetter(pass[i]))            {                  alpha = true;            }            if (!num && Character.isDigit(pass[i]))            {                  num = true;            }            if (!sp && (pass[i] == '!' ||                  pass[i] == '@' || pass[i] == '#' ||                  pass[i] == '$' || pass[i] == '%' ||                  pass[i] == '^'))            {                  sp = true;            }      }      return (alpha & num) & sp;}",
      "def addUser(username:String,pass:String ) = Action{ implicit request =>",
      "def goodPassword(pass:String ) = Action{ implicit request =>"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <p>Scala and Play Framework 2.1.0+</p>\n  <h1>What to Do</h1>\n  <p>Enforce the use of&nbsp;strong passwords.</p>\n  <h1>Why</h1>\n  <p>Enforcing strong passwords minimizes the risk of a&nbsp;Credentials Dictionary Attack&nbsp;or guessing another user's password.</p>\n  <h1>When</h1>\n  <p>If your application handles passwords, always enforce the use of strong passwords.</p>\n  <h1>How</h1>\n  <p>What constitutes a strong password varies from organization to organization. However, there are minimum requirements for length and input character sets. Minimum requirements for a strong password are:</p>\n  <ul>\n    <li>The password must be at least 10 characters long.</li>\n    <li>It must contain letters, numbers, and special characters.</li>\n  </ul>\n  <p>The following steps are required for enforcing strong passwords:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Define password requirements.&nbsp;</strong>Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).</p>\n    </li>\n    <li>\n      <strong>Enforce password requirements. </strong>Enforce password requirements while creating and modifying accounts.</li>\n    <li>\n      <p>\n        <strong>Enforce password lifetime.&nbsp;</strong>Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords.&nbsp;</p>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The following code creates a new user to the application. It stores the username and password into the credential repository. Unfortunately, the password is not being verified against a password policy.</p>\n  <pre>  def addUser(username:String,pass:String ) = Action{ implicit request =&gt;</pre>\n  <pre>    // Check if user exists in the user database<pre>      // The application fails to check that the<br />      // given password meets the password policy<br />      // Add user to the application's user database</pre>\n  }</pre>\n  <h1>Solution Example</h1>\n  <p>The following code adds a new user to the application. Before it stores the user's credentials into the repository, it verifies that the password meets the application's password requirements.</p>\n  <pre>\n    <pre>  def addUser(username:String,pass:String ) = Action{ implicit request =&gt;      </pre>      // Check if user exists in the user database<br />      // The application verifies that the given<br />      // password meets the password requirements<br />      if (!goodPassword(pass))<br />      {<br />            String errMsg = \"User's password does not meet\"<br />                           + \" the password requirements\";<br />            Ok(html.message.main(errMsg))<br />      }<br /><br />      // Add user to the application's user database<br />      ...<br />}<br /><br /><br /><pre>  def goodPassword(pass:String ) = Action{ implicit request =&gt;  </pre>{<br />      boolean alpha = false;<br />      boolean num = false;<br />      boolean sp = false;<br /><br />      if (pass.length <br />      {<br />            return false;<br />      }<br /><br />      for (int i = 0; i <br />      {<br />            if (!alpha && Character.isLetter(pass[i]))<br />            {<br />                  alpha = true;<br />            }<br /><br />            if (!num && Character.isDigit(pass[i]))<br />            {<br />                  num = true;<br />            }<br /><br />            if (!sp && (pass[i] == '!' ||<br />                  pass[i] == '@' || pass[i] == '#' ||<br />                  pass[i] == '$' || pass[i] == '%' ||<br />                  pass[i] == '^'))<br />            {<br />                  sp = true;<br />            }<br />      }<br /><br />      return (alpha & num) & sp;<br />}</pre>\n  <br />"
}