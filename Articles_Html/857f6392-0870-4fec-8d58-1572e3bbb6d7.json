{
  "id": "857f6392-0870-4fec-8d58-1572e3bbb6d7",
  "checksum": "5fdcdb1cfa7ad6c023cdd2aaeb8f925aea83476f",
  "words": {
    "description": [
      "h1"
    ],
    "out-of-bounds": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "reads": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p"
    ],
    "form": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p"
    ],
    "buffer": [
      "p",
      "p"
    ],
    "overflow": [
      "p"
    ],
    "except": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "instead": [
      "p"
    ],
    "writing": [
      "p"
    ],
    "too": [
      "p",
      "p"
    ],
    "much": [
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1"
    ],
    "tries": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "read": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "from": [
      "p",
      "p"
    ],
    "trying": [
      "p"
    ],
    "at": [
      "p",
      "p",
      "p"
    ],
    "addresses": [
      "p",
      "p",
      "p"
    ],
    "beyond": [
      "p"
    ],
    "what": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p"
    ],
    "allocated": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p"
    ],
    "results": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "reading": [
      "p"
    ],
    "other": [
      "p"
    ],
    "happens": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p"
    ],
    "those": [
      "p",
      "p"
    ],
    "since": [
      "p"
    ],
    "this": [
      "p"
    ],
    "usually": [
      "p",
      "p",
      "p"
    ],
    "not": [
      "p"
    ],
    "expects": [
      "p"
    ],
    "crashes": [
      "p"
    ],
    "if": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p"
    ],
    "has": [
      "p",
      "p",
      "p",
      "p"
    ],
    "crafted": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p"
    ],
    "placed": [
      "p",
      "p",
      "p"
    ],
    "advance": [
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "memory": [
      "p",
      "p"
    ],
    "might": [
      "p",
      "p"
    ],
    "overwrite": [
      "p"
    ],
    "an": [
      "p"
    ],
    "instruction": [
      "p",
      "p"
    ],
    "pointer": [
      "p"
    ],
    "with": [
      "p"
    ],
    "attacker's": [
      "p"
    ],
    "thus": [
      "p"
    ],
    "allowing": [
      "p"
    ],
    "redirect": [
      "p"
    ],
    "execution": [
      "p",
      "p",
      "p",
      "p"
    ],
    "flow": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "his": [
      "p"
    ],
    "affect": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "written": [
      "p"
    ],
    "native": [
      "p"
    ],
    "impact": [
      "h1"
    ],
    "typically": [
      "p"
    ],
    "result": [
      "p"
    ],
    "crashing": [
      "p"
    ],
    "but": [
      "p"
    ],
    "sometimes": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "arbitrary": [
      "p",
      "p"
    ],
    "possible": [
      "p"
    ],
    "able": [
      "p"
    ],
    "write": [
      "p"
    ],
    "accessed": [
      "p"
    ],
    "by": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p"
    ],
    "pointers": [
      "p"
    ],
    "common": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "vector": [
      "p"
    ],
    "targets": [
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "browsers": [
      "p"
    ],
    "exploit": [
      "p",
      "p",
      "p"
    ],
    "on": [
      "p"
    ],
    "site": [
      "p",
      "p"
    ],
    "when": [
      "p"
    ],
    "victim": [
      "p"
    ],
    "user": [
      "p"
    ],
    "opens": [
      "p"
    ],
    "browser": [
      "p",
      "p"
    ],
    "processes": [
      "p"
    ],
    "downloads": [
      "p"
    ],
    "software": [
      "p"
    ],
    "internet": [
      "p"
    ],
    "installs": [
      "p"
    ],
    "it": [
      "p"
    ],
    "giving": [
      "p"
    ],
    "control": [
      "p"
    ],
    "compromised": [
      "p"
    ],
    "system": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "p"
    ],
    "check": [
      "p",
      "h1",
      "p"
    ],
    "array": [
      "p",
      "p"
    ],
    "indexes": [
      "p",
      "p"
    ],
    "before": [
      "p",
      "p"
    ],
    "adequate": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "against": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "checked": [
      "p"
    ],
    "specific": [
      "h1"
    ],
    "technologies": [
      "h1"
    ],
    "c++": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Specific Technologies"
    ],
    "p": [
      "Out-of-bounds reads are a form of buffer overflow, except that instead of writing too much data, the application tries to read too much data from the buffer. Trying to read data at addresses beyond what is allocated for the data results in reading other data that happens to be at those addresses. Since this data is usually not what the application expects, the application usually crashes. If the attacker has crafted and placed data at those addresses in advance, and has also placed malicious code in memory in advance, the application might overwrite an instruction pointer with the attacker's data, thus allowing the attacker to redirect the execution flow to execute his malicious code.",
      "Out-of-bounds reads affect applications written in native code.",
      "Out-of-bounds reads typically result in the application crashing, but might sometimes lead to arbitrary code execution. For arbitrary code execution to be possible, the attacker has to be able to write to the memory that is accessed by the out-of-bounds read and the application has to use that data for instruction pointers.",
      "A common code execution attack vector targets web browsers. The exploit is placed on a web site. When the victim user opens the web site in a web browser, the web browser processes the exploit code. The exploit code usually downloads malicious software from the Internet and installs it, giving control of the compromised system to the attacker.",
      "To prevent out-of-bounds reads, check array indexes before use.",
      "To check for adequate protection against out-of-bounds reads, verify that array indexes are checked before use."
    ],
    "ul": [
      "C++ Out-of-bounds Read"
    ],
    "li": [
      "C++ Out-of-bounds Read"
    ],
    "a": [
      "C++ Out-of-bounds Read"
    ]
  },
  "links": [
    {
      "href": "5d4dd17c-34a6-470a-b2a7-83940d98c4e8",
      "text": "C++ Out-of-bounds Read"
    }
  ],
  "html": "<h1>Description</h1><p>Out-of-bounds reads are a form of buffer overflow, except that instead of writing too much data, the application tries to read too much data from the buffer. Trying to read data at addresses beyond what is allocated for the data results in reading other data that happens to be at those addresses. Since this data is usually not what the application expects, the application usually crashes. If the attacker has crafted and placed data at those addresses in advance, and has also placed malicious code in memory in advance, the application might overwrite an instruction pointer with the attacker's data, thus allowing the attacker to redirect the execution flow to execute his malicious code. \n</p><p>\nOut-of-bounds reads affect applications written in native code.\n</p><h1>Impact</h1><p>Out-of-bounds reads typically result in the application crashing, but might sometimes lead to arbitrary code execution. For arbitrary code execution to be possible, the attacker has to be able to write to the memory that is accessed by the out-of-bounds read and the application has to use that data for instruction pointers. \n</p><p>\nA common code execution attack vector targets web browsers. The exploit is placed on a web site. When the victim user opens the web site in a web browser, the web browser processes the exploit code. The exploit code usually downloads malicious software from the Internet and installs it, giving control of the compromised system to the attacker.\n</p><h1>Countermeasures</h1><p>To prevent out-of-bounds reads, check array indexes before use.\n</p><h1>Application Check</h1><p>To check for adequate protection against out-of-bounds reads, verify that array indexes are checked before use.\n</p><h1>Specific Technologies</h1><ul><li> <a href=\"5d4dd17c-34a6-470a-b2a7-83940d98c4e8\">C++ Out-of-bounds Read</a></li></ul>"
}