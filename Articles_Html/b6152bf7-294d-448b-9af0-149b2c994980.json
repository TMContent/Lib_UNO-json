{
  "id": "b6152bf7-294d-448b-9af0-149b2c994980",
  "checksum": "e332906dbd401c561877408622c2a1e7ff11d998",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "h1",
      "h1",
      "p"
    ],
    "c++": [
      "p"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1"
    ],
    "verify": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "unallocated": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "not": [
      "p",
      "p",
      "title"
    ],
    "accessed": [
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "accessing": [
      "p"
    ],
    "has": [
      "p",
      "p",
      "p"
    ],
    "been": [
      "p",
      "p",
      "p"
    ],
    "deallocated": [
      "p"
    ],
    "may": [
      "p"
    ],
    "result": [
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "an": [
      "p"
    ],
    "exploitable": [
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "type": [
      "p"
    ],
    "of": [
      "p"
    ],
    "called": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p"
    ],
    "\"dangling": [
      "p",
      "p"
    ],
    "pointer": [
      "p",
      "p",
      "p"
    ],
    "vulnerability\"": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p"
    ],
    "via": [
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "free": [
      "p"
    ],
    "earlier": [
      "p"
    ],
    "-": [
      "p"
    ],
    "pointer\"": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "identify": [
      "p"
    ],
    "all": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "unallocates": [
      "p"
    ],
    "pointers": [
      "p"
    ],
    "are": [
      "p"
    ],
    "never": [
      "p"
    ],
    "after": [
      "p"
    ],
    "objects": [
      "p"
    ],
    "they": [
      "p"
    ],
    "reference": [
      "p"
    ],
    "have": [
      "p"
    ],
    "deleted": [
      "p"
    ],
    "fix": [
      "h1"
    ],
    "be": [
      "p"
    ],
    "rewritten": [
      "p"
    ],
    "way": [
      "p"
    ],
    "does": [
      "p"
    ],
    "access": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "don't": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Related Items"
    ],
    "p": [
      "C++",
      "Verify that unallocated memory is not accessed.",
      "Accessing memory that has been deallocated may result in an exploitable vulnerability. This type of vulnerability is called a \"dangling pointer vulnerability\". The unallocated memory is accessed via a pointer that has been used to free the memory earlier - this pointer is the \"dangling pointer\".",
      "Identify all code that unallocates memory. Verify that pointers are never used after the objects they reference have been deleted.",
      "Code has to be rewritten in a way that does not access unallocated memory."
    ],
    "ul": [
      "Don't Access Unallocated Memory"
    ],
    "li": [
      "Don't Access Unallocated Memory"
    ],
    "a": [
      "Don't Access Unallocated Memory"
    ]
  },
  "links": [
    {
      "href": "/article/b8b0d075-5aa2-4095-a441-210f38fc3b3e",
      "text": "Don't Access Unallocated Memory"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <p>C&#43;&#43;</p>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that unallocated memory is not accessed.</p>\r\n  <h1>Why</h1>\r\n  <p>Accessing memory that has been deallocated may result in an exploitable vulnerability. This type of vulnerability is called a \"dangling pointer vulnerability\". The unallocated memory is accessed via a pointer that has been used to free the memory earlier - this pointer is the \"dangling pointer\".</p>\r\n  <h1>How to Check</h1>\r\n  <p>Identify all code that unallocates memory. Verify that pointers are never used after the objects they reference have been deleted.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>Code has to be rewritten in a way that does not access unallocated memory. </p>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/b8b0d075-5aa2-4095-a441-210f38fc3b3e\">Don't Access Unallocated Memory</a>\r\n    </li>\r\n  </ul>"
}