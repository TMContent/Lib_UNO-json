{
  "id": "155aadfd-39f0-454e-8d45-53553eb612d1",
  "checksum": "459fbb48a01b44f10bdda9d13d2e2331d51c1fa1",
  "words": {
    "0": [
      "pre"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "do": [
      "h1"
    ],
    "check": [
      "p",
      "title"
    ],
    "your": [
      "p"
    ],
    "array": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "indexes": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "title"
    ],
    "before": [
      "p",
      "p",
      "title"
    ],
    "use": [
      "p",
      "ul",
      "li",
      "p",
      "title"
    ],
    "ensure": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "index": [
      "p",
      "p",
      "p",
      "pre"
    ],
    "is": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "within": [
      "p",
      "p"
    ],
    "bounds": [
      "p",
      "ul",
      "li"
    ],
    "why": [
      "h1"
    ],
    "indexing": [
      "p",
      "p"
    ],
    "errors": [
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "buffer": [
      "p"
    ],
    "overruns": [
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "lead": [
      "p",
      "p",
      "p"
    ],
    "memory": [
      "p"
    ],
    "being": [
      "p"
    ],
    "overwritten": [
      "p"
    ],
    "at": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "locations": [
      "p"
    ],
    "this": [
      "p"
    ],
    "application": [
      "p"
    ],
    "instability": [
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "with": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p"
    ],
    "carefully": [
      "p"
    ],
    "constructed": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "code": [
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "injection": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "whenever": [
      "p"
    ],
    "into": [
      "p"
    ],
    "an": [
      "p"
    ],
    "variable": [
      "p"
    ],
    "calculated": [
      "p"
    ],
    "value": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "make": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "sure": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "rules": [
      "p"
    ],
    "are": [
      "p",
      "ul",
      "li"
    ],
    "followed": [
      "p"
    ],
    "run": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li"
    ],
    "zero": [
      "ul",
      "li"
    ],
    "n-1": [
      "ul",
      "li"
    ],
    "where": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "n": [
      "ul",
      "li"
    ],
    "number": [
      "ul",
      "li"
    ],
    "of": [
      "ul",
      "li"
    ],
    "elements": [
      "ul",
      "li"
    ],
    "possible": [
      "ul",
      "li"
    ],
    "does": [
      "ul",
      "li"
    ],
    "not": [
      "ul",
      "li"
    ],
    "input": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "parameters": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "any": [
      "ul",
      "li"
    ],
    "used": [
      "ul",
      "li"
    ],
    "validated": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "constrained": [
      "ul",
      "li"
    ],
    "maximum": [
      "ul",
      "li"
    ],
    "minimum": [
      "ul",
      "li"
    ],
    "cannot": [
      "ul",
      "li"
    ],
    "be": [
      "ul",
      "li"
    ],
    "exceeded": [
      "ul",
      "li"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "in": [
      "p",
      "p"
    ],
    "indexed": [
      "p"
    ],
    "without": [
      "p"
    ],
    "checking": [
      "p"
    ],
    "boundaries": [
      "p"
    ],
    "int": [
      "pre",
      "pre"
    ],
    "arrayindexingint": [
      "pre",
      "pre"
    ],
    "index{": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre",
      "pre"
    ],
    "intarrayindex];}": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "checked": [
      "p"
    ],
    "if": [
      "pre"
    ],
    "(index": [
      "pre"
    ],
    "=": [
      "pre"
    ],
    "||": [
      "pre"
    ],
    "cloud_reg_num_prov_ifcs)": [
      "pre"
    ],
    "{": [
      "pre"
    ],
    "-1": [
      "pre"
    ],
    "}": [
      "pre"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "Check your array indexes before use to ensure that the index is within the array bounds.",
      "Array indexing errors, such as buffer overruns can lead to memory being overwritten at arbitrary locations. This can lead to application instability or, with a carefully constructed attack, can lead to code injection.",
      "Whenever indexing into an array with a variable or calculated value.",
      "Make sure that the following rules are followed:",
      "In the following code the array is indexed without checking to ensure the index is within the array boundaries.",
      "In the following code the array index is checked before use."
    ],
    "ul": [
      "Make sure that indexes run from zero to n-1, where n is the number of array elements. Where possible, make sure that code does not use input parameters as array indexes. Make sure that any input parameters used as array indexes are validated and constrained to ensure that the maximum and minimum array bounds cannot be exceeded."
    ],
    "li": [
      "Make sure that indexes run from zero to n-1, where n is the number of array elements.",
      "Where possible, make sure that code does not use input parameters as array indexes.",
      "Make sure that any input parameters used as array indexes are validated and constrained to ensure that the maximum and minimum array bounds cannot be exceeded."
    ],
    "pre": [
      "int ArrayIndexing(int index){  return intArray[index];}",
      "int ArrayIndexing(int index){  if ((index >= 0) || (index < CLOUD_REG_NUM_PROV_IFCS))  {  \treturn -1;  }  return intArray[index];}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\r\n  <p>Check your array indexes before use to ensure that the index is within the array bounds.</p>\r\n  <h1>Why</h1>\r\n  <p>Array indexing errors, such as buffer overruns can lead to memory being overwritten at arbitrary locations. This can lead to application instability or, with a carefully constructed attack, can lead to code injection.</p>\r\n  <h1>When</h1>\r\n  <p>Whenever indexing into an array with a variable or calculated value.</p>\r\n  <h1>How</h1>\r\n  <p>Make sure that the following rules are followed: </p>\r\n  <ul>\r\n    <li>Make sure that indexes run from zero to n-1, where n is the number of array elements. <li>Where possible, make sure that code does not use input parameters as array indexes. <li>Make sure that any input parameters used as array indexes are validated and constrained to ensure that the maximum and minimum array bounds cannot be exceeded. </li></li></li>\r\n  </ul>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following code the array is indexed without checking to ensure the index is within the array boundaries.</p>\r\n  <pre>int ArrayIndexing(int index)<br />&#123;<br />&nbsp; return intArray&#91;index&#93;;<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following code the array index is checked before use.</p>\r\n  <pre>int ArrayIndexing(int index)<br />&#123;<br />&nbsp; if ((index &gt;= 0) &#124;&#124; (index &lt; CLOUD_REG_NUM_PROV_IFCS))<br />&nbsp; &#123;<br />&nbsp; &#9;return -1;<br />  &#125;<br />  return intArray&#91;index&#93;;<br />&#125;</pre>"
}