{
  "id": "5b207f0a-b17d-42e3-813f-8ac255b3e1bb",
  "checksum": "0375eac19ac3c9bb209d9a0ac2f1ea00436249a9",
  "words": {
    "1": [
      "ol",
      "li",
      "p"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "h1",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li"
    ],
    "ensure": [
      "p",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "no": [
      "p",
      "p"
    ],
    "java-supported": [
      "p"
    ],
    "functionality": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "re-implemented": [
      "p"
    ],
    "using": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "jni": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "why": [
      "h1"
    ],
    "when": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "you": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "native": [
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "code": [
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "expose": [
      "p"
    ],
    "yourself": [
      "p"
    ],
    "potential": [
      "p"
    ],
    "vulnerabilities": [
      "p",
      "ul",
      "li"
    ],
    "such": [
      "p",
      "ul",
      "li"
    ],
    "as": [
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "buffer": [
      "p",
      "ul",
      "li"
    ],
    "overflows": [
      "p"
    ],
    "that": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "are": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "mitigated": [
      "p"
    ],
    "by": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "java": [
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "virtual": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "machine": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "interface": [
      "p",
      "strong",
      "p"
    ],
    "jni)": [
      "p",
      "strong"
    ],
    "should": [
      "p"
    ],
    "be": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "used": [
      "p"
    ],
    "only": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "p"
    ],
    "has": [
      "p"
    ],
    "implementation": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "required": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "once": [
      "p"
    ],
    "your": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "application": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "utilizes": [
      "p"
    ],
    "it": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "risks": [
      "p"
    ],
    "losing": [
      "p"
    ],
    "certain": [
      "p",
      "ul",
      "li"
    ],
    "benefits": [
      "p"
    ],
    "of": [
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "platform": [
      "p"
    ],
    "prevents": [
      "ul",
      "li"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "being": [
      "ul",
      "li"
    ],
    "cross-platform": [
      "ul",
      "li"
    ],
    "therefore": [
      "ul",
      "li",
      "p"
    ],
    "would": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "need": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "recompile": [
      "ul",
      "li"
    ],
    "components": [
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "p"
    ],
    "in": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "environment": [
      "ul",
      "li"
    ],
    "where": [
      "ul",
      "li"
    ],
    "like": [
      "ul",
      "li"
    ],
    "deploy": [
      "ul",
      "li"
    ],
    "because": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "provides": [
      "ul",
      "li"
    ],
    "type": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "boundary": [
      "ul",
      "li"
    ],
    "checks": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "otherwise": [
      "ul",
      "li"
    ],
    "unavailable": [
      "ul",
      "li"
    ],
    "all": [
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "data": [
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "types": [
      "ul",
      "li"
    ],
    "type-safe": [
      "ul",
      "li"
    ],
    "secure": [
      "ul",
      "li"
    ],
    "exposes": [
      "ul",
      "li"
    ],
    "overflow": [
      "ul",
      "li"
    ],
    "logic": [
      "ul",
      "li"
    ],
    "behind": [
      "ul",
      "li"
    ],
    "its": [
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "garbage": [
      "ul",
      "li"
    ],
    "collector": [
      "ul",
      "li"
    ],
    "does": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "not": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "allow": [
      "ul",
      "li"
    ],
    "dangling": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "arbitrary": [
      "ul",
      "li"
    ],
    "pointers": [
      "ul",
      "li"
    ],
    "take": [
      "ul",
      "li"
    ],
    "extra": [
      "ul",
      "li"
    ],
    "effort": [
      "ul",
      "li"
    ],
    "reference": [
      "ul",
      "li"
    ],
    "memory": [
      "ul",
      "li"
    ],
    "allocated": [
      "ul",
      "li"
    ],
    "following": [
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p"
    ],
    "re-implement": [
      "p"
    ],
    "through": [
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "review": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "design": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "requirements": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "thoroughly": [
      "ol",
      "li",
      "p"
    ],
    "examine": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "identify": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "necessary": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "perform": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "tasks": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "research": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "whether": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "each": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "component": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "can": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "if": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "sdk": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "cannot": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "provide": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "a": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "viable": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "solution": [
      "ol",
      "li",
      "ul",
      "li",
      "h1"
    ],
    "jnicommon": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "may": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "require": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "include": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "interaction": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "with": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "underlying": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "operating": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "system": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "low-level": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "network": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "operations": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "legacy": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "software": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "external": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "libraries": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "written": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "hardware": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "devices": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "verify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "allowed": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "utilize": [
      "ol",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "uses": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "looking": [
      "ol",
      "li",
      "p"
    ],
    "\"jnienv\"": [
      "ol",
      "li",
      "p"
    ],
    "\"jobject\"": [
      "ol",
      "li",
      "p"
    ],
    "strings": [
      "ol",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "tell-tale": [
      "ol",
      "li",
      "p"
    ],
    "signs": [
      "ol",
      "li",
      "p"
    ],
    "#include": [
      "ol",
      "li",
      "pre"
    ],
    "jni.h>#include": [
      "ol",
      "li",
      "pre"
    ],
    "sys/types.h>#include": [
      "ol",
      "li",
      "pre"
    ],
    "fcntl.h>#include": [
      "ol",
      "li",
      "pre"
    ],
    "stdio.h>#include": [
      "ol",
      "li",
      "pre"
    ],
    "atlbase.h>#include": [
      "ol",
      "li",
      "pre"
    ],
    "windows.h>#include": [
      "ol",
      "li",
      "pre"
    ],
    "wtypes.h>jniexport": [
      "ol",
      "li",
      "pre"
    ],
    "jboolean": [
      "ol",
      "li",
      "pre"
    ],
    "jnicall": [
      "ol",
      "li",
      "pre"
    ],
    "java_activex_invokeobject": [
      "ol",
      "li",
      "pre"
    ],
    "jnienv": [
      "ol",
      "li",
      "em",
      "pre"
    ],
    "*": [
      "ol",
      "li",
      "pre"
    ],
    "env": [
      "ol",
      "li",
      "pre"
    ],
    "jobject": [
      "ol",
      "li",
      "em",
      "pre"
    ],
    "jobj": [
      "ol",
      "li",
      "pre"
    ],
    "jstring": [
      "ol",
      "li",
      "pre"
    ],
    "jguid{": [
      "ol",
      "li",
      "pre"
    ],
    "..}": [
      "ol",
      "li",
      "pre"
    ],
    "list": [
      "ol",
      "li",
      "p"
    ],
    "specified for": [
      "ol",
      "li",
      "p"
    ],
    "use that": [
      "ol",
      "li",
      "p"
    ],
    "was": [
      "ol",
      "li",
      "p"
    ],
    "identified": [
      "ol",
      "li",
      "p"
    ],
    "in step": [
      "ol",
      "li",
      "p"
    ],
    "compare": [
      "ol",
      "li",
      "p"
    ],
    "actual": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "against": [
      "ol",
      "li",
      "p"
    ],
    "intended": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "p"
    ],
    "scope": [
      "ol",
      "li",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "choosing": [
      "p"
    ],
    "vs": [
      "p"
    ],
    "understand": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "unless": [
      "ol",
      "li",
      "p"
    ],
    "ask": [
      "ol",
      "li",
      "p"
    ],
    "device": [
      "ol",
      "li",
      "p"
    ],
    "kernel": [
      "ol",
      "li",
      "p"
    ],
    "drivers": [
      "ol",
      "li",
      "p"
    ],
    "other": [
      "ol",
      "li",
      "p"
    ],
    "likely": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "accomplished": [
      "ol",
      "li",
      "p"
    ],
    "references": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "before": [
      "ol",
      "li",
      "p"
    ],
    "turning": [
      "ol",
      "li",
      "p"
    ],
    "consult": [
      "ol",
      "li",
      "p"
    ],
    "there": [
      "ol",
      "li",
      "p"
    ],
    "apis": [
      "ol",
      "li",
      "p"
    ],
    "already": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "provided": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "developers": [
      "p",
      "p",
      "p",
      "p"
    ],
    "myapp": [
      "p",
      "p"
    ],
    "stock": [
      "p",
      "p"
    ],
    "market": [
      "p",
      "p"
    ],
    "analysis": [
      "p",
      "p"
    ],
    "tool": [
      "p",
      "p"
    ],
    "econometric": [
      "p",
      "p"
    ],
    "modeling": [
      "p",
      "p"
    ],
    "technology": [
      "p",
      "p"
    ],
    "their": [
      "p"
    ],
    "desire": [
      "p"
    ],
    "optimize": [
      "p"
    ],
    "algorithms": [
      "p"
    ],
    "throughout": [
      "p"
    ],
    "doing": [
      "p"
    ],
    "so": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "prevent": [
      "p"
    ],
    "executing": [
      "p"
    ],
    "optimization": [
      "p",
      "p"
    ],
    "routines": [
      "p",
      "p"
    ],
    "internal": [
      "p",
      "p"
    ],
    "security": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "choose": [
      "p"
    ],
    "do": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "disturb": [
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "issues": [
      "ul",
      "li"
    ],
    "introduces": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "unsafe": [
      "ul",
      "li",
      "a"
    ],
    "owasp": [
      "ul",
      "li"
    ],
    "unmanaged": [
      "h1",
      "h1"
    ],
    "guidelines": [
      "h1"
    ],
    "supports": [
      "ul",
      "li",
      "a"
    ],
    "minimize": [
      "ul",
      "li",
      "a"
    ],
    "number": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "times": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "language": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "boundaries": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "crossed": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "validate": [
      "ul",
      "li",
      "a"
    ],
    "passed": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "between": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "protect": [
      "ul",
      "li",
      "a"
    ],
    "loaded": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "supported": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "utilized": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "minimized": [
      "ul",
      "li",
      "a"
    ],
    "validated": [
      "ul",
      "li",
      "a"
    ],
    "protected": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Additional Resources",
      "Unmanaged Code Guidelines",
      "Unmanaged Code Checklists"
    ],
    "p": [
      "Ensure no Java-supported functionality is re-implemented using JNI.",
      "When you use native code, you expose yourself to potential vulnerabilities, such as buffer overflows, that are mitigated by the Java Virtual Machine.",
      "Java Native Interface (JNI) should be used only when the Java Virtual Machine has no implementation for the required functionality. Once your application utilizes JNI, it risks losing certain benefits of the Java platform:",
      "Use the following steps to ensure that your application does not re-implement Java functionality through JNI:",
      "Review your application's design and requirements. Thoroughly examine your application's design and requirements.",
      "Verify that only the allowed components utilize JNI. Identify all uses of JNI in your application's code base, by looking for \"JNIEnv\" and \"jobject\" strings, which are tell-tale signs of JNI:",
      "Using the list of components specified for JNI use that was identified in Step 1, compare all actual uses of JNI against your application's intended use of native code. Ensure that all actual use of JNI is within the intended scope.",
      "Use the following steps when choosing native vs. Java code:",
      "Understand the required functionality. Unless the requirements ask for device and kernel drivers or other low-level code, the implementation can likely be accomplished using Java code.",
      "Examine the Java SDK references. Before turning to native code, consult the Java SDK. It is likely that there are Java APIs already provided for the required functionality.",
      "The developers of MyApp, a stock market analysis tool, use econometric modeling as a base technology in the application. In their desire to optimize the application's algorithms, the developers use Java Native Interface throughout the code. By doing so, they prevent the Java Virtual Machine from executing all of its code optimization routines and internal security checks.",
      "The developers of MyApp, a stock market analysis tool, use econometric modeling as a base technology in the application. The developers choose to use Java code only. Therefore, they do not disturb the code optimization routines and internal security checks of the Java Virtual Machine."
    ],
    "strong": [
      "Java Native Interface (JNI)",
      "Review your application's design and requirements.",
      "Verify that only the allowed components utilize JNI.",
      "Understand the required functionality.",
      "Examine the Java SDK references."
    ],
    "ul": [
      "JNI prevents Java applications from being cross-platform. Therefore, you would need to recompile your JNI components in the environment where you would like to deploy your application. Because the Java Virtual Machine provides certain type and boundary checks that are otherwise unavailable in native code, all data types in Java are type-safe and secure. Using JNI exposes your application to vulnerabilities such as buffer overflow. Because of the logic behind its garbage collector, Java does not allow dangling or arbitrary pointers. When using JNI for your application, you would need to take extra effort to ensure that your application does not reference memory that is not allocated.",
      "Identify all functionality that is necessary for your application to perform its tasks. Research whether each component can be implemented using Java. If the Java SDK cannot provide a viable solution for a component, identify that the component is using JNI.Common tasks that may require the use of JNI include: Interaction with the underlying operating system Low-level network operations Interaction with legacy software Interaction with external libraries that are written in native code Interaction with hardware devices",
      "Interaction with the underlying operating system Low-level network operations Interaction with legacy software Interaction with external libraries that are written in native code Interaction with hardware devices",
      "Interaction with the underlying operating system Low-level network operations Interaction with legacy software Interaction with external libraries that are written in native code Interaction with hardware devices",
      "For more information about the security issues that JNI introduces, see: Unsafe JNI from OWASP.",
      "Do Not Utilize Functionality Through JNI if Java Already Supports It\r\n      \r\n        Minimize the Number of Times Language Boundaries are Crossed\r\n        \r\n          Validate All Data Passed Between Native and Java Code\r\n          \r\n            Protect Libraries Loaded Through JNI",
      "Java Supported Functionality Is Not Utilized Through JNI\r\n      \r\n        The Number of Times Language Boundaries Are Crossed Is Minimized\r\n        \r\n          All Data Passed Between Native and Java Code Is Validated\r\n          \r\n            Libraries Loaded Through JNI Are Protected"
    ],
    "li": [
      "JNI prevents Java applications from being cross-platform. Therefore, you would need to recompile your JNI components in the environment where you would like to deploy your application.",
      "Because the Java Virtual Machine provides certain type and boundary checks that are otherwise unavailable in native code, all data types in Java are type-safe and secure. Using JNI exposes your application to vulnerabilities such as buffer overflow.",
      "Because of the logic behind its garbage collector, Java does not allow dangling or arbitrary pointers. When using JNI for your application, you would need to take extra effort to ensure that your application does not reference memory that is not allocated.",
      "Review your application's design and requirements. Thoroughly examine your application's design and requirements. \r\n      \r\n        Identify all functionality that is necessary for your application to perform its tasks. Research whether each component can be implemented using Java. If the Java SDK cannot provide a viable solution for a component, identify that the component is using JNI.Common tasks that may require the use of JNI include: Interaction with the underlying operating system Low-level network operations Interaction with legacy software Interaction with external libraries that are written in native code Interaction with hardware devices",
      "Identify all functionality that is necessary for your application to perform its tasks.",
      "Research whether each component can be implemented using Java.",
      "If the Java SDK cannot provide a viable solution for a component, identify that the component is using JNI.Common tasks that may require the use of JNI include: Interaction with the underlying operating system Low-level network operations Interaction with legacy software Interaction with external libraries that are written in native code Interaction with hardware devices",
      "Interaction with the underlying operating system",
      "Low-level network operations",
      "Interaction with legacy software",
      "Interaction with external libraries that are written in native code",
      "Interaction with hardware devices",
      "Verify that only the allowed components utilize JNI. Identify all uses of JNI in your application's code base, by looking for \"JNIEnv\" and \"jobject\" strings, which are tell-tale signs of JNI:\r\n        #include <jni.h>#include <sys/types.h>#include <fcntl.h>#include <stdio.h>#include <atlbase.h>#include <windows.h>#include <wtypes.h>JNIEXPORT jboolean JNICALL Java_ActiveX_invokeObject           (JNIEnv * env, jobject jobj, jstring jguid){      ...}\r\n        Using the list of components specified for JNI use that was identified in Step 1, compare all actual uses of JNI against your application's intended use of native code. Ensure that all actual use of JNI is within the intended scope.",
      "Understand the required functionality. Unless the requirements ask for device and kernel drivers or other low-level code, the implementation can likely be accomplished using Java code.",
      "Examine the Java SDK references. Before turning to native code, consult the Java SDK. It is likely that there are Java APIs already provided for the required functionality.",
      "For more information about the security issues that JNI introduces, see: Unsafe JNI from OWASP.",
      "Do Not Utilize Functionality Through JNI if Java Already Supports It",
      "Minimize the Number of Times Language Boundaries are Crossed",
      "Validate All Data Passed Between Native and Java Code",
      "Protect Libraries Loaded Through JNI",
      "Java Supported Functionality Is Not Utilized Through JNI",
      "The Number of Times Language Boundaries Are Crossed Is Minimized",
      "All Data Passed Between Native and Java Code Is Validated",
      "Libraries Loaded Through JNI Are Protected"
    ],
    "ol": [
      "Review your application's design and requirements. Thoroughly examine your application's design and requirements. \r\n      \r\n        Identify all functionality that is necessary for your application to perform its tasks. Research whether each component can be implemented using Java. If the Java SDK cannot provide a viable solution for a component, identify that the component is using JNI.Common tasks that may require the use of JNI include: Interaction with the underlying operating system Low-level network operations Interaction with legacy software Interaction with external libraries that are written in native code Interaction with hardware devices\r\n      \r\n      \r\n        \r\n          Verify that only the allowed components utilize JNI. Identify all uses of JNI in your application's code base, by looking for \"JNIEnv\" and \"jobject\" strings, which are tell-tale signs of JNI:\r\n        #include <jni.h>#include <sys/types.h>#include <fcntl.h>#include <stdio.h>#include <atlbase.h>#include <windows.h>#include <wtypes.h>JNIEXPORT jboolean JNICALL Java_ActiveX_invokeObject           (JNIEnv * env, jobject jobj, jstring jguid){      ...}\r\n        Using the list of components specified for JNI use that was identified in Step 1, compare all actual uses of JNI against your application's intended use of native code. Ensure that all actual use of JNI is within the intended scope.",
      "Understand the required functionality. Unless the requirements ask for device and kernel drivers or other low-level code, the implementation can likely be accomplished using Java code. \r\n      \r\n        \r\n          Examine the Java SDK references. Before turning to native code, consult the Java SDK. It is likely that there are Java APIs already provided for the required functionality."
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "em": [
      "JNIEnv",
      "jobject"
    ],
    "pre": [
      "#include <jni.h>#include <sys/types.h>#include <fcntl.h>#include <stdio.h>#include <atlbase.h>#include <windows.h>#include <wtypes.h>JNIEXPORT jboolean JNICALL Java_ActiveX_invokeObject           (JNIEnv * env, jobject jobj, jstring jguid){      ...}"
    ],
    "a": [
      "Unsafe JNI",
      "Do Not Utilize Functionality Through JNI if Java Already Supports It",
      "Minimize the Number of Times Language Boundaries are Crossed",
      "Validate All Data Passed Between Native and Java Code",
      "Protect Libraries Loaded Through JNI",
      "Java Supported Functionality Is Not Utilized Through JNI",
      "The Number of Times Language Boundaries Are Crossed Is Minimized",
      "All Data Passed Between Native and Java Code Is Validated",
      "Libraries Loaded Through JNI Are Protected"
    ]
  },
  "links": [
    {
      "href": "http://www.owasp.org/index.php/Unsafe_JNI",
      "text": "Unsafe JNI"
    },
    {
      "href": "/article/351b69c8-b40b-4c13-899e-a8399b85a0ea",
      "text": "Do Not Utilize Functionality Through JNI if Java Already Supports It"
    },
    {
      "href": "/article/70b53138-faf7-410a-a966-16f3088fca63",
      "text": "Minimize the Number of Times Language Boundaries are Crossed"
    },
    {
      "href": "/article/946a5edb-e8f8-4365-8675-b8a5032c201b",
      "text": "Validate All Data Passed Between Native and Java Code"
    },
    {
      "href": "/article/43e09871-01a1-4b24-af9f-31e275b91b2f",
      "text": "Protect Libraries Loaded Through JNI"
    },
    {
      "href": "/article/5b207f0a-b17d-42e3-813f-8ac255b3e1bb",
      "text": "Java Supported Functionality Is Not Utilized Through JNI"
    },
    {
      "href": "/article/24e64319-c897-4c27-bfd5-d721b5cdad3c",
      "text": "The Number of Times Language Boundaries Are Crossed Is Minimized"
    },
    {
      "href": "/article/a61487db-d1e1-4304-89b1-44bb8c88b1e3",
      "text": "All Data Passed Between Native and Java Code Is Validated"
    },
    {
      "href": "/article/d775ead4-8413-4736-a40f-92c7e0231e5b",
      "text": "Libraries Loaded Through JNI Are Protected"
    }
  ],
  "html": "<h1>What to Check For</h1>\r\n  <p>Ensure no Java-supported functionality is re-implemented using JNI.</p>\r\n  <h1>Why</h1>\r\n  <p>When you use native code, you expose yourself to potential vulnerabilities, such as buffer overflows, that are mitigated by the Java Virtual Machine.</p>\r\n  <h1>How to Check</h1>\r\n  <p>\r\n    <strong>Java Native Interface (JNI)</strong> should be used only when the Java Virtual Machine has no implementation for the required functionality. Once your application utilizes JNI, it risks losing certain benefits of the Java platform: </p>\r\n  <ul>\r\n    <li>JNI prevents Java applications from being cross-platform. Therefore, you would need to recompile your JNI components in the environment where you would like to deploy your application. <li>Because the Java Virtual Machine provides certain type and boundary checks that are otherwise unavailable in native code, all data types in Java are type-safe and secure. Using JNI exposes your application to vulnerabilities such as buffer overflow. <li>Because of the logic behind its garbage collector, Java does not allow dangling or arbitrary pointers. When using JNI for your application, you would need to take extra effort to ensure that your application does not reference memory that is not allocated.</li></li></li>\r\n  </ul>\r\n  <p>Use the following steps to ensure that your application does not re-implement Java functionality through JNI:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Review your application's design and requirements. </strong>Thoroughly examine your application's design and requirements. </p>\r\n      <ul>\r\n        <li>Identify all functionality that is necessary for your application to perform its tasks. <li>Research whether each component can be implemented using Java. <li>If the Java SDK cannot provide a viable solution for a component, identify that the component is using JNI.<br /><br />Common tasks that may require the use of JNI include: <ul><ul><li>Interaction with the underlying operating system <li>Low-level network operations <li>Interaction with legacy software <li>Interaction with external libraries that are written in native code <li>Interaction with hardware devices</li></li></li></li></li></ul></ul></li></li></li>\r\n      </ul>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that only the allowed components utilize JNI. </strong>Identify all uses of JNI in your application's code base, by looking for \"<em>JNIEnv</em>\" and \"<em>jobject</em>\" strings, which are tell-tale signs of JNI:</p>\r\n        <pre>#include &lt;jni.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;fcntl.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;atlbase.h&gt;<br />#include &lt;windows.h&gt;<br />#include &lt;wtypes.h&gt;<br /><br />JNIEXPORT jboolean JNICALL Java_ActiveX_invokeObject<br />           (JNIEnv &#42; env, jobject jobj, jstring jguid)<br />&#123;<br />      ...<br />&#125;</pre>\r\n        <p>Using the list of components specified&nbsp;for JNI use&nbsp;that was identified in&nbsp;Step 1, compare all actual uses of JNI against your application's intended use of native code. Ensure that all actual use of JNI is within the intended scope.</p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Use the following steps when choosing native vs. Java code: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Understand the required functionality. </strong>Unless the requirements ask for device and kernel drivers or other low-level code, the implementation can likely be accomplished using Java code. </p>\r\n      <li>\r\n        <p>\r\n          <strong>Examine the Java SDK references. </strong>Before turning to native code, consult the Java SDK. It is likely that there are Java APIs already provided for the required functionality.</p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The developers of MyApp, a stock market analysis tool, use econometric modeling as a base technology in the application. In their desire to optimize the application's algorithms, the developers use Java Native Interface throughout the code. By doing so, they prevent the Java Virtual Machine from executing all of its code optimization routines and internal security checks.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>The developers of MyApp, a stock market analysis tool, use econometric modeling as a base technology in the application. The developers choose to use Java code only. Therefore, they do not disturb the code optimization routines and internal security checks of the Java Virtual Machine.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about the security issues that JNI introduces, see: <a href=\"http://www.owasp.org/index.php/Unsafe_JNI\">Unsafe JNI</a> from OWASP. </li>\r\n  </ul>\r\n  <h1>Unmanaged Code Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/351b69c8-b40b-4c13-899e-a8399b85a0ea\">Do Not Utilize Functionality Through JNI if Java Already Supports It</a>\r\n      <li>\r\n        <a href=\"/article/70b53138-faf7-410a-a966-16f3088fca63\">Minimize the Number of Times Language Boundaries are Crossed</a>\r\n        <li>\r\n          <a href=\"/article/946a5edb-e8f8-4365-8675-b8a5032c201b\">Validate All Data Passed Between Native and Java Code</a>\r\n          <li>\r\n            <a href=\"/article/43e09871-01a1-4b24-af9f-31e275b91b2f\">Protect Libraries Loaded Through JNI</a>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Unmanaged Code Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/5b207f0a-b17d-42e3-813f-8ac255b3e1bb\">Java Supported Functionality Is Not Utilized Through JNI</a>\r\n      <li>\r\n        <a href=\"/article/24e64319-c897-4c27-bfd5-d721b5cdad3c\">The Number of Times Language Boundaries Are Crossed Is Minimized</a>\r\n        <li>\r\n          <a href=\"/article/a61487db-d1e1-4304-89b1-44bb8c88b1e3\">All Data Passed Between Native and Java Code Is Validated</a>\r\n          <li>\r\n            <a href=\"/article/d775ead4-8413-4736-a40f-92c7e0231e5b\">Libraries Loaded Through JNI Are Protected</a>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>"
}