{
  "id": "00000000-0000-0000-0000-0000006ab8ac",
  "checksum": "6caa40c8282f607136742475d2cd36980519888c",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a"
    ],
    "html5": [
      "ul",
      "li"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2",
      "ul",
      "li",
      "a"
    ],
    "validate": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "received": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "by": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "event": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "handlers": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "why": [
      "h2"
    ],
    "make": [
      "p"
    ],
    "it": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "harder": [
      "p"
    ],
    "for": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "attackers": [
      "p"
    ],
    "send": [
      "p",
      "p"
    ],
    "malicious": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "a"
    ],
    "application": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "even": [
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "able": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "appears": [
      "p"
    ],
    "come": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "trusted": [
      "p"
    ],
    "server": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "will": [
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "limited": [
      "p"
    ],
    "sending": [
      "p"
    ],
    "in": [
      "p"
    ],
    "valid": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "formats": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li"
    ],
    "thus": [
      "p"
    ],
    "severely": [
      "p"
    ],
    "limiting": [
      "p"
    ],
    "his": [
      "p"
    ],
    "ability": [
      "p"
    ],
    "affect": [
      "p"
    ],
    "how": [
      "h2"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "receives": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li"
    ],
    "messages": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "search": [
      "ol",
      "li"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "references": [
      "ol",
      "li"
    ],
    "addeventlistener": [
      "ol",
      "li",
      "em"
    ],
    "method": [
      "ol",
      "li"
    ],
    "create": [
      "ol",
      "li"
    ],
    "a": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "spreadsheet": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "list": [
      "ol",
      "li"
    ],
    "each": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "piece": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "define": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "a"
    ],
    "expected": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "example": [
      "ol",
      "li"
    ],
    "might": [
      "ol",
      "li"
    ],
    "expecting": [
      "ol",
      "li"
    ],
    "time": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "name": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "or": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "social": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "security": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "number": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "these": [
      "ol",
      "li"
    ],
    "types": [
      "ol",
      "li"
    ],
    "has": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "distinct": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "format": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "different": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "altogether": [
      "ol",
      "li"
    ],
    "as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "you": [
      "ol",
      "li"
    ],
    "add": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "information": [
      "ol",
      "li"
    ],
    "about": [
      "ol",
      "li"
    ],
    "include": [
      "ol",
      "li"
    ],
    "examples": [
      "ol",
      "li"
    ],
    "specific": [
      "ol",
      "li"
    ],
    "possible": [
      "ol",
      "li"
    ],
    "validators": [
      "ol",
      "li",
      "strong"
    ],
    "type": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "write": [
      "ol",
      "li"
    ],
    "validator": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "function": [
      "ol",
      "li"
    ],
    "determines": [
      "ol",
      "li"
    ],
    "whether": [
      "ol",
      "li"
    ],
    "matches": [
      "ol",
      "li"
    ],
    "correct": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "not": [
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "regular": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "expressions": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "usually": [
      "ol",
      "li"
    ],
    "used": [
      "ol",
      "li",
      "ul",
      "li",
      "a"
    ],
    "this": [
      "ol",
      "li"
    ],
    "task": [
      "ol",
      "li"
    ],
    "length": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "first": [
      "ol",
      "li"
    ],
    "before": [
      "ol",
      "li"
    ],
    "using": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "prevent": [
      "ol",
      "li"
    ],
    "expression": [
      "ol",
      "li"
    ],
    "denial": [
      "ol",
      "li"
    ],
    "service": [
      "ol",
      "li"
    ],
    "dos)": [
      "ol",
      "li"
    ],
    "attacks": [
      "ol",
      "li"
    ],
    "general": [
      "ol",
      "li"
    ],
    "pattern": [
      "ol",
      "li"
    ],
    "validating": [
      "ol",
      "li"
    ],
    "validata": [
      "ol",
      "li"
    ],
    "characters": [
      "ol",
      "li"
    ],
    "patterns": [
      "ol",
      "li"
    ],
    "structured": [
      "ol",
      "li"
    ],
    "like": [
      "ol",
      "li"
    ],
    "numbers": [
      "ol",
      "li"
    ],
    "dates,": [
      "ol",
      "li"
    ],
    "ranges": [
      "ol",
      "li"
    ],
    "numerical": [
      "ol",
      "li"
    ],
    "guide": [
      "ol",
      "li"
    ],
    "validates": [
      "ol",
      "li"
    ],
    "immediately": [
      "ol",
      "li"
    ],
    "after": [
      "ol",
      "li"
    ],
    "matching": [
      "ol",
      "li"
    ],
    "only": [
      "ol",
      "li"
    ],
    "continue": [
      "ol",
      "li"
    ],
    "process": [
      "ol",
      "li"
    ],
    "web": [
      "h2",
      "h2"
    ],
    "messaging": [
      "h2",
      "h2"
    ],
    "guidelines": [
      "h2"
    ],
    "evaluate": [
      "ul",
      "li",
      "a"
    ],
    "use": [
      "ul",
      "li",
      "a"
    ],
    "elementtextcontent": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "assign": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "values": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "dom": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "elements": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "explicitly": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "state": [
      "ul",
      "li",
      "a"
    ],
    "origin": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "with": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "postmessage": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "attribute": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "against": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "fqdn": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "ul",
      "li",
      "a"
    ],
    "checklist": [
      "h2"
    ],
    "items": [
      "h2"
    ],
    "evaluated": [
      "ul",
      "li",
      "a"
    ],
    "stated": [
      "ul",
      "li",
      "a"
    ],
    "validated": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "checked": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "How",
      "Web Messaging Guidelines",
      "Web Messaging Checklist Items"
    ],
    "ul": [
      "HTML5",
      "Do Not Evaluate Messages as Code\n Use element.textContent to Assign Values to DOM Elements\n Explicitly State the Expected Origin with postMessage\n Validate Data Received by Event Handlers\n Validate the Origin Attribute Against the FQDN\n Check The Origin Attribute of Messages",
      "Messages Are Not Evaluated as Code\n Element.textContent Is Used to Assign Values to DOM Elements\n Expected Origin Is Explicitly Stated with postMessage\n Data Received by Event Handlers Is Validated\n The Origin Attribute Is Validated Against the FQDN\n The Origin Attribute of Messages Is Checked"
    ],
    "li": [
      "HTML5",
      "Identify code that receives messages from the server. Search application code for all references to the addEventListener method. Create a spreadsheet to list all code that receives messages from the server.",
      "Identify data formats. For each piece of code that receives messages, define valid data formats that are expected by the application. For example, a piece of code might be expecting a time, a name, or a social security number. Each of these types of data has a distinct valid format; a time has a different format from a name, and a social security number has a different format altogether. As you add information to the spreadsheet about expected data formats, include examples and be as specific as possible.",
      "Define validators. For each distinct data type, write a validator function that determines whether a piece of data matches the correct format or not. Regular expressions are usually used for this task. Validate data length first, before using regular expressions, to prevent regular expression denial of service (DoS) attacks. The general pattern for validating data formats is: validata data length, validate valid characters, validate patterns of structured data (like social security numbers or dates), and validate ranges of numerical data.",
      "Validate data. Using the spreadsheet as a guide, for each piece of code that receives messages, add code that validates data immediately after it is received, using the validator matching the data type that is expected. Only continue to process the data if it has the correct format.",
      "Do Not Evaluate Messages as Code",
      "Use element.textContent to Assign Values to DOM Elements",
      "Explicitly State the Expected Origin with postMessage",
      "Validate Data Received by Event Handlers",
      "Validate the Origin Attribute Against the FQDN",
      "Check The Origin Attribute of Messages",
      "Messages Are Not Evaluated as Code",
      "Element.textContent Is Used to Assign Values to DOM Elements",
      "Expected Origin Is Explicitly Stated with postMessage",
      "Data Received by Event Handlers Is Validated",
      "The Origin Attribute Is Validated Against the FQDN",
      "The Origin Attribute of Messages Is Checked"
    ],
    "p": [
      "Validate data received by event handlers.",
      "Validate data received by event handlers to make it harder for attackers to send malicious data to the application. Even if an attacker is able to send data that appears to come from the trusted server, the attacker will be limited to sending data in valid formats, thus severely limiting his ability to affect the application.",
      "To validate data received by event handlers:"
    ],
    "ol": [
      "Identify code that receives messages from the server. Search application code for all references to the addEventListener method. Create a spreadsheet to list all code that receives messages from the server.\n Identify data formats. For each piece of code that receives messages, define valid data formats that are expected by the application. For example, a piece of code might be expecting a time, a name, or a social security number. Each of these types of data has a distinct valid format; a time has a different format from a name, and a social security number has a different format altogether. As you add information to the spreadsheet about expected data formats, include examples and be as specific as possible.\n Define validators. For each distinct data type, write a validator function that determines whether a piece of data matches the correct format or not. Regular expressions are usually used for this task. Validate data length first, before using regular expressions, to prevent regular expression denial of service (DoS) attacks. The general pattern for validating data formats is: validata data length, validate valid characters, validate patterns of structured data (like social security numbers or dates), and validate ranges of numerical data.\n Validate data. Using the spreadsheet as a guide, for each piece of code that receives messages, add code that validates data immediately after it is received, using the validator matching the data type that is expected. Only continue to process the data if it has the correct format."
    ],
    "strong": [
      "Identify code that receives messages from the server.",
      "Identify data formats.",
      "Define validators.",
      "Validate data."
    ],
    "em": [
      "addEventListener"
    ],
    "a": [
      "Do Not Evaluate Messages as Code",
      "Use element.textContent to Assign Values to DOM Elements",
      "Explicitly State the Expected Origin with postMessage",
      "Validate Data Received by Event Handlers",
      "Validate the Origin Attribute Against the FQDN",
      "Check The Origin Attribute of Messages",
      "Messages Are Not Evaluated as Code",
      "Element.textContent Is Used to Assign Values to DOM Elements",
      "Expected Origin Is Explicitly Stated with postMessage",
      "Data Received by Event Handlers Is Validated",
      "The Origin Attribute Is Validated Against the FQDN",
      "The Origin Attribute of Messages Is Checked"
    ]
  },
  "links": [
    {
      "href": "00000000-0000-0000-0000-00000012aada",
      "text": "Do Not Evaluate Messages as Code"
    },
    {
      "href": "00000000-0000-0000-0000-00000010eb47",
      "text": "Use element.textContent to Assign Values to DOM Elements"
    },
    {
      "href": "00000000-0000-0000-0000-00000076ad87",
      "text": "Explicitly State the Expected Origin with postMessage"
    },
    {
      "href": "00000000-0000-0000-0000-0000006ab8ac",
      "text": "Validate Data Received by Event Handlers"
    },
    {
      "href": "00000000-0000-0000-0000-00000085babd",
      "text": "Validate the Origin Attribute Against the FQDN"
    },
    {
      "href": "00000000-0000-0000-0000-000000763637",
      "text": "Check The Origin Attribute of Messages"
    },
    {
      "href": "00000000-0000-0000-0000-0000008e9b8f",
      "text": "Messages Are Not Evaluated as Code"
    },
    {
      "href": "00000000-0000-0000-0000-00000060fefb",
      "text": "Element.textContent Is Used to Assign Values to DOM Elements"
    },
    {
      "href": "00000000-0000-0000-0000-0000004a4216",
      "text": "Expected Origin Is Explicitly Stated with postMessage"
    },
    {
      "href": "967c9b95-2319-4741-a6fd-1b4bcdf3b636",
      "text": "Data Received by Event Handlers Is Validated"
    },
    {
      "href": "16628f7f-e17a-4bd1-838a-011736bf0995",
      "text": "The Origin Attribute Is Validated Against the FQDN"
    },
    {
      "href": "f103974e-3a42-4837-b04b-7da7e87c41ec",
      "text": "The Origin Attribute of Messages Is Checked"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> HTML5</li>\n</ul><h2>What to Do</h2><p>Validate data received by event handlers.\n</p><h2>Why</h2><p>Validate data received by event handlers to make it harder for attackers to send malicious data to the application. Even if an attacker is able to send data that appears to come from the trusted server, the attacker will be limited to sending data in valid formats, thus severely limiting his ability to affect the application.\n</p><h2>How</h2><p>To validate data received by event handlers:\n</p><ol>\n<li> <strong>Identify code that receives messages from the server.</strong> Search application code for all references to the <em>addEventListener</em> method. Create a spreadsheet to list all code that receives messages from the server.</li>\n<li> <strong>Identify data formats.</strong> For each piece of code that receives messages, define valid data formats that are expected by the application. For example, a piece of code might be expecting a time, a name, or a social security number. Each of these types of data has a distinct valid format; a time has a different format from a name, and a social security number has a different format altogether. As you add information to the spreadsheet about expected data formats, include examples and be as specific as possible.</li>\n<li> <strong>Define validators.</strong> For each distinct data type, write a validator function that determines whether a piece of data matches the correct format or not. Regular expressions are usually used for this task. Validate data length first, before using regular expressions, to prevent regular expression denial of service (DoS) attacks. The general pattern for validating data formats is: validata data length, validate valid characters, validate patterns of structured data (like social security numbers or dates), and validate ranges of numerical data.</li>\n<li> <strong>Validate data.</strong> Using the spreadsheet as a guide, for each piece of code that receives messages, add code that validates data immediately after it is received, using the validator matching the data type that is expected. Only continue to process the data if it has the correct format.</li>\n</ol><h2>Web Messaging Guidelines</h2><ul><li> <a href=\"00000000-0000-0000-0000-00000012aada\">Do Not Evaluate Messages as Code</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000010eb47\">Use element.textContent to Assign Values to DOM Elements</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000076ad87\">Explicitly State the Expected Origin with postMessage</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000006ab8ac\">Validate Data Received by Event Handlers</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000085babd\">Validate the Origin Attribute Against the FQDN</a></li>\n<li> <a href=\"00000000-0000-0000-0000-000000763637\">Check The Origin Attribute of Messages</a></li>\n</ul><h2>Web Messaging Checklist Items</h2><ul><li> <a href=\"00000000-0000-0000-0000-0000008e9b8f\">Messages Are Not Evaluated as Code</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000060fefb\">Element.textContent Is Used to Assign Values to DOM Elements</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000004a4216\">Expected Origin Is Explicitly Stated with postMessage</a></li>\n<li> <a href=\"967c9b95-2319-4741-a6fd-1b4bcdf3b636\">Data Received by Event Handlers Is Validated</a></li>\n<li> <a href=\"16628f7f-e17a-4bd1-838a-011736bf0995\">The Origin Attribute Is Validated Against the FQDN</a></li>\n<li> <a href=\"f103974e-3a42-4837-b04b-7da7e87c41ec\">The Origin Attribute of Messages Is Checked</a></li>\n</ul>"
}