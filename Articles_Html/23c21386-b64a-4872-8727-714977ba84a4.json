{
  "id": "23c21386-b64a-4872-8727-714977ba84a4",
  "checksum": "e1648c5f2828c31c26ca2b93afb03be24e7c1075",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1"
    ],
    "sensitive": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "title"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "title"
    ],
    "such": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "encryption": [
      "p"
    ],
    "keys": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "private": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "information": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "should": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "maintained": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "for": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "minimum": [
      "p"
    ],
    "amount": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "time": [
      "p",
      "p",
      "p"
    ],
    "required": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "soon": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "no": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "longer": [
      "p",
      "title"
    ],
    "needed": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "purged": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "all": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "traces": [
      "p"
    ],
    "must": [
      "p"
    ],
    "eradicated": [
      "p"
    ],
    "so": [
      "p"
    ],
    "does": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "end": [
      "p"
    ],
    "up": [
      "p"
    ],
    "leaking": [
      "p"
    ],
    "swap": [
      "p",
      "p"
    ],
    "file": [
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "residing": [
      "p"
    ],
    "more": [
      "p"
    ],
    "than": [
      "p"
    ],
    "strictly": [
      "p"
    ],
    "necessary": [
      "p"
    ],
    "at": [
      "p"
    ],
    "high": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "swapped": [
      "p"
    ],
    "out": [
      "p"
    ],
    "disk": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "could": [
      "p"
    ],
    "leave": [
      "p"
    ],
    "fragments": [
      "p"
    ],
    "available": [
      "p"
    ],
    "well": [
      "p"
    ],
    "after": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "p"
    ],
    "has": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "terminated": [
      "p"
    ],
    "may": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "gathered": [
      "p"
    ],
    "by": [
      "p",
      "p"
    ],
    "inspecting": [
      "p"
    ],
    "contents": [
      "p"
    ],
    "temporary": [
      "p"
    ],
    "files": [
      "p"
    ],
    "when": [
      "h1",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "if": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "your": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "handles": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "how": [
      "h1"
    ],
    "can": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "p",
      "li",
      "p"
    ],
    "cleared": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "overwriting": [
      "p"
    ],
    "where": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "was": [
      "p"
    ],
    "stored": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "deallocating": [
      "p"
    ],
    "sufficient": [
      "p"
    ],
    "since": [
      "p",
      "p"
    ],
    "net": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "garbage": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "collector": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "gives": [
      "p"
    ],
    "guarantee": [
      "p",
      "p"
    ],
    "deallocated": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "will": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "collected": [
      "p"
    ],
    "reused": [
      "p"
    ],
    "aware": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "any": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "you": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "assign": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "new": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "buffer": [
      "p"
    ],
    "pass": [
      "p",
      "pre",
      "pre"
    ],
    "parameter": [
      "p"
    ],
    "being": [
      "p"
    ],
    "copied": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "now": [
      "p"
    ],
    "location": [
      "p"
    ],
    "clearing": [
      "p"
    ],
    "ensure": [
      "p"
    ],
    "clear": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "title"
    ],
    "every": [
      "p"
    ],
    "instance": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "keep": [
      "p"
    ],
    "mind": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "considerations": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "passwords": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "kept": [
      "ol",
      "li",
      "p"
    ],
    "secret": [
      "ol",
      "li",
      "p"
    ],
    "disclosed": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "authorized": [
      "ol",
      "li",
      "p"
    ],
    "parties": [
      "ol",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "li",
      "p"
    ],
    "examples": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "but": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "limited": [
      "ol",
      "li",
      "p"
    ],
    "names": [
      "ol",
      "li",
      "p"
    ],
    "customers": [
      "ol",
      "li",
      "p"
    ],
    "government": [
      "ol",
      "li",
      "p"
    ],
    "issued": [
      "ol",
      "li",
      "p"
    ],
    "id": [
      "ol",
      "li",
      "p"
    ],
    "numbers": [
      "ol",
      "li",
      "p"
    ],
    "credit": [
      "ol",
      "li",
      "p"
    ],
    "card": [
      "ol",
      "li",
      "p"
    ],
    "other": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "financial": [
      "ol",
      "li",
      "p"
    ],
    "some": [
      "ol",
      "li",
      "p"
    ],
    "industries": [
      "ol",
      "li",
      "p"
    ],
    "health": [
      "ol",
      "li",
      "p"
    ],
    "care": [
      "ol",
      "li",
      "p"
    ],
    "banking": [
      "ol",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "li",
      "p"
    ],
    "regulatory": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "standards": [
      "ol",
      "li",
      "p"
    ],
    "define": [
      "ol",
      "li",
      "p"
    ],
    "use": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "requirements": [
      "ol",
      "li",
      "p"
    ],
    "they": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "apply": [
      "ol",
      "li",
      "p"
    ],
    "defined": [
      "ol",
      "li",
      "p"
    ],
    "follows": [
      "ol",
      "li",
      "p"
    ],
    "either": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "contains": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "personally": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "identifiable": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "used": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "title"
    ],
    "derive": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "shared": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "with": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "others": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "user": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "provides": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p"
    ],
    "would": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "want": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "users": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "comes": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "an": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p"
    ],
    "external": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "trusted": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "source": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "designed": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "locate": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "segments": [
      "ol",
      "li",
      "p"
    ],
    "both": [
      "ol",
      "li",
      "p"
    ],
    "functions": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "members": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "li",
      "p"
    ],
    "these": [
      "ol",
      "li",
      "p"
    ],
    "structures": [
      "ol",
      "li",
      "p"
    ],
    "scattered": [
      "ol",
      "li",
      "p"
    ],
    "throughout": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "centralize": [
      "ol",
      "li",
      "p"
    ],
    "store": [
      "ol",
      "li",
      "p",
      "strong",
      "p"
    ],
    "mutable": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "objects": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p"
    ],
    "allow": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "them": [
      "ol",
      "li",
      "p"
    ],
    "overwritten": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "especially": [
      "ol",
      "li",
      "p"
    ],
    "useful": [
      "ol",
      "li",
      "p"
    ],
    "through": [
      "ol",
      "li",
      "p"
    ],
    "therefore": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "there": [
      "ol",
      "li",
      "p"
    ],
    "certainty": [
      "ol",
      "li",
      "p"
    ],
    "current": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "process": [
      "ol",
      "li",
      "p"
    ],
    "space": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "character": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "arrays": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "i.e.": [
      "ol",
      "li",
      "p"
    ],
    "char]).": [
      "ol",
      "li",
      "p"
    ],
    "strings": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "however": [
      "ol",
      "li",
      "p"
    ],
    "once": [
      "ol",
      "li",
      "p"
    ],
    "allocated": [
      "ol",
      "li",
      "p"
    ],
    "their": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "cannot": [
      "ol",
      "li",
      "p"
    ],
    "modified": [
      "ol",
      "li",
      "p"
    ],
    "storing": [
      "ol",
      "li",
      "p"
    ],
    "into": [
      "ol",
      "li",
      "p"
    ],
    "array": [
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "primitive": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "types": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "byte": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "char": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "int": [
      "ol",
      "li",
      "p"
    ],
    "wrapper": [
      "ol",
      "li",
      "p"
    ],
    "classes": [
      "ol",
      "li",
      "p"
    ],
    "int32": [
      "ol",
      "li",
      "p"
    ],
    "forced": [
      "ol",
      "li",
      "p"
    ],
    "calling": [
      "ol",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "takes": [
      "ol",
      "li",
      "p"
    ],
    "string,": [
      "ol",
      "li",
      "p"
    ],
    "try": [
      "ol",
      "li",
      "p"
    ],
    "construct": [
      "ol",
      "li",
      "p"
    ],
    "string": [
      "ol",
      "li",
      "p",
      "p",
      "pre"
    ],
    "just": [
      "ol",
      "li",
      "p"
    ],
    "before": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "li",
      "p"
    ],
    "done": [
      "ol",
      "li",
      "p"
    ],
    "encourage": [
      "ol",
      "li",
      "p"
    ],
    "speedy": [
      "ol",
      "li",
      "p"
    ],
    "collection": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "sub-optimal": [
      "ol",
      "li",
      "p"
    ],
    "lead": [
      "ol",
      "li",
      "p"
    ],
    "security": [
      "ol",
      "li",
      "p"
    ],
    "issues": [
      "ol",
      "li",
      "p"
    ],
    "until": [
      "ol",
      "li",
      "p"
    ],
    "apis": [
      "ol",
      "li",
      "p"
    ],
    "exclusive": [
      "ol",
      "li",
      "p"
    ],
    "securestrings": [
      "ol",
      "li",
      "p"
    ],
    "unavoidable": [
      "ol",
      "li",
      "p"
    ],
    "instances": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "locations": [
      "ol",
      "li",
      "p"
    ],
    "been": [
      "ol",
      "li",
      "p"
    ],
    "losing": [
      "ol",
      "li",
      "p"
    ],
    "pointer": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "result": [
      "ol",
      "li",
      "p"
    ],
    "cleaning": [
      "ol",
      "li",
      "p"
    ],
    "particular": [
      "ol",
      "li",
      "p"
    ],
    "allowing": [
      "ol",
      "li",
      "p"
    ],
    "leak": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "makes": [
      "p",
      "p",
      "p"
    ],
    "password": [
      "p",
      "p",
      "p"
    ],
    "although": [
      "p"
    ],
    "removed": [
      "p"
    ],
    "called": [
      "p"
    ],
    "erased": [
      "p"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "getpassword);...pass": [
      "pre"
    ],
    "nullgc.collect();": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "explicitly": [
      "p"
    ],
    "immutable": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "overwrite": [
      "p"
    ],
    "its": [
      "p"
    ],
    "char]": [
      "pre"
    ],
    "getpassword);...clearpassword(pass);pass": [
      "pre"
    ],
    "null...void": [
      "pre"
    ],
    "clearpasswordchar[]": [
      "pre"
    ],
    "pass{": [
      "pre"
    ],
    "forint": [
      "pre"
    ],
    "i=0": [
      "pre"
    ],
    "ipass.length;": [
      "pre"
    ],
    "i++": [
      "pre"
    ],
    "{": [
      "pre"
    ],
    "passi]": [
      "pre"
    ],
    "'": [
      "pre",
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "Sensitive data, such as encryption keys or private information, should be maintained in memory for the minimum amount of time required. As soon as the data is no longer is needed, it should be purged from memory. All traces of it must be eradicated, so it does not end up leaking to the swap file.",
      "Sensitive data residing in memory for more time than is strictly necessary is at high risk to be swapped out to disk. This could leave fragments of data available well after the application has terminated. Such data may be gathered by inspecting the contents of the disk, temporary files or the swap file.",
      "If your application handles sensitive data.",
      "Sensitive data can be cleared by overwriting the memory where the sensitive data was stored. Deallocating the memory is not sufficient since the .NET garbage collector gives no guarantee as to when the deallocated memory will be collected or reused. Be aware that any time you assign a sensitive data to a new buffer, or pass it as a parameter, the sensitive data is being copied and is now in memory in a new location. When clearing memory, ensure you clear every instance.",
      "Keep in mind the following considerations when handling passwords:",
      "Identify sensitive information. Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:",
      "Identify all sensitive data use. Locate all code segments, both functions and data members, that handle sensitive data. These can be functions and data structures scattered throughout your application. If possible, centralize all code that handles sensitive data.",
      "Store sensitive data in mutable objects. Mutable objects allow the data in them to be overwritten. This is especially useful in .NET as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the sensitive data will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). .NET strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing sensitive data into an array, make sure that you use arrays of primitive data types such as byte, char, and int, but not arrays of the wrapper classes that .NET provides for primitive types such as Byte, Char or Int32. If you are forced to use .NET strings, (for instance, when calling a function which takes a .NET string), try to construct the string just before use and assign a new value to it as soon as you are done to encourage speedy garbage collection; this is sub-optimal and may lead to security issues, but until the .NET APIs allow for the exclusive use of mutable objects or SecureStrings, it may be unavoidable.",
      "Clear all sensitive data instances. Make sure that all memory locations where sensitive data has been stored are cleared or overwritten after their use. Losing a pointer to a sensitive data instance can result in not cleaning that particular memory and allowing the sensitive data to leak.",
      "The following code makes a use of a password. Although the pointer to the string is removed and garbage collection is called, .NET does not guarantee the data will be erased.",
      "The following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Identify sensitive information. Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:\r\n      \r\n        Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. \r\n        Information that a user provides that they would not want shared with other users of the application. \r\n        Information that comes from an external trusted source that is not designed to be shared with users.\r\n      \r\n    \r\n    \r\n      \r\n        Identify all sensitive data use. Locate all code segments, both functions and data members, that handle sensitive data. These can be functions and data structures scattered throughout your application. If possible, centralize all code that handles sensitive data.\r\n    \r\n    \r\n      \r\n        Store sensitive data in mutable objects. Mutable objects allow the data in them to be overwritten. This is especially useful in .NET as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the sensitive data will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). .NET strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing sensitive data into an array, make sure that you use arrays of primitive data types such as byte, char, and int, but not arrays of the wrapper classes that .NET provides for primitive types such as Byte, Char or Int32. If you are forced to use .NET strings, (for instance, when calling a function which takes a .NET string), try to construct the string just before use and assign a new value to it as soon as you are done to encourage speedy garbage collection; this is sub-optimal and may lead to security issues, but until the .NET APIs allow for the exclusive use of mutable objects or SecureStrings, it may be unavoidable.\r\n    \r\n    \r\n      \r\n        Clear all sensitive data instances. Make sure that all memory locations where sensitive data has been stored are cleared or overwritten after their use. Losing a pointer to a sensitive data instance can result in not cleaning that particular memory and allowing the sensitive data to leak."
    ],
    "li": [
      "Identify sensitive information. Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:\r\n      \r\n        Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. \r\n        Information that a user provides that they would not want shared with other users of the application. \r\n        Information that comes from an external trusted source that is not designed to be shared with users.",
      "Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others.",
      "Information that a user provides that they would not want shared with other users of the application.",
      "Information that comes from an external trusted source that is not designed to be shared with users.",
      "Identify all sensitive data use. Locate all code segments, both functions and data members, that handle sensitive data. These can be functions and data structures scattered throughout your application. If possible, centralize all code that handles sensitive data.",
      "Store sensitive data in mutable objects. Mutable objects allow the data in them to be overwritten. This is especially useful in .NET as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the sensitive data will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). .NET strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing sensitive data into an array, make sure that you use arrays of primitive data types such as byte, char, and int, but not arrays of the wrapper classes that .NET provides for primitive types such as Byte, Char or Int32. If you are forced to use .NET strings, (for instance, when calling a function which takes a .NET string), try to construct the string just before use and assign a new value to it as soon as you are done to encourage speedy garbage collection; this is sub-optimal and may lead to security issues, but until the .NET APIs allow for the exclusive use of mutable objects or SecureStrings, it may be unavoidable.",
      "Clear all sensitive data instances. Make sure that all memory locations where sensitive data has been stored are cleared or overwritten after their use. Losing a pointer to a sensitive data instance can result in not cleaning that particular memory and allowing the sensitive data to leak."
    ],
    "strong": [
      "Identify sensitive information.",
      "Identify all sensitive data use.",
      "Store sensitive data in mutable objects.",
      "Clear all sensitive data instances."
    ],
    "ul": [
      "Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. \r\n        Information that a user provides that they would not want shared with other users of the application. \r\n        Information that comes from an external trusted source that is not designed to be shared with users."
    ],
    "pre": [
      "string pass = GetPassword();...pass = null;GC.Collect();",
      "char[] pass = GetPassword();...ClearPassword(pass);pass = null;...void ClearPassword(char[] pass){      for(int i=0; i<pass.Length; i++)      {            pass[i] = ' ';      }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\r\n  <p>Sensitive data, such as encryption keys or private information, should be maintained in memory for the minimum amount of time required. As soon as the data is no longer is needed, it should be purged from memory. All traces of it must be eradicated, so it does not end up leaking to the swap file.</p>\r\n  <h1>Why</h1>\r\n  <p>Sensitive data residing in memory for more time than is strictly necessary is at high risk to be swapped out to disk. This could leave fragments of data available well after the application has terminated. Such data may be gathered by inspecting the contents of the disk, temporary files or the swap file.</p>\r\n  <h1>When</h1>\r\n  <p>If your application handles sensitive data.</p>\r\n  <h1>How</h1>\r\n  <p>Sensitive data can be cleared by overwriting the memory where the sensitive data was stored. Deallocating the memory is not sufficient since the .NET garbage collector gives no guarantee as to when the deallocated memory will be collected or reused. Be aware that any time you assign a sensitive data to a new buffer, or pass it as a parameter, the sensitive data is being copied and is now in memory in a new location. When clearing memory, ensure you clear every instance.</p>\r\n  <p>Keep in mind the following considerations when handling passwords: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>\r\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\r\n        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sensitive data use. </strong>Locate all code segments, both functions and data members, that handle sensitive data. These can be functions and data structures scattered throughout your application. If possible, centralize all code that handles sensitive data.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Store sensitive data in mutable objects.</strong> Mutable objects allow the data in them to be overwritten. This is especially useful in .NET as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the sensitive data will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). .NET strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing sensitive data into an array, make sure that you use arrays of primitive data types such as byte, char, and int, but not arrays of the wrapper classes that .NET provides for primitive types such as Byte, Char or Int32. If you are forced to use .NET strings, (for instance, when calling a function which takes a .NET string), try to construct the string just before use and assign a new value to it as soon as you are done to encourage speedy garbage collection; this is sub-optimal and may lead to security issues, but until the .NET APIs allow for the exclusive use of mutable objects or SecureStrings, it may be unavoidable.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Clear all sensitive data instances.</strong> Make sure that all memory locations where sensitive data has been stored are cleared or overwritten after their use. Losing a pointer to a sensitive data instance can result in not cleaning that particular memory and allowing the sensitive data to leak.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code makes a use of a password. Although the pointer to the string is removed and garbage collection is called, .NET does not guarantee the data will be erased.</p>\r\n  <pre>string pass = GetPassword();<br />...<br />pass = null;<br />GC.Collect();</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use. </p>\r\n  <pre>char[] pass = GetPassword();<br />...<br />ClearPassword(pass);<br />pass = null;<br />...<br />void ClearPassword(char[] pass)<br />{<br />      for(int i=0; i&lt;pass.Length; i++)<br />      {<br />            pass[i] = ' ';<br />      }<br />}</pre>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}