{
  "id": "c00b9149-1290-4c9e-bcd0-392a9c5a6fb0",
  "checksum": "fc688eabbdb2250ee39b1d2e4d59475191d31555",
  "words": {
    "1": [
      "ul",
      "li",
      "h1",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "b"
    ],
    "2": [
      "ul",
      "li",
      "h1",
      "ol",
      "li"
    ],
    "3": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "4": [
      "ul",
      "li",
      "h1"
    ],
    "404": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "j2ee": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "h2",
      "em",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "path": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "b",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "manipulation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "b",
      "p",
      "p",
      "p",
      "title"
    ],
    "attack": [
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "b",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "submits": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "i",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "alter": [
      "p"
    ],
    "internal": [
      "p",
      "p"
    ],
    "file": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "forcing": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p"
    ],
    "attackers": [
      "p",
      "p",
      "p"
    ],
    "may": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "exploit": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "bug": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "read": [
      "p",
      "p",
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "files": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "configuration": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "another": [
      "p",
      "p"
    ],
    "user’s": [
      "p"
    ],
    "modify": [
      "p"
    ],
    "delete": [
      "p",
      "p"
    ],
    "server-side": [
      "p",
      "p",
      "p",
      "p"
    ],
    "follow": [
      "p",
      "p",
      "p"
    ],
    "these": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p",
      "p",
      "p"
    ],
    "test": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "for": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "bugs": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "h1",
      "p",
      "h1",
      "h1",
      "ol",
      "li",
      "p",
      "p",
      "h1"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "h1",
      "em",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1"
    ],
    "causes": [
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "p"
    ],
    "and": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "start": [
      "ul",
      "li",
      "h1"
    ],
    "testing": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "h1",
      "p",
      "h1",
      "p"
    ],
    "exploring": [
      "ul",
      "li",
      "h1"
    ],
    "execute": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p"
    ],
    "additional": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "first": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "anatomy": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scenario": [
      "p",
      "p",
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "manipulates": [
      "p"
    ],
    "http": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "request": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "if": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "manipulated": [
      "p",
      "p",
      "p"
    ],
    "perform": [
      "p",
      "ol",
      "li"
    ],
    "system": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "operation": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "starts": [
      "p",
      "p"
    ],
    "with": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "discovering": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "invokes": [
      "p",
      "ol",
      "li"
    ],
    "reading": [
      "p",
      "pre"
    ],
    "modifying": [
      "p"
    ],
    "deleting": [
      "p"
    ],
    "emailing": [
      "p"
    ],
    "printing": [
      "p"
    ],
    "comes": [
      "p"
    ],
    "either": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "page": [
      "p",
      "i",
      "ol",
      "li"
    ],
    "client-side": [
      "p",
      "ol",
      "li"
    ],
    "script": [
      "p"
    ],
    "ajax": [
      "p"
    ],
    "contains": [
      "p"
    ],
    "variable": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "url": [
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "parameter": [
      "p",
      "p"
    ],
    "form": [
      "p",
      "p",
      "p",
      "h2",
      "em",
      "ol",
      "li",
      "p"
    ],
    "etc": [
      "p"
    ],
    "determine": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "what": [
      "p",
      "p",
      "p",
      "p"
    ],
    "handle": [
      "p"
    ],
    "but": [
      "p",
      "ol",
      "li"
    ],
    "modifies": [
      "p",
      "ol",
      "li"
    ],
    "attempt": [
      "p"
    ],
    "manipulate": [
      "p",
      "p",
      "p"
    ],
    "successful": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "value": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "provided": [
      "p",
      "p"
    ],
    "access": [
      "p",
      "p"
    ],
    "different": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "most": [
      "p"
    ],
    "cases": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "able": [
      "p"
    ],
    "tell": [
      "p"
    ],
    "shortly": [
      "p"
    ],
    "after": [
      "p"
    ],
    "executing": [
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p"
    ],
    "then": [
      "p"
    ],
    "finds": [
      "ol",
      "li"
    ],
    "at": [
      "ol",
      "li",
      "p"
    ],
    "locates": [
      "ol",
      "li"
    ],
    "in that": [
      "ol",
      "li"
    ],
    "path-determining": [
      "ol",
      "li"
    ],
    "waits": [
      "ol",
      "li"
    ],
    "response": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "verifies": [
      "ol",
      "li"
    ],
    "observing": [
      "ol",
      "li"
    ],
    "server’s": [
      "ol",
      "li"
    ],
    "variants": [
      "h2",
      "em",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "employ": [
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p"
    ],
    "achieve": [
      "p",
      "p"
    ],
    "threats": [
      "p"
    ],
    "example": [
      "p",
      "p"
    ],
    "password": [
      "p"
    ],
    "belonging": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "order": [
      "p"
    ],
    "information": [
      "p",
      "p",
      "p"
    ],
    "disclosure": [
      "p",
      "p",
      "p"
    ],
    "similarly": [
      "p"
    ],
    "force": [
      "p"
    ],
    "needed": [
      "p"
    ],
    "properly": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "service": [
      "p",
      "p",
      "p"
    ],
    "its": [
      "p",
      "p"
    ],
    "users": [
      "p"
    ],
    "thus": [
      "p"
    ],
    "generating": [
      "p"
    ],
    "denial": [
      "p",
      "p"
    ],
    "situation": [
      "p"
    ],
    "before": [
      "p"
    ],
    "practical": [
      "p"
    ],
    "necessary": [
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "p"
    ],
    "exist": [
      "p"
    ],
    "how": [
      "p",
      "p",
      "title"
    ],
    "avoid": [
      "p"
    ],
    "them": [
      "p"
    ],
    "caused": [
      "p"
    ],
    "client-supplied": [
      "p"
    ],
    "build": [
      "p",
      "p"
    ],
    "without": [
      "p",
      "p"
    ],
    "validating": [
      "p",
      "p"
    ],
    "instance": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "below": [
      "p"
    ],
    "gets": [
      "p"
    ],
    "named": [
      "p"
    ],
    "filename": [
      "p",
      "i",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "ol",
      "li"
    ],
    "printwriter": [
      "pre"
    ],
    "out": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "b"
    ],
    "responsegetwriter();string": [
      "pre"
    ],
    "\"/public/user_files/\"": [
      "pre",
      "pre"
    ],
    "+": [
      "pre",
      "pre"
    ],
    "requestgetparameter(\"filename\").tostring();file": [
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "filefilename);filereader": [
      "pre"
    ],
    "fr": [
      "pre"
    ],
    "filereaderfile);bufferedreader": [
      "pre"
    ],
    "br": [
      "pre"
    ],
    "bufferedreaderfr);string": [
      "pre"
    ],
    "line": [
      "pre",
      "pre",
      "pre"
    ],
    "brreadline();while": [
      "pre"
    ],
    "!=": [
      "pre"
    ],
    "null": [
      "pre"
    ],
    "{\tout.println(line);": [
      "pre"
    ],
    "brreadline();}fr.close();out.close();": [
      "pre"
    ],
    "provides": [
      "p",
      "p"
    ],
    "expected": [
      "p",
      "p",
      "p",
      "p"
    ],
    "name": [
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "filetxt,": [
      "p"
    ],
    "returns": [
      "p"
    ],
    "filetxt": [
      "i",
      "strong"
    ],
    "http//example.com.pe/example/getfile?filename=file.txt": [
      "pre"
    ],
    "however": [
      "p"
    ],
    "hoping": [
      "p"
    ],
    "http//example.com.pe/example/getfile?filename=../../private/secret.txt": [
      "pre"
    ],
    "./../private/secret.txt": [
      "strong"
    ],
    "string": [
      "p",
      "pre",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "above": [
      "p",
      "p",
      "p"
    ],
    "go": [
      "p"
    ],
    "up": [
      "p"
    ],
    "two": [
      "p",
      "p"
    ],
    "directories": [
      "p"
    ],
    "navigate": [
      "p",
      "ol",
      "li"
    ],
    "private": [
      "p",
      "i"
    ],
    "folder": [
      "p"
    ],
    "display": [
      "p"
    ],
    "secrettxt.": [
      "p",
      "i"
    ],
    "common": [
      "p",
      "p",
      "p",
      "p"
    ],
    "due": [
      "p",
      "ol",
      "li"
    ],
    "notice": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "because": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "trusts": [
      "p"
    ],
    "client": [
      "p",
      "p"
    ],
    "directly": [
      "p"
    ],
    "copying": [
      "p"
    ],
    "protect": [
      "p"
    ],
    "against": [
      "p",
      "p",
      "p"
    ],
    "must": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p"
    ],
    "specifically": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "check": [
      "p",
      "p",
      "p"
    ],
    "safe": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "determining": [
      "p",
      "p"
    ],
    "developers": [
      "p"
    ],
    "blacklists": [
      "p",
      "p",
      "p"
    ],
    "contain": [
      "p",
      "p"
    ],
    "list": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p"
    ],
    "disallowed": [
      "p"
    ],
    "constructs": [
      "p",
      "p",
      "p"
    ],
    "./": [
      "p",
      "em"
    ],
    "appears": [
      "p"
    ],
    "blacklist": [
      "p"
    ],
    "problem": [
      "p"
    ],
    "account": [
      "p"
    ],
    "100%": [
      "p",
      "p"
    ],
    "effective": [
      "p"
    ],
    "any": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "variant": [
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "accounted": [
      "p"
    ],
    "unnoticed": [
      "p"
    ],
    "recommended": [
      "p"
    ],
    "approach": [
      "p"
    ],
    "defending": [
      "p"
    ],
    "whitelists": [
      "p",
      "p",
      "i"
    ],
    "specify": [
      "p",
      "p",
      "p"
    ],
    "only": [
      "p",
      "p"
    ],
    "disallow": [
      "p",
      "p"
    ],
    "doesn’t": [
      "p",
      "p",
      "p"
    ],
    "match": [
      "p",
      "p",
      "p"
    ],
    "specified": [
      "p"
    ],
    "doing": [
      "p"
    ],
    "need": [
      "p",
      "p"
    ],
    "good": [
      "p"
    ],
    "don’t": [
      "p",
      "p"
    ],
    "have": [
      "p"
    ],
    "worry": [
      "p"
    ],
    "about": [
      "p"
    ],
    "accounting": [
      "p"
    ],
    "way": [
      "p"
    ],
    "implementing": [
      "p"
    ],
    "whitelist": [
      "p",
      "p"
    ],
    "using": [
      "p",
      "p"
    ],
    "regular": [
      "p",
      "p"
    ],
    "expression": [
      "p",
      "p"
    ],
    "requestgetparameter(\"filename\").tostring();string": [
      "pre"
    ],
    "safeconstruct": [
      "pre"
    ],
    "\"^a-za-z]{4,8}\\.txt$\";pattern": [
      "pre"
    ],
    "regexpattern": [
      "pre"
    ],
    "patterncompile(safeconstruct);matcher": [
      "pre"
    ],
    "regexmatcher": [
      "pre"
    ],
    "regexpatternmatcher(input);": [
      "pre"
    ],
    "!regexmatcher.find()){\tout.println(\"invalid": [
      "pre"
    ],
    "input\";}else": [
      "pre"
    ],
    "{\tstring": [
      "pre"
    ],
    "filefilename);\t \t/*": [
      "pre"
    ],
    "continue": [
      "pre"
    ],
    "*/}": [
      "pre"
    ],
    "consist": [
      "p"
    ],
    "four": [
      "p"
    ],
    "eight": [
      "p"
    ],
    "consecutive": [
      "p"
    ],
    "upper-": [
      "p"
    ],
    "lower-case": [
      "p"
    ],
    "letters": [
      "p"
    ],
    "followed": [
      "p"
    ],
    "extension": [
      "p"
    ],
    "txt.": [
      "p"
    ],
    "results": [
      "p",
      "p",
      "p"
    ],
    "giving": [
      "p"
    ],
    "invalid": [
      "p",
      "i"
    ],
    "error": [
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p"
    ],
    "txt": [
      "em"
    ],
    "now": [
      "p"
    ],
    "you’ve": [
      "p"
    ],
    "learned": [
      "p"
    ],
    "well": [
      "p",
      "p"
    ],
    "basic": [
      "p",
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "success": [
      "p"
    ],
    "depends": [
      "p"
    ],
    "ability": [
      "p"
    ],
    "variables": [
      "p",
      "p",
      "h2",
      "em",
      "h2",
      "em"
    ],
    "commonly": [
      "p",
      "p",
      "p"
    ],
    "so": [
      "p"
    ],
    "through": [
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p"
    ],
    "points": [
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p"
    ],
    "internet": [
      "ol",
      "li"
    ],
    "browser": [
      "ol",
      "li"
    ],
    "note": [
      "ol",
      "li"
    ],
    "http//example.com.pe/example.jsp?page=index.html.": [
      "ol",
      "li"
    ],
    "locate": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "case": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "page.": [
      "ol",
      "li"
    ],
    "replace": [
      "ol",
      "li",
      "p"
    ],
    "found": [
      "ol",
      "li"
    ],
    "see": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "table": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "b"
    ],
    "below.": [
      "ol",
      "li"
    ],
    "http//example.com.pe/example.jsp?page=../../../etc/passwd.": [
      "ol",
      "li"
    ],
    "submit": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "wait": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "http//example.com.pe/example.jsp?page=index.html": [
      "i"
    ],
    "page=indexhtml": [
      "b"
    ],
    "http//example.com.pe/example.jsp?page=../../../etc/passwd": [
      "i"
    ],
    "give": [
      "p",
      "p"
    ],
    "message": [
      "p",
      "p",
      "p"
    ],
    "indicating": [
      "p",
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "been": [
      "p",
      "p"
    ],
    "supplied": [
      "p",
      "p"
    ],
    "attacker-specified": [
      "p",
      "p"
    ],
    "forms": [
      "p",
      "p"
    ],
    "containing": [
      "ol",
      "li"
    ],
    "prompts": [
      "ol",
      "li"
    ],
    "field": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "enter": [
      "ol",
      "li"
    ],
    "indicates": [
      "ol",
      "li",
      "p"
    ],
    "below.here,": [
      "ol",
      "li"
    ],
    "important": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "disable": [
      "ol",
      "li"
    ],
    "checks": [
      "ol",
      "li"
    ],
    "deny": [
      "ol",
      "li"
    ],
    "entering": [
      "ol",
      "li"
    ],
    "illegal": [
      "ol",
      "li"
    ],
    "characters": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "same": [
      "p"
    ],
    "previous": [
      "p"
    ],
    "strings": [
      "h2",
      "em",
      "p",
      "p",
      "b"
    ],
    "following": [
      "p"
    ],
    "dots,": [
      "p"
    ],
    "slashes": [
      "p",
      "p"
    ],
    "backslashes": [
      "p"
    ],
    "unix-": [
      "p"
    ],
    "windows-related": [
      "p"
    ],
    "paths": [
      "p"
    ],
    "encodings": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "relative": [
      "p"
    ],
    "location": [
      "p"
    ],
    "number": [
      "p"
    ],
    "“./”": [
      "p"
    ],
    "“.\\”": [
      "p"
    ],
    "clauses": [
      "p"
    ],
    "increased": [
      "p"
    ],
    "decreased": [
      "p"
    ],
    "realize": [
      "p"
    ],
    "./etc/passwd..\\boot.ini../boot.inifolder_name/file_name..\\..\\folder_name\\file_name../../folder_name/file_namec:\\boot.ini%2e%2e\\%2e%2e\\..%2f..%2f%2e%2e%2f%2e%2e%2ffolder_name%2ffile_name..%2f..%2ffolder_name%2ffile_name..%c0%af..%c0%affolder_name..%c0%affile_name": [
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "-": [
      "p",
      "b"
    ],
    "look": [
      "h2",
      "em",
      "p",
      "p"
    ],
    "messages": [
      "h2",
      "em",
      "p",
      "p"
    ],
    "indicate": [
      "h2",
      "em",
      "p",
      "p"
    ],
    "operations": [
      "h2",
      "em"
    ],
    "while": [
      "p",
      "p",
      "p"
    ],
    "mentioned": [
      "p"
    ],
    "types": [
      "p"
    ],
    "“invalid": [
      "p"
    ],
    "input”": [
      "p"
    ],
    "“incorrect": [
      "p"
    ],
    "format”": [
      "p"
    ],
    "“file": [
      "p"
    ],
    "found”": [
      "p"
    ],
    "errors": [
      "p"
    ],
    "find": [
      "p"
    ],
    "finally": [
      "p",
      "p"
    ],
    "double": [
      "p",
      "h1",
      "em",
      "p",
      "p",
      "pre",
      "p"
    ],
    "encoding": [
      "p",
      "h1",
      "em",
      "p",
      "p",
      "pre",
      "p"
    ],
    "cover": [
      "p",
      "h1",
      "em",
      "p"
    ],
    "application’s": [
      "p",
      "p"
    ],
    "since": [
      "p"
    ],
    "requires": [
      "p"
    ],
    "passing": [
      "p"
    ],
    "proper": [
      "p",
      "p"
    ],
    "coverage": [
      "p",
      "p"
    ],
    "add": [
      "p",
      "p"
    ],
    "consists": [
      "p"
    ],
    "re-encoding": [
      "p"
    ],
    "percent": [
      "p"
    ],
    "sign": [
      "p"
    ],
    "%)": [
      "p"
    ],
    "percent-encoded": [
      "p",
      "p"
    ],
    "values": [
      "p"
    ],
    "equivalent": [
      "p"
    ],
    "%25).": [
      "p"
    ],
    "translating": [
      "p"
    ],
    "into": [
      "p"
    ],
    "second": [
      "p"
    ],
    "one": [
      "p"
    ],
    "%": [
      "em"
    ],
    "%25": [
      "em"
    ],
    "./../": [
      "pre"
    ],
    "no": [
      "pre"
    ],
    "encoding\r\n..%2f..%2f": [
      "pre"
    ],
    "single": [
      "pre"
    ],
    "encoding\r\n..%252f..%252f": [
      "pre"
    ],
    "make": [
      "p",
      "p"
    ],
    "sure": [
      "p",
      "p",
      "p"
    ],
    "double-encoded": [
      "p"
    ],
    "every": [
      "p",
      "p"
    ],
    "you": [
      "p",
      "p"
    ],
    "even": [
      "p"
    ],
    "though": [
      "p"
    ],
    "happen": [
      "p"
    ],
    "also": [
      "p"
    ],
    "take": [
      "p"
    ],
    "cookies": [
      "p"
    ],
    "methods": [
      "p"
    ],
    "extended": [
      "p"
    ],
    "frameworks": [
      "p"
    ],
    "flash/flex,": [
      "p"
    ],
    "third-party": [
      "p"
    ],
    "apis": [
      "p"
    ],
    "facebook": [
      "p"
    ],
    "parameters": [
      "p"
    ],
    "place": [
      "p"
    ],
    "where": [
      "p"
    ],
    "taken": [
      "p"
    ],
    "conclusions": [
      "h1"
    ],
    "allow": [
      "p",
      "p"
    ],
    "they can": [
      "p"
    ],
    "be successful": [
      "p"
    ],
    "when": [
      "p"
    ],
    "manipulating": [
      "p"
    ],
    "dots": [
      "p"
    ],
    "processed": [
      "p"
    ],
    "identify": [
      "p"
    ],
    "sent": [
      "p"
    ],
    "looking": [
      "p"
    ],
    "being": [
      "p"
    ],
    "java": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Start Testing and Exploring",
      "Step 4: Execute Additional Testing",
      "Cover double encoding scenarios",
      "Conclusions"
    ],
    "ul": [
      "J2EE applications",
      "Step 1: Understand attack scenarios \r\n    Step 2: Analyze causes and countermeasures \r\n    Step 3: Start testing and exploring \r\n    Step 4: Execute additional testing"
    ],
    "li": [
      "J2EE applications",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Execute additional testing",
      "The attacker finds an HTTP request that invokes a file system operation at the server.",
      "The attacker locates a variable in that HTTP request that is used to determine the path for a file system operation.",
      "The attacker submits the request but modifies the path-determining variable and waits for a server response.",
      "The attacker verifies if the attack is successful by observing the server’s response.",
      "Use an Internet browser to perform a file system operation. Note the URL used, such as: http://example.com.pe/example.jsp?page=index.html.",
      "Locate the URL variable used to by the application to determine the file name (in this case it is page).",
      "Replace the value of the variable found in Step 2 with an attack string (see Table 1 below). For instance: http://example.com.pe/example.jsp?page=../../../etc/passwd.",
      "Submit the request to the application and wait for a response.",
      "Navigate to a page containing a Web form that prompts for a file name.",
      "Locate the variable (input field) used by the application to determine the file name.",
      "Enter the attack string in the field that indicates the filename (see Table 1 below).Here, it is important to disable any client-side checks that may deny entering an attack string due to illegal characters.",
      "Submit the request to the application and wait for a response."
    ],
    "p": [
      "In a path manipulation attack, an attacker submits input to alter an internal file path used by the application, forcing the application to use a malicious path. Attackers may exploit this bug to read sensitive files on the server, such as configuration files or another user’s files, or to modify or delete server-side files.",
      "Follow these steps to test for path manipulation bugs in J2EE:",
      "The first step in testing for path manipulation bugs is to understand the anatomy of an attack scenario.",
      "To exploit this vulnerability, the attacker manipulates a file path in an HTTP request. If the application is vulnerable, it uses the manipulated file path to perform a file system operation.",
      "The attack starts with the attacker discovering an HTTP request that invokes a server-side file system operation such as reading, modifying, deleting, emailing, or printing a file. This request comes either from a Web page or from a client-side script (such as in AJAX applications) and contains a variable (URL parameter, Web form input, etc) that the server uses to determine what file to handle.",
      "To execute the attack, the attacker submits the request but modifies this variable in an attempt to manipulate a server-side file. If the attack is successful, the value provided by the attacker causes the server to access a file in a different path. In most cases, the attacker will be able to tell if the attack is successful shortly after executing it.",
      "The steps are then:",
      "Attackers can employ path manipulation attacks to achieve different threats. For example, an attacker can manipulate a path to read server configuration and password files or to read files belonging to another user in order to execute an information disclosure attack on the application. Similarly, an attacker can manipulate a path to force the J2EE application to delete a file needed to properly service its users, thus generating a denial of service situation.",
      "Before executing practical test cases, it is necessary to understand why these bugs exist and how to avoid them.",
      "Path manipulation bugs are caused by J2EE applications that use client-supplied input to build a file path without properly validating the input. For instance, the code below gets an input value from the user in a URL parameter named filename:",
      "",
      "If the user provides an expected file name such as file.txt, the application returns an expected user file:",
      "",
      "However, in a path manipulation scenario, an attacker provides a malicious value for the variable, hoping that the application uses it to determine a different file path:",
      "",
      "The string above causes the application to go up two directories, navigate to the private folder, and display secret.txt. The example above is a common scenario in information disclosure due to path manipulation. Notice that the attack is possible because the code shown trusts the filename provided by the client; it starts by directly copying the input to the internal variable used to determine the filename without properly validating it.",
      "To protect against this bug, J2EE applications must properly validate user input. Specifically, they must check if the input is safe to use in determining a file path. Developers can use blacklists that contain a list of all disallowed filename constructs such as ../ and check if the user input appears in the blacklist. The problem with blacklists is that blacklists must account for 100% of attack variants to be effective. Any variant of an attack that is not accounted for will execute unnoticed.",
      "As such, the recommended approach for defending against this bug is to use whitelists. Whitelists specify only safe constructs, and disallow any user input that doesn’t match any of the specified safe constructs. By doing this, they only need to specify what is good and don’t have to worry about accounting 100% of all attack variants. A common way of implementing a whitelist is by using a regular expression to specify what is safe and to disallow all input that doesn’t match the regular expression:",
      "The input must consist of four to eight consecutive upper- or lower-case letters followed by the extension .txt. Any input that doesn’t match this form results in the application giving an invalid input error.",
      "Now that you’ve learned the common attack scenarios as well as the causes and countermeasures for path manipulation bugs, it is necessary to execute basic test cases to check if your application is vulnerable.",
      "Success in testing for path manipulation bugs depends on your ability to determine what variables the application uses to build a file path. Applications commonly use URL and Web form variables, so it is necessary to understand how to test through these two input points.",
      "Follow these steps to test for path manipulation in an URL variable:",
      "Expected results: The application must give an error message indicating that the file path has been manipulated. The application is vulnerable if it uses the path supplied in Step 3 to determine the response, and the attacker-specified file is used in the response.",
      "Follow these steps to test for path manipulation through Web forms:",
      "Expected results are the same as the previous test case: The application must give an error message indicating that the file path has been manipulated. The application is vulnerable if it uses the path supplied in Step 3 to determine the response, and the attacker-specified file is used in the response.",
      "The following attack strings contain path manipulation characters (dots, slashes, and backslashes) and common UNIX- and Windows-related file paths in different encodings. Depending on the relative location of the Web application on the server, the number of “../” or “..\\” clauses may need to be increased or decreased to realize an attack:",
      "Table 1 - Path Manipulation Attack Strings",
      "While executing the basic test cases mentioned above, it is important to look for different types of error messages. For instance, “invalid input” or “incorrect format” error messages indicate that an application is safe, while “file not found” or HTTP 404 errors indicate that the application may be using the attack string to find a file in a different path, and may be vulnerable to this bug.",
      "Finally, it is important to execute additional testing for double encoding scenarios as well as to cover all of the application’s input points.",
      "Since this attack requires passing malicious input to a Web application, it is necessary for proper coverage to add double encoding test cases. Double encoding consists of re-encoding the percent sign (%) in percent-encoded values with its percent-encoded equivalent (%25). For instance, translating the first URL into the second one:",
      "Make sure to add a double-encoded test case for every attack string that you use.",
      "Even though path manipulation attacks commonly happen through the URL or Web forms, it is important to look at additional application input points. Web applications can also take input from client cookies, Web methods, extended frameworks (such as Flash/Flex), and third-party APIs (such as Facebook) parameters. Make sure to test for path manipulation in every place where input is taken.",
      "Path manipulation bugs allow attackers to access a server-side file to execute attacks such as information disclosure and denial of service. They can be successful when applications don’t properly validate user input against a whitelist and allow path manipulating characters such as dots and slashes to be processed by the application. To test for this vulnerability, you must identify the file path determining variable, commonly sent in the URL or in a Web form, and replace it with an attack string while looking for an error message that indicates that the attack string is being used. Finally, to achieve proper test coverage of this bug, be sure to cover double encoding scenarios and test through all of the application’s input points."
    ],
    "ol": [
      "The attacker finds an HTTP request that invokes a file system operation at the server. \r\n    The attacker locates a variable in that HTTP request that is used to determine the path for a file system operation. \r\n    The attacker submits the request but modifies the path-determining variable and waits for a server response. \r\n    The attacker verifies if the attack is successful by observing the server’s response.",
      "Use an Internet browser to perform a file system operation. Note the URL used, such as: http://example.com.pe/example.jsp?page=index.html. \r\n    Locate the URL variable used to by the application to determine the file name (in this case it is page). \r\n    Replace the value of the variable found in Step 2 with an attack string (see Table 1 below). For instance: http://example.com.pe/example.jsp?page=../../../etc/passwd. \r\n    Submit the request to the application and wait for a response.",
      "Navigate to a page containing a Web form that prompts for a file name. \r\n    Locate the variable (input field) used by the application to determine the file name. \r\n    Enter the attack string in the field that indicates the filename (see Table 1 below).Here, it is important to disable any client-side checks that may deny entering an attack string due to illegal characters.\r\n    Submit the request to the application and wait for a response."
    ],
    "h2": [
      "Attack Variants",
      "Test for path manipulation in URL variables",
      "Test for path manipulation in Web form variables",
      "Attack strings",
      "Look for error messages that indicate file operations",
      "Test through all input points"
    ],
    "em": [
      "Attack Variants",
      "../",
      ".txt",
      "Test for path manipulation in URL variables",
      "Test for path manipulation in Web form variables",
      "Attack strings",
      "Look for error messages that indicate file operations",
      "Cover double encoding scenarios",
      "%",
      "%25",
      "",
      "Test through all input points"
    ],
    "i": [
      "filename",
      "file.txt",
      "private",
      "secret.txt.",
      "whitelists.",
      "invalid input",
      "http://example.com.pe/example.jsp?page=index.html",
      "page",
      "http://example.com.pe/example.jsp?page=../../../etc/passwd",
      ""
    ],
    "pre": [
      "PrintWriter out = response.getWriter();String filename = \"/public/user_files/\" + request.getParameter(\"filename\").toString();File file = new File(filename);FileReader fr = new FileReader(file);BufferedReader br = new BufferedReader(fr);String line = br.readLine();while ( line != null ){\tout.println(line);   \tline = br.readLine();}fr.close();out.close();",
      "http://example.com.pe/example/getFile?filename=file.txt",
      "http://example.com.pe/example/getFile?filename=../../private/secret.txt",
      "String input = request.getParameter(\"filename\").toString();String safeConstruct = \"^[a-zA-Z]{4,8}\\.txt$\";Pattern regexPattern = Pattern.compile(safeConstruct);Matcher regexMatcher = regexPattern.matcher(input);      if (!regexMatcher.find()){\tout.println(\"invalid input\");}else  {\tString filename = \"/public/user_files/\" + input;  \tFile file = new File(filename);\t \t/* continue reading file */}",
      "../../  (no encoding)\r\n..%2f..%2f     (single encoding)\r\n..%252f..%252f (double encoding)"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "strong": [
      "file.txt",
      "../../private/secret.txt"
    ],
    "b": [
      "",
      "",
      "page=index.html",
      "=",
      "Table 1 - Path Manipulation Attack Strings",
      ""
    ],
    "table": [
      "../etc/passwd..\\boot.ini../boot.inifolder_name/file_name..\\..\\folder_name\\file_name../../folder_name/file_nameC:\\boot.ini%2e%2e\\%2e%2e\\..%2f..%2f%2e%2e%2f%2e%2e%2ffolder_name%2ffile_name..%2f..%2ffolder_name%2ffile_name..%c0%af..%c0%affolder_name..%c0%affile_name"
    ],
    "tbody": [
      "../etc/passwd..\\boot.ini../boot.inifolder_name/file_name..\\..\\folder_name\\file_name../../folder_name/file_nameC:\\boot.ini%2e%2e\\%2e%2e\\..%2f..%2f%2e%2e%2f%2e%2e%2ffolder_name%2ffile_name..%2f..%2ffolder_name%2ffile_name..%c0%af..%c0%affolder_name..%c0%affile_name"
    ],
    "tr": [
      "../etc/passwd..\\boot.ini../boot.inifolder_name/file_name..\\..\\folder_name\\file_name../../folder_name/file_nameC:\\boot.ini%2e%2e\\%2e%2e\\..%2f..%2f%2e%2e%2f%2e%2e%2ffolder_name%2ffile_name..%2f..%2ffolder_name%2ffile_name..%c0%af..%c0%affolder_name..%c0%affile_name"
    ],
    "td": [
      "../etc/passwd..\\boot.ini../boot.inifolder_name/file_name..\\..\\folder_name\\file_name../../folder_name/file_nameC:\\boot.ini%2e%2e\\%2e%2e\\..%2f..%2f%2e%2e%2f%2e%2e%2ffolder_name%2ffile_name..%2f..%2ffolder_name%2ffile_name..%c0%af..%c0%affolder_name..%c0%affile_name"
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>J2EE applications</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>In a path manipulation attack, an attacker submits input to alter an internal file path used by the application, forcing the application to use a malicious path. Attackers may exploit this bug to read sensitive files on the server, such as configuration files or another user’s files, or to modify or delete server-side files. </p>\r\n  <p>Follow these steps to test for path manipulation bugs in J2EE:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Start testing and exploring </li>\r\n    <li>Step 4: Execute additional testing</li>\r\n  </ul>\r\n  <h1>Step 1: Understand Attack Scenarios</h1>\r\n  <p>The first step in testing for path manipulation bugs is to understand the anatomy of an attack scenario. </p>\r\n  <p>To exploit this vulnerability, the attacker manipulates a file path in an HTTP request. If the application is vulnerable, it uses the manipulated file path to perform a file system operation.</p>\r\n  <p>The attack starts with the attacker discovering an HTTP request that invokes a server-side file system operation such as reading, modifying, deleting, emailing, or printing a file. This request comes either from a Web page or from a client-side script (such as in AJAX applications) and contains a variable (URL parameter, Web form input, etc) that the server uses to determine what file to handle.</p>\r\n  <p>To execute the attack, the attacker submits the request but modifies this variable in an attempt to manipulate a server-side file. If the attack is successful, the value provided by the attacker causes the server to access a file in a different path. In most cases, the attacker will be able to tell if the attack is successful shortly after executing it.</p>\r\n  <p>The steps are then:</p>\r\n  <ol>\r\n    <li>The attacker finds an HTTP request that invokes a file system operation at the server. </li>\r\n    <li>The attacker locates a variable in&nbsp;that HTTP request that is used to determine the path for a file system operation. </li>\r\n    <li>The attacker submits the request but modifies the path-determining variable and waits for a server response. </li>\r\n    <li>The attacker verifies if the attack is successful by observing the server’s response. </li>\r\n  </ol>\r\n  <h2>\r\n    <em>\r\n      Attack Variants</em>\r\n  </h2>\r\n  <p>Attackers can employ path manipulation attacks to achieve different threats. For example, an attacker can manipulate a path to read server configuration and password files or to read files belonging to another user in order to execute an information disclosure attack on the application. Similarly, an attacker can manipulate a path to force the J2EE application to delete a file needed to properly service its users, thus generating a denial of service situation.</p>\r\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\r\n  <p>Before executing practical test cases, it is necessary to understand why these bugs exist and how to avoid them.</p>\r\n  <p>Path manipulation bugs are caused by J2EE applications that use client-supplied input to build a file path without properly validating the input. For instance, the code below gets an input value from the user in a URL parameter named <i>filename</i>:</p>\r\n  <pre>PrintWriter out = response.getWriter();<br />String filename = \"/public/user_files/\" + request.getParameter(\"filename\").toString();<br />File file = new File(filename);<br />FileReader fr = new FileReader(file);<br />BufferedReader br = new BufferedReader(fr);<br />String line = br.readLine();<br />while ( line != null )<br />{<br />\tout.println(line);<br />&nbsp;&nbsp; \tline = br.readLine();<br />}<br />fr.close();<br />out.close();</pre>\r\n  <p />\r\n  <p>If the user provides an expected file name such as <i>file.txt</i>, the application returns an expected user file:</p>\r\n  <pre>http://example.com.pe/example/getFile?filename=<strong>file.txt</strong></pre>\r\n  <p>\r\n    <b>\r\n    </b>\r\n  </p>\r\n  <p>However, in a path manipulation scenario, an attacker provides a malicious value for the variable, hoping that the application uses it to determine a different file path:</p>\r\n  <pre>http://example.com.pe/example/getFile?filename=<strong>../../private/secret.txt</strong></pre>\r\n  <p>\r\n    <b>\r\n    </b>\r\n  </p>\r\n  <p>The string above causes the application to go up two directories, navigate to the <i>private</i> folder, and display <i>secret.txt.</i> The example above is a common scenario in information disclosure due to path manipulation. Notice that the attack is possible because the code shown trusts the filename provided by the client; it starts by directly copying the input to the internal variable used to determine the filename without properly validating it.</p>\r\n  <p>To protect against this bug, J2EE applications must properly validate user input. Specifically, they must check if the input is safe to use in determining a file path. Developers can use blacklists that contain a list of all disallowed filename constructs such as <em>../</em> and check if the user input appears in the blacklist. The problem with blacklists is that blacklists must account for 100% of attack variants to be effective. Any variant of an attack that is not accounted for will execute unnoticed.</p>\r\n  <p>As such, the recommended approach for defending against this bug is to use <i>whitelists. </i>Whitelists specify only safe constructs, and disallow any user input that doesn’t match any of the specified safe constructs. By doing this, they only need to specify what is good and don’t have to worry about accounting 100% of all attack variants. A common way of implementing a whitelist is by using a regular expression to specify what is safe and to disallow all input that doesn’t match the regular expression:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n  <pre>String input = request.getParameter(\"filename\").toString();<br />String safeConstruct = \"^[a-zA-Z]{4,8}\\.txt$\";<br />Pattern regexPattern = Pattern.compile(safeConstruct);<br />Matcher regexMatcher = regexPattern.matcher(input);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />if (!regexMatcher.find())<br />{<br />\tout.println(\"invalid input\");<br />}<br />else&nbsp; <br />{<br />\tString filename = \"/public/user_files/\" + input; <br />&nbsp;\tFile file = new File(filename);<br />\t&nbsp;<br />\t/* continue reading file */<br />}</pre>\r\n  <p>The input must consist of four to eight consecutive upper- or lower-case letters followed by the extension <em>.txt</em>. Any input that doesn’t match this form results in the application giving an <i>invalid input</i> error.</p>\r\n  <h1>Step 3: Start Testing and Exploring</h1>\r\n  <p>Now that you’ve learned the common attack scenarios as well as the causes and countermeasures for path manipulation bugs, it is necessary to execute basic test cases to check if your application is vulnerable.</p>\r\n  <p>Success in testing for path manipulation bugs depends on your ability to determine what variables the application uses to build a file path. Applications commonly use URL and Web form variables, so it is necessary to understand how to test through these two input points. </p>\r\n  <h2>\r\n    <em>Test for path manipulation in URL variables</em>\r\n  </h2>\r\n  <p>Follow these steps to test for path manipulation in an URL variable:</p>\r\n  <ol>\r\n    <li>Use an Internet browser to perform a file system operation. Note the URL used, such as: <i>http://example.com.pe/example.jsp?<b>page=index.html</b></i>. </li>\r\n    <li>Locate the URL variable used to by the application to determine the file name (in this case it is <i>page</i>). </li>\r\n    <li>Replace the value of the variable found in Step 2 with an attack string (see Table 1 below). For instance: <i>http://example.com.pe/example.jsp?page<b>=</b>../../../etc/passwd</i>. </li>\r\n    <li>Submit the request to the application and wait for a response.</li>\r\n  </ol>\r\n  <p>Expected results: The application must give an error message indicating that the file path has been manipulated. The application is vulnerable if it uses the path supplied in Step 3 to determine the response, and the attacker-specified file is used in the response.</p>\r\n  <h2>\r\n    <em>Test for path manipulation in Web form variables</em>\r\n  </h2>\r\n  <p>Follow these steps to test for path manipulation through Web forms:</p>\r\n  <ol>\r\n    <li>Navigate to a page containing a Web form that prompts for a file name. </li>\r\n    <li>Locate the variable (input field) used by the application to determine the file name. </li>\r\n    <li>Enter the attack string in the field that indicates the filename (see Table 1 below).<br />Here, it is important to disable any client-side checks that may deny entering an attack string due to illegal characters.<br /></li>\r\n    <li>Submit the request to the application and wait for a response.</li>\r\n  </ol>\r\n  <p>Expected results are the same as the previous test case: The application must give an error message indicating that the file path has been manipulated. The application is vulnerable if it uses the path supplied in Step 3 to determine the response, and the attacker-specified file is used in the response.</p>\r\n  <h2>\r\n    <em>Attack strings</em>\r\n  </h2>\r\n  <p>The following attack strings contain path manipulation characters (dots, slashes, and backslashes) and common UNIX- and Windows-related file paths in different encodings. Depending on the relative location of the Web application on the server, the number of “../” or “..\\” clauses may need to be increased or decreased to realize an attack:</p>\r\n  <table>\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          ../etc/passwd<br />..\\boot.ini<br />../boot.ini<br />folder_name/file_name<br />..\\..\\folder_name\\file_name<br />../../folder_name/file_name<br />C:\\boot.ini<br />%2e%2e\\%2e%2e\\<br />..%2f..%2f<br />%2e%2e%2f%2e%2e%2ffolder_name%2ffile_name<br />..%2f..%2ffolder_name%2ffile_name<br />..%c0%af..%c0%affolder_name..%c0%affile_name\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <p>&nbsp;<b>Table 1 - Path Manipulation Attack Strings</b></p>\r\n  <h2>\r\n    <em>Look for error messages that indicate file operations</em>\r\n  </h2>\r\n  <p>While executing the basic test cases mentioned above, it is important to look for different types of error messages. For instance, “invalid input” or “incorrect format” error messages indicate that an application is safe, while “file not found” or HTTP 404 errors indicate that the application may be using the attack string to find a file in a different path, and may be vulnerable to this bug.</p>\r\n  <h1>Step 4: Execute Additional Testing</h1>\r\n  <p>Finally, it is important to execute additional testing for double encoding scenarios as well as to cover all of the application’s input points.<b><i></i></b></p>\r\n  <h1>\r\n    <em>Cover double encoding scenarios</em>\r\n  </h1>\r\n  <p>Since this attack requires passing malicious input to a Web application, it is necessary for proper coverage to add double encoding test cases. Double encoding consists of re-encoding the percent sign (<em>%</em>) in percent-encoded values with its percent-encoded equivalent (<em>%25</em>). For instance, translating the first URL into the second one:</p>\r\n  <pre>../../&nbsp; (no encoding)\r\n..%2f..%2f&nbsp;&nbsp;&nbsp;&nbsp; (single encoding)\r\n..%252f..%252f (double encoding)</pre>\r\n  <p>Make sure to add a double-encoded test case for every attack string that you use.<em></em></p>\r\n  <h2>\r\n    <em>Test through all input points</em>\r\n  </h2>\r\n  <p>Even though path manipulation attacks commonly happen through the URL or Web forms, it is important to look at additional application input points. Web applications can also take input from client cookies, Web methods, extended frameworks (such as Flash/Flex), and third-party APIs (such as Facebook) parameters. Make sure to test for path manipulation in every place where input is taken.</p>\r\n  <h1>Conclusions</h1>\r\n  <p>Path manipulation bugs allow attackers to access a server-side file to execute attacks such as information disclosure and denial of service. They&nbsp;can be&nbsp;successful when applications don’t properly validate user input against a whitelist and allow path manipulating characters such as dots and slashes to be processed by the application. To test for this vulnerability, you must identify the file path determining variable, commonly sent in the URL or in a Web form, and replace it with an attack string while looking for an error message that indicates that the attack string is being used. Finally, to achieve proper test coverage of this bug, be sure to cover double encoding scenarios and test through all of the application’s input points.</p>\r\n  <br />"
}