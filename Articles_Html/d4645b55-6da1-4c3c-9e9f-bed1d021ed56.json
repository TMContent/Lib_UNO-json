{
  "id": "d4645b55-6da1-4c3c-9e9f-bed1d021ed56",
  "checksum": "d172d03a308a8d743fd38c943d934d11eea439d6",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "a",
      "a"
    ],
    "java": [
      "p",
      "p",
      "p",
      "p",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a",
      "title"
    ],
    "web-based": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "jpa": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "executing": [
      "p",
      "p"
    ],
    "named": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "queries": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "objectives": [
      "h1"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "perform": [
      "p"
    ],
    "database": [
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "a"
    ],
    "operations": [
      "p"
    ],
    "safely": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "scenarios": [
      "h1"
    ],
    "provide": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1"
    ],
    "access": [
      "p",
      "h1",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "li",
      "a",
      "li",
      "a",
      "h1"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "p",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p"
    ],
    "manipulation": [
      "p"
    ],
    "mechanism": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "closely": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "ties": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p"
    ],
    "query": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "content": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "h1"
    ],
    "defining": [
      "p"
    ],
    "objects": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "against": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "it": [
      "p"
    ],
    "also": [
      "p",
      "h1"
    ],
    "removes": [
      "p"
    ],
    "actual": [
      "p"
    ],
    "language": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "which": [
      "p",
      "p"
    ],
    "common": [
      "p"
    ],
    "tactic": [
      "p"
    ],
    "creates": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "maintainability": [
      "p"
    ],
    "issues": [
      "p"
    ],
    "security": [
      "p"
    ],
    "related": [
      "p"
    ],
    "advantage": [
      "p"
    ],
    "dynamic": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "must": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "bound": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "prevents": [
      "p"
    ],
    "sql": [
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "injection": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "below": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "shows": [
      "p"
    ],
    "how": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "both": [
      "p"
    ],
    "define": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "solution": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "persistence": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "api": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "entity": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "class": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "your": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "@namedquery": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "or": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "@namedqueries": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "multiple": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "@namedquery's": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "annotation": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "each": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "examples": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "h1"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "a",
      "li",
      "a"
    ],
    "straightforward@entity@namedquery(\tname=\"product.findallproductsbyproductname\",\tquerystring=\"select": [
      "p",
      "ol",
      "li"
    ],
    "pro": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "product": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "where": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "proname": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "=": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "productname\") public": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "{\t..} @entity@namedqueries({\t@namedquery(name=\"product.findallproducts\",": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "querystring=\"select": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "pro\",\t@namedquery(name=\"product.findallproductsbyproductid\",": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "proid": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "productid\"),\t@namedquery(name=\"product.findallproductsbyproductname\",": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "productname\"),\t@namedquery(name=\"product.findallproductsbyproductprice\",": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "proprice": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "between": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "minprice": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "maxprice\")}) public": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "{\t..}use": [
      "p",
      "ol"
    ],
    "defined": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "there": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "need": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "parameter": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "binding": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "included": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "implementation": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "--------------------------untyped": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "results": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "example--------------------------//get": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "data//request": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "parameters": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "should": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "validated": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "-": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "simple": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "examplestring": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "productname": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "requestgetparameter(\"product_name\");": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "//use": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "manager": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "retrieve": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "queryquery": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "queryproductsbyname": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "emcreatenamedquery(\"product.findallproductsbyproductname\");//set": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "queryqueryproductsbynamesetparameter(\"productname\",": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "productname;//execute": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "get": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "resultscollection": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "products": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "queryproductsbynamegetresultlist();--------------------------typed": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "querytypedqueryproduct>": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "emcreatenamedquery(\"product.findallproductsbyproductname\",": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "productclass);//set": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "resultslistproduct>": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "queryproductsbynamegetresultlist();--------------------------example": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "without": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "data--------------------------//use": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "queryproducts": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "emcreatenamedquery(\"product.findallproducts\",": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "productclass);//execute": [
      "p",
      "ol",
      "li",
      "pre"
    ],
    "queryproductsgetresultlist();the": [
      "p",
      "ol",
      "li"
    ],
    "above": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "show": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "within": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "create": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "an": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "environment": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "they": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "operating": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "used": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "by": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "requiring": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "other": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "types": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "works": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "identical": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "manner": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "such": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "delete": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "update": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "insert": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "etc": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "{\t..}": [
      "li",
      "pre"
    ],
    "straightforward": [
      "p"
    ],
    "@entity@namedquery\tname=\"product.findallproductsbyproductname\",\tquerystring=\"select": [
      "pre"
    ],
    "@entity": [
      "p",
      "p"
    ],
    "name=\"productfindallproductsbyproductname\",": [
      "p"
    ],
    "productname\"": [
      "p"
    ],
    "public": [
      "p",
      "p"
    ],
    "{": [
      "p",
      "p"
    ],
    "..": [
      "p",
      "p"
    ],
    "}": [
      "p",
      "p",
      "p"
    ],
    "@namedqueries{": [
      "p"
    ],
    "@namedqueryname=\"product.findallproducts\",": [
      "p"
    ],
    "pro\",": [
      "p"
    ],
    "@namedqueryname=\"product.findallproductsbyproductid\",": [
      "p"
    ],
    "productid\"),": [
      "p"
    ],
    "@namedqueryname=\"product.findallproductsbyproductname\",": [
      "p"
    ],
    "productname\"),": [
      "p"
    ],
    "@namedqueryname=\"product.findallproductsbyproductprice\",": [
      "p"
    ],
    "maxprice\")": [
      "p"
    ],
    "queryproductsgetresultlist();": [
      "pre",
      "p"
    ],
    "--------------------------": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "untyped": [
      "p"
    ],
    "//get": [
      "p",
      "p"
    ],
    "//request": [
      "p",
      "p"
    ],
    "string": [
      "p",
      "p"
    ],
    "emcreatenamedquery(\"product.findallproductsbyproductname\");": [
      "p"
    ],
    "//set": [
      "p",
      "p"
    ],
    "queryproductsbynamesetparameter(\"productname\",": [
      "p",
      "p"
    ],
    "productname;": [
      "p",
      "p"
    ],
    "//execute": [
      "p",
      "p",
      "p"
    ],
    "collection": [
      "p"
    ],
    "queryproductsbynamegetresultlist();": [
      "p",
      "p"
    ],
    "typed": [
      "p"
    ],
    "typedqueryproduct>": [
      "p",
      "p"
    ],
    "productclass);": [
      "p",
      "p"
    ],
    "listproduct>": [
      "p",
      "p"
    ],
    "see": [
      "h1",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "more": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "information": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "about": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "please": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "http//download.oracle.com/docs/cd/b31017_01/web.1013/b28221/ent30qry001.htmfor": [
      "ul"
    ],
    "http//openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_namedfor": [
      "ul"
    ],
    "see http//www.oracle.com/technetwork/articles/javaee/jpa-137156.html": [
      "ul",
      "li"
    ],
    "http//download.oracle.com/docs/cd/b31017_01/web.1013/b28221/ent30qry001.htm": [
      "li",
      "a"
    ],
    "http//openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_named": [
      "li",
      "a"
    ],
    "http//www.oracle.com/technetwork/articles/javaee/jpa-137156.html": [
      "a"
    ],
    "guidelines": [
      "h1"
    ],
    "parameterized": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "apis": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "accessparameterize": [
      "ul"
    ],
    "stored": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "proceduresenforce": [
      "ul"
    ],
    "strong": [
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "passwordsuse": [
      "ul"
    ],
    "least": [
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "privileged": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "accounts": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "accessallow": [
      "ul"
    ],
    "only": [
      "ul",
      "li",
      "a",
      "li",
      "a",
      "a"
    ],
    "trusted": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "a"
    ],
    "hosts": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "a"
    ],
    "connect": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "a"
    ],
    "serverprotect": [
      "ul"
    ],
    "connection": [
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "strings": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "parameterize": [
      "li",
      "a"
    ],
    "procedures": [
      "li",
      "a",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "enforce": [
      "li",
      "a"
    ],
    "passwords": [
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "allow": [
      "li",
      "a"
    ],
    "server": [
      "li",
      "a",
      "li",
      "a",
      "a"
    ],
    "protect": [
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "accessdynamic": [
      "ul"
    ],
    "parameterizedstrong": [
      "ul"
    ],
    "enforcedleast": [
      "ul"
    ],
    "accessonly": [
      "ul"
    ],
    "allowed": [
      "ul",
      "li",
      "a",
      "a"
    ],
    "serverconnection": [
      "ul"
    ],
    "protected": [
      "ul",
      "li",
      "a"
    ],
    "enforced": [
      "li",
      "a"
    ],
    "proceduresuse": [
      "ul"
    ],
    "hibernateuse": [
      "ul"
    ],
    "jpa)": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "hibernate": [
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Objectives",
      "Scenarios",
      "Solution Example",
      "See Also",
      "Java Data Access Guidelines",
      "Java Data Access Checklists",
      "Java Data Access Code Examples"
    ],
    "p": [
      "Java web-based applications using JPA.",
      "Executing Named Queries using JPA.",
      "Use JPA named queries to perform database operations safely.",
      "JPA named queries provide a data access and manipulation mechanism that closely ties the query content to the Java code defining the objects that the query is executing against. It also removes the actual query language from Java code, which is a common tactic and creates certain maintainability issues. A security related advantage to named queries is that dynamic data must be bound, which prevents SQL injection attacks. The code below shows how to both define and use named queries in JPA.",
      "To use named queries with Java Persistence API:",
      "Define the entity class and named queries. Define your entity class and use the @NamedQuery (or @NamedQueries with multiple @NamedQuery's) annotation to define each named query. The examples below are straightforward.@Entity@NamedQuery(\tname=\"Product.findAllProductsByProductName\",\tqueryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\") public class Product {\t...} @Entity@NamedQueries({\t@NamedQuery(name=\"Product.findAllProducts\", queryString=\"SELECT pro FROM Product pro\"),\t@NamedQuery(name=\"Product.findAllProductsByProductId\", queryString=\"SELECT pro FROM Product pro WHERE pro.id = :productId\"),\t@NamedQuery(name=\"Product.findAllProductsByProductName\", queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"),\t@NamedQuery(name=\"Product.findAllProductsByProductPrice\", queryString=\"SELECT pro FROM Product pro WHERE pro.price between :minPrice and :maxPrice\")}) public class Product {\t...}Use the defined named queries in code. If there is a need for dynamic data, use the parameter binding mechanism included in the query implementation. --------------------------Untyped results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryQuery queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\");//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsCollection products = queryProductsByName.getResultList();--------------------------Typed results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryTypedQuery<Product> queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\", Product.class);//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsList<Product> products = queryProductsByName.getResultList();--------------------------Example without using dynamic data--------------------------//use entity manager to retrieve named queryTypedQuery<Product> queryProducts = em.createNamedQuery(\"Product.findAllProducts\", Product.class);//execute query and get resultsList<Product> products = queryProducts.getResultList();The examples above show how to use named queries within JPA to create an environment where the queries are defined closely with the data they are operating against and that are safely used by requiring bound parameters for dynamic data. The use of other types of queries works in an identical manner, such as delete, update, insert, etc.",
      "Define the entity class and named queries. Define your entity class and use the @NamedQuery (or @NamedQueries with multiple @NamedQuery's) annotation to define each named query. The examples below are straightforward.",
      "@Entity",
      "@NamedQuery(",
      "name=\"Product.findAllProductsByProductName\",",
      "queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"",
      ")",
      "",
      "public class Product {",
      "...",
      "}",
      "",
      "@Entity",
      "@NamedQueries({",
      "@NamedQuery(name=\"Product.findAllProducts\", queryString=\"SELECT pro FROM Product pro\"),",
      "@NamedQuery(name=\"Product.findAllProductsByProductId\", queryString=\"SELECT pro FROM Product pro WHERE pro.id = :productId\"),",
      "@NamedQuery(name=\"Product.findAllProductsByProductName\", queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"),",
      "@NamedQuery(name=\"Product.findAllProductsByProductPrice\", queryString=\"SELECT pro FROM Product pro WHERE pro.price between :minPrice and :maxPrice\")",
      "})",
      "",
      "public class Product {",
      "...",
      "}",
      "Use the defined named queries in code. If there is a need for dynamic data, use the parameter binding mechanism included in the query implementation.",
      "--------------------------",
      "Untyped results example",
      "--------------------------",
      "//get dynamic data",
      "//request parameters should be validated before use - this is a simple example",
      "String productName = request.getParameter(\"product_name\");",
      "//use entity manager to retrieve named query",
      "Query queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\");",
      "//set dynamic data for query",
      "queryProductsByName.setParameter(\"productName\", productName);",
      "//execute query and get results",
      "Collection products = queryProductsByName.getResultList();",
      "--------------------------",
      "Typed results example",
      "--------------------------",
      "//get dynamic data",
      "//request parameters should be validated before use - this is a simple example",
      "String productName = request.getParameter(\"product_name\");",
      "//use entity manager to retrieve named query",
      "TypedQuery<Product> queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\", Product.class);",
      "//set dynamic data for query",
      "queryProductsByName.setParameter(\"productName\", productName);",
      "//execute query and get results",
      "List<Product> products = queryProductsByName.getResultList();",
      "--------------------------",
      "Example without using dynamic data",
      "--------------------------",
      "//use entity manager to retrieve named query",
      "TypedQuery<Product> queryProducts = em.createNamedQuery(\"Product.findAllProducts\", Product.class);",
      "//execute query and get results",
      "List<Product> products = queryProducts.getResultList();",
      "The examples above show how to use named queries within JPA to create an environment where the queries are defined closely with the data they are operating against and that are safely used by requiring bound parameters for dynamic data. The use of other types of queries works in an identical manner, such as delete, update, insert, etc."
    ],
    "ol": [
      "Define the entity class and named queries. Define your entity class and use the @NamedQuery (or @NamedQueries with multiple @NamedQuery's) annotation to define each named query. The examples below are straightforward.@Entity@NamedQuery(\tname=\"Product.findAllProductsByProductName\",\tqueryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\") public class Product {\t...} @Entity@NamedQueries({\t@NamedQuery(name=\"Product.findAllProducts\", queryString=\"SELECT pro FROM Product pro\"),\t@NamedQuery(name=\"Product.findAllProductsByProductId\", queryString=\"SELECT pro FROM Product pro WHERE pro.id = :productId\"),\t@NamedQuery(name=\"Product.findAllProductsByProductName\", queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"),\t@NamedQuery(name=\"Product.findAllProductsByProductPrice\", queryString=\"SELECT pro FROM Product pro WHERE pro.price between :minPrice and :maxPrice\")}) public class Product {\t...}Use the defined named queries in code. If there is a need for dynamic data, use the parameter binding mechanism included in the query implementation. --------------------------Untyped results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryQuery queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\");//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsCollection products = queryProductsByName.getResultList();--------------------------Typed results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryTypedQuery<Product> queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\", Product.class);//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsList<Product> products = queryProductsByName.getResultList();--------------------------Example without using dynamic data--------------------------//use entity manager to retrieve named queryTypedQuery<Product> queryProducts = em.createNamedQuery(\"Product.findAllProducts\", Product.class);//execute query and get resultsList<Product> products = queryProducts.getResultList();The examples above show how to use named queries within JPA to create an environment where the queries are defined closely with the data they are operating against and that are safely used by requiring bound parameters for dynamic data. The use of other types of queries works in an identical manner, such as delete, update, insert, etc."
    ],
    "li": [
      "Define the entity class and named queries. Define your entity class and use the @NamedQuery (or @NamedQueries with multiple @NamedQuery's) annotation to define each named query. The examples below are straightforward.@Entity@NamedQuery(\tname=\"Product.findAllProductsByProductName\",\tqueryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\") public class Product {\t...} @Entity@NamedQueries({\t@NamedQuery(name=\"Product.findAllProducts\", queryString=\"SELECT pro FROM Product pro\"),\t@NamedQuery(name=\"Product.findAllProductsByProductId\", queryString=\"SELECT pro FROM Product pro WHERE pro.id = :productId\"),\t@NamedQuery(name=\"Product.findAllProductsByProductName\", queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"),\t@NamedQuery(name=\"Product.findAllProductsByProductPrice\", queryString=\"SELECT pro FROM Product pro WHERE pro.price between :minPrice and :maxPrice\")}) public class Product {\t...}",
      "Use the defined named queries in code. If there is a need for dynamic data, use the parameter binding mechanism included in the query implementation. --------------------------Untyped results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryQuery queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\");//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsCollection products = queryProductsByName.getResultList();--------------------------Typed results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryTypedQuery<Product> queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\", Product.class);//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsList<Product> products = queryProductsByName.getResultList();--------------------------Example without using dynamic data--------------------------//use entity manager to retrieve named queryTypedQuery<Product> queryProducts = em.createNamedQuery(\"Product.findAllProducts\", Product.class);//execute query and get resultsList<Product> products = queryProducts.getResultList();The examples above show how to use named queries within JPA to create an environment where the queries are defined closely with the data they are operating against and that are safely used by requiring bound parameters for dynamic data. The use of other types of queries works in an identical manner, such as delete, update, insert, etc.",
      "For more information about named queries, please see http://download.oracle.com/docs/cd/B31017_01/web.1013/b28221/ent30qry001.htm",
      "For more information about named queries, please see http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_named",
      "For more information about JPA, please see http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html",
      "Use Parameterized APIs for Data Access",
      "Parameterize Dynamic SQL in Stored Procedures",
      "Enforce Strong SQL Passwords",
      "Use Least Privileged Accounts for Database Access",
      "Allow Only Trusted Hosts to Connect to Database Server",
      "Protect Connection Strings",
      "Parameterized APIs Are Used for Data Access",
      "Dynamic SQL in Stored Procedures Is Parameterized",
      "Strong SQL Passwords Are Enforced",
      "Least Privileged Accounts Are Used for Database Access",
      "Only Trusted Hosts Are Allowed to Connect to Database Server",
      "Connection Strings Are Protected",
      "Use Stored Procedures",
      "Use Named Queries with Hibernate",
      "Use Named Queries with Java Persistence API (JPA)"
    ],
    "strong": [
      "Define the entity class and named queries.",
      "Use the defined named queries in code."
    ],
    "pre": [
      "@Entity@NamedQuery(\tname=\"Product.findAllProductsByProductName\",\tqueryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\") public class Product {\t...} @Entity@NamedQueries({\t@NamedQuery(name=\"Product.findAllProducts\", queryString=\"SELECT pro FROM Product pro\"),\t@NamedQuery(name=\"Product.findAllProductsByProductId\", queryString=\"SELECT pro FROM Product pro WHERE pro.id = :productId\"),\t@NamedQuery(name=\"Product.findAllProductsByProductName\", queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"),\t@NamedQuery(name=\"Product.findAllProductsByProductPrice\", queryString=\"SELECT pro FROM Product pro WHERE pro.price between :minPrice and :maxPrice\")}) public class Product {\t...}",
      "--------------------------Untyped results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryQuery queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\");//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsCollection products = queryProductsByName.getResultList();--------------------------Typed results example--------------------------//get dynamic data//request parameters should be validated before use - this is a simple exampleString productName = request.getParameter(\"product_name\"); //use entity manager to retrieve named queryTypedQuery<Product> queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\", Product.class);//set dynamic data for queryqueryProductsByName.setParameter(\"productName\", productName);//execute query and get resultsList<Product> products = queryProductsByName.getResultList();--------------------------Example without using dynamic data--------------------------//use entity manager to retrieve named queryTypedQuery<Product> queryProducts = em.createNamedQuery(\"Product.findAllProducts\", Product.class);//execute query and get resultsList<Product> products = queryProducts.getResultList();"
    ],
    "ul": [
      "For more information about named queries, please see http://download.oracle.com/docs/cd/B31017_01/web.1013/b28221/ent30qry001.htmFor more information about named queries, please see http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_namedFor more information about JPA, please see http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html",
      "Use Parameterized APIs for Data AccessParameterize Dynamic SQL in Stored ProceduresEnforce Strong SQL PasswordsUse Least Privileged Accounts for Database AccessAllow Only Trusted Hosts to Connect to Database ServerProtect Connection Strings",
      "Parameterized APIs Are Used for Data AccessDynamic SQL in Stored Procedures Is ParameterizedStrong SQL Passwords Are EnforcedLeast Privileged Accounts Are Used for Database AccessOnly Trusted Hosts Are Allowed to Connect to Database ServerConnection Strings Are Protected",
      "Use Stored ProceduresUse Named Queries with HibernateUse Named Queries with Java Persistence API (JPA)"
    ],
    "a": [
      "http://download.oracle.com/docs/cd/B31017_01/web.1013/b28221/ent30qry001.htm",
      "http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_named",
      "http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html",
      "Use Parameterized APIs for Data Access",
      "Parameterize Dynamic SQL in Stored Procedures",
      "Enforce Strong SQL Passwords",
      "Use Least Privileged Accounts for Database Access",
      "Allow Only Trusted Hosts to Connect to Database Server",
      "Protect Connection Strings",
      "Parameterized APIs Are Used for Data Access",
      "Dynamic SQL in Stored Procedures Is Parameterized",
      "Strong SQL Passwords Are Enforced",
      "Least Privileged Accounts Are Used for Database Access",
      "Only Trusted Hosts Are Allowed to Connect to Database Server",
      "Only Trusted Hosts Are Allowed to Connect to Database Server",
      "Connection Strings Are Protected",
      "Use Stored Procedures",
      "Use Named Queries with Hibernate",
      "Use Named Queries with Java Persistence API (JPA)"
    ]
  },
  "links": [
    {
      "href": "http://download.oracle.com/docs/cd/B31017_01/web.1013/b28221/ent30qry001.htm",
      "text": "http://download.oracle.com/docs/cd/B31017_01/web.1013/b28221/ent30qry001.htm"
    },
    {
      "href": "http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_named",
      "text": "http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_named"
    },
    {
      "href": "http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html",
      "text": "http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html"
    },
    {
      "href": "/article/d2809cce-1af2-4896-a45c-b4b56deae282",
      "text": "Use Parameterized APIs for Data Access"
    },
    {
      "href": "/article/bcfcbcbb-4bd6-4011-9e24-efa70d4a3724",
      "text": "Parameterize Dynamic SQL in Stored Procedures"
    },
    {
      "href": "/article/5427d358-17f6-4ef6-948f-d670c5aefc38",
      "text": "Enforce Strong SQL Passwords"
    },
    {
      "href": "/article/697891eb-5d97-44fa-a6eb-625f247f622d",
      "text": "Use Least Privileged Accounts for Database Access"
    },
    {
      "href": "/article/159a8710-263c-4612-b9d8-ba3943f8286f",
      "text": "Allow Only Trusted Hosts to Connect to Database Server"
    },
    {
      "href": "/article/0aaa1b15-8bdb-4486-9171-4eb3c2159829",
      "text": "Protect Connection Strings"
    },
    {
      "href": "/article/d5a1c94b-601e-4e2a-9ad8-33461792a8bb",
      "text": "Parameterized APIs Are Used for Data Access"
    },
    {
      "href": "/article/93d15ca4-c950-4370-8de5-cdb2cc2974fe",
      "text": "Dynamic SQL in Stored Procedures Is Parameterized"
    },
    {
      "href": "/article/73c2f6fa-3c97-452e-8163-7215bd995d58",
      "text": "Strong SQL Passwords Are Enforced"
    },
    {
      "href": "/article/61af51d9-58f8-4ddf-a373-0b67ea8e6d4b",
      "text": "Least Privileged Accounts Are Used for Database Access"
    },
    {
      "href": "/article/54026187-bcbd-433b-a895-21d66b543052",
      "text": "Only Trusted Hosts Are Allowed to Connect to Database Server"
    },
    {
      "href": "/article/54026187-bcbd-433b-a895-21d66b543052",
      "text": "Only Trusted Hosts Are Allowed to Connect to Database Server"
    },
    {
      "href": "/article/9fdc12bc-4208-4d0e-a56c-62e12b660bc0",
      "text": "Connection Strings Are Protected"
    },
    {
      "href": "/article/5f55ac00-bb90-439e-a5fd-a85e9a327175",
      "text": "Use Stored Procedures"
    },
    {
      "href": "/article/e3d7a7be-68a1-47ab-a515-54053d9171a4",
      "text": "Use Named Queries with Hibernate"
    },
    {
      "href": "/article/d4645b55-6da1-4c3c-9e9f-bed1d021ed56",
      "text": "Use Named Queries with Java Persistence API (JPA)"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <p>Java web-based applications using JPA.</p>\n  <h1>Summary</h1>\n  <p>Executing Named Queries using JPA.</p>\n  <h1>Objectives</h1>\n  <p>Use JPA named queries to perform database operations safely.</p>\n  <h1>Scenarios</h1>\n  <p>JPA named queries provide a data access and manipulation mechanism that closely ties the query content to the Java code defining the objects that the query is executing against. It also removes the actual query language from Java code, which is a common tactic and creates certain maintainability issues. A security related advantage to named queries is that dynamic data must be bound, which prevents SQL injection attacks. The code below shows how to both define and use named queries in JPA.</p>\n  <h1>Solution Example</h1>\n  <p />To use named queries with Java Persistence API: <p /><ol><li><p><strong>Define the entity class and named queries.</strong> Define your entity class and use the &#64;NamedQuery (or &#64;NamedQueries with multiple &#64;NamedQuery's) annotation to define each named query. The examples below are straightforward.</p><pre><p>&#64;Entity</p><p>&#64;NamedQuery(</p><p>&#9;name=\"Product.findAllProductsByProductName\",</p><p>&#9;queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"</p><p>)</p><p>&nbsp;</p><p>public class Product &#123;</p><p>&#9;...</p><p>&#125;</p><p>&nbsp;</p><p>&#64;Entity</p><p>&#64;NamedQueries(&#123;</p><p>&#9;&#64;NamedQuery(name=\"Product.findAllProducts\", queryString=\"SELECT pro FROM Product pro\"),</p><p>&#9;&#64;NamedQuery(name=\"Product.findAllProductsByProductId\", queryString=\"SELECT pro FROM Product pro WHERE pro.id = :productId\"),</p><p>&#9;&#64;NamedQuery(name=\"Product.findAllProductsByProductName\", queryString=\"SELECT pro FROM Product pro WHERE pro.name = :productName\"),</p><p>&#9;&#64;NamedQuery(name=\"Product.findAllProductsByProductPrice\", queryString=\"SELECT pro FROM Product pro WHERE pro.price between :minPrice and :maxPrice\")</p><p>&#125;)</p><p>&nbsp;</p><p>public class Product &#123;</p><p>&#9;...</p><p>&#125;</p></pre><li><p><strong>Use the defined named queries in code.</strong> If there is a need for dynamic data, use the parameter binding mechanism included in the query implementation. </p><pre><p>--------------------------</p><p>Untyped results example</p><p>--------------------------</p><p>//get dynamic data</p><p>//request parameters should be validated before use - this is a simple example</p><p>String productName = request.getParameter(\"product_name\"); </p><p>//use entity manager to retrieve named query</p><p>Query queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\");</p><p>//set dynamic data for query</p><p>queryProductsByName.setParameter(\"productName\", productName);</p><p>//execute query and get results</p><p>Collection products = queryProductsByName.getResultList();</p><p>--------------------------</p><p>Typed results example</p><p>--------------------------</p><p>//get dynamic data</p><p>//request parameters should be validated before use - this is a simple example</p><p>String productName = request.getParameter(\"product_name\"); </p><p>//use entity manager to retrieve named query</p><p>TypedQuery&lt;Product&gt; queryProductsByName = em.createNamedQuery(\"Product.findAllProductsByProductName\", Product.class);</p><p>//set dynamic data for query</p><p>queryProductsByName.setParameter(\"productName\", productName);</p><p>//execute query and get results</p><p>List&lt;Product&gt; products = queryProductsByName.getResultList();</p><p>--------------------------</p><p>Example without using dynamic data</p><p>--------------------------</p><p>//use entity manager to retrieve named query</p><p>TypedQuery&lt;Product&gt; queryProducts = em.createNamedQuery(\"Product.findAllProducts\", Product.class);</p><p>//execute query and get results</p><p>List&lt;Product&gt; products = queryProducts.getResultList();</p></pre><p>The examples above show how to use named queries within JPA to create an environment where the queries are defined closely with the data they are operating against and that are safely used by requiring bound parameters for dynamic data. The use of other types of queries works in an identical manner, such as delete, update, insert, etc.</p></li></li></ol><h1>See Also</h1><ul><li>For more information about named queries, please see <a href=\"http://download.oracle.com/docs/cd/B31017_01/web.1013/b28221/ent30qry001.htm\">http://download.oracle.com/docs/cd/B31017_01/web.1013/b28221/ent30qry001.htm</a><li>For more information about named queries, please see <a href=\"http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_named\">http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/jpa_overview_query.html#jpa_overview_query_named</a><li>For more information about JPA, please see&nbsp;<a href=\"http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html\">http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html</a></li></li></li></ul><h1>Java Data Access Guidelines</h1><ul><li><a href=\"/article/d2809cce-1af2-4896-a45c-b4b56deae282\">Use Parameterized APIs for Data Access</a></li><li><a href=\"/article/bcfcbcbb-4bd6-4011-9e24-efa70d4a3724\">Parameterize Dynamic SQL in Stored Procedures</a></li><li><a href=\"/article/5427d358-17f6-4ef6-948f-d670c5aefc38\">Enforce Strong SQL Passwords</a></li><li><a href=\"/article/697891eb-5d97-44fa-a6eb-625f247f622d\">Use Least Privileged Accounts for Database Access</a></li><li><a href=\"/article/159a8710-263c-4612-b9d8-ba3943f8286f\">Allow Only Trusted Hosts to Connect to Database Server</a></li><li><a href=\"/article/0aaa1b15-8bdb-4486-9171-4eb3c2159829\">Protect Connection Strings</a></li></ul><h1>Java Data Access Checklists</h1><ul><li><a href=\"/article/d5a1c94b-601e-4e2a-9ad8-33461792a8bb\">Parameterized APIs Are Used for Data Access</a></li><li><a href=\"/article/93d15ca4-c950-4370-8de5-cdb2cc2974fe\">Dynamic SQL in Stored Procedures Is Parameterized</a></li><li><a href=\"/article/73c2f6fa-3c97-452e-8163-7215bd995d58\">Strong SQL Passwords Are Enforced</a></li><li><a href=\"/article/61af51d9-58f8-4ddf-a373-0b67ea8e6d4b\">Least Privileged Accounts Are Used for Database Access</a></li><li><a href=\"/article/54026187-bcbd-433b-a895-21d66b543052\"><a href=\"/article/54026187-bcbd-433b-a895-21d66b543052\">Only Trusted Hosts Are Allowed to Connect to Database Server</a></a></li><li><a href=\"/article/9fdc12bc-4208-4d0e-a56c-62e12b660bc0\">Connection Strings Are Protected</a></li></ul><h1>Java Data Access Code Examples</h1><ul><li><a href=\"/article/5f55ac00-bb90-439e-a5fd-a85e9a327175\">Use Stored Procedures</a></li><li><a href=\"/article/e3d7a7be-68a1-47ab-a515-54053d9171a4\">Use Named Queries with Hibernate</a></li><li><a href=\"/article/d4645b55-6da1-4c3c-9e9f-bed1d021ed56\">Use Named Queries with Java Persistence API (JPA)</a></li></ul>"
}