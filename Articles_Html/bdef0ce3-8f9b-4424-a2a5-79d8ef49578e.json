{
  "id": "bdef0ce3-8f9b-4424-a2a5-79d8ef49578e",
  "checksum": "586c0317a534f5599190893103713e8927b90539",
  "words": {
    "1": [
      "ul",
      "li",
      "h1",
      "h2",
      "em"
    ],
    "2": [
      "ul",
      "li",
      "h2",
      "em",
      "ol",
      "li",
      "h1"
    ],
    "3": [
      "ul",
      "li",
      "ol",
      "li",
      "h1"
    ],
    "4": [
      "ol",
      "li"
    ],
    "5": [
      "ol",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "all": [
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "software": [
      "ul",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "em",
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "reverse": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "p",
      "b",
      "title"
    ],
    "engineering": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "p",
      "b",
      "title"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "process": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "i",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "inferring": [
      "p",
      "p"
    ],
    "details": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "about": [
      "p",
      "p",
      "p",
      "p"
    ],
    "architecture": [
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "p"
    ],
    "design": [
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "implementation": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "after": [
      "p",
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "been": [
      "p"
    ],
    "built": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "div",
      "div",
      "p"
    ],
    "released": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "attack": [
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "commonly": [
      "p"
    ],
    "focuses": [
      "p"
    ],
    "on": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "recovering": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "em",
      "h2",
      "em",
      "p",
      "p",
      "p"
    ],
    "source": [
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "target": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "but": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "may": [
      "p"
    ],
    "also": [
      "p",
      "p",
      "p"
    ],
    "focus": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "discovering": [
      "p"
    ],
    "its": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li"
    ],
    "follow": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "these": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "steps": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "test": [
      "p",
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "title"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "bugs": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h1",
      "p",
      "h1",
      "p",
      "p",
      "h1",
      "ol",
      "li"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1"
    ],
    "causes": [
      "ul",
      "li",
      "h1"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1",
      "h2",
      "em"
    ],
    "execute": [
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "cases": [
      "ul",
      "li",
      "p",
      "h1",
      "p"
    ],
    "first": [
      "p"
    ],
    "necessary": [
      "p",
      "p",
      "p",
      "p"
    ],
    "under": [
      "p",
      "ol",
      "li"
    ],
    "what": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "purposes": [
      "p"
    ],
    "attackers": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "utilize": [
      "p",
      "p"
    ],
    "scenario": [
      "h2",
      "em",
      "h2",
      "em",
      "p"
    ],
    "often": [
      "p"
    ],
    "used": [
      "p"
    ],
    "recover": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "from": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "binary": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "file": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "b",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "intermediate": [
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "java": [
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li"
    ],
    "class": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "purpose": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "tool": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "dissasembler": [
      "p",
      "ol",
      "li",
      "p",
      "h2",
      "em",
      "p"
    ],
    "decompiler": [
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "parse": [
      "p"
    ],
    "compiled": [
      "p"
    ],
    "attempt": [
      "p",
      "p"
    ],
    "compiling": [
      "p"
    ],
    "building": [
      "p"
    ],
    "reconstruct": [
      "p",
      "p"
    ],
    "actual": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "created": [
      "p"
    ],
    "line": [
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "once": [
      "p"
    ],
    "gets": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "output": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "recovery": [
      "p"
    ],
    "he": [
      "p"
    ],
    "usually": [
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "technique": [
      "p"
    ],
    "program": [
      "p",
      "p",
      "p"
    ],
    "modify": [
      "p"
    ],
    "achieve": [
      "p"
    ],
    "desired": [
      "p"
    ],
    "task": [
      "p",
      "ol",
      "li",
      "i"
    ],
    "getting": [
      "p"
    ],
    "rid": [
      "p"
    ],
    "registration/activation": [
      "p"
    ],
    "bypass": [
      "p"
    ],
    "security": [
      "p",
      "p"
    ],
    "check,": [
      "p"
    ],
    "then": [
      "p"
    ],
    "rebuild": [
      "p"
    ],
    "into": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "modified": [
      "p"
    ],
    "version": [
      "p"
    ],
    "suits": [
      "p"
    ],
    "attacker’s": [
      "p"
    ],
    "needs": [
      "p"
    ],
    "detail": [
      "p",
      "p"
    ],
    "copy": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "binary/object/class": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "files": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "translate": [
      "ol",
      "li"
    ],
    "modifies": [
      "ol",
      "li"
    ],
    "rebuilds": [
      "ol",
      "li"
    ],
    "optional).": [
      "ol",
      "li"
    ],
    "note": [
      "p",
      "ol",
      "li"
    ],
    "last": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "requirement": [
      "p"
    ],
    "work": [
      "p",
      "p"
    ],
    "making": [
      "p",
      "p"
    ],
    "internal": [
      "p",
      "p"
    ],
    "logical": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "decisions": [
      "p",
      "p"
    ],
    "interacting": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "their": [
      "p",
      "p"
    ],
    "environments": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "might": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "have": [
      "p",
      "p"
    ],
    "different": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "if/then/else": [
      "p",
      "i"
    ],
    "case": [
      "p",
      "i",
      "p"
    ],
    "conditions": [
      "p",
      "p"
    ],
    "choose": [
      "p"
    ],
    "paths": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "addition": [
      "p",
      "p",
      "p"
    ],
    "properly": [
      "p",
      "p"
    ],
    "operate": [
      "p",
      "p"
    ],
    "most": [
      "p"
    ],
    "need": [
      "p"
    ],
    "access": [
      "p"
    ],
    "hard": [
      "p"
    ],
    "drive": [
      "p"
    ],
    "send": [
      "p"
    ],
    "information": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "over": [
      "p"
    ],
    "network": [
      "p",
      "ol",
      "li"
    ],
    "consume": [
      "p"
    ],
    "memory": [
      "p",
      "ol",
      "li"
    ],
    "registry": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "windows,": [
      "p"
    ],
    "interact": [
      "p",
      "p"
    ],
    "database": [
      "p"
    ],
    "analyzing": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "when": [
      "p",
      "p",
      "p"
    ],
    "takes": [
      "p"
    ],
    "interacts": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "environment": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "determine": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "even": [
      "p"
    ],
    "intuitive": [
      "p"
    ],
    "set": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "tools": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "including": [
      "p",
      "p"
    ],
    "dissasemblers": [
      "p",
      "p"
    ],
    "decompilers": [
      "p"
    ],
    "debuggers": [
      "p",
      "p",
      "p"
    ],
    "dependency": [
      "p",
      "ol",
      "li"
    ],
    "checkers": [
      "p"
    ],
    "monitoring": [
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "p"
    ],
    "discover": [
      "p",
      "p"
    ],
    "designed": [
      "p"
    ],
    "short": [
      "p"
    ],
    "decides": [
      "p"
    ],
    "application’s": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "analyzes": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "statically": [
      "ol",
      "li"
    ],
    "using": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "div",
      "div",
      "p",
      "b"
    ],
    "checker": [
      "ol",
      "li"
    ],
    "see": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li"
    ],
    "decomposed": [
      "ol",
      "li"
    ],
    "chooses": [
      "ol",
      "li"
    ],
    "based": [
      "ol",
      "li"
    ],
    "choices": [
      "ol",
      "li"
    ],
    "exercises": [
      "ol",
      "li"
    ],
    "while": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "activity": [
      "ol",
      "li"
    ],
    "system": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "databases": [
      "ol",
      "li"
    ],
    "third-party": [
      "ol",
      "li"
    ],
    "apis": [
      "ol",
      "li"
    ],
    "collects": [
      "ol",
      "li"
    ],
    "following": [
      "p",
      "p"
    ],
    "before": [
      "p",
      "p"
    ],
    "executing": [
      "p",
      "p"
    ],
    "practical": [
      "p",
      "p"
    ],
    "why": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "p",
      "p",
      "p"
    ],
    "protect": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "them": [
      "p",
      "p"
    ],
    "exist": [
      "p"
    ],
    "default": [
      "p",
      "p"
    ],
    "any": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "because": [
      "p",
      "p",
      "p",
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "premise": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "reversed": [
      "p",
      "p"
    ],
    "shippable": [
      "p"
    ],
    "must": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "produce": [
      "p"
    ],
    "executable": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "binaries": [
      "p"
    ],
    "which": [
      "p",
      "p"
    ],
    "become": [
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "execution": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "want": [
      "p"
    ],
    "thus": [
      "p"
    ],
    "opening": [
      "p"
    ],
    "door": [
      "p"
    ],
    "behavior": [
      "p",
      "p",
      "p",
      "p"
    ],
    "take": [
      "p",
      "p",
      "p",
      "p"
    ],
    "extra": [
      "p",
      "p"
    ],
    "during": [
      "p",
      "p"
    ],
    "both": [
      "p",
      "ol",
      "li"
    ],
    "development": [
      "p"
    ],
    "compilation/building": [
      "p"
    ],
    "anti-disassembling": [
      "h2",
      "em",
      "p"
    ],
    "disassembling": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "parsing": [
      "p",
      "p"
    ],
    "there": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "static": [
      "p"
    ],
    "ida": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "pro": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "numerous": [
      "p"
    ],
    "types": [
      "p"
    ],
    "cavaj": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "specifically": [
      "p"
    ],
    "classes,": [
      "p"
    ],
    "reconstructing": [
      "p"
    ],
    "draw": [
      "p"
    ],
    "flow": [
      "p"
    ],
    "flowchart": [
      "p"
    ],
    "showing": [
      "p"
    ],
    "branches": [
      "p",
      "p",
      "p"
    ],
    "developers": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "encouraged": [
      "p"
    ],
    "techniques": [
      "p",
      "p",
      "p"
    ],
    "two": [
      "p"
    ],
    "examples": [
      "p"
    ],
    "methods": [
      "p",
      "p"
    ],
    "anti-disassembly": [
      "p",
      "p",
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "obfuscation": [
      "p",
      "p"
    ],
    "encryption": [
      "p",
      "p",
      "p"
    ],
    "mitigate": [
      "p"
    ],
    "impact": [
      "p",
      "p",
      "p"
    ],
    "adding": [
      "p"
    ],
    "build/compilation": [
      "p"
    ],
    "obfuscates": [
      "p"
    ],
    "works": [
      "p",
      "p"
    ],
    "replacing": [
      "p"
    ],
    "specific": [
      "p"
    ],
    "instructions": [
      "p",
      "p"
    ],
    "targets": [
      "p"
    ],
    "branch": [
      "p",
      "p"
    ],
    "statements": [
      "p"
    ],
    "jumps": [
      "p"
    ],
    "functions": [
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "computed": [
      "p",
      "p"
    ],
    "statement": [
      "p"
    ],
    "dynamically": [
      "p"
    ],
    "non-conditional": [
      "p"
    ],
    "conditional": [
      "p"
    ],
    "inserting": [
      "p",
      "p",
      "p"
    ],
    "false": [
      "p"
    ],
    "predicates": [
      "p"
    ],
    "i].": [
      "p"
    ],
    "each": [
      "p"
    ],
    "primary": [
      "p"
    ],
    "goal": [
      "p",
      "p"
    ],
    "defeat": [
      "p"
    ],
    "correctly": [
      "p"
    ],
    "interpreting": [
      "p"
    ],
    "recent": [
      "p"
    ],
    "research": [
      "p"
    ],
    "proposes": [
      "p"
    ],
    "encrypting": [
      "p"
    ],
    "machine": [
      "p"
    ],
    "decrypting": [
      "p"
    ],
    "key": [
      "p",
      "p"
    ],
    "executes": [
      "p",
      "p"
    ],
    "reverse-engineering": [
      "p"
    ],
    "hackers": [
      "p"
    ],
    "obviously": [
      "p"
    ],
    "would": [
      "p"
    ],
    "cryptographic": [
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "ii].": [
      "p"
    ],
    "anti-debugging": [
      "h2",
      "em",
      "p",
      "p",
      "em",
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "debugging": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "sequence": [
      "p"
    ],
    "follows": [
      "p"
    ],
    "mentioned": [
      "p"
    ],
    "great": [
      "p"
    ],
    "benefit": [
      "p"
    ],
    "shows": [
      "p",
      "p"
    ],
    "does": [
      "p"
    ],
    "running": [
      "p"
    ],
    "engineers": [
      "p",
      "p"
    ],
    "will": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "low-level": [
      "p"
    ],
    "debugger": [
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "hook": [
      "p"
    ],
    "at": [
      "p",
      "ol",
      "li"
    ],
    "kernel-level": [
      "p"
    ],
    "ring-0,": [
      "p"
    ],
    "softice": [
      "p",
      "i"
    ],
    "winice": [
      "p",
      "i"
    ],
    "user-mode": [
      "p"
    ],
    "ntsd": [
      "p",
      "i"
    ],
    "ollydbg": [
      "p",
      "i"
    ],
    "accomplished": [
      "p"
    ],
    "through": [
      "p"
    ],
    "checking": [
      "p"
    ],
    "presence": [
      "p"
    ],
    "timers": [
      "p"
    ],
    "break-points": [
      "p"
    ],
    "sending": [
      "p"
    ],
    "commands": [
      "p"
    ],
    "void": [
      "p"
    ],
    "attached": [
      "p"
    ],
    "requires": [
      "p"
    ],
    "developer": [
      "p"
    ],
    "add": [
      "p"
    ],
    "do": [
      "p"
    ],
    "checks": [
      "p"
    ],
    "appropriate": [
      "p"
    ],
    "measures": [
      "p",
      "p"
    ],
    "found": [
      "p"
    ],
    "more": [
      "p"
    ],
    "&": [
      "p",
      "em",
      "div",
      "div",
      "p",
      "b"
    ],
    "protection": [
      "p",
      "em",
      "div",
      "div",
      "div",
      "p",
      "b",
      "div",
      "p",
      "b"
    ],
    "advice": [
      "p",
      "em",
      "div",
      "div",
      "p",
      "b"
    ],
    "iii].": [
      "p"
    ],
    "additional": [
      "h2",
      "em",
      "p"
    ],
    "make": [
      "p",
      "p"
    ],
    "difficult": [
      "p"
    ],
    "succeed": [
      "p"
    ],
    "renaming": [
      "p"
    ],
    "api": [
      "p",
      "ol",
      "li"
    ],
    "function": [
      "p"
    ],
    "names": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "modules": [
      "p"
    ],
    "libraries": [
      "p"
    ],
    "don’t": [
      "p"
    ],
    "tell": [
      "p"
    ],
    "anything": [
      "p"
    ],
    "important": [
      "p",
      "p"
    ],
    "never": [
      "p"
    ],
    "ship": [
      "p"
    ],
    "debug": [
      "p"
    ],
    "symbols": [
      "p",
      "p"
    ],
    "where": [
      "p"
    ],
    "high": [
      "p",
      "p"
    ],
    "reveal": [
      "p"
    ],
    "developed": [
      "p"
    ],
    "finally": [
      "p",
      "p"
    ],
    "very": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "architects": [
      "p"
    ],
    "look": [
      "p"
    ],
    "random": [
      "p"
    ],
    "components": [
      "p"
    ],
    "fool": [
      "p"
    ],
    "really": [
      "p"
    ],
    "part": [
      "p"
    ],
    "so": [
      "p"
    ],
    "tedious": [
      "p"
    ],
    "discouraged": [
      "p"
    ],
    "stop": [
      "p"
    ],
    "trying": [
      "p"
    ],
    "now": [
      "p"
    ],
    "you’ve": [
      "p"
    ],
    "reviewed": [
      "p"
    ],
    "theoretical": [
      "p"
    ],
    "aspects": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "p"
    ],
    "download": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "install": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "http://www.softpedia.com/get/programming/debuggers-decompilers-dissasemblers/ida-pro.shtml).": [
      "ol",
      "li"
    ],
    "run": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "select": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "start": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "http//www.softpedia.com/get/programming/debuggers-decompilers-dissasemblers/ida-pro.shtml": [
      "a"
    ],
    "expected": [
      "p",
      "p",
      "p",
      "p"
    ],
    "results": [
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p",
      "p"
    ],
    "kept": [
      "p",
      "p",
      "p"
    ],
    "secret": [
      "p",
      "p",
      "p"
    ],
    "inferred": [
      "p",
      "p",
      "p"
    ],
    "http://cavaj-java-decompiler.en.softonic.com/).": [
      "ol",
      "li"
    ],
    "cajav": [
      "ol",
      "li"
    ],
    "main": [
      "ol",
      "li"
    ],
    "menu": [
      "ol",
      "li"
    ],
    "navigate": [
      "ol",
      "li"
    ],
    "file-open": [
      "ol",
      "li"
    ],
    "http//cavaj-java-decompiler.en.softonic.com/": [
      "a"
    ],
    "open": [
      "b",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "supposed": [
      "p"
    ],
    "read": [
      "p"
    ],
    "attach": [
      "ol",
      "li"
    ],
    "identify": [
      "ol",
      "li"
    ],
    "executables)": [
      "ol",
      "li"
    ],
    "command": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "prompt": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "microsoft": [
      "ol",
      "li"
    ],
    "visual": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "studio’s": [
      "ol",
      "li"
    ],
    "installed": [
      "ol",
      "li"
    ],
    "studio,": [
      "ol",
      "li"
    ],
    "dumpbin": [
      "ol",
      "ol",
      "li",
      "li",
      "i",
      "i"
    ],
    "windows": [
      "ol",
      "li"
    ],
    "-all": [
      "ol",
      "li",
      "i"
    ],
    "executable_name": [
      "ol",
      "li",
      "i"
    ],
    "bin_outputtxt.": [
      "ol",
      "li"
    ],
    "give": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "you": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "list": [
      "ol",
      "li"
    ],
    "dependencies": [
      "ol",
      "li"
    ],
    "dlls": [
      "ol",
      "li"
    ],
    "manager": [
      "ol",
      "li",
      "i"
    ],
    "find": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "id": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "number": [
      "ol",
      "li"
    ],
    "sub-process": [
      "ol",
      "li"
    ],
    "view": [
      "ol",
      "li",
      "i"
    ],
    "tree": [
      "ol",
      "li",
      "i"
    ],
    "option": [
      "ol",
      "li"
    ],
    "sub-processes.": [
      "ol",
      "li"
    ],
    "netstat": [
      "ol",
      "ol",
      "li",
      "li",
      "i",
      "i"
    ],
    "-ano": [
      "ol",
      "li",
      "i"
    ],
    "net_outputtxt.": [
      "ol",
      "li",
      "i"
    ],
    "filter": [
      "ol",
      "li"
    ],
    "net_outputtxt": [
      "ol",
      "li"
    ],
    "show": [
      "ol",
      "li"
    ],
    "only": [
      "ol",
      "li"
    ],
    "connections": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "opened": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "numbers)": [
      "ol",
      "li"
    ],
    "order": [
      "ol",
      "li"
    ],
    "out": [
      "ol",
      "li"
    ],
    "tcp/udp": [
      "ol",
      "li"
    ],
    "explorer": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "www.sysinternals.com).": [
      "ol",
      "li"
    ],
    "wireshark": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "up": [
      "ol",
      "li"
    ],
    "filters": [
      "ol",
      "li"
    ],
    "previous": [
      "ol",
      "li"
    ],
    "name": [
      "ol",
      "li"
    ],
    "port": [
      "ol",
      "li"
    ],
    "numbers": [
      "ol",
      "li"
    ],
    "etc.": [
      "ol",
      "li"
    ],
    "reduce": [
      "ol",
      "li"
    ],
    "amount": [
      "ol",
      "li"
    ],
    "noise": [
      "ol",
      "li"
    ],
    "looking": [
      "ol",
      "li"
    ],
    "kernel": [
      "ol",
      "li"
    ],
    "objects": [
      "ol",
      "li"
    ],
    "network.": [
      "ol",
      "li"
    ],
    "bin_outputtxt": [
      "i"
    ],
    "wwwsysinternals.com": [
      "a"
    ],
    "discovery/monitoring": [
      "p"
    ],
    "conclusions": [
      "h1"
    ],
    "should": [
      "p"
    ],
    "hidden": [
      "p"
    ],
    "ill-intended": [
      "p"
    ],
    "users": [
      "p"
    ],
    "reversing": [
      "p"
    ],
    "however": [
      "p"
    ],
    "counter": [
      "p"
    ],
    "bug": [
      "p"
    ],
    "recommended": [
      "p"
    ],
    "discovery": [
      "p"
    ],
    "many": [
      "p"
    ],
    "inner": [
      "p"
    ],
    "workings": [
      "p"
    ],
    "i]": [
      "div",
      "div",
      "p"
    ],
    "next-generation": [
      "div",
      "div",
      "p",
      "b"
    ],
    "chris": [
      "div",
      "div",
      "p"
    ],
    "coakley": [
      "div",
      "div",
      "p"
    ],
    "jay": [
      "div",
      "div",
      "p"
    ],
    "freeman": [
      "div",
      "div",
      "p"
    ],
    "robert": [
      "div",
      "div",
      "p"
    ],
    "dick": [
      "div",
      "div",
      "p"
    ],
    "anacapa": [
      "div",
      "div",
      "p"
    ],
    "sciences": [
      "div",
      "div",
      "p"
    ],
    "inc": [
      "div",
      "div",
      "p"
    ],
    "http//www.anacapasciences.com/publications/protecting_software2005.02.09.pdf": [
      "div",
      "div",
      "p",
      "a"
    ],
    "ii]": [
      "div",
      "div",
      "p"
    ],
    "hash": [
      "div",
      "div",
      "p",
      "b"
    ],
    "john": [
      "div",
      "div",
      "p"
    ],
    "aycock": [
      "div",
      "div",
      "p"
    ],
    "rennie": [
      "div",
      "div",
      "p"
    ],
    "degraaf": [
      "div",
      "div",
      "p"
    ],
    "michael": [
      "div",
      "div",
      "p"
    ],
    "jacobson": [
      "div",
      "div",
      "p"
    ],
    "jr": [
      "div",
      "div",
      "p"
    ],
    "university": [
      "div",
      "div",
      "p"
    ],
    "calgary": [
      "div",
      "div",
      "p"
    ],
    "http//pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf": [
      "div",
      "div",
      "p",
      "a"
    ],
    "iii]": [
      "div",
      "div",
      "p"
    ],
    "http//www.woodmann.com/crackz/tutorials/protect.htm": [
      "div",
      "div",
      "p",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Execute Test Cases",
      "Conclusions"
    ],
    "ul": [
      "All software applications",
      "Step 1: Understand attack scenarios \r\n    Step 2: Analyze causes and countermeasures \r\n    Step 3: Execute test cases",
      "Recovering source code \r\n    Recovering software design and architecture"
    ],
    "li": [
      "All software applications",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Execute test cases",
      "Recovering source code",
      "Recovering software design and architecture",
      "Attacker gets a copy of application binary/object/class files.",
      "Attacker uses a tool to translate binary/object/class files into source code.",
      "Attacker modifies source code and rebuilds application (optional).",
      "The attacker gets a copy of an application’s binary/object/class files.",
      "The attacker analyzes the application statically, using dependency checker tools to see how the application is decomposed.",
      "The attacker analyzes the application using dissasembler to see how it chooses different logical paths based on different output choices.",
      "The attacker exercises the application while monitoring its activity with file system, network, databases, registry, memory, and third-party APIs to see how it interacts with its environment.",
      "The attacker collects output from steps 2, 3, and 4 to determine the application’s design and architecture.",
      "Download and install IDA Pro (http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/IDA-PRO.shtml).",
      "Run IDA Pro and select a binary file.",
      "Start disassembling.",
      "Download and install Cavaj Decompiler (http://cavaj-java-decompiler.en.softonic.com/).",
      "Run Cajav decompiler.",
      "In the main menu, navigate to File->Open and select a target Java class file.",
      "Download and install a debugger.",
      "Execute the debugger and attach it to the target application.",
      "Start debugging application.",
      "Identify binary executable(s) for an application.",
      "Open a command prompt.",
      "In Microsoft    Visual Studio’s command prompt (installed with Visual Studio), execute dumpbin command in Windows:    dumpbin -all executable_name > bin_output.txt. The output file will give you a list of all the dependencies, DLLs and API names for the executable.",
      "Execute the application.",
      "Open Task Manager, find an application process, and note the process id number for the application process and any sub-process (you must select the view process tree option to see sub-processes).",
      "In a command prompt, execute the netstat command: netstat -ano > net_output.txt.",
      "Filter the net_output.txt file to show only connections opened by process id number(s) from step 5 in order to find out what TCP/UDP connections are opened by the application.",
      "Download, install, and execute Process Explorer (www.sysinternals.com).",
      "Download, install, and execute Wireshark.",
      "Set up filters in both Process Explorer and Wireshark using information from the previous steps (process name, port numbers, etc). This will reduce the amount of noise in these tools.",
      "Use the application under test while looking at output from Process Explorer and Wireshark. These tools will give you details on how the application interacts with its environment (file system, registry, kernel objects, and network)."
    ],
    "p": [
      "Reverse engineering of software is the process of inferring details about the architecture, design, or implementation of a software application after the application has been built and released.    This attack commonly focuses on recovering the source code of the target application, but it may also focus in discovering its design and architecture.",
      "Follow these steps to test for reverse engineering bugs:",
      "First, it is necessary to understand under what scenarios and for what purposes attackers utilize reverse engineering:",
      "Reverse engineering is often used to recover the source code of an application from a binary file or an intermediate file such as a Java class. For this purpose, the attacker uses a reverse engineering tool, such as a dissasembler or a decompiler, to parse the compiled or built source code in an attempt to reverse the compiling or building process and reconstruct the actual source code that created the file, line by line. Once the attacker gets the output of the code recovery tool, he usually uses the output source in an attempt to reconstruct the application. Attackers use this technique to recover source code for a program, to modify the code to achieve a desired task (such as getting rid of a registration/activation process, or to bypass a security check), and then to rebuild the application into a modified version that suits the attacker’s needs.",
      "In detail:",
      "Note that the last step is not a requirement for a reverse engineering attack.",
      "Software applications work by making internal logical decisions and interacting with their environments. For instance, an application might have different if/then/else or case conditions to choose different logical paths. In addition, to properly operate, most applications need to access files from the hard drive, send information over the network, consume memory, use the registry (in Windows), or interact with a database. By analyzing how and when an application takes logical decisions and how it interacts with its environment, an attacker can determine the design of a program, even when this design is not intuitive.",
      "In this scenario, an attacker uses a set of tools including dissasemblers, decompilers, debuggers, dependency checkers, and monitoring tools to discover the details of how the application is designed and its architecture. In short, how the application decides different internal paths and interacts with its environment.",
      "In detail:",
      "The following step, before executing practical test cases, is to understand why reverse engineering bugs are possible and how to protect against them.",
      "Reverse engineering bugs exist by default in any software application because they follow the premise that any engineering process can be reversed.    Shippable applications must produce executable files such as binaries or class files, which can become the target of reverse engineering attacks. In addition, all software applications must follow different execution paths and interact with their environment if they want to operate properly, thus opening the door for reverse engineering attacks on the behavior of the application. To protect against reverse engineering attacks, applications must take extra steps during both development and during the compilation/building process.",
      "Disassembling is the process of recovering the application’s source code by parsing the binary or class files that the application uses to execute. There are different tools that perform static disassembling, such as IDA Pro (for numerous types of binary files) and Cavaj (specifically for Java classes), by parsing the binary or class and reconstructing the source code. In addition, these tools might draw a logical flow of the application, such as a flowchart showing the different conditions and branches that the application might take. To protect against dissasemblers, developers are encouraged to use anti-disassembling techniques. Two examples of methods that work for anti-disassembly are obfuscation and code encryption.",
      "Developers can mitigate the impact of reverse engineering attacks on applications by adding an extra step to the build/compilation process that obfuscates the application’s source code.    Obfuscation works by replacing specific instructions, such as targets of branch statements, with jumps to intermediate functions, using computed branches in which the target of a branch statement is dynamically computed, or by making all non-conditional branches conditional by inserting false predicates [i].    Each of these methods has as its primary goal to defeat any dissasembler from correctly interpreting and recovering the application’s source code.",
      "Recent anti-disassembly research proposes the use of code encryption to protect against reverse engineering attacks by encrypting machine code and decrypting it with an encryption key as it executes. Reverse-engineering hackers obviously would not have the cryptographic key [ii].",
      "Debugging is the process of analyzing the sequence of instructions that a program follows while it executes. As mentioned before, debugging can be of great benefit when executing reverse engineering attacks because it shows the attacker what the application does while running.    Usually, reverse engineers will use a low-level debugger that can hook at kernel-level (or ring-0), such as SoftIce or WinIce. Attackers might also utilize user-mode debuggers such as ntsd or OllyDbg.",
      "To protect against reverse engineering attacks that are accomplished through debugging, developers can use different anti-debugging techniques such as checking for the presence of a debugger, inserting timers or break-points, or sending commands to void any debuggers that might be attached to the application. This requires the developer to add the necessary source code to the application to do the actual checks and to take the appropriate measures in case a debugger is found. For more information, see Anti-Debugging & Software Protection Advice [iii].",
      "Developers can take additional security measures to make it difficult for reverse engineers to succeed in inferring the application’s behavior, including renaming API and function names, executable modules, and libraries with names that don’t tell anything about the application’s design.",
      "It is also important to never ship debug symbols for applications in applications where the impact of reverse engineering is high, because symbols reveal important details about how the application is developed.",
      "Finally, if reverse engineering is a very high risk, developers and architects can look into inserting random components and behavior into the application to fool attackers into following paths that are not really part of the application’s design. The goal is to make reverse engineering the application so tedious that attackers become discouraged and stop trying.",
      "Now that you’ve reviewed the theoretical aspects of reverse engineering bugs, it is necessary to execute practical test cases to test your application against them.",
      "Follow these steps to test for reverse engineering by using a dissasembler:",
      "Expected results:    The application is vulnerable if any implementation or design details that must be kept secret can be inferred from IDA Pro.",
      "Follow these steps to test for reverse engineering using a Java decompiler:",
      "Expected results: The application is vulnerable if Cavaj shows source code that is not supposed to be read by an attacker.",
      "Follow these steps to test for reverse engineering by using a debugger:",
      "Expected results: The application is vulnerable if any implementation or design details that must be kept secret can be inferred from using the debugger.",
      "Follow these steps to test for reverse engineering by using monitoring tools:",
      "Expected results:    The application is vulnerable if any implementation or design details that must be kept secret can be inferred from the output of the discovery/monitoring tools.",
      "Reverse engineering attacks focus on recovering implementation and design details that should be hidden from ill-intended users. To test for reverse engineering bugs, it is necessary to understand the different attack scenarios, such as reversing a binary or class file, to determine the behavior, design, or architecture of a software application. These attacks are possible by default, because any engineering process can be reversed. However, to counter the impact of reverse engineering bugs, developers can use anti-disassembly and anti-debugging techniques. Finally, to test for this bug in your application, it is recommended that you use a set of disassembling, debugging, discovery, and monitoring tools to discover as many details as possible about the inner workings of your application. This, after all, is how the attacker works.",
      "[i] Next-Generation Protection Against Reverse Engineering. Chris Coakley, Jay Freeman, Robert Dick.    Anacapa Sciences, Inc.    http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf",
      "[ii]  Anti-Disassembly using Cryptographic Hash Functions. John Aycock, Rennie deGraaf, and Michael Jacobson, Jr.    University of Calgary.    http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf",
      "[iii] Anti-Debugging & Software Protection Advice. http://www.woodmann.com/crackz/Tutorials/Protect.htm"
    ],
    "h2": [
      "Scenario 1: Recovering source code",
      "Scenario 2: Recovering software design and architecture",
      "Anti-disassembling",
      "Anti-debugging",
      "Additional countermeasures",
      "Test for reverse engineering by using a dissasembler",
      "Test for reverse engineering by using a Java decompiler",
      "Test for reverse engineering by using a debugger",
      "Test for reverse engineering by using monitoring tools"
    ],
    "em": [
      "Scenario 1: Recovering source code",
      "Scenario 2: Recovering software design and architecture",
      "Anti-disassembling",
      "Anti-debugging",
      "Anti-Debugging & Software Protection Advice",
      "Additional countermeasures",
      "Test for reverse engineering by using a dissasembler",
      "Test for reverse engineering by using a Java decompiler",
      "Test for reverse engineering by using a debugger",
      "Test for reverse engineering by using monitoring tools"
    ],
    "ol": [
      "Attacker gets a copy of application binary/object/class files. \r\n    Attacker uses a tool to translate binary/object/class files into source code. \r\n    Attacker modifies source code and rebuilds application (optional).",
      "The attacker gets a copy of an application’s binary/object/class files. \r\n    The attacker analyzes the application statically, using dependency checker tools to see how the application is decomposed. \r\n    The attacker analyzes the application using dissasembler to see how it chooses different logical paths based on different output choices. \r\n    The attacker exercises the application while monitoring its activity with file system, network, databases, registry, memory, and third-party APIs to see how it interacts with its environment. \r\n    The attacker collects output from steps 2, 3, and 4 to determine the application’s design and architecture.",
      "Download and install IDA Pro (http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/IDA-PRO.shtml). \r\n    Run IDA Pro and select a binary file. \r\n    Start disassembling.",
      "Download and install Cavaj Decompiler (http://cavaj-java-decompiler.en.softonic.com/). \r\n    Run Cajav decompiler. \r\n    In the main menu, navigate to File->Open and select a target Java class file.",
      "Download and install a debugger. \r\n    Execute the debugger and attach it to the target application. \r\n    Start debugging application.",
      "Identify binary executable(s) for an application. \r\n    Open a command prompt. \r\n    In Microsoft    Visual Studio’s command prompt (installed with Visual Studio), execute dumpbin command in Windows:    dumpbin -all executable_name > bin_output.txt. The output file will give you a list of all the dependencies, DLLs and API names for the executable. \r\n    Execute the application. \r\n    Open Task Manager, find an application process, and note the process id number for the application process and any sub-process (you must select the view process tree option to see sub-processes). \r\n    In a command prompt, execute the netstat command: netstat -ano > net_output.txt.\r\n    Filter the net_output.txt file to show only connections opened by process id number(s) from step 5 in order to find out what TCP/UDP connections are opened by the application. \r\n    Download, install, and execute Process Explorer (www.sysinternals.com). \r\n    Download, install, and execute Wireshark. \r\n    Set up filters in both Process Explorer and Wireshark using information from the previous steps (process name, port numbers, etc). This will reduce the amount of noise in these tools. \r\n    Use the application under test while looking at output from Process Explorer and Wireshark. These tools will give you details on how the application interacts with its environment (file system, registry, kernel objects, and network)."
    ],
    "i": [
      "if/then/else",
      "case",
      "SoftIce",
      "WinIce",
      "ntsd",
      "OllyDbg.",
      "dumpbin",
      "dumpbin -all executable_name > bin_output.txt",
      "Task Manager",
      "view process tree",
      "netstat",
      "netstat -ano > net_output.txt."
    ],
    "a": [
      "http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/IDA-PRO.shtml",
      "http://cavaj-java-decompiler.en.softonic.com/",
      "www.sysinternals.com",
      "http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf",
      "http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf",
      "http://www.woodmann.com/crackz/Tutorials/Protect.htm"
    ],
    "b": [
      "File",
      "Open",
      "",
      "Next-Generation Protection Against Reverse Engineering",
      "Anti-Disassembly using Cryptographic Hash Functions.",
      "Anti-Debugging & Software Protection Advice"
    ],
    "div": [
      "[i] Next-Generation Protection Against Reverse Engineering. Chris Coakley, Jay Freeman, Robert Dick.    Anacapa Sciences, Inc.    http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf\r\n    \r\n    \r\n      [ii]  Anti-Disassembly using Cryptographic Hash Functions. John Aycock, Rennie deGraaf, and Michael Jacobson, Jr.    University of Calgary.    http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf\r\n    \r\n    \r\n      [iii] Anti-Debugging & Software Protection Advice. http://www.woodmann.com/crackz/Tutorials/Protect.htm",
      "[i] Next-Generation Protection Against Reverse Engineering. Chris Coakley, Jay Freeman, Robert Dick.    Anacapa Sciences, Inc.    http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf",
      "[ii]  Anti-Disassembly using Cryptographic Hash Functions. John Aycock, Rennie deGraaf, and Michael Jacobson, Jr.    University of Calgary.    http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf",
      "[iii] Anti-Debugging & Software Protection Advice. http://www.woodmann.com/crackz/Tutorials/Protect.htm"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/IDA-PRO.shtml",
      "text": "http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/IDA-PRO.shtml"
    },
    {
      "href": "http://cavaj-java-decompiler.en.softonic.com/",
      "text": "http://cavaj-java-decompiler.en.softonic.com/"
    },
    {
      "href": "http://www.sysinternals.com/",
      "text": "www.sysinternals.com"
    },
    {
      "href": "http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf",
      "text": "http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf"
    },
    {
      "href": "http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf",
      "text": "http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf"
    },
    {
      "href": "http://www.woodmann.com/crackz/Tutorials/Protect.htm",
      "text": "http://www.woodmann.com/crackz/Tutorials/Protect.htm"
    }
  ],
  "html": "<h1>\r\n     Applies to \r\n  </h1>\r\n  <ul>\r\n    <li>All software applications</li>\r\n  </ul>\r\n  <h1>\r\n     Summary \r\n  </h1>\r\n  <p>Reverse engineering of software is the process of inferring details about the architecture, design, or implementation of a software application after the application has been built and released.    This attack commonly focuses on recovering the source code of the target application, but it may also focus in discovering its design and architecture.    </p>\r\n  <p>Follow these steps to test for reverse engineering bugs:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Execute test cases</li>\r\n  </ul>\r\n  <h1>\r\n     Step 1: Understand Attack Scenarios \r\n  </h1>\r\n  <p>First, it is necessary to understand under what scenarios and for what purposes attackers utilize reverse engineering:</p>\r\n  <ul>\r\n    <li>Recovering source code </li>\r\n    <li>Recovering software design and architecture</li>\r\n  </ul>\r\n  <h2>\r\n    <em>Scenario 1: Recovering source code</em>\r\n  </h2>\r\n  <p>Reverse engineering is often used to recover the source code of an application from a binary file or an intermediate file such as a Java class. For this purpose, the attacker uses a reverse engineering tool, such as a dissasembler or a decompiler, to parse the compiled or built source code in an attempt to reverse the compiling or building process and reconstruct the actual source code that created the file, line by line. Once the attacker gets the output of the code recovery tool, he usually uses the output source in an attempt to reconstruct the application. Attackers use this technique to recover source code for a program, to modify the code to achieve a desired task (such as getting rid of a registration/activation process, or to bypass a security check), and then to rebuild the application into a modified version that suits the attacker’s needs.</p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>Attacker gets a copy of application binary/object/class files. </li>\r\n    <li>Attacker uses a tool to translate binary/object/class files into source code. </li>\r\n    <li>Attacker modifies source code and rebuilds application (optional).</li>\r\n  </ol>\r\n  <p>Note that the last step is not a requirement for a reverse engineering attack.</p>\r\n  <h2>\r\n    <em>Scenario 2: Recovering software design and architecture</em>\r\n  </h2>\r\n  <p>Software applications work by making internal logical decisions and interacting with their environments. For instance, an application might have different <i>if/then/else</i> or <i>case</i> conditions to choose different logical paths. In addition, to properly operate, most applications need to access files from the hard drive, send information over the network, consume memory, use the registry (in Windows), or interact with a database. By analyzing how and when an application takes logical decisions and how it interacts with its environment, an attacker can determine the design of a program, even when this design is not intuitive.</p>\r\n  <p>In this scenario, an attacker uses a set of tools including dissasemblers, decompilers, debuggers, dependency checkers, and monitoring tools to discover the details of how the application is designed and its architecture. In short, how the application decides different internal paths and interacts with its environment.</p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The attacker gets a copy of an application’s binary/object/class files. </li>\r\n    <li>The attacker analyzes the application statically, using dependency checker tools to see how the application is decomposed. </li>\r\n    <li>The attacker analyzes the application using dissasembler to see how it chooses different logical paths based on different output choices. </li>\r\n    <li>The attacker exercises the application while monitoring its activity with file system, network, databases, registry, memory, and third-party APIs to see how it interacts with its environment. </li>\r\n    <li>The attacker collects output from steps 2, 3, and 4 to determine the application’s design and architecture.</li>\r\n  </ol>\r\n  <h1>\r\n     Step 2: Analyze Causes and Countermeasures \r\n  </h1>\r\n  <p>The following step, before executing practical test cases, is to understand why reverse engineering bugs are possible and how to protect against them.</p>\r\n  <p>Reverse engineering bugs exist by default in any software application because they follow the premise that any engineering process can be reversed.    Shippable applications must produce executable files such as binaries or class files, which can become the target of reverse engineering attacks. In addition, all software applications must follow different execution paths and interact with their environment if they want to operate properly, thus opening the door for reverse engineering attacks on the behavior of the application. To protect against reverse engineering attacks, applications must take extra steps during both development and during the compilation/building process.</p>\r\n  <h2>\r\n    <em>Anti-disassembling</em>\r\n  </h2>\r\n  <p>Disassembling is the process of recovering the application’s source code by parsing the binary or class files that the application uses to execute. There are different tools that perform static disassembling, such as IDA Pro (for numerous types of binary files) and Cavaj (specifically for Java classes), by parsing the binary or class and reconstructing the source code. In addition, these tools might draw a logical flow of the application, such as a flowchart showing the different conditions and branches that the application might take. To protect against dissasemblers, developers are encouraged to use anti-disassembling techniques. Two examples of methods that work for anti-disassembly are obfuscation and code encryption.</p>\r\n  <p>Developers can mitigate the impact of reverse engineering attacks on applications by adding an extra step to the build/compilation process that obfuscates the application’s source code.    Obfuscation works by replacing specific instructions, such as targets of branch statements, with jumps to intermediate functions, using computed branches in which the target of a branch statement is dynamically computed, or by making all non-conditional branches conditional by inserting false predicates [i].    Each of these methods has as its primary goal to defeat any dissasembler from correctly interpreting and recovering the application’s source code.</p>\r\n  <p>Recent anti-disassembly research proposes the use of code encryption to protect against reverse engineering attacks by encrypting machine code and decrypting it with an encryption key as it executes. Reverse-engineering hackers obviously would not have the cryptographic key [ii].      </p>\r\n  <h2>\r\n    <em>Anti-debugging</em>\r\n  </h2>\r\n  <p>Debugging is the process of analyzing the sequence of instructions that a program follows while it executes. As mentioned before, debugging can be of great benefit when executing reverse engineering attacks because it shows the attacker what the application does while running.    Usually, reverse engineers will use a low-level debugger that can hook at kernel-level (or ring-0), such as <i>SoftIce</i> or <i>WinIce</i>. Attackers might also utilize user-mode debuggers such as <i>ntsd</i> or <i>OllyDbg.</i></p>\r\n  <p>To protect against reverse engineering attacks that are accomplished through debugging, developers can use different anti-debugging techniques such as checking for the presence of a debugger, inserting timers or break-points, or sending commands to void any debuggers that might be attached to the application. This requires the developer to add the necessary source code to the application to do the actual checks and to take the appropriate measures in case a debugger is found. For more information, see <em>Anti-Debugging & Software Protection Advice </em>[iii].</p>\r\n  <h2>\r\n    <em>Additional countermeasures</em>\r\n  </h2>\r\n  <p>Developers can take additional security measures to make it difficult for reverse engineers to succeed in inferring the application’s behavior, including renaming API and function names, executable modules, and libraries with names that don’t tell anything about the application’s design.</p>\r\n  <p>It is also important to never ship debug symbols for applications in applications where the impact of reverse engineering is high, because symbols reveal important details about how the application is developed.</p>\r\n  <p>Finally, if reverse engineering is a very high risk, developers and architects can look into inserting random components and behavior into the application to fool attackers into following paths that are not really part of the application’s design. The goal is to make reverse engineering the application so tedious that attackers become discouraged and stop trying. </p>\r\n  <h1>\r\n     Step 3: Execute Test Cases \r\n  </h1>\r\n  <p>Now that you’ve reviewed the theoretical aspects of reverse engineering bugs, it is necessary to execute practical test cases to test your application against them.</p>\r\n  <h2>\r\n    <em>Test for reverse engineering by using a dissasembler</em>\r\n  </h2>\r\n  <p>Follow these steps to test for reverse engineering by using a dissasembler:</p>\r\n  <ol>\r\n    <li>Download and install IDA Pro (<a href=\"http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/IDA-PRO.shtml\">http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/IDA-PRO.shtml</a>). </li>\r\n    <li>Run IDA Pro and select a binary file. </li>\r\n    <li>Start disassembling.</li>\r\n  </ol>\r\n  <p>Expected results:    The application is vulnerable if any implementation or design details that must be kept secret can be inferred from IDA Pro.</p>\r\n  <h2>\r\n    <em>Test for reverse engineering by using a Java decompiler</em>\r\n  </h2>\r\n  <p>Follow these steps to test for reverse engineering using a Java decompiler:</p>\r\n  <ol>\r\n    <li>Download and install Cavaj Decompiler (<a href=\"http://cavaj-java-decompiler.en.softonic.com/\">http://cavaj-java-decompiler.en.softonic.com/</a>). </li>\r\n    <li>Run Cajav decompiler. </li>\r\n    <li>In the main menu, navigate to <b>File</b>-&gt;<b>Open </b>and select a target Java class file.</li>\r\n  </ol>\r\n  <p>Expected results: The application is vulnerable if Cavaj shows source code that is not supposed to be read by an attacker.</p>\r\n  <h2>\r\n    <em>Test for reverse engineering by using a debugger</em>\r\n  </h2>\r\n  <p>Follow these steps to test for reverse engineering by using a debugger:</p>\r\n  <ol>\r\n    <li>Download and install a debugger. </li>\r\n    <li>Execute the debugger and attach it to the target application. </li>\r\n    <li>Start debugging application.</li>\r\n  </ol>\r\n  <p>Expected results: The application is vulnerable if any implementation or design details that must be kept secret can be inferred from using the debugger.</p>\r\n  <h2>\r\n    <em>Test for reverse engineering by using monitoring tools</em>\r\n  </h2>\r\n  <p>Follow these steps to test for reverse engineering by using monitoring tools:</p>\r\n  <ol>\r\n    <li>Identify binary executable(s) for an application. </li>\r\n    <li>Open a command prompt. </li>\r\n    <li>In Microsoft    Visual Studio’s command prompt (installed with Visual Studio), execute <i>dumpbin</i> command in Windows:    <i>dumpbin -all executable_name &gt; bin_output.txt</i>. The output file will give you a list of all the dependencies, DLLs and API names for the executable. </li>\r\n    <li>Execute the application. </li>\r\n    <li>Open <i>Task Manager</i>, find an application process, and note the process id number for the application process and any sub-process (you must select the <i>view process tree</i> option to see sub-processes). </li>\r\n    <li>In a command prompt, execute the <i>netstat</i> command: <i>netstat -ano &gt; net_output.txt.</i></li>\r\n    <li>Filter the net_output.txt file to show only connections opened by process id number(s) from step 5 in order to find out what TCP/UDP connections are opened by the application. </li>\r\n    <li>Download, install, and execute Process Explorer (<a href=\"http://www.sysinternals.com/\">www.sysinternals.com</a>). </li>\r\n    <li>Download, install, and execute Wireshark. </li>\r\n    <li>Set up filters in both Process Explorer and Wireshark using information from the previous steps (process name, port numbers, etc). This will reduce the amount of noise in these tools. </li>\r\n    <li>Use the application under test while looking at output from Process Explorer and Wireshark. These tools will give you details on how the application interacts with its environment (file system, registry, kernel objects, and network).</li>\r\n  </ol>\r\n  <p>Expected results:    The application is vulnerable if any implementation or design details that must be kept secret can be inferred from the output of the discovery/monitoring tools.</p>\r\n  <h1>\r\n     Conclusions \r\n  </h1>\r\n  <p>Reverse engineering attacks focus on recovering implementation and design details that should be hidden from ill-intended users. To test for reverse engineering bugs, it is necessary to understand the different attack scenarios, such as reversing a binary or class file, to determine the behavior, design, or architecture of a software application. These attacks are possible by default, because any engineering process can be reversed. However, to counter the impact of reverse engineering bugs, developers can use anti-disassembly and anti-debugging techniques. Finally, to test for this bug in your application, it is recommended that you use a set of disassembling, debugging, discovery, and monitoring tools to discover as many details as possible about the inner workings of your application. This, after all, is how the attacker works.<b></b></p>\r\n  <div>\r\n    <hr />\r\n    <div>\r\n      <p>[i] <b>Next-Generation Protection Against Reverse Engineering</b>. Chris Coakley, Jay Freeman, Robert Dick.    Anacapa Sciences, Inc.    <a href=\"http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf\">http://www.anacapasciences.com/publications/protecting_software2005.02.09.pdf</a></p>\r\n    </div>\r\n    <div>\r\n      <p>[ii]  <b>Anti-Disassembly using Cryptographic Hash Functions. </b>John Aycock, Rennie deGraaf, and Michael Jacobson, Jr.    University of Calgary.    <a href=\"http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf\">http://pages.cpsc.ucalgary.ca/~aycock/papers/antidis.pdf</a></p>\r\n    </div>\r\n    <div>\r\n      <p>[iii] <b>Anti-Debugging & Software Protection Advice</b>. <a href=\"http://www.woodmann.com/crackz/Tutorials/Protect.htm\">http://www.woodmann.com/crackz/Tutorials/Protect.htm</a></p>\r\n    </div>\r\n  </div>"
}