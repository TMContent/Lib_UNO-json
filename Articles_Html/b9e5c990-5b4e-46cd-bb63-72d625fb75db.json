{
  "id": "b9e5c990-5b4e-46cd-bb63-72d625fb75db",
  "checksum": "80746134387280958778b5e4ef96b06cad1e54f4",
  "words": {
    "description": [
      "h1"
    ],
    "xslt": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "occurs": [
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "h1"
    ],
    "concatenates": [
      "p"
    ],
    "untrusted": [
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "into": [
      "p",
      "p",
      "p"
    ],
    "an": [
      "p"
    ],
    "xsl": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "stylesheet": [
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p"
    ],
    "allows": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "manipulate": [
      "p",
      "p",
      "p"
    ],
    "document": [
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "produced": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "rendered": [
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "user's": [
      "p",
      "p",
      "p",
      "p"
    ],
    "browser": [
      "p",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p"
    ],
    "server": [
      "p",
      "p"
    ],
    "interprets": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "but": [
      "p",
      "p",
      "p"
    ],
    "rare": [
      "p",
      "p"
    ],
    "usually": [
      "p"
    ],
    "documents": [
      "p",
      "p"
    ],
    "using": [
      "p"
    ],
    "stylesheets": [
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "interpreted": [
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "still": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "scripts": [
      "p"
    ],
    "thus": [
      "p"
    ],
    "enabling": [
      "p"
    ],
    "cross-site": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scripting": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p"
    ],
    "issue": [
      "p"
    ],
    "affects": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p"
    ],
    "applications": [
      "p",
      "p"
    ],
    "use": [
      "p"
    ],
    "non-static": [
      "p"
    ],
    "impact": [
      "h1"
    ],
    "most": [
      "p",
      "p"
    ],
    "likely": [
      "p"
    ],
    "impacts": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "contents": [
      "p"
    ],
    "applying": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "perform": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "such": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "because": [
      "p"
    ],
    "processors": [
      "p"
    ],
    "don't": [
      "p",
      "p"
    ],
    "treat": [
      "p"
    ],
    "default": [
      "p"
    ],
    "real": [
      "p",
      "p"
    ],
    "would": [
      "p",
      "p"
    ],
    "almost": [
      "p"
    ],
    "certainly": [
      "p"
    ],
    "choose": [
      "p"
    ],
    "method": [
      "p"
    ],
    "exploit": [
      "p",
      "p"
    ],
    "present": [
      "p"
    ],
    "authentication": [
      "p",
      "p"
    ],
    "which": [
      "p"
    ],
    "impractical": [
      "p"
    ],
    "therefore": [
      "p"
    ],
    "highly": [
      "p"
    ],
    "unlikely": [
      "p"
    ],
    "might": [
      "p"
    ],
    "abuse": [
      "p"
    ],
    "bypass": [
      "p"
    ],
    "otherwise": [
      "p"
    ],
    "there": [
      "p"
    ],
    "few": [
      "p"
    ],
    "scenarios": [
      "p"
    ],
    "where": [
      "p",
      "p"
    ],
    "want": [
      "p"
    ],
    "output": [
      "p"
    ],
    "parser": [
      "p"
    ],
    "for": [
      "p",
      "p"
    ],
    "purposes": [
      "p"
    ],
    "other": [
      "p",
      "p"
    ],
    "than": [
      "p"
    ],
    "used": [
      "p"
    ],
    "steal": [
      "p"
    ],
    "session": [
      "p"
    ],
    "identifiers": [
      "p"
    ],
    "redirect": [
      "p"
    ],
    "them": [
      "p"
    ],
    "sites": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "on": [
      "p"
    ],
    "behalf": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p"
    ],
    "authenticated": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p"
    ],
    "validate": [
      "p"
    ],
    "concatenate": [
      "p"
    ],
    "check": [
      "h1",
      "p"
    ],
    "adequate": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "against": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "validated": [
      "p"
    ],
    "concatenated": [
      "p"
    ],
    "specific": [
      "h1"
    ],
    "technology": [
      "h1"
    ],
    "php": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Specific Technology"
    ],
    "p": [
      "XSLT injection occurs when the application concatenates untrusted data into an XSL stylesheet. This allows the attacker to manipulate the document that is produced when the XSL stylesheet is rendered by the user's browser. If the application server interprets the rendered document as code, XSLT injection will result in arbitrary code injection, but this is rare. Usually, documents produced using XSL stylesheets are not interpreted as code by the server, but can still contain scripts that will by interpreted by the user's browser, thus enabling cross-site scripting attacks.",
      "This issue affects all applications that use non-static XSL stylesheets.",
      "The most likely impacts of XSLT injection attacks are that the attacker will be able to manipulate the contents of the document produced by applying the stylesheet, and will be able to perform cross-site scripting attacks.",
      "If the document produced by applying the stylesheet is interpreted as code by the application, XSLT injection will result in a code injection vulnerability, but such cases are rare, because most XSLT processors don't treat produced documents as code by default.",
      "A real attacker would almost certainly choose cross-site scripting as the method to exploit XSLT injection. If XSLT injection is present in authentication code, which is impractical and therefore highly unlikely, the attacker might abuse this vulnerability to bypass authentication. Otherwise, there are few real scenarios where the attacker would want to manipulate the output of the XSLT parser for purposes other than cross-site scripting. The cross-site scripting exploit can be used to steal user's session identifiers, redirect them to other sites, and perform actions on the user's behalf in applications where the user is authenticated.",
      "To prevent XSLT injection vulnerabilities, validate all data and don't concatenate user data into XSL stylesheets.",
      "To check for adequate protection against XSLT injection vulnerabilities, verify that all data is validated and that user data is not concatenated into XSL stylesheets."
    ],
    "ul": [
      "PHP XSLT Injection"
    ],
    "li": [
      "PHP XSLT Injection"
    ],
    "a": [
      "PHP XSLT Injection"
    ]
  },
  "links": [
    {
      "href": "0c03c774-eb34-4c5e-bbbb-c231fff51eb5",
      "text": "PHP XSLT Injection"
    }
  ],
  "html": "<h1>Description</h1><p>XSLT injection occurs when the application concatenates untrusted data into an XSL stylesheet. This allows the attacker to manipulate the document that is produced when the XSL stylesheet is rendered by the user's browser. If the application server interprets the rendered document as code, XSLT injection will result in arbitrary code injection, but this is rare. Usually, documents produced using XSL stylesheets are not interpreted as code by the server, but can still contain scripts that will by interpreted by the user's browser, thus enabling cross-site scripting attacks. \n</p><p>\nThis issue affects all applications that use non-static XSL stylesheets.\n</p><h1>Impact</h1><p>The most likely impacts of XSLT injection attacks are that the attacker will be able to manipulate the contents of the document produced by applying the stylesheet, and will be able to perform cross-site scripting attacks. \n</p><p>\nIf the document produced by applying the stylesheet is interpreted as code by the application, XSLT injection will result in a code injection vulnerability, but such cases are rare, because most XSLT processors don't treat produced documents as code by default. \n</p><p>\nA real attacker would almost certainly choose cross-site scripting as the method to exploit XSLT injection. If XSLT injection is present in authentication code, which is impractical and therefore highly unlikely, the attacker might abuse this vulnerability to bypass authentication. Otherwise, there are few real scenarios where the attacker would want to manipulate the output of the XSLT parser for purposes other than cross-site scripting. The cross-site scripting exploit can be used to steal user's session identifiers, redirect them to other sites, and perform actions on the user's behalf in applications where the user is authenticated.\n</p><h1>Countermeasures</h1><p>To prevent XSLT injection vulnerabilities, validate all data and don't concatenate user data into XSL stylesheets.\n</p><h1>Application Check</h1><p>To check for adequate protection against XSLT injection vulnerabilities, verify that all data is validated and that user data is not concatenated into XSL stylesheets.\n</p><h1>Specific Technology</h1><ul><li> <a href=\"0c03c774-eb34-4c5e-bbbb-c231fff51eb5\">PHP XSLT Injection</a></li></ul>"
}