{
  "id": "0e013545-46bc-4bac-8ea7-7fb8fd8d306c",
  "checksum": "548282aa4a13af7c6512529691c36211d6658a84",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "h1",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "p"
    ],
    "verify": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p"
    ],
    "lost": [
      "p",
      "p"
    ],
    "during": [
      "p",
      "p"
    ],
    "integer": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "conversion": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "typical": [
      "p"
    ],
    "errors": [
      "p"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "occur": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "title"
    ],
    "truncation": [
      "p",
      "p"
    ],
    "and": [
      "p"
    ],
    "losing": [
      "p"
    ],
    "sign": [
      "p"
    ],
    "information": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "if": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p"
    ],
    "unpredictable/unintended": [
      "p"
    ],
    "value": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "stored": [
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "variable": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p"
    ],
    "used": [
      "p"
    ],
    "program": [
      "p"
    ],
    "flow": [
      "p"
    ],
    "control": [
      "p"
    ],
    "memory": [
      "p"
    ],
    "operations": [
      "p",
      "p",
      "p"
    ],
    "or": [
      "p"
    ],
    "array": [
      "p"
    ],
    "indexing": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "execution": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "result": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "identify": [
      "p",
      "p"
    ],
    "all": [
      "p",
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "ranges": [
      "p"
    ],
    "checked": [
      "p"
    ],
    "before": [
      "p",
      "p",
      "p"
    ],
    "assigning": [
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p"
    ],
    "fix": [
      "h1",
      "p"
    ],
    "add": [
      "p",
      "p"
    ],
    "range": [
      "p",
      "p"
    ],
    "checks": [
      "p",
      "p"
    ],
    "valid": [
      "p"
    ],
    "problem": [
      "h1",
      "p"
    ],
    "example": [
      "h1",
      "h1",
      "p"
    ],
    "following": [
      "p"
    ],
    "because": [
      "p"
    ],
    "unsigned": [
      "p",
      "pre",
      "pre"
    ],
    "has": [
      "p"
    ],
    "larger": [
      "p"
    ],
    "maximum": [
      "p"
    ],
    "than": [
      "p"
    ],
    "signed": [
      "p",
      "pre"
    ],
    "exact": [
      "p"
    ],
    "error": [
      "p"
    ],
    "different": [
      "p",
      "p"
    ],
    "on": [
      "p"
    ],
    "platforms": [
      "p"
    ],
    "short": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "50000signed": [
      "pre"
    ],
    "b": [
      "pre",
      "pre"
    ],
    "static_castsigned": [
      "pre",
      "pre"
    ],
    "short(a);": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "above": [
      "p"
    ],
    "50000if": [
      "pre"
    ],
    "shrt_min": [
      "pre"
    ],
    "&&": [
      "pre"
    ],
    "shrt_max": [
      "pre"
    ],
    "short(a);else": [
      "pre"
    ],
    "{/*handle": [
      "pre"
    ],
    "error*/}": [
      "pre"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "convert": [
      "ul",
      "li",
      "a"
    ],
    "integers": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "correctly": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "protect": [
      "ul",
      "li",
      "a"
    ],
    "against": [
      "ul",
      "li",
      "a"
    ],
    "overflows": [
      "ul",
      "li",
      "a"
    ],
    "converted": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Related Items"
    ],
    "ul": [
      "C++",
      "Convert Integers Correctly\n      \n        Protect Against Integer Overflows"
    ],
    "li": [
      "C++",
      "Convert Integers Correctly",
      "Protect Against Integer Overflows"
    ],
    "p": [
      "Verify that data is not lost during integer conversion. Typical errors that may occur are truncation and losing sign information.",
      "If data is lost during conversion, an unpredictable/unintended value may be stored in a variable. If this variable is used for program flow control, memory operations, or array indexing, an arbitrary code execution vulnerability may result.",
      "Identify all integer conversion operations. Make sure that ranges are checked before assigning the result of the conversion to a variable.",
      "Identify all integer conversion operations. Add range checks to verify that the result of integer conversion is valid before assigning the result to a variable.",
      "The following code may result in truncation, because an unsigned integer has a larger maximum value than a signed integer. The exact error may be different on different platforms.",
      "To fix the problem example above, add range checks before assigning the result of conversion to a variable."
    ],
    "pre": [
      "unsigned short a = 50000;signed short b = static_cast<signed short>(a);",
      "unsigned short a = 50000;if (a > SHRT_MIN && a < SHRT_MAX) signed short b = static_cast<signed short>(a);else {/*handle error*/}"
    ],
    "br": [
      "",
      "",
      ""
    ],
    "a": [
      "Convert Integers Correctly",
      "Protect Against Integer Overflows"
    ]
  },
  "links": [
    {
      "href": "/article/e9748936-6e22-4c56-94e9-7f8522e4f06d",
      "text": "Convert Integers Correctly"
    },
    {
      "href": "/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345",
      "text": "Protect Against Integer Overflows"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Verify that data is not lost during integer conversion. Typical errors that may occur are truncation and losing sign information.</p>\n  <h1>Why</h1>\n  <p>If data is lost during conversion, an unpredictable/unintended value may be stored in a variable. If this variable is used for program flow control, memory operations, or array indexing, an arbitrary code execution vulnerability may result.</p>\n  <h1>How to Check</h1>\n  <p>Identify all integer conversion operations. Make sure that ranges are checked before assigning the result of the conversion to a variable.</p>\n  <h1>How to Fix</h1>\n  <p>Identify all integer conversion operations. Add range checks to verify that the result of integer conversion is valid before assigning the result to a variable.</p>\n  <h1>Problem Example</h1>\n  <p>The following code may result in truncation, because an unsigned integer has a larger maximum value than a signed integer. The exact error may be different on different platforms.</p>\n  <pre>unsigned short a = 50000;<br />signed short b = static_cast&lt;signed short&gt;(a);</pre>\n  <h1>Solution Example</h1>\n  <p>To fix the problem example above, add range checks before assigning the result of conversion to a variable.</p>\n  <pre>unsigned short a = 50000;<br />if (a &gt; SHRT_MIN && a &lt; SHRT_MAX) signed short b = static_cast&lt;signed short&gt;(a);<br />else &#123;/&#42;handle error&#42;/&#125;</pre>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/e9748936-6e22-4c56-94e9-7f8522e4f06d\">Convert Integers Correctly</a>\n      <li>\n        <a href=\"/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345\">Protect Against Integer Overflows</a>\n      </li>\n    </li>\n  </ul>"
}