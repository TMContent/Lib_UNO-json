{
  "id": "b8432fff-89f4-4772-9ce8-22fac663e973",
  "checksum": "5cd8826e4ac66577e5daeedbebee0f305d71e08e",
  "words": {
    "1": [
      "ul",
      "li",
      "span",
      "h2",
      "span"
    ],
    "2": [
      "ul",
      "li",
      "span",
      "h2",
      "span",
      "h1",
      "span",
      "ol",
      "li",
      "span"
    ],
    "3": [
      "ul",
      "li",
      "span",
      "h1",
      "span",
      "ol",
      "li",
      "span"
    ],
    "4": [
      "ul",
      "li",
      "span",
      "h1",
      "span"
    ],
    "100": [
      "p"
    ],
    "applies": [
      "h1",
      "span"
    ],
    "to": [
      "h1",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "li",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "li",
      "span",
      "span",
      "li",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "title"
    ],
    "applications": [
      "ul",
      "li",
      "span",
      "p",
      "p",
      "span",
      "ol",
      "li",
      "span"
    ],
    "that": [
      "ul",
      "li",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "p",
      "p",
      "span"
    ],
    "use": [
      "ul",
      "li",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "span",
      "span"
    ],
    "lightweight": [
      "ul",
      "li",
      "span",
      "p"
    ],
    "directory": [
      "ul",
      "li",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span"
    ],
    "access": [
      "ul",
      "li",
      "span",
      "p",
      "p",
      "span"
    ],
    "protocol": [
      "ul",
      "li",
      "span",
      "p",
      "p"
    ],
    "ldap)": [
      "ul",
      "li",
      "span",
      "p"
    ],
    "summary": [
      "h1",
      "span"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "li",
      "span",
      "span",
      "li",
      "li",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "li",
      "span",
      "span",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "li",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span"
    ],
    "is": [
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "p",
      "p",
      "span"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "h2",
      "span",
      "p",
      "span",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "span",
      "li",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "span"
    ],
    "used": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p"
    ],
    "query": [
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "ol",
      "li",
      "span"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "ul",
      "ul",
      "li",
      "span",
      "li",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "h1",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "h1",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span"
    ],
    "manage": [
      "p"
    ],
    "services": [
      "p"
    ],
    "running": [
      "p"
    ],
    "over": [
      "p",
      "ol",
      "li",
      "span"
    ],
    "tcp/ip": [
      "p"
    ],
    "corporate": [
      "p"
    ],
    "environments": [
      "p"
    ],
    "commonly": [
      "p",
      "p",
      "span"
    ],
    "ldap": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "p",
      "p",
      "span",
      "span",
      "ul",
      "ul",
      "li",
      "span",
      "li",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "span",
      "li",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "span",
      "li",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "span",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "trees": [
      "p",
      "p",
      "p",
      "span"
    ],
    "store": [
      "p"
    ],
    "organizational": [
      "p",
      "p"
    ],
    "information": [
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "p",
      "span",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "p",
      "span",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span"
    ],
    "useraccounts": [
      "p"
    ],
    "office": [
      "p"
    ],
    "locations": [
      "p"
    ],
    "units": [
      "p"
    ],
    "printers": [
      "p"
    ],
    "fax": [
      "p"
    ],
    "machines": [
      "p"
    ],
    "search": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "ul",
      "li"
    ],
    "build": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span"
    ],
    "queries": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "span"
    ],
    "consisting": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "p",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "ul",
      "li"
    ],
    "filters": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "ul",
      "li"
    ],
    "written": [
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "prefix": [
      "p",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span"
    ],
    "polish": [
      "p",
      "p"
    ],
    "notation": [
      "p",
      "p",
      "p"
    ],
    "consist": [
      "p",
      "p"
    ],
    "set": [
      "p",
      "p"
    ],
    "meta-characters": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "parenthesis": [
      "p",
      "p"
    ],
    "logical": [
      "p"
    ],
    "operators": [
      "p"
    ],
    "ands": [
      "p"
    ],
    "ors": [
      "p"
    ],
    "represented": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span"
    ],
    "‘&’": [
      "p"
    ],
    "‘|’": [
      "p"
    ],
    "respectively. for": [
      "p"
    ],
    "instance": [
      "p",
      "p"
    ],
    "following": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "ol",
      "li",
      "span"
    ],
    "returns": [
      "p",
      "p",
      "span"
    ],
    "list": [
      "p"
    ],
    "objects": [
      "p"
    ],
    "type": [
      "p",
      "p"
    ],
    "user": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "font",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "no": [
      "p"
    ],
    "matter": [
      "p"
    ],
    "what": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "span"
    ],
    "their": [
      "p"
    ],
    "unique": [
      "p"
    ],
    "identifier": [
      "p"
    ],
    "uid)": [
      "p"
    ],
    "&": [
      "i",
      "p",
      "font",
      "p",
      "font",
      "i",
      "i"
    ],
    "|": [
      "i",
      "i"
    ],
    "&(objectclass=user)(uid=*))": [
      "p",
      "font"
    ],
    "if": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "li",
      "span",
      "span"
    ],
    "an": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "p",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span"
    ],
    "application": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "span",
      "span",
      "span",
      "p",
      "span",
      "p"
    ],
    "passes": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "unsanitized": [
      "p",
      "span"
    ],
    "data": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "span",
      "h1",
      "span",
      "p",
      "p",
      "span"
    ],
    "attacker": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span"
    ],
    "capable": [
      "p",
      "span"
    ],
    "injecting": [
      "p",
      "span"
    ],
    "additional": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "h1",
      "span"
    ],
    "statements": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "span"
    ],
    "original": [
      "p",
      "span"
    ],
    "injection": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "ul",
      "ul",
      "li",
      "span",
      "li",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "h2",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "ul",
      "li",
      "title"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "span",
      "title"
    ],
    "are": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span"
    ],
    "exploited": [
      "p",
      "span"
    ],
    "execute": [
      "p",
      "span"
    ],
    "arbitrary": [
      "p",
      "span"
    ],
    "against": [
      "p",
      "span",
      "p",
      "span",
      "p"
    ],
    "thevulnerable": [
      "p",
      "span"
    ],
    "service this": [
      "p",
      "span"
    ],
    "vulnerability": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "can": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "occur": [
      "p",
      "span"
    ],
    "with": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p"
    ],
    "any": [
      "p",
      "span",
      "p",
      "font",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p"
    ],
    "version": [
      "p",
      "span"
    ],
    "since": [
      "p",
      "span"
    ],
    "it": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span"
    ],
    "affects": [
      "p",
      "span"
    ],
    "connecting": [
      "p",
      "span"
    ],
    "server": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "span"
    ],
    "not": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p"
    ],
    "actual": [
      "p",
      "span"
    ],
    "properly": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span"
    ],
    "test": [
      "p",
      "span",
      "ul",
      "li",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "title"
    ],
    "for": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "isrecommended": [
      "p",
      "span"
    ],
    "you": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "span"
    ],
    "follow": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "these": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "steps": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "span",
      "li",
      "span",
      "li",
      "span",
      "li",
      "span",
      "h1",
      "span",
      "h1",
      "span",
      "p",
      "span",
      "h1",
      "span",
      "h1",
      "span",
      "p"
    ],
    "understand": [
      "ul",
      "li",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span"
    ],
    "attack": [
      "ul",
      "li",
      "span",
      "h1",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "scenarios": [
      "ul",
      "li",
      "span",
      "h1",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "analyze": [
      "ul",
      "li",
      "span",
      "h1",
      "span"
    ],
    "causes": [
      "ul",
      "li",
      "span",
      "h1",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span"
    ],
    "countermeasures": [
      "ul",
      "li",
      "span",
      "h1",
      "span",
      "h2",
      "span",
      "p",
      "span"
    ],
    "start": [
      "ul",
      "li",
      "span",
      "h1",
      "span",
      "h2",
      "span",
      "p",
      "span"
    ],
    "testing": [
      "ul",
      "li",
      "span",
      "p",
      "span",
      "h1",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "h2",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "ul",
      "li"
    ],
    "exploring": [
      "ul",
      "li",
      "span",
      "h1",
      "span"
    ],
    "fine-tune": [
      "ul",
      "li",
      "span",
      "h1",
      "span",
      "p"
    ],
    "cases": [
      "ul",
      "li",
      "span",
      "p",
      "span",
      "p"
    ],
    "1 understand": [
      "h1",
      "span"
    ],
    "first": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "must": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "span"
    ],
    "details": [
      "p",
      "span"
    ],
    "common": [
      "p",
      "span",
      "p"
    ],
    "sql": [
      "p",
      "span",
      "p",
      "span"
    ],
    "xpath": [
      "p",
      "span",
      "p",
      "span"
    ],
    "there": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p"
    ],
    "two": [
      "p",
      "span",
      "p",
      "p"
    ],
    "types": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span"
    ],
    "attacks": [
      "p",
      "span",
      "p",
      "p",
      "span"
    ],
    "normal": [
      "ul",
      "li",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "blind": [
      "ul",
      "li",
      "span",
      "h2",
      "span",
      "p",
      "p",
      "span",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "scenario": [
      "h2",
      "span",
      "p",
      "h2",
      "span",
      "p"
    ],
    "this": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "background": [
      "p"
    ],
    "example": [
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "pseudo": [
      "p"
    ],
    "checks": [
      "p",
      "p",
      "p"
    ],
    "aclient": [
      "p"
    ],
    "named": [
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "“bob”": [
      "p"
    ],
    "password": [
      "p",
      "p"
    ],
    "“abc”": [
      "p"
    ],
    "bob": [
      "i",
      "p",
      "span",
      "ol",
      "li",
      "span"
    ],
    "abc": [
      "i"
    ],
    "find\"cn=bob": [
      "p",
      "font"
    ],
    "password=abc\"": [
      "p",
      "font"
    ],
    "equivalent": [
      "p"
    ],
    "first:": [
      "p"
    ],
    "find\"(&(cn=bob)(password=abc))\")": [
      "p",
      "font"
    ],
    "uses": [
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "indicate": [
      "p",
      "p",
      "p"
    ],
    "boolean": [
      "p",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font"
    ],
    "conditions": [
      "p",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "group": [
      "p"
    ],
    "aggregations": [
      "p"
    ],
    "-": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "font",
      "font",
      "font",
      "font",
      "font",
      "font"
    ],
    "and|": [
      "p",
      "font"
    ],
    "or!": [
      "p",
      "font"
    ],
    "not=": [
      "p",
      "font"
    ],
    "equals~=": [
      "p",
      "font"
    ],
    "approximately=": [
      "p",
      "font"
    ],
    "greater": [
      "p",
      "font"
    ],
    "than=": [
      "p",
      "font"
    ],
    "less": [
      "p",
      "font"
    ],
    "than*": [
      "p",
      "font"
    ],
    "character": [
      "p",
      "font"
    ],
    "grouping": [
      "p",
      "font",
      "p"
    ],
    "now": [
      "p",
      "p",
      "span"
    ],
    "suppose": [
      "p"
    ],
    "builds": [
      "p",
      "p",
      "p",
      "span"
    ],
    "check": [
      "p",
      "p",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span"
    ],
    "authentication": [
      "p",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span",
      "li",
      "p",
      "span"
    ],
    "entries": [
      "p"
    ],
    "name": [
      "p"
    ],
    "cn)": [
      "p"
    ],
    "userpassword)": [
      "p"
    ],
    "corresponding": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "p",
      "p",
      "span"
    ],
    "values": [
      "p",
      "p",
      "p"
    ],
    "cn": [
      "i"
    ],
    "userpassword": [
      "i"
    ],
    "&(cn=input_value1)(userpassword=input_value2))": [
      "p",
      "font"
    ],
    "implement": [
      "p"
    ],
    "php": [
      "p",
      "p"
    ],
    "page": [
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "span",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "span",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "span",
      "span",
      "p"
    ],
    "form": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "span",
      "p"
    ],
    "collect": [
      "p"
    ],
    "pass": [
      "p",
      "p"
    ],
    "variables": [
      "p"
    ],
    "login": [
      "p"
    ],
    "searchlogin": [
      "p",
      "font",
      "p",
      "font"
    ],
    "=": [
      "p",
      "font",
      "p",
      "p",
      "font",
      "font",
      "p",
      "font",
      "p",
      "font",
      "p",
      "font",
      "p",
      "font",
      "p",
      "font",
      "p",
      "p",
      "p",
      "font",
      "font",
      "font"
    ],
    "\"&(cn=\"": [
      "p",
      "font"
    ],
    "$_post'user']": [
      "p",
      "font"
    ],
    "\"(userpassword=\"": [
      "p",
      "font"
    ],
    "$_post'pass']": [
      "p",
      "font"
    ],
    "\")\";": [
      "p",
      "font"
    ],
    "then": [
      "p",
      "p",
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "\"*(cn=*))(|(cn=*\" password": [
      "p",
      "font"
    ],
    "\"any\"": [
      "p",
      "font"
    ],
    "result": [
      "p",
      "ol",
      "li",
      "span"
    ],
    "statement": [
      "p"
    ],
    "\"&(cn=*)(cn=*))(|(cn=*)(userpassword=any)))\"": [
      "p",
      "font"
    ],
    "always": [
      "p",
      "span"
    ],
    "true": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "leading": [
      "p",
      "span"
    ],
    "being": [
      "p",
      "span",
      "p"
    ],
    "able": [
      "p",
      "span"
    ],
    "bypass": [
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span"
    ],
    "without": [
      "p",
      "span"
    ],
    "valid": [
      "p",
      "span"
    ],
    "credentials": [
      "p",
      "span"
    ],
    "similar": [
      "p",
      "span",
      "p",
      "span"
    ],
    "variation": [
      "p",
      "span"
    ],
    "leads": [
      "p",
      "span"
    ],
    "disclosure": [
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span"
    ],
    "simple": [
      "p",
      "span",
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span"
    ],
    "display": [
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span"
    ],
    "personal": [
      "p",
      "span",
      "p",
      "span"
    ],
    "about": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "single": [
      "p",
      "span"
    ],
    "searchfilter": [
      "p",
      "font",
      "p",
      "font",
      "p",
      "font"
    ],
    "\"uid=\"": [
      "p",
      "font"
    ],
    "$_get'username']": [
      "p",
      "font"
    ],
    "\"\";": [
      "p",
      "font"
    ],
    "client": [
      "p",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "span",
      "span",
      "p",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "span",
      "span",
      "ol",
      "ol",
      "li",
      "li",
      "span",
      "span"
    ],
    "safe": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "p"
    ],
    "\"uid=bob)\";": [
      "p",
      "font"
    ],
    "however": [
      "p",
      "p",
      "p"
    ],
    "tamper": [
      "p"
    ],
    "username": [
      "p",
      "ol",
      "li",
      "span"
    ],
    "parameter": [
      "p",
      "p",
      "span",
      "p"
    ],
    "so": [
      "p",
      "p",
      "span",
      "p"
    ],
    "resulting": [
      "p",
      "p",
      "span"
    ],
    "filter": [
      "p",
      "p",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "looks": [
      "p",
      "p",
      "span"
    ],
    "like": [
      "p",
      "p",
      "span"
    ],
    "\"uid=*)\";": [
      "p",
      "font"
    ],
    "results": [
      "p",
      "span",
      "p",
      "span"
    ],
    "replying": [
      "p",
      "span"
    ],
    "from": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span"
    ],
    "all": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "p"
    ],
    "users": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span"
    ],
    "tree": [
      "p",
      "span",
      "span",
      "p",
      "span"
    ],
    "consists": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "span"
    ],
    "using": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "false": [
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "comparisons": [
      "p",
      "span"
    ],
    "infer": [
      "p",
      "span"
    ],
    "tree during": [
      "p"
    ],
    "displays": [
      "p"
    ],
    "printer": [
      "p"
    ],
    "&(printerid=printer_id)(objectclass=printer))": [
      "p",
      "font"
    ],
    "obtaining": [
      "p"
    ],
    "value": [
      "p"
    ],
    "printer_id": [
      "p"
    ],
    "variable": [
      "p"
    ],
    "url": [
      "p",
      "p",
      "span",
      "p",
      "p",
      "p",
      "font",
      "p"
    ],
    "printerfilter": [
      "p",
      "font"
    ],
    "\"&(printerid=\"": [
      "p",
      "font"
    ],
    "$_get'printer_id']": [
      "p",
      "font"
    ],
    "\"(objectclass=printer))\";": [
      "p",
      "font"
    ],
    "when": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p"
    ],
    "hplaserjet3015": [
      "p",
      "span"
    ],
    "printerid": [
      "p",
      "span"
    ],
    "&(printerid=hplaserjet3015)(objectclass=printer))": [
      "p",
      "font"
    ],
    "condition": [
      "p",
      "span",
      "p",
      "span"
    ],
    "find": [
      "p",
      "span"
    ],
    "out": [
      "p",
      "span"
    ],
    "ldad": [
      "p",
      "span"
    ],
    "has": [
      "p",
      "span"
    ],
    "attribute": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "span",
      "ol",
      "li",
      "span"
    ],
    "accounts": [
      "p",
      "span"
    ],
    "hplaserjet3015(users=*))": [
      "p",
      "font"
    ],
    "building": [
      "p",
      "span",
      "p"
    ],
    "&(printerid=hplaserjet3015)(users=*))(objectclass=printer))": [
      "p",
      "font"
    ],
    "only": [
      "p",
      "span",
      "p"
    ],
    "processed": [
      "p",
      "span"
    ],
    "exists": [
      "p",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span"
    ],
    "does": [
      "p",
      "span",
      "p",
      "p"
    ],
    "indeed": [
      "p",
      "span"
    ],
    "exist": [
      "p",
      "span"
    ],
    "string": [
      "p",
      "span",
      "h2",
      "span",
      "p",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ul",
      "li"
    ],
    "below": [
      "p",
      "span"
    ],
    "extends": [
      "p",
      "span"
    ],
    "checking": [
      "p",
      "span"
    ],
    "root": [
      "p",
      "span",
      "p",
      "span"
    ],
    "hplaserjet3015(users=root))": [
      "p",
      "font"
    ],
    "will": [
      "p",
      "span",
      "p"
    ],
    "return": [
      "p",
      "span"
    ],
    "next": [
      "p",
      "span"
    ],
    "them": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "span"
    ],
    "how": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "title"
    ],
    "defend": [
      "p",
      "span",
      "p"
    ],
    "caused": [
      "p",
      "span"
    ],
    "failure": [
      "p",
      "span",
      "p",
      "span"
    ],
    "validate": [
      "p",
      "span",
      "p",
      "p",
      "span"
    ],
    "sanitize": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "span"
    ],
    "parameters": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "p"
    ],
    "work": [
      "p",
      "span",
      "p",
      "span"
    ],
    "initializing": [
      "p",
      "span"
    ],
    "connection": [
      "p",
      "span"
    ],
    "submitting": [
      "p",
      "span",
      "p",
      "span"
    ],
    "built": [
      "p",
      "p",
      "span",
      "span"
    ],
    "user-supplied": [
      "p",
      "span"
    ],
    "creating": [
      "p",
      "span"
    ],
    "based": [
      "p",
      "span"
    ],
    "on": [
      "p",
      "span",
      "p",
      "span",
      "p"
    ],
    "direct": [
      "p",
      "span"
    ],
    "text": [
      "p",
      "span",
      "p"
    ],
    "fields": [
      "p",
      "span"
    ],
    "forms": [
      "p",
      "span",
      "p"
    ],
    "gui": [
      "p",
      "span",
      "p"
    ],
    "elements": [
      "p",
      "span"
    ],
    "indirect": [
      "p",
      "span",
      "p"
    ],
    "file": [
      "p",
      "span"
    ],
    "database": [
      "p",
      "span"
    ],
    "failing": [
      "p",
      "span"
    ],
    "constructing": [
      "p",
      "span"
    ],
    "cause": [
      "p",
      "span",
      "p",
      "span"
    ],
    "necessary": [
      "p",
      "p"
    ],
    "strings": [
      "p",
      "p",
      "p",
      "span"
    ],
    "ways": [
      "p"
    ],
    "validating": [
      "p"
    ],
    "sanitizing": [
      "p"
    ],
    "blacklisting": [
      "p",
      "p"
    ],
    "whitelisting blacklisting": [
      "p"
    ],
    "restricting": [
      "p"
    ],
    "dangerous": [
      "p",
      "p",
      "p"
    ],
    "characters in": [
      "p"
    ],
    "case": [
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "h1",
      "span",
      "p",
      "p",
      "span"
    ],
    "characters": [
      "p",
      "p",
      "span"
    ],
    "need": [
      "p"
    ],
    "include": [
      "p"
    ],
    "especially": [
      "p"
    ],
    ")": [
      "p",
      "i"
    ],
    ",": [
      "p"
    ],
    "operator": [
      "p",
      "p"
    ],
    "&),": [
      "p"
    ],
    "|).": [
      "p"
    ],
    "completely": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "percent": [
      "p"
    ],
    "variations": [
      "p",
      "p"
    ],
    "accounted": [
      "p"
    ],
    "alternative": [
      "p"
    ],
    "whitelisting": [
      "p",
      "p"
    ],
    "listing": [
      "p"
    ],
    "constructs": [
      "p"
    ],
    "rejecting": [
      "p"
    ],
    "construct": [
      "p"
    ],
    "match": [
      "p",
      "p"
    ],
    "concerned": [
      "p"
    ],
    "accounting": [
      "p"
    ],
    "whitelists": [
      "p",
      "p",
      "p"
    ],
    "just": [
      "p"
    ],
    "automatically": [
      "p"
    ],
    "denied": [
      "p"
    ],
    "care": [
      "p"
    ],
    "needed": [
      "p"
    ],
    "defense": [
      "p"
    ],
    "may": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "span",
      "span",
      "p",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "p"
    ],
    "difficult": [
      "p"
    ],
    "implement the": [
      "p"
    ],
    "examples": [
      "p"
    ],
    "present": [
      "p"
    ],
    "three": [
      "p"
    ],
    "expressions": [
      "p"
    ],
    "act": [
      "p"
    ],
    "integer,": [
      "p"
    ],
    "emails": [
      "p"
    ],
    "domain": [
      "p"
    ],
    "int": [
      "p",
      "font"
    ],
    "userinput": [
      "p",
      "font"
    ],
    "converttoint32(request.querystring(\"userinput\"));string": [
      "p",
      "font"
    ],
    "email": [
      "p",
      "font"
    ],
    "regexismatch(request.querystring(\"email\"),\"": [
      "p",
      "font"
    ],
    "^+@[^\\.].*\\.[a-z]{2,}$\"": [
      "p",
      "font"
    ],
    ";string": [
      "p",
      "font"
    ],
    "country": [
      "p",
      "font"
    ],
    "requestquerystring(\"country\")": [
      "p",
      "font"
    ],
    "{\"usa\"": [
      "p",
      "font"
    ],
    "\"uk\"}": [
      "p",
      "font"
    ],
    "countermeasure": [
      "p",
      "span"
    ],
    "top": [
      "p",
      "span"
    ],
    "validation": [
      "p",
      "span",
      "p",
      "span"
    ],
    "sanitization": [
      "p",
      "span"
    ],
    "strengthening": [
      "p",
      "span"
    ],
    "permissions": [
      "p",
      "p",
      "span",
      "span"
    ],
    "tree ldap": [
      "p",
      "span"
    ],
    "have": [
      "p",
      "span",
      "p"
    ],
    "different": [
      "p",
      "span",
      "p",
      "p",
      "span",
      "span"
    ],
    "attributes": [
      "p",
      "p",
      "span",
      "span",
      "p",
      "span"
    ],
    "important": [
      "p",
      "span"
    ],
    "order": [
      "p",
      "p",
      "span",
      "span"
    ],
    "decide": [
      "p",
      "span"
    ],
    "assign": [
      "p",
      "span"
    ],
    "addition": [
      "p",
      "span"
    ],
    "level": [
      "p",
      "span"
    ],
    "connect": [
      "p",
      "span"
    ],
    "should": [
      "p",
      "span",
      "p",
      "p",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p",
      "span",
      "p"
    ],
    "minimum": [
      "p",
      "span"
    ],
    "required": [
      "p",
      "span"
    ],
    "reduce": [
      "p",
      "span"
    ],
    "potential": [
      "p",
      "span"
    ],
    "impact": [
      "p",
      "span"
    ],
    "familiar": [
      "p",
      "span"
    ],
    "recognize": [
      "p",
      "span"
    ],
    "both": [
      "p",
      "span"
    ],
    "its": [
      "p",
      "span",
      "p"
    ],
    "continue": [
      "p",
      "span",
      "p",
      "span"
    ],
    "executing": [
      "p",
      "span"
    ],
    "basic": [
      "p",
      "span",
      "p",
      "span"
    ],
    "while": [
      "p",
      "span"
    ],
    "observing": [
      "p",
      "span"
    ],
    "reacts": [
      "p",
      "span"
    ],
    "similarly": [
      "p",
      "span"
    ],
    "other": [
      "p",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span",
      "p"
    ],
    "bugs": [
      "p",
      "span",
      "p",
      "span"
    ],
    "performs": [
      "p",
      "span"
    ],
    "meta-characters.": [
      "p",
      "span"
    ],
    "therefore": [
      "p",
      "span",
      "p"
    ],
    "recommended": [
      "p",
      "span",
      "p",
      "span"
    ],
    "one": [
      "p",
      "span"
    ],
    "|&(*!": [
      "p",
      "font"
    ],
    "look": [
      "p",
      "p"
    ],
    "errors": [
      "p"
    ],
    "generated": [
      "p"
    ],
    "specifically": [
      "p"
    ],
    "error": [
      "p",
      "p",
      "span"
    ],
    "messages": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "invalid": [
      "p"
    ],
    "sign": [
      "p"
    ],
    "part": [
      "p",
      "p",
      "span"
    ],
    "possible once": [
      "p"
    ],
    "successfully": [
      "p"
    ],
    "injected": [
      "p",
      "p",
      "span"
    ],
    "move": [
      "p"
    ],
    "open": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "browser": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "implemented": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "traditional": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "non-web": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "client/server": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "applications.": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span"
    ],
    "enter": [
      "ol",
      "li",
      "span"
    ],
    "containing": [
      "ol",
      "li",
      "span"
    ],
    "command": [
      "ol",
      "li",
      "span"
    ],
    "changes": [
      "ol",
      "li",
      "span"
    ],
    "submit": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "span"
    ],
    "expected": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "result the": [
      "p",
      "span",
      "p",
      "span",
      "p",
      "span"
    ],
    "authenticate": [
      "p",
      "span"
    ],
    "modify": [
      "ol",
      "li",
      "span",
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "expand": [
      "ol",
      "li",
      "span"
    ],
    "clients for": [
      "ol",
      "li",
      "span"
    ],
    "**|*|(objectclass=*))*(|(mail=*))": [
      "ol",
      "li",
      "font"
    ],
    "clients": [
      "p",
      "span"
    ],
    "attempt": [
      "ol",
      "li",
      "span",
      "p",
      "span"
    ],
    "deduce": [
      "ol",
      "li",
      "span"
    ],
    "sensitive": [
      "ol",
      "ol",
      "li",
      "span",
      "li",
      "span"
    ],
    "attributes for": [
      "ol",
      "li",
      "span"
    ],
    "your": [
      "ol",
      "li",
      "span",
      "p",
      "p",
      "span"
    ],
    "account": [
      "ol",
      "li",
      "span"
    ],
    "bob(account=*))": [
      "ol",
      "li",
      "font"
    ],
    "repeat": [
      "ol",
      "li",
      "span"
    ],
    "until": [
      "ol",
      "li",
      "span"
    ],
    "allow": [
      "p",
      "span",
      "p",
      "span"
    ],
    "during": [
      "p"
    ],
    "final": [
      "p"
    ],
    "according": [
      "p",
      "p",
      "span"
    ],
    "entry": [
      "p",
      "p",
      "p",
      "span"
    ],
    "point": [
      "p",
      "p",
      "span"
    ],
    "through for": [
      "p"
    ],
    "through": [
      "p",
      "p",
      "p",
      "p",
      "span"
    ],
    "url-encode": [
      "p"
    ],
    "meta-character": [
      "p"
    ],
    "confused": [
      "p"
    ],
    "name/value": [
      "p"
    ],
    "separator": [
      "p"
    ],
    "&).": [
      "p"
    ],
    "*(&(name=*))": [
      "p",
      "font"
    ],
    "- before": [
      "p",
      "font"
    ],
    "encoding*(%26(name=*))": [
      "p",
      "font"
    ],
    "- after": [
      "p",
      "font"
    ],
    "encoding": [
      "p",
      "font"
    ],
    "here": [
      "p"
    ],
    "some": [
      "p"
    ],
    "hex-encoded": [
      "p"
    ],
    "try": [
      "p"
    ],
    "%28%29%26%21%7c%2a%7c%2a%28%7c%28mail%3d%2a%29%29%2a%28%7c%28objectclass%3d%2a%29%29*)|%26": [
      "p",
      "font"
    ],
    "finally": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "points": [
      "p"
    ],
    "boxes": [
      "p"
    ],
    "sources": [
      "p"
    ],
    "remember": [
      "p"
    ],
    "urls": [
      "p",
      "p",
      "span"
    ],
    "ldap//host:port/dn?attributes?scope?": [
      "p",
      "span"
    ],
    "?extensions": [
      "p",
      "span"
    ],
    "inject": [
      "p",
      "span"
    ],
    "ldap//ldap.example.com/cn=john%20doe,dc=example,dc=comldap://ldap.example.com/cn=john%20doe)(users=*,dc=example,dc=com": [
      "p",
      "font"
    ],
    "conclusions": [
      "h1",
      "span"
    ],
    "bypassing": [
      "p",
      "span"
    ],
    "disclosing": [
      "p",
      "span"
    ],
    "tree the": [
      "p",
      "span"
    ],
    "lies": [
      "p",
      "span"
    ],
    "utilizing": [
      "p",
      "span"
    ],
    "begin": [
      "p",
      "span"
    ],
    "aimed": [
      "p",
      "span"
    ],
    "at": [
      "p",
      "span"
    ],
    "forcing": [
      "p",
      "span"
    ],
    "ldap-specific": [
      "p",
      "span"
    ],
    "finish": [
      "p",
      "span"
    ],
    "fine-tuning": [
      "p",
      "span"
    ],
    "resources": [
      "h1",
      "span"
    ],
    "representations": [
      "ul",
      "li"
    ],
    "see http//www.ietf.org/rfc/rfc1960.txt": [
      "ul",
      "li"
    ],
    "see http//www.owasp.org/index.php/testing_for_ldap_injection": [
      "ul",
      "li"
    ],
    "fuzz": [
      "ul",
      "li"
    ],
    "vectors": [
      "ul",
      "li"
    ],
    "see http//www.owasp.org/index.php/owasp_testing_guide_appendix_c:_fuzz_vectors": [
      "ul",
      "li"
    ],
    "http//www.ietf.org/rfc/rfc1960.txt": [
      "a"
    ],
    "http//www.owasp.org/index.php/testing_for_ldap_injection": [
      "a"
    ],
    "http//www.owasp.org/index.php/owasp_testing_guide_appendix_c:_fuzz_vectors": [
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Start Testing and Exploring",
      "Step 4: Fine-tune Test Case Data",
      "Conclusions",
      "Additional Resources"
    ],
    "span": [
      "Applies To",
      "Applications that use Lightweight Directory Access Protocol (LDAP)",
      "Summary",
      "",
      "If an application passes unsanitized user data to build LDAP queries, an attacker is capable of injecting additional statements to the original query. LDAP injection vulnerabilities are exploited to execute arbitrary LDAP statements against thevulnerable directory service. This vulnerability can occur with any version of LDAP since it affects the application connecting to the LDAP server and not the actual LDAP server. To properly test for LDAP injection vulnerabilities, it isrecommended that you follow these steps:",
      "",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Fine-tune test cases",
      "Step 1: Understand Attack Scenarios",
      "First, you must understand the details of LDAP injection attack scenarios. In common with SQL and XPath injection, there are two types of LDAP injection attacks:",
      "Normal LDAP injection",
      "Blind LDAP injection",
      "Scenario 1: Normal LDAP Injection",
      "This LDAP query is always true, leading to the attacker being able to bypass authentication without valid credentials.",
      "A similar variation of normal LDAP injection leads to information disclosure. An application uses a simple LDAP query to display personal information about a single user:",
      "In normal conditions, such as with the client named",
      "Bob",
      ", the application builds a safe query:",
      "This results in the application replying to the attacker with personal information from all users of in the LDAP directory tree.",
      "Scenario 2: Blind LDAP Injection",
      "Similar to blind SQL or XPath injection, blind LDAP injection consists of using simple true or false comparisons to infer data from the LDAP directory tree.",
      "",
      "When a client passes the",
      "",
      "HPLaserJet3015",
      "",
      "in the",
      "printerID",
      "parameter the resulting LDAP query looks like this:",
      "An attacker passes an additional AND condition to find out if the LDAD directory has an attribute named",
      "accounts",
      ":",
      "This results in the application building the following filter:",
      "Only the first AND condition is processed, so the LDAP query returns true if the",
      "users",
      "",
      "attribute exists in the LDAP directory tree. If the",
      "users",
      "attribute does indeed exist, the string below extends the attack by checking if there are any users named root:",
      "The query will return true if a user named root exists in the LDAP directory.",
      "Step 2: Analyze Causes and Countermeasures",
      "The next step in testing for LDAP injection vulnerabilities is to understand what causes them and how to defend against them.",
      "LDAP Injection Causes",
      "LDAP injection is caused by failure to properly validate and sanitize the parameters used in an LDAP query. LDAP applications work by initializing an LDAP connection with an LDAP server and submitting queries built from user-supplied data to the server. LDAP queries are commonly built by creating search filters based on direct user input from text fields, web forms, URL parameters, GUI elements, and indirect user input such as data from a file or database. Failing to check and sanitize the user input when constructing LDAP queries is the cause of this vulnerability.",
      "LDAP Injection Countermeasures",
      "",
      "",
      "An additional LDAP injection countermeasure to be used on top of input validation and sanitization consists of strengthening permissions in the LDAP directory tree. LDAP directory trees have different types of attributes and it is important to understand how these attributes work in order to decide what permissions to assign to them.  In addition, the access level used by the application to connect to the LDAP server should be the minimum required in order to reduce the potential impact of LDAP injection attacks.",
      "",
      "",
      "Step 3: Start Testing and Exploring",
      "Now that you are familiar with the LDAP injection attack scenarios and can recognize both its causes and countermeasures, you must continue by executing basic test cases while observing how the application reacts.",
      "Start with a simple test string",
      "Similarly to when testing for other injection bugs, the first test case must check if the application performs any validation for injection characters (in this case LDAP meta-characters). Therefore, it is recommended that you start with a simple test string such as this one:",
      "Testing for Normal LDAP Injection Authentication Bypass",
      "To test for authentication bypass using normal LDAP injection you should follow these steps:",
      "Open a client that uses LDAP for authentication (this can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).",
      "Enter a string containing an additional command that changes the result of the LDAP authentication query to true.",
      "Expected result: the application should not authenticate the client.",
      "",
      "Testing for Normal LDAP Injection Information Disclosure",
      "To test for information disclosure using normal LDAP injection you must follow these steps:",
      "Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).",
      "Modify the filter in use to expand the search over other clients. For example:",
      "",
      "Expected result: the application should not display additional information, such as information about other clients or LDAP attributes.",
      "",
      "Testing for Blind LDAP Injection Information Disclosure",
      "To test for information disclosure using blind LDAP injection you should follow these steps:",
      "Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications.",
      "Modify the filter in use with true or false conditions that attempt to deduce sensitive data such as LDAP attributes. For example, if your username is",
      "",
      "Bob",
      "then use the following string to check if the attribute",
      "account",
      "exists:",
      "Submit form to the server.",
      "Repeat steps 2 and 3 until disclosure of sensitive information.",
      "Expected result: the application should not allow the additional true and false conditions to be injected.",
      "",
      "Step 4: Fine-tune Test Case Data",
      "",
      "ldap://host:port/DN?attributes?scope?",
      "filter",
      "?extensions",
      "",
      "You must modify the filter part of LDAP URLs in an attempt to inject additional LDAP statements:",
      "Conclusions",
      "LDAP injection vulnerabilities allow for different attack scenarios such as bypassing authentication and disclosing information about an LDAP directory tree. The cause of this vulnerability lies in failure to properly validate and sanitize user input, and utilizing it to build LDAP queries. It is recommended that you begin testing for LDAP injection bugs by submitting basic test strings aimed at forcing an LDAP-specific error. Then continue by testing for different types of LDAP injection such as normal and blind injection. Finish by fine-tuning your test case data according to the entry point you are testing through.",
      "",
      "Additional Resources",
      "",
      ""
    ],
    "ul": [
      "Applications that use Lightweight Directory Access Protocol (LDAP)",
      "Step 1: Understand attack scenarios\n    \n    \n      Step 2: Analyze causes and countermeasures\n    \n    \n      Step 3: Start testing and exploring\n    \n    \n      Step 4: Fine-tune test cases",
      "Normal LDAP injection\n    \n    \n      Blind LDAP injection",
      "For information about string representations of LDAP search filters, see http://www.ietf.org/rfc/rfc1960.txt\n    For information about testing for LDAP injection, see http://www.owasp.org/index.php/Testing_for_LDAP_Injection\n    For information about fuzz vectors, see http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors"
    ],
    "li": [
      "Applications that use Lightweight Directory Access Protocol (LDAP)",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Fine-tune test cases",
      "Normal LDAP injection",
      "Blind LDAP injection",
      "Open a client that uses LDAP for authentication (this can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).",
      "Enter a string containing an additional command that changes the result of the LDAP authentication query to true.",
      "Submit the authentication form to the server.",
      "Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).",
      "Modify the filter in use to expand the search over other clients. For example:\n      **|*(|(objectclass=*))*(|(mail=*))",
      "Submit form to the server.",
      "Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications.",
      "Modify the filter in use with true or false conditions that attempt to deduce sensitive data such as LDAP attributes. For example, if your username is \n      Bob\n       then use the following string to check if the attribute \n      account\n       exists:\n      Bob)(account=*))",
      "Submit form to the server.",
      "Repeat steps 2 and 3 until disclosure of sensitive information.",
      "For information about string representations of LDAP search filters, see http://www.ietf.org/rfc/rfc1960.txt",
      "For information about testing for LDAP injection, see http://www.owasp.org/index.php/Testing_for_LDAP_Injection",
      "For information about fuzz vectors, see http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors"
    ],
    "p": [
      "The Lightweight Directory Access Protocol (LDAP) is a protocol used to query and manage directory services running over TCP/IP. Corporate environments commonly use LDAP directory trees to store organizational information such as useraccounts, office locations, organizational units, printers, and fax machines. To search LDAP trees, applications build queries consisting of LDAP search filters written in Prefix, or Polish, notation. LDAP search filters consist of a set of meta-characters such as parenthesis and logical operators such as ANDs and ORs (represented by ‘&’ and ‘|’ respectively). For instance, the following query returns a list of objects of type user, no matter what their unique identifier (uid) is:",
      "(&(objectClass=user)(uid=*))",
      "If an application passes unsanitized user data to build LDAP queries, an attacker is capable of injecting additional statements to the original query. LDAP injection vulnerabilities are exploited to execute arbitrary LDAP statements against thevulnerable directory service. This vulnerability can occur with any version of LDAP since it affects the application connecting to the LDAP server and not the actual LDAP server. To properly test for LDAP injection vulnerabilities, it isrecommended that you follow these steps:",
      "First, you must understand the details of LDAP injection attack scenarios. In common with SQL and XPath injection, there are two types of LDAP injection attacks:",
      "To properly follow this scenario, you must understand the background of LDAP queries and search filters. LDAP queries consist of search filters written in Prefix, or Polish, notation. For example, the following pseudo query checks if there is aclient named “Bob” with the password set to “abc”:",
      "find(\"cn=Bob & password=abc\")",
      "The equivalent LDAP query is written in Prefix notation (meta-characters first):",
      "find(\"(&(cn=Bob)(password=abc))\")",
      "LDAP uses the following meta-characters to indicate Boolean conditions and group aggregations:",
      "& - Boolean AND| - Boolean OR! - Boolean NOT= - Equals~= - Approximately>= - Greater Than<= - Less Than* - Any Character( ) - Grouping",
      "Now suppose that an application builds an LDAP query to check for authentication. The query checks if there are any LDAP entries with a common name (cn) and password (userPassword) corresponding to two input values.",
      "(&(cn=input_value1)(userPassword=input_value2))",
      "To implement the LDAP query, a PHP page uses a web form to collect the \n    user\n     and \n    pass \n    variables and build the login query:",
      "searchlogin = \"(&(cn=\" . $_POST['user'] . \")(userPassword=\" . $_POST['pass'] . \"))\";",
      "An attacker then uses the web form to pass the following values:",
      "user = \"*)(cn=*))(|(cn=*\" password = \"any\"",
      "As a result, the web application builds the following statement:",
      "searchlogin = \"(&(cn=*)(cn=*))(|(cn=*)(userPassword=any)))\"",
      "This LDAP query is always true, leading to the attacker being able to bypass authentication without valid credentials.",
      "A similar variation of normal LDAP injection leads to information disclosure. An application uses a simple LDAP query to display personal information about a single user:",
      "searchfilter = \"(uid=\" . $_GET['username'] . \")\";",
      "In normal conditions, such as with the client named \n    Bob\n    , the application builds a safe query:",
      "searchfilter = \"(uid=Bob)\";",
      "However, an attacker can tamper with the \n    \n      username\n    \n     parameter so that the resulting search filter looks like this:",
      "searchfilter = \"(uid=*)\";",
      "This results in the application replying to the attacker with personal information from all users of in the LDAP directory tree.",
      "Similar to blind SQL or XPath injection, blind LDAP injection consists of using simple true or false comparisons to infer data from the LDAP directory tree. During this scenario an application displays the printer information using the following filter:",
      "(&(printerID=printer_id)(objectclass=printer))",
      "The application uses a PHP page to build the LDAP query by obtaining the value of the \n    \n      printer_id\n    \n    \n      \n      \n    \n    variable from the URL:",
      "printerfilter = \"(&(printerID=\" . $_GET['printer_id'] . \")(objectclass=printer))\";",
      "When a client passes the  \n    HPLaserJet3015\n    \n    \n    in the\n    \n      printerID \n    \n    parameter the resulting LDAP query looks like this:",
      "(&(printerID=HPLaserJet3015)(objectclass=printer))",
      "An attacker passes an additional AND condition to find out if the LDAD directory has an attribute named \n    accounts\n    :",
      "HPLaserJet3015)(users=*))",
      "This results in the application building the following filter:",
      "(&(printerID=HPLaserJet3015)(users=*))(objectclass=printer))",
      "Only the first AND condition is processed, so the LDAP query returns true if the\n    users\n    \n    \n    attribute exists in the LDAP directory tree. If the \n    users\n     attribute does indeed exist, the string below extends the attack by checking if there are any users named root:",
      "HPLaserJet3015)(users=root))",
      "The query will return true if a user named root exists in the LDAP directory.",
      "The next step in testing for LDAP injection vulnerabilities is to understand what causes them and how to defend against them.",
      "LDAP injection is caused by failure to properly validate and sanitize the parameters used in an LDAP query. LDAP applications work by initializing an LDAP connection with an LDAP server and submitting queries built from user-supplied data to the server. LDAP queries are commonly built by creating search filters based on direct user input from text fields, web forms, URL parameters, GUI elements, and indirect user input such as data from a file or database. Failing to check and sanitize the user input when constructing LDAP queries is the cause of this vulnerability.",
      "To properly defend against LDAP injection attacks it is necessary to validate and sanitize any input data used when building LDAP search strings. There are two ways of validating and sanitizing user data: blacklisting and whitelisting. Blacklisting consists of restricting any dangerous characters. In the case of LDAP injection these characters need to include all meta-characters, especially the grouping parenthesis ( () ), AND operator (&), and OR operator (|). However, blacklisting is not completely secure unless 100 percent of all dangerous variations are accounted for. As an alternative, whitelisting consists of listing safe constructs only and rejecting any construct that does not match the safe form. Whitelisting is not concerned with accounting for all dangerous variations; whitelists just indicate what is safe, and any input that does not match a safe form is automatically denied. However, care is needed when using this defense as whitelists may be difficult to properly implement. The following examples present three expressions that act as whitelists for types (checks if input type is integer), emails, and domain values:",
      "int userinput = Convert.ToInt32(Request.Querystring(\"userinput\"));string email = Regex.IsMatch(Request.Querystring(\"email\"),\" ^.+@[^\\.].*\\.[a-z]{2,}$\" );string country = Request.Querystring(\"country\") in {\"USA\", \"UK\"};",
      "An additional LDAP injection countermeasure to be used on top of input validation and sanitization consists of strengthening permissions in the LDAP directory tree. LDAP directory trees have different types of attributes and it is important to understand how these attributes work in order to decide what permissions to assign to them.  In addition, the access level used by the application to connect to the LDAP server should be the minimum required in order to reduce the potential impact of LDAP injection attacks.",
      "Now that you are familiar with the LDAP injection attack scenarios and can recognize both its causes and countermeasures, you must continue by executing basic test cases while observing how the application reacts.",
      "Similarly to when testing for other injection bugs, the first test case must check if the application performs any validation for injection characters (in this case LDAP meta-characters). Therefore, it is recommended that you start with a simple test string such as this one:",
      "|&)(*!",
      "Then look for any errors generated by the application. Specifically, you should look for error messages that indicate the execution of an invalid LDAP query, as this will be a sign that the test case data is being used as part of the query and therefore LDAP injection is possible. Once you have successfully injected LDAP meta-characters, you should move on to the following test cases.",
      "To test for authentication bypass using normal LDAP injection you should follow these steps:",
      "Expected result: the application should not authenticate the client.",
      "To test for information disclosure using normal LDAP injection you must follow these steps:",
      "Expected result: the application should not display additional information, such as information about other clients or LDAP attributes.",
      "To test for information disclosure using blind LDAP injection you should follow these steps:",
      "Expected result: the application should not allow the additional true and false conditions to be injected.",
      "During the final step, you must fine-tune your test case data according to the entry point you are testing through. For instance, when testing through URL parameters, it may be necessary to URL-encode the AND meta-character so that it is not confused with the URL parameter name/value separator (&).",
      "*)(&(name=*)) - before encoding*)(%26(name=*)) - after URL encoding",
      "Here are some other LDAP injection hex-encoded test strings you should try:",
      "%28%29%26%21%7C%2A%7C%2A%28%7C%28mail%3D%2A%29%29%2A%28%7C%28objectclass%3D%2A%29%29*()|%26",
      "Finally, make sure you test the application through all its entry points such as web forms, URL parameters, GUI text boxes, and indirect input sources. Remember to test through LDAP URLs of the form:",
      "ldap://host:port/DN?attributes?scope?\n    filter\n    ?extensions",
      "",
      "You must modify the filter part of LDAP URLs in an attempt to inject additional LDAP statements:",
      "ldap://ldap.example.com/cn=John%20Doe,dc=example,dc=comldap://ldap.example.com/cn=John%20Doe)(users=*,dc=example,dc=com",
      "LDAP injection vulnerabilities allow for different attack scenarios such as bypassing authentication and disclosing information about an LDAP directory tree. The cause of this vulnerability lies in failure to properly validate and sanitize user input, and utilizing it to build LDAP queries. It is recommended that you begin testing for LDAP injection bugs by submitting basic test strings aimed at forcing an LDAP-specific error. Then continue by testing for different types of LDAP injection such as normal and blind injection. Finish by fine-tuning your test case data according to the entry point you are testing through.",
      "",
      "",
      "",
      "",
      ""
    ],
    "i": [
      "&",
      "|",
      "Bob",
      "abc",
      "cn",
      "userPassword",
      "()",
      "&",
      "|",
      "&"
    ],
    "font": [
      "(&(objectClass=user)(uid=*))",
      "find(\"cn=Bob & password=abc\")",
      "find(\"(&(cn=Bob)(password=abc))\")",
      "& - Boolean AND| - Boolean OR! - Boolean NOT= - Equals~= - Approximately>= - Greater Than<= - Less Than* - Any Character( ) - Grouping",
      "(&(cn=input_value1)(userPassword=input_value2))",
      "searchlogin = \"(&(cn=\" . $_POST['user'] . \")(userPassword=\" . $_POST['pass'] . \"))\";",
      "user = \"*)(cn=*))(|(cn=*\" password = \"any\"",
      "searchlogin = \"(&(cn=*)(cn=*))(|(cn=*)(userPassword=any)))\"",
      "searchfilter = \"(uid=\" . $_GET['username'] . \")\";",
      "searchfilter = \"(uid=Bob)\";",
      "searchfilter = \"(uid=*)\";",
      "(&(printerID=printer_id)(objectclass=printer))",
      "printerfilter = \"(&(printerID=\" . $_GET['printer_id'] . \")(objectclass=printer))\";",
      "(&(printerID=HPLaserJet3015)(objectclass=printer))",
      "HPLaserJet3015)(users=*))",
      "(&(printerID=HPLaserJet3015)(users=*))(objectclass=printer))",
      "HPLaserJet3015)(users=root))",
      "int userinput = Convert.ToInt32(Request.Querystring(\"userinput\"));string email = Regex.IsMatch(Request.Querystring(\"email\"),\" ^.+@[^\\.].*\\.[a-z]{2,}$\" );string country = Request.Querystring(\"country\") in {\"USA\", \"UK\"};",
      "|&)(*!",
      "**|*(|(objectclass=*))*(|(mail=*))",
      "Bob)(account=*))",
      "*)(&(name=*)) - before encoding*)(%26(name=*)) - after URL encoding",
      "%28%29%26%21%7C%2A%7C%2A%28%7C%28mail%3D%2A%29%29%2A%28%7C%28objectclass%3D%2A%29%29*()|%26",
      "ldap://ldap.example.com/cn=John%20Doe,dc=example,dc=comldap://ldap.example.com/cn=John%20Doe)(users=*,dc=example,dc=com"
    ],
    "h2": [
      "Scenario 1: Normal LDAP Injection",
      "Scenario 2: Blind LDAP Injection",
      "LDAP Injection Causes",
      "LDAP Injection Countermeasures",
      "Start with a simple test string",
      "Testing for Normal LDAP Injection Authentication Bypass",
      "Testing for Normal LDAP Injection Information Disclosure",
      "Testing for Blind LDAP Injection Information Disclosure"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ol": [
      "Open a client that uses LDAP for authentication (this can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).\n    \n    \n      Enter a string containing an additional command that changes the result of the LDAP authentication query to true.\n    \n    Submit the authentication form to the server.",
      "Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).\n    \n    \n      Modify the filter in use to expand the search over other clients. For example:\n      **|*(|(objectclass=*))*(|(mail=*))\n    \n    Submit form to the server.",
      "Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications.\n    \n    \n      Modify the filter in use with true or false conditions that attempt to deduce sensitive data such as LDAP attributes. For example, if your username is \n      Bob\n       then use the following string to check if the attribute \n      account\n       exists:\n      Bob)(account=*))\n    \n    \n      Submit form to the server.\n    \n    \n      Repeat steps 2 and 3 until disclosure of sensitive information."
    ],
    "a": [
      "http://www.ietf.org/rfc/rfc1960.txt",
      "http://www.owasp.org/index.php/Testing_for_LDAP_Injection",
      "http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors"
    ]
  },
  "links": [
    {
      "href": "http://www.ietf.org/rfc/rfc1960.txt",
      "text": "http://www.ietf.org/rfc/rfc1960.txt"
    },
    {
      "href": "http://www.owasp.org/index.php/Testing_for_LDAP_Injection",
      "text": "http://www.owasp.org/index.php/Testing_for_LDAP_Injection"
    },
    {
      "href": "http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors",
      "text": "http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors"
    }
  ],
  "html": "<h1>\n    <span>Applies To</span>\n  </h1>\n  <ul>\n    <li>\n      <span>Applications that use Lightweight Directory Access Protocol (LDAP)</span>\n    </li>\n  </ul>\n  <h1>\n    <span>Summary</span>\n  </h1>\n  <p>\n    The Lightweight Directory Access Protocol (LDAP) is a protocol used to query and manage directory services running over TCP/IP. Corporate environments commonly use LDAP directory trees to store organizational information such as useraccounts, office locations, organizational units, printers, and fax machines. To search LDAP trees, applications build queries consisting of LDAP search filters written in Prefix, or Polish, notation. LDAP search filters consist of a set of meta-characters such as parenthesis and logical operators such as ANDs and ORs (represented by ‘<i>&</i>’ and ‘<i>|</i>’ respectively).<span>&nbsp;</span>For instance, the following query returns a list of objects of type user, no matter what their unique identifier (uid) is:</p>\n  <p>\n    <font face=\"'Courier New'\">(&(objectClass=user)(uid=*))</font>\n  </p>\n  <p>\n    <span>If an application passes unsanitized user data to build LDAP queries, an attacker is capable of injecting additional statements to the original query. LDAP injection vulnerabilities are exploited to execute arbitrary LDAP statements against thevulnerable directory service.<span>&nbsp;</span>This vulnerability can occur with any version of LDAP since it affects the application connecting to the LDAP server and not the actual LDAP server. To properly test for LDAP injection vulnerabilities, it isrecommended that you follow these steps:</span>\n  </p>\n  <ul>\n    <li>\n      <span>Step 1: Understand attack scenarios</span>\n    </li>\n    <li>\n      <span>Step 2: Analyze causes and countermeasures</span>\n    </li>\n    <li>\n      <span>Step 3: Start testing and exploring</span>\n    </li>\n    <li>\n      <span>Step 4: Fine-tune test cases</span>&nbsp;</li>\n  </ul>\n  <h1>\n    <span>Step 1:&nbsp;Understand Attack Scenarios</span>\n  </h1>\n  <p>\n    <span>First, you must understand the details of LDAP injection attack scenarios. In common with SQL and XPath injection, there are two types of LDAP injection attacks:</span>\n  </p>\n  <ul>\n    <li>\n      <span>Normal LDAP injection</span>\n    </li>\n    <li>\n      <span>Blind LDAP injection</span>&nbsp;</li>\n  </ul>\n  <h2>\n    <span>Scenario 1: Normal LDAP Injection</span>\n  </h2>\n  <p>\n    To properly follow this scenario, you must understand the background of LDAP queries and search filters. LDAP queries consist of search filters written in Prefix, or Polish, notation. For example, the following pseudo query checks if there is aclient named “<i>Bob</i>” with the password set to “<i>abc</i>”:</p>\n  <p>\n    <font face=\"'Courier New'\">find(\"cn=Bob & password=abc\")</font>\n  </p>\n  <p>The equivalent LDAP query is written in Prefix notation (meta-characters first):</p>\n  <p>\n    <font face=\"'Courier New'\">find(\"(&(cn=Bob)(password=abc))\")</font>\n  </p>\n  <p>LDAP uses the following meta-characters to indicate Boolean conditions and group aggregations:</p>\n  <p>\n    <font face=\"'Courier New'\">& - Boolean AND<br />| - Boolean OR<br />! - Boolean NOT<br />= - Equals<br />~= - Approximately<br />&gt;= - Greater Than<br />&lt;= - Less Than<br />* - Any Character<br />( ) - Grouping</font>\n  </p>\n  <p>Now suppose that an application builds an LDAP query to check for authentication. The query checks if there are any LDAP entries with a common name (<i>cn</i>) and password (<i>userPassword</i>) corresponding to two input values.</p>\n  <p>\n    <font face=\"'Courier New'\">(&(cn=input_value1)(userPassword=input_value2))</font>\n  </p>\n  <p>To implement the LDAP query, a PHP page uses a web form to collect the \n    user\n     and \n    pass \n    variables and build the login query:</p>\n  <p>\n    <font face=\"'Courier New'\">searchlogin = \"(&(cn=\" . $_POST['user'] . \")(userPassword=\" . $_POST['pass'] . \"))\";</font>\n  </p>\n  <p>An attacker then uses the web form to pass the following values:</p>\n  <p>\n    <font face=\"'Courier New'\">user = \"*)(cn=*))(|(cn=*\"&nbsp;password = \"any\"</font>\n  </p>\n  <p>As a result, the web application builds the following statement:</p>\n  <p>\n    <font face=\"'Courier New'\">searchlogin = \"(&(cn=*)(cn=*))(|(cn=*)(userPassword=any)))\"</font>\n  </p>\n  <p>\n    <span>This LDAP query is always true, leading to the attacker being able to bypass authentication without valid credentials.</span>\n  </p>\n  <p>\n    <span>A similar variation of normal LDAP injection leads to information disclosure. An application uses a simple LDAP query to display personal information about a single user:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">searchfilter = \"(uid=\" . $_GET['username'] . \")\";</font>\n  </p>\n  <p>\n    <span>In normal conditions, such as with the client named </span>\n    <span>Bob</span>\n    <span>, the application builds a safe query:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">searchfilter = \"(uid=Bob)\";</font>\n  </p>\n  <p>However, an attacker can tamper with the \n    \n      username\n    \n     parameter so that the resulting search filter looks like this:</p>\n  <p>\n    <font face=\"'Courier New'\">searchfilter = \"(uid=*)\";</font>\n  </p>\n  <p>\n    <span>This results in the application replying to the attacker with personal information from all users of in the LDAP directory tree.</span>&nbsp;</p>\n  <h2>\n    <span>\n      Scenario 2: Blind LDAP Injection \n    </span>\n  </h2>\n  <p>\n    <span>Similar to blind SQL or XPath injection, blind LDAP injection consists of using simple true or false comparisons to infer data from the LDAP directory tree.<span>&nbsp;</span></span>During this scenario an application displays the printer information using the following filter:</p>\n  <p>\n    <font face=\"'Courier New'\">(&(printerID=printer_id)(objectclass=printer))</font>\n  </p>\n  <p>The application uses a PHP page to build the LDAP query by obtaining the value of the \n    \n      printer_id\n    \n    \n      \n      \n    \n    variable from the URL:</p>\n  <p>\n    <font face=\"'Courier New'\">printerfilter = \"(&(printerID=\" . $_GET['printer_id'] . \")(objectclass=printer))\";</font>\n  </p>\n  <p>\n    <span>When a client passes the<span>&nbsp; </span></span>\n    <span>HPLaserJet3015</span>\n    <span>\n    </span>\n    <span>in the</span>\n    <span>\n      printerID \n    </span>\n    <span>parameter the resulting LDAP query looks like this:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">(&(printerID=HPLaserJet3015)(objectclass=printer))</font>\n  </p>\n  <p>\n    <span>An attacker passes an additional AND condition to find out if the LDAD directory has an attribute named </span>\n    <span>accounts</span>\n    <span>:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">HPLaserJet3015)(users=*))</font>\n  </p>\n  <p>\n    <span>This results in the application building the following filter:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">(&(printerID=HPLaserJet3015)(users=*))(objectclass=printer))</font>\n  </p>\n  <p>\n    <span>Only the first AND condition is processed, so the LDAP query returns true if the</span>\n    <span>users</span>\n    <span>\n    </span>\n    <span>attribute exists in the LDAP directory tree. If the </span>\n    <span>users</span>\n    <span> attribute does indeed exist, the string below extends the attack by checking if there are any users named root:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">HPLaserJet3015)(users=root))</font>\n  </p>\n  <p>\n    <span>The query will return true if a user named root exists in the LDAP directory.</span>&nbsp;</p>\n  <h1>\n    <span>Step 2: Analyze Causes and Countermeasures</span>\n  </h1>\n  <p>\n    <span>The next step in testing for LDAP injection vulnerabilities is to understand what causes them and how to defend against them.</span>\n  </p>\n  <h2>\n    <span>\n      LDAP Injection Causes\n    </span>\n  </h2>\n  <p>\n    <span>LDAP injection is caused by failure to properly validate and sanitize the parameters used in an LDAP query. LDAP applications work by initializing an LDAP connection with an LDAP server and submitting queries built from user-supplied data to the server. LDAP queries are commonly built by creating search filters based on direct user input from text fields, web forms, URL parameters, GUI elements, and indirect user input such as data from a file or database. Failing to check and sanitize the user input when constructing LDAP queries is the cause of this vulnerability.</span>\n  </p>\n  <h2>\n    <span>\n      LDAP Injection Countermeasures\n    </span>\n  </h2>\n  <p>\n    To properly defend against LDAP injection attacks it is necessary to validate and sanitize any input data used when building LDAP search strings. There are two ways of validating and sanitizing user data: blacklisting and whitelisting.<span>&nbsp;</span>Blacklisting consists of restricting any dangerous characters.&nbsp;In the case of LDAP injection these characters need to include all meta-characters, especially the grouping parenthesis ( <i>() </i>), AND operator (<i>&</i>), and OR operator (<i>|</i>). However, blacklisting is not completely secure unless 100 percent of all dangerous variations are accounted for. As an alternative, whitelisting consists of listing safe constructs only and rejecting any construct that does not match the safe form. Whitelisting is not concerned with accounting for all dangerous variations; whitelists just indicate what is safe, and any input that does not match a safe form is automatically denied. However, care is needed when using this defense as whitelists may be difficult to properly implement.<span>&nbsp;</span>The following examples present three expressions that act as whitelists for types (checks if input type is integer), emails, and domain values:</p>\n  <p>\n    <font face=\"'Courier New'\">int userinput = Convert.ToInt32(Request.Querystring(\"userinput\"));<br />string email = Regex.IsMatch(Request.Querystring(\"email\"),\" ^.+@[^\\.].*\\.[a-z]{2,}$\" );<br />string country = Request.Querystring(\"country\") in {\"USA\", \"UK\"};</font>\n  </p>\n  <p>\n    <span>An additional LDAP injection countermeasure to be used on top of input validation and sanitization consists of strengthening permissions in the LDAP directory tree.<span>&nbsp;</span>LDAP directory trees have different types of attributes and it is important to understand how these attributes work in order to decide what permissions to assign to them.<span>&nbsp; </span>In addition, the access level used by the application to connect to the LDAP server should be the minimum required in order to reduce the potential impact of LDAP injection attacks.</span>&nbsp;</p>\n  <h1>\n    <span>Step 3: Start Testing and Exploring</span>\n  </h1>\n  <p>\n    <span>Now that you are familiar with the LDAP injection attack scenarios and can recognize both its causes and countermeasures, you must continue by executing basic test cases while observing how the application reacts.</span>\n  </p>\n  <h2>\n    <span>\n      Start with a simple test string\n    </span>\n  </h2>\n  <p>\n    <span>Similarly to when testing for other injection bugs, the first test case must check if the application performs any validation for injection characters (in this case LDAP meta-characters). Therefore, it is recommended that you start with a simple test string such as this one:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">|&)(*!</font>\n  </p>\n  <p>Then look for any errors generated by the application. Specifically, you should look for error messages that indicate the execution of an invalid LDAP query, as this will be a sign that the test case data is being used as part of the query and therefore LDAP injection is possible.&nbsp;Once you have successfully injected LDAP meta-characters, you should move on to the following test cases.&nbsp;</p>\n  <h2>\n    <span>\n      Testing for Normal LDAP Injection Authentication Bypass \n    </span>\n  </h2>\n  <p>\n    <span>To test for authentication bypass using normal LDAP injection you should follow these steps:</span>\n  </p>\n  <ol>\n    <li>\n      <span>Open a client that uses LDAP for authentication (this can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).</span>\n    </li>\n    <li>\n      <span>Enter a string containing an additional command that changes the result of the LDAP authentication query to true.</span>\n    </li>\n    <li>Submit the authentication form to the server.</li>\n  </ol>\n  <p>\n    <span>Expected result:<span>&nbsp;</span>the application should not authenticate the client.</span>&nbsp;</p>\n  <h2>\n    <span>\n      Testing for Normal LDAP Injection Information Disclosure\n    </span>\n  </h2>\n  <p>\n    <span>To test for information disclosure using normal LDAP injection you must follow these steps:</span>\n  </p>\n  <ol>\n    <li>\n      <span>Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications).</span>\n    </li>\n    <li>\n      <span>Modify the filter in use to expand the search over other clients.<span>&nbsp;</span>For example:<br /></span>\n      <font face=\"'Courier New'\">*<br />*|<br />*(|(objectclass=*))<br />*(|(mail=*))</font>\n    </li>\n    <li>Submit form to the server.</li>\n  </ol>\n  <p>\n    <span>Expected result:<span>&nbsp;</span>the application should not display additional information, such as information about other clients or LDAP attributes.</span>&nbsp;</p>\n  <h2>\n    <span>\n      Testing for Blind LDAP Injection Information Disclosure\n    </span>\n  </h2>\n  <p>\n    <span>To test for information disclosure using blind LDAP injection you should follow these steps:</span>\n  </p>\n  <ol>\n    <li>\n      <span>Open a client that uses LDAP to display user information. This can be a web browser if the LDAP application is implemented as a web application or a client LDAP application in traditional non-web LDAP client/server applications.</span>\n    </li>\n    <li>\n      <span>Modify the filter in use with true or false conditions that attempt to deduce sensitive data such as LDAP attributes.<span>&nbsp;</span>For example, if your username is </span>\n      <span>Bob</span>\n      <span> then use the following string to check if the attribute </span>\n      <span>account</span>\n      <span> exists:<br /></span>\n      <font face=\"'Courier New'\">Bob)(account=*))</font>\n    </li>\n    <li>\n      <span>Submit form to the server.</span>\n    </li>\n    <li>\n      <span>Repeat steps 2 and 3 until disclosure of sensitive information.</span>\n    </li>\n  </ol>\n  <p>\n    <span>Expected result:<span>&nbsp;</span>the application should not allow the additional true and false conditions to be injected.</span>&nbsp;</p>\n  <h1>\n    <span>Step 4: Fine-tune Test Case Data</span>\n  </h1>\n  <p>\n    During the final step, you must fine-tune your test case data according to the entry point you are testing through.<span>&nbsp;</span>For instance, when testing through URL parameters, it may be necessary to URL-encode the AND meta-character so that it is not confused with the URL parameter name/value separator (<i>&</i>).</p>\n  <p>\n    <font face=\"'Courier New'\">*)(&(name=*)) -&nbsp;before encoding<br />*)(%26(name=*)) -&nbsp;after URL encoding</font>\n  </p>\n  <p>Here are some other LDAP injection hex-encoded test strings you should try:</p>\n  <p>\n    <font face=\"'Courier New'\">%28<br />%29<br />%26<br />%21<br />%7C<br />%2A%7C<br />%2A%28%7C%28mail%3D%2A%29%29<br />%2A%28%7C%28objectclass%3D%2A%29%29<br />*()|%26</font>\n  </p>\n  <p>Finally, make sure you test the application through all its entry points such as web forms, URL parameters, GUI text boxes, and indirect input sources. Remember to test through LDAP URLs of the form:</p>\n  <p>\n    <span style=\"font-family: 'Courier New'; \">ldap://host:port/DN?attributes?scope?</span>\n    <span style=\"font-family: 'Courier New'; \">filter</span>\n    <span style=\"font-family: 'Courier New'; \">?extensions</span>\n  </p>\n  <p>\n    <span>\n    </span>\n  </p>\n  <p>\n    <span>You must modify the filter part of LDAP URLs in an attempt to inject additional LDAP statements:</span>\n  </p>\n  <p>\n    <font face=\"'Courier New'\">ldap://ldap.example.com/cn=John%20Doe,dc=example,dc=com<br />ldap://ldap.example.com/cn=John%20Doe)(users=*,dc=example,dc=com</font>\n  </p>\n  <h1>\n    <span>Conclusions</span>\n  </h1>\n  <p>\n    <span>LDAP injection vulnerabilities allow for different attack scenarios such as bypassing authentication and disclosing information about an LDAP directory tree.<span>&nbsp;</span>The cause of this vulnerability lies in failure to properly validate and sanitize user input, and utilizing it to build LDAP queries. It is recommended that you begin testing for LDAP injection bugs by submitting basic test strings aimed at forcing an LDAP-specific error. Then continue by testing for different types of LDAP injection such as normal and blind injection. Finish by fine-tuning your test case data according to the entry point you are testing through.</span>\n  </p>\n  <h1>\n    <span>Additional Resources</span>\n  </h1>\n  <p>\n  </p>\n  <ul>\n    <li>For information about string representations of LDAP search filters, see&nbsp;<a href=\"http://www.ietf.org/rfc/rfc1960.txt\">http://www.ietf.org/rfc/rfc1960.txt</a></li>\n    <li>For information about testing for LDAP injection, see&nbsp;<a href=\"http://www.owasp.org/index.php/Testing_for_LDAP_Injection\">http://www.owasp.org/index.php/Testing_for_LDAP_Injection</a></li>\n    <li>For information about fuzz vectors, see&nbsp;<a href=\"http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors\">http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors</a></li>\n  </ul>\n  <p />\n  <p />\n  <p>\n    <span>\n    </span>\n  </p>\n  <p>\n    <span>\n    </span>\n  </p>"
}