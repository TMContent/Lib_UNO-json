{
  "id": "5d895784-a43d-488e-a0d3-464403f77d7e",
  "checksum": "9b4ac3efa9a10cd36d79779cc12bbd2f5883467a",
  "words": {
    "description": [
      "h1"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "title"
    ],
    "declarative": [
      "p",
      "title"
    ],
    "principal-permission": [
      "p",
      "p",
      "p"
    ],
    "demands": [
      "p",
      "p"
    ],
    "on": [
      "p",
      "p"
    ],
    "methods": [
      "p",
      "p"
    ],
    "when": [
      "p"
    ],
    "want": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "title"
    ],
    "authorize": [
      "p"
    ],
    "access": [
      "p"
    ],
    "those": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "attribute": [
      "p"
    ],
    "ensures": [
      "p"
    ],
    "that": [
      "p",
      "pre",
      "pre"
    ],
    "only": [
      "p",
      "pre"
    ],
    "users": [
      "p"
    ],
    "who": [
      "p"
    ],
    "are": [
      "p"
    ],
    "members": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "pre"
    ],
    "manager": [
      "p",
      "pre"
    ],
    "role": [
      "p",
      "p",
      "pre",
      "pre",
      "p"
    ],
    "call": [
      "p"
    ],
    "getcustomerdetails": [
      "p",
      "b"
    ],
    "method": [
      "p",
      "p"
    ],
    "using": [
      "pre",
      "pre"
    ],
    "systemsecurity.permissions;using": [
      "pre"
    ],
    "systemthreading;...[principalpermissionattribute(securityaction.demand,": [
      "pre"
    ],
    "role=\"manager\"]public": [
      "pre"
    ],
    "void": [
      "pre",
      "pre",
      "pre"
    ],
    "getcustomerdetailsint": [
      "pre",
      "pre",
      "pre"
    ],
    "custid{}": [
      "pre"
    ],
    "if": [
      "p",
      "pre"
    ],
    "need": [
      "p",
      "p"
    ],
    "more": [
      "p"
    ],
    "detailed": [
      "p"
    ],
    "control": [
      "p"
    ],
    "and": [
      "p",
      "title"
    ],
    "perform": [
      "p",
      "p",
      "p"
    ],
    "authorization": [
      "p"
    ],
    "within": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "then": [
      "p"
    ],
    "imperative": [
      "p",
      "p",
      "pre",
      "title"
    ],
    "or": [
      "p"
    ],
    "explicit": [
      "p",
      "p"
    ],
    "checks": [
      "p",
      "p"
    ],
    "block": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "pre",
      "p"
    ],
    "example": [
      "p",
      "p"
    ],
    "shows": [
      "p"
    ],
    "how": [
      "p",
      "title"
    ],
    "an": [
      "p"
    ],
    "demand": [
      "p"
    ],
    "systemsecurity;using": [
      "pre"
    ],
    "systemsecurity.permissions;public": [
      "pre"
    ],
    "custid{": [
      "pre",
      "pre"
    ],
    "try": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "principal": [
      "pre"
    ],
    "permission": [
      "pre",
      "title"
    ],
    "check": [
      "pre"
    ],
    "verify": [
      "pre"
    ],
    "caller": [
      "pre",
      "pre"
    ],
    "is": [
      "pre",
      "pre",
      "pre"
    ],
    "principalpermission": [
      "pre"
    ],
    "principalperm": [
      "pre"
    ],
    "=": [
      "pre"
    ],
    "new": [
      "pre"
    ],
    "principalpermissionnull,": [
      "pre"
    ],
    "\"manager\";": [
      "pre"
    ],
    "principalpermdemand();": [
      "pre"
    ],
    "follows": [
      "pre"
    ],
    "executed": [
      "pre"
    ],
    "member": [
      "pre"
    ],
    "\"manager\"": [
      "pre"
    ],
    "}": [
      "pre"
    ],
    "catch": [
      "pre"
    ],
    "securityexception": [
      "pre"
    ],
    "ex": [
      "pre"
    ],
    "}}": [
      "pre",
      "pre"
    ],
    "uses": [
      "p"
    ],
    "public": [
      "pre"
    ],
    "if!thread.currentprincipal.isinrole(\"manager\"))": [
      "pre"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "requests": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      ""
    ],
    "p": [
      "You can use declarative principal-permission demands on methods when you want to authorize access to those methods. The following attribute ensures that only users who are members of the Manager role can call the GetCustomerDetails method.",
      "If you need more detailed control and you need to perform authorization within a method, then you can perform imperative principal-permission demands or explicit role checks on a block of code. The following code example shows how to perform an imperative principal-permission demand.",
      "The following code example uses explicit role checks.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "GetCustomerDetails"
    ],
    "pre": [
      "using System.Security.Permissions;using System.Threading;...[PrincipalPermissionAttribute(SecurityAction.Demand, Role=\"Manager\")]public void GetCustomerDetails(int CustId){}",
      "using System.Security;using System.Security.Permissions;public void GetCustomerDetails(int CustId){    try    {        // Imperative principal permission role check to verify        // that the caller is a manager.        PrincipalPermission principalPerm = new PrincipalPermission(null,                                                 \"Manager\");        principalPerm.Demand();        // Code that follows is only executed if the caller is a        // member of the \"Manager\" role.    }    catch( SecurityException ex )    {   . . .    }}",
      "public void GetCustomerDetails(int CustId){    if(!Thread.CurrentPrincipal.IsInRole(\"Manager\"))    {    . . .    }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Description</h1>\r\n  <p>You can use declarative principal-permission demands on methods when you want to authorize access to those methods. The following attribute ensures that only users who are members of the Manager role can call the <b>GetCustomerDetails</b> method. </p>\r\n  <pre>using System.Security.Permissions;using System.Threading;...<br />&#91;PrincipalPermissionAttribute(SecurityAction.Demand, Role=\"Manager\")&#93;<br />public void GetCustomerDetails(int CustId)&#123;&#125;  </pre>\r\n  <p>If you need more detailed control and you need to perform authorization within a method, then you can perform imperative principal-permission demands or explicit role checks on a block of code. The following code example shows how to perform an imperative principal-permission demand. </p>\r\n  <pre>using System.Security;<br />using System.Security.Permissions;<br />public void GetCustomerDetails(int CustId)&#123;<br />    try<br />    &#123;<br />        // Imperative principal permission role check to verify<br />        // that the caller is a manager.<br />        PrincipalPermission principalPerm = new PrincipalPermission(null,<br />                                                 \"Manager\");<br />        principalPerm.Demand();<br />        // Code that follows is only executed if the caller is a<br />        // member of the \"Manager\" role.<br />    &#125;<br />    catch( SecurityException ex )<br />    &#123;<br />   . . .<br />    &#125;&#125;  </pre>\r\n  <p>The following code example uses explicit role checks. </p>\r\n  <pre>public void GetCustomerDetails(int CustId)&#123;<br />    if(&#33;Thread.CurrentPrincipal.IsInRole(\"Manager\"))<br />    &#123;    . . .    &#125;&#125;</pre>\r\n  <h1>&nbsp;</h1>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}