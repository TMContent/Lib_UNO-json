{
  "id": "3b46e08b-1e8a-4dbf-b7bc-39a13c8afcbc",
  "checksum": "2eeb580eb76e9eac7a2381a0b7b26ba7ac3ee1aa",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "encode": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "title"
    ],
    "all": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "title"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "span",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li"
    ],
    "echoed": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "back": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "span",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "user": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "span",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "proper": [
      "p"
    ],
    "encoding": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "prevents": [
      "p"
    ],
    "injection": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "such": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "span",
      "pre",
      "p",
      "pre"
    ],
    "cross-site": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "scripting": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "when": [
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "if": [
      "p"
    ],
    "will": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "client": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "li",
      "p"
    ],
    "in": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "any": [
      "p"
    ],
    "way": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "it": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "displaying": [
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p"
    ],
    "includes": [
      "p"
    ],
    "immediately": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "well": [
      "p"
    ],
    "stored": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "first": [
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "database": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "being": [
      "p"
    ],
    "later": [
      "p"
    ],
    "how": [
      "h1",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p"
    ],
    "ensure": [
      "p"
    ],
    "encoded": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "input locate": [
      "ol",
      "li",
      "p"
    ],
    "places": [
      "ol",
      "li",
      "p"
    ],
    "inside": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "your": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "application": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "where": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "span"
    ],
    "user-supplied": [
      "ol",
      "li",
      "p"
    ],
    "data": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "title"
    ],
    "returned": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "can": [
      "ol",
      "li",
      "p"
    ],
    "reflective": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "or": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "persistent": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "strong",
      "p"
    ],
    "naturereflective:": [
      "ol",
      "li"
    ],
    "setting": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "span",
      "p",
      "pre",
      "span",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "li"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "h1",
      "h1"
    ],
    "search": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "engines": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "present": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "searched": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "query": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "resultspersistent:": [
      "ol",
      "li",
      "ul"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "retrieved": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "from": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "message": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "boards": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "store": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "users'": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "posts": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "return": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "them": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "given": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "topic": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vieweddetermine": [
      "ol"
    ],
    "the type": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "encoding after": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "determine": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "said": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "an": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "html": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "td",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "span",
      "span",
      "p",
      "p",
      "p"
    ],
    "context": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "rendered": [
      "ol",
      "li",
      "p"
    ],
    "part": [
      "ol",
      "li",
      "p"
    ],
    "document": [
      "ol",
      "li",
      "p"
    ],
    "understood": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "browser": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "there": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "other": [
      "ol",
      "li",
      "p"
    ],
    "contexts": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "available": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "pre",
      "ul",
      "li"
    ],
    "web": [
      "ol",
      "li",
      "p"
    ],
    "applications": [
      "ol",
      "li",
      "p"
    ],
    "javascript": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "css": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "etc": [
      "ol",
      "li",
      "p"
    ],
    "included": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "span",
      "pre",
      "span",
      "p",
      "p"
    ],
    "interpreted": [
      "ol",
      "li",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "differently": [
      "ol",
      "li",
      "p"
    ],
    "different": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "prevent": [
      "ol",
      "li",
      "p"
    ],
    "vulnerabilities": [
      "ol",
      "li",
      "p"
    ],
    "differences": [
      "ol",
      "li",
      "p"
    ],
    "arise": [
      "ol",
      "li",
      "p"
    ],
    "fact": [
      "ol",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "special": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "symbols": [
      "ol",
      "li",
      "p"
    ],
    "keywords": [
      "ol",
      "li",
      "p"
    ],
    "design": [
      "ol",
      "li",
      "p"
    ],
    "output": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "title"
    ],
    "routines": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "understanding": [
      "ol",
      "li",
      "p"
    ],
    "mindurl": [
      "ol",
      "li"
    ],
    "url": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "allows": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "maintain": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "original": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "yet": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "display": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "non-malicious": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "because": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "http": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "headers": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "allow": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "substitution": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "schema": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "characters/symbols": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "preserved": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "their": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "ascii": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "codes": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "instead": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "actual": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "character/symbol": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "example < is": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "represented": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "by %3c where 3c is": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "tr",
      "td"
    ],
    "for .html": [
      "ol",
      "li",
      "ul"
    ],
    "regular": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "text": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre"
    ],
    "content": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "substituting": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "certain": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "characters": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "respective": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "valuescharacterhtml": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "value<>>&&\"\"''html": [
      "ol",
      "li",
      "ul"
    ],
    "attribute": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "dynamic": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "tag": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "except url": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "event": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "handler": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "attributesjavascript": [
      "ol",
      "li",
      "ul"
    ],
    "into": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "pre",
      "p"
    ],
    "including": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "handlers": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "tagscss": [
      "ol",
      "li",
      "ul"
    ],
    "contextdom": [
      "ol",
      "li",
      "ul"
    ],
    "dom": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "used": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "situations": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "involved": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "these": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "instances": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "more": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "ul",
      "li"
    ],
    "complicated": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "often": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "involve": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "multiple": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "span"
    ],
    "necessitates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "chaining": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "many": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "circumstancesapply": [
      "ol"
    ],
    "appropriate": [
      "ol",
      "li",
      "p"
    ],
    "method": [
      "ol",
      "li",
      "p"
    ],
    "apply": [
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "libraries": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "capabilities": [
      "ol",
      "li",
      "p"
    ],
    "weaknesses": [
      "ol",
      "li",
      "p"
    ],
    "please": [
      "ol",
      "li",
      "p"
    ],
    "refer": [
      "ol",
      "li",
      "p"
    ],
    "vendor's": [
      "ol",
      "li",
      "p"
    ],
    "documentation": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "each": [
      "ol",
      "li",
      "p"
    ],
    "potential": [
      "ol",
      "li",
      "p"
    ],
    "library": [
      "ol",
      "li",
      "p"
    ],
    "viewed": [
      "li",
      "ul",
      "li"
    ],
    "nature": [
      "p"
    ],
    "results": [
      "li"
    ],
    "circumstances": [
      "li",
      "ul",
      "li",
      "p"
    ],
    "mind": [
      "p"
    ],
    "for .": [
      "li",
      "p"
    ],
    "%3c": [
      "em"
    ],
    "3c": [
      "em"
    ],
    ".": [
      "em"
    ],
    "value<>>&&\"\"''": [
      "li",
      "blockquote",
      "table",
      "tbody"
    ],
    "values": [
      "p",
      "p",
      "pre"
    ],
    "characterhtml": [
      "blockquote",
      "table",
      "tbody",
      "tr"
    ],
    "character": [
      "td"
    ],
    "<": [
      "tr"
    ],
    ">": [
      "tr"
    ],
    "&&": [
      "tr"
    ],
    "&": [
      "td",
      "td"
    ],
    "\"\"": [
      "tr"
    ],
    "\"": [
      "td",
      "td"
    ],
    "''": [
      "tr"
    ],
    "'": [
      "td",
      "td"
    ],
    "attributes": [
      "li",
      "p"
    ],
    "tags": [
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "shows": [
      "p",
      "p"
    ],
    "registers": [
      "p",
      "p"
    ],
    "account": [
      "p",
      "p"
    ],
    "post-registration": [
      "p",
      "p"
    ],
    "logs": [
      "p",
      "p"
    ],
    "registered": [
      "p",
      "p"
    ],
    "name": [
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "span",
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "reflected": [
      "p",
      "p",
      "pre",
      "span",
      "p"
    ],
    "screen": [
      "p",
      "p"
    ],
    "does": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "pre",
      "span",
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "creation": [
      "p"
    ],
    "model": [
      "p"
    ],
    "--": [
      "p",
      "p",
      "pre",
      "span"
    ],
    "notice": [
      "p",
      "p",
      "pre",
      "span"
    ],
    "string": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "object": [
      "p",
      "p",
      "pre"
    ],
    "no": [
      "p"
    ],
    "validations": [
      "p"
    ],
    "extends": [
      "p",
      "pre"
    ],
    "userinfoservicestring,": [
      "p",
      "pre"
    ],
    "{": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "val": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "passwordservice": [
      "p",
      "pre"
    ],
    "=": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "mypasswordservice": [
      "p",
      "pre"
    ],
    "def": [
      "p",
      "pre"
    ],
    "registeremail:": [
      "p",
      "pre"
    ],
    "namestring,": [
      "p",
      "pre"
    ],
    "password": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "encryptedpassword": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "passwordserviceencryptpassword(password)": [
      "p",
      "pre"
    ],
    "useremail,": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "createuser)": [
      "p",
      "pre"
    ],
    "}\r\r\ndef": [
      "p",
      "pre"
    ],
    "createuser:": [
      "p",
      "pre"
    ],
    "user:": [
      "p",
      "pre"
    ],
    "dbwithconnection": [
      "p",
      "pre"
    ],
    "implicit": [
      "p",
      "pre"
    ],
    "connection": [
      "p",
      "pre"
    ],
    "sql": [
      "p",
      "pre"
    ],
    "\"\"\"": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "insert": [
      "p",
      "pre"
    ],
    "{email}": [
      "p",
      "pre"
    ],
    "{name}": [
      "p",
      "pre"
    ],
    "{password}": [
      "p",
      "pre"
    ],
    ".on(": [
      "p",
      "pre"
    ],
    "'email": [
      "p",
      "pre"
    ],
    "-": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "'name": [
      "p",
      "pre"
    ],
    "username,": [
      "p",
      "pre"
    ],
    "'password": [
      "p",
      "pre"
    ],
    "userpassword.underlying": [
      "p",
      "pre"
    ],
    ".executeupdate()": [
      "p",
      "pre"
    ],
    "}": [
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "}code": [
      "p"
    ],
    "signup": [
      "p",
      "pre",
      "span"
    ],
    "controller": [
      "p",
      "pre",
      "span"
    ],
    "signupform": [
      "p",
      "pre"
    ],
    "form": [
      "p",
      "pre"
    ],
    "mapping": [
      "p",
      "pre"
    ],
    "\"email\"": [
      "p",
      "pre"
    ],
    "email": [
      "p",
      "pre"
    ],
    "\"fullname\"": [
      "p",
      "pre"
    ],
    "\"password\"": [
      "p",
      "pre"
    ],
    "weakpassword": [
      "p",
      "pre"
    ],
    "(signupdata.apply)(_": [
      "p",
      "pre"
    ],
    "none": [
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "case": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "class": [
      "p",
      "pre"
    ],
    "signupdataemail:": [
      "p",
      "pre"
    ],
    "fullname": [
      "p",
      "pre"
    ],
    "stringcode": [
      "p"
    ],
    "template": [
      "p",
      "pre",
      "span",
      "p",
      "p"
    ],
    "redirected": [
      "p",
      "pre",
      "span"
    ],
    "after": [
      "p",
      "pre",
      "span"
    ],
    "successful": [
      "p",
      "pre",
      "span"
    ],
    "login": [
      "p",
      "pre",
      "span"
    ],
    "sanitized": [
      "p",
      "pre",
      "span"
    ],
    "raw": [
      "p",
      "pre",
      "span"
    ],
    "html@()(implicit": [
      "p"
    ],
    "ctx": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "mycontext_])\r\n\r\n@base.layout()": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "div": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "class=\"container\"": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "class=\"row\"": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "class=\"span12\"": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "class=\"well\"": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "style=\"height": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "600px\"": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "h1": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "style=\"text-align": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "center\"main": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "page/h1>": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "p": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "style=\"font-size": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "20px": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "text-align": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "center": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "margin-top": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "15px\"": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "@ctxme": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "match": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "anonymous": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "someuser)": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "currently": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "logged": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "@htmluser.name).": [
      "p",
      "pre"
    ],
    "/p>": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "/div>": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "/div>\r\n}": [
      "p",
      "pre",
      "pre"
    ],
    "@)(implicit": [
      "pre",
      "p",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "again": [
      "p"
    ],
    "but": [
      "p"
    ],
    "time": [
      "p"
    ],
    "play": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "automatically": [
      "p"
    ],
    "performs": [
      "p"
    ],
    "entries": [
      "p"
    ],
    "protects": [
      "p"
    ],
    "xss": [
      "p"
    ],
    "additionally": [
      "p"
    ],
    "regex": [
      "p",
      "p",
      "a"
    ],
    "validation": [
      "p",
      "p"
    ],
    "parameter": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "able": [
      "p"
    ],
    "enter": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "names": [
      "p"
    ],
    "pid": [
      "p",
      "pre"
    ],
    "signupformempid\r\nval": [
      "p",
      "pre"
    ],
    "signupformproductname\r\nval": [
      "p",
      "pre"
    ],
    "emp": [
      "p",
      "pre"
    ],
    "empfindemp(pid,": [
      "p",
      "pre"
    ],
    "name\r\nval": [
      "p",
      "pre"
    ],
    "whitelistpattern": [
      "p",
      "pre"
    ],
    "\"\\\\w|\\\\d)+\".r\r\nval": [
      "p",
      "pre"
    ],
    "issafe": [
      "p",
      "pre"
    ],
    "=whitelistpatternpattern.matcher(name).matches\r\nif": [
      "p",
      "pre"
    ],
    "issafe){\r\n......": [
      "p",
      "pre"
    ],
    "//code": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "action\r}else{\r\n......": [
      "p",
      "pre"
    ],
    "exception\r}": [
      "p",
      "pre"
    ],
    "@username.": [
      "p",
      "pre"
    ],
    "/div>\r\n}additional": [
      "p"
    ],
    "resourcesa": [
      "p",
      "pre"
    ],
    "tutorial": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "expressions": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "at regular-expressionsinfo.for": [
      "p",
      "pre",
      "ul"
    ],
    "information": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "using": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "expression": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "scala": [
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "see": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "for regex": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "pattern in": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "additional": [
      "pre",
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "at regular-expressionsinfo.": [
      "li"
    ],
    "regular-expressionsinfo": [
      "a"
    ],
    "pattern": [
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "Additional Resources"
    ],
    "br": [
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "",
      "Reflective: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results.Persistent: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.",
      "URL encoding: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, < is represented by %3C where 3C is the ASCII value for <.HTML encoding: Use HTML encoding when the echoed input is returned as regular text or HTML content. Encode input by substituting certain characters with their respective HTML values:CharacterHTML value<<>>&&\"\"''HTML attribute encoding: Use HTML attribute encoding to encode dynamic data that is output in an attribute of an HTML tag, except URL, CSS, and JavaScript event handler attributes.JavaScript encoding: Use JavaScript encoding to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.CSS encoding: Use CSS encoding to encode dynamic data that is output into the CSS context.DOM encoding: Use DOM encoding to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.",
      "A tutorial on regular expressions is available at Regular-Expressions.info.For more information on using regular expression in Scala, see: Documentation for Regex Pattern in Scala documentation."
    ],
    "p": [
      "Encode all input that is echoed back to the user.",
      "Proper encoding of echoed input prevents injection attacks such as cross-site scripting.",
      "If user input will be echoed back to the client in any way, encode it before displaying it. This includes input that is immediately echoed back as well as input that is stored first (such as in a database) before being echoed back later.",
      "",
      "Use the following steps to ensure all echoed input is encoded:",
      "Identify all echoed input. Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature:",
      "Determine the type of encoding. After you identify all echoed input, determine how the input is returned to the client. Data is said to be in an HTML context when that data is rendered as a part of an HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. Differences in encoding arise from the fact that different contexts have different special symbols and keywords. Design output encoding routines with the understanding of the context of the output in mind.",
      "URL encoding: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, < is represented by %3C where 3C is the ASCII value for <.",
      "HTML encoding: Use HTML encoding when the echoed input is returned as regular text or HTML content. Encode input by substituting certain characters with their respective HTML values:",
      "HTML attribute encoding: Use HTML attribute encoding to encode dynamic data that is output in an attribute of an HTML tag, except URL, CSS, and JavaScript event handler attributes.",
      "JavaScript encoding: Use JavaScript encoding to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.",
      "CSS encoding: Use CSS encoding to encode dynamic data that is output into the CSS context.",
      "DOM encoding: Use DOM encoding to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.",
      "Apply the encoding. After you identify the echoed input and determine the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please refer to the vendor's documentation for each potential encoding library.",
      "The following code shows how a user registers for an account. Post-registration, when the user logs in, the registered name is reflected back on the screen. Because it does not HTML encode the echoed input, the application is vulnerable to persistent cross-site scripting.",
      "Code for the user creation model -- notice that the name is a String object with no validations and allows special characters:",
      "object User extends UserInfoService[String, User] {\r\n\r\n  val passwordService = MyPasswordService\r\n\r\n  def register(email: String, name:String, password: String) : User = {\r\n    val encryptedPassword = passwordService.encryptPassword(password)\r\n    val user = User(email, name, encryptedPassword)\r\n    create(user)\r\n  }\r\n\r\ndef create(user: User): User = {\r\n    DB.withConnection {\r\n      implicit connection =>\r\n        SQL(\r\n          \"\"\"\r\n          insert into user values (\r\n            {email}, {name}, {password}\r\n          )\r\n          \"\"\"\r\n        ).on(\r\n          'email -> user.email,\r\n          'name -> user.name,\r\n          'password -> user.password.underlying\r\n        ).executeUpdate()\r\n\r\n        user\r\n    }\r\n  }Code for Signup Controller",
      "",
      "val signupForm = Form(\r\n    mapping(\r\n      \"email\" -> email,\r\n      \"fullName\" -> text,\r\n      \"password\" -> weakPassword\r\n    )(SignupData.apply)(_ => None)\r\n  )\r\n\r\n  case class SignupData(email: String, fullName: String, password: String)Code for the HTML template where the user is redirected after successful login -- notice that the name, which is  not sanitized, is reflected back as raw HTML.@()(implicit ctx: MyContext[_])\r\n\r\n@base.layout() {\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"span12\">\r\n        <div class=\"well\" style=\"height: 600px\">\r\n          <h1 style=\"text-align: center\">Main Page</h1>\r\n\r\n          <p style=\"font-size: 20px; text-align: center; margin-top: 15px\">\r\n            @ctx.me match {\r\n              case None => {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) => {\r\n                You are currently logged in as @Html(user.name).\r\n              }\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}",
      "",
      "The following code shows how a user registers for an account. Again, post-registration, when the user logs in, the registered name is reflected back on the screen. But this time the play framework automatically performs HTML encoding of all the entries in the HTML template. This protects the application from XSS. Additionally, there is regex validation on the Name parameter to make sure that the user is not able to enter malicious names into the application.",
      "Regex validation for Name:",
      "val pid = SignupForm.empid\r\nval name = SignupForm.productname\r\nval emp = Emp.findEmp(pid, name)\r\nval whitelistPattern = \"(\\\\w|\\\\d)+\".r\r\nval issafe =whitelistPattern.pattern.matcher(name).matches\r\nif (issafe){\r\n...... //Code for Action\r\n}else{\r\n...... //Code for Exception\r\n}",
      "",
      "Code for HTML template:",
      "@()(implicit ctx: MyContext[_])\r\n\r\n@base.layout() {\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"span12\">\r\n        <div class=\"well\" style=\"height: 600px\">\r\n          <h1 style=\"text-align: center\">Main Page</h1>\r\n\r\n          <p style=\"font-size: 20px; text-align: center; margin-top: 15px\">\r\n            @ctx.me match {\r\n              case None => {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) => {\r\n                You are currently logged in as @user.name.\r\n              }\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}Additional ResourcesA tutorial on regular expressions is available at Regular-Expressions.info.For more information on using regular expression in Scala, see: Documentation for Regex Pattern in Scala documentation.",
      ""
    ],
    "ol": [
      "Identify all echoed input. Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature:Reflective: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results.Persistent: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.Determine the type of encoding. After you identify all echoed input, determine how the input is returned to the client. Data is said to be in an HTML context when that data is rendered as a part of an HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. Differences in encoding arise from the fact that different contexts have different special symbols and keywords. Design output encoding routines with the understanding of the context of the output in mind.URL encoding: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, < is represented by %3C where 3C is the ASCII value for <.HTML encoding: Use HTML encoding when the echoed input is returned as regular text or HTML content. Encode input by substituting certain characters with their respective HTML values:CharacterHTML value<<>>&&\"\"''HTML attribute encoding: Use HTML attribute encoding to encode dynamic data that is output in an attribute of an HTML tag, except URL, CSS, and JavaScript event handler attributes.JavaScript encoding: Use JavaScript encoding to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.CSS encoding: Use CSS encoding to encode dynamic data that is output into the CSS context.DOM encoding: Use DOM encoding to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.Apply the encoding. After you identify the echoed input and determine the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please refer to the vendor's documentation for each potential encoding library."
    ],
    "li": [
      "Identify all echoed input. Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature:Reflective: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results.Persistent: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.",
      "Reflective: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results.",
      "Persistent: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.",
      "Determine the type of encoding. After you identify all echoed input, determine how the input is returned to the client. Data is said to be in an HTML context when that data is rendered as a part of an HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. Differences in encoding arise from the fact that different contexts have different special symbols and keywords. Design output encoding routines with the understanding of the context of the output in mind.URL encoding: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, < is represented by %3C where 3C is the ASCII value for <.HTML encoding: Use HTML encoding when the echoed input is returned as regular text or HTML content. Encode input by substituting certain characters with their respective HTML values:CharacterHTML value<<>>&&\"\"''HTML attribute encoding: Use HTML attribute encoding to encode dynamic data that is output in an attribute of an HTML tag, except URL, CSS, and JavaScript event handler attributes.JavaScript encoding: Use JavaScript encoding to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.CSS encoding: Use CSS encoding to encode dynamic data that is output into the CSS context.DOM encoding: Use DOM encoding to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.",
      "URL encoding: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, < is represented by %3C where 3C is the ASCII value for <.",
      "HTML encoding: Use HTML encoding when the echoed input is returned as regular text or HTML content. Encode input by substituting certain characters with their respective HTML values:CharacterHTML value<<>>&&\"\"''",
      "HTML attribute encoding: Use HTML attribute encoding to encode dynamic data that is output in an attribute of an HTML tag, except URL, CSS, and JavaScript event handler attributes.",
      "JavaScript encoding: Use JavaScript encoding to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.",
      "CSS encoding: Use CSS encoding to encode dynamic data that is output into the CSS context.",
      "DOM encoding: Use DOM encoding to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.",
      "Apply the encoding. After you identify the echoed input and determine the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please refer to the vendor's documentation for each potential encoding library.",
      "A tutorial on regular expressions is available at Regular-Expressions.info.",
      "For more information on using regular expression in Scala, see: Documentation for Regex Pattern in Scala documentation."
    ],
    "strong": [
      "Identify all echoed input.",
      "Reflective",
      "Persistent",
      "Determine the type of encoding.",
      "URL encoding",
      "HTML encoding",
      "HTML attribute encoding",
      "JavaScript encoding",
      "CSS encoding",
      "DOM encoding",
      "Apply the encoding."
    ],
    "em": [
      "<",
      "%3C",
      "3C",
      "<."
    ],
    "blockquote": [
      "CharacterHTML value<<>>&&\"\"''"
    ],
    "table": [
      "CharacterHTML value<<>>&&\"\"''"
    ],
    "tbody": [
      "CharacterHTML value<<>>&&\"\"''"
    ],
    "tr": [
      "CharacterHTML value",
      "<<",
      ">>",
      "&&",
      "\"\"",
      "''"
    ],
    "td": [
      "Character",
      "HTML value",
      "<",
      "<",
      ">",
      ">",
      "&",
      "&",
      "\"",
      "\"",
      "'",
      "'"
    ],
    "pre": [
      "object User extends UserInfoService[String, User] {\r\n\r\n  val passwordService = MyPasswordService\r\n\r\n  def register(email: String, name:String, password: String) : User = {\r\n    val encryptedPassword = passwordService.encryptPassword(password)\r\n    val user = User(email, name, encryptedPassword)\r\n    create(user)\r\n  }\r\n\r\ndef create(user: User): User = {\r\n    DB.withConnection {\r\n      implicit connection =>\r\n        SQL(\r\n          \"\"\"\r\n          insert into user values (\r\n            {email}, {name}, {password}\r\n          )\r\n          \"\"\"\r\n        ).on(\r\n          'email -> user.email,\r\n          'name -> user.name,\r\n          'password -> user.password.underlying\r\n        ).executeUpdate()\r\n\r\n        user\r\n    }\r\n  }",
      "",
      "Code for Signup Controller",
      "val signupForm = Form(\r\n    mapping(\r\n      \"email\" -> email,\r\n      \"fullName\" -> text,\r\n      \"password\" -> weakPassword\r\n    )(SignupData.apply)(_ => None)\r\n  )\r\n\r\n  case class SignupData(email: String, fullName: String, password: String)",
      "",
      "Code for the HTML template where the user is redirected after successful login -- notice that the name, which is  not sanitized, is reflected back as raw HTML.",
      "@()(implicit ctx: MyContext[_])\r\n\r\n@base.layout() {\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"span12\">\r\n        <div class=\"well\" style=\"height: 600px\">\r\n          <h1 style=\"text-align: center\">Main Page</h1>\r\n\r\n          <p style=\"font-size: 20px; text-align: center; margin-top: 15px\">\r\n            @ctx.me match {\r\n              case None => {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) => {\r\n                You are currently logged in as @Html(user.name).\r\n              }\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}",
      "val pid = SignupForm.empid\r\nval name = SignupForm.productname\r\nval emp = Emp.findEmp(pid, name)\r\nval whitelistPattern = \"(\\\\w|\\\\d)+\".r\r\nval issafe =whitelistPattern.pattern.matcher(name).matches\r\nif (issafe){\r\n...... //Code for Action\r\n}else{\r\n...... //Code for Exception\r\n}",
      "@()(implicit ctx: MyContext[_])\r\n\r\n@base.layout() {\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"span12\">\r\n        <div class=\"well\" style=\"height: 600px\">\r\n          <h1 style=\"text-align: center\">Main Page</h1>\r\n\r\n          <p style=\"font-size: 20px; text-align: center; margin-top: 15px\">\r\n            @ctx.me match {\r\n              case None => {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) => {\r\n                You are currently logged in as @user.name.\r\n              }\r\n            }\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}",
      "Additional ResourcesA tutorial on regular expressions is available at Regular-Expressions.info.For more information on using regular expression in Scala, see: Documentation for Regex Pattern in Scala documentation."
    ],
    "span": [
      "Code for Signup Controller",
      "Code for the HTML template where the user is redirected after successful login -- notice that the name, which is  not sanitized, is reflected back as raw HTML."
    ],
    "font": [
      ""
    ],
    "div": [
      ""
    ],
    "a": [
      "Regular-Expressions.info",
      "Regex Pattern"
    ]
  },
  "links": [
    {
      "href": "http://www.regular-expressions.info/",
      "text": "Regular-Expressions.info"
    },
    {
      "href": "http://www.scala-lang.org/api/current/index.html#scala.util.matching.Regex",
      "text": "Regex Pattern"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  Applications written using Scala and Play Framework 2.1.0+.<br /><ul></ul><h1>What to Do</h1><p>Encode all input that is echoed back to the user.</p><h1>Why</h1><p>Proper encoding of echoed input prevents injection attacks such as cross-site scripting.</p><h1>When</h1><p>If user input will be echoed back to the client in any way, encode it before displaying it. This includes input that is immediately echoed back as well as input that is stored first (such as in a database) before being echoed back later.</p><h1>How</h1><p /><p>Use the following steps to ensure all echoed input is encoded:</p><ol><li><p><strong>Identify all echoed input.&nbsp;</strong>Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature:</p><ul><li><strong>Reflective</strong>: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results.</li><li><strong>Persistent</strong>: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.</li></ul></li><li><p><strong>Determine the&nbsp;type of encoding.&nbsp;</strong>After you identify all echoed input, determine how the input is returned to the client. Data is said to be in an HTML context when that data is rendered as a part of an HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. Differences in encoding arise from the fact that different contexts have different special symbols and keywords. Design output encoding routines with the understanding of the context of the output in mind.</p><ul><li><p><strong>URL encoding</strong>: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example,&nbsp;<em>&lt;</em>&nbsp;is represented by&nbsp;<em>%3C</em>&nbsp;where&nbsp;<em>3C</em>&nbsp;is the ASCII value for&nbsp;<em>&lt;.</em></p></li><li><p><strong>HTML encoding</strong>: Use HTML encoding when the echoed input is returned as regular text or HTML content. Encode input by substituting certain characters with their respective HTML values:<br /></p><blockquote><table><tbody><tr><td>Character</td><td>HTML value</td></tr><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>&gt;</td><td>&gt;</td></tr><tr><td>&</td><td>&</td></tr><tr><td>\"</td><td>\"</td></tr><tr><td>'</td><td>'</td></tr></tbody></table></blockquote></li><li><p><strong>HTML attribute encoding</strong>: Use HTML attribute encoding to encode dynamic data that is output in an attribute of an HTML tag, except&nbsp;URL, CSS, and JavaScript event handler attributes.</p></li><li><p><strong>JavaScript encoding</strong>: Use JavaScript encoding to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.</p></li><li><p><strong>CSS encoding</strong>: Use CSS encoding to encode dynamic data that is output into the CSS context.</p></li><li><p><strong>DOM encoding</strong>: Use DOM encoding to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.</p></li></ul></li><li><p><strong>Apply the encoding.&nbsp;</strong>After you identify the echoed input and determine the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please refer to the vendor's documentation for each potential encoding library.</p></li></ol><h1>Problem Example</h1><p>The following code shows how a user registers for an account. Post-registration, when the user logs in, the registered name is reflected back on the screen. Because it does not HTML encode the echoed input, the application is vulnerable to persistent cross-site scripting.</p><p>Code for the user creation model -- notice that the name is a String object with no validations and allows special characters:</p><p style=\"font-size: 10pt; font-family: Arial, Verdana;\" /><pre>object User extends UserInfoService[String, User] {\r\n\r\n  val passwordService = MyPasswordService\r\n\r\n  def register(email: String, name:String, password: String) : User = {\r\n    val encryptedPassword = passwordService.encryptPassword(password)\r\n    val user = User(email, name, encryptedPassword)\r\n    create(user)\r\n  }\r\n\r\ndef create(user: User): User = {\r\n    DB.withConnection {\r\n      implicit connection =&gt;\r\n        SQL(\r\n          \"\"\"\r\n          insert into user values (\r\n            {email}, {name}, {password}\r\n          )\r\n          \"\"\"\r\n        ).on(\r\n          'email -&gt; user.email,\r\n          'name -&gt; user.name,\r\n          'password -&gt; user.password.underlying\r\n        ).executeUpdate()\r\n\r\n        user\r\n    }\r\n  }</pre><pre><br /></pre><pre><span style=\"font-family: Arial, Verdana; white-space: normal;\">Code for Signup Controller</span></pre><p /><p /><pre>  val signupForm = Form(\r\n    mapping(\r\n      \"email\" -&gt; email,\r\n      \"fullName\" -&gt; text,\r\n      \"password\" -&gt; weakPassword\r\n    )(SignupData.apply)(_ =&gt; None)\r\n  )\r\n\r\n  case class SignupData(email: String, fullName: String, password: String)</pre><pre><br /></pre><pre><span style=\"font-family: Arial, Verdana; white-space: normal;\">Code for the HTML template where the user is redirected after successful login -- notice that the name, which is&nbsp; not sanitized, is reflected back as raw HTML.</span></pre><pre>@()(implicit ctx: MyContext[_])\r\n\r\n@base.layout() {\r\n  &lt;div class=\"container\"&gt;\r\n    &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"span12\"&gt;\r\n        &lt;div class=\"well\" style=\"height: 600px\"&gt;\r\n          &lt;h1 style=\"text-align: center\"&gt;Main Page&lt;/h1&gt;\r\n\r\n          &lt;p style=\"font-size: 20px; text-align: center; margin-top: 15px\"&gt;\r\n            @ctx.me match {\r\n              case None =&gt; {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) =&gt; {\r\n                You are currently logged in as @Html(user.name).\r\n              }\r\n            }\r\n          &lt;/p&gt;\r\n        &lt;/div&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n}<font face=\"Arial, Verdana\" size=\"3\"></font></pre><div><br /></div><p /><h1>Solution Example</h1><p>The following code shows how a user registers for an account. Again, post-registration, when the user logs in, the registered name is reflected back on the screen. But this time the play framework automatically performs HTML encoding of all the entries in the HTML template. This protects the application from XSS. Additionally, there is regex validation on the Name parameter to make sure that the user is not able to enter malicious names into the application.</p><p>Regex validation for Name:</p><p /><pre>val pid = SignupForm.empid\r\nval name = SignupForm.productname\r\nval emp = Emp.findEmp(pid, name)\r\nval whitelistPattern = \"(\\\\w|\\\\d)+\".r\r\nval issafe =whitelistPattern.pattern.matcher(name).matches\r\nif (issafe){\r\n...... //Code for Action\r\n}else{\r\n...... //Code for Exception\r\n}</pre><p /><p>Code for HTML template:</p><p /><pre>@()(implicit ctx: MyContext[_])\r\n\r\n@base.layout() {\r\n  &lt;div class=\"container\"&gt;\r\n    &lt;div class=\"row\"&gt;\r\n      &lt;div class=\"span12\"&gt;\r\n        &lt;div class=\"well\" style=\"height: 600px\"&gt;\r\n          &lt;h1 style=\"text-align: center\"&gt;Main Page&lt;/h1&gt;\r\n\r\n          &lt;p style=\"font-size: 20px; text-align: center; margin-top: 15px\"&gt;\r\n            @ctx.me match {\r\n              case None =&gt; {\r\n                You are anonymous.\r\n              }\r\n              case Some(user) =&gt; {\r\n                You are currently logged in as @user.name.\r\n              }\r\n            }\r\n          &lt;/p&gt;\r\n        &lt;/div&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n}</pre><pre><h1 style=\"font-family: Arial, Verdana; white-space: normal;\">Additional Resources</h1><ul style=\"font-family: Arial, Verdana; font-size: 13px; white-space: normal;\"><li>A tutorial on regular expressions is available at&nbsp;<a href=\"http://www.regular-expressions.info/\">Regular-Expressions.info</a>.</li><li>For more information on using regular expression in Scala, see: Documentation for&nbsp;<a href=\"http://www.scala-lang.org/api/current/index.html#scala.util.matching.Regex\">Regex Pattern</a>&nbsp;in Scala documentation.</li></ul></pre><p />"
}