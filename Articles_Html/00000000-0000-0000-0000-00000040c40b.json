{
  "id": "00000000-0000-0000-0000-00000040c40b",
  "checksum": "2f68125df585530a45007b5ed1ed7b78acc5074f",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "aspnet": [
      "ul",
      "li"
    ],
    "what": [
      "h2",
      "p",
      "p"
    ],
    "check": [
      "h2",
      "h2"
    ],
    "for": [
      "h2",
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "make": [
      "p",
      "p"
    ],
    "sure": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li"
    ],
    "connection": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "strings": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "title"
    ],
    "do": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "ol",
      "li",
      "title"
    ],
    "contain": [
      "p"
    ],
    "any": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "user": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "title"
    ],
    "supplied": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "title"
    ],
    "why": [
      "h2"
    ],
    "don't": [
      "p",
      "ol",
      "li"
    ],
    "include": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li"
    ],
    "user-controlled": [
      "p"
    ],
    "data": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "string": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "injection": [
      "p",
      "p"
    ],
    "attacks": [
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "title"
    ],
    "inserted": [
      "p"
    ],
    "into": [
      "p"
    ],
    "a": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "an": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "attacker": [
      "p",
      "p",
      "p"
    ],
    "may": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "able": [
      "p"
    ],
    "control": [
      "p"
    ],
    "database": [
      "p",
      "p"
    ],
    "server": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "connects": [
      "p",
      "p"
    ],
    "giving": [
      "p"
    ],
    "controls": [
      "p"
    ],
    "over": [
      "p"
    ],
    "known": [
      "p"
    ],
    "as": [
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "leverage": [
      "p"
    ],
    "this": [
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "bypass": [
      "p"
    ],
    "authentication": [
      "p"
    ],
    "or": [
      "p"
    ],
    "cause": [
      "p"
    ],
    "unexpected": [
      "p"
    ],
    "behavior": [
      "p"
    ],
    "how": [
      "h2",
      "h2"
    ],
    "included": [
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "all": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "used": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "title"
    ],
    "by": [
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "search": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "code": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "configuration": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "files": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "and": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "protected": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li"
    ],
    "storage": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li"
    ],
    "also": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "good": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "opportunity": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "move": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "hard": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "coded": [
      "ol",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "out": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "of": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "identified": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "find": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "ones": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "there": [
      "ol",
      "li"
    ],
    "should": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "no": [
      "ol",
      "li"
    ],
    "one": [
      "ol",
      "li"
    ],
    "exception": [
      "ol",
      "li"
    ],
    "when": [
      "ol",
      "li"
    ],
    "administrator": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "allowed": [
      "ol",
      "li"
    ],
    "change": [
      "ol",
      "li"
    ],
    "during": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "setupl": [
      "ol",
      "li"
    ],
    "scenario": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "thoroughly": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "validated": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "interface": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "configure": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "shouldonly": [
      "ol",
      "li"
    ],
    "accessible": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "once": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "configured": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "stored": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "using": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "dpapi": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "fix": [
      "h2"
    ],
    "from": [
      "p",
      "ol",
      "li"
    ],
    "being": [
      "p"
    ],
    "replace": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "but": [
      "ol",
      "li"
    ],
    "hard-code": [
      "ol",
      "li"
    ],
    "store": [
      "ol",
      "li"
    ],
    "validate": [
      "ol",
      "li",
      "strong"
    ],
    "absolutely": [
      "ol",
      "li"
    ],
    "must": [
      "ol",
      "li"
    ],
    "get": [
      "ol",
      "li"
    ],
    "parameters": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "needs": [
      "ol",
      "li"
    ],
    "properly": [
      "ol",
      "li"
    ],
    "it's": [
      "ol",
      "li"
    ],
    "really": [
      "ol",
      "li"
    ],
    "recommended": [
      "ol",
      "li"
    ],
    "need": [
      "ol",
      "li"
    ],
    "entered": [
      "ol",
      "li"
    ],
    "only": [
      "ol",
      "li"
    ],
    "administrators": [
      "ol",
      "li"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix"
    ],
    "ul": [
      "ASP.NET"
    ],
    "li": [
      "ASP.NET",
      "Identify all connection strings used by the application. Search the code, configuration files and protected storage for connection strings. This is also a good opportunity to move any hard coded connection strings to protected storage.",
      "Identify connection strings that include user input. Out of the identified connection strings, find ones that include user input. There should be no connection strings that include user input. The one exception may be when an administrator is allowed to change the connection string during setup.l In that scenario, user input should be thoroughly validated. The interface that is used to configure the application shouldonly be accessible by the administrator. Once the application is configured, connection strings should be stored in protected storage using DPAPI.",
      "Search the code, configuration files and protected storage for connection strings. This is also a good opportunity to move any hard coded connection strings to protected storage.",
      "Identify connection strings that include user input. Out of the identified connection strings, find ones that include user input.",
      "Replace connection strings that include user input. Replace connection strings that include user input, but don't hard-code the connection strings. Store connection strings in protected storage using DPAPI.",
      "Validate all user input. If the application absolutely must get connection string parameters from the user, the user input needs to be properly validated. It's really not recommended to include user input in connection strings. Connection string parameters may need to be entered during application configuration. In this scenario, user input should be thoroughly validated. The interface that is used to configure the application should only be accessible to administrators. Once the application is configured, connection strings should be stored in protected storage using DPAPI."
    ],
    "p": [
      "Make sure that connection strings do not contain any user supplied input.",
      "Don't include user-controlled data in connection strings to prevent connection string injection attacks. If user input is inserted into a connection string, an attacker may be able to control what database server the application connects to. Giving an attacker controls over what database the application connects to is known as connection string injection vulnerability. An attacker may leverage this vulnerability to bypass authentication or cause unexpected application behavior.",
      "To make sure that user input is not included in connection strings:",
      "To prevent user input from being used in connection strings:"
    ],
    "ol": [
      "Identify all connection strings used by the application. Search the code, configuration files and protected storage for connection strings. This is also a good opportunity to move any hard coded connection strings to protected storage. \n Identify connection strings that include user input. Out of the identified connection strings, find ones that include user input. There should be no connection strings that include user input. The one exception may be when an administrator is allowed to change the connection string during setup.l In that scenario, user input should be thoroughly validated. The interface that is used to configure the application shouldonly be accessible by the administrator. Once the application is configured, connection strings should be stored in protected storage using DPAPI.",
      "Search the code, configuration files and protected storage for connection strings. This is also a good opportunity to move any hard coded connection strings to protected storage.\n Identify connection strings that include user input. Out of the identified connection strings, find ones that include user input. \n Replace connection strings that include user input. Replace connection strings that include user input, but don't hard-code the connection strings. Store connection strings in protected storage using DPAPI.\n Validate all user input. If the application absolutely must get connection string parameters from the user, the user input needs to be properly validated. It's really not recommended to include user input in connection strings. Connection string parameters may need to be entered during application configuration. In this scenario, user input should be thoroughly validated. The interface that is used to configure the application should only be accessible to administrators. Once the application is configured, connection strings should be stored in protected storage using DPAPI."
    ],
    "strong": [
      "Identify all connection strings used by the application.",
      "Identify connection strings that include user input.",
      "Search the code, configuration files and protected storage for connection strings. This is also a good opportunity to move any hard coded connection strings to protected storage.",
      "Identify connection strings that include user input.",
      "Replace connection strings that include user input.",
      "Validate all user input."
    ]
  },
  "links": [],
  "html": "<h2>Applies To</h2><ul><li>ASP.NET</li>\n</ul><h2>What to Check For</h2><p>Make sure that connection strings do not contain any user supplied input. \n</p><h2>Why</h2><p>Don't include user-controlled data in connection strings to prevent connection string injection attacks. If user input is inserted into a connection string, an attacker may be able to control what database server the application connects to. Giving an attacker controls over what database the application connects to is known as connection string injection vulnerability. An attacker may leverage this vulnerability to bypass authentication or cause unexpected application behavior.\n</p><h2>How to Check</h2><p>To make sure that user input is not included in connection strings:\n</p><ol>\n<li> <strong>Identify all connection strings used by the application.</strong> Search the code, configuration files and protected storage for connection strings. This is also a good opportunity to move any hard coded connection strings to protected storage. </li>\n<li> <strong>Identify connection strings that include user input.</strong> Out of the identified connection strings, find ones that include user input. There should be no connection strings that include user input. The one exception may be when an administrator is allowed to change the connection string during setup.l In that scenario, user input should be thoroughly validated. The interface that is used to configure the application shouldonly be accessible by the administrator. Once the application is configured, connection strings should be stored in protected storage using DPAPI. </li>\n</ol><h2>How to Fix</h2><p>To prevent user input from being used in connection strings:\n</p><ol>\n<li> <strong> Search the code, configuration files and protected storage for connection strings. This is also a good opportunity to move any hard coded connection strings to protected storage.</strong></li>\n<li> <strong>Identify connection strings that include user input.</strong> Out of the identified connection strings, find ones that include user input. </li>\n<li> <strong>Replace connection strings that include user input.</strong> Replace connection strings that include user input, but don't hard-code the connection strings. Store connection strings in protected storage using DPAPI.</li>\n<li> <strong>Validate all user input.</strong> If the application absolutely must get connection string parameters from the user, the user input needs to be properly validated. It's really not recommended to include user input in connection strings. Connection string parameters may need to be entered during application configuration. In this scenario, user input should be thoroughly validated. The interface that is used to configure the application should only be accessible to administrators. Once the application is configured, connection strings should be stored in protected storage using DPAPI. </li></ol>"
}