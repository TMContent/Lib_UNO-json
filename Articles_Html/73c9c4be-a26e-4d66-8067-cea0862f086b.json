{
  "id": "73c9c4be-a26e-4d66-8067-cea0862f086b",
  "checksum": "6ac3b14f0799a64f1c08e083dfb2d8bee9150ae1",
  "words": {
    "1": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "write": [
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p"
    ],
    "way": [
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "provides": [
      "p"
    ],
    "guarantee": [
      "p",
      "p"
    ],
    "allocated": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "title"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "freed": [
      "p",
      "p"
    ],
    "only": [
      "p",
      "p",
      "p",
      "p"
    ],
    "once": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "freeing": [
      "p",
      "p"
    ],
    "multiple": [
      "p",
      "p"
    ],
    "times": [
      "p",
      "p"
    ],
    "may": [
      "p",
      "ul",
      "li"
    ],
    "corrupt": [
      "p"
    ],
    "heap": [
      "p"
    ],
    "data": [
      "p"
    ],
    "structures": [
      "p"
    ],
    "and": [
      "p"
    ],
    "result": [
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p"
    ],
    "allow": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "guarantees": [
      "p"
    ],
    "dynamically": [
      "p",
      "li",
      "p",
      "title"
    ],
    "avoid": [
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "loops": [
      "p"
    ],
    "conditional": [
      "p"
    ],
    "statements": [
      "p"
    ],
    "or": [
      "p"
    ],
    "error": [
      "p",
      "pre",
      "ul",
      "li",
      "p"
    ],
    "handling": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "event": [
      "p"
    ],
    "it": [
      "p"
    ],
    "necessary": [
      "p"
    ],
    "delete": [
      "p",
      "p"
    ],
    "objects": [
      "p",
      "p"
    ],
    "circumstances": [
      "p"
    ],
    "pay": [
      "p"
    ],
    "particular": [
      "p"
    ],
    "care": [
      "p"
    ],
    "are": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "ul",
      "li"
    ],
    "deleted": [
      "p"
    ],
    "rewrite": [
      "p"
    ],
    "if": [
      "p",
      "ul",
      "li"
    ],
    "there": [
      "p",
      "p"
    ],
    "no": [
      "p"
    ],
    "deallocation": [
      "p",
      "li"
    ],
    "performed": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "float": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "*array": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre"
    ],
    "5];": [
      "pre",
      "pre"
    ],
    "int": [
      "pre",
      "pre"
    ],
    "errorcode": [
      "pre",
      "pre"
    ],
    "somefunctionarray);": [
      "pre",
      "pre"
    ],
    "iferrorcode": [
      "pre",
      "pre"
    ],
    "1{": [
      "pre"
    ],
    "//handle": [
      "pre",
      "pre"
    ],
    "delete]": [
      "pre",
      "pre",
      "pre"
    ],
    "array}": [
      "pre"
    ],
    "array": [
      "pre"
    ],
    "two": [
      "p"
    ],
    "mistakes": [
      "p"
    ],
    "this": [
      "p"
    ],
    "pointer": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "set": [
      "ul",
      "li",
      "p"
    ],
    "null": [
      "ul",
      "li",
      "pre",
      "p"
    ],
    "after": [
      "ul",
      "li"
    ],
    "deallocationdynamically": [
      "ul"
    ],
    "be": [
      "ul",
      "li"
    ],
    "deallocated": [
      "ul",
      "li",
      "p"
    ],
    "twice": [
      "ul",
      "li"
    ],
    "returned": [
      "ul",
      "li"
    ],
    "by": [
      "ul",
      "li"
    ],
    "somefunction": [
      "ul",
      "li"
    ],
    "less": [
      "ul",
      "li"
    ],
    "than": [
      "ul",
      "li"
    ],
    "solution": [
      "h1"
    ],
    "1){": [
      "pre"
    ],
    "error}": [
      "pre"
    ],
    "arrayarray": [
      "pre"
    ],
    "because": [
      "p"
    ],
    "operator": [
      "p"
    ],
    "has": [
      "p"
    ],
    "been": [
      "p"
    ],
    "removed": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "dangling": [
      "p"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "don't": [
      "ul",
      "li",
      "a"
    ],
    "access": [
      "ul",
      "li",
      "a"
    ],
    "unallocated": [
      "ul",
      "li",
      "a"
    ],
    "free": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "How",
      "Problem Example",
      "Solution Example",
      "Related Items"
    ],
    "ul": [
      "C++",
      "The pointer is not set to null after deallocation.Dynamically allocated memory may be deallocated twice if the error code returned by somefunction is less than 1.",
      "Don't Access Unallocated Memory"
    ],
    "li": [
      "C++",
      "The pointer is not set to null after deallocation.",
      "Dynamically allocated memory may be deallocated twice if the error code returned by somefunction is less than 1.",
      "Don't Access Unallocated Memory"
    ],
    "p": [
      "Write code in such a way that provides a guarantee that allocated memory is freed only once.",
      "Freeing memory multiple times may corrupt heap data structures and result in vulnerabilities that allow arbitrary code execution.",
      "Write code in a way that guarantees that dynamically allocated memory is freed only once. Avoid freeing memory from loops, conditional statements, or error handling code. In the event that it is necessary to delete objects in such circumstances, pay particular care to write code in such a way that objects are not deleted multiple times. Rewrite code if there is no guarantee that deallocation is performed only once.",
      "There are two mistakes in this code:",
      "Dynamically allocated memory is only deallocated once, because the delete operator has been removed from error handling code. The pointer is set to null to prevent dangling pointer vulnerabilities."
    ],
    "pre": [
      "float *array = new float [5];",
      "int errorcode = somefunction(array);",
      "if(errorcode < 1){  //handle error  delete[] array;}",
      "delete[] array;",
      "float *array = new float [5];",
      "int errorcode = somefunction(array);",
      "if(errorcode <1){  //handle error}",
      "delete[] array;array = NULL;"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "Don't Access Unallocated Memory"
    ]
  },
  "links": [
    {
      "href": "/article/b8b0d075-5aa2-4095-a441-210f38fc3b3e",
      "text": "Don't Access Unallocated Memory"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Write code in such a way that provides a guarantee that allocated memory is freed only once.</p>\n  <h1>Why</h1>\n  <p>Freeing memory multiple times may corrupt heap data structures and result in vulnerabilities that allow arbitrary code execution.</p>\n  <h1>How</h1>\n  <p>Write code in a way that guarantees that dynamically allocated memory is freed only once. Avoid freeing memory from loops, conditional statements, or error handling code. In the event that it is necessary to delete objects in such circumstances, pay particular care to write code in such a way that objects are not deleted multiple times. Rewrite code if there is no guarantee that deallocation is performed only once.</p>\n  <h1>Problem Example</h1>\n  <pre>float &#42;array = new float &#91;5&#93;;</pre>\n  <pre>int errorcode = somefunction(array);</pre>\n  <pre>if(errorcode &lt; 1)<br />&#123;<br />  //handle error<br />  delete&#91;&#93; array;<br />&#125;</pre>\n  <pre>delete&#91;&#93; array;</pre>\n  <p>There are two mistakes in this code:</p>\n  <ul>\n    <li>The pointer is not set to null after deallocation.<li>Dynamically allocated memory may be deallocated twice if the error code returned by somefunction is less than 1.<br /></li></li>\n  </ul>\n  <h1>Solution Example</h1>\n  <pre>float &#42;array = new float &#91;5&#93;;</pre>\n  <pre>int errorcode = somefunction(array);</pre>\n  <pre>if(errorcode &lt;1)<br />&#123;<br />  //handle error<br />&#125;</pre>\n  <pre>delete&#91;&#93; array;<br />array = NULL;</pre>\n  <p>Dynamically allocated memory is only deallocated once, because the delete operator has been removed from error handling code. The pointer is set to null to prevent dangling pointer vulnerabilities.</p>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/b8b0d075-5aa2-4095-a441-210f38fc3b3e\">Don't Access Unallocated Memory</a>\n    </li>\n  </ul>"
}