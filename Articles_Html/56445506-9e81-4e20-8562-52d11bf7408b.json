{
  "id": "56445506-9e81-4e20-8562-52d11bf7408b",
  "checksum": "8b7bf854280704f4b5f75f767e8d613f59e57d35",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "a",
      "title"
    ],
    "do": [
      "h1"
    ],
    "avoid": [
      "p",
      "p",
      "p"
    ],
    "using": [
      "p",
      "p"
    ],
    "custom": [
      "p",
      "p"
    ],
    "error": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "pages": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "denote": [
      "p"
    ],
    "states": [
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "returned": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "client": [
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "exceptions": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "contain": [
      "p"
    ],
    "debugging": [
      "p"
    ],
    "information": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "could": [
      "p"
    ],
    "constitute": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "disclosure": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p"
    ],
    "careful": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "title"
    ],
    "they": [
      "p"
    ],
    "may": [
      "p"
    ],
    "also": [
      "p"
    ],
    "implicitly": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "unintended": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "side": [
      "p"
    ],
    "effect": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "this guideline": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "applicable": [
      "p"
    ],
    "whenever": [
      "p"
    ],
    "there": [
      "p",
      "p",
      "p"
    ],
    "returned from": [
      "p"
    ],
    "application": [
      "p",
      "p"
    ],
    "how": [
      "h1"
    ],
    "standardize": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p"
    ],
    "scrutinize": [
      "p"
    ],
    "their": [
      "p",
      "p"
    ],
    "design": [
      "p"
    ],
    "presentation": [
      "p"
    ],
    "carefully": [
      "p"
    ],
    "inadvertent": [
      "p"
    ],
    "displaying": [
      "p"
    ],
    "debug": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p"
    ],
    "see": [
      "p"
    ],
    "related": [
      "p",
      "h1"
    ],
    "guidelines": [
      "p"
    ],
    "section": [
      "p"
    ],
    "follows": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p"
    ],
    "more": [
      "p"
    ],
    "details": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "h1"
    ],
    "consider": [
      "p"
    ],
    "following": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "two": [
      "p",
      "p"
    ],
    "defined": [
      "p"
    ],
    "user": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "pre",
      "p",
      "p",
      "p"
    ],
    "valid": [
      "p",
      "p",
      "p"
    ],
    "given": [
      "p",
      "p"
    ],
    "username/password": [
      "p"
    ],
    "combination": [
      "p"
    ],
    "incorrect": [
      "p"
    ],
    "//": [
      "pre",
      "pre"
    ],
    "checkifuser_exists($username)){": [
      "pre",
      "pre"
    ],
    "ifauthentication_fails($username,": [
      "pre",
      "pre"
    ],
    "$password)": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "display_error_page'username": [
      "pre",
      "pre",
      "pre"
    ],
    "or": [
      "pre",
      "pre",
      "pre"
    ],
    "password": [
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "bad": [
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "please": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "try": [
      "pre",
      "pre",
      "pre"
    ],
    "again';": [
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre"
    ],
    "//authentication": [
      "pre",
      "pre"
    ],
    "succeeded!": [
      "pre",
      "pre"
    ],
    "login": [
      "pre",
      "pre"
    ],
    "normally": [
      "pre",
      "pre"
    ],
    "}}else{": [
      "pre",
      "pre"
    ],
    "display_error_page'user": [
      "pre"
    ],
    "does": [
      "pre"
    ],
    "exist": [
      "pre"
    ],
    "href=\"foobarcom/register.asp?uid='.clean($username)": [
      "pre"
    ],
    "'\"register!</a>');}": [
      "pre"
    ],
    "preceding": [
      "p",
      "p"
    ],
    "developer": [
      "p"
    ],
    "clever": [
      "p"
    ],
    "usernames": [
      "p"
    ],
    "taken": [
      "p"
    ],
    "presented": [
      "p"
    ],
    "url": [
      "p"
    ],
    "register": [
      "p"
    ],
    "new": [
      "p"
    ],
    "account": [
      "p"
    ],
    "username": [
      "p"
    ],
    "but": [
      "p",
      "p"
    ],
    "message": [
      "p",
      "p",
      "p"
    ],
    "enters": [
      "p"
    ],
    "completely": [
      "p"
    ],
    "different!": [
      "p"
    ],
    "subtle": [
      "p"
    ],
    "difference": [
      "p"
    ],
    "keen": [
      "p"
    ],
    "observer": [
      "p"
    ],
    "will": [
      "p"
    ],
    "note": [
      "p",
      "p"
    ],
    "this": [
      "p"
    ],
    "enables": [
      "p"
    ],
    "them": [
      "p"
    ],
    "discover": [
      "p"
    ],
    "accounts": [
      "p"
    ],
    "on": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "system": [
      "p"
    ],
    "solution": [
      "h1",
      "p"
    ],
    "again';}": [
      "pre"
    ],
    "rather": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "return": [
      "p",
      "title"
    ],
    "so": [
      "p"
    ],
    "cannot": [
      "p"
    ],
    "discern": [
      "p"
    ],
    "these": [
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "alone": [
      "p"
    ],
    "segments": [
      "p"
    ],
    "production": [
      "p"
    ],
    "quality": [
      "p"
    ],
    "might": [
      "p"
    ],
    "other": [
      "p"
    ],
    "avenues": [
      "p"
    ],
    "of": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "involving": [
      "p"
    ],
    "parameter": [
      "p"
    ],
    "tampering": [
      "p"
    ],
    "sql": [
      "p"
    ],
    "injection": [
      "p"
    ],
    "well": [
      "p"
    ],
    "others": [
      "p"
    ],
    "aforementioned": [
      "p"
    ],
    "examples": [
      "p"
    ],
    "serve": [
      "p"
    ],
    "only": [
      "p"
    ],
    "demonstrate": [
      "p"
    ],
    "point": [
      "p"
    ],
    "should": [
      "p"
    ],
    "construed": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "present": [
      "p"
    ],
    "context": [
      "p"
    ],
    "items": [
      "h1"
    ],
    "set": [
      "ul",
      "li",
      "a"
    ],
    "customerrors": [
      "ul",
      "li",
      "a"
    ],
    "mode": [
      "ul",
      "li",
      "a"
    ],
    "prevent": [
      "ul",
      "li",
      "a"
    ],
    "detailed": [
      "ul",
      "li",
      "a"
    ],
    "messages": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "global": [
      "ul",
      "li",
      "a"
    ],
    "handlers": [
      "ul",
      "li",
      "a"
    ],
    "used": [
      "ul",
      "li",
      "a"
    ],
    "catch": [
      "ul",
      "li",
      "a"
    ],
    "unhandled": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "generic": [
      "title"
    ],
    "harmless": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "Related Items"
    ],
    "p": [
      "Avoid using custom error pages to denote error states that are returned to the client.",
      "Exceptions contain debugging information that could constitute an information disclosure. Be careful with custom error pages they may also implicitly provide unintended information as a side effect.",
      "This guideline is applicable whenever there are error pages to be returned from an application.",
      "Standardize the error pages, and scrutinize their design and presentation carefully to avoid inadvertent information disclosure. Avoid displaying debug information in error pages. See the related guidelines section that follows for more details.",
      "Consider the following code. There are two defined error states: user is not valid for the given application, username/password combination is incorrect.",
      "In the preceding example, the developer is clever; usernames that are not taken are presented with a URL to register for a new account using that username. But the error message for a valid user that enters a bad password is completely different! A subtle difference, but a keen observer will note that this enables them to discover valid accounts on the system.",
      "The solution is rather simple; standardize the return message so that the client cannot discern these two states from the error message alone.",
      "NOTE: the preceding code segments are not production quality, in that there might be other avenues of attack involving parameter tampering, SQL injection, as well as others. The aforementioned examples serve only to demonstrate a point and should not be construed as secure given their present context.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "// checkIf(user_exists($username)){   If(authentication_fails($username, $password))   {     Display_error_page('username or password bad, please try again');   }   Else   {      //authentication succeeded! Login normally   }}Else{   Display_error_page('user does not exist, \tplease <a href=\"foobar.com/register.asp?uid='.clean($username) . '\">register!</a>');}",
      "// checkIf(user_exists($username)){   If(authentication_fails($username, $password))   {     Display_error_page('username or password bad, please try again');   }   Else   {      //authentication succeeded! Login normally   }}Else{   Display_error_page('username or password bad, please try again');}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "Set the customErrors Mode to On to Prevent Detailed Error Messages\r\n      \r\n        Global Error Handlers are used to Catch Unhandled Exceptions"
    ],
    "li": [
      "Set the customErrors Mode to On to Prevent Detailed Error Messages",
      "Global Error Handlers are used to Catch Unhandled Exceptions"
    ],
    "a": [
      "Set the customErrors Mode to On to Prevent Detailed Error Messages",
      "Global Error Handlers are used to Catch Unhandled Exceptions"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "/article/82840838-deed-4697-ad57-c6d1aafc9adf",
      "text": "Set the customErrors Mode to On to Prevent Detailed Error Messages"
    },
    {
      "href": "/article/2e16a65a-25d2-4ea9-a513-e020d2408241",
      "text": "Global Error Handlers are used to Catch Unhandled Exceptions"
    }
  ],
  "html": "<h1>What to Do</h1>\r\n  <p>Avoid using custom error pages to denote error states that are returned to the client. </p>\r\n  <h1>Why</h1>\r\n  <p>Exceptions contain debugging information that could constitute an information disclosure. Be careful with custom error pages they may also implicitly provide unintended information as a side effect.&nbsp;&nbsp;</p>\r\n  <h1>When</h1>\r\n  <p>This&nbsp;guideline is applicable whenever there are error pages to be returned&nbsp;from an application. </p>\r\n  <h1>How</h1>\r\n  <p>Standardize the error pages, and scrutinize their design and presentation carefully to avoid inadvertent information disclosure. Avoid displaying debug information in error pages. See the related guidelines section that follows for more details. </p>\r\n  <h1>Problem Example</h1>\r\n  <p>Consider the following code. There are two defined error states: user is not valid for the given application, username/password combination is incorrect.</p>\r\n  <pre>// check<br />If(user_exists(&#36;username))<br />&#123;<br />&nbsp;&nbsp; If(authentication_fails(&#36;username, &#36;password))<br />&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp; Display_error_page('username or password bad, please try again');<br />&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp; Else<br />&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //authentication succeeded&#33; Login normally<br />&nbsp;&nbsp; &#125;<br />&#125;<br />Else<br />&#123;<br />&nbsp;&nbsp; Display_error_page('user does not exist, <br />&#9;please &lt;a href=\"foobar.com/register.asp?uid='.clean(&#36;username) . '\"&gt;register&#33;&lt;/a&gt;');<br />&#125;&nbsp; </pre>\r\n  <p>In the preceding example, the developer is clever; usernames that are not taken are presented with a URL to register for a new account using that username. But the error message for a valid user that enters a bad password is completely different&#33; A subtle difference, but a keen observer will note that this enables them to discover valid accounts on the system. </p>\r\n  <h1>Solution Example</h1>\r\n  <pre>// check<br />If(user_exists(&#36;username))<br />&#123;<br />&nbsp;&nbsp; If(authentication_fails(&#36;username, &#36;password))<br />&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp; Display_error_page('username or password bad, please try again');<br />&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp; Else<br />&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //authentication succeeded&#33; Login normally<br />&nbsp;&nbsp; &#125;<br />&#125;<br />Else<br />&#123;<br />&nbsp;&nbsp; Display_error_page('username or password bad, please try again');<br />&#125;</pre>\r\n  <p>The solution is rather simple; standardize the return message so that the client cannot discern these two states from the error message alone.</p>\r\n  <p>&nbsp;NOTE: the preceding code segments are not production quality, in that there might be other avenues of attack involving parameter tampering, SQL injection, as well as others. The aforementioned examples serve only to demonstrate a point and should not be construed as secure given their present context.&nbsp;</p>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/82840838-deed-4697-ad57-c6d1aafc9adf\">Set the customErrors Mode to On to Prevent Detailed Error Messages</a>\r\n      <li>\r\n        <a href=\"/article/2e16a65a-25d2-4ea9-a513-e020d2408241\">Global Error Handlers are used to Catch Unhandled Exceptions</a>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}