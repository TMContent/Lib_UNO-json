{
  "id": "95d77268-0629-453d-8c79-aa35430bf526",
  "checksum": "30ddf6a43559ff109bc2bbef0ab87c99c3af6b02",
  "words": {
    "1": [
      "ul",
      "li",
      "h1",
      "h2",
      "p"
    ],
    "2": [
      "ul",
      "li",
      "h2",
      "h1"
    ],
    "3": [
      "ul",
      "li",
      "h2",
      "h1",
      "ol",
      "li"
    ],
    "10": [
      "p",
      "p"
    ],
    "30": [
      "p"
    ],
    "100": [
      "p"
    ],
    "200": [
      "p"
    ],
    "401": [
      "p"
    ],
    "9997": [
      "p",
      "font"
    ],
    "9998": [
      "p",
      "font"
    ],
    "9999": [
      "p",
      "font"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "all": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "that": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "p"
    ],
    "authentication": [
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "i",
      "ol",
      "li",
      "p",
      "i",
      "ol",
      "li",
      "p",
      "i"
    ],
    "summary": [
      "h1"
    ],
    "web": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "font",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "other": [
      "p"
    ],
    "software": [
      "p"
    ],
    "commonly": [
      "p",
      "p"
    ],
    "some": [
      "p",
      "p",
      "p",
      "p"
    ],
    "form": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "differentiate": [
      "p"
    ],
    "users": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "give": [
      "p"
    ],
    "them": [
      "p",
      "p",
      "p"
    ],
    "access": [
      "p"
    ],
    "different": [
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "areas": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "user-specific": [
      "p",
      "p"
    ],
    "profile": [
      "p"
    ],
    "bank": [
      "p"
    ],
    "account": [
      "p",
      "p",
      "p",
      "p"
    ],
    "details": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "administrative": [
      "p"
    ],
    "area": [
      "p"
    ],
    "attackers": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "often": [
      "p",
      "p"
    ],
    "attempt": [
      "p",
      "p",
      "p"
    ],
    "sniff": [
      "p"
    ],
    "network": [
      "p"
    ],
    "communications": [
      "p"
    ],
    "between": [
      "p"
    ],
    "client": [
      "p"
    ],
    "server)": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "order": [
      "p",
      "p",
      "p"
    ],
    "capture": [
      "p",
      "p"
    ],
    "client’s": [
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "clear": [
      "p"
    ],
    "text": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "however": [
      "p",
      "p",
      "p",
      "p"
    ],
    "sometimes": [
      "p"
    ],
    "sniffing": [
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h2",
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "font"
    ],
    "possible": [
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "only": [
      "p",
      "p",
      "p"
    ],
    "partially": [
      "p"
    ],
    "desired": [
      "p"
    ],
    "these": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "cases": [
      "p",
      "p",
      "p"
    ],
    "may": [
      "p",
      "p"
    ],
    "try": [
      "p",
      "p"
    ],
    "large": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "number": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "additional": [
      "p",
      "p",
      "p",
      "p",
      "h1"
    ],
    "username/password": [
      "p"
    ],
    "combinations": [
      "p",
      "p",
      "p",
      "p"
    ],
    "discover": [
      "p",
      "p"
    ],
    "victim’s": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "credential": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "brute-force": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "consist": [
      "p",
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "automation": [
      "p"
    ],
    "defeat": [
      "p"
    ],
    "application’s": [
      "p",
      "p",
      "p"
    ],
    "scheme": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "submitting": [
      "p",
      "p"
    ],
    "follow": [
      "p",
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p",
      "p",
      "p"
    ],
    "test": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "title"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h1",
      "h1",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "attack": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "start": [
      "ul",
      "li",
      "h1",
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i"
    ],
    "testing": [
      "ul",
      "li",
      "p",
      "h1",
      "p"
    ],
    "exploring": [
      "ul",
      "li",
      "h1"
    ],
    "first": [
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "necessary": [
      "p"
    ],
    "common": [
      "p",
      "p",
      "p"
    ],
    "exhaustive": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "search": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p"
    ],
    "dictionary": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "rule-based": [
      "ul",
      "li",
      "h2",
      "p",
      "h2",
      "p",
      "p"
    ],
    "scenario": [
      "h2",
      "h2",
      "h2",
      "ol",
      "li"
    ],
    "during": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "submits": [
      "p",
      "p",
      "p"
    ],
    "permutations": [
      "p"
    ],
    "variable": [
      "p"
    ],
    "allowed": [
      "p",
      "p"
    ],
    "characters": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "ranges": [
      "p"
    ],
    "lengths": [
      "p"
    ],
    "instance": [
      "p",
      "p",
      "p",
      "p"
    ],
    "consider": [
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p",
      "p"
    ],
    "unsafe": [
      "p"
    ],
    "four-digit": [
      "p"
    ],
    "pin": [
      "p"
    ],
    "authenticate": [
      "p"
    ],
    "execute": [
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "way": [
      "p"
    ],
    "0000": [
      "p",
      "font"
    ],
    "0001": [
      "p",
      "font"
    ],
    "0002": [
      "p",
      "font"
    ],
    "case": [
      "p"
    ],
    "needs": [
      "p"
    ],
    "10^4": [
      "p"
    ],
    "since": [
      "p"
    ],
    "length": [
      "p",
      "p",
      "p"
    ],
    "string": [
      "p",
      "p"
    ],
    "fixed": [
      "p"
    ],
    "four": [
      "p"
    ],
    "digits": [
      "p"
    ],
    "one": [
      "p",
      "p"
    ],
    "more": [
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "secure": [
      "p",
      "p"
    ],
    "password": [
      "p",
      "p",
      "p"
    ],
    "policies": [
      "p"
    ],
    "might": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "require": [
      "p",
      "p"
    ],
    "seven": [
      "p"
    ],
    "lower-": [
      "p"
    ],
    "upper-case": [
      "p"
    ],
    "which": [
      "p",
      "p"
    ],
    "52^7": [
      "p"
    ],
    "than": [
      "p",
      "p"
    ],
    "trillion": [
      "p"
    ],
    "cryptography": [
      "p"
    ],
    "refers": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "cryptographic": [
      "p"
    ],
    "key": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "cryptosystem": [
      "p"
    ],
    "must": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "enough": [
      "p"
    ],
    "would": [
      "p"
    ],
    "impossible": [
      "p"
    ],
    "any": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "foreseeable": [
      "p"
    ],
    "period": [
      "p"
    ],
    "time": [
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "tries": [
      "p",
      "p"
    ],
    "set": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "usernames": [
      "p",
      "p"
    ],
    "passwords": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "from": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "file": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "consisting": [
      "p"
    ],
    "words": [
      "p",
      "p"
    ],
    "likely": [
      "p",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "many": [
      "p",
      "p",
      "p"
    ],
    "modify": [
      "p",
      "ol",
      "li"
    ],
    "files": [
      "p"
    ],
    "based": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "information": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "gathered": [
      "p",
      "p"
    ],
    "about": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "target": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "user": [
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p"
    ],
    "executes": [
      "p"
    ],
    "popular": [
      "p"
    ],
    "scripts": [
      "p"
    ],
    "tools": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "brutus": [
      "p",
      "i",
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "i",
      "p",
      "i",
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "i",
      "p",
      "i",
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "i",
      "p",
      "i",
      "p",
      "i"
    ],
    "hydra": [
      "p",
      "i"
    ],
    "victim": [
      "p"
    ],
    "username": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "email": [
      "p",
      "ol",
      "li"
    ],
    "address": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "and/or": [
      "p"
    ],
    "birthday": [
      "p",
      "p"
    ],
    "create": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "values": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "font",
      "p"
    ],
    "contains": [
      "p"
    ],
    "zoo or": [
      "p"
    ],
    "pet": [
      "p",
      "i"
    ],
    "lists": [
      "p"
    ],
    "created": [
      "p",
      "ol",
      "li"
    ],
    "animal": [
      "p",
      "p"
    ],
    "names": [
      "p"
    ],
    "round": [
      "p",
      "p",
      "p"
    ],
    "proper": [
      "p"
    ],
    "mouse": [
      "p",
      "i"
    ],
    "cat": [
      "p",
      "i"
    ],
    "dog": [
      "p",
      "i"
    ],
    "second": [
      "p",
      "p",
      "p"
    ],
    "replacing": [
      "p"
    ],
    "vowels": [
      "p"
    ],
    "symbols": [
      "p"
    ],
    "numbers": [
      "p"
    ],
    "m0us3": [
      "p",
      "i"
    ],
    "c@t": [
      "p",
      "i"
    ],
    "d0g": [
      "p",
      "i"
    ],
    "known": [
      "p"
    ],
    "third": [
      "p"
    ],
    "focus": [
      "p"
    ],
    "including": [
      "p",
      "p"
    ],
    "part": [
      "p"
    ],
    "birth": [
      "p"
    ],
    "year": [
      "p"
    ],
    "m0use1977": [
      "p",
      "i"
    ],
    "c@td0g75!": [
      "p",
      "i"
    ],
    "each": [
      "p"
    ],
    "predefined": [
      "p"
    ],
    "rule": [
      "p"
    ],
    "will": [
      "p",
      "p",
      "p"
    ],
    "zoo": [
      "i"
    ],
    "next": [
      "p",
      "p"
    ],
    "what": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "title"
    ],
    "counteract": [
      "p"
    ],
    "locking": [
      "h2",
      "p"
    ],
    "down": [
      "h2"
    ],
    "accounts": [
      "h2",
      "p",
      "p"
    ],
    "method": [
      "p"
    ],
    "protecting": [
      "p"
    ],
    "against": [
      "p",
      "p",
      "p"
    ],
    "lock": [
      "p",
      "p",
      "p"
    ],
    "after": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "its": [
      "p"
    ],
    "has": [
      "p",
      "p",
      "p"
    ],
    "been": [
      "p",
      "p"
    ],
    "too": [
      "p"
    ],
    "failed": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "login": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attempts": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "mitigation": [
      "p",
      "p"
    ],
    "downside": [
      "p",
      "p"
    ],
    "because": [
      "p"
    ],
    "out": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "legitimate": [
      "p"
    ],
    "thus": [
      "p"
    ],
    "creating": [
      "p"
    ],
    "denial-of­-service": [
      "p"
    ],
    "situation": [
      "p"
    ],
    "another": [
      "p",
      "p",
      "p"
    ],
    "spaced": [
      "p"
    ],
    "over": [
      "p",
      "p"
    ],
    "work": [
      "p"
    ],
    "also": [
      "p",
      "p"
    ],
    "fact": [
      "p"
    ],
    "cannot": [
      "p"
    ],
    "non-existent": [
      "p"
    ],
    "leverage": [
      "p"
    ],
    "valid": [
      "p"
    ],
    "addition": [
      "p",
      "p"
    ],
    "authenticates": [
      "p"
    ],
    "their": [
      "p",
      "p",
      "p"
    ],
    "ip": [
      "p",
      "p"
    ],
    "addresses": [
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "spoof": [
      "p"
    ],
    "bypass": [
      "p",
      "p"
    ],
    "countermeasure": [
      "p",
      "p"
    ],
    "introducing": [
      "h2"
    ],
    "delays": [
      "h2",
      "p"
    ],
    "better": [
      "p"
    ],
    "consists": [
      "p",
      "p",
      "p",
      "p"
    ],
    "adding": [
      "p"
    ],
    "random": [
      "p",
      "p",
      "p",
      "p",
      "font",
      "font"
    ],
    "delay": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "process": [
      "p"
    ],
    "internet": [
      "p",
      "p"
    ],
    "won’t": [
      "p"
    ],
    "mind": [
      "p"
    ],
    "up": [
      "p"
    ],
    "two": [
      "p"
    ],
    "seconds": [
      "p",
      "p"
    ],
    "but": [
      "p"
    ],
    "greatly": [
      "p"
    ],
    "degrade": [
      "p"
    ],
    "effectiveness": [
      "p"
    ],
    "following": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "borrowed": [
      "p"
    ],
    "owasp": [
      "p"
    ],
    "adds": [
      "p"
    ],
    "every": [
      "p"
    ],
    "private": [
      "p",
      "font"
    ],
    "void": [
      "p",
      "font"
    ],
    "authenticaterequestobject": [
      "p",
      "font"
    ],
    "obj": [
      "p",
      "font"
    ],
    "eventargs": [
      "p",
      "font"
    ],
    "ea{ httpapplication": [
      "p",
      "font"
    ],
    "objapp": [
      "p",
      "font"
    ],
    "=": [
      "p",
      "p",
      "p",
      "font",
      "font",
      "font"
    ],
    "httpapplication)": [
      "p",
      "font"
    ],
    "obj httpcontext": [
      "p",
      "font"
    ],
    "objcontext": [
      "p",
      "font"
    ],
    "httpcontext)": [
      "p",
      "font"
    ],
    "objappcontext;  //": [
      "p",
      "font"
    ],
    "identity": [
      "p",
      "font"
    ],
    "blank": [
      "p",
      "font"
    ],
    "pause": [
      "p",
      "font"
    ],
    "amount": [
      "p",
      "font"
    ],
    "time if": [
      "p",
      "font"
    ],
    "objappuser.identity.name": [
      "p",
      "font"
    ],
    "!=": [
      "p",
      "font"
    ],
    "\"\" {": [
      "p",
      "font"
    ],
    "rand": [
      "p",
      "font"
    ],
    "new": [
      "p",
      "font"
    ],
    "random);": [
      "p",
      "font"
    ],
    "threadsleep(rand.next(minseconds,": [
      "p",
      "font"
    ],
    "maxseconds": [
      "p",
      "font"
    ],
    "*": [
      "p",
      "font"
    ],
    "1000; }}": [
      "p",
      "font"
    ],
    "time-delay": [
      "p"
    ],
    "option": [
      "p"
    ],
    "inserting": [
      "p",
      "p"
    ],
    "incremental": [
      "p"
    ],
    "response": [
      "p"
    ],
    "sent": [
      "p"
    ],
    "previous": [
      "p",
      "ol",
      "li"
    ],
    "consecutive": [
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "incorrect": [
      "p"
    ],
    "just": [
      "p"
    ],
    "five": [
      "p"
    ],
    "wrong": [
      "p"
    ],
    "increase": [
      "p"
    ],
    "hits": [
      "p"
    ],
    "minutes": [
      "p"
    ],
    "doesn’t": [
      "p"
    ],
    "blocking": [
      "p",
      "ul",
      "li"
    ],
    "renders": [
      "p"
    ],
    "useless": [
      "p"
    ],
    "overcome": [
      "p"
    ],
    "executing": [
      "h2"
    ],
    "behaviors": [
      "h2"
    ],
    "alternative": [
      "p"
    ],
    "defense": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "technique": [
      "p"
    ],
    "helps": [
      "p"
    ],
    "stop": [
      "p"
    ],
    "slightly": [
      "p"
    ],
    "modifying": [
      "p",
      "p"
    ],
    "behavior": [
      "p",
      "p",
      "p"
    ],
    "rely": [
      "p",
      "p"
    ],
    "giving": [
      "p"
    ],
    "http": [
      "p",
      "p",
      "p"
    ],
    "errors": [
      "p",
      "p"
    ],
    "instead": [
      "p"
    ],
    "gives": [
      "p"
    ],
    "directs": [
      "p"
    ],
    "page": [
      "p"
    ],
    "quite": [
      "p"
    ],
    "automated": [
      "p",
      "p",
      "p"
    ],
    "tool": [
      "p"
    ],
    "become": [
      "p"
    ],
    "confused": [
      "p"
    ],
    "furthermore": [
      "p"
    ],
    "developers": [
      "p",
      "p"
    ],
    "alter": [
      "p"
    ],
    "so": [
      "p"
    ],
    "gets": [
      "p"
    ],
    "error": [
      "p"
    ],
    "message": [
      "p"
    ],
    "certain": [
      "p",
      "p"
    ],
    "requesting": [
      "h2"
    ],
    "human": [
      "h2",
      "p",
      "p"
    ],
    "interaction": [
      "h2",
      "p",
      "p"
    ],
    "proofs": [
      "h2",
      "p"
    ],
    "mechanisms": [
      "p",
      "p"
    ],
    "include": [
      "p"
    ],
    "secret": [
      "p",
      "p",
      "p"
    ],
    "questions": [
      "p",
      "p"
    ],
    "captchas": [
      "p",
      "p",
      "p"
    ],
    "captcha": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "stands": [
      "p"
    ],
    "completely": [
      "p"
    ],
    "public": [
      "p"
    ],
    "turing": [
      "p"
    ],
    "tell": [
      "p"
    ],
    "computers": [
      "p"
    ],
    "humans": [
      "p"
    ],
    "apart": [
      "p"
    ],
    "powerful": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "kind": [
      "p"
    ],
    "visual": [
      "p"
    ],
    "usually": [
      "p",
      "p"
    ],
    "bitmap": [
      "p"
    ],
    "image": [
      "p"
    ],
    "containing": [
      "p",
      "ol",
      "li"
    ],
    "followed": [
      "p"
    ],
    "question": [
      "p",
      "p"
    ],
    "asking": [
      "p"
    ],
    "says": [
      "p"
    ],
    "recent": [
      "p"
    ],
    "show": [
      "p"
    ],
    "circumvented": [
      "p"
    ],
    "research": [
      "p"
    ],
    "focused": [
      "p"
    ],
    "text-captcha": [
      "p"
    ],
    "recognition": [
      "p"
    ],
    "produced": [
      "p"
    ],
    "noticeable": [
      "p"
    ],
    "algorithms": [
      "p"
    ],
    "sites": [
      "p"
    ],
    "proof": [
      "p"
    ],
    "occurs": [
      "p"
    ],
    "prompts": [
      "p"
    ],
    "with": [
      "p",
      "ol",
      "li"
    ],
    "composed": [
      "p"
    ],
    "personal": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "data": [
      "p"
    ],
    "unlikely": [
      "p"
    ],
    "included": [
      "p"
    ],
    "dictionaries": [
      "p"
    ],
    "unexpected": [
      "p"
    ],
    "fully": [
      "p"
    ],
    "protect": [
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "combination": [
      "p"
    ],
    "above": [
      "p"
    ],
    "techniques": [
      "p",
      "p"
    ],
    "exact": [
      "p"
    ],
    "depend": [
      "p"
    ],
    "security": [
      "p",
      "p"
    ],
    "requirements": [
      "p"
    ],
    "now": [
      "p"
    ],
    "well": [
      "p"
    ],
    "have": [
      "p"
    ],
    "discussed": [
      "p"
    ],
    "available": [
      "p"
    ],
    "basic": [
      "p"
    ],
    "download": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "install": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "run": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "type": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "url": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "pass": [
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i"
    ],
    "mode": [
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i"
    ],
    "dropdown": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "list": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "i",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "i",
      "p"
    ],
    "select": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "brute": [
      "ol",
      "li",
      "i",
      "ul",
      "li"
    ],
    "force": [
      "ol",
      "li",
      "i",
      "ul",
      "li"
    ],
    "range": [
      "ol",
      "li"
    ],
    "click": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "expected": [
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p",
      "p"
    ],
    "displays": [
      "p",
      "p",
      "p"
    ],
    "matches": [
      "p",
      "p",
      "p"
    ],
    "positive": [
      "p",
      "i",
      "i",
      "i"
    ],
    "results": [
      "p",
      "i",
      "p",
      "i",
      "p",
      "i"
    ],
    "box": [
      "p",
      "p",
      "p"
    ],
    "word": [
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "ol",
      "li",
      "i"
    ],
    "your": [
      "ol",
      "li",
      "p"
    ],
    "choice": [
      "ol",
      "li"
    ],
    "thepositive": [
      "p",
      "p"
    ],
    "find": [
      "ol",
      "li"
    ],
    "birthday.": [
      "ol",
      "li"
    ],
    "develop": [
      "ol",
      "li"
    ],
    "rules": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "shown": [
      "ol",
      "li"
    ],
    "3.": [
      "ol",
      "li"
    ],
    "build": [
      "ol",
      "li"
    ],
    "output": [
      "ol",
      "li"
    ],
    "browse": [
      "ol",
      "li",
      "i"
    ],
    "conclusions": [
      "h1"
    ],
    "real": [
      "p"
    ],
    "vectors": [
      "p"
    ],
    "performing": [
      "p"
    ],
    "searches": [
      "p"
    ],
    "vary": [
      "p"
    ],
    "lockouts": [
      "p"
    ],
    "important": [
      "p"
    ],
    "you": [
      "p"
    ],
    "learn": [
      "p"
    ],
    "finally": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "resources": [
      "h1"
    ],
    "size": [
      "ul",
      "li"
    ],
    "see http//en.wikipedia.org/wiki/key_size": [
      "ul",
      "li"
    ],
    "see http//www.owasp.org/index.php/blocking_brute_force_attacks": [
      "ul",
      "li"
    ],
    "circumventing": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/captcha#circumvention": [
      "ul",
      "li",
      "a"
    ],
    "see http//network-security-research.blogspot.com/": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/key_size": [
      "a"
    ],
    "http//www.owasp.org/index.php/blocking_brute_force_attacks": [
      "a"
    ],
    "http//network-security-research.blogspot.com/": [
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start Testing and Exploring",
      "Conclusions",
      "Additional Resources"
    ],
    "ul": [
      "All applications that use authentication",
      "Step 1: Understand attack scenarios \n    Step 2: Analyze causes and countermeasures \n    Step 3: Start testing and exploring",
      "Exhaustive search attacks \n    Dictionary attacks \n    Rule-based attacks",
      "For information about key size, see http://en.wikipedia.org/wiki/Key_size\n    For information about blocking brute force attacks, see http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\n    For information about circumventing CAPTCHA, see http://en.wikipedia.org/wiki/CAPTCHA#Circumvention\n    For more information about circumventing CAPTCHA, see http://network-security-research.blogspot.com/"
    ],
    "li": [
      "All applications that use authentication",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Exhaustive search attacks",
      "Dictionary attacks",
      "Rule-based attacks",
      "Download and install Brutus.",
      "Run Brutus.",
      "Type a target URL and authentication type.",
      "In the Pass Mode dropdown list, select Brute Force.",
      "Select range of characters to use.",
      "Click Start.",
      "Download and install Brutus.",
      "Run Brutus.",
      "Type a target URL and authentication type.",
      "In the Pass Mode dropdown list, select Word List.",
      "Modify the word list file with any file of your choice.",
      "Click Start.",
      "Find out the victim’s personal information (email address, username, or birthday).",
      "Develop a set of rules to use to create a list of passwords based on the victim’s personal information (such as shown in scenario 3).",
      "Build a text file containing the list of passwords output by rules from the previous step.",
      "Download and install Brutus.",
      "Run Brutus.",
      "Type a target URL and authentication type.",
      "In the Pass Mode dropdown list, select Word List and click Browse.",
      "Select the file created during step 3.",
      "Click Start.",
      "For information about key size, see http://en.wikipedia.org/wiki/Key_size",
      "For information about blocking brute force attacks, see http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks",
      "For information about circumventing CAPTCHA, see http://en.wikipedia.org/wiki/CAPTCHA#Circumvention",
      "For more information about circumventing CAPTCHA, see http://network-security-research.blogspot.com/"
    ],
    "p": [
      "Web applications and other software commonly use some form of authentication to differentiate  users and give them access to different areas of the application, such as a user-specific profile, user-specific bank account details, or an administrative area. Attackers often attempt to sniff network communications between a client and an application (server) in order to capture the client’s credentials in clear text. However, sometimes sniffing attacks are not possible, or the attacker can only partially capture the desired credentials. In these cases, the attacker may try a large number of additional username/password combinations to discover the victim’s credentials. Credential brute-force attacks consist of using automation to defeat an application’s authentication scheme by submitting a large number of possible credentials.",
      "Follow these steps to test for credential brute-force vulnerabilities:",
      "First, it is necessary to understand some common credential brute-force attack scenarios:",
      "",
      "During an exhaustive search attack, the attacker submits all permutations of a credential variable by using all of the allowed characters and ranges of lengths. For instance, consider an application that uses an unsafe four-digit PIN to authenticate users. To execute a brute-force attack, the attacker submits input in this way:",
      "0000, 0001, 0002, . . . 9997, 9998, and 9999.",
      "In this case, the attacker only needs to try 10^4 combinations, since the length of the string is fixed to four digits and the only characters allowed are one to 10. Applications that use more secure password policies might require seven lower- or upper-case characters, which is 52^7, or more than 1 trillion combinations.",
      "In cryptography, a brute-force attack often refers to an exhaustive search attack on a cryptographic key. In a secure cryptosystem, the length of the key must be large enough that an exhaustive search brute-force attack would be impossible in any foreseeable period of time.",
      "During a dictionary attack, the attacker tries a set of usernames and passwords from a dictionary file, consisting of words that are likely to be used as passwords. In many cases, attackers modify dictionary files based on additional information gathered about the target user. The attacker commonly executes a dictionary attack using popular scripts or tools such as Brutus or Hydra.",
      "During a rule-based attack, the attacker uses information gathered about the victim, such as a username, email address, and/or birthday, to create a set of possible values to use. For instance, if the username contains the string zoo or pet, different lists of passwords might be created based on animal names. The first round might be of proper animal words such as mouse, cat, or dog. The second round might consist of replacing vowels by symbols or numbers such as m0Us3, c@t, or d0g. If the victim’s birthday is known, the third round might focus on including part of the victim’s birth year: m0use1977 or c@td0g75!. Each time, the attacker uses a predefined rule to create a set of possible passwords that will be used during the attack.",
      "The next step in testing for brute-force attacks is to understand what causes them and how to counteract them.",
      "A common method of protecting against brute-force attacks is to lock an account after its username has been used in too many failed login attempts. However, this mitigation has a downside, because it can be used by attackers to lock out a legitimate user, thus creating a denial-of­-service situation. Another downside is that attacks in which login attempts are spaced out over time might work. Also, attackers can use the fact that applications cannot lock non-existent accounts to leverage valid usernames. In addition, if an application authenticates users based on their IP addresses, attackers may be able to spoof the IP address in order to bypass this countermeasure.",
      "A better countermeasure than locking accounts consists of adding a random delay to the login process. Internet users won’t mind a delay of up to two seconds, but the delay will greatly degrade the effectiveness of brute-force tools. The following code, borrowed from OWASP, adds a random delay to every failed login attempt:",
      "private void AuthenticateRequest(object obj, EventArgs ea){ HttpApplication objApp = (HttpApplication) obj; HttpContext objContext = (HttpContext) objApp.Context;  // If user identity is not blank, pause for a random amount of time if ( objApp.User.Identity.Name != \"\") {   Random rand = new Random();       Thread.Sleep(rand.Next(minSeconds, maxSeconds) * 1000); }}",
      "Another time-delay option consists of inserting an incremental delay in the response sent to the user; the length of the delay after a failed login attempt is based on the number of previous consecutive failed login attempts. For instance, when the attacker submits the second incorrect password, the delay is just one second. Five wrong passwords increase the delay to 10 seconds; and after 100 failed attempts, the delay hits 30 minutes. This mitigation doesn’t require blocking the account and renders brute-force attack tools useless. However, it can be overcome by brute-force attacks that execute over time.",
      "An alternative defense technique that helps to stop brute-force attacks consists of slightly modifying the behavior of the application after a number of failed login attempts. For instance, many tools rely on the application giving HTTP 401 errors for failed login tries. If the application instead gives HTTP 200 errors and directs users to a failed login page, it is quite likely that the automated brute-force tool will become confused. Furthermore, developers might alter the behavior of the application so that the attacker gets a different error message or HTTP code after a certain number of failed login attempts.",
      "Additional defense mechanisms include using secret questions and CAPTCHAs. CAPTCHA stands for Completely Automated Public Turing Test to Tell Computers and Humans Apart, and is a powerful defense against automated brute-force attacks. A CAPTCHA shows the user some kind of visual test, usually a bitmap image containing text followed by a question asking the user what the text says. However, recent attacks on CAPTCHAs show that this defense can also be circumvented. In addition, research focused on text-CAPTCHA recognition has produced some noticeable algorithms able to bypass CAPTCHAs from large internet sites.",
      "Another human interaction proof occurs when an application prompts the user with a secret question after a certain number of failed login attempts. Secret questions are usually composed of personal data that is unlikely to be included in common attack dictionaries and is unexpected by exhaustive search tools.",
      "To more fully protect against brute-force attacks, developers should use a combination of the above techniques. The exact techniques used should depend on their application’s security requirements.",
      "Now that brute-force attack scenarios as well as their causes and countermeasures have been discussed, the next step consists of using available security testing tools to execute basic credential brute-force test cases.",
      "Follow these steps to test for exhaustive search brute-force attacks:",
      "Expected result: Brutus displays any matches in the Positive Authentication Results list box.",
      "Follow these steps to test for dictionary attacks:",
      "Expected result: Brutus displays any matches in thePositive Authentication Results list box.",
      "Follow these steps to test for rule-based attacks:",
      "Expected result: Brutus displays any matches in thePositive Authentication Results list box.",
      "Credential brute-force attacks rely on submitting a large number of username and password combinations to an application in order to discover the victim’s real credentials. Attackers can use different attack vectors to execute brute-force attacks, including performing exhaustive searches or dictionary attacks. Defense mechanisms vary from account lockouts and inserting time delays to modifying the application’s behavior and using human interaction proofs. It is important that you learn how to use tools such as Brutus to test for brute-force vulnerabilities in your application. Finally, make sure to consider additional test scenarios such as rule-based attacks.",
      "",
      ""
    ],
    "b": [
      "",
      "",
      "",
      "",
      ""
    ],
    "i": [
      "",
      "Brutus",
      "Hydra",
      "zoo",
      "pet",
      "mouse",
      "cat",
      "dog",
      "m0Us3",
      "c@t",
      "d0g",
      "m0use1977",
      "c@td0g75!",
      "",
      "Brutus.",
      "Brutus",
      "Pass Mode",
      "Brute Force",
      "Start",
      "Brutus",
      "Positive Authentication Results",
      "Brutus",
      "Brutus",
      "Pass Mode",
      "Word List",
      "Start",
      "Brutus",
      "Positive Authentication Results",
      "Brutus",
      "Brutus",
      "Pass Mode",
      "Word List",
      "Browse",
      "Start",
      "Brutus",
      "Positive Authentication Results",
      "Brutus"
    ],
    "h2": [
      "Scenario 1: Exhaustive Search Attacks",
      "Scenario 2: Dictionary attacks",
      "Scenario 3: Rule-based Attacks",
      "Locking down accounts",
      "Introducing time delays",
      "Executing different failed login behaviors",
      "Requesting human interaction proofs",
      "Test for Exhaustive Search Attacks",
      "Test for Dictionary Attacks",
      "Test for Rule-based Attacks"
    ],
    "font": [
      "0000, 0001, 0002, . . . 9997, 9998, and 9999.",
      "private void AuthenticateRequest(object obj, EventArgs ea){ HttpApplication objApp = (HttpApplication) obj; HttpContext objContext = (HttpContext) objApp.Context;  // If user identity is not blank, pause for a random amount of time if ( objApp.User.Identity.Name != \"\") {   Random rand = new Random();       Thread.Sleep(rand.Next(minSeconds, maxSeconds) * 1000); }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ol": [
      "Download and install Brutus.\n    Run Brutus. \n    Type a target URL and authentication type. \n    In the Pass Mode dropdown list, select Brute Force. \n    Select range of characters to use. \n    Click Start.",
      "Download and install Brutus. \n    Run Brutus. \n    Type a target URL and authentication type. \n    In the Pass Mode dropdown list, select Word List. \n    Modify the word list file with any file of your choice. \n    Click Start.",
      "Find out the victim’s personal information (email address, username, or birthday). \n    Develop a set of rules to use to create a list of passwords based on the victim’s personal information (such as shown in scenario 3). \n    Build a text file containing the list of passwords output by rules from the previous step. \n    Download and install Brutus. \n    Run Brutus. \n    Type a target URL and authentication type. \n    In the Pass Mode dropdown list, select Word List and click Browse. \n    Select the file created during step 3. \n    Click Start."
    ],
    "a": [
      "http://en.wikipedia.org/wiki/Key_size",
      "http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks",
      "http://en.wikipedia.org/wiki/CAPTCHA#Circumvention",
      "http://network-security-research.blogspot.com/"
    ]
  },
  "links": [
    {
      "href": "http://en.wikipedia.org/wiki/Key_size",
      "text": "http://en.wikipedia.org/wiki/Key_size"
    },
    {
      "href": "http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks",
      "text": "http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"
    },
    {
      "href": "http://en.wikipedia.org/wiki/CAPTCHA#Circumvention",
      "text": "http://en.wikipedia.org/wiki/CAPTCHA#Circumvention"
    },
    {
      "href": "http://network-security-research.blogspot.com/",
      "text": "http://network-security-research.blogspot.com/"
    }
  ],
  "html": "<h1>Applies To</h1>\n  <ul>\n    <li>All applications that use authentication</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>Web applications and other software commonly use some form of authentication to differentiate &nbsp;users and give them access to different areas of the application, such as a user-specific profile, user-specific bank account details, or an administrative area. Attackers often attempt to sniff network communications between a client and an application (server) in order to capture the client’s credentials in clear text. However, sometimes sniffing attacks are not possible, or the attacker can only partially capture the desired credentials. In these cases, the attacker may try a large number of additional username/password combinations to discover the victim’s credentials. Credential brute-force attacks consist of using automation to defeat an application’s authentication scheme by submitting a large number of possible credentials.</p>\n  <p>Follow these steps to test for credential brute-force vulnerabilities:</p>\n  <ul>\n    <li>Step 1: Understand attack scenarios </li>\n    <li>Step 2: Analyze causes and countermeasures </li>\n    <li>Step 3: Start testing and exploring&nbsp;</li>\n  </ul>\n  <h1>Step 1: Understand Attack Scenarios</h1>\n  <p>First, it is necessary to understand some common credential brute-force attack scenarios:</p>\n  <ul>\n    <li>Exhaustive search attacks </li>\n    <li>Dictionary attacks </li>\n    <li>Rule-based attacks</li>\n  </ul>\n  <p>\n    <b>\n      <i>\n      </i>\n    </b>\n  </p>\n  <h2>\n    Scenario 1: Exhaustive Search Attacks\n  </h2>\n  <p>During an exhaustive search attack, the attacker submits all permutations of a credential variable by using all of the allowed characters and ranges of lengths. For instance, consider an application that uses an unsafe four-digit PIN to authenticate users. To execute a brute-force attack, the attacker submits input in this way:</p>\n  <p>\n    <font face=\"'Courier New'\">0000, 0001, 0002, . . . 9997, 9998, and 9999.</font>\n  </p>\n  <p>In this case, the attacker only needs to try 10^4 combinations, since the length of the string is fixed to four digits and the only characters allowed are one to 10. Applications that use more secure password policies might require seven lower- or upper-case characters, which is 52^7, or more than 1 trillion combinations.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>\n  <p>In cryptography, a brute-force attack often refers to an exhaustive search attack on a cryptographic key. In a secure cryptosystem, the length of the key must be large enough that an exhaustive search brute-force attack would be impossible in any foreseeable period of time.</p>\n  <h2>\n    Scenario 2: Dictionary attacks\n  </h2>\n  <p>During a dictionary attack, the attacker tries a set of usernames and passwords from a dictionary file, consisting of words that are likely to be used as passwords. In many cases, attackers modify dictionary files based on additional information gathered about the target user. The attacker commonly executes a dictionary attack using popular scripts or tools such as <i>Brutus</i> or <i>Hydra</i>.</p>\n  <h2>\n    Scenario 3: Rule-based Attacks\n  </h2>\n  <p>During a rule-based attack, the attacker uses information gathered about the victim, such as a username, email address, and/or birthday, to create a set of possible values to use. For instance, if the username contains the string <i>zoo</i>&nbsp;or <i>pet</i>, different lists of passwords might be created based on animal names. The first round might be of proper animal words such as <i>mouse</i>, <i>cat</i>, or <i>dog</i>. The second round might consist of replacing vowels by symbols or numbers such as <i>m0Us3</i>, <i>c@t</i>, or <i>d0g</i>. If the victim’s birthday is known, the third round might focus on including part of the victim’s birth year: <i>m0use1977 </i>or <i>c@td0g75!</i>. Each time, the attacker uses a predefined rule to create a set of possible passwords that will be used during the attack.&nbsp;</p>\n  <h1>Step 2: Analyze causes and countermeasures</h1>\n  <p>The next step in testing for brute-force attacks is to understand what causes them and how to counteract them.</p>\n  <h2>\n    Locking down accounts \n  </h2>\n  <p>A common method of protecting against brute-force attacks is to lock an account after its username has been used in too many failed login attempts. However, this mitigation has a downside, because it can be used by attackers to lock out a legitimate user, thus creating a denial-of­-service situation. Another downside is that attacks in which login attempts are spaced out over time might work. Also, attackers can use the fact that applications cannot lock non-existent accounts to leverage valid usernames. In addition, if an application authenticates users based on their IP addresses, attackers may be able to spoof the IP address in order to bypass this countermeasure.<b><i>&nbsp;</i></b></p>\n  <h2>\n    Introducing time delays\n  </h2>\n  <p>A better countermeasure than locking accounts consists of adding a random delay to the login process. Internet users won’t mind a delay of up to two seconds, but the delay will greatly degrade the effectiveness of brute-force tools. The following code, borrowed from OWASP, adds a random delay to every failed login attempt:</p>\n  <p>\n    <font face=\"'Courier New'\">private void AuthenticateRequest(object obj, EventArgs ea)<br />{<br />&nbsp;HttpApplication objApp = (HttpApplication) obj;<br />&nbsp;HttpContext objContext = (HttpContext) objApp.Context;&nbsp;<br />&nbsp;// If user identity is not blank, pause for a random amount of time<br />&nbsp;if ( objApp.User.Identity.Name != \"\")<br />&nbsp;{<br />&nbsp; &nbsp;Random rand = new Random(); &nbsp; &nbsp;<br />&nbsp; &nbsp;Thread.Sleep(rand.Next(minSeconds, maxSeconds) * 1000);<br />&nbsp;}<br />}</font>\n  </p>\n  <p>Another time-delay option consists of inserting an incremental delay in the response sent to the user; the length of the delay after a failed login attempt is based on the number of previous consecutive failed login attempts. For instance, when the attacker submits the second incorrect password, the delay is just one second. Five wrong passwords increase the delay to 10 seconds; and after 100 failed attempts, the delay hits 30 minutes. This mitigation doesn’t require blocking the account and renders brute-force attack tools useless. However, it can be overcome by brute-force attacks that execute over time.</p>\n  <h2>Executing different failed login behaviors</h2>\n  <p>An alternative defense technique that helps to stop brute-force attacks consists of slightly modifying the behavior of the application after a number of failed login attempts. For instance, many tools rely on the application giving HTTP 401 errors for failed login tries. If the application instead gives HTTP 200 errors and directs users to a failed login page, it is quite likely that the automated brute-force tool will become confused. Furthermore, developers might alter the behavior of the application so that the attacker gets a different error message or HTTP code after a certain number of failed login attempts. </p>\n  <h2>\n    Requesting human interaction proofs\n  </h2>\n  <p>Additional defense mechanisms include using secret questions and CAPTCHAs. CAPTCHA stands for Completely Automated Public Turing Test to Tell Computers and Humans Apart, and is a powerful defense against automated brute-force attacks. A CAPTCHA shows the user some kind of visual test, usually a bitmap image containing text followed by a question asking the user what the text says. However, recent attacks on CAPTCHAs show that this defense can also be circumvented. In addition, research focused on text-CAPTCHA recognition has produced some noticeable algorithms able to bypass CAPTCHAs from large internet sites.</p>\n  <p>Another human interaction proof occurs when an application prompts the user with a secret question after a certain number of failed login attempts. Secret questions are usually composed of personal data that is unlikely to be included in common attack dictionaries and is unexpected by exhaustive search tools.</p>\n  <p>To more fully protect against brute-force attacks, developers should use a combination of the above techniques. The exact techniques used should depend on their application’s security requirements.&nbsp;</p>\n  <h1>Step 3: Start Testing and Exploring</h1>\n  <p>Now that brute-force attack scenarios as well as their causes and countermeasures have been discussed, the next step consists of using available security testing tools to execute basic credential brute-force test cases.</p>\n  <h2>\n    Test for Exhaustive Search Attacks\n  </h2>\n  <p>Follow these steps to test for exhaustive search brute-force attacks:</p>\n  <ol>\n    <li>Download and install <i>Brutus.</i></li>\n    <li>Run <i>Brutus</i>. </li>\n    <li>Type a target URL and authentication type. </li>\n    <li>In the <i>Pass Mode</i> dropdown list, select <i>Brute Force</i>. </li>\n    <li>Select range of characters to use. </li>\n    <li>Click <i>Start</i>.</li>\n  </ol>\n  <p>Expected result: <i>Brutus </i>displays any matches in the<i> Positive Authentication Results</i> list box.<br /></p>\n  <h2>\n    Test for Dictionary Attacks\n  </h2>\n  <p>Follow these steps to test for dictionary attacks:</p>\n  <ol>\n    <li>Download and install <i>Brutus</i>. </li>\n    <li>Run <i>Brutus</i>. </li>\n    <li>Type a target URL and authentication type. </li>\n    <li>In the <i>Pass Mode</i> dropdown list, select <i>Word List</i>. </li>\n    <li>Modify the word list file with any file of your choice. </li>\n    <li>Click <i>Start</i>.</li>\n  </ol>\n  <p>Expected result: <i>Brutus </i>displays any matches in the<b></b><i>Positive Authentication Results</i> list box.<br /></p>\n  <h2>Test for Rule-based Attacks</h2>\n  <p>Follow these steps to test for rule-based attacks:</p>\n  <ol>\n    <li>Find out the victim’s personal information (email address, username, or birthday). </li>\n    <li>Develop a set of rules to use to create a list of passwords based on the victim’s personal information (such as shown in scenario 3). </li>\n    <li>Build a text file containing the list of passwords output by rules from the previous step. </li>\n    <li>Download and install <i>Brutus</i>. </li>\n    <li>Run <i>Brutus</i>. </li>\n    <li>Type a target URL and authentication type. </li>\n    <li>In the <i>Pass Mode</i> dropdown list, select <i>Word List</i> and click <i>Browse</i>. </li>\n    <li>Select the file created during step 3. </li>\n    <li>Click <i>Start</i>.</li>\n  </ol>\n  <p>Expected result: <i>Brutus </i>displays any matches in the<b></b><i>Positive Authentication Results</i> list box.&nbsp;</p>\n  <h1>Conclusions</h1>\n  <p>Credential brute-force attacks rely on submitting a large number of username and password combinations to an application in order to discover the victim’s real credentials. Attackers can use different attack vectors to execute brute-force attacks, including performing exhaustive searches or dictionary attacks. Defense mechanisms vary from account lockouts and inserting time delays to modifying the application’s behavior and using human interaction proofs. It is important that you learn how to use tools such as <i>Brutus</i> to test for brute-force vulnerabilities in your application. Finally, make sure to consider additional test scenarios such as rule-based attacks.&nbsp;</p>\n  <h1>Additional Resources</h1>\n  <p>\n  </p>\n  <ul>\n    <li>For information about key size, see&nbsp;<a href=\"http://en.wikipedia.org/wiki/Key_size\">http://en.wikipedia.org/wiki/Key_size</a></li>\n    <li>For information about blocking brute force attacks, see&nbsp;<a href=\"http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks\">http://www.owasp.org/index.php/Blocking_Brute_Force_Attacks</a></li>\n    <li>For information about circumventing CAPTCHA, see <a href=\"http://en.wikipedia.org/wiki/CAPTCHA#Circumvention\">http://en.wikipedia.org/wiki/CAPTCHA#Circumvention</a></li>\n    <li>For more information about circumventing CAPTCHA, see<b>&nbsp;</b><a href=\"http://network-security-research.blogspot.com/\">http://network-security-research.blogspot.com/</a></li>\n  </ul>\n  <p />"
}