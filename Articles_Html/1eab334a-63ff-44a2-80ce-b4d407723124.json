{
  "id": "1eab334a-63ff-44a2-80ce-b4d407723124",
  "checksum": "b025286730b5526d113e6019020cc849f5268b09",
  "words": {
    "description": [
      "h2"
    ],
    "improper": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "output": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "title"
    ],
    "handling": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "occur": [
      "p"
    ],
    "when": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2"
    ],
    "does": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "encode": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "untrusted": [
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a"
    ],
    "correctly": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "context": [
      "p",
      "p",
      "p"
    ],
    "if": [
      "p",
      "p"
    ],
    "includes": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p"
    ],
    "without": [
      "p"
    ],
    "properly": [
      "p",
      "p"
    ],
    "encoding": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "will": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "able": [
      "p",
      "p",
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "manipulate": [
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "most": [
      "p",
      "p"
    ],
    "common": [
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "a": [
      "p",
      "p",
      "p"
    ],
    "cross-site": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scripting": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "where": [
      "p"
    ],
    "into": [
      "p"
    ],
    "sending": [
      "p"
    ],
    "attacker-controlled": [
      "p"
    ],
    "malicious": [
      "p",
      "p"
    ],
    "usually": [
      "p",
      "p"
    ],
    "javascript": [
      "p"
    ],
    "legitimate": [
      "p",
      "p"
    ],
    "users": [
      "p",
      "p",
      "p",
      "p"
    ],
    "other": [
      "p"
    ],
    "besides": [
      "p"
    ],
    "might": [
      "p",
      "p"
    ],
    "caused": [
      "p"
    ],
    "example": [
      "p"
    ],
    "http": [
      "p"
    ],
    "response": [
      "p"
    ],
    "manipulation": [
      "p"
    ],
    "principle": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "send": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "affected": [
      "p"
    ],
    "impact": [
      "h2"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p"
    ],
    "attack": [
      "p",
      "p"
    ],
    "its": [
      "p"
    ],
    "typically": [
      "p"
    ],
    "through": [
      "p"
    ],
    "theory": [
      "p"
    ],
    "also": [
      "p",
      "p"
    ],
    "cause": [
      "p"
    ],
    "back-end": [
      "p",
      "p",
      "p"
    ],
    "service": [
      "p",
      "p"
    ],
    "but": [
      "p"
    ],
    "requires": [
      "p"
    ],
    "additional": [
      "p"
    ],
    "work": [
      "p"
    ],
    "practice": [
      "p"
    ],
    "perhaps": [
      "p"
    ],
    "type": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p"
    ],
    "attacks": [
      "p"
    ],
    "hypothetical": [
      "p"
    ],
    "possibility": [
      "p"
    ],
    "steal": [
      "p"
    ],
    "users'": [
      "p"
    ],
    "cookies": [
      "p"
    ],
    "impersonate": [
      "p"
    ],
    "them": [
      "p"
    ],
    "within": [
      "p"
    ],
    "or": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "on": [
      "p"
    ],
    "behalf": [
      "p"
    ],
    "countermeasures": [
      "h2"
    ],
    "prevent": [
      "p"
    ],
    "included": [
      "p",
      "p"
    ],
    "correct": [
      "p",
      "p"
    ],
    "validate": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "input": [
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a"
    ],
    "from": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "sources": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "h2"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "prevented": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "encoded": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "validated": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "computer": [
      "h2"
    ],
    "based": [
      "h2"
    ],
    "training": [
      "h2"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//projects.webappsec.org/w/page/13246934/improper%20output%20handling": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Computer Based Training"
    ],
    "p": [
      "Improper output handling vulnerabilities occur when the application does not encode untrusted data correctly for the context. If the application includes data provided by an attacker without properly encoding this data, the attacker will be able to manipulate the output of the web application. The most common result is a Cross-Site Scripting vulnerability, where the attacker is able to manipulate the web application into sending attacker-controlled malicious data (usually JavaScript) to legitimate users. Other vulnerabilities besides Cross-Site Scripting might be caused by improper output handling, for example HTTP response manipulation. The common principle is that if the application does not encode untrusted data in output properly, the attacker can manipulate the application to send malicious data to legitimate users.",
      "All web application vulnerabilities are affected by improper output handling vulnerabilities.",
      "The result of improper output handling is that the web application can be used to attack its users, typically through Cross-Site Scripting vulnerabilities. In theory, improper output handling might also be used to cause the web application to attack a back-end service, but this requires additional vulnerabilities in the back-end service to work. In practice, Cross-Site Scripting are perhaps the most common type of vulnerabilities in web applications and back-end encoding attacks are a hypothetical possibility.",
      "Cross-Site Scripting vulnerabilities are usually used to steal users' cookies, to be able to impersonate them within the application, or to perform actions on the behalf of the users of the application. Cross-Site Scripting can also be used to",
      "To prevent improper output handling vulnerabilities, encode all untrusted data that is included in output for the correct context and validate all input.",
      "To make sure that improper output handling vulnerabilities are prevented, verify that all untrusted data that is included in output is encoded for the correct context and that all input is validated."
    ],
    "ul": [
      "Encode All Output Data",
      "Validate Input from All Sources",
      "All Output Data Is Encoded",
      "Input from All Sources Is Validated",
      "For more information about improper output handling vulnerabilities, see http://projects.webappsec.org/w/page/13246934/Improper%20Output%20Handling"
    ],
    "li": [
      "Encode All Output Data",
      "Validate Input from All Sources",
      "All Output Data Is Encoded",
      "Input from All Sources Is Validated",
      "For more information about improper output handling vulnerabilities, see http://projects.webappsec.org/w/page/13246934/Improper%20Output%20Handling"
    ],
    "a": [
      "Encode All Output Data",
      "Validate Input from All Sources",
      "All Output Data Is Encoded",
      "Input from All Sources Is Validated",
      "http://projects.webappsec.org/w/page/13246934/Improper%20Output%20Handling"
    ]
  },
  "links": [
    {
      "href": "f83b953a-9b0c-406a-b274-9b2962d9c4e7",
      "text": "Encode All Output Data"
    },
    {
      "href": "b531d29c-86f7-4812-90ce-5f3f0f780aba",
      "text": "Validate Input from All Sources"
    },
    {
      "href": "13112146-7c14-4b6d-9e94-24daa22eefc4",
      "text": "All Output Data Is Encoded"
    },
    {
      "href": "7f8deb21-cd52-41be-80b4-8897612021dc",
      "text": "Input from All Sources Is Validated"
    },
    {
      "href": "http://projects.webappsec.org/w/page/13246934/Improper%20Output%20Handling",
      "text": "http://projects.webappsec.org/w/page/13246934/Improper%20Output%20Handling"
    }
  ],
  "html": "<h2>Description</h2><p>Improper output handling vulnerabilities occur when the application does not encode untrusted data correctly for the context. If the application includes data provided by an attacker without properly encoding this data, the attacker will be able to manipulate the output of the web application. The most common result is a Cross-Site Scripting vulnerability, where the attacker is able to manipulate the web application into sending attacker-controlled malicious data (usually JavaScript) to legitimate users. Other vulnerabilities besides Cross-Site Scripting might be caused by improper output handling, for example HTTP response manipulation. The common principle is that if the application does not encode untrusted data in output properly, the attacker can manipulate the application to send malicious data to legitimate users.\n</p><p>\nAll web application vulnerabilities are affected by improper output handling vulnerabilities.\n</p><h2>Impact</h2><p>The result of improper output handling is that the web application can be used to attack its users, typically through Cross-Site Scripting vulnerabilities. In theory, improper output handling might also be used to cause the web application to attack a back-end service, but this requires additional vulnerabilities in the back-end service to work. In practice, Cross-Site Scripting are perhaps the most common type of vulnerabilities in web applications and back-end encoding attacks are a hypothetical possibility.\n</p><p>\nCross-Site Scripting vulnerabilities are usually used to steal users' cookies, to be able to impersonate them within the application, or to perform actions on the behalf of the users of the application. Cross-Site Scripting can also be used to \n</p><h2>Countermeasures</h2><p>To prevent improper output handling vulnerabilities, encode all untrusted data that is included in output for the correct context and validate all input.\n</p><ul>\n<li> <a href=\"f83b953a-9b0c-406a-b274-9b2962d9c4e7\">Encode All Output Data</a></li>\n</ul><ul>\n<li> <a href=\"b531d29c-86f7-4812-90ce-5f3f0f780aba\">Validate Input from All Sources</a></li>\n</ul><h2>Application Check</h2><p>To make sure that improper output handling vulnerabilities are prevented, verify that all untrusted data that is included in output is encoded for the correct context and that all input is validated. \n</p><ul>\n<li> <a href=\"13112146-7c14-4b6d-9e94-24daa22eefc4\">All Output Data Is Encoded</a></li>\n</ul><ul>\n<li> <a href=\"7f8deb21-cd52-41be-80b4-8897612021dc\">Input from All Sources Is Validated</a></li>\n</ul><h2>Computer Based Training</h2><ul><li> For more information about improper output handling vulnerabilities, see <a href=\"http://projects.webappsec.org/w/page/13246934/Improper%20Output%20Handling\">http://projects.webappsec.org/w/page/13246934/Improper%20Output%20Handling</a></li>\n</ul>"
}