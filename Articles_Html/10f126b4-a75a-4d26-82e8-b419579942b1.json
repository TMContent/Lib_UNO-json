{
  "id": "10f126b4-a75a-4d26-82e8-b419579942b1",
  "checksum": "2cac7578527c144918575355ee7d844d0ae604f0",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "c++un*x": [
      "ul"
    ],
    "c++": [
      "li"
    ],
    "un*x": [
      "li",
      "p",
      "p",
      "title"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "open": [
      "p",
      "p",
      "title"
    ],
    "files": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "carefully": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "when": [
      "p",
      "h1",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "opening": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "open)": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "instead": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "of": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "fopen).": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "fopen)": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "does": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "indicate": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "an": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "existing": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "file": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "was": [
      "p",
      "p"
    ],
    "opened": [
      "p"
    ],
    "for": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "writing": [
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "new": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "created": [
      "p"
    ],
    "as": [
      "p"
    ],
    "result": [
      "p"
    ],
    "program": [
      "p"
    ],
    "could": [
      "p"
    ],
    "overwrite": [
      "p"
    ],
    "access": [
      "p"
    ],
    "unintended": [
      "p"
    ],
    "provides": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "control": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "this": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "guideline": [
      "p"
    ],
    "whenever": [
      "p"
    ],
    "creating": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "programmatically": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "title"
    ],
    "systems": [
      "p",
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "actions": [
      "p"
    ],
    "safely": [
      "p",
      "title"
    ],
    "review": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "search": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "li",
      "p"
    ],
    "calls": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p"
    ],
    "replace": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "open).": [
      "ol",
      "li",
      "p"
    ],
    "flags": [
      "ol",
      "li",
      "p"
    ],
    "o_creat": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "|": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "o_excl": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "call": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "will": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "fail": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "already": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "exists": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "prevents": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "from": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "overwriting": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "o_nofollow": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "ensures": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "system": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "follow": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "symlink": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "thereby": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "accessing": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "another": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "unexpectedly": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "ul": [
      "C++UN*X",
      "O_CREAT | O_EXCL. When creating a new file, the call will fail if the file already exists. This prevents the call from overwriting an existing file.\n            \n              \n                O_NOFOLLOW. Ensures that the system will not follow a symlink thereby accessing another file unexpectedly."
    ],
    "li": [
      "C++",
      "UN*X",
      "Review code. Search for all calls to the fopen() function.",
      "Use open() instead of fopen(). Replace calls to fopen() with open(). Use open() with the following flags:\n        \n          \n            \n              O_CREAT | O_EXCL. When creating a new file, the call will fail if the file already exists. This prevents the call from overwriting an existing file.\n            \n              \n                O_NOFOLLOW. Ensures that the system will not follow a symlink thereby accessing another file unexpectedly.",
      "O_CREAT | O_EXCL. When creating a new file, the call will fail if the file already exists. This prevents the call from overwriting an existing file.",
      "O_NOFOLLOW. Ensures that the system will not follow a symlink thereby accessing another file unexpectedly."
    ],
    "br": [
      ""
    ],
    "p": [
      "Open files carefully.",
      "When opening files, use open() instead of fopen(). fopen() does not indicate if an existing file was opened for writing or if a new file was created. As a result, a program could overwrite or access an unintended file. open() provides the control that fopen() does not.",
      "Use this guideline whenever creating files programmatically on UN*X systems.",
      "Perform the following actions to open files safely on UN*X systems:",
      "Review code. Search for all calls to the fopen() function.",
      "Use open() instead of fopen(). Replace calls to fopen() with open(). Use open() with the following flags:",
      "O_CREAT | O_EXCL. When creating a new file, the call will fail if the file already exists. This prevents the call from overwriting an existing file.",
      "O_NOFOLLOW. Ensures that the system will not follow a symlink thereby accessing another file unexpectedly."
    ],
    "ol": [
      "Review code. Search for all calls to the fopen() function.\n      \n        \n          Use open() instead of fopen(). Replace calls to fopen() with open(). Use open() with the following flags:\n        \n          \n            \n              O_CREAT | O_EXCL. When creating a new file, the call will fail if the file already exists. This prevents the call from overwriting an existing file.\n            \n              \n                O_NOFOLLOW. Ensures that the system will not follow a symlink thereby accessing another file unexpectedly."
    ],
    "strong": [
      "Review code.",
      "Use open() instead of fopen().",
      "O_CREAT | O_EXCL.",
      "O_NOFOLLOW."
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;<li>UN&#42;X<br /></li></li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Open files carefully.</p>\n  <h1>Why</h1>\n  <p>When opening files, use open() instead of fopen(). fopen() does not indicate if an existing file was opened for writing or if a new file was created. As a result, a program could overwrite or access an unintended file. open() provides the control that fopen() does not.</p>\n  <h1>When</h1>\n  <p>Use this guideline whenever creating files programmatically on UN&#42;X systems.</p>\n  <h1>How</h1>\n  <p>Perform the following actions to open files safely on UN&#42;X systems:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Review code.</strong> Search for all calls to the fopen() function.</p>\n      <li>\n        <p>\n          <strong>Use open() instead of fopen().</strong> Replace calls to fopen() with open(). Use open() with the following flags:</p>\n        <ul>\n          <li>\n            <p>\n              <strong>O_CREAT &#124; O_EXCL.</strong> When creating a new file, the call will fail if the file already exists. This prevents the call from overwriting an existing file.</p>\n            <li>\n              <p>\n                <strong>O_NOFOLLOW.</strong> Ensures that the system will not follow a symlink thereby accessing another file unexpectedly.</p>\n            </li>\n          </li>\n        </ul>\n      </li>\n    </li>\n  </ol>"
}