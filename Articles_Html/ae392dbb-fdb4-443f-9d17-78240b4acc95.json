{
  "id": "ae392dbb-fdb4-443f-9d17-78240b4acc95",
  "checksum": "c2498881ccc113469102e4173db9b57565fb10dc",
  "words": {
    "0": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "any": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "application": [
      "p",
      "li"
    ],
    "that": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "writes": [
      "p"
    ],
    "user": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "xml": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "title"
    ],
    "file": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "a": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "description": [
      "h1"
    ],
    "in": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "injection": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "attack": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "title"
    ],
    "attacker": [
      "p",
      "p",
      "p"
    ],
    "inserts": [
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "into": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "which": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "resides": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "depending": [
      "p"
    ],
    "type": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "parser": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "sax": [
      "p",
      "p",
      "tt",
      "ul",
      "li"
    ],
    "or": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "dom,": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "could": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "either": [
      "p"
    ],
    "overwrite": [
      "p"
    ],
    "values": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "previous": [
      "p",
      "ul",
      "li"
    ],
    "nodes": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "cause": [
      "p"
    ],
    "consume": [
      "p"
    ],
    "excessive": [
      "p",
      "p"
    ],
    "amount": [
      "p"
    ],
    "memory": [
      "p",
      "p"
    ],
    "impact": [
      "h1"
    ],
    "modification": [
      "ul",
      "li"
    ],
    "node": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "xml\ndenial": [
      "ul"
    ],
    "service": [
      "ul",
      "li",
      "p"
    ],
    "server\nexposure": [
      "ul"
    ],
    "entire": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "document": [
      "ul",
      "li"
    ],
    "unauthorized": [
      "ul",
      "li"
    ],
    "users\naddition": [
      "ul"
    ],
    "new": [
      "ul",
      "li",
      "p"
    ],
    "even": [
      "ul",
      "li"
    ],
    "documents\nability": [
      "ul"
    ],
    "modify": [
      "ul",
      "li"
    ],
    "remove": [
      "ul",
      "li",
      "li",
      "p"
    ],
    "should": [
      "ul",
      "li"
    ],
    "not": [
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "accessed": [
      "ul",
      "li"
    ],
    "denial": [
      "li",
      "p"
    ],
    "exposure": [
      "li"
    ],
    "users": [
      "li"
    ],
    "addition": [
      "li"
    ],
    "documents": [
      "li",
      "ul",
      "li"
    ],
    "ability": [
      "li"
    ],
    "vulnerabilities": [
      "h1"
    ],
    "dynamic": [
      "ul",
      "li"
    ],
    "generation": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "p"
    ],
    "untrusted": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "input\nincorrectly": [
      "ul"
    ],
    "defined": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "schema\nlack": [
      "ul"
    ],
    "schema": [
      "ul",
      "li",
      "li",
      "p"
    ],
    "validation\nfailure": [
      "ul"
    ],
    "validate": [
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "p"
    ],
    "and": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "tt",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "properly": [
      "ul",
      "li"
    ],
    "encode": [
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "dangerous": [
      "ul",
      "li"
    ],
    "meta": [
      "ul",
      "li"
    ],
    "characters": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "according": [
      "ul",
      "li"
    ],
    "context": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "incorrectly": [
      "li"
    ],
    "lack": [
      "li"
    ],
    "validation": [
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "failure": [
      "li"
    ],
    "countermeasures": [
      "h1",
      "p"
    ],
    "when": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "loading": [
      "ul",
      "li"
    ],
    "it": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "against": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "xsd\nperform": [
      "ul"
    ],
    "context-sensitive": [
      "ul",
      "li"
    ],
    "encoding": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "as": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "with": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "output": [
      "ul",
      "li"
    ],
    "html": [
      "ul",
      "li"
    ],
    "take": [
      "ul",
      "li"
    ],
    "whitelist": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "approach": [
      "ul",
      "li"
    ],
    "for": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "each": [
      "ul",
      "li"
    ],
    "will": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "inserted": [
      "ul",
      "li"
    ],
    "element,": [
      "ul",
      "li"
    ],
    "attribute": [
      "ul",
      "li"
    ],
    "value": [
      "ul",
      "li",
      "p"
    ],
    "etc),": [
      "ul",
      "li"
    ],
    "construct": [
      "ul",
      "li"
    ],
    "set": [
      "ul",
      "li"
    ],
    "known-safe": [
      "ul",
      "li"
    ],
    "check": [
      "ul",
      "li"
    ],
    "added": [
      "ul",
      "li"
    ],
    "are": [
      "ul",
      "li"
    ],
    "use": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "cdata": [
      "ul",
      "li",
      "p",
      "tt",
      "p",
      "p",
      "tt",
      "tt",
      "tt",
      "ul",
      "li"
    ],
    "sections": [
      "ul",
      "li"
    ],
    "further": [
      "ul",
      "li"
    ],
    "ensure": [
      "ul",
      "li"
    ],
    "ignores": [
      "ul",
      "li"
    ],
    "special": [
      "ul",
      "li"
    ],
    "ideally": [
      "ul",
      "li"
    ],
    "accept": [
      "ul",
      "li"
    ],
    "only": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "non-xml": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "sources": [
      "ul",
      "li"
    ],
    "if": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "blob": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "must": [
      "ul",
      "li",
      "p"
    ],
    "accepted": [
      "ul",
      "li"
    ],
    "source": [
      "ul",
      "li"
    ],
    "manually": [
      "ul",
      "li"
    ],
    "reassemble": [
      "ul",
      "li"
    ],
    "parsed": [
      "ul",
      "li"
    ],
    "out": [
      "ul",
      "li"
    ],
    "encoded": [
      "ul",
      "li"
    ],
    "after": [
      "ul",
      "li",
      "p"
    ],
    "checking": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "received": [
      "ul",
      "li"
    ],
    "xsd\nvalidate": [
      "ul"
    ],
    "inclusion": [
      "ul",
      "li"
    ],
    "list": [
      "ul",
      "li"
    ],
    "before": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "example": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p"
    ],
    "regex": [
      "ul",
      "li"
    ],
    "pattern": [
      "ul",
      "li"
    ],
    "primitive": [
      "ul",
      "li"
    ],
    "casting": [
      "ul",
      "li"
    ],
    "domain": [
      "ul",
      "li"
    ],
    "constraint": [
      "ul",
      "li"
    ],
    "another": [
      "ul",
      "li"
    ],
    "validator": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "additional": [
      "ul",
      "li",
      "p",
      "h1"
    ],
    "resources": [
      "ul",
      "li",
      "h1"
    ],
    "section": [
      "ul",
      "li",
      "p"
    ],
    "below": [
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "information": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a"
    ],
    "validation\ntrim": [
      "ul"
    ],
    "include": [
      "ul",
      "li"
    ],
    "is": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "necessary": [
      "ul",
      "li"
    ],
    "application\nuse": [
      "ul"
    ],
    "processing": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "pipelines": [
      "ul",
      "li"
    ],
    "make": [
      "ul",
      "li"
    ],
    "flow": [
      "ul",
      "li"
    ],
    "clear": [
      "ul",
      "li"
    ],
    "threats": [
      "ul",
      "li"
    ],
    "easier": [
      "ul",
      "li",
      "p"
    ],
    "identify\nremove": [
      "ul"
    ],
    "doctype": [
      "ul",
      "li"
    ],
    "element": [
      "ul",
      "li"
    ],
    "creating": [
      "ul",
      "li"
    ],
    "objects": [
      "ul",
      "li"
    ],
    "xsd": [
      "li",
      "li"
    ],
    "perform": [
      "li"
    ],
    "trim": [
      "li"
    ],
    "identify": [
      "li"
    ],
    "let": [
      "p"
    ],
    "us": [
      "p"
    ],
    "assume": [
      "p"
    ],
    "valid": [
      "p"
    ],
    "our": [
      "p"
    ],
    "side": [
      "p"
    ],
    "looks": [
      "p"
    ],
    "like": [
      "p",
      "p",
      "p"
    ],
    "userrecord>": [
      "pre",
      "pre"
    ],
    "uniqueid>5</uniqueid>": [
      "pre",
      "pre"
    ],
    "name>gandalf</name>": [
      "pre",
      "pre",
      "pre"
    ],
    "email>gandalf@middleearth.com</email>": [
      "pre"
    ],
    "address>one": [
      "pre",
      "pre",
      "pre"
    ],
    "middle": [
      "pre",
      "pre",
      "pre"
    ],
    "earth": [
      "pre",
      "pre",
      "pre"
    ],
    "way": [
      "pre",
      "pre",
      "pre"
    ],
    "me/address>": [
      "pre",
      "pre",
      "pre"
    ],
    "zipcode>10000</zipcode>": [
      "pre",
      "pre",
      "pre"
    ],
    "phonenumber>123-456-7890</phonenumber>\n\n</userrecord>": [
      "pre",
      "pre"
    ],
    "uniqueid": [
      "p",
      "tt",
      "p",
      "tt",
      "p",
      "tt"
    ],
    "field": [
      "p",
      "p",
      "p",
      "p"
    ],
    "here": [
      "p"
    ],
    "assigned": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p"
    ],
    "now": [
      "p",
      "p"
    ],
    "web": [
      "p"
    ],
    "accepts": [
      "p"
    ],
    "stores": [
      "p"
    ],
    "what": [
      "p",
      "p"
    ],
    "outcome": [
      "p",
      "p"
    ],
    "enters": [
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "email": [
      "p",
      "tt",
      "p",
      "tt",
      "p",
      "tt"
    ],
    "gandalf@middleearthcom<uniqueid>0</uniqueid><name>gandalf</name><email>gandalf@middleearth.com": [
      "pre"
    ],
    "resulting": [
      "p"
    ],
    "look": [
      "p",
      "p"
    ],
    "userrecord>\n\n<uniqueid>5</uniqueid>": [
      "pre"
    ],
    "email>gandalf@middleearth.com</email>\n<uniqueid>0</uniqueid>": [
      "pre"
    ],
    "name>gandalf</name>\n<email>gandalf@middleearth.com</email>": [
      "pre"
    ],
    "we": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "have": [
      "p",
      "p"
    ],
    "two": [
      "p"
    ],
    "fields": [
      "p"
    ],
    "name": [
      "p",
      "tt"
    ],
    "parsing": [
      "p"
    ],
    "such": [
      "p"
    ],
    "depend": [
      "p"
    ],
    "upon": [
      "p"
    ],
    "report": [
      "p",
      "p"
    ],
    "so": [
      "p",
      "p",
      "p"
    ],
    "would": [
      "p"
    ],
    "essentially": [
      "p"
    ],
    "overwritten": [
      "p"
    ],
    "dom": [
      "p",
      "p",
      "tt",
      "tt"
    ],
    "error": [
      "p"
    ],
    "however": [
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "abused": [
      "p"
    ],
    "inserting": [
      "p"
    ],
    "while": [
      "p"
    ],
    "still": [
      "p"
    ],
    "matching": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "consumption": [
      "p"
    ],
    "potentially": [
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "also": [
      "p",
      "p"
    ],
    "note": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "possible": [
      "p",
      "p",
      "p"
    ],
    "insert": [
      "p",
      "p",
      "p"
    ],
    "record": [
      "p"
    ],
    "among": [
      "p"
    ],
    "other": [
      "p"
    ],
    "issues": [
      "p"
    ],
    "fix": [
      "p"
    ],
    "above": [
      "p",
      "p"
    ],
    "escape": [
      "p",
      "p"
    ],
    "markup": [
      "p"
    ],
    "delimiters": [
      "p"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "being": [
      "p",
      "p"
    ],
    "interpreted": [
      "p",
      "p"
    ],
    "replacing": [
      "p"
    ],
    "&": [
      "p",
      "p"
    ],
    ",": [
      "p"
    ],
    "described": [
      "p"
    ],
    "case": [
      "p"
    ],
    "general": [
      "p"
    ],
    "though": [
      "p"
    ],
    "don't": [
      "p"
    ],
    "know": [
      "p"
    ],
    "exactly": [
      "p"
    ],
    "might": [
      "p"
    ],
    "best": [
      "p"
    ],
    "plan": [
      "p"
    ],
    "acceptable": [
      "p",
      "p"
    ],
    "do": [
      "p"
    ],
    "much": [
      "p"
    ],
    "where": [
      "p"
    ],
    "consider": [
      "p"
    ],
    "enforce": [
      "p"
    ],
    "string": [
      "p",
      "p"
    ],
    "treated": [
      "p"
    ],
    "strictly": [
      "p"
    ],
    "$evil_input": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre"
    ],
    "\"gandalf@middleearthcom</email>": [
      "pre"
    ],
    "uniqueid>0</uniqueid>\n<name>gandalf</name>\n<email>gandalf@middleearth.com\";$data": [
      "pre"
    ],
    "\"!--[cdata[\"": [
      "pre"
    ],
    "+": [
      "pre",
      "pre"
    ],
    "\"]-->\";": [
      "pre"
    ],
    "$data": [
      "p",
      "tt"
    ],
    "email><!--[cdata[gandalf@middleearth.com</email--><uniqueid>0</uniqueid>": [
      "pre"
    ],
    "name>gandalf</name>\n<email>gandalf@middleearth.com]]&gt;</email>": [
      "pre"
    ],
    "phonenumber>123-456-7890</phonenumber>\n</email>\n\n</userrecord>": [
      "pre"
    ],
    "very": [
      "p"
    ],
    "useful": [
      "p"
    ],
    "correctly": [
      "p"
    ],
    "but": [
      "p"
    ],
    "has": [
      "p"
    ],
    "same": [
      "p"
    ],
    "generic": [
      "p"
    ],
    "problem": [
      "p"
    ],
    "had": [
      "p"
    ],
    "create": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "\"]&gt;\"": [
      "p",
      "tt"
    ],
    "end": [
      "p"
    ],
    "thecdata": [
      "p"
    ],
    "therefore": [
      "p"
    ],
    "wherever": [
      "p"
    ],
    "]&gt;": [
      "p",
      "tt"
    ],
    "string—at": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "point": [
      "p"
    ],
    "it's": [
      "p"
    ],
    "simply": [
      "p"
    ],
    "give": [
      "p"
    ],
    "up": [
      "p"
    ],
    "everything": [
      "p"
    ],
    "model": [
      "ul",
      "li"
    ],
    "http//www.w3.org/xml/processing/\nfor": [
      "ul"
    ],
    "managing": [
      "ul",
      "li"
    ],
    "datasets": [
      "ul",
      "li"
    ],
    "security": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "http//www-128.ibm.com/developerworks/xml/library/x-think37/index.html\nfor": [
      "ul"
    ],
    "http//www.owasp.org/index.php/data_validation\nfor": [
      "ul"
    ],
    "configuring": [
      "ul",
      "li"
    ],
    "parsers": [
      "ul",
      "li"
    ],
    "http//www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html\nfor": [
      "ul"
    ],
    "http//www.w3schools.com/xml/xml_cdata.asp": [
      "ul",
      "li",
      "a"
    ],
    "http//www.w3.org/xml/processing/": [
      "li",
      "a"
    ],
    "http//www-128.ibm.com/developerworks/xml/library/x-think37/index.html": [
      "li",
      "a"
    ],
    "http//www.owasp.org/index.php/data_validation": [
      "li",
      "a"
    ],
    "http//www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html": [
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "xpath-xquery": [
      "ul",
      "li",
      "a"
    ],
    "attackattack:": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul"
    ],
    "sql": [
      "ul",
      "li",
      "a"
    ],
    "disclosure": [
      "ul",
      "li",
      "a"
    ],
    "server-side": [
      "ul",
      "li",
      "a"
    ],
    "code": [
      "ul",
      "li",
      "a"
    ],
    "ajax": [
      "ul",
      "li",
      "a"
    ],
    "ldap": [
      "ul",
      "li",
      "a"
    ],
    "client-side": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Description",
      "Impact",
      "Vulnerabilities",
      "Countermeasures",
      "Example",
      "Additional Resources",
      "Related Items"
    ],
    "p": [
      "Any application that writes user input to an XML file on a server.",
      "In an XML injection attack, an attacker inserts malicious data into XML which resides on the server. Depending on the type of XML parser used (SAX or DOM), this malicious data could be used to either overwrite the values in previous nodes or cause the XML parser to consume an excessive amount of memory on the server.",
      "Let us assume that a valid node in our server side XML looks like this:",
      "The UniqueID field here is assigned by the server. Now, if web server accepts input from the user and stores it in the XML file, what is the outcome of the parser when a user enters the following data for the Email field:",
      "The resulting XML on the server will look like this:",
      "We now have two fields and values for UniqueID, Name and Email. The outcome of parsing such data will depend upon the type of XML parser used:",
      "If a SAX parser is used, it will report the UniqueID for this node to be 0, so an attacker would have essentially overwritten the field value.\n    If a DOM parser is used, it will report an error. However, the DOM parser can be abused by inserting additional nodes in the XML while still matching the schema, which will lead to excessive memory consumption by the parser and could potentially result in a denial of service.",
      "Also note that this is a simple example. It is possible to insert an entire new record, among other issues. To fix the example above, we can escape the markup delimiters to prevent the user input from being interpreted, replacing & with &, < with <, and so on, as described in the Countermeasures section. This will prevent the user data from being interpreted in this case. In general, though, we don't know exactly what the input might look like, so the best plan is to validate against a whitelist of acceptable characters and do type checking as much as possible. Where type checking is not possible, consider using CDATA to enforce that the string be treated strictly as data. For example:",
      "After we insert $data into the email field above, the result will be the following acceptable XML:",
      "CDATA is very useful when used correctly but it has the same generic problem as we had before. An attacker can create a malicious string that uses \"]]&gt;\" to end the\nCDATA and insert malicious XML. Therefore, wherever we use CDATA we must also remove or escape ]]&gt; from the input string—at a certain point, it's easier to simply give up and encode everything by whitelist."
    ],
    "ul": [
      "Modification of previous node values in the XML.\nDenial of service on the server.\nExposure of the entire XML document to unauthorized users.\nAddition of new nodes or even entire documents.\nAbility to modify or remove data that should not be accessed.",
      "Dynamic XML generation using untrusted input.\nIncorrectly defined schema.\nLack of schema validation.\nFailure to validate input and properly encode any dangerous meta characters according to the context.",
      "When loading an XML file on the server, validate it against a defined XSD.\nPerform context-sensitive encoding of untrusted input: As with encoding data to be output in HTML, take a whitelist approach. For each context into which data will be inserted (element, attribute value, etc.), construct a whitelist set of known-safe characters. Check the data to be added against the whitelist, and encode any characters that are not on the whitelist. Use CDATA sections to further ensure that the parser ignores special characters. Ideally, accept only non-XML values from untrusted sources. If an XML blob must be accepted from an untrusted source, manually reassemble it from values parsed out and encoded after checking the received blob against an XSD.\nValidate untrusted input against an inclusion list before use: For example, use a RegEx pattern, primitive type casting, a domain constraint, or another validator. See the Additional Resources section below for more information on data validation.\nTrim XML documents to include only the data that is necessary to the application.\nUse XML processing pipelines to make the flow of data clear and threats easier to identify.\nRemove DOCTYPE element from user input before creating XML objects.",
      "For more information on the XML Processing Model, see http://www.w3.org/XML/Processing/\nFor more information on Managing XML Datasets for Security, see: http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html\nFor more information on Data Validation, see: http://www.owasp.org/index.php/Data_Validation\nFor more information on Configuring SAX Parsers for Security, see: http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html\nFor more information on XML CDATA, see: http://www.w3schools.com/xml/xml_cdata.asp",
      "Attack: Xpath-XQuery Attack\nAttack: SQL Injection Attack\nAttack: Information Disclosure Attack\nAttack: Server-Side Code Injection Attack\nAttack: AJAX Injection Attack\nAttack: LDAP Injection Attack\nAttack: Client-side Validation Attack"
    ],
    "li": [
      "Modification of previous node values in the XML.",
      "Denial of service on the server.",
      "Exposure of the entire XML document to unauthorized users.",
      "Addition of new nodes or even entire documents.",
      "Ability to modify or remove data that should not be accessed.",
      "Dynamic XML generation using untrusted input.",
      "Incorrectly defined schema.",
      "Lack of schema validation.",
      "Failure to validate input and properly encode any dangerous meta characters according to the context.",
      "When loading an XML file on the server, validate it against a defined XSD.",
      "Perform context-sensitive encoding of untrusted input: As with encoding data to be output in HTML, take a whitelist approach. For each context into which data will be inserted (element, attribute value, etc.), construct a whitelist set of known-safe characters. Check the data to be added against the whitelist, and encode any characters that are not on the whitelist. Use CDATA sections to further ensure that the parser ignores special characters. Ideally, accept only non-XML values from untrusted sources. If an XML blob must be accepted from an untrusted source, manually reassemble it from values parsed out and encoded after checking the received blob against an XSD.",
      "Validate untrusted input against an inclusion list before use: For example, use a RegEx pattern, primitive type casting, a domain constraint, or another validator. See the Additional Resources section below for more information on data validation.",
      "Trim XML documents to include only the data that is necessary to the application.",
      "Use XML processing pipelines to make the flow of data clear and threats easier to identify.",
      "Remove DOCTYPE element from user input before creating XML objects.",
      "For more information on the XML Processing Model, see http://www.w3.org/XML/Processing/",
      "For more information on Managing XML Datasets for Security, see: http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html",
      "For more information on Data Validation, see: http://www.owasp.org/index.php/Data_Validation",
      "For more information on Configuring SAX Parsers for Security, see: http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html",
      "For more information on XML CDATA, see: http://www.w3schools.com/xml/xml_cdata.asp",
      "Attack: Xpath-XQuery Attack",
      "Attack: SQL Injection Attack",
      "Attack: Information Disclosure Attack",
      "Attack: Server-Side Code Injection Attack",
      "Attack: AJAX Injection Attack",
      "Attack: LDAP Injection Attack",
      "Attack: Client-side Validation Attack"
    ],
    "pre": [
      "<userrecord>\n   \n<uniqueid>5</uniqueid>   \n<name>Gandalf</name>   \n<email>Gandalf@MiddleEarth.com</email>   \n<address>One Middle Earth Way, ME</address>   \n<zipcode>10000</zipcode>   \n<phonenumber>123-456-7890</phonenumber>\n\n</userrecord>",
      "Gandalf@MiddleEarth.com<uniqueid>0</uniqueid><name>Gandalf</name><email>Gandalf@MiddleEarth.com",
      "<userrecord>\n\n<uniqueid>5</uniqueid>   \n<name>Gandalf</name>   \n<email>Gandalf@MiddleEarth.com</email>\n<uniqueid>0</uniqueid>               \n<name>Gandalf</name>\n<email>Gandalf@MiddleEarth.com</email>   \n<address>One Middle Earth Way, ME</address>  \n<zipcode>10000</zipcode>   \n<phonenumber>123-456-7890</phonenumber>\n\n</userrecord>",
      "$evil_input = \"Gandalf@MiddleEarth.com</email>   \n<uniqueid>0</uniqueid>\n<name>Gandalf</name>\n<email>Gandalf@MiddleEarth.com\";$data = \"<!--[CDATA[\" + $evil_input + \"]]-->\";",
      "<userrecord>\n  \n<uniqueid>5</uniqueid>  \n<name>Gandalf</name>  \n<email><!--[CDATA[Gandalf@MiddleEarth.com</Email--><uniqueid>0</uniqueid>            \n<name>Gandalf</name>\n<email>Gandalf@MiddleEarth.com]]&gt;</email>  \n<address>One Middle Earth Way, ME</address>  \n<zipcode>10000</zipcode>  \n<phonenumber>123-456-7890</phonenumber>\n</email>\n\n</userrecord>"
    ],
    "tt": [
      "UniqueID",
      "Email",
      "UniqueID, Name and Email",
      "SAX",
      "UniqueID",
      "DOM",
      "DOM",
      "CDATA",
      "$data",
      "email",
      "CDATA",
      "\"]]&gt;\"",
      "CDATA",
      "CDATA",
      "]]&gt;"
    ],
    "a": [
      "http://www.w3.org/XML/Processing/",
      "http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html",
      "http://www.owasp.org/index.php/Data_Validation",
      "http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html",
      "http://www.w3schools.com/xml/xml_cdata.asp",
      "Attack: Xpath-XQuery Attack",
      "Attack: SQL Injection Attack",
      "Attack: Information Disclosure Attack",
      "Attack: Server-Side Code Injection Attack",
      "Attack: AJAX Injection Attack",
      "Attack: LDAP Injection Attack",
      "Attack: Client-side Validation Attack"
    ]
  },
  "links": [
    {
      "href": "http://www.w3.org/XML/Processing/",
      "text": "http://www.w3.org/XML/Processing/"
    },
    {
      "href": "http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html",
      "text": "http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html"
    },
    {
      "href": "http://www.owasp.org/index.php/Data_Validation",
      "text": "http://www.owasp.org/index.php/Data_Validation"
    },
    {
      "href": "http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html",
      "text": "http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html"
    },
    {
      "href": "http://www.w3schools.com/xml/xml_cdata.asp",
      "text": "http://www.w3schools.com/xml/xml_cdata.asp"
    },
    {
      "href": "1508d763-03f1-4b43-bf8e-ad7cf8edebd7",
      "text": "Attack: Xpath-XQuery Attack"
    },
    {
      "href": "b1757bda-0a0d-48e7-b101-3c4088e41878",
      "text": "Attack: SQL Injection Attack"
    },
    {
      "href": "8482159c-5ec2-4b89-9c65-9af765030ff5",
      "text": "Attack: Information Disclosure Attack"
    },
    {
      "href": "9d60faca-687b-4c69-91ba-f5712af0fd02",
      "text": "Attack: Server-Side Code Injection Attack"
    },
    {
      "href": "e4a899ec-9301-4751-ae07-69a265336d8b",
      "text": "Attack: AJAX Injection Attack"
    },
    {
      "href": "61f0d74e-d9b6-4e27-9e12-da65baff83fd",
      "text": "Attack: LDAP Injection Attack"
    },
    {
      "href": "1408d3c3-7fc1-4ff0-910e-cdf0e191b669",
      "text": "Attack: Client-side Validation Attack"
    }
  ],
  "html": "<h1>Applies To</h1><p>Any application that writes user input to an XML file on a server.\n</p><h1>Description</h1><p>In an XML injection attack, an attacker inserts malicious data into XML which resides on the server. Depending on the type of XML parser used (SAX or DOM), this malicious data could be used to either overwrite the values in previous nodes or cause the XML parser to consume an excessive amount of memory on the server.\n</p><h1>Impact</h1><ul><li>Modification of previous node values in the XML.</li>\n<li>Denial of service on the server.</li>\n<li>Exposure of the entire XML document to unauthorized users.</li>\n<li>Addition of new nodes or even entire documents.</li>\n<li>Ability to modify or remove data that should not be accessed.</li>\n</ul><h1>Vulnerabilities</h1><ul><li>Dynamic XML generation using untrusted input.</li>\n<li>Incorrectly defined schema.</li>\n<li>Lack of schema validation.</li>\n<li>Failure to validate input and properly encode any dangerous meta characters according to the context.</li>\n</ul><h1>Countermeasures</h1><ul><li>When loading an XML file on the server, validate it against a defined XSD.</li>\n<li>Perform context-sensitive encoding of untrusted input: As with encoding data to be output in HTML, take a whitelist approach. For each context into which data will be inserted (element, attribute value, etc.), construct a whitelist set of known-safe characters. Check the data to be added against the whitelist, and encode any characters that are not on the whitelist. Use CDATA sections to further ensure that the parser ignores special characters. Ideally, accept only non-XML values from untrusted sources. If an XML blob must be accepted from an untrusted source, manually reassemble it from values parsed out and encoded after checking the received blob against an XSD.</li>\n<li>Validate untrusted input against an inclusion list before use: For example, use a RegEx pattern, primitive type casting, a domain constraint, or another validator. See the Additional Resources section below for more information on data validation.</li>\n<li>Trim XML documents to include only the data that is necessary to the application.</li>\n<li>Use XML processing pipelines to make the flow of data clear and threats easier to identify.</li>\n<li>Remove DOCTYPE element from user input before creating XML objects.</li>\n</ul><h1>Example</h1><p>Let us assume that a valid node in our server side XML looks like this:\n</p><pre>&lt;userrecord&gt;\n   \n&lt;uniqueid&gt;5&lt;/uniqueid&gt;   \n&lt;name&gt;Gandalf&lt;/name&gt;   \n&lt;email&gt;Gandalf@MiddleEarth.com&lt;/email&gt;   \n&lt;address&gt;One Middle Earth Way, ME&lt;/address&gt;   \n&lt;zipcode&gt;10000&lt;/zipcode&gt;   \n&lt;phonenumber&gt;123-456-7890&lt;/phonenumber&gt;\n\n&lt;/userrecord&gt;\n</pre><p>\nThe <tt>UniqueID</tt> field here is assigned by the server. Now, if web server accepts input from the user and stores it in the XML file, what is the outcome of the parser when a user enters the following data for the <tt>Email</tt> field:\n</p><pre>Gandalf@MiddleEarth.com&lt;uniqueid&gt;0&lt;/uniqueid&gt;&lt;name&gt;Gandalf&lt;/name&gt;&lt;email&gt;Gandalf@MiddleEarth.com\n</pre><p>\nThe resulting XML on the server will look like this:\n</p><pre>&lt;userrecord&gt;\n\n&lt;uniqueid&gt;5&lt;/uniqueid&gt;   \n&lt;name&gt;Gandalf&lt;/name&gt;   \n&lt;email&gt;Gandalf@MiddleEarth.com&lt;/email&gt;\n&lt;uniqueid&gt;0&lt;/uniqueid&gt;               \n&lt;name&gt;Gandalf&lt;/name&gt;\n&lt;email&gt;Gandalf@MiddleEarth.com&lt;/email&gt;   \n&lt;address&gt;One Middle Earth Way, ME&lt;/address&gt;  \n&lt;zipcode&gt;10000&lt;/zipcode&gt;   \n&lt;phonenumber&gt;123-456-7890&lt;/phonenumber&gt;\n\n&lt;/userrecord&gt;\n</pre><p>\nWe now have two fields and values for <tt>UniqueID, Name and Email</tt>. The outcome of parsing such data will depend upon the type of XML parser used:\n</p><p>\n    If a <tt>SAX</tt> parser is used, it will report the <tt>UniqueID</tt> for this node to be 0, so an attacker would have essentially overwritten the field value.\n    If a <tt>DOM</tt> parser is used, it will report an error. However, the <tt>DOM</tt> parser can be abused by inserting additional nodes in the XML while still matching the schema, which will lead to excessive memory consumption by the parser and could potentially result in a denial of service.\n</p><p>\nAlso note that this is a simple example. It is possible to insert an entire new record, among other issues. To fix the example above, we can escape the markup delimiters to prevent the user input from being interpreted, replacing &amp; with &amp;, &lt; with &lt;, and so on, as described in the Countermeasures section. This will prevent the user data from being interpreted in this case. In general, though, we don't know exactly what the input might look like, so the best plan is to validate against a whitelist of acceptable characters and do type checking as much as possible. Where type checking is not possible, consider using <tt>CDATA</tt> to enforce that the string be treated strictly as data. For example:\n</p><pre>$evil_input = \"Gandalf@MiddleEarth.com&lt;/email&gt;   \n&lt;uniqueid&gt;0&lt;/uniqueid&gt;\n&lt;name&gt;Gandalf&lt;/name&gt;\n&lt;email&gt;Gandalf@MiddleEarth.com\";$data = \"&lt;!--[CDATA[\" + $evil_input + \"]]--&gt;\";\n</pre><p>\nAfter we insert <tt>$data</tt> into the <tt>email</tt> field above, the result will be the following acceptable XML:\n</p>\n<pre>&lt;userrecord&gt;\n  \n&lt;uniqueid&gt;5&lt;/uniqueid&gt;  \n&lt;name&gt;Gandalf&lt;/name&gt;  \n&lt;email&gt;&lt;!--[CDATA[Gandalf@MiddleEarth.com&lt;/Email--&gt;&lt;uniqueid&gt;0&lt;/uniqueid&gt;            \n&lt;name&gt;Gandalf&lt;/name&gt;\n&lt;email&gt;Gandalf@MiddleEarth.com]]&amp;gt;&lt;/email&gt;  \n&lt;address&gt;One Middle Earth Way, ME&lt;/address&gt;  \n&lt;zipcode&gt;10000&lt;/zipcode&gt;  \n&lt;phonenumber&gt;123-456-7890&lt;/phonenumber&gt;\n&lt;/email&gt;\n\n&lt;/userrecord&gt;\n</pre><p>\n<tt>CDATA</tt> is very useful when used correctly but it has the same generic problem as we had before. An attacker can create a malicious string that uses <tt>\"]]&amp;gt;\"</tt> to end the\n<tt>CDATA</tt> and insert malicious XML. Therefore, wherever we use <tt>CDATA</tt> we must also remove or escape <tt>]]&amp;gt;</tt> from the input string—at a certain point, it's easier to simply give up and encode everything by whitelist.\n</p><h1>Additional Resources</h1><ul><li>For more information on the XML Processing Model, see <a href=\"http://www.w3.org/XML/Processing/\">http://www.w3.org/XML/Processing/</a></li>\n<li>For more information on Managing XML Datasets for Security, see: <a href=\"http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html\">http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html</a></li>\n<li>For more information on Data Validation, see: <a href=\"http://www.owasp.org/index.php/Data_Validation\">http://www.owasp.org/index.php/Data_Validation</a></li>\n<li>For more information on Configuring SAX Parsers for Security, see: <a href=\"http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html\">http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html</a></li>\n<li>For more information on XML CDATA, see: <a href=\"http://www.w3schools.com/xml/xml_cdata.asp\">http://www.w3schools.com/xml/xml_cdata.asp</a></li>\n</ul><h1>Related Items</h1><ul><li><a href=\"1508d763-03f1-4b43-bf8e-ad7cf8edebd7\">Attack: Xpath-XQuery Attack</a></li>\n<li><a href=\"b1757bda-0a0d-48e7-b101-3c4088e41878\">Attack: SQL Injection Attack</a></li>\n<li><a href=\"8482159c-5ec2-4b89-9c65-9af765030ff5\">Attack: Information Disclosure Attack</a></li>\n<li><a href=\"9d60faca-687b-4c69-91ba-f5712af0fd02\">Attack: Server-Side Code Injection Attack</a></li>\n<li><a href=\"e4a899ec-9301-4751-ae07-69a265336d8b\">Attack: AJAX Injection Attack</a></li>\n<li><a href=\"61f0d74e-d9b6-4e27-9e12-da65baff83fd\">Attack: LDAP Injection Attack</a></li>\n<li><a href=\"1408d3c3-7fc1-4ff0-910e-cdf0e191b669\">Attack: Client-side Validation Attack</a></li>\n</ul>   "
}