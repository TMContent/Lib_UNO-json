{
  "id": "1508d763-03f1-4b43-bf8e-ad7cf8edebd7",
  "checksum": "9271cdc26f4d66f66da7532618866e21e68a76cd",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "any": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p"
    ],
    "manipulate": [
      "p",
      "p",
      "p"
    ],
    "xml": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "documents": [
      "p"
    ],
    "through": [
      "p"
    ],
    "xpath/xquery": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "description": [
      "h1"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "attack": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "title"
    ],
    "exploits": [
      "p"
    ],
    "missing": [
      "p"
    ],
    "or": [
      "p",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "poor": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "validation": [
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "run": [
      "p",
      "p"
    ],
    "arbitrary": [
      "p",
      "p"
    ],
    "commands": [
      "p",
      "ul",
      "li"
    ],
    "in": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "databases": [
      "p",
      "ul",
      "li"
    ],
    "this": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "works": [
      "p",
      "p"
    ],
    "much": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "same": [
      "p"
    ],
    "way": [
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "injection": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "but": [
      "p",
      "ul",
      "li"
    ],
    "with": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "target": [
      "p",
      "p"
    ],
    "instead": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "occur": [
      "p"
    ],
    "when": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "unvalidated": [
      "p"
    ],
    "user": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "construct": [
      "p",
      "p"
    ],
    "statement": [
      "p",
      "p",
      "p",
      "p"
    ],
    "access": [
      "p",
      "p"
    ],
    "tables": [
      "p"
    ],
    "using": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "execute": [
      "p"
    ],
    "statements": [
      "p",
      "ul",
      "li"
    ],
    "on": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "database": [
      "p",
      "li"
    ],
    "is": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "often": [
      "p"
    ],
    "more": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "damaging": [
      "p"
    ],
    "than": [
      "p"
    ],
    "permissions": [
      "p"
    ],
    "are": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "not": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "enforced": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "attackerâ€™s": [
      "p"
    ],
    "query": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "every": [
      "p"
    ],
    "part": [
      "p",
      "ul",
      "li"
    ],
    "document": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "it": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "retrieve": [
      "p"
    ],
    "destroy": [
      "p"
    ],
    "data": [
      "p",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "stored": [
      "p",
      "ul",
      "li"
    ],
    "impact": [
      "h1"
    ],
    "confidentiality": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "since": [
      "ul",
      "li"
    ],
    "generally": [
      "ul",
      "li"
    ],
    "holds": [
      "ul",
      "li"
    ],
    "sensitive": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "loss": [
      "ul",
      "li"
    ],
    "frequent": [
      "ul",
      "li"
    ],
    "problem\nintegrity:": [
      "ul"
    ],
    "may": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li"
    ],
    "be": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "able": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "only": [
      "ul",
      "li"
    ],
    "read": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a"
    ],
    "also": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "change": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "even": [
      "ul",
      "li",
      "p"
    ],
    "delete": [
      "ul",
      "li"
    ],
    "information\nauthentication:": [
      "ul"
    ],
    "if": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "poorly": [
      "ul",
      "li"
    ],
    "formed": [
      "ul",
      "li"
    ],
    "used": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "check": [
      "ul",
      "li"
    ],
    "names": [
      "ul",
      "li"
    ],
    "passwords": [
      "ul",
      "li"
    ],
    "connect": [
      "ul",
      "li"
    ],
    "system": [
      "ul",
      "li"
    ],
    "another": [
      "ul",
      "li",
      "p"
    ],
    "no": [
      "ul",
      "li",
      "p"
    ],
    "previous": [
      "ul",
      "li"
    ],
    "knowledge": [
      "ul",
      "li"
    ],
    "password\nauthorization:": [
      "ul"
    ],
    "authorization": [
      "ul",
      "li",
      "li"
    ],
    "held": [
      "ul",
      "li"
    ],
    "problem": [
      "li"
    ],
    "integrity": [
      "li"
    ],
    "authentication": [
      "li"
    ],
    "password": [
      "li",
      "pre",
      "p",
      "p"
    ],
    "vulnerabilities": [
      "h1"
    ],
    "weak": [
      "ul",
      "li"
    ],
    "validation\ngenerating": [
      "ul"
    ],
    "xpath": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "tt",
      "p",
      "tt",
      "p",
      "tt",
      "p",
      "tt",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "expressions": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "by": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "dynamically": [
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "concatenating": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "strings": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "user-supplied": [
      "ul",
      "li"
    ],
    "data\nfailure": [
      "ul"
    ],
    "escape": [
      "ul",
      "li"
    ],
    "single": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "quotes": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "double": [
      "ul",
      "li"
    ],
    "other": [
      "ul",
      "li"
    ],
    "potentially": [
      "ul",
      "li"
    ],
    "dangerous": [
      "ul",
      "li"
    ],
    "characters": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "generating": [
      "li"
    ],
    "failure": [
      "li"
    ],
    "countermeasures": [
      "h1"
    ],
    "validate": [
      "ul",
      "li"
    ],
    "use": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "vigorous": [
      "ul",
      "li"
    ],
    "whitelist": [
      "ul",
      "li"
    ],
    "style": [
      "ul",
      "li"
    ],
    "xquery": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "command": [
      "ul",
      "li",
      "p"
    ],
    "will": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "help": [
      "ul",
      "li"
    ],
    "prevent": [
      "ul",
      "li"
    ],
    "meta-characters": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li",
      "p"
    ],
    "being": [
      "ul",
      "li",
      "p"
    ],
    "added": [
      "ul",
      "li"
    ],
    "your": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "set": [
      "ul",
      "li"
    ],
    "which": [
      "ul",
      "li",
      "p"
    ],
    "again\nuse": [
      "ul"
    ],
    "parameterized": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "precompiled": [
      "ul",
      "li",
      "p"
    ],
    "accept": [
      "ul",
      "li"
    ],
    "have": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "special": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "meaning": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "like": [
      "ul",
      "li",
      "p"
    ],
    "quote": [
      "ul",
      "li"
    ],
    "without": [
      "ul",
      "li",
      "p"
    ],
    "problems": [
      "ul",
      "li"
    ],
    "because": [
      "ul",
      "li"
    ],
    "they": [
      "ul",
      "li"
    ],
    "strongly": [
      "ul",
      "li"
    ],
    "typed\nuse": [
      "ul"
    ],
    "escaping": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "routines": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "you": [
      "ul",
      "li",
      "p"
    ],
    "cannot": [
      "ul",
      "li"
    ],
    "parameters": [
      "ul",
      "li",
      "p"
    ],
    "must": [
      "ul",
      "li"
    ],
    "generate": [
      "ul",
      "li"
    ],
    "handle": [
      "ul",
      "li"
    ],
    "database\ndo": [
      "ul"
    ],
    "echo": [
      "ul",
      "li"
    ],
    "errors": [
      "ul",
      "li"
    ],
    "catch": [
      "ul",
      "li"
    ],
    "exceptions": [
      "ul",
      "li"
    ],
    "server": [
      "ul",
      "li"
    ],
    "return": [
      "ul",
      "li",
      "p"
    ],
    "generic": [
      "ul",
      "li"
    ],
    "error": [
      "ul",
      "li"
    ],
    "messages": [
      "ul",
      "li"
    ],
    "client": [
      "ul",
      "li"
    ],
    "again": [
      "li"
    ],
    "typed": [
      "li"
    ],
    "do": [
      "li"
    ],
    "example": [
      "h1",
      "p",
      "p"
    ],
    "consider": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p",
      "p"
    ],
    "file": [
      "p"
    ],
    "log": [
      "p"
    ],
    "users": [
      "p",
      "p",
      "p"
    ],
    "into": [
      "p"
    ],
    "?xml": [
      "pre"
    ],
    "version=\"10\"": [
      "pre"
    ],
    "encoding=\"iso-8859-1\"?": [
      "pre"
    ],
    "users>": [
      "pre"
    ],
    "user>": [
      "pre",
      "pre",
      "pre"
    ],
    "username>admin</username>": [
      "pre"
    ],
    "password>8af2&</password>": [
      "pre"
    ],
    "account>admin</account>": [
      "pre"
    ],
    "/user>": [
      "pre",
      "pre",
      "pre"
    ],
    "username>user1</username>": [
      "pre"
    ],
    "password>password</password>": [
      "pre"
    ],
    "account>guest</account>": [
      "pre",
      "pre"
    ],
    "username>user2</username>": [
      "pre"
    ],
    "password>1234</password>": [
      "pre"
    ],
    "/users>": [
      "pre"
    ],
    "developer": [
      "p"
    ],
    "could": [
      "p",
      "p",
      "p"
    ],
    "all": [
      "p"
    ],
    "username": [
      "p",
      "pre"
    ],
    "â€˜user1â€™": [
      "pre"
    ],
    "â€˜passwordâ€™string//user[username/text()='user1'": [
      "pre"
    ],
    "password/text)='password']/account/text())": [
      "pre"
    ],
    "however": [
      "p"
    ],
    "proper": [
      "p"
    ],
    "easily": [
      "p"
    ],
    "logic": [
      "p"
    ],
    "output": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "string": [
      "p",
      "p"
    ],
    "above": [
      "p"
    ],
    "user1password": [
      "pre"
    ],
    "'": [
      "pre"
    ],
    "'1'": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre"
    ],
    "'1": [
      "pre"
    ],
    "look": [
      "p"
    ],
    "string//user[username/text()='user1'": [
      "pre"
    ],
    "password/text)=''": [
      "pre"
    ],
    "'1'/account/text())": [
      "pre"
    ],
    "portion": [
      "p"
    ],
    "always": [
      "p"
    ],
    "resolve": [
      "p"
    ],
    "true": [
      "p"
    ],
    "means": [
      "p"
    ],
    "authenticate": [
      "p"
    ],
    "user1": [
      "p",
      "tt"
    ],
    "though": [
      "p"
    ],
    "was": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "good": [
      "p"
    ],
    "fix": [
      "p"
    ],
    "idea": [
      "p"
    ],
    "here": [
      "p"
    ],
    "create": [
      "p"
    ],
    "gets": [
      "p"
    ],
    "values": [
      "p"
    ],
    "creating": [
      "p"
    ],
    "expression": [
      "p"
    ],
    "concatenation": [
      "p"
    ],
    "at": [
      "p"
    ],
    "time": [
      "p"
    ],
    "let": [
      "p"
    ],
    "$username": [
      "p",
      "tt"
    ],
    "$password": [
      "p",
      "tt"
    ],
    "variables": [
      "p"
    ],
    "hold": [
      "p"
    ],
    "then": [
      "p"
    ],
    "\"//useruser[username/text()=$username": [
      "pre"
    ],
    "password/text)=$password]\"": [
      "pre"
    ],
    "net,": [
      "p",
      "ul",
      "li"
    ],
    "see": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "additional": [
      "p",
      "h1"
    ],
    "resources": [
      "p",
      "h1"
    ],
    "below": [
      "p"
    ],
    "for": [
      "p",
      "ul",
      "li",
      "li",
      "li"
    ],
    "how": [
      "p"
    ],
    "mitigating": [
      "ul",
      "li"
    ],
    "attacks": [
      "ul",
      "li"
    ],
    "http//www.tkachenko.com/blog/archives/000385.html\nfor": [
      "ul"
    ],
    "http//www.owasp.org/index.php/xml_injection\nfor": [
      "ul"
    ],
    "http//palisade.plynt.com/issues/2005jul/xpath-injection/index.php": [
      "ul",
      "li",
      "a"
    ],
    "http//www.tkachenko.com/blog/archives/000385.html": [
      "li",
      "a"
    ],
    "http//www.owasp.org/index.php/xml_injection": [
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "attackattack:": [
      "ul",
      "ul",
      "ul",
      "ul"
    ],
    "disclosure": [
      "ul",
      "li",
      "a"
    ],
    "server-side": [
      "ul",
      "li",
      "a"
    ],
    "code": [
      "ul",
      "li",
      "a"
    ],
    "ldap": [
      "ul",
      "li",
      "a"
    ],
    "xpath-xquery": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Description",
      "Impact",
      "Vulnerabilities",
      "Countermeasures",
      "Example",
      "Additional Resources",
      "Related Items"
    ],
    "p": [
      "Any application that can manipulate XML documents through Xpath/XQuery.",
      "An Xpath/XQuery attack exploits missing or poor input validation to run arbitrary commands in XML databases. This attack works in much the same way as a SQL injection attack, but with an XML target instead of a SQL target. This attack can occur when an application uses unvalidated user input to construct an Xpath/XQuery statement to access XML tables. Using the Xpath/XQuery attack the attacker can execute arbitrary Xpath/XQuery statements on an XML database. This attack is often more damaging than a SQL injection attack, as permissions are not enforced and the attackerâ€™s query can access every part of the XML document. With an Xpath/XQuery attack it is possible to retrieve, manipulate, and destroy any data stored in the XML document.",
      "Consider the following XML file, being used by an application to log users into the application:",
      "A developer could use the following Xpath command to return all the users with the username:",
      "However, without proper input validation, the attacker could easily input a logic statement to manipulate the output of the query. An attacker could provide the following string to the Xpath statement above.",
      "This will change the Xpath statement to look like this:",
      "The password portion of the query will always resolve to true, which means that the application will authenticate the attacker as user1 even though no password was provided.",
      "A good way to fix this example is to use a parameterized query. The idea here is to create a precompiled query that gets values from parameters instead of dynamically creating an XPath expression by concatenation at run time. Let $username and $password be string variables that hold the users input. Then construct a query in the following way:",
      "If you are using .NET, see the Additional Resources below for another example of how this works."
    ],
    "ul": [
      "Confidentiality: Since XML generally holds sensitive data, loss of confidentiality is a frequent problem.\nIntegrity: The attacker may be able to not only read sensitive information, but also to change or even delete this information.\nAuthentication: If poorly formed XPath/XQuery commands are used to check user names and passwords, the attacker may be able to connect to a system as another user with no previous knowledge of the password.\nAuthorization: If authorization information is held in an XML document, the attacker may be able to change this information.",
      "Weak input validation.\nGenerating XPath expressions by dynamically concatenating strings with user-supplied data.\nFailure to escape single quotes, double quotes, and other potentially dangerous characters.",
      "Validate input: Use vigorous whitelist style validation on any user input that may be used as part of an XQuery command. This will also help prevent meta-characters from being added to your stored data set which will be used again.\nUse parameterized and precompiled XPath expressions in your XQuery instead of concatenating strings with user input: Parameterized Xpath statements will accept characters that have special meaning to Xpath (like single quote) without problems because they are strongly typed.\nUse escaping routines. If you cannot use parameters and must generate XPath expressions dynamically, use escaping routines to handle special characters that have meaning to the database.\nDo not echo XQuery errors. Catch any exceptions on the server and return generic error messages to the client.",
      "For more information on Mitigating XPath Injection Attacks in .NET, see: http://www.tkachenko.com/blog/archives/000385.html\nFor more information on XPATH Injection, see: http://www.owasp.org/index.php/XML_Injection\nFor more information on XPath injection in XML databases, see: http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php",
      "Attack: XML Injection Attack\nAttack: SQL Injection Attack\nAttack: Information Disclosure Attack\nAttack: Server-Side Code Injection Attack\nAttack: LDAP Injection Attack"
    ],
    "li": [
      "Confidentiality: Since XML generally holds sensitive data, loss of confidentiality is a frequent problem.",
      "Integrity: The attacker may be able to not only read sensitive information, but also to change or even delete this information.",
      "Authentication: If poorly formed XPath/XQuery commands are used to check user names and passwords, the attacker may be able to connect to a system as another user with no previous knowledge of the password.",
      "Authorization: If authorization information is held in an XML document, the attacker may be able to change this information.",
      "Weak input validation.",
      "Generating XPath expressions by dynamically concatenating strings with user-supplied data.",
      "Failure to escape single quotes, double quotes, and other potentially dangerous characters.",
      "Validate input: Use vigorous whitelist style validation on any user input that may be used as part of an XQuery command. This will also help prevent meta-characters from being added to your stored data set which will be used again.",
      "Use parameterized and precompiled XPath expressions in your XQuery instead of concatenating strings with user input: Parameterized Xpath statements will accept characters that have special meaning to Xpath (like single quote) without problems because they are strongly typed.",
      "Use escaping routines. If you cannot use parameters and must generate XPath expressions dynamically, use escaping routines to handle special characters that have meaning to the database.",
      "Do not echo XQuery errors. Catch any exceptions on the server and return generic error messages to the client.",
      "For more information on Mitigating XPath Injection Attacks in .NET, see: http://www.tkachenko.com/blog/archives/000385.html",
      "For more information on XPATH Injection, see: http://www.owasp.org/index.php/XML_Injection",
      "For more information on XPath injection in XML databases, see: http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php",
      "Attack: XML Injection Attack",
      "Attack: SQL Injection Attack",
      "Attack: Information Disclosure Attack",
      "Attack: Server-Side Code Injection Attack",
      "Attack: LDAP Injection Attack"
    ],
    "pre": [
      "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> \n<users>    \n\t<user>       \n\t\t<username>admin</username>       \n\t\t<password>8af2&</password>       \n\t\t<account>admin</account>    \n\t</user>    \n\n\t<user>       \n\t\t<username>user1</username>       \n\t\t<password>password</password>       \n\t\t<account>guest</account>    \n\t</user>    \n\n\t<user>       \n\t\t<username>user2</username>       \n\t\t<password>1234</password>       \n\t\t<account>guest</account>    \n\t</user> \n</users>",
      "â€˜user1â€™ and password â€˜passwordâ€™string(//user[username/text()='user1'        \nand password/text()='password']/account/text())",
      "Username: user1Password: ' or '1' = '1",
      "string(//user[username/text()='user1' and password/text()=''        \nor '1' = '1']/account/text())",
      "\"//user[user[username/text()=$username and password/text()=$password]\""
    ],
    "tt": [
      "Xpath",
      "Xpath",
      "Xpath",
      "user1",
      "XPath",
      "$username",
      "$password"
    ],
    "a": [
      "http://www.tkachenko.com/blog/archives/000385.html",
      "http://www.owasp.org/index.php/XML_Injection",
      "http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php",
      "Attack: XML Injection Attack",
      "Attack: SQL Injection Attack",
      "Attack: Information Disclosure Attack",
      "Attack: Server-Side Code Injection Attack",
      "Attack: LDAP Injection Attack"
    ]
  },
  "links": [
    {
      "href": "http://www.tkachenko.com/blog/archives/000385.html",
      "text": "http://www.tkachenko.com/blog/archives/000385.html"
    },
    {
      "href": "http://www.owasp.org/index.php/XML_Injection",
      "text": "http://www.owasp.org/index.php/XML_Injection"
    },
    {
      "href": "http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php",
      "text": "http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php"
    },
    {
      "href": "ae392dbb-fdb4-443f-9d17-78240b4acc95",
      "text": "Attack: XML Injection Attack"
    },
    {
      "href": "b1757bda-0a0d-48e7-b101-3c4088e41878",
      "text": "Attack: SQL Injection Attack"
    },
    {
      "href": "8482159c-5ec2-4b89-9c65-9af765030ff5",
      "text": "Attack: Information Disclosure Attack"
    },
    {
      "href": "9d60faca-687b-4c69-91ba-f5712af0fd02",
      "text": "Attack: Server-Side Code Injection Attack"
    },
    {
      "href": "61f0d74e-d9b6-4e27-9e12-da65baff83fd",
      "text": "Attack: LDAP Injection Attack"
    }
  ],
  "html": "<h1>Applies To</h1><p>Any application that can manipulate XML documents through Xpath/XQuery.\n</p><h1>Description</h1><p>An Xpath/XQuery attack exploits missing or poor input validation to run arbitrary commands in XML databases. This attack works in much the same way as a SQL injection attack, but with an XML target instead of a SQL target. This attack can occur when an application uses unvalidated user input to construct an Xpath/XQuery statement to access XML tables. Using the Xpath/XQuery attack the attacker can execute arbitrary Xpath/XQuery statements on an XML database. This attack is often more damaging than a SQL injection attack, as permissions are not enforced and the attackerâ€™s query can access every part of the XML document. With an Xpath/XQuery attack it is possible to retrieve, manipulate, and destroy any data stored in the XML document.\n</p><h1>Impact</h1><ul><li>Confidentiality: Since XML generally holds sensitive data, loss of confidentiality is a frequent problem.</li>\n<li>Integrity: The attacker may be able to not only read sensitive information, but also to change or even delete this information.</li>\n<li>Authentication: If poorly formed XPath/XQuery commands are used to check user names and passwords, the attacker may be able to connect to a system as another user with no previous knowledge of the password.</li>\n<li>Authorization: If authorization information is held in an XML document, the attacker may be able to change this information.</li>\n</ul>    \n<h1>Vulnerabilities</h1><ul><li>Weak input validation.</li>\n<li>Generating XPath expressions by dynamically concatenating strings with user-supplied data.</li>\n<li>Failure to escape single quotes, double quotes, and other potentially dangerous characters.</li>\n</ul><h1>Countermeasures</h1><ul><li>Validate input: Use vigorous whitelist style validation on any user input that may be used as part of an XQuery command. This will also help prevent meta-characters from being added to your stored data set which will be used again.</li>\n<li>Use parameterized and precompiled XPath expressions in your XQuery instead of concatenating strings with user input: Parameterized Xpath statements will accept characters that have special meaning to Xpath (like single quote) without problems because they are strongly typed.</li>\n<li>Use escaping routines. If you cannot use parameters and must generate XPath expressions dynamically, use escaping routines to handle special characters that have meaning to the database.</li>\n<li>Do not echo XQuery errors. Catch any exceptions on the server and return generic error messages to the client.</li>\n</ul><h1>Example</h1><p>Consider the following XML file, being used by an application to log users into the application:\n</p><pre>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt; \n&lt;users&gt;    \n\t&lt;user&gt;       \n\t\t&lt;username&gt;admin&lt;/username&gt;       \n\t\t&lt;password&gt;8af2&amp;&lt;/password&gt;       \n\t\t&lt;account&gt;admin&lt;/account&gt;    \n\t&lt;/user&gt;    \n\n\t&lt;user&gt;       \n\t\t&lt;username&gt;user1&lt;/username&gt;       \n\t\t&lt;password&gt;password&lt;/password&gt;       \n\t\t&lt;account&gt;guest&lt;/account&gt;    \n\t&lt;/user&gt;    \n\n\t&lt;user&gt;       \n\t\t&lt;username&gt;user2&lt;/username&gt;       \n\t\t&lt;password&gt;1234&lt;/password&gt;       \n\t\t&lt;account&gt;guest&lt;/account&gt;    \n\t&lt;/user&gt; \n&lt;/users&gt;\n</pre><p>\nA developer could use the following <tt>Xpath</tt> command to return all the users with the username:\n</p><pre>â€˜user1â€™ and password â€˜passwordâ€™string(//user[username/text()='user1'        \nand password/text()='password']/account/text())\n</pre><p>\nHowever, without proper input validation, the attacker could easily input a logic statement to manipulate the output of the query. An attacker could provide the following string to the <tt>Xpath</tt> statement above.\n</p><pre>Username: user1Password: ' or '1' = '1\n</pre><p>\nThis will change the <tt>Xpath</tt> statement to look like this:\n</p><pre>string(//user[username/text()='user1' and password/text()=''        \nor '1' = '1']/account/text())\n</pre><p>\nThe password portion of the query will always resolve to true, which means that the application will authenticate the attacker as <tt>user1</tt> even though no password was provided.\n</p><p>\nA good way to fix this example is to use a parameterized query. The idea here is to create a precompiled query that gets values from parameters instead of dynamically creating an <tt>XPath</tt> expression by concatenation at run time. Let <tt>$username</tt> and <tt>$password</tt> be string variables that hold the users input. Then construct a query in the following way:\n</p><pre>\"//user[user[username/text()=$username and password/text()=$password]\"\n</pre><p>\nIf you are using .NET, see the Additional Resources below for another example of how this works.\n</p><h1>Additional Resources</h1><ul><li>For more information on Mitigating XPath Injection Attacks in .NET, see: <a href=\"http://www.tkachenko.com/blog/archives/000385.html\">http://www.tkachenko.com/blog/archives/000385.html</a></li>\n<li>For more information on XPATH Injection, see: <a href=\"http://www.owasp.org/index.php/XML_Injection\">http://www.owasp.org/index.php/XML_Injection</a></li>\n<li>For more information on XPath injection in XML databases, see: <a href=\"http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php\">http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php</a></li>\n</ul><h1>Related Items</h1><ul><li><a href=\"ae392dbb-fdb4-443f-9d17-78240b4acc95\">Attack: XML Injection Attack</a></li>\n<li><a href=\"b1757bda-0a0d-48e7-b101-3c4088e41878\">Attack: SQL Injection Attack</a></li>\n<li><a href=\"8482159c-5ec2-4b89-9c65-9af765030ff5\">Attack: Information Disclosure Attack</a></li>\n<li><a href=\"9d60faca-687b-4c69-91ba-f5712af0fd02\">Attack: Server-Side Code Injection Attack</a></li>\n<li><a href=\"61f0d74e-d9b6-4e27-9e12-da65baff83fd\">Attack: LDAP Injection Attack</a></li></ul>"
}