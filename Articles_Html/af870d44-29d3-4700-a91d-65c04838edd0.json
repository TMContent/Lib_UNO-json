{
  "id": "af870d44-29d3-4700-a91d-65c04838edd0",
  "checksum": "8478998ecb6beec9b03761e8f44262145947fc91",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "check": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "title"
    ],
    "for": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "errors": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "during": [
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "allocation": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "why": [
      "h1"
    ],
    "if": [
      "p"
    ],
    "fails": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "error": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "is": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "not": [
      "p"
    ],
    "handled": [
      "p",
      "p"
    ],
    "result": [
      "p"
    ],
    "may": [
      "p"
    ],
    "be": [
      "p"
    ],
    "unpredictable": [
      "p"
    ],
    "dangerous": [
      "p"
    ],
    "behavior": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "program": [
      "p"
    ],
    "when": [
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "handle": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "whenever": [
      "p"
    ],
    "allocating": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "assure": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "are": [
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "find": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "li",
      "p"
    ],
    "allocates": [
      "ol",
      "li",
      "p"
    ],
    "objects": [
      "ol",
      "li",
      "p"
    ],
    "search": [
      "ol",
      "li",
      "p"
    ],
    "calloc),": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "malloc),": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "realloc)": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p"
    ],
    "calls": [
      "ol",
      "li",
      "p"
    ],
    "new": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "operator": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "return": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "values": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "null": [
      "ol",
      "li",
      "p"
    ],
    "pointers": [
      "ol",
      "li",
      "p"
    ],
    "they": [
      "ol",
      "li",
      "p"
    ],
    "fail": [
      "ol",
      "li",
      "p"
    ],
    "add": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "checks": [
      "ol",
      "li",
      "p"
    ],
    "these": [
      "ol",
      "li",
      "p"
    ],
    "functions": [
      "ol",
      "li",
      "p"
    ],
    "handles": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "conditions": [
      "ol",
      "li",
      "p"
    ],
    "appropriately": [
      "ol",
      "li",
      "p"
    ],
    "exceptions": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "throws": [
      "ol",
      "li",
      "p"
    ],
    "a": [
      "ol",
      "li",
      "p"
    ],
    "std:bad_alloc": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "exception": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p"
    ],
    "used": [
      "ol",
      "li",
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "checking": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "https//www.securecoding.cert.org/confluence/display/cplusplus/mem32-cpp.+detect+and+handle+memory+allocation+errors": [
      "ul",
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "centralize": [
      "ul",
      "li",
      "a"
    ],
    "handling": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Additional Resources",
      "Related Items"
    ],
    "ul": [
      "C++",
      "For more information about checking errors during memory allocation, please see https://www.securecoding.cert.org/confluence/display/cplusplus/MEM32-CPP.+Detect+and+handle+memory+allocation+errors",
      "Centralize Error Handling"
    ],
    "li": [
      "C++",
      "Identify memory allocation code. Find all code that allocates memory for objects. Search for calloc(), malloc(), realloc() function calls, and the new operator.",
      "Check return values. Calloc(), malloc(), and realloc() return null pointers when they fail. Add code that checks the return values of these functions and handles error conditions appropriately.",
      "Handle exceptions. The new operator throws a std::bad_alloc exception when it fails. Add code that handles the std::bad_alloc exception when the new operator is used.",
      "For more information about checking errors during memory allocation, please see https://www.securecoding.cert.org/confluence/display/cplusplus/MEM32-CPP.+Detect+and+handle+memory+allocation+errors",
      "Centralize Error Handling"
    ],
    "p": [
      "Check for errors during memory allocation.",
      "If memory allocation fails and the error is not handled, the result may be unpredictable and dangerous behavior of the program.",
      "Check for and handle errors whenever allocating memory.",
      "Perform the following actions to assure that errors during memory allocation are handled:",
      "Identify memory allocation code. Find all code that allocates memory for objects. Search for calloc(), malloc(), realloc() function calls, and the new operator.",
      "Check return values. Calloc(), malloc(), and realloc() return null pointers when they fail. Add code that checks the return values of these functions and handles error conditions appropriately.",
      "Handle exceptions. The new operator throws a std::bad_alloc exception when it fails. Add code that handles the std::bad_alloc exception when the new operator is used."
    ],
    "ol": [
      "Identify memory allocation code. Find all code that allocates memory for objects. Search for calloc(), malloc(), realloc() function calls, and the new operator.\r\n      \r\n        \r\n          Check return values. Calloc(), malloc(), and realloc() return null pointers when they fail. Add code that checks the return values of these functions and handles error conditions appropriately.\r\n        \r\n          \r\n            Handle exceptions. The new operator throws a std::bad_alloc exception when it fails. Add code that handles the std::bad_alloc exception when the new operator is used."
    ],
    "strong": [
      "Identify memory allocation code.",
      "Check return values.",
      "Handle exceptions."
    ],
    "a": [
      "https://www.securecoding.cert.org/confluence/display/cplusplus/MEM32-CPP.+Detect+and+handle+memory+allocation+errors",
      "Centralize Error Handling"
    ]
  },
  "links": [
    {
      "href": "https://www.securecoding.cert.org/confluence/display/cplusplus/MEM32-CPP.+Detect+and+handle+memory+allocation+errors",
      "text": "https://www.securecoding.cert.org/confluence/display/cplusplus/MEM32-CPP.+Detect+and+handle+memory+allocation+errors"
    },
    {
      "href": "/article/e4a3052e-13f2-4062-9a83-49185ff14b0a",
      "text": "Centralize Error Handling"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Check for errors during memory allocation.</p>\r\n  <h1>Why</h1>\r\n  <p>If memory allocation fails and the error is not handled, the result may be unpredictable and dangerous behavior of the program.</p>\r\n  <h1>When</h1>\r\n  <p>Check for and handle errors whenever allocating memory.</p>\r\n  <h1>How</h1>\r\n  <p>Perform the following actions to assure that errors during memory allocation are handled:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify memory allocation code.</strong> Find all code that allocates memory for objects. Search for calloc(), malloc(), realloc() function calls, and the new operator.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Check return values.</strong> Calloc(), malloc(), and realloc() return null pointers when they fail. Add code that checks the return values of these functions and handles error conditions appropriately.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Handle exceptions.</strong> The new operator throws a std::bad_alloc exception when it fails. Add code that handles the std::bad_alloc exception when the new operator is used.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about checking errors during memory allocation, please see <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/MEM32-CPP.&#43;Detect&#43;and&#43;handle&#43;memory&#43;allocation&#43;errors\">https://www.securecoding.cert.org/confluence/display/cplusplus/MEM32-CPP.&#43;Detect&#43;and&#43;handle&#43;memory&#43;allocation&#43;errors</a></li>\r\n  </ul>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/e4a3052e-13f2-4062-9a83-49185ff14b0a\">Centralize Error Handling</a>\r\n    </li>\r\n  </ul>"
}