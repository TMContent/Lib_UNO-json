{
  "id": "1d26fc4a-1aba-40bd-91ed-1a7f1cbf5a8a",
  "checksum": "665cc75c8eded89c0ebd6effd24fe320e8cb1623",
  "words": {
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "aspnet": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "regex": [
      "p"
    ],
    "class": [
      "p"
    ],
    "and/or": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p"
    ],
    "own": [
      "p",
      "p"
    ],
    "custom": [
      "p"
    ],
    "validation": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "login": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "information": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "validating": [
      "p"
    ],
    "user-provided": [
      "p"
    ],
    "can": [
      "p"
    ],
    "help": [
      "p"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "cross": [
      "p"
    ],
    "site": [
      "p"
    ],
    "scripting": [
      "p",
      "p"
    ],
    "attacks": [
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p"
    ],
    "injections": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "other": [
      "p"
    ],
    "potential": [
      "p"
    ],
    "problems": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "on": [
      "p"
    ],
    "system": [
      "p"
    ],
    "architecture": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "always": [
      "p"
    ],
    "be": [
      "p"
    ],
    "validated": [
      "p"
    ],
    "before": [
      "p",
      "p",
      "p"
    ],
    "encoded": [
      "p"
    ],
    "display": [
      "p"
    ],
    "but": [
      "p"
    ],
    "is": [
      "p"
    ],
    "especially": [
      "p"
    ],
    "critical": [
      "p"
    ],
    "as": [
      "p",
      "p"
    ],
    "it": [
      "p"
    ],
    "interacts": [
      "p"
    ],
    "with": [
      "p",
      "p"
    ],
    "high-value": [
      "p"
    ],
    "data": [
      "p"
    ],
    "stores": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "applications": [
      "p"
    ],
    "functionality": [
      "p"
    ],
    "submitted": [
      "p"
    ],
    "or": [
      "p"
    ],
    "modifiable": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "including": [
      "p"
    ],
    "names": [
      "p"
    ],
    "passwords": [
      "p"
    ],
    "for": [
      "p",
      "p"
    ],
    "type": [
      "p"
    ],
    "length": [
      "p"
    ],
    "format": [
      "p"
    ],
    "range": [
      "p"
    ],
    "regular": [
      "p"
    ],
    "expressions": [
      "p"
    ],
    "constrain": [
      "p"
    ],
    "at": [
      "p"
    ],
    "server": [
      "p"
    ],
    "if": [
      "p"
    ],
    "you": [
      "p"
    ],
    "are": [
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "using": [
      "p"
    ],
    "sqlmembershipprovider": [
      "p",
      "em"
    ],
    "need": [
      "p"
    ],
    "develop": [
      "p"
    ],
    "queries": [
      "p"
    ],
    "access": [
      "p"
    ],
    "store": [
      "p"
    ],
    "database": [
      "p"
    ],
    "details": [
      "p",
      "p"
    ],
    "dynamically": [
      "p"
    ],
    "construct": [
      "p"
    ],
    "statements": [
      "p"
    ],
    "because": [
      "p"
    ],
    "this": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "susceptible": [
      "p"
    ],
    "injection": [
      "p"
    ],
    "instead": [
      "p"
    ],
    "then": [
      "p"
    ],
    "parameterized": [
      "p"
    ],
    "stored": [
      "p"
    ],
    "procedures": [
      "p"
    ],
    "also": [
      "p"
    ],
    "encode": [
      "p"
    ],
    "echoing": [
      "p"
    ],
    "them": [
      "p"
    ],
    "back": [
      "p"
    ],
    "user's": [
      "p"
    ],
    "browser": [
      "p"
    ],
    "cross-site": [
      "p"
    ],
    "example": [
      "p"
    ],
    "microsoft": [
      "p",
      "p"
    ],
    "antixss": [
      "p"
    ],
    "library": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "here": [
      "p"
    ],
    "responsewrite(": [
      "pre"
    ],
    "microsoftsecurity.application.antixss.htmlencode(": [
      "pre"
    ],
    "\"welcome": [
      "pre"
    ],
    "\"": [
      "pre"
    ],
    "+": [
      "pre"
    ],
    "requestform[\"username\"]));": [
      "pre"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "ul": [
      "ASP.NET 4.0"
    ],
    "li": [
      "ASP.NET 4.0"
    ],
    "p": [
      "Use the Regex class and/or your own custom validation code to validate all user login information.",
      "Validating user-provided login information can help to prevent cross site scripting attacks, SQL injections, and other potential problems, depending on system architecture.  All input should always be validated before use and encoded before display, but login information is especially critical as it interacts with high-value data stores.",
      "All applications with login functionality should validate all user submitted or user modifiable login information.",
      "Validate user login information including user names and passwords for type, length, format, and range.  Use regular expressions to constrain the input at the server.  If you are not using the SqlMembershipProvider and need to develop your own queries to access your user store database, do not use login details to dynamically construct SQL statements because this makes your code susceptible to SQL injection.  Instead, validate the input and then use parameterized stored procedures.",
      "Also encode login details before echoing them back to the user's browser to prevent cross-site scripting. For example, use the Microsoft AntiXSS library, as shown here.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "em": [
      "SqlMembershipProvider"
    ],
    "pre": [
      "Response.Write(  Microsoft.Security.Application.AntiXSS.HtmlEncode(  \"Welcome \" + Request.Form[\"username\"]));"
    ],
    "br": [
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use the Regex class and/or your own custom validation code to validate all user login information.</p>\r\n  <h1>Why</h1>\r\n  <p>Validating user-provided login information can help to prevent cross site scripting attacks, SQL injections, and other potential problems, depending on system architecture.&nbsp; All input should always be validated before use and encoded before display, but login information is especially critical as it interacts with high-value data stores.</p>\r\n  <h1>When</h1>\r\n  <p>All applications with login functionality should validate all user submitted or user modifiable login information.</p>\r\n  <h1>How</h1>\r\n  <p>Validate user login information including user names and passwords for type, length, format, and range.&nbsp; Use regular expressions to constrain the input at the server.&nbsp; If you are not using the <em>SqlMembershipProvider</em> and need to develop your own queries to access your user store database, do not use login details to dynamically construct SQL statements because this makes your code susceptible to SQL injection.&nbsp; Instead, validate the input and then use parameterized stored procedures.</p>\r\n  <p>Also encode login details before echoing them back to the user's browser to prevent cross-site scripting. For example, use the Microsoft AntiXSS library, as shown here.</p>\r\n  <pre>Response.Write(<br />  Microsoft.Security.Application.AntiXSS.HtmlEncode(<br />  \"Welcome \" + Request.Form[\"username\"]));</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}