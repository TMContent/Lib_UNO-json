{
  "id": "00000000-0000-0000-0000-0000002f39d7",
  "checksum": "59666701f95946b6bd8d1d0d7e06192cf437620f",
  "words": {
    "1035": [
      "ol",
      "li"
    ],
    "6455": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "html5": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "javascript": [
      "ul",
      "li",
      "ol",
      "li"
    ],
    "what": [
      "h2"
    ],
    "check": [
      "h2",
      "p",
      "h2",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "for": [
      "h2",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong"
    ],
    "verify": [
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "origin": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "attribute": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "on": [
      "p",
      "p",
      "p"
    ],
    "websocket": [
      "p",
      "ol",
      "li",
      "h2",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h2",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "messages": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "checked": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "before": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "li",
      "strong"
    ],
    "processed": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "why": [
      "h2"
    ],
    "if": [
      "p",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "you": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "do": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a"
    ],
    "not": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "messageevent": [
      "p"
    ],
    "confirm": [
      "p"
    ],
    "it": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li"
    ],
    "coming": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "from": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong"
    ],
    "safe": [
      "p"
    ],
    "domain": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "application": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "may": [
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li"
    ],
    "open": [
      "p"
    ],
    "attacks": [
      "p",
      "p"
    ],
    "these": [
      "p",
      "ol",
      "li"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "form": [
      "p"
    ],
    "sent": [
      "p"
    ],
    "other": [
      "p"
    ],
    "servers": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "harmful": [
      "p"
    ],
    "how": [
      "h2",
      "h2"
    ],
    "find": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "processes": [
      "ol",
      "li",
      "strong"
    ],
    "websockets": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "search": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "functions": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "handle": [
      "ol",
      "li"
    ],
    "received": [
      "ol",
      "li"
    ],
    "onmessage": [
      "ol",
      "li",
      "em",
      "ol",
      "li",
      "strong"
    ],
    "event": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "strong"
    ],
    "handlers": [
      "ol",
      "li"
    ],
    "create": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "spreadsheet": [
      "ol",
      "li"
    ],
    "list": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "all": [
      "ol",
      "li"
    ],
    "receives": [
      "ol",
      "li"
    ],
    "identify": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "allowed": [
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "domains": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "which": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "message": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "will": [
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li"
    ],
    "accepted": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "always": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "use": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "white": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "approach": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "gather": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "valid": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "as": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "strict": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "possible": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "include": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "only": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "want": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "process": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "validated": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "handled": [
      "ol",
      "li",
      "strong"
    ],
    "examine": [
      "ol",
      "li"
    ],
    "each": [
      "ol",
      "li"
    ],
    "piece": [
      "ol",
      "li"
    ],
    "handles": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "make": [
      "ol",
      "li"
    ],
    "sure": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "data": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "using": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "white-list": [
      "ol",
      "li"
    ],
    "so": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "explicitly": [
      "ol",
      "li"
    ],
    "authorized": [
      "ol",
      "li"
    ],
    "fix": [
      "h2"
    ],
    "technique": [
      "p"
    ],
    "checking": [
      "p"
    ],
    "depends": [
      "p"
    ],
    "whether": [
      "p"
    ],
    "would": [
      "p"
    ],
    "like": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "specific": [
      "p",
      "p",
      "ol",
      "li",
      "strong"
    ],
    "server": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "strong"
    ],
    "or": [
      "p",
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "expected": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "against": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "name": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "===": [
      "ol",
      "li"
    ],
    "operator": [
      "ol",
      "li"
    ],
    "equality": [
      "ol",
      "li"
    ],
    "between": [
      "ol",
      "li"
    ],
    "value": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "one": [
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li"
    ],
    "more": [
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li"
    ],
    "names).": [
      "ol",
      "li",
      "strong"
    ],
    "regular": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "expression": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "strong"
    ],
    "provide": [
      "ol",
      "li"
    ],
    "wildcard-type": [
      "ol",
      "li"
    ],
    "functionality": [
      "ol",
      "li"
    ],
    "continue": [
      "ol",
      "li"
    ],
    "with": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "steps": [
      "ol",
      "li"
    ],
    "3-9": [
      "ol",
      "li"
    ],
    "below": [
      "ol",
      "li"
    ],
    "function": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "validating": [
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "centralize": [
      "ol",
      "li",
      "strong"
    ],
    "logic": [
      "ol",
      "li",
      "strong"
    ],
    "creating": [
      "ol",
      "li"
    ],
    "also": [
      "ol",
      "li"
    ],
    "allows": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "test": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "easily": [
      "ol",
      "li"
    ],
    "length": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "property": [
      "ol",
      "li"
    ],
    "ensure": [
      "ol",
      "li"
    ],
    "size": [
      "ol",
      "li"
    ],
    "large": [
      "ol",
      "li"
    ],
    "cause": [
      "ol",
      "li"
    ],
    "regex": [
      "ol",
      "li"
    ],
    "dos": [
      "ol",
      "li"
    ],
    "build": [
      "ol",
      "li",
      "strong"
    ],
    "look": [
      "ol",
      "li"
    ],
    "this": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "tests": [
      "ol",
      "li"
    ],
    "host": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "names": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "internet": [
      "ol",
      "li"
    ],
    "engineering": [
      "ol",
      "li"
    ],
    "task": [
      "ol",
      "li"
    ],
    "force": [
      "ol",
      "li"
    ],
    "request": [
      "ol",
      "li"
    ],
    "comments": [
      "ol",
      "li"
    ],
    "^https?\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$": [
      "ol",
      "li",
      "tt"
    ],
    "both": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "http": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "over": [
      "ol",
      "li"
    ],
    "secure": [
      "ol",
      "li"
    ],
    "sockets": [
      "ol",
      "li"
    ],
    "layer": [
      "ol",
      "li"
    ],
    "https).": [
      "ol",
      "li"
    ],
    "lists": [
      "ol",
      "li"
    ],
    "characters": [
      "ol",
      "li"
    ],
    "url": [
      "ol",
      "li"
    ],
    "question": [
      "ol",
      "li"
    ],
    "mark": [
      "ol",
      "li"
    ],
    "?]": [
      "ol",
      "li"
    ],
    "qualifier": [
      "ol",
      "li"
    ],
    "matches": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "previous": [
      "ol",
      "li"
    ],
    "characters)": [
      "ol",
      "li"
    ],
    "once": [
      "ol",
      "li"
    ],
    "at": [
      "ol",
      "li"
    ],
    "most": [
      "ol",
      "li"
    ],
    "[a-z][-a-z0-9]+[a-z0-9]\\.)*": [
      "ol",
      "li"
    ],
    "match": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "http//myserver.example.com": [
      "ol",
      "li",
      "tt"
    ],
    "well": [
      "ol",
      "li"
    ],
    "http//www.mysubdomain.example.com": [
      "ol",
      "li",
      "tt"
    ],
    "inside": [
      "ol",
      "li",
      "strong"
    ],
    "new": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "tt"
    ],
    "object": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "pass": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "regexp": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "constructor": [
      "ol",
      "li"
    ],
    "shown": [
      "ol",
      "li"
    ],
    "here": [
      "ol",
      "li"
    ],
    "var": [
      "ol",
      "li",
      "tt"
    ],
    "re": [
      "ol",
      "li",
      "tt"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "tt",
      "li",
      "tt"
    ],
    "regexp/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);": [
      "ol",
      "li",
      "tt"
    ],
    "test)": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "method": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "can": [
      "ol",
      "li"
    ],
    "used": [
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "return": [
      "ol",
      "li",
      "tt"
    ],
    "patterntest(origin);": [
      "ol",
      "li",
      "tt"
    ],
    "call": [
      "ol",
      "li",
      "strong"
    ],
    "handler": [
      "ol",
      "li",
      "strong"
    ],
    "websocketonmessage": [
      "ol",
      "li",
      "tt"
    ],
    "functionevent)": [
      "ol",
      "li",
      "tt"
    ],
    "..": [
      "ol",
      "li",
      "tt"
    ],
    "thoroughly": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "positive": [
      "ol",
      "li"
    ],
    "negative": [
      "ol",
      "li"
    ],
    "properly": [
      "ol",
      "li"
    ],
    "validation": [
      "ol",
      "li"
    ],
    "guidelines": [
      "h2"
    ],
    "validate": [
      "ul",
      "li",
      "a"
    ],
    "header": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "handshake": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "tls": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "encrypt": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "connections": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "latest": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "rfc": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "standard": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "tunnel": [
      "ul",
      "li",
      "a"
    ],
    "tcp": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "via": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklist": [
      "h2"
    ],
    "items": [
      "h2"
    ],
    "tunneled": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Check For",
      "Why",
      "How To Check",
      "How To Fix",
      "WebSocket Guidelines",
      "WebSocket Checklist Items"
    ],
    "ul": [
      "HTML5 and Javascript",
      "Validate Data Coming from WebSockets\n Check the Origin Header in the WebSocket Handshake\n Use TLS to Encrypt WebSocket Connections\n Check the Origin Attribute of WebSocket Messages\n Use the Latest WebSocket RFC 6455 Standard\n Do Not Tunnel TCP via WebSockets",
      "Data Coming from WebSockets Is Validated\n The Origin Header in WebSocket Handshake is Checked\n TLS is Used to Encrypt WebSocket Connections\n The Origin Attribute of WebSocket Messages Is Checked\n Latest RFC 6455 Standard is Used\n TCP Is Not Tunneled via WebSockets"
    ],
    "li": [
      "HTML5 and Javascript",
      "Find code that processes messages from WebSockets. Search the application code for functions that handle messages received from WebSockets. To find these functions, search for onmessage event handlers. Create a spreadsheet to list all code that receives messages from WebSockets.",
      "Identify the allowed domains from which a message will be accepted. Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.",
      "Verify that the message origin is validated before messages are handled. Examine each piece of code that handles WebSocket messages. Make sure that the event origin is validated before data is processed using a white-list approach, so that only data from the explicitly authorized domains is processed.",
      "If the origin is expected to be a specific server, check it against the server name. Use the JavaScript === operator to verify equality between the expected server name and the value of the origin attribute.",
      "If the origin is expected to be from one or more domains, check it against the domain name(s). Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.",
      "Identify the allowed domains from which a message will be accepted. Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.",
      "Create a function for validating the domains to centralize the logic. Creating a function also allows you to test the code more easily.",
      "Check the length of the domain before validating it. Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS.",
      "Build the regular expression for validating your domains. The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035:  ^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$ . This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression ([a-z][-a-z0-9]+[a-z0-9]\\.)* will match one or more host names, so  http://myserver.example.com  as well as  http://www.mysubdomain.example.com  will match.",
      "Inside the new function, create a regular expression object with your expression. Pass the expression to the RegExp constructor, as shown here:  var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);",
      "Use the test() method of the RegExp object to verify that the origin attribute matches. The test() method can be used like this:  return pattern.test(origin);",
      "Call the function from your onmessage event handler. Pass the value of the origin attribute to your function:  webSocket.onmessage = function(event) ...",
      "Test thoroughly. Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation.",
      "Validate Data Coming from WebSockets",
      "Check the Origin Header in the WebSocket Handshake",
      "Use TLS to Encrypt WebSocket Connections",
      "Check the Origin Attribute of WebSocket Messages",
      "Use the Latest WebSocket RFC 6455 Standard",
      "Do Not Tunnel TCP via WebSockets",
      "Data Coming from WebSockets Is Validated",
      "The Origin Header in WebSocket Handshake is Checked",
      "TLS is Used to Encrypt WebSocket Connections",
      "The Origin Attribute of WebSocket Messages Is Checked",
      "Latest RFC 6455 Standard is Used",
      "TCP Is Not Tunneled via WebSockets"
    ],
    "p": [
      "Verify that the origin attribute on WebSocket messages is checked before the messages are processed.",
      "If you do not check the origin of the MessageEvent to confirm that it is coming from a safe domain, your application may be open to attacks. These attacks may be in the form of messages sent from other servers and may contain messages harmful to your application.",
      "To verify that the origin attribute on messages is checked before the messages are processed:",
      "The technique for checking the origin attribute depends on whether you would like to verify a specific server or a specific domain."
    ],
    "ol": [
      "Find code that processes messages from WebSockets. Search the application code for functions that handle messages received from WebSockets. To find these functions, search for onmessage event handlers. Create a spreadsheet to list all code that receives messages from WebSockets.\n Identify the allowed domains from which a message will be accepted. Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.\n Verify that the message origin is validated before messages are handled. Examine each piece of code that handles WebSocket messages. Make sure that the event origin is validated before data is processed using a white-list approach, so that only data from the explicitly authorized domains is processed.",
      "If the origin is expected to be a specific server, check it against the server name. Use the JavaScript === operator to verify equality between the expected server name and the value of the origin attribute. \n If the origin is expected to be from one or more domains, check it against the domain name(s). Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.\n Identify the allowed domains from which a message will be accepted. Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.\n Create a function for validating the domains to centralize the logic. Creating a function also allows you to test the code more easily.\n Check the length of the domain before validating it. Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS. \n Build the regular expression for validating your domains. The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035:  ^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$ . This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression ([a-z][-a-z0-9]+[a-z0-9]\\.)* will match one or more host names, so  http://myserver.example.com  as well as  http://www.mysubdomain.example.com  will match.\n Inside the new function, create a regular expression object with your expression. Pass the expression to the RegExp constructor, as shown here:  var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/); \n Use the test() method of the RegExp object to verify that the origin attribute matches. The test() method can be used like this:  return pattern.test(origin); \n Call the function from your onmessage event handler. Pass the value of the origin attribute to your function:  webSocket.onmessage = function(event) ... \n Test thoroughly. Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation."
    ],
    "strong": [
      "Find code that processes messages from WebSockets.",
      "Identify the allowed domains from which a message will be accepted",
      "Verify that the message origin is validated before messages are handled.",
      "If the origin is expected to be a specific server, check it against the server name.",
      "If the origin is expected to be from one or more domains, check it against the domain name(s).",
      "Identify the allowed domains from which a message will be accepted.",
      "Create a function for validating the domains to centralize the logic.",
      "Check the length of the domain before validating it.",
      "Build the regular expression for validating your domains.",
      "Inside the new function, create a regular expression object with your expression.",
      "Use the test() method of the RegExp object to verify that the origin attribute matches.",
      "Call the function from your onmessage event handler.",
      "Test thoroughly."
    ],
    "em": [
      "onmessage"
    ],
    "tt": [
      "^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$",
      "http://myserver.example.com",
      "http://www.mysubdomain.example.com",
      "var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);",
      "return pattern.test(origin);",
      "webSocket.onmessage = function(event) ..."
    ],
    "a": [
      "Validate Data Coming from WebSockets",
      "Check the Origin Header in the WebSocket Handshake",
      "Use TLS to Encrypt WebSocket Connections",
      "Check the Origin Attribute of WebSocket Messages",
      "Use the Latest WebSocket RFC 6455 Standard",
      "Do Not Tunnel TCP via WebSockets",
      "Data Coming from WebSockets Is Validated",
      "The Origin Header in WebSocket Handshake is Checked",
      "TLS is Used to Encrypt WebSocket Connections",
      "The Origin Attribute of WebSocket Messages Is Checked",
      "Latest RFC 6455 Standard is Used",
      "TCP Is Not Tunneled via WebSockets"
    ]
  },
  "links": [
    {
      "href": "00000000-0000-0000-0000-000000869806",
      "text": "Validate Data Coming from WebSockets"
    },
    {
      "href": "00000000-0000-0000-0000-00000093dea4",
      "text": "Check the Origin Header in the WebSocket Handshake"
    },
    {
      "href": "00000000-0000-0000-0000-0000005f2e4a",
      "text": "Use TLS to Encrypt WebSocket Connections"
    },
    {
      "href": "00000000-0000-0000-0000-000000736a21",
      "text": "Check the Origin Attribute of WebSocket Messages"
    },
    {
      "href": "00000000-0000-0000-0000-0000005326a8",
      "text": "Use the Latest WebSocket RFC 6455 Standard"
    },
    {
      "href": "00000000-0000-0000-0000-00000085bc2f",
      "text": "Do Not Tunnel TCP via WebSockets"
    },
    {
      "href": "00000000-0000-0000-0000-00000086537e",
      "text": "Data Coming from WebSockets Is Validated"
    },
    {
      "href": "00000000-0000-0000-0000-00000077e316",
      "text": "The Origin Header in WebSocket Handshake is Checked"
    },
    {
      "href": "bd870268-f104-4f6f-ba0d-6628dc34eb2a",
      "text": "TLS is Used to Encrypt WebSocket Connections"
    },
    {
      "href": "00000000-0000-0000-0000-0000002f39d7",
      "text": "The Origin Attribute of WebSocket Messages Is Checked"
    },
    {
      "href": "18d5564d-00a4-4afe-a853-707269df2566",
      "text": "Latest RFC 6455 Standard is Used"
    },
    {
      "href": "00000000-0000-0000-0000-00000091ce5a",
      "text": "TCP Is Not Tunneled via WebSockets"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> HTML5 and Javascript</li>\n</ul><h2>What to Check For</h2><p>Verify that the origin attribute on WebSocket messages is checked before the messages are processed.\n</p><h2>Why</h2><p>If you do not check the origin of the MessageEvent to confirm that it is coming from a safe domain, your application may be open to attacks. These attacks may be in the form of messages sent from other servers and may contain messages harmful to your application.\n</p><h2>How To Check</h2><p>To verify that the origin attribute on messages is checked before the messages are processed:\n</p><ol>\n<li> <strong>Find code that processes messages from WebSockets.</strong> Search the application code for functions that handle messages received from WebSockets. To find these functions, search for <em>onmessage</em> event handlers. Create a spreadsheet to list all code that receives messages from WebSockets.</li>\n<li> <strong>Identify the allowed domains from which a message will be accepted</strong>. Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.</li>\n<li> <strong>Verify that the message origin is validated before messages are handled.</strong> Examine each piece of code that handles WebSocket messages. Make sure that the event origin is validated before data is processed using a white-list approach, so that only data from the explicitly authorized domains is processed.</li>\n</ol><h2>How To Fix</h2><p>The technique for checking the origin attribute depends on whether you would like to verify a specific server or a specific domain. \n</p><ol>\n<li> <strong>If the origin is expected to be a specific server, check it against the server name.</strong> Use the JavaScript === operator to verify equality between the expected server name and the value of the origin attribute. </li>\n<li> <strong>If the origin is expected to be from one or more domains, check it against the domain name(s).</strong> Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.</li>\n<li> <strong>Identify the allowed domains from which a message will be accepted.</strong> Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.</li>\n<li> <strong>Create a function for validating the domains to centralize the logic.</strong> Creating a function also allows you to test the code more easily.</li>\n<li> <strong>Check the length of the domain before validating it.</strong> Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS. </li>\n<li> <strong>Build the regular expression for validating your domains.</strong> The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035: <tt> ^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$ </tt>. This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression ([a-z][-a-z0-9]+[a-z0-9]\\.)* will match one or more host names, so <tt> http://myserver.example.com </tt> as well as <tt> http://www.mysubdomain.example.com </tt> will match.</li>\n<li> <strong>Inside the new function, create a regular expression object with your expression.</strong> Pass the expression to the RegExp constructor, as shown here: <tt> var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/); </tt></li>\n<li> <strong>Use the test() method of the RegExp object to verify that the origin attribute matches.</strong> The test() method can be used like this: <tt> return pattern.test(origin); </tt></li>\n<li> <strong>Call the function from your onmessage event handler.</strong> Pass the value of the origin attribute to your function: <tt> webSocket.onmessage = function(event) ... </tt></li>\n<li> <strong>Test thoroughly.</strong> Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation.</li>\n</ol>\n\n<h2>WebSocket Guidelines</h2><ul><li> <a href=\"00000000-0000-0000-0000-000000869806\">Validate Data Coming from WebSockets</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000093dea4\">Check the Origin Header in the WebSocket Handshake</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000005f2e4a\">Use TLS to Encrypt WebSocket Connections</a></li>\n<li> <a href=\"00000000-0000-0000-0000-000000736a21\">Check the Origin Attribute of WebSocket Messages</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000005326a8\">Use the Latest WebSocket RFC 6455 Standard</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000085bc2f\">Do Not Tunnel TCP via WebSockets</a></li>\n</ul><h2>WebSocket Checklist Items</h2><ul><li> <a href=\"00000000-0000-0000-0000-00000086537e\">Data Coming from WebSockets Is Validated</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000077e316\">The Origin Header in WebSocket Handshake is Checked</a></li>\n<li> <a href=\"bd870268-f104-4f6f-ba0d-6628dc34eb2a\">TLS is Used to Encrypt WebSocket Connections</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000002f39d7\">The Origin Attribute of WebSocket Messages Is Checked</a></li>\n<li> <a href=\"18d5564d-00a4-4afe-a853-707269df2566\">Latest RFC 6455 Standard is Used</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000091ce5a\">TCP Is Not Tunneled via WebSockets</a></li>\n</ul>\n"
}