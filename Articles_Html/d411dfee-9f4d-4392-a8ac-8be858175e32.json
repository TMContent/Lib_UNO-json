{
  "id": "d411dfee-9f4d-4392-a8ac-8be858175e32",
  "checksum": "3134f55bf4a59d264b00454ce6d40faee172c4a4",
  "words": {
    "1": [
      "p"
    ],
    "2": [
      "p",
      "p"
    ],
    "3": [
      "p",
      "p"
    ],
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "aspnet": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre"
    ],
    "this": [
      "p",
      "pre",
      "ul",
      "li",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p"
    ],
    "snippet": [
      "p"
    ],
    "is": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "illustrate": [
      "p"
    ],
    "how": [
      "p",
      "p"
    ],
    "secure": [
      "p"
    ],
    "data": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "stored": [
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "windows": [
      "p"
    ],
    "registry": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "title"
    ],
    "through": [
      "p",
      "pre"
    ],
    "use": [
      "p",
      "p",
      "pre"
    ],
    "access": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "control": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "list": [
      "p"
    ],
    "acl)": [
      "p"
    ],
    "permissions": [
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "title"
    ],
    "by": [
      "p",
      "p",
      "p"
    ],
    "using": [
      "p",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "these": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "user": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre"
    ],
    "can": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "programmatically": [
      "p"
    ],
    "who": [
      "p"
    ],
    "and": [
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "cannot": [
      "p",
      "p"
    ],
    "objectives": [
      "h1"
    ],
    "creating": [
      "ul",
      "li"
    ],
    "an": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "applying": [
      "ul",
      "li"
    ],
    "kep": [
      "ul",
      "li"
    ],
    "security": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "context": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "which": [
      "ul",
      "li"
    ],
    "users": [
      "ul",
      "li",
      "pre",
      "p",
      "p"
    ],
    "from": [
      "ul",
      "li",
      "pre",
      "p"
    ],
    "scenarios": [
      "h1"
    ],
    "application": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "comprised": [
      "ul",
      "li"
    ],
    "multiple": [
      "ul",
      "li"
    ],
    "components": [
      "ul",
      "li"
    ],
    "that": [
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "same": [
      "ul",
      "li"
    ],
    "key": [
      "ul",
      "li",
      "pre",
      "pre",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "material": [
      "ul",
      "li"
    ],
    "for": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "secret": [
      "ul",
      "li"
    ],
    "encryption": [
      "ul",
      "li"
    ],
    "keys": [
      "ul",
      "li"
    ],
    "needs": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "store": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre"
    ],
    "configuration": [
      "ul",
      "li"
    ],
    "be": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "retrieved": [
      "ul",
      "li"
    ],
    "on": [
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "startup": [
      "ul",
      "li"
    ],
    "such": [
      "ul",
      "li"
    ],
    "as": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p"
    ],
    "database": [
      "ul",
      "li"
    ],
    "connection": [
      "ul",
      "li"
    ],
    "strings": [
      "ul",
      "li"
    ],
    "consists": [
      "ul",
      "li"
    ],
    "client": [
      "ul",
      "li"
    ],
    "tier": [
      "ul",
      "li"
    ],
    "runtime": [
      "ul",
      "li"
    ],
    "credentials": [
      "ul",
      "li"
    ],
    "connect": [
      "ul",
      "li"
    ],
    "other": [
      "ul",
      "li",
      "pre",
      "ul",
      "li"
    ],
    "tiers": [
      "ul",
      "li"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "p"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "write": [
      "pre",
      "pre"
    ],
    "unprotected": [
      "pre"
    ],
    "value": [
      "pre"
    ],
    "into": [
      "pre",
      "pre"
    ],
    "default": [
      "pre"
    ],
    "allow": [
      "pre"
    ],
    "all": [
      "pre"
    ],
    "keyregistrykey": [
      "pre"
    ],
    "=": [
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "registrycurrentuser.createsubkey(keyname);key.setvalue(valuename,": [
      "pre"
    ],
    "data;": [
      "pre"
    ],
    "any": [
      "ul",
      "li",
      "p"
    ],
    "system": [
      "ul",
      "li",
      "p"
    ],
    "because": [
      "ul",
      "li"
    ],
    "no": [
      "ul",
      "li",
      "pre"
    ],
    "has": [
      "ul",
      "li"
    ],
    "been": [
      "ul",
      "li"
    ],
    "applied": [
      "ul",
      "li"
    ],
    "test": [
      "h1",
      "p",
      "p"
    ],
    "case": [
      "h1"
    ],
    "following": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "classes": [
      "p"
    ],
    "must": [
      "p",
      "p"
    ],
    "included": [
      "p"
    ],
    "project": [
      "p"
    ],
    "making": [
      "p"
    ],
    "sample": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "above": [
      "p"
    ],
    "systemsecurity;using": [
      "pre"
    ],
    "systemsecurity.accesscontrol;using": [
      "pre"
    ],
    "microsoftwin32;": [
      "pre"
    ],
    "furthermore": [
      "p"
    ],
    "two": [
      "p"
    ],
    "distinct": [
      "p"
    ],
    "defined": [
      "p"
    ],
    "will": [
      "p",
      "pre",
      "pre"
    ],
    "referred": [
      "p"
    ],
    "b": [
      "p",
      "p"
    ],
    "cases": [
      "p"
    ],
    "illustrates": [
      "p"
    ],
    "secured": [
      "p"
    ],
    "one": [
      "p"
    ],
    "another": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "\"user": [
      "p",
      "p"
    ],
    "a\"": [
      "p",
      "p",
      "pre"
    ],
    "administrator": [
      "p"
    ],
    "static": [
      "pre",
      "pre"
    ],
    "void": [
      "pre",
      "pre",
      "pre"
    ],
    "mainstring[]": [
      "pre",
      "pre"
    ],
    "args{": [
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "keyname": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"adminsecuredkey\"": [
      "pre",
      "pre"
    ],
    "valuename": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"adminsecuredvalue\"": [
      "pre",
      "pre"
    ],
    "controlledregistrystorekeyname,": [
      "pre"
    ],
    "\"sensitive": [
      "pre"
    ],
    "data\";}static": [
      "pre"
    ],
    "controlledregistrystorestring": [
      "pre"
    ],
    "data{": [
      "pre"
    ],
    "create": [
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "we": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "our": [
      "pre",
      "pre"
    ],
    "restrict": [
      "pre"
    ],
    "only": [
      "pre"
    ],
    "environmentuserdomainname": [
      "pre"
    ],
    "+": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"\\\\\"": [
      "pre",
      "pre"
    ],
    "environmentusername;": [
      "pre"
    ],
    "registrysecurity": [
      "pre"
    ],
    "registrysecurity);": [
      "pre"
    ],
    "registryaccessrule": [
      "pre"
    ],
    "rule": [
      "pre"
    ],
    "registryaccessruleuser,": [
      "pre"
    ],
    "registryrightsfullcontrol,": [
      "pre"
    ],
    "inheritanceflagscontainerinherit,": [
      "pre"
    ],
    "propagationflagsnone,": [
      "pre"
    ],
    "accesscontroltypeallow);": [
      "pre"
    ],
    "securityaddaccessrule(rule);": [
      "pre"
    ],
    "actually": [
      "pre"
    ],
    "apply": [
      "pre"
    ],
    "just": [
      "pre"
    ],
    "came": [
      "pre"
    ],
    "up": [
      "pre"
    ],
    "with": [
      "pre",
      "ul",
      "li"
    ],
    "registrykey": [
      "pre",
      "pre"
    ],
    "registrycurrentuser.createsubkey(keyname,            registrykeypermissioncheck.readwritesubtree,            security);": [
      "pre"
    ],
    "keysetvalue(valuename,": [
      "pre"
    ],
    "data;}": [
      "pre"
    ],
    "attempt": [
      "p"
    ],
    "retrieve": [
      "p"
    ],
    "previously": [
      "p"
    ],
    "registryretrieveregistry.users,": [
      "pre"
    ],
    "valuename;": [
      "pre",
      "pre"
    ],
    "if": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "!=": [
      "pre",
      "pre"
    ],
    "null": [
      "pre",
      "pre",
      "pre"
    ],
    "consolewriteline(data);": [
      "pre"
    ],
    "else         consolewriteline(\"***": [
      "pre"
    ],
    "inaccessible": [
      "pre",
      "pre"
    ],
    "***\";}static": [
      "pre"
    ],
    "registryretrieveregistrykey": [
      "pre"
    ],
    "parent": [
      "pre",
      "pre"
    ],
    "valuename{": [
      "pre"
    ],
    "recursively": [
      "pre"
    ],
    "search": [
      "pre",
      "pre"
    ],
    "each": [
      "pre"
    ],
    "subkey": [
      "pre"
    ],
    "checking": [
      "pre"
    ],
    "see": [
      "pre"
    ],
    "match": [
      "pre",
      "pre"
    ],
    "exist": [
      "pre"
    ],
    "obtained": [
      "pre"
    ],
    "returns": [
      "pre"
    ],
    "upon": [
      "pre"
    ],
    "error": [
      "pre"
    ],
    "message": [
      "pre",
      "pre"
    ],
    "otherwise": [
      "pre"
    ],
    "foreach": [
      "pre"
    ],
    "childname": [
      "pre"
    ],
    "parentgetsubkeynames())": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "try": [
      "pre",
      "pre",
      "pre"
    ],
    "child": [
      "pre"
    ],
    "parentopensubkey(childname);": [
      "pre"
    ],
    "child.name.endswith(keyname))": [
      "pre"
    ],
    "found": [
      "pre"
    ],
    "name": [
      "pre",
      "pre"
    ],
    "pull": [
      "pre"
    ],
    "out": [
      "pre",
      "pre"
    ],
    "childgetvalue(valuename)": [
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "else": [
      "pre"
    ],
    "luck": [
      "pre"
    ],
    "finding": [
      "pre"
    ],
    "depth-first": [
      "pre"
    ],
    "recursive": [
      "pre"
    ],
    "registryretrievechild,": [
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "catch": [
      "pre"
    ],
    "exception": [
      "pre"
    ],
    "ex": [
      "pre"
    ],
    "print": [
      "pre"
    ],
    "whenever": [
      "pre"
    ],
    "come": [
      "pre"
    ],
    "across": [
      "pre"
    ],
    "don't": [
      "pre"
    ],
    "have": [
      "pre"
    ],
    "open": [
      "pre"
    ],
    "consolewriteline(childname": [
      "pre"
    ],
    "\"": [
      "pre",
      "pre"
    ],
    "exmessage);": [
      "pre"
    ],
    "null}": [
      "pre"
    ],
    "repeat": [
      "p"
    ],
    "step": [
      "p"
    ],
    "while": [
      "p"
    ],
    "logged": [
      "p"
    ],
    "compare": [
      "p"
    ],
    "results": [
      "p"
    ],
    "expected": [
      "h1"
    ],
    "result": [
      "h1"
    ],
    "--------------------------------\"user": [
      "pre"
    ],
    "administrator)": [
      "pre"
    ],
    "output--------------------------------c:\\temp>whoamivm-win2003\\administratorc:\\temp>registrysnippet.exes-1-5-21-2537879503-2075122368-204042655-1006:": [
      "pre"
    ],
    "requested": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "notallowedsensitive": [
      "pre"
    ],
    "data---------------------------\"user": [
      "pre"
    ],
    "b\"": [
      "pre"
    ],
    "joe": [
      "pre"
    ],
    "output---------------------------c:\\temp>whoamivm-win2003\\joeuserc:\\temp>registrysnippet.exenetdde:": [
      "pre"
    ],
    "not": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "alloweds-1-5-19:": [
      "pre"
    ],
    "alloweds-1-5-19_classes:": [
      "pre"
    ],
    "alloweds-1-5-20:": [
      "pre"
    ],
    "alloweds-1-5-20_classes:": [
      "pre"
    ],
    "alloweds-1-5-21-2537879503-2075122368-204042655-1006:": [
      "pre"
    ],
    "notalloweds-1-5-21-2537879503-2075122368-204042655-500:": [
      "pre"
    ],
    "alloweds-1-5-21-2537879503-2075122368-204042655-500_classes:": [
      "pre"
    ],
    "accessis": [
      "pre"
    ],
    "allowednetdde:": [
      "pre"
    ],
    "allowed*": [
      "pre"
    ],
    "*": [
      "pre"
    ],
    "more": [
      "h1",
      "ul",
      "li"
    ],
    "information": [
      "h1"
    ],
    "developers": [
      "ul",
      "li"
    ],
    "should": [
      "ul",
      "li"
    ],
    "rely": [
      "ul",
      "li"
    ],
    "alone": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li"
    ],
    "highly": [
      "ul",
      "li"
    ],
    "sensitive": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "consider": [
      "ul",
      "li"
    ],
    "encrypting": [
      "ul",
      "li"
    ],
    "certain": [
      "ul",
      "li"
    ],
    "protection": [
      "ul",
      "li"
    ],
    "api": [
      "ul",
      "li"
    ],
    "dpapi)": [
      "ul",
      "li"
    ],
    "conjunction": [
      "ul",
      "li"
    ],
    "controls": [
      "ul",
      "li"
    ],
    "add": [
      "ul",
      "li"
    ],
    "additional": [
      "ul",
      "li"
    ],
    "safeguards": [
      "ul",
      "li"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "protect": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Objectives",
      "Scenarios",
      "Problem Example",
      "Test Case",
      "Expected Result",
      "More Information"
    ],
    "ul": [
      "ASP.NET 4.0",
      "Creating an applying a registry kep security context to control which users can access data from the registry.",
      "Application comprised of multiple components that to access the same key material for secret encryption keys. \r\n    Application needs to store data configuration data to be retrieved on startup, such as database connection strings.\r\n    Application consists of a client tier that needs to store runtime credentials to connect to other application tiers.",
      "Any other user on the system can access this key because no security context has been applied.",
      "Developers should not rely alone or registry permissions to control access to highly sensitive data. Consider encrypting certain data using the Data Protection API (DPAPI) in conjunction with registry access controls to add additional safeguards to more sensitive data stored in the registry."
    ],
    "li": [
      "ASP.NET 4.0",
      "Creating an applying a registry kep security context to control which users can access data from the registry.",
      "Application comprised of multiple components that to access the same key material for secret encryption keys.",
      "Application needs to store data configuration data to be retrieved on startup, such as database connection strings.",
      "Application consists of a client tier that needs to store runtime credentials to connect to other application tiers.",
      "Any other user on the system can access this key because no security context has been applied.",
      "Developers should not rely alone or registry permissions to control access to highly sensitive data. Consider encrypting certain data using the Data Protection API (DPAPI) in conjunction with registry access controls to add additional safeguards to more sensitive data stored in the registry."
    ],
    "p": [
      "The purpose of this code snippet is to illustrate how to secure data stored in the Windows registry through the use of registry access control list (ACL) permissions. By using these permissions, a user can programmatically control who can and cannot access data stored in the registry.",
      "The following classes must be included in any project making use of the sample code provided above:",
      "Furthermore, two distinct users must be defined on the test system. These users will be referred to in the following example as User A and User B. This test cases illustrates how a registry key secured using access control permissions by one user cannot be access by another user in the following 3 steps:",
      "1) Store a key as \"User A\" (in this example, \"User A\" = Administrator) using the following code:",
      "2) Attempt to retrieve the previously stored key as User A using the following code:",
      "3) Repeat Step 2 while logged in as User B. Compare results.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "// Write an unprotected key and value into the registry. Default // permissions allow all other users to access this keyRegistryKey key = Registry.CurrentUser.CreateSubKey(keyName);key.SetValue(valueName, data);",
      "using System.Security;using System.Security.AccessControl;using Microsoft.Win32;",
      "static void Main(string[] args){    string keyName = \"AdminSecuredKey\";    string valueName = \"AdminSecuredValue\";    ControlledRegistryStore(keyName, valueName, \"sensitive data\");}static void ControlledRegistryStore(string keyName, string valueName, string data){    // Create a security context for a new key that we will use to store our data.    // The security context will restrict access to only our user.    string user = Environment.UserDomainName + \"\\\\\" + Environment.UserName;    RegistrySecurity security = new RegistrySecurity();    RegistryAccessRule rule = new RegistryAccessRule(user,            RegistryRights.FullControl,            InheritanceFlags.ContainerInherit,            PropagationFlags.None,            AccessControlType.Allow);    security.AddAccessRule(rule);    // Actually create the new registry key and apply the security context we just came up with.    RegistryKey key = Registry.CurrentUser.CreateSubKey(keyName,            RegistryKeyPermissionCheck.ReadWriteSubTree,            security);    // Write the data into the registry    key.SetValue(valueName, data);}",
      "static void Main(string[] args){     string keyName = \"AdminSecuredKey\";     string valueName = \"AdminSecuredValue\";     string data = RegistryRetrieve(Registry.Users, \"\\\\\" + keyName, valueName);     if (data != null)         Console.WriteLine(data);     else         Console.WriteLine(\"*** Inaccessible key ***\");}static string RegistryRetrieve(RegistryKey parent, string keyName, string valueName){     // Recursively search through each subkey of a parent key     // checking to see if a match for the keyname exist and if     // the data can be obtained from that key. Returns data upon     // match and an error message otherwise.      foreach (string childName in parent.GetSubKeyNames())     {         try         {             RegistryKey child = parent.OpenSubKey(childName);             string data = null;             if (child.Name.EndsWith(keyName))             {                  // We found the name, try to pull out key data                  data = child.GetValue(valueName) as string;             }             else             {                 // No luck finding the name, try a depth-first recursive search                 data = RegistryRetrieve(child, keyName, valueName);             }             if (data != null) return data;         }         catch (Exception ex)         {             // Print out a message whenever we come across a              // key we don't have permissions to open             Console.WriteLine(childName + \": \" + ex.Message);         }     }     return null;}",
      "",
      "--------------------------------\"User A\" (Administrator) output:--------------------------------C:\\temp>whoamivm-win2003\\administratorC:\\temp>RegistrySnippet.exeS-1-5-21-2537879503-2075122368-204042655-1006: Requested registry access is notallowed.sensitive data---------------------------\"User B\" (Joe User) output:---------------------------C:\\temp>whoamivm-win2003\\joeuserC:\\temp>RegistrySnippet.exeNetDDE: Requested registry access is not allowed.S-1-5-19: Requested registry access is not allowed.S-1-5-19_Classes: Requested registry access is not allowed.S-1-5-20: Requested registry access is not allowed.S-1-5-20_Classes: Requested registry access is not allowed.S-1-5-21-2537879503-2075122368-204042655-1006: Requested registry access is notallowed.S-1-5-21-2537879503-2075122368-204042655-500: Requested registry access is not allowed.S-1-5-21-2537879503-2075122368-204042655-500_Classes: Requested registry accessis not allowed.NetDDE: Requested registry access is not allowed.* Inaccessible key *"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>The purpose of this code snippet is to illustrate how to secure data stored in the Windows registry through the use of registry access control list (ACL) permissions. By using these permissions, a user can programmatically control who can and cannot access data stored in the registry.</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Creating an applying a registry kep security context to control which users can access data from the registry.</li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Application comprised of multiple components that to access the same key material for secret encryption keys. </li>\r\n    <li>Application needs to store data configuration data to be retrieved on startup, such as database connection strings.</li>\r\n    <li>Application consists of a client tier that needs to store runtime credentials to connect to other application tiers.</li>\r\n  </ul>\r\n  <h1>Problem Example</h1>\r\n  <pre>// Write an unprotected key and value into the registry. Default <br />// permissions allow all other users to access this key<br />RegistryKey key = Registry.CurrentUser.CreateSubKey(keyName);<br />key.SetValue(valueName, data);</pre>\r\n  <ul>\r\n    <li>Any other user on the system can access this key because no security context has been applied.</li>\r\n  </ul>\r\n  <h1>Test Case</h1>\r\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\r\n  <pre>using System.Security;<br />using System.Security.AccessControl;<br />using Microsoft.Win32;</pre>\r\n  <p>Furthermore, two distinct users must be defined on the test system. These users will be referred to in the following example as User A and User B. This test cases illustrates how a registry key secured using access control permissions by one user cannot be access by another user in the following 3 steps:</p>\r\n  <p>1) Store a key as \"User A\" (in this example, \"User A\" = Administrator) using the following code:</p>\r\n  <pre>static void Main(string[] args)<br />{<br />&nbsp;&nbsp;&nbsp; string keyName = \"AdminSecuredKey\";<br />&nbsp;&nbsp;&nbsp; string valueName = \"AdminSecuredValue\";<br />&nbsp;&nbsp;&nbsp; ControlledRegistryStore(keyName, valueName, \"sensitive data\");<br />}<br /><br />static void ControlledRegistryStore(string keyName, string valueName, string data)<br />{<br />&nbsp;&nbsp;&nbsp; // Create a security context for a new key that we will use to store our data.<br />&nbsp;&nbsp;&nbsp; // The security context will restrict access to only our user.<br />&nbsp;&nbsp;&nbsp; string user = Environment.UserDomainName + \"\\\\\" + Environment.UserName;<br />&nbsp;&nbsp;&nbsp; RegistrySecurity security = new RegistrySecurity();<br />&nbsp;&nbsp;&nbsp; RegistryAccessRule rule = new RegistryAccessRule(user,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegistryRights.FullControl,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InheritanceFlags.ContainerInherit,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropagationFlags.None,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AccessControlType.Allow);<br />&nbsp;&nbsp;&nbsp; security.AddAccessRule(rule);<br /><br />&nbsp;&nbsp;&nbsp; // Actually create the new registry key and apply the security context we just came up with.<br />&nbsp;&nbsp;&nbsp; RegistryKey key = Registry.CurrentUser.CreateSubKey(keyName,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegistryKeyPermissionCheck.ReadWriteSubTree,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;security);<br /><br />&nbsp;&nbsp;&nbsp; // Write the data into the registry<br />&nbsp;&nbsp;&nbsp; key.SetValue(valueName, data);<br />}</pre>\r\n  <p>2) Attempt to retrieve the previously stored key as User A using the following code:</p>\r\n  <pre>static void Main(string[] args)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp; string keyName = \"AdminSecuredKey\";<br />&nbsp;&nbsp;&nbsp;&nbsp; string valueName = \"AdminSecuredValue\";<br />&nbsp;&nbsp;&nbsp;&nbsp; string data = RegistryRetrieve(Registry.Users, \"\\\\\" + keyName, valueName);<br />&nbsp;&nbsp;&nbsp;&nbsp; if (data != null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(data);<br />&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(\"*** Inaccessible key ***\");<br />}<br /><br />static string RegistryRetrieve(RegistryKey parent, string keyName, string valueName)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp; // Recursively search through each subkey of a parent key<br />&nbsp;&nbsp;&nbsp;&nbsp; // checking to see if a match for the keyname exist and if<br />&nbsp;&nbsp;&nbsp;&nbsp; // the data can be obtained from that key. Returns data upon<br />&nbsp;&nbsp;&nbsp;&nbsp; // match and an error message otherwise. <br />&nbsp;&nbsp;&nbsp;&nbsp; foreach (string childName in parent.GetSubKeyNames())<br />&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegistryKey child = parent.OpenSubKey(childName);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string data = null;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (child.Name.EndsWith(keyName))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We found the name, try to pull out key data<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data = child.GetValue(valueName) as string;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />        &nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;         {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No luck finding the name, try a depth-first recursive search<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data = RegistryRetrieve(child, keyName, valueName);<br />        &nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;         if (data != null) return data;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception ex)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Print out a message whenever we come across a <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // key we don't have permissions to open<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(childName + \": \" + ex.Message);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; return null;<br />}</pre>\r\n  <pre>\r\n  </pre>\r\n  <p>3) Repeat Step 2 while logged in as User B. Compare results.</p>\r\n  <h1>Expected Result</h1>\r\n  <pre>--------------------------------<br />\"User A\" (Administrator) output:<br />--------------------------------<br />C:\\temp&gt;whoami<br />vm-win2003\\administrator<br />C:\\temp&gt;RegistrySnippet.exe<br />S-1-5-21-2537879503-2075122368-204042655-1006: Requested registry access is not<br />allowed.<br />sensitive data<br />---------------------------<br />\"User B\" (Joe User) output:<br />---------------------------<br />C:\\temp&gt;whoami<br />vm-win2003\\joeuser<br />C:\\temp&gt;RegistrySnippet.exe<br />NetDDE: Requested registry access is not allowed.<br />S-1-5-19: Requested registry access is not allowed.<br />S-1-5-19_Classes: Requested registry access is not allowed.<br />S-1-5-20: Requested registry access is not allowed.<br />S-1-5-20_Classes: Requested registry access is not allowed.<br />S-1-5-21-2537879503-2075122368-204042655-1006: Requested registry access is not<br />allowed.<br />S-1-5-21-2537879503-2075122368-204042655-500: Requested registry access is not a<br />llowed.<br />S-1-5-21-2537879503-2075122368-204042655-500_Classes: Requested registry access<br />is not allowed.<br />NetDDE: Requested registry access is not allowed.<br />* Inaccessible key *&nbsp;</pre>\r\n  <h1>More Information</h1>\r\n  <ul>\r\n    <li>Developers should not rely alone or registry permissions to control access to highly sensitive data. Consider encrypting certain data using the Data Protection API (DPAPI) in conjunction with registry access controls to add additional safeguards to more sensitive data stored in the registry.</li>\r\n  </ul>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}