{
  "id": "eb00762e-1c8a-4c03-ae23-b0656b697524",
  "checksum": "89420466b5ef8cba7b4d05cb640650c3c0ecc6a8",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "c++": [
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "use": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "title"
    ],
    "object-oriented": [
      "p",
      "p"
    ],
    "operators": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "new": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "title"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "delete": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "instead": [
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "direct": [
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "title"
    ],
    "operations": [
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "such": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "malloc": [
      "p"
    ],
    "calloc": [
      "p"
    ],
    "realloc": [
      "p"
    ],
    "free": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "one": [
      "p"
    ],
    "advantage": [
      "p"
    ],
    "using": [
      "p",
      "ul",
      "li"
    ],
    "is": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "automatically": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "call": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "constructors": [
      "p",
      "p"
    ],
    "destructors": [
      "p"
    ],
    "-": [
      "p"
    ],
    "this": [
      "p"
    ],
    "significantly": [
      "p"
    ],
    "reduces": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "likelihood": [
      "p"
    ],
    "a": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "number": [
      "p"
    ],
    "typical": [
      "p"
    ],
    "programming": [
      "p",
      "p"
    ],
    "errors": [
      "p"
    ],
    "calling": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "removes": [
      "p"
    ],
    "possibility": [
      "p"
    ],
    "accessing": [
      "p"
    ],
    "an": [
      "p"
    ],
    "object": [
      "p"
    ],
    "before": [
      "p"
    ],
    "it": [
      "p"
    ],
    "initialized": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "when": [
      "h1"
    ],
    "whenever": [
      "p"
    ],
    "initiating": [
      "p"
    ],
    "objects": [
      "p"
    ],
    "based": [
      "p"
    ],
    "on": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "classes": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "are": [
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "very": [
      "p"
    ],
    "basic": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "in": [
      "p"
    ],
    "operator": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "declare": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "class": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "variable": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "type": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "initialize": [
      "ul",
      "li",
      "p"
    ],
    "by": [
      "ul",
      "li",
      "p"
    ],
    "arguments": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "passed": [
      "ul",
      "li",
      "p"
    ],
    "constructor": [
      "ul",
      "li",
      "p"
    ],
    "previously": [
      "ul",
      "li",
      "p"
    ],
    "declared": [
      "ul",
      "li",
      "p"
    ],
    "pointer": [
      "ul",
      "li",
      "p"
    ],
    "non-system": [
      "ul",
      "li",
      "p"
    ],
    "allocation": [
      "ul",
      "li",
      "p"
    ],
    "deallocation": [
      "ul",
      "li",
      "p"
    ],
    "system": [
      "ul",
      "li",
      "p"
    ],
    "types": [
      "ul",
      "li",
      "p"
    ],
    "int": [
      "ul",
      "li",
      "p"
    ],
    "double": [
      "ul",
      "li",
      "p"
    ],
    "char": [
      "ul",
      "li",
      "p"
    ],
    "etc": [
      "ul",
      "li",
      "p"
    ],
    "handled": [
      "ul",
      "li",
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "for": [
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "https//www.securecoding.cert.org/confluence/display/cplusplus/mem08-cpp.+use+new+and+delete+rather+than+raw+memory+allocation+and+deallocation": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Additional Resources"
    ],
    "ul": [
      "C++",
      "To use the new operator: declare a class, declare a variable of that class type, and initialize the variable by calling the new operator. Arguments to the new operator are passed as arguments to the constructor.\r\n      \r\n        \r\n          To use the delete operator: call the delete operator on a previously declared and initialized pointer of a non-system class type. Memory allocation and deallocation of basic system types, such as int, double, char, etc. are handled automatically.",
      "For more information about using C++ operators instead of direct memory operations, please see https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.+Use+new+and+delete+rather+than+raw+memory+allocation+and+deallocation"
    ],
    "li": [
      "C++",
      "To use the new operator: declare a class, declare a variable of that class type, and initialize the variable by calling the new operator. Arguments to the new operator are passed as arguments to the constructor.",
      "To use the delete operator: call the delete operator on a previously declared and initialized pointer of a non-system class type. Memory allocation and deallocation of basic system types, such as int, double, char, etc. are handled automatically.",
      "For more information about using C++ operators instead of direct memory operations, please see https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.+Use+new+and+delete+rather+than+raw+memory+allocation+and+deallocation"
    ],
    "p": [
      "Use object-oriented operators new and delete instead of direct memory operations, such as malloc, calloc, realloc, and free.",
      "One advantage of using object-oriented operators instead of direct memory operations is that new and delete operators automatically call constructors and destructors - this significantly reduces the likelihood of a number of typical programming errors. Calling constructors automatically removes the possibility of accessing memory of an object before it is initialized.",
      "Use new and delete operators whenever initiating objects based on classes.",
      "New and delete operators are very basic operators in C++ programming.",
      "To use the new operator: declare a class, declare a variable of that class type, and initialize the variable by calling the new operator. Arguments to the new operator are passed as arguments to the constructor.",
      "To use the delete operator: call the delete operator on a previously declared and initialized pointer of a non-system class type. Memory allocation and deallocation of basic system types, such as int, double, char, etc. are handled automatically."
    ],
    "strong": [
      "To use the new operator:",
      "To use the delete operator:"
    ],
    "a": [
      "https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.+Use+new+and+delete+rather+than+raw+memory+allocation+and+deallocation"
    ]
  },
  "links": [
    {
      "href": "https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.+Use+new+and+delete+rather+than+raw+memory+allocation+and+deallocation",
      "text": "https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.+Use+new+and+delete+rather+than+raw+memory+allocation+and+deallocation"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use object-oriented operators new and delete instead of direct memory operations, such as malloc, calloc, realloc, and free.</p>\r\n  <h1>Why</h1>\r\n  <p>One advantage of using object-oriented operators instead of direct memory operations is that new and delete operators automatically call constructors and destructors - this significantly reduces the likelihood of a number of typical programming errors. Calling constructors automatically removes the possibility of accessing memory of an object before it is initialized.</p>\r\n  <h1>When</h1>\r\n  <p>Use new and delete operators whenever initiating objects based on classes.</p>\r\n  <h1>How</h1>\r\n  <p>New and delete operators are very basic operators in C&#43;&#43; programming.</p>\r\n  <ul>\r\n    <li>\r\n      <p>\r\n        <strong>To use the new operator:</strong> declare a class, declare a variable of that class type, and initialize the variable by calling the new operator. Arguments to the new operator are passed as arguments to the constructor.</p>\r\n      <li>\r\n        <p>\r\n          <strong>To use the delete operator:</strong> call the delete operator on a previously declared and initialized pointer of a non-system class type. Memory allocation and deallocation of basic system types, such as int, double, char, etc. are handled automatically.</p>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about using C&#43;&#43; operators instead of direct memory operations, please see <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.&#43;Use&#43;new&#43;and&#43;delete&#43;rather&#43;than&#43;raw&#43;memory&#43;allocation&#43;and&#43;deallocation\">https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.&#43;Use&#43;new&#43;and&#43;delete&#43;rather&#43;than&#43;raw&#43;memory&#43;allocation&#43;and&#43;deallocation</a></li>\r\n  </ul>"
}