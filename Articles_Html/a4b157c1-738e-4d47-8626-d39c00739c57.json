{
  "id": "a4b157c1-738e-4d47-8626-d39c00739c57",
  "checksum": "a69e4f4601cfc08c8f8c55150655613bce64de76",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "web": [
      "ul",
      "li"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "server-side": [
      "ul",
      "li"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2",
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "authentication": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "controls": [
      "p",
      "title"
    ],
    "fail": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "securely": [
      "p",
      "p",
      "p",
      "title"
    ],
    "why": [
      "h2"
    ],
    "designing": [
      "p"
    ],
    "when": [
      "p",
      "ol",
      "li"
    ],
    "abnormal": [
      "p"
    ],
    "conditions": [
      "p"
    ],
    "occur": [
      "p",
      "ol",
      "li"
    ],
    "reduces": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "risk": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "attackers": [
      "p"
    ],
    "bypassing": [
      "p"
    ],
    "by": [
      "p",
      "ol",
      "li"
    ],
    "disabling": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "at": [
      "p",
      "p"
    ],
    "first": [
      "p",
      "p",
      "ol",
      "li",
      "strong"
    ],
    "glance": [
      "p"
    ],
    "might": [
      "p"
    ],
    "appear": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "best": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "for": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "not": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "all": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "but": [
      "p",
      "p"
    ],
    "actually": [
      "p"
    ],
    "supposed": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "user": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "authenticates": [
      "p"
    ],
    "successfully": [
      "p"
    ],
    "aside": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "li"
    ],
    "entering": [
      "p"
    ],
    "invalid": [
      "p"
    ],
    "credentials": [
      "p"
    ],
    "aborting": [
      "p"
    ],
    "process": [
      "p"
    ],
    "or": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "trying": [
      "p"
    ],
    "cause": [
      "p",
      "p"
    ],
    "malfunction": [
      "p"
    ],
    "should": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "so": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li"
    ],
    "safe": [
      "p"
    ],
    "manner": [
      "p"
    ],
    "context": [
      "p"
    ],
    "this": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "guideline": [
      "p"
    ],
    "failure": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "means": [
      "p"
    ],
    "state": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "where": [
      "p"
    ],
    "has": [
      "p"
    ],
    "been": [
      "p"
    ],
    "passed": [
      "p"
    ],
    "successfuly": [
      "p"
    ],
    "operate": [
      "p"
    ],
    "correctly": [
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "particularly": [
      "p"
    ],
    "resilient": [
      "p"
    ],
    "since": [
      "p"
    ],
    "often": [
      "p"
    ],
    "line": [
      "p"
    ],
    "defense": [
      "p"
    ],
    "how": [
      "h2"
    ],
    "use": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "following": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "design": [
      "p"
    ],
    "generic": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "error": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "messages": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li"
    ],
    "show": [
      "ol",
      "li"
    ],
    "supply": [
      "ol",
      "li"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "feedback": [
      "ol",
      "li"
    ],
    "denoting": [
      "ol",
      "li"
    ],
    "some": [
      "ol",
      "li"
    ],
    "happened": [
      "ol",
      "li"
    ],
    "these": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "written": [
      "ol",
      "li"
    ],
    "broad": [
      "ol",
      "li"
    ],
    "way": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "provide": [
      "ol",
      "li"
    ],
    "too": [
      "ol",
      "li"
    ],
    "much": [
      "ol",
      "li"
    ],
    "information": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "global": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "exception": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li"
    ],
    "handler": [
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "handlers": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "catch": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "any": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "unforeseen": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "exceptions": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "are": [
      "ol",
      "li"
    ],
    "safety": [
      "ol",
      "li"
    ],
    "net": [
      "ol",
      "li"
    ],
    "mechanism": [
      "ol",
      "li"
    ],
    "ensure": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "application": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "does": [
      "ol",
      "li"
    ],
    "behave": [
      "ol",
      "li"
    ],
    "an": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "unexpected": [
      "ol",
      "li"
    ],
    "if": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "occurs": [
      "ol",
      "li"
    ],
    "specific": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "message": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "which": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "ensures": [
      "ol",
      "li"
    ],
    "no": [
      "ol",
      "li"
    ],
    "extra": [
      "ol",
      "li"
    ],
    "disclosed": [
      "ol",
      "li"
    ],
    "attacker": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "through": [
      "ol",
      "li"
    ],
    "provided": [
      "ol",
      "li"
    ],
    "you": [
      "ol",
      "li"
    ],
    "could": [
      "ol",
      "li"
    ],
    "write": [
      "ol",
      "li"
    ],
    "more": [
      "ol",
      "li"
    ],
    "order": [
      "ol",
      "li"
    ],
    "help": [
      "ol",
      "li"
    ],
    "always": [
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "class": [
      "ol",
      "li",
      "strong"
    ],
    "last": [
      "ol",
      "li",
      "strong"
    ],
    "picks": [
      "ol",
      "li"
    ],
    "up": [
      "ol",
      "li"
    ],
    "errors": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "keeps": [
      "ol",
      "li"
    ],
    "your": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "leaking": [
      "ol",
      "li"
    ],
    "potentially": [
      "ol",
      "li"
    ],
    "harmful": [
      "ol",
      "li"
    ],
    "leaving": [
      "ol",
      "li"
    ],
    "vulnerable": [
      "ol",
      "li"
    ],
    "final": [
      "ol",
      "li",
      "strong"
    ],
    "clauses": [
      "ol",
      "li",
      "strong"
    ],
    "practice": [
      "ol",
      "li"
    ],
    "include": [
      "ol",
      "li"
    ],
    "finally": [
      "ol",
      "li"
    ],
    "blocks": [
      "ol",
      "li"
    ],
    "try": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "statements": [
      "ol",
      "li"
    ],
    "will": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "reverts": [
      "ol",
      "li"
    ],
    "back": [
      "ol",
      "li"
    ],
    "secure": [
      "ol",
      "li"
    ],
    "block": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "ends": [
      "ol",
      "li"
    ],
    "executed": [
      "ol",
      "li"
    ],
    "regardless": [
      "ol",
      "li"
    ],
    "whether": [
      "ol",
      "li"
    ],
    "thrown": [
      "ol",
      "li"
    ],
    "handle": [
      "ol",
      "li",
      "strong"
    ],
    "properly": [
      "ol",
      "li",
      "strong"
    ],
    "implement": [
      "ol",
      "li",
      "title"
    ],
    "proper": [
      "ol",
      "li"
    ],
    "handling": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "closing": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "connections": [
      "ol",
      "li"
    ],
    "databases": [
      "ol",
      "li"
    ],
    "other": [
      "ol",
      "li"
    ],
    "systems": [
      "ol",
      "li"
    ],
    "reverting": [
      "ol",
      "li"
    ],
    "lower": [
      "ol",
      "li"
    ],
    "privileges": [
      "ol",
      "li"
    ],
    "applicable,": [
      "ol",
      "li"
    ],
    "sensitive": [
      "ol",
      "li"
    ],
    "files": [
      "ol",
      "li"
    ],
    "logging": [
      "ol",
      "li"
    ],
    "on": [
      "ol",
      "li"
    ],
    "server": [
      "ol",
      "li"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "How"
    ],
    "ul": [
      "Web Applications\n Server-side"
    ],
    "li": [
      "Web Applications",
      "Server-side",
      "Use generic error messages. Show generic error messages that supply the user with feedback denoting that some error happened. These messages should be written in a broad way and should not provide too much information.",
      "Use a global exception handler. Global exception handlers should catch any unforeseen exceptions that occur. These handlers are a safety net mechanism to ensure that the application does not behave in an unexpected way if an error occurs.",
      "Catch any specific exceptions first. Use a generic error message, which ensures that no extra information is disclosed to an attacker through the error messages provided. In this specific exception handler, you could write an error message that is more specific to the error in order to help the user.",
      "Always catch the global exception class last. This picks up any unforeseen errors and keeps your application from leaking potentially harmful information to an attacker or leaving your application in a vulnerable state.",
      "Use final clauses. It is always a best practice to include finally blocks with your try statements, which will ensure that the application reverts back to a secure state when the try block ends. This block will be executed regardless of whether an exception is thrown or not.",
      "Handle errors properly. Implement proper handling of the application state in error handling code by closing all connections to databases or other systems, reverting to lower privileges (if applicable), closing all sensitive files, and logging the failure on the server."
    ],
    "p": [
      "Make sure authentication controls fail securely.",
      "Designing authentication to fail securely when abnormal conditions occur reduces the risk of attackers bypassing authentication by disabling it. At first glance, it might appear that it is best for authentication code not to fail at all, but actually authentication is supposed to fail unless the user authenticates successfully. Aside from entering invalid credentials, aborting the authentication process or trying to cause the authentication code to malfunction should cause the authentication code to fail, but to do so in a safe manner. In the context of this guideline, to authentication failure means a state where authentication has not been passed successfuly, not failure of code to operate correctly. Authentication code should be particularly resilient, since it is often the first line of defense.",
      "Use the following best practices to design authentication code to fail securely:"
    ],
    "ol": [
      "Use generic error messages. Show generic error messages that supply the user with feedback denoting that some error happened. These messages should be written in a broad way and should not provide too much information.\n Use a global exception handler. Global exception handlers should catch any unforeseen exceptions that occur. These handlers are a safety net mechanism to ensure that the application does not behave in an unexpected way if an error occurs.\n Catch any specific exceptions first. Use a generic error message, which ensures that no extra information is disclosed to an attacker through the error messages provided. In this specific exception handler, you could write an error message that is more specific to the error in order to help the user.\n Always catch the global exception class last. This picks up any unforeseen errors and keeps your application from leaking potentially harmful information to an attacker or leaving your application in a vulnerable state.\n Use final clauses. It is always a best practice to include finally blocks with your try statements, which will ensure that the application reverts back to a secure state when the try block ends. This block will be executed regardless of whether an exception is thrown or not.\n Handle errors properly. Implement proper handling of the application state in error handling code by closing all connections to databases or other systems, reverting to lower privileges (if applicable), closing all sensitive files, and logging the failure on the server."
    ],
    "strong": [
      "Use generic error messages.",
      "Use a global exception handler.",
      "Catch any specific exceptions first.",
      "Always catch the global exception class last.",
      "Use final clauses.",
      "Handle errors properly."
    ]
  },
  "links": [],
  "html": "<h2>Applies To</h2><ul><li> Web Applications</li>\n<li> Server-side</li>\n</ul><h2>What to Do</h2><p>Make sure authentication controls fail securely.\n</p><h2>Why</h2><p>Designing authentication to fail securely when abnormal conditions occur reduces the risk of attackers bypassing authentication by disabling it. At first glance, it might appear that it is best for authentication code not to fail at all, but actually authentication is supposed to fail unless the user authenticates successfully. Aside from entering invalid credentials, aborting the authentication process or trying to cause the authentication code to malfunction should cause the authentication code to fail, but to do so in a safe manner. In the context of this guideline, to authentication failure means a state where authentication has not been passed successfuly, not failure of code to operate correctly. Authentication code should be particularly resilient, since it is often the first line of defense.\n</p><h2>How</h2><p>Use the following best practices to design authentication code to fail securely:\n</p><ol>\n<li> <strong>Use generic error messages.</strong> Show generic error messages that supply the user with feedback denoting that some error happened. These messages should be written in a broad way and should not provide too much information.</li>\n<li> <strong>Use a global exception handler.</strong> Global exception handlers should catch any unforeseen exceptions that occur. These handlers are a safety net mechanism to ensure that the application does not behave in an unexpected way if an error occurs.</li>\n<li> <strong>Catch any specific exceptions first.</strong> Use a generic error message, which ensures that no extra information is disclosed to an attacker through the error messages provided. In this specific exception handler, you could write an error message that is more specific to the error in order to help the user.</li>\n<li> <strong>Always catch the global exception class last.</strong> This picks up any unforeseen errors and keeps your application from leaking potentially harmful information to an attacker or leaving your application in a vulnerable state.</li>\n<li> <strong>Use final clauses.</strong> It is always a best practice to include finally blocks with your try statements, which will ensure that the application reverts back to a secure state when the try block ends. This block will be executed regardless of whether an exception is thrown or not.</li>\n<li> <strong>Handle errors properly.</strong> Implement proper handling of the application state in error handling code by closing all connections to databases or other systems, reverting to lower privileges (if applicable), closing all sensitive files, and logging the failure on the server.</li>\n</ol>\n\n\n\n"
}