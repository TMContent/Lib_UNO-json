{
  "id": "ffc885ad-2250-462f-b42e-497e22966f5c",
  "checksum": "5596a1a5e63ea5b05c0c870c9114da2b141520d2",
  "words": {
    "0": [
      "pre",
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "h1",
      "h1",
      "p"
    ],
    "c++": [
      "p"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "verify": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p"
    ],
    "debug": [
      "p",
      "p",
      "p",
      "title"
    ],
    "assertions": [
      "p",
      "p",
      "p",
      "title"
    ],
    "are": [
      "p",
      "p",
      "p",
      "title"
    ],
    "not": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "used": [
      "p",
      "p",
      "title"
    ],
    "error": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "title"
    ],
    "handling": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "why": [
      "h1"
    ],
    "compiled": [
      "p"
    ],
    "out": [
      "p"
    ],
    "of": [
      "p"
    ],
    "production": [
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p"
    ],
    "so": [
      "p"
    ],
    "they": [
      "p"
    ],
    "should": [
      "p"
    ],
    "be": [
      "p"
    ],
    "relied": [
      "p"
    ],
    "on": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p"
    ],
    "environment": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "search": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "\"assert\"": [
      "p",
      "p"
    ],
    "operator": [
      "p",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "identify": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "rewrite": [
      "p"
    ],
    "implement": [
      "p"
    ],
    "functional": [
      "p"
    ],
    "without": [
      "p"
    ],
    "using": [
      "p"
    ],
    "assertion": [
      "p",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "h1",
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "read": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "api": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p"
    ],
    "called": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "then": [
      "p",
      "p"
    ],
    "return": [
      "p",
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "value": [
      "p",
      "p"
    ],
    "checked": [
      "p",
      "p"
    ],
    "errors": [
      "p",
      "p"
    ],
    "an": [
      "p"
    ],
    "bool": [
      "pre",
      "pre"
    ],
    "readfromsocketsocket": [
      "pre",
      "pre"
    ],
    "socket": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "char": [
      "pre",
      "pre"
    ],
    "*recvbuffer": [
      "pre",
      "pre"
    ],
    "int": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "len{": [
      "pre",
      "pre"
    ],
    "//first": [
      "pre",
      "pre"
    ],
    "from": [
      "pre",
      "pre"
    ],
    "ret": [
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "readsocket,": [
      "pre",
      "pre"
    ],
    "recvbuffer": [
      "pre",
      "pre"
    ],
    "len": [
      "pre",
      "pre"
    ],
    "0;": [
      "pre",
      "pre"
    ],
    "assertret": [
      "pre"
    ],
    "parsebufferrecvbuffer,": [
      "pre",
      "pre"
    ],
    "len;}": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "if": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre"
    ],
    "//now": [
      "pre"
    ],
    "parse": [
      "pre"
    ],
    "buffer": [
      "pre"
    ],
    "len;": [
      "pre"
    ],
    "}": [
      "pre"
    ],
    "else": [
      "pre"
    ],
    "//can": [
      "pre"
    ],
    "call": [
      "pre"
    ],
    "wsagetlasterror": [
      "pre"
    ],
    "we": [
      "pre"
    ],
    "need": [
      "pre"
    ],
    "details": [
      "pre"
    ],
    "false": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "do": [
      "ul",
      "li",
      "a"
    ],
    "use": [
      "ul",
      "li",
      "a"
    ],
    "asserts": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Related Items"
    ],
    "p": [
      "C++",
      "Verify that debug assertions are not used for error handling.",
      "Debug assertions are compiled out of production code, so they should not be relied on for error handling in a production environment.",
      "Search code for the \"assert\" operator. Verify that assertions are not used for error handling.",
      "Identify code that uses the \"assert\" operator. Rewrite code to implement functional error handling without using the debug assertion.",
      "In the following example, the read API is called and then the return value is checked for errors in an assertion.",
      "In the following example, the read API is called and then the return value is checked for errors."
    ],
    "pre": [
      "bool ReadFromSocket(SOCKET socket, char *recvBuffer, int len){  //first read from the socket  int ret = read(socket, recvBuffer, len, 0);  assert(ret >= 0)  return parseBuffer(recvBuffer, len);}",
      "bool ReadFromSocket(SOCKET socket, char *recvBuffer, int len){  //first read from the socket  int ret = read(socket, recvBuffer, len, 0);  if (ret >= 0)  {      //now parse the buffer      return parseBuffer(recvBuffer, len);  }  else  {      //can call WSAGetLastError if we need error details      return false;  }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "Do Not Use Asserts for Error Handling"
    ],
    "li": [
      "Do Not Use Asserts for Error Handling"
    ],
    "a": [
      "Do Not Use Asserts for Error Handling"
    ]
  },
  "links": [
    {
      "href": "/article/b2050dca-6329-4360-b218-070305fe6890",
      "text": "Do Not Use Asserts for Error Handling"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <p>C&#43;&#43;</p>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that debug assertions are not used for error handling.</p>\r\n  <h1>Why</h1>\r\n  <p>Debug assertions are compiled out of production code, so they should not be relied on for error handling in a production environment.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Search code for the \"assert\" operator. Verify that assertions are not used for error handling.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>Identify code that uses the \"assert\" operator. Rewrite code to implement functional error handling without using the debug assertion.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following example, the read API is called and then the return value is checked for errors in an assertion. </p>\r\n  <pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />&nbsp; //first read from the socket<br />&nbsp; int ret = read(socket, recvBuffer, len, 0);<br />&nbsp; assert(ret &gt;= 0)<br />&nbsp; return parseBuffer(recvBuffer, len);<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following example, the read API is called and then the return value is checked for errors. </p>\r\n  <pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />&nbsp; //first read from the socket<br />&nbsp; int ret = read(socket, recvBuffer, len, 0);<br />&nbsp; if (ret &gt;= 0)<br />&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //now parse the buffer<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return parseBuffer(recvBuffer, len);<br />&nbsp; &#125;<br />&nbsp; else<br />&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //can call WSAGetLastError if we need error details<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />&nbsp; &#125;<br />&#125;</pre>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/b2050dca-6329-4360-b218-070305fe6890\">Do Not Use Asserts for Error Handling</a>\r\n    </li>\r\n  </ul>"
}