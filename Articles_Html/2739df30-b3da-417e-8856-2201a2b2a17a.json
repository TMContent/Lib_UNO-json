{
  "id": "2739df30-b3da-417e-8856-2201a2b2a17a",
  "checksum": "2afe2e9efd597d26893bdd25112d3079b478ea87",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "h1",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "h1",
      "h1",
      "p"
    ],
    "for": [
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "ensure": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p"
    ],
    "structured": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "handling": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "title"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "used": [
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "error": [
      "p",
      "p",
      "h1",
      "h1",
      "h1"
    ],
    "why": [
      "h1"
    ],
    "improves": [
      "p"
    ],
    "robustness": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "avoids": [
      "p"
    ],
    "leaving": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "in": [
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "inconsistent": [
      "p"
    ],
    "state": [
      "p"
    ],
    "it": [
      "p"
    ],
    "provides": [
      "p"
    ],
    "with": [
      "p"
    ],
    "more": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "information": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "regarding": [
      "p"
    ],
    "encountered": [
      "p"
    ],
    "minimizes": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "disclosure": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "how": [
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "because": [
      "p",
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "raise": [
      "p"
    ],
    "various": [
      "p"
    ],
    "types": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "exceptions": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "its": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "handlers": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "p"
    ],
    "should": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "specific": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "relevant": [
      "p",
      "p"
    ],
    "possible": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "application's": [
      "p"
    ],
    "well": [
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "areas": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "inside": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "where": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "necessary": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "locate": [
      "ol",
      "li",
      "p"
    ],
    "places": [
      "ol",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "p"
    ],
    "needs": [
      "ol",
      "li",
      "p"
    ],
    "take": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "place": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "will": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "executing": [
      "ol",
      "li",
      "p"
    ],
    "throws": [
      "ol",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "a": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "given": [
      "ol",
      "li",
      "p"
    ],
    "then": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "catch": [
      "ol",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "or": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "parental": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "class": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "instance": [
      "ol",
      "li",
      "p"
    ],
    "following": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "raises": [
      "ol",
      "li",
      "p"
    ],
    "keystoreexception": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "nosuchalgorithmexception": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "certificateexception": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "ioexception": [
      "ol",
      "li",
      "p",
      "em",
      "pre",
      "pre",
      "pre"
    ],
    "keystore": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "keystoregetinstance(\"jceks\");fileinputstream": [
      "ol",
      "li",
      "pre"
    ],
    "keystorefile": [
      "ol",
      "li",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "fileinputstreamgetconfigpath()": [
      "ol",
      "li",
      "pre"
    ],
    "+": [
      "ol",
      "li",
      "pre"
    ],
    "keystorename;keystore.load(keystorefile,": [
      "ol",
      "li",
      "pre"
    ],
    "keystorepass;keystorefile.close();": [
      "ol",
      "li",
      "pre"
    ],
    "important": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "enumerate": [
      "ol",
      "li",
      "p"
    ],
    "throw": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "list": [
      "ol",
      "li",
      "p"
    ],
    "hold": [
      "ol",
      "li",
      "p"
    ],
    "significant": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "handled": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "accordingly": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "h1"
    ],
    "sql/network": [
      "ol",
      "li",
      "p"
    ],
    "would": [
      "ol",
      "li",
      "p"
    ],
    "differently": [
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "p"
    ],
    "local": [
      "ol",
      "li",
      "p"
    ],
    "i/o": [
      "ol",
      "li",
      "p"
    ],
    "verify": [
      "ol",
      "li",
      "p",
      "strong",
      "pre",
      "pre"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "positioned": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "appropriately": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p"
    ],
    "make": [
      "ol",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "li",
      "p"
    ],
    "known": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "either": [
      "ol",
      "li",
      "p"
    ],
    "catching": [
      "ol",
      "li",
      "p"
    ],
    "them": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "explicitly": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "through": [
      "ol",
      "li",
      "p"
    ],
    "their": [
      "ol",
      "li",
      "p"
    ],
    "classesif": [
      "ol",
      "li",
      "p"
    ],
    "caught": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "handler": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "placed": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "before": [
      "ol",
      "li",
      "p"
    ],
    "explicit": [
      "ol",
      "li",
      "p"
    ],
    "close": [
      "ol",
      "li",
      "p"
    ],
    "raised": [
      "ol",
      "li",
      "p"
    ],
    "as this": [
      "ol",
      "li",
      "p"
    ],
    "allow": [
      "ol",
      "li",
      "p"
    ],
    "adequate": [
      "ol",
      "li",
      "p"
    ],
    "mitigation": [
      "ol",
      "li",
      "p"
    ],
    "try{": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "classforname(\"com.mysql.jdbc.driver\").newinstance();": [
      "ol",
      "li",
      "pre"
    ],
    "dbconnection": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "drivermanagergetconnection(connectionstring,": [
      "ol",
      "li",
      "pre"
    ],
    "dbcredentials;}catch(sqlexception": [
      "ol",
      "li",
      "pre"
    ],
    "se{": [
      "ol",
      "li",
      "pre"
    ],
    "null": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "add": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "logging}catch": [
      "ol",
      "li",
      "pre"
    ],
    "e{": [
      "ol",
      "li",
      "pre"
    ],
    "logging": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "applicationcriticalexception\"cannot": [
      "ol",
      "li",
      "pre"
    ],
    "connect": [
      "ol",
      "li",
      "pre"
    ],
    "database": [
      "ol",
      "li",
      "pre"
    ],
    "server\");}": [
      "ol",
      "li",
      "pre"
    ],
    "fix": [
      "h1"
    ],
    "when": [
      "p",
      "pre"
    ],
    "multiple": [
      "p",
      "p"
    ],
    "anticipated": [
      "p"
    ],
    "try/catch": [
      "p",
      "em"
    ],
    "block": [
      "p"
    ],
    "have": [
      "p"
    ],
    "clauses": [
      "p"
    ],
    "satisfy": [
      "p"
    ],
    "each": [
      "p",
      "p"
    ],
    "type": [
      "p",
      "p"
    ],
    "filenotfoundexception": [
      "p",
      "em",
      "pre"
    ],
    "unsupportedcallbackexception": [
      "p",
      "em",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "expected": [
      "p",
      "pre",
      "pre"
    ],
    "there": [
      "p",
      "p"
    ],
    "..}catch": [
      "pre"
    ],
    "fnf{": [
      "pre"
    ],
    "loggerwarning(fnf.tostring());}catch": [
      "pre"
    ],
    "uce{": [
      "pre"
    ],
    "loggerwarning(uce.tostring());}finally{": [
      "pre"
    ],
    "//execute": [
      "pre"
    ],
    "clean-up": [
      "pre"
    ],
    "routine}": [
      "pre"
    ],
    "note": [
      "p",
      "strong"
    ],
    "above": [
      "p"
    ],
    "assumes": [
      "p"
    ],
    "global": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "mechanism": [
      "p"
    ],
    "at": [
      "p"
    ],
    "root": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "shows": [
      "p",
      "p"
    ],
    "part": [
      "p",
      "p"
    ],
    "implementation": [
      "p",
      "p"
    ],
    "jaas": [
      "p",
      "p"
    ],
    "login": [
      "p",
      "p"
    ],
    "module": [
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p",
      "pre"
    ],
    "single": [
      "p",
      "pre"
    ],
    "cannot": [
      "p"
    ],
    "log": [
      "p",
      "p"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "boolean": [
      "pre",
      "pre"
    ],
    "login)": [
      "pre",
      "pre"
    ],
    "loginexception{": [
      "pre",
      "pre"
    ],
    "ifcallbackhandler": [
      "pre",
      "pre"
    ],
    "==": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "loginexception\"authentication": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "failed\");": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "prompt": [
      "pre",
      "pre"
    ],
    "strings": [
      "pre",
      "pre"
    ],
    "echo": [
      "pre",
      "pre"
    ],
    "flag": [
      "pre",
      "pre"
    ],
    "not": [
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "callbacks": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "callback]": [
      "pre",
      "pre"
    ],
    "callback2];": [
      "pre",
      "pre"
    ],
    "callbacks0]": [
      "pre",
      "pre"
    ],
    "namecallback\"user:": [
      "pre",
      "pre"
    ],
    "\";": [
      "pre",
      "pre"
    ],
    "callbacks1]": [
      "pre",
      "pre"
    ],
    "passwordcallback\"pass:": [
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre"
    ],
    "false;": [
      "pre",
      "pre"
    ],
    "try": [
      "pre",
      "pre"
    ],
    "callbackhandlerhandle(callbacks);": [
      "pre",
      "pre"
    ],
    "namecallback": [
      "pre",
      "pre"
    ],
    "namecall": [
      "pre",
      "pre"
    ],
    "namecallback)callbacks[0];": [
      "pre",
      "pre"
    ],
    "passwordcallback": [
      "pre",
      "pre"
    ],
    "pwdcall": [
      "pre",
      "pre"
    ],
    "passwordcallback)callbacks[1];": [
      "pre",
      "pre"
    ],
    "user": [
      "pre",
      "pre"
    ],
    "namecallgetname();": [
      "pre",
      "pre"
    ],
    "char]": [
      "pre",
      "pre"
    ],
    "temppass": [
      "pre",
      "pre"
    ],
    "pwdcallgetpassword();": [
      "pre",
      "pre"
    ],
    "iftemppass": [
      "pre",
      "pre"
    ],
    "pass": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "chartemppass.length];": [
      "pre",
      "pre"
    ],
    "commoncopyarray(temppass,": [
      "pre",
      "pre"
    ],
    "pass;": [
      "pre",
      "pre"
    ],
    "pwdcallclearpassword();": [
      "pre",
      "pre"
    ],
    "credentials": [
      "pre",
      "pre"
    ],
    "ifvaliduser())": [
      "pre",
      "pre"
    ],
    "succeeded": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "true": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "false": [
      "pre",
      "pre"
    ],
    "clearcredentials);": [
      "pre",
      "pre"
    ],
    "failedloginexception\"authentication": [
      "pre",
      "pre"
    ],
    "has": [
      "pre"
    ],
    "e": [
      "pre",
      "pre"
    ],
    "appropriate": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "mechanisms": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "consult": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "section": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "ioe": [
      "pre"
    ],
    "uce": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "learn": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "java": [
      "ul",
      "ul",
      "li",
      "li",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "visit": [
      "ul",
      "li"
    ],
    "lesson": [
      "ul",
      "li",
      "a"
    ],
    "available": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li"
    ],
    "tutorials": [
      "ul",
      "li"
    ],
    "guidelines": [
      "h1"
    ],
    "use": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "unhandled": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "do": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "disclose": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "valuable": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "during": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "authentication": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "errors": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "details": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "client": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "include": [
      "ul",
      "li",
      "a"
    ],
    "debug": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "data": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "output": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "disclosed": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "included": [
      "ul",
      "li",
      "a"
    ],
    "testing": [
      "h1"
    ],
    "test": [
      "ul",
      "li",
      "a"
    ],
    "bugs": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Additional Resources",
      "Java Error Handling Guidelines",
      "Java Error Handling Checklists",
      "Java Error Handling Testing"
    ],
    "p": [
      "Ensure that structured exception handling is used for error handling.",
      "Structured exception handling improves robustness and avoids leaving the application in an inconsistent state. It provides the application with more information regarding the encountered error and minimizes the risk of information disclosure.",
      "Because your application can raise various types of exceptions, its exception handlers should be as specific and relevant as possible. To check if your application's exception handling is well structured:",
      "Identify all areas inside the code where exception handling is necessary. Locate the places within the code where exception handling needs to take place. If the function you will be executing throws a given exception, then you should catch that specific exception or its parental class. For instance, the following code raises KeyStoreException, NoSuchAlgorithmException, CertificateException, and IOException:",
      "Identify the important types of exceptions. Enumerate all possible types of exceptions that your application can throw. List the types of exceptions that hold a significant value and must be handled accordingly. For example, SQL/network exceptions would be handled differently than local I/O exceptions.",
      "Verify that all exception handlers are positioned appropriately. Make sure that all known exceptions are handled appropriately by either catching them explicitly or through their parental classes.If an exception is caught explicitly, its handler should be placed before the handler for its parental class. Explicit exceptions should be caught as close as possible to the code that raised them as this will allow more adequate handling and mitigation to take place. Example:",
      "Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the try/catch block should have multiple catch clauses to satisfy each type of exception. For example, if a FileNotFoundException and UnsupportedCallbackException are expected, then there should be an exception handler for each type of exception:",
      "Note: The example above assumes that there is a global exception handling mechanism placed at the root of the code execution.",
      "The following code shows part of an implementation of a JAAS Login Module. Because the code uses a single exception handler, the application cannot log the exception information appropriately.",
      "The following code shows part of an implementation of a JAAS Login Module. Because the code uses structured exception handling, the application can log the exception information appropriately."
    ],
    "ol": [
      "Identify all areas inside the code where exception handling is necessary. Locate the places within the code where exception handling needs to take place. If the function you will be executing throws a given exception, then you should catch that specific exception or its parental class. For instance, the following code raises KeyStoreException, NoSuchAlgorithmException, CertificateException, and IOException:\r\n      keyStore = KeyStore.getInstance(\"JCEKS\");FileInputStream keyStoreFile = new FileInputStream(getConfigPath() + keyStoreName);keyStore.load(keyStoreFile, keyStorePass);keyStoreFile.close();\r\n    \r\n    \r\n      \r\n        Identify the important types of exceptions. Enumerate all possible types of exceptions that your application can throw. List the types of exceptions that hold a significant value and must be handled accordingly. For example, SQL/network exceptions would be handled differently than local I/O exceptions.\r\n    \r\n    \r\n      \r\n        Verify that all exception handlers are positioned appropriately. Make sure that all known exceptions are handled appropriately by either catching them explicitly or through their parental classes.If an exception is caught explicitly, its handler should be placed before the handler for its parental class. Explicit exceptions should be caught as close as possible to the code that raised them as this will allow more adequate handling and mitigation to take place. Example: \r\n      try{      Class.forName(\"com.mysql.jdbc.Driver\").newInstance();      dbConnection = DriverManager.getConnection(connectionString, dbCredentials);}catch(SQLException se){      dbConnection = null;      // Add logging}catch (Exception e){      // Add logging      throw new ApplicationCriticalException(\"Cannot connect to database server.\");}"
    ],
    "li": [
      "Identify all areas inside the code where exception handling is necessary. Locate the places within the code where exception handling needs to take place. If the function you will be executing throws a given exception, then you should catch that specific exception or its parental class. For instance, the following code raises KeyStoreException, NoSuchAlgorithmException, CertificateException, and IOException:\r\n      keyStore = KeyStore.getInstance(\"JCEKS\");FileInputStream keyStoreFile = new FileInputStream(getConfigPath() + keyStoreName);keyStore.load(keyStoreFile, keyStorePass);keyStoreFile.close();",
      "Identify the important types of exceptions. Enumerate all possible types of exceptions that your application can throw. List the types of exceptions that hold a significant value and must be handled accordingly. For example, SQL/network exceptions would be handled differently than local I/O exceptions.",
      "Verify that all exception handlers are positioned appropriately. Make sure that all known exceptions are handled appropriately by either catching them explicitly or through their parental classes.If an exception is caught explicitly, its handler should be placed before the handler for its parental class. Explicit exceptions should be caught as close as possible to the code that raised them as this will allow more adequate handling and mitigation to take place. Example: \r\n      try{      Class.forName(\"com.mysql.jdbc.Driver\").newInstance();      dbConnection = DriverManager.getConnection(connectionString, dbCredentials);}catch(SQLException se){      dbConnection = null;      // Add logging}catch (Exception e){      // Add logging      throw new ApplicationCriticalException(\"Cannot connect to database server.\");}",
      "To learn more about Java exceptions, visit: Lesson: Exceptions available from The Java Tutorials.",
      "Use Structured Exception Handling",
      "Use a Global Exception Handler for Unhandled Exceptions",
      "Do Not Disclose Valuable Information During Authentication Errors",
      "Do Not Disclose Exception Details to the Client",
      "Do Not Include Debug Data in Output",
      "Structured Exception Handling Is Used",
      "A Global Exception Handler Is Used for Unhandled Exceptions",
      "Valuable Information Is Not Disclosed During Authentication Errors",
      "Exception Details Are Not Disclosed to the Client",
      "Debug Data Is Not Included in Output",
      "How to Test for Exception Information Disclosure Bugs in Java"
    ],
    "strong": [
      "Identify all areas inside the code where exception handling is necessary.",
      "Identify the important types of exceptions.",
      "Verify that all exception handlers are positioned appropriately.",
      "Note:"
    ],
    "em": [
      "KeyStoreException",
      "NoSuchAlgorithmException",
      "CertificateException",
      "IOException",
      "try/catch",
      "FileNotFoundException",
      "UnsupportedCallbackException"
    ],
    "pre": [
      "keyStore = KeyStore.getInstance(\"JCEKS\");FileInputStream keyStoreFile = new FileInputStream(getConfigPath() + keyStoreName);keyStore.load(keyStoreFile, keyStorePass);keyStoreFile.close();",
      "try{      Class.forName(\"com.mysql.jdbc.Driver\").newInstance();      dbConnection = DriverManager.getConnection(connectionString, dbCredentials);}catch(SQLException se){      dbConnection = null;      // Add logging}catch (Exception e){      // Add logging      throw new ApplicationCriticalException(\"Cannot connect to database server.\");}",
      "try{      ...}catch (FileNotFoundException fnf){      logger.warning(fnf.toString());}catch (UnsupportedCallbackException uce){      logger.warning(uce.toString());}finally{      //Execute clean-up routine}",
      "public boolean login() throws LoginException{      if(callbackHandler == null)      {            throw new LoginException(\"Authentication failed.\");      }      // Prompt strings and echo flag not used in callbacks      Callback[] callbacks = new Callback[2];      callbacks[0] = new NameCallback(\"User: \");      callbacks[1] = new PasswordCallback(\"Pass: \", false);      try      {            callbackHandler.handle(callbacks);            NameCallback nameCall = (NameCallback)callbacks[0];            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];            user = nameCall.getName();            char[] tempPass = pwdCall.getPassword();            if(tempPass == null)            {                  pass = null;            }            else            {                  pass = new char[tempPass.length];                  common.copyArray(tempPass, pass);            }            pwdCall.clearPassword();            // Verify credentials            if(validUser())            {                  succeeded = true;                  return true;            }            else            {                  succeeded = false;                  clearCredentials();                  throw new FailedLoginException(\"Authentication failed.\");            }      }      // The application has a single exception handler when      // IOException and UnsupportedCallbackException are expected      catch (Exception e)      {            // Add appropriate logging and exception handling mechanisms.            // Consult the Logging section            throw new LoginException(\"Authentication failed.\");      }}",
      "public boolean login() throws LoginException{      if(callbackHandler == null)      {            throw new LoginException(\"Authentication failed.\");      }      // Prompt strings and echo flag not used in callbacks      Callback[] callbacks = new Callback[2];      callbacks[0] = new NameCallback(\"User: \");      callbacks[1] = new PasswordCallback(\"Pass: \", false);      try      {            callbackHandler.handle(callbacks);            NameCallback nameCall = (NameCallback)callbacks[0];            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];            user = nameCall.getName();            char[] tempPass = pwdCall.getPassword();            if(tempPass == null)            {                  pass = null;            }            else            {                  pass = new char[tempPass.length];                  common.copyArray(tempPass, pass);            }            pwdCall.clearPassword();            // Verify credentials            if(validUser())            {                  succeeded = true;                  return true;            }            else            {                  succeeded = false;                  clearCredentials();                  throw new FailedLoginException(\"Authentication failed.\");            }      }      // The application uses structured exception handling for      // the expected IOException and UnsupportedCallbackException      catch (IOException ioe)      {            // Add appropriate logging and exception handling mechanisms.            // Consult the Logging section            throw new LoginException(\"Authentication failed.\");      }      catch (UnsupportedCallbackException uce)      {            // Add appropriate logging and exception handling mechanisms.            // Consult the Logging section            throw new LoginException(\"Authentication failed.\");      }      catch (Exception e)      {            // Add appropriate logging and exception handling mechanisms.            // Consult the Logging section            throw new LoginException(\"Authentication failed.\");      }  }"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "To learn more about Java exceptions, visit: Lesson: Exceptions available from The Java Tutorials.",
      "Use Structured Exception Handling\r\n    \r\n    \r\n      Use a Global Exception Handler for Unhandled Exceptions\r\n    \r\n    \r\n      Do Not Disclose Valuable Information During Authentication Errors\r\n    \r\n    \r\n      Do Not Disclose Exception Details to the Client\r\n    \r\n    \r\n      Do Not Include Debug Data in Output",
      "Structured Exception Handling Is Used\r\n    \r\n    \r\n      A Global Exception Handler Is Used for Unhandled Exceptions\r\n    \r\n    \r\n      Valuable Information Is Not Disclosed During Authentication Errors\r\n    \r\n    \r\n      Exception Details Are Not Disclosed to the Client\r\n    \r\n    \r\n      Debug Data Is Not Included in Output",
      "How to Test for Exception Information Disclosure Bugs in Java"
    ],
    "a": [
      "Lesson: Exceptions",
      "Use Structured Exception Handling",
      "Use a Global Exception Handler for Unhandled Exceptions",
      "Do Not Disclose Valuable Information During Authentication Errors",
      "Do Not Disclose Exception Details to the Client",
      "Do Not Include Debug Data in Output",
      "Structured Exception Handling Is Used",
      "A Global Exception Handler Is Used for Unhandled Exceptions",
      "Valuable Information Is Not Disclosed During Authentication Errors",
      "Exception Details Are Not Disclosed to the Client",
      "Debug Data Is Not Included in Output",
      "How to Test for Exception Information Disclosure Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "http://java.sun.com/docs/books/tutorial/essential/exceptions/index.html",
      "text": "Lesson: Exceptions"
    },
    {
      "href": "/article/fceefe0c-900a-4c29-9c2e-ee662aa9e1f1",
      "text": "Use Structured Exception Handling"
    },
    {
      "href": "/article/3e815c74-4d57-4c1b-8446-750b319ea046",
      "text": "Use a Global Exception Handler for Unhandled Exceptions"
    },
    {
      "href": "/article/30abc3c9-d288-4e8a-a614-fd1a1f331270",
      "text": "Do Not Disclose Valuable Information During Authentication Errors"
    },
    {
      "href": "/article/56ad1852-7fc3-4d1f-b109-bbcce29170f7",
      "text": "Do Not Disclose Exception Details to the Client"
    },
    {
      "href": "/article/fd4b2a8a-db2d-4594-ba30-3ce5f63ad459",
      "text": "Do Not Include Debug Data in Output"
    },
    {
      "href": "/article/2739df30-b3da-417e-8856-2201a2b2a17a",
      "text": "Structured Exception Handling Is Used"
    },
    {
      "href": "/article/c88e1b49-357d-4202-aafc-86ce0de485bd",
      "text": "A Global Exception Handler Is Used for Unhandled Exceptions"
    },
    {
      "href": "/article/e574d1d8-acae-4c64-90db-a0f6b98ca45f",
      "text": "Valuable Information Is Not Disclosed During Authentication Errors"
    },
    {
      "href": "/article/d13e57d7-f6f5-4bd4-8629-26c45f9f029b",
      "text": "Exception Details Are Not Disclosed to the Client"
    },
    {
      "href": "/article/d33cc3de-517c-4c84-95bd-24f14d9d99d6",
      "text": "Debug Data Is Not Included in Output"
    },
    {
      "href": "/article/5556fc17-3f60-4fc0-8717-0a2ff1c12701",
      "text": "How to Test for Exception Information Disclosure Bugs in Java"
    }
  ],
  "html": "<h1>What to Check For</h1>\r\n  <p>Ensure that structured exception handling is used for error handling.</p>\r\n  <h1>Why</h1>\r\n  <p>Structured exception handling improves robustness and avoids leaving the application in an inconsistent state. It provides the application with more information regarding the encountered error and minimizes the risk of information disclosure.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Because your application can raise various types of exceptions, its exception handlers should be as specific and relevant as possible. To check if your application's exception handling is well structured: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all areas inside the code where exception handling is necessary. </strong>Locate the places within the code where exception handling needs to take place. If the function you will be executing throws a given exception, then you should catch that specific exception or its parental class. For instance, the following code raises <em>KeyStoreException</em>, <em>NoSuchAlgorithmException</em>, <em>CertificateException</em>, and <em>IOException</em>:</p>\r\n      <pre>keyStore = KeyStore.getInstance(\"JCEKS\");<br />FileInputStream keyStoreFile = new FileInputStream(getConfigPath() + keyStoreName);<br />keyStore.load(keyStoreFile, keyStorePass);<br />keyStoreFile.close();</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the important types of exceptions. </strong>Enumerate all possible types of exceptions that your application can throw. List the types of exceptions that hold a significant value and must be handled accordingly. For example, SQL/network exceptions would be handled differently than local I/O exceptions.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that all exception handlers are positioned appropriately. </strong>Make sure that all known exceptions are handled appropriately by either catching them explicitly or through their parental classes.<br /><br />If an exception is caught explicitly, its handler should be placed before the handler for its parental class. Explicit exceptions should be caught as close as possible to the code that raised them as&nbsp;this will allow more adequate handling and mitigation to take place. Example: </p>\r\n      <pre>try<br />{<br />      Class.forName(\"com.mysql.jdbc.Driver\").newInstance();<br />      dbConnection = DriverManager.getConnection(connectionString, dbCredentials);<br />}<br />catch(SQLException se)<br />{<br />      dbConnection = null;<br />      // Add logging}catch (Exception e)<br />{<br />      // Add logging<br />      throw new ApplicationCriticalException(\"Cannot connect to database server.\");<br />}</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the <em>try/catch</em> block should have multiple catch clauses to satisfy each type of exception. For example, if a <em>FileNotFoundException</em> and <em>UnsupportedCallbackException</em> are expected, then there should be an exception handler for each type of exception:</p>\r\n  <pre>try{<br />      ...<br />}<br />catch (FileNotFoundException fnf)<br />{<br />      logger.warning(fnf.toString());<br />}<br />catch (UnsupportedCallbackException uce)<br />{<br />      logger.warning(uce.toString());<br />}<br />finally<br />{<br />      //Execute clean-up routine<br />}</pre>\r\n  <p>\r\n    <strong>Note:</strong> The example above assumes that there is a global exception handling mechanism placed at the root of the code execution. <br /></p>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code shows part of an implementation of a JAAS Login Module. Because the code uses a single exception handler, the application cannot log the exception information appropriately.</p>\r\n  <pre>public boolean login() throws LoginException{<br /><br />      if(callbackHandler == null)<br />      {<br />            throw new LoginException(\"Authentication failed.\");<br />      }<br /><br />      // Prompt strings and echo flag not used in callbacks<br />      Callback[] callbacks = new Callback[2];<br />      callbacks[0] = new NameCallback(\"User: \");<br />      callbacks[1] = new PasswordCallback(\"Pass: \", false);<br /><br />      try<br />      {<br />            callbackHandler.handle(callbacks);<br />            NameCallback nameCall = (NameCallback)callbacks[0];<br />            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];<br /><br />            user = nameCall.getName();<br />            char[] tempPass = pwdCall.getPassword();<br />            if(tempPass == null)<br />            {<br />                  pass = null;<br />            }<br />            else<br />            {<br />                  pass = new char[tempPass.length];<br />                  common.copyArray(tempPass, pass);<br />            }<br /><br />            pwdCall.clearPassword();<br /><br />            // Verify credentials<br />            if(validUser())<br />            {<br />                  succeeded = true;<br />                  return true;<br />            }<br />            else<br />            {<br />                  succeeded = false;<br />                  clearCredentials();<br />                  throw new FailedLoginException(\"Authentication failed.\");<br />            }<br />      }<br /><br />      // The application has a single exception handler when<br />      // IOException and UnsupportedCallbackException are expected<br />      catch (Exception e)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br /><br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code shows part of an implementation of a JAAS Login Module. Because the code uses structured exception handling, the application can log the exception information appropriately.</p>\r\n  <pre>public boolean login() throws LoginException{<br /><br /><br />      if(callbackHandler == null)<br />      {<br />            throw new LoginException(\"Authentication failed.\");<br />      }<br /><br />      // Prompt strings and echo flag not used in callbacks<br />      Callback[] callbacks = new Callback[2];<br />      callbacks[0] = new NameCallback(\"User: \");<br />      callbacks[1] = new PasswordCallback(\"Pass: \", false);<br /><br />      try<br />      {<br />            callbackHandler.handle(callbacks);<br />            NameCallback nameCall = (NameCallback)callbacks[0];<br />            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];<br /><br />            user = nameCall.getName();<br />            char[] tempPass = pwdCall.getPassword();<br />            if(tempPass == null)<br />            {<br />                  pass = null;<br />            }<br />            else<br />            {<br />                  pass = new char[tempPass.length];<br />                  common.copyArray(tempPass, pass);<br />            }<br /><br />            pwdCall.clearPassword();<br /><br />            // Verify credentials<br />            if(validUser())<br />            {<br />                  succeeded = true;<br />                  return true;<br />            }<br />            else<br />            {<br />                  succeeded = false;<br />                  clearCredentials();<br />                  throw new FailedLoginException(\"Authentication failed.\");<br />            }<br />      }<br /><br /><br />      // The application uses structured exception handling for<br />      // the expected IOException and UnsupportedCallbackException<br />      catch (IOException ioe)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />      catch (UnsupportedCallbackException uce)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br /><br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />      catch (Exception e)<br />      {<br />            // Add appropriate logging and exception handling mechanisms.<br /><br />            // Consult the Logging section<br /><br />            throw new LoginException(\"Authentication failed.\");<br />      }<br />  }</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about Java exceptions, visit: <a href=\"http://java.sun.com/docs/books/tutorial/essential/exceptions/index.html\">Lesson: Exceptions</a> available from The Java Tutorials.</li>\r\n  </ul>\r\n  <h1>Java Error Handling Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/fceefe0c-900a-4c29-9c2e-ee662aa9e1f1\">Use Structured Exception Handling</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/3e815c74-4d57-4c1b-8446-750b319ea046\">Use a Global Exception Handler for Unhandled Exceptions</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/30abc3c9-d288-4e8a-a614-fd1a1f331270\">Do Not Disclose Valuable Information During Authentication Errors</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/56ad1852-7fc3-4d1f-b109-bbcce29170f7\">Do Not Disclose Exception Details to the Client</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/fd4b2a8a-db2d-4594-ba30-3ce5f63ad459\">Do Not Include Debug Data in Output</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/2739df30-b3da-417e-8856-2201a2b2a17a\">Structured Exception Handling Is Used</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c88e1b49-357d-4202-aafc-86ce0de485bd\">A Global Exception Handler Is Used for Unhandled Exceptions</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/e574d1d8-acae-4c64-90db-a0f6b98ca45f\">Valuable Information Is Not Disclosed During Authentication Errors</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d13e57d7-f6f5-4bd4-8629-26c45f9f029b\">Exception Details Are Not Disclosed to the Client</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d33cc3de-517c-4c84-95bd-24f14d9d99d6\">Debug Data Is Not Included in Output</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/5556fc17-3f60-4fc0-8717-0a2ff1c12701\">How to Test for Exception Information Disclosure Bugs in Java</a>\r\n    </li>\r\n  </ul>"
}