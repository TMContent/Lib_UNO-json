{
  "id": "5d5b6fe0-35da-4153-9e20-1931ab677a77",
  "checksum": "6d00aad9cf1c9d599bacd0a0f21f3cbdcb184ff0",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "pre",
      "pre"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "programmatic": [
      "p",
      "p",
      "p"
    ],
    "impersonation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "structured": [
      "p",
      "p"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "title"
    ],
    "handling": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "blockquote"
    ],
    "put": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "inside": [
      "p",
      "p"
    ],
    "try": [
      "p",
      "b",
      "p",
      "b"
    ],
    "blocks": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "catch": [
      "p",
      "b",
      "p",
      "p",
      "p",
      "b",
      "pre",
      "p",
      "b"
    ],
    "block": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "handle": [
      "p",
      "p"
    ],
    "exceptions": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "propagating": [
      "p",
      "p",
      "p"
    ],
    "finally": [
      "p",
      "b",
      "p",
      "p",
      "b",
      "b",
      "p",
      "b",
      "p",
      "b"
    ],
    "ensure": [
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "reverted": [
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "fails": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "user": [
      "p"
    ],
    "could": [
      "p"
    ],
    "filters": [
      "p",
      "p",
      "blockquote"
    ],
    "execute": [
      "p",
      "p"
    ],
    "runs": [
      "p"
    ],
    "under": [
      "p"
    ],
    "impersonated": [
      "p"
    ],
    "security": [
      "p"
    ],
    "context": [
      "p"
    ],
    "even": [
      "p",
      "p"
    ],
    "are": [
      "p",
      "blockquote"
    ],
    "reverting": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "particularly": [
      "p"
    ],
    "serious": [
      "p"
    ],
    "impersonates": [
      "p"
    ],
    "privileged": [
      "p"
    ],
    "account": [
      "p"
    ],
    "does": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "pre",
      "p"
    ],
    "higher": [
      "p",
      "p"
    ],
    "call": [
      "p",
      "p"
    ],
    "stack": [
      "p",
      "p"
    ],
    "can": [
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "executed": [
      "p",
      "p"
    ],
    "before": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "important": [
      "p"
    ],
    "guideline": [
      "p"
    ],
    "should": [
      "p"
    ],
    "followed": [
      "p"
    ],
    "wehnever": [
      "p"
    ],
    "working": [
      "p"
    ],
    "with": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "as": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "following": [
      "p"
    ],
    "example": [
      "p"
    ],
    "using": [
      "pre",
      "p"
    ],
    "systemsecurity.principal;.": [
      "pre"
    ],
    "windowsidentity": [
      "pre"
    ],
    "winidentity": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre"
    ],
    "windowsidentity\"username@domainname\");windowsimpersonationcontext": [
      "pre"
    ],
    "ctx": [
      "pre",
      "pre"
    ],
    "nulltry{": [
      "pre"
    ],
    "username@domainname": [
      "a"
    ],
    "&nbsp": [
      "pre"
    ],
    "winidentityimpersonate();&nbsp;": [
      "pre"
    ],
    "//": [
      "pre",
      "pre"
    ],
    "work&nbsp;": [
      "pre"
    ],
    "..}//": [
      "pre"
    ],
    "let": [
      "pre"
    ],
    "propagate": [
      "pre"
    ],
    "it": [
      "pre",
      "p"
    ],
    "herecatch(exception": [
      "pre"
    ],
    "ex{&nbsp;": [
      "pre"
    ],
    "..}finally{&nbsp;": [
      "pre"
    ],
    "stop": [
      "pre"
    ],
    "impersonating&nbsp;": [
      "pre"
    ],
    "ctxundo();}": [
      "pre"
    ],
    "by": [
      "p",
      "p",
      "blockquote"
    ],
    "make": [
      "p",
      "p"
    ],
    "token": [
      "p",
      "p"
    ],
    "removed": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p"
    ],
    "current": [
      "p"
    ],
    "thread": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "generated": [
      "p"
    ],
    "preventing": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "filter": [
      "p",
      "title"
    ],
    "while": [
      "p"
    ],
    "still": [
      "p"
    ],
    "has": [
      "p"
    ],
    "attatched": [
      "p"
    ],
    "note&nbsp&nbsp;&nbsp;exception": [
      "blockquote"
    ],
    "supported": [
      "blockquote"
    ],
    "microsoft": [
      "blockquote",
      "p"
    ],
    "intermediate": [
      "blockquote"
    ],
    "language": [
      "blockquote"
    ],
    "msil)": [
      "blockquote"
    ],
    "visual": [
      "blockquote"
    ],
    "basic": [
      "blockquote"
    ],
    "net.": [
      "blockquote"
    ],
    "note": [
      "b"
    ],
    "adapted": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "consider": [
      "title"
    ],
    "issues": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "p": [
      "If you use programmatic impersonation, use structured exception handling and put the impersonation code inside try blocks. Use a catch block to handle exceptions and to prevent exceptions propagating. Use a finally block to ensure that the impersonation is reverted.",
      "If your code fails to catch exceptions and your code uses impersonation, a malicious user could use exception filters to execute code that runs under the impersonated security context, even if you are reverting the impersonation in your finally block. This is particularly serious if your code impersonates a privileged account. If your code does not catch the exception, exception filters higher in the call stack can be executed before code in your finally block is executed.",
      "This is important guideline and should be followed wehnever working with programmatic impersonation.",
      "If you use programmatic impersonation, use structured exception handling and put the impersonation code inside try blocks. Use a catch block to handle exceptions and to prevent exceptions propagating. Use a finally block to ensure that the impersonation is reverted, as shown in the following example.",
      "By using a finally block, you make ensure that the impersonation token is removed from the current thread, even if an exception is generated. By preventing the exception from propagating from the catch block, you make sure that exception filter code higher in the call stack does not execute while the thread still has an impersonation token attatched to it.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "try",
      "catch",
      "finally",
      "finally",
      "finally",
      "try",
      "catch",
      "finally",
      "finally",
      "catch",
      "Note"
    ],
    "pre": [
      "using System.Security.Principal;. . .WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");WindowsImpersonationContext ctx = null;try{",
      "&nbsp; ctx = winIdentity.Impersonate();&nbsp; // Do work.&nbsp; ...}// Do not let the exception propagate. Catch it here.catch(Exception ex){&nbsp; ...}finally{&nbsp; // Stop impersonating.&nbsp; ctx.Undo();}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "username@domainName"
    ],
    "blockquote": [
      "Note&nbsp;&nbsp;&nbsp;Exception filters are supported by Microsoft Intermediate Language (MSIL) and Visual Basic .NET."
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "mailto:username@domainName",
      "text": "username@domainName"
    }
  ],
  "html": "<h1>What to Do</h1>\n  <p>If you use programmatic impersonation, use structured exception handling and put the impersonation code inside <b>try</b> blocks. Use a <b>catch</b> block to handle exceptions and to prevent exceptions propagating. Use a <b>finally</b> block to ensure that the impersonation is reverted.</p>\n  <h1>Why</h1>\n  <p>If your code fails to catch exceptions and your code uses impersonation, a malicious user could use exception filters to execute code that runs under the impersonated security context, even if you are reverting the impersonation in your <b>finally</b> block. This is particularly serious if your code impersonates a privileged account. If your code does not catch the exception, exception filters higher in the call stack can be executed before code in your <b>finally</b> block is executed.</p>\n  <h1>When</h1>\n  <p>This is important guideline and should be followed wehnever working with programmatic impersonation.</p>\n  <h1>How</h1>\n  <p>If you use programmatic impersonation, use structured exception handling and put the impersonation code inside <b>try</b> blocks. Use a <b>catch</b> block to handle exceptions and to prevent exceptions propagating. Use a <b>finally</b> block to ensure that the impersonation is reverted, as shown in the following example.</p>\n  <pre>using System.Security.Principal;<br />. . .<br />WindowsIdentity winIdentity = new WindowsIdentity(\"<a href=\"mailto:username@domainName\">username@domainName</a>\");<br />WindowsImpersonationContext ctx = null;<br />try<br />{</pre>\n  <pre>&amp;nbsp; ctx = winIdentity.Impersonate();<br />&amp;nbsp; // Do work.<br />&amp;nbsp; ...<br />}<br />// Do not let the exception propagate. Catch it here.<br />catch(Exception ex)<br />{<br />&amp;nbsp; ...<br />}<br />finally<br />{<br />&amp;nbsp; // Stop impersonating.<br />&amp;nbsp; ctx.Undo();<br />}  </pre>\n  <p>By using a <b>finally</b> block, you make ensure that the impersonation token is removed from the current thread, even if an exception is generated. By preventing the exception from propagating from the <b>catch</b> block, you make sure that exception filter code higher in the call stack does not execute while the thread still has an impersonation token attatched to it.</p>\n  <blockquote>\n    <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;Exception filters are supported by Microsoft Intermediate Language (MSIL) and Visual Basic .NET.</blockquote>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}