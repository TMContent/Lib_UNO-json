{
  "id": "5f511086-2219-4fc5-bd61-c41afc902a74",
  "checksum": "a1fcfc6e3bb48892973a17bddda432d82c9fbd7b",
  "words": {
    "35": [
      "ul",
      "li"
    ],
    "2008": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "microsoft®": [
      "ul",
      "li"
    ],
    "windows": [
      "ul",
      "li"
    ],
    "communication": [
      "ul",
      "li"
    ],
    "foundation": [
      "ul",
      "li"
    ],
    "wcf)": [
      "ul",
      "li"
    ],
    "microsoft": [
      "ul",
      "li",
      "p"
    ],
    "visual": [
      "ul",
      "li"
    ],
    "studio®": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1",
      "p"
    ],
    "ensure": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "does": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p"
    ],
    "trust": [
      "p",
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "passing": [
      "p",
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p"
    ],
    "attempt": [
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p"
    ],
    "cross-site": [
      "p",
      "p"
    ],
    "scripting": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "other": [
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p"
    ],
    "aim": [
      "p",
      "p"
    ],
    "exploit": [
      "p",
      "p"
    ],
    "application's": [
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p"
    ],
    "validating": [
      "p",
      "p"
    ],
    "helps": [
      "p"
    ],
    "reduce": [
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "risks": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p"
    ],
    "ensuring": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "received": [
      "p"
    ],
    "matches": [
      "p"
    ],
    "expected": [
      "p"
    ],
    "format input": [
      "p"
    ],
    "validation": [
      "p"
    ],
    "on": [
      "p"
    ],
    "it's": [
      "p"
    ],
    "own": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "sufficient": [
      "p"
    ],
    "output": [
      "p"
    ],
    "encoding": [
      "p"
    ],
    "also": [
      "p"
    ],
    "needed": [
      "p"
    ],
    "fully": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "but": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p"
    ],
    "important": [
      "p"
    ],
    "step": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "both": [
      "p"
    ],
    "security": [
      "p"
    ],
    "reliability": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "all": [
      "p",
      "p"
    ],
    "should": [
      "p"
    ],
    "always": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p"
    ],
    "validated": [
      "p"
    ],
    "regardless": [
      "p"
    ],
    "of": [
      "p",
      "p"
    ],
    "source": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "data": [
      "p",
      "p",
      "p"
    ],
    "actually": [
      "p"
    ],
    "static": [
      "p",
      "p"
    ],
    "within": [
      "p"
    ],
    "scope": [
      "p"
    ],
    "local": [
      "p"
    ],
    "base": [
      "p"
    ],
    "could": [
      "p"
    ],
    "modified": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p"
    ],
    "user—even": [
      "p"
    ],
    "in": [
      "p"
    ],
    "database": [
      "p"
    ],
    "which": [
      "p"
    ],
    "supposed": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "check": [
      "p",
      "p",
      "p"
    ],
    "known": [
      "p"
    ],
    "good": [
      "p"
    ],
    "constrain": [
      "p",
      "p"
    ],
    "type": [
      "p",
      "p",
      "title"
    ],
    "length": [
      "p",
      "title"
    ],
    "format": [
      "p",
      "title"
    ],
    "range": [
      "p",
      "p",
      "p",
      "title"
    ],
    "if": [
      "p",
      "p"
    ],
    "client": [
      "p"
    ],
    "application": [
      "p",
      "p"
    ],
    "consumes": [
      "p"
    ],
    "wcf": [
      "p"
    ],
    "service": [
      "p"
    ],
    "web": [
      "p"
    ],
    "based": [
      "p"
    ],
    "use": [
      "p",
      "p"
    ],
    "aspnet": [
      "p"
    ],
    "validator": [
      "p"
    ],
    "controls": [
      "p",
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p"
    ],
    "regularexpressionvalidator": [
      "p"
    ],
    "rangevalidator": [
      "p"
    ],
    "customvalidator": [
      "p"
    ],
    "validate": [
      "p",
      "p",
      "title"
    ],
    "numeric": [
      "p",
      "p"
    ],
    "fields": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "p"
    ],
    "are": [
      "p"
    ],
    "using": [
      "p"
    ],
    "server": [
      "p"
    ],
    "regular": [
      "p"
    ],
    "expressions": [
      "p"
    ],
    "regex": [
      "p"
    ],
    "class": [
      "p"
    ],
    "ranges": [
      "p"
    ],
    "converting": [
      "p"
    ],
    "value": [
      "p"
    ],
    "integer": [
      "p"
    ],
    "or": [
      "p"
    ],
    "double": [
      "p"
    ],
    "then": [
      "p"
    ],
    "performing": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "operation": [
      "title"
    ],
    "parameters": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "ul": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5 \r\nMicrosoft Visual Studio® 2008"
    ],
    "li": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5",
      "Microsoft Visual Studio® 2008"
    ],
    "p": [
      "Ensure that your code does not trust any input.",
      "An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities.  Validating input helps to reduce these risks by ensuring that the input received matches the expected format. Input validation on it's own is not sufficient; output encoding is also needed to fully prevent these attacks, but it is an important step for both security and reliability.",
      "All input should always be validated, regardless of source.  Unless data is actually static within the scope of the local code base, it could be modified by a malicious user—even data in a database which is supposed to be static.",
      "Check for known good data and constrain input by validating it for type, length, format, and range. Do not trust any input. An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities.",
      "If the client application that consumes your WCF service is a Web based application, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class. You can validate numeric ranges by converting the input value to an integer or double and then performing a range check.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "br": [
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \r\n<li>Microsoft Visual Studio® 2008</li></li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Ensure that your code does not trust any input. </p>\r\n  <h1>Why</h1>\r\n  <p>An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities.&nbsp; Validating input helps to reduce these risks by ensuring that the input received matches the expected format.&nbsp;Input validation on it's own is not sufficient; output encoding is also needed to fully prevent these attacks, but it is an important step for both security and reliability.&nbsp; </p>\r\n  <h1>When</h1>\r\n  <p>All input should always be validated, regardless of source.&nbsp; Unless data is actually static within the scope of the local code base, it could be modified by a malicious user—even data in a database which is supposed to be static.&nbsp;</p>\r\n  <h1>How</h1>\r\n  <p>Check for known good data and constrain input by validating it for type, length, format, and range. Do not trust any input. An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities.</p>\r\n  <p>If the client application that consumes your WCF service is a Web based application, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class. You can validate numeric ranges by converting the input value to an integer or double and then performing a range check.<br /></p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}