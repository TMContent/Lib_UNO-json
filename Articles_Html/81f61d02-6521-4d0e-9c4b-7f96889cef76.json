{
  "id": "81f61d02-6521-4d0e-9c4b-7f96889cef76",
  "checksum": "0c57ae4370402608aa4268e567ec5fe4e3d6f6fc",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "windows": [
      "ul",
      "li",
      "p",
      "p",
      "title"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "create": [
      "p",
      "title"
    ],
    "files": [
      "p",
      "p",
      "p",
      "title"
    ],
    "safely": [
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "allowing": [
      "p"
    ],
    "user": [
      "p"
    ],
    "input": [
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "lpfilename": [
      "p",
      "p"
    ],
    "parameter": [
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "createfile)": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "lead": [
      "p"
    ],
    "creation": [
      "p"
    ],
    "or": [
      "p"
    ],
    "opening": [
      "p"
    ],
    "unexpected": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "objects": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "apply": [
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "guideline": [
      "p"
    ],
    "whenever": [
      "p"
    ],
    "creating": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "programmatically": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "systems": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "assure": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "created": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "review": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p"
    ],
    "search": [
      "ol",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "li",
      "p"
    ],
    "calls": [
      "ol",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p"
    ],
    "validate": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "file": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p"
    ],
    "handles": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "use": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "getfiletype)": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "ensure": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "you": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "a": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "instead": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "some": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "other": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "object": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "calling": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "getfiletype": [
      "ol",
      "li",
      "p"
    ],
    "hfile": [
      "ol",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "return": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "li",
      "p"
    ],
    "createfile)),": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "h1"
    ],
    "below": [
      "p"
    ],
    "createfile": [
      "p",
      "pre",
      "pre"
    ],
    "and": [
      "p"
    ],
    "passing": [
      "p"
    ],
    "command": [
      "p"
    ],
    "line": [
      "p"
    ],
    "argument": [
      "p"
    ],
    "argv[1])": [
      "p"
    ],
    "into": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "exploit": [
      "p"
    ],
    "force": [
      "p"
    ],
    "your": [
      "p"
    ],
    "application": [
      "p"
    ],
    "open": [
      "p"
    ],
    "an": [
      "p"
    ],
    "than": [
      "p"
    ],
    "int": [
      "pre",
      "pre"
    ],
    "mainint": [
      "pre",
      "pre"
    ],
    "argc": [
      "pre",
      "pre"
    ],
    "char": [
      "pre",
      "pre"
    ],
    "*argv]){": [
      "pre",
      "pre"
    ],
    "handle": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre"
    ],
    "argv1],": [
      "pre",
      "pre"
    ],
    "generic_read": [
      "pre",
      "pre"
    ],
    "|": [
      "pre",
      "pre"
    ],
    "generic_write": [
      "pre",
      "pre"
    ],
    "null": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "create_always": [
      "pre",
      "pre"
    ],
    "file_attribute_normal": [
      "pre",
      "pre"
    ],
    "null;}": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "null;": [
      "pre"
    ],
    "if": [
      "pre"
    ],
    "getfiletype(hfile)": [
      "pre"
    ],
    "!=": [
      "pre"
    ],
    "file_type_disk": [
      "pre"
    ],
    "{  //": [
      "pre"
    ],
    "error": [
      "pre"
    ],
    "handling  closehandlehfile);": [
      "pre"
    ],
    "}}": [
      "pre"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "ul": [
      "C++\n    Windows"
    ],
    "li": [
      "C++",
      "Windows",
      "Review code. Search for all calls to the CreateFile() function.",
      "Validate file handles. Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created."
    ],
    "p": [
      "Create files safely.",
      "Allowing user input in the lpFileName parameter of CreateFile() can lead to the creation or opening of unexpected objects.",
      "Apply this guideline whenever creating files programmatically on Windows systems.",
      "Perform the following actions to assure that files are created safely on Windows:",
      "Review code. Search for all calls to the CreateFile() function.",
      "Validate file handles. Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created.",
      "In the code example below, the code is calling CreateFile and passing a command line argument (argv[1]) into the lpFileName parameter. A malicious attacker can exploit this code to force your application to open an unexpected object other than a file.",
      "Use GetFileType() to ensure that you are creating a file instead of some other unexpected object."
    ],
    "ol": [
      "Review code. Search for all calls to the CreateFile() function.\n    \n    \n      \n        Validate file handles. Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created."
    ],
    "strong": [
      "Review code.",
      "Validate file handles."
    ],
    "pre": [
      "int main(int argc, char *argv[]){    HANDLE hFile = CreateFile(      argv[1],      GENERIC_READ | GENERIC_WRITE,      NULL,      NULL,      CREATE_ALWAYS,      FILE_ATTRIBUTE_NORMAL,      NULL);}",
      "int main(int argc, char *argv[]){    HANDLE hFile = CreateFile(      argv[1],      GENERIC_READ | GENERIC_WRITE,      NULL,      NULL,      CREATE_ALWAYS,      FILE_ATTRIBUTE_NORMAL,      NULL);   if (GetFileType(hFile) != FILE_TYPE_DISK)   {  // Error Handling  CloseHandle(hFile);   }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n    <li>Windows</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Create files safely.</p>\n  <h1>Why</h1>\n  <p>Allowing user input in the lpFileName parameter of CreateFile() can lead to the creation or opening of unexpected objects.</p>\n  <h1>When</h1>\n  <p>Apply this guideline whenever creating files programmatically on Windows systems.</p>\n  <h1>How</h1>\n  <p>Perform the following actions to assure that files are created safely on Windows:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Review code.</strong> Search for all calls to the CreateFile() function.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Validate file handles.</strong> Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created.</p>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>In the code example below, the code is calling CreateFile and passing a command line argument (argv&#91;1&#93;) into the lpFileName parameter. A malicious attacker can exploit this code to force your application to open an unexpected object other than a file.</p>\n  <pre>int main(int argc, char &#42;argv&#91;&#93;)<br />&#123;<br />&nbsp;&nbsp;&nbsp; HANDLE hFile = CreateFile(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; argv&#91;1&#93;,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_READ &#124; GENERIC_WRITE,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_ALWAYS,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_ATTRIBUTE_NORMAL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL);<br />&#125;</pre>\n  <h1>Solution Example</h1>\n  <p>Use GetFileType() to ensure that you are creating a file instead of some other unexpected object.</p>\n  <pre>int main(int argc, char &#42;argv&#91;&#93;)<br />&#123;<br />&nbsp;&nbsp;&nbsp; HANDLE hFile = CreateFile(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; argv&#91;1&#93;,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_READ &#124; GENERIC_WRITE,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_ALWAYS,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_ATTRIBUTE_NORMAL,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL);<br />&nbsp;&nbsp; if (GetFileType(hFile) &#33;= FILE_TYPE_DISK)<br />&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;// Error Handling<br />&nbsp;&nbsp;CloseHandle(hFile);<br />&nbsp;&nbsp; &#125;<br />&#125;</pre>"
}