{
  "id": "bc10306c-f37c-4780-a096-847070ae67da",
  "checksum": "fba8f63f61c90bdc1663324d3b91ca07aec2bd00",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "h1",
      "p",
      "h1"
    ],
    "for": [
      "h1",
      "p",
      "ul",
      "li",
      "a"
    ],
    "ensure": [
      "p",
      "p",
      "pre"
    ],
    "structured": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "handling": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "title"
    ],
    "used": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "catch": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "error": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "conditions": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "using": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "helps": [
      "p"
    ],
    "protect": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "from": [
      "p",
      "pre",
      "p"
    ],
    "denial": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p"
    ],
    "service": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "and&nbspcan": [
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "fail": [
      "p",
      "p",
      "p",
      "p"
    ],
    "securely&nbsp;for": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p"
    ],
    "impersonation": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "return": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "ul",
      "li",
      "a"
    ],
    "lower": [
      "p"
    ],
    "privilege": [
      "p"
    ],
    "level": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "event": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "error&nbsp;exception": [
      "p"
    ],
    "handling&nbspalso": [
      "p"
    ],
    "simplifies": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "de-clutters": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "which": [
      "p"
    ],
    "improves": [
      "p"
    ],
    "robustness": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "all": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p"
    ],
    "should": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "either&nbspbe": [
      "p"
    ],
    "enclosed": [
      "p",
      "p"
    ],
    "try/catch/finally": [
      "p",
      "p"
    ],
    "block": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p"
    ],
    "caught": [
      "p",
      "p"
    ],
    "by": [
      "p",
      "p"
    ],
    "global": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "handler&nbsp;": [
      "p"
    ],
    "while": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p"
    ],
    "exceptions": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "handle": [
      "p",
      "p",
      "p"
    ],
    "catching": [
      "p"
    ],
    "close": [
      "p",
      "pre"
    ],
    "source": [
      "p"
    ],
    "improve": [
      "p"
    ],
    "messages": [
      "p"
    ],
    "both": [
      "p"
    ],
    "user": [
      "p",
      "p"
    ],
    "experience": [
      "p"
    ],
    "debugging": [
      "p"
    ],
    "purposes&nbsp;&nbsp;": [
      "p"
    ],
    "try": [
      "p",
      "p"
    ],
    "statement": [
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p",
      "pre",
      "pre"
    ],
    "try&#123": [
      "p",
      "pre"
    ],
    "//error": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "prone": [
      "p",
      "pre"
    ],
    "code&#125": [
      "p",
      "pre",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "follow": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "pre"
    ],
    "want": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "including": [
      "p",
      "p"
    ],
    "resource": [
      "p"
    ],
    "cleanup": [
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "necessary": [
      "p"
    ],
    "condition": [
      "p",
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "work": [
      "p"
    ],
    "needed": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "state&nbsp;": [
      "p"
    ],
    "blocks": [
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "right": [
      "p"
    ],
    "place": [
      "p"
    ],
    "do": [
      "p",
      "pre"
    ],
    "logging": [
      "p"
    ],
    "and&nbspadd": [
      "p"
    ],
    "more": [
      "p"
    ],
    "information": [
      "p",
      "p"
    ],
    "existing": [
      "p"
    ],
    "exception&nbsp;": [
      "p"
    ],
    "most": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "rethrown": [
      "p"
    ],
    "so": [
      "p"
    ],
    "handlers": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "above": [
      "p"
    ],
    "react": [
      "p"
    ],
    "appropriately&nbsp;you": [
      "p"
    ],
    "only": [
      "p"
    ],
    "consume": [
      "p"
    ],
    "completely": [
      "p"
    ],
    "catchsomeexceptionclass": [
      "p",
      "pre"
    ],
    "e&#123;": [
      "p",
      "pre"
    ],
    "it": [
      "p"
    ],
    "ok": [
      "p"
    ],
    "try/finally": [
      "p",
      "p"
    ],
    "without": [
      "p"
    ],
    "especially": [
      "p"
    ],
    "cannot": [
      "p"
    ],
    "just": [
      "p"
    ],
    "need": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "run&nbsp;": [
      "p"
    ],
    "next": [
      "p"
    ],
    "create": [
      "p"
    ],
    "finally": [
      "p"
    ],
    "performs": [
      "p"
    ],
    "other": [
      "p",
      "pre"
    ],
    "operations": [
      "p"
    ],
    "occur": [
      "p"
    ],
    "regardless": [
      "p",
      "p"
    ],
    "whether": [
      "p"
    ],
    "succeeds": [
      "p"
    ],
    "fails": [
      "p",
      "p"
    ],
    "finally&#123": [
      "p",
      "pre"
    ],
    "//resource": [
      "p",
      "pre"
    ],
    "fix": [
      "h1"
    ],
    "thrown": [
      "p"
    ],
    "fail&nbsp;": [
      "p"
    ],
    "resources": [
      "p"
    ],
    "disposed": [
      "p"
    ],
    "properly": [
      "p"
    ],
    "handler": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "directly": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "aspnet": [
      "p",
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "connect": [
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p"
    ],
    "database&nbsp;": [
      "p",
      "p"
    ],
    "however": [
      "p"
    ],
    "wrapped": [
      "p",
      "p"
    ],
    "with": [
      "p",
      "p"
    ],
    "connection": [
      "p",
      "p",
      "pre"
    ],
    "times": [
      "p",
      "p"
    ],
    "out": [
      "p",
      "p"
    ],
    "then": [
      "p"
    ],
    "displays": [
      "p"
    ],
    "details": [
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "database": [
      "p"
    ],
    "protected": [
      "pre"
    ],
    "void": [
      "pre"
    ],
    "page_loadobject": [
      "pre"
    ],
    "sender": [
      "pre"
    ],
    "eventargs": [
      "pre"
    ],
    "e": [
      "pre"
    ],
    "&#123": [
      "pre",
      "pre"
    ],
    "sqlconnection": [
      "pre"
    ],
    "cn": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre"
    ],
    "sqlconnectionconfigurationmanager.connectionstrings&#91;\"mydbconn\"&#93;.tostring()))": [
      "pre"
    ],
    "sqlcommand": [
      "pre"
    ],
    "cmd": [
      "pre"
    ],
    "sqlcommand\"select": [
      "pre"
    ],
    "count&#42;)": [
      "pre"
    ],
    "authors\"": [
      "pre"
    ],
    "cn;": [
      "pre"
    ],
    "cnopen();": [
      "pre"
    ],
    "sqldatareader": [
      "pre"
    ],
    "rdr": [
      "pre"
    ],
    "cmdexecutereader(commandbehavior.closeconnection);": [
      "pre"
    ],
    "rdrread();": [
      "pre"
    ],
    "responsewrite(rdr&#91;0&#93;.tostring());&#9;": [
      "pre"
    ],
    "//read": [
      "pre"
    ],
    "value": [
      "pre"
    ],
    "&#125": [
      "pre"
    ],
    "&#125&nbsp;": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "handles": [
      "p"
    ],
    "gracefully": [
      "p"
    ],
    "systemdata.sqlclient;using": [
      "pre"
    ],
    "systemsecurity;sqlconnection": [
      "pre"
    ],
    "conn": [
      "pre"
    ],
    "sqlconnection\"...\");try&#123;": [
      "pre"
    ],
    "connopen();": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "some": [
      "pre"
    ],
    "operation": [
      "pre"
    ],
    "might": [
      "pre"
    ],
    "cause": [
      "pre"
    ],
    "calling": [
      "pre"
    ],
    "early": [
      "pre"
    ],
    "possible": [
      "pre"
    ],
    "connclose();": [
      "pre",
      "pre"
    ],
    "..": [
      "pre"
    ],
    "potentially": [
      "pre"
    ],
    "long": [
      "pre"
    ],
    "operations&#125;finally&#123;": [
      "pre"
    ],
    "conn.state==connectionstate.open)": [
      "pre"
    ],
    "closed&#125;": [
      "pre"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "unhandled": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Related Items"
    ],
    "p": [
      "Check to ensure structured exception handling is used to catch error conditions.",
      "Using exception handling helps to protect your application from denial of service attacks and&nbsp;can be used to fail securely.&nbsp;For instance, when using impersonation you can use exception handling to return to a lower privilege level in the event of an error.&nbsp;Exception handling&nbsp;also simplifies and de-clutters the application code, which improves robustness.",
      "All code in your application that may fail should either&nbsp;be enclosed in a Try/Catch/Finally block or caught by a global exception handler.&nbsp; While you should not catch exceptions that can not handle, catching exceptions close to the source can improve error messages both for user experience and debugging purposes.&nbsp;&nbsp;",
      "The code that may fail should be enclosed in a Try statement such as:",
      "Try&#123;    //error prone code&#125;",
      "",
      "A Catch block may follow the Try block if you want to execute error handling code including resource cleanup necessary in an error condition and any work needed to fail to a secure state.&nbsp; Catch blocks are the right place to do exception logging and&nbsp;add more information to the existing exception.&nbsp; In most cases you should rethrown the exception so that exception handlers above your code can react appropriately.&nbsp;You should only consume an exception if you can handle the error completely:",
      "Catch(SomeExceptionClass e)&#123;    //error handling code&#125;",
      "",
      "It is ok to use Try/Finally without a Catch block, especially when you cannot handle the exception and just need to make sure cleanup code is run.&nbsp; You should next create a Finally block that performs cleanup or any other operations that should occur regardless of whether the code succeeds or fails",
      "Finally&#123;    //resource cleanup code&#125;",
      "Use Try/Catch/Finally blocks to catch exceptions thrown by code that may fail.&nbsp; Use Try/Finally to ensure resources are disposed properly regardless of an error condition. Use a global error handler to catch exceptions not caught directly in the code.",
      "An ASP.NET application has code to connect to a SQL database.&nbsp; However, the code is not wrapped with an exception handler and when the connection times out the application fails, then displays exception details to the user including sensitive SQL database information.",
      "An ASP.NET application has code to connect to a SQL database.&nbsp; The code is wrapped with an exception handler and when the connection times out the application handles the error gracefully.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "Try&#123;    //error prone code&#125;",
      "Catch(SomeExceptionClass e)&#123;    //error handling code&#125;",
      "Finally&#123;    //resource cleanup code&#125;",
      "protected void Page_Load(object sender, EventArgs e)  &#123;      using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings&#91;\"MyDbConn\"&#93;.ToString()))      &#123;          SqlCommand cmd = new SqlCommand(\"SELECT COUNT(&#42;) FROM authors\", cn);          cn.Open();          SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection);          rdr.Read();          Response.Write(rdr&#91;0&#93;.ToString());&#9; //read a value      &#125;  &#125;&nbsp;",
      "using System.Data.SqlClient;using System.Security;SqlConnection conn = new SqlConnection(\"...\");try&#123;    conn.Open();    // Do some operation that might cause an exception.    // Calling Close as early as possible.    conn.Close();    // ... other potentially long operations.&#125;finally&#123;    if (conn.State==ConnectionState.Open)        conn.Close();  // ensure that the connection is closed.&#125;"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "Global Error Handlers are used to Catch Unhandled Exceptions\n      \n        Use Structured Exception Handling\n        \n          Use a Global Exception Handler for Unhandled Exceptions"
    ],
    "li": [
      "Global Error Handlers are used to Catch Unhandled Exceptions",
      "Use Structured Exception Handling",
      "Use a Global Exception Handler for Unhandled Exceptions"
    ],
    "a": [
      "Global Error Handlers are used to Catch Unhandled Exceptions",
      "Use Structured Exception Handling",
      "Use a Global Exception Handler for Unhandled Exceptions"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "/article/2e16a65a-25d2-4ea9-a513-e020d2408241",
      "text": "Global Error Handlers are used to Catch Unhandled Exceptions"
    },
    {
      "href": "/article/9557bf26-cc8e-4bcc-8588-3e07d127b4fc",
      "text": "Use Structured Exception Handling"
    },
    {
      "href": "/article/33a894ce-2061-4741-be92-1d063c9cf057",
      "text": "Use a Global Exception Handler for Unhandled Exceptions"
    }
  ],
  "html": "<h1>What to Check For</h1>\n  <p>Check to ensure structured exception handling is used to catch error conditions.</p>\n  <h1>Why</h1>\n  <p>Using exception handling helps to protect your application from denial of service attacks and&amp;nbsp;can be used to fail securely.&amp;nbsp;For instance, when using impersonation you can use exception handling to return to a lower privilege level in the event of an error.&amp;nbsp;Exception handling&amp;nbsp;also simplifies and de-clutters the application code, which improves robustness.</p>\n  <h1>How to Check</h1>\n  <p>All code in your application that may fail should either&amp;nbsp;be enclosed in a Try/Catch/Finally block or caught by a global exception handler.&amp;nbsp; While you should not catch exceptions that can not handle, catching exceptions close to the source can improve error messages both for user experience and debugging purposes.&amp;nbsp;&amp;nbsp;</p>\n  <p>The code that may fail should be enclosed in a Try statement such as:</p>\n  <p />\n  <pre>Try<br />&amp;#123;<br />    //error prone code<br />&amp;#125;</pre>\n  <p />\n  <p>A Catch block may follow the Try block if you want to execute error handling code including resource cleanup necessary in an error condition and any work needed to fail to a secure state.&amp;nbsp; Catch blocks are the right place to do exception logging and&amp;nbsp;add more information to the existing exception.&amp;nbsp; In most cases you should rethrown the exception so that exception handlers above your code can react appropriately.&amp;nbsp;You should only consume an exception if you can handle the error completely:</p>\n  <p />\n  <pre>Catch(SomeExceptionClass e)<br />&amp;#123;<br />    //error handling code<br />&amp;#125;</pre>\n  <p />\n  <p>It is ok to use Try/Finally without a Catch block, especially when you cannot handle the exception and just need to make sure cleanup code is run.&amp;nbsp; You should next create a Finally block that performs cleanup or any other operations that should occur regardless of whether the code succeeds or fails</p>\n  <p />\n  <pre>Finally<br />&amp;#123;<br />    //resource cleanup code<br />&amp;#125;</pre>\n  <h1>How to Fix</h1>\n  <p>Use Try/Catch/Finally blocks to catch exceptions thrown by code that may fail.&amp;nbsp; Use Try/Finally to ensure resources are disposed properly regardless of an error condition. Use a global error handler to catch exceptions not caught directly in the code.</p>\n  <h1>Problem Example</h1>\n  <p>An ASP.NET application has code to connect to a SQL database.&amp;nbsp; However, the code is not wrapped with an exception handler and when the connection times out the application fails, then displays exception details to the user including sensitive SQL database information.</p>\n  <pre>  protected void Page_Load(object sender, EventArgs e)<br />  &amp;#123;<br />      using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings&amp;#91;\"MyDbConn\"&amp;#93;.ToString()))<br />      &amp;#123;<br />          SqlCommand cmd = new SqlCommand(\"SELECT COUNT(&amp;#42;) FROM authors\", cn);<br />          cn.Open();<br />          SqlDataReader rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection);<br />          rdr.Read();<br />          Response.Write(rdr&amp;#91;0&amp;#93;.ToString());<br />&amp;#9; //read a value<br />      &amp;#125;<br />  &amp;#125;&amp;nbsp;</pre>\n  <h1>Solution Example</h1>\n  <p>An ASP.NET application has code to connect to a SQL database.&amp;nbsp; The code is wrapped with an exception handler and when the connection times out the application handles the error gracefully.</p>\n  <pre>using System.Data.SqlClient;<br />using System.Security;<br />SqlConnection conn = new SqlConnection(\"...\");<br />try&amp;#123;<br />    conn.Open();<br />    // Do some operation that might cause an exception.<br />    // Calling Close as early as possible.<br />    conn.Close();<br />    // ... other potentially long operations.<br />&amp;#125;<br />finally&amp;#123;<br />    if (conn.State==ConnectionState.Open)<br />        conn.Close();<br />  // ensure that the connection is closed.<br />&amp;#125;</pre>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/2e16a65a-25d2-4ea9-a513-e020d2408241\">Global Error Handlers are used to Catch Unhandled Exceptions</a>\n      <li>\n        <a href=\"/article/9557bf26-cc8e-4bcc-8588-3e07d127b4fc\">Use Structured Exception Handling</a>\n        <li>\n          <a href=\"/article/33a894ce-2061-4741-be92-1d063c9cf057\">Use a Global Exception Handler for Unhandled Exceptions</a>\n        </li>\n      </li>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
}