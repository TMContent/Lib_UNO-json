{
  "id": "7f8deb21-cd52-41be-80b4-8897612021dc",
  "checksum": "c3705b58226d86d1cd4c204350570e74de364f62",
  "words": {
    "0": [
      "pre"
    ],
    "1": [
      "ul",
      "li",
      "a"
    ],
    "2": [
      "ul",
      "li",
      "a"
    ],
    "8": [
      "pre",
      "pre"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "check": [
      "h1",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "for": [
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "title"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "p",
      "pre",
      "pre"
    ],
    "has": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "been": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "passed": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "through": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p"
    ],
    "validation": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "routine": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "all": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "external": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "sources": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "should": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "validated": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "why": [
      "h1"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "can": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "p"
    ],
    "lead": [
      "p"
    ],
    "cross-site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "sql": [
      "p",
      "p"
    ],
    "injection": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "directory": [
      "p"
    ],
    "traversals": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "h1"
    ],
    "other": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "vulnerabilities": [
      "p"
    ],
    "which": [
      "p"
    ],
    "would": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p"
    ],
    "gain": [
      "p"
    ],
    "unauthorized": [
      "p"
    ],
    "access": [
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "data": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "h1",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "how": [
      "h1",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "take": [
      "p",
      "p"
    ],
    "via": [
      "p",
      "p"
    ],
    "various": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "ways": [
      "p",
      "p"
    ],
    "such": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "web": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "interface": [
      "p",
      "p"
    ],
    "database": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "file": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "system": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "or": [
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p"
    ],
    "software": [
      "p",
      "p"
    ],
    "running": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "on": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "server": [
      "p",
      "p"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "following": [
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "steps": [
      "p",
      "p"
    ],
    "establish": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "strategy": [
      "p",
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "li",
      "a"
    ],
    "at": [
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "design": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "time": [
      "ol",
      "li",
      "p"
    ],
    "potential": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "once": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "p"
    ],
    "scour": [
      "ol",
      "li",
      "p"
    ],
    "source": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "discover": [
      "ol",
      "li",
      "p"
    ],
    "may": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "missed": [
      "ol",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "typically": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "url": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "based": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "parameters": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "form": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "hidden": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "fields": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "cookies": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "http": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "headers": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "host,": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "accept": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "types": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "www": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "authentication": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "cache": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "settings": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "encodings": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "etc": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "local": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "filesystem": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "services": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "javascript": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "variables": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "upload": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "attributes": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "filename,": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "size": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "dns": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "results": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "host": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "names": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "component": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "call": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "return": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "values": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "com,": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "ajax": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "activex": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "you": [
      "ol",
      "li",
      "p"
    ],
    "know the": [
      "ol",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "receive": [
      "ol",
      "li",
      "p"
    ],
    "look": [
      "ol",
      "li",
      "p"
    ],
    "entry": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "points": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "good": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "starting": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "method": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "assignment": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "statements": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "p",
      "h1",
      "h1"
    ],
    "this": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "uses": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "searchterm": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "em",
      "pre",
      "p",
      "em",
      "pre",
      "p",
      "em",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "variable": [
      "ol",
      "li",
      "p"
    ],
    "void": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "aggregatedataprintwriter": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "out": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "string": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "..double[]": [
      "ol",
      "li",
      "pre"
    ],
    "rdata": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "em",
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "commonquerydbforindex(searchterm);": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "stores": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "get": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "request": [
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "parameter": [
      "ol",
      "li",
      "p"
    ],
    "named": [
      "ol",
      "li",
      "p"
    ],
    "index": [
      "ol",
      "li",
      "p",
      "em",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "it": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "ensure": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong"
    ],
    "requestgetparameter(\"index\");": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "was": [
      "ol",
      "li",
      "p"
    ],
    "gathered": [
      "ol",
      "li",
      "p"
    ],
    "above": [
      "ol",
      "li",
      "p"
    ],
    "store": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "more": [
      "ol",
      "li",
      "p"
    ],
    "verify": [
      "ol",
      "li",
      "p"
    ],
    "before": [
      "ol",
      "li",
      "p"
    ],
    "also": [
      "ol",
      "li",
      "p"
    ],
    "another": [
      "ol",
      "li",
      "p"
    ],
    "double]": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "trace": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "sink": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "each": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "immediate": [
      "ol",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "final": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "destination": [
      "ol",
      "li",
      "p"
    ],
    "memory": [
      "ol",
      "li",
      "p"
    ],
    "hard": [
      "ol",
      "li",
      "p"
    ],
    "drive": [
      "ol",
      "li",
      "p"
    ],
    "sent": [
      "ol",
      "li",
      "p"
    ],
    "over": [
      "ol",
      "li",
      "p"
    ],
    "network": [
      "ol",
      "li",
      "p"
    ],
    "stored": [
      "ol",
      "li",
      "p"
    ],
    "routines": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "associated": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "ideally": [
      "ol",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "li",
      "p"
    ],
    "occur": [
      "ol",
      "li",
      "p"
    ],
    "soon": [
      "ol",
      "li",
      "p"
    ],
    "reaches": [
      "ol",
      "li",
      "p"
    ],
    "shared": [
      "ol",
      "li",
      "p"
    ],
    "better": [
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "p"
    ],
    "many": [
      "ol",
      "li",
      "p"
    ],
    "throughout": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "consolidation": [
      "ol",
      "li",
      "p"
    ],
    "aid": [
      "ol",
      "li",
      "p"
    ],
    "testing": [
      "ol",
      "li",
      "p",
      "h1"
    ],
    "reduce": [
      "ol",
      "li",
      "p"
    ],
    "chance": [
      "ol",
      "li",
      "p"
    ],
    "one-off": [
      "ol",
      "li",
      "p"
    ],
    "bugs": [
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "if": [
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "any": [
      "ol",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "flag": [
      "ol",
      "li",
      "p"
    ],
    "fixing": [
      "ol",
      "li",
      "p"
    ],
    "quality": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "validators": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "length": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "range": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "format": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "type": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "first": [
      "ol",
      "li",
      "p"
    ],
    "whitelisting": [
      "ol",
      "li",
      "p"
    ],
    "then": [
      "ol",
      "li",
      "p"
    ],
    "known": [
      "ol",
      "li",
      "p"
    ],
    "malicious": [
      "ol",
      "li",
      "p"
    ],
    "blacklisting": [
      "ol",
      "li",
      "p"
    ],
    "do": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "rely": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "client-side": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "alone": [
      "ol",
      "li",
      "p"
    ],
    "bypassed": [
      "ol",
      "li",
      "p"
    ],
    "easily": [
      "ol",
      "li",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "trust": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "boundary": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "notion": [
      "ol",
      "li",
      "p"
    ],
    "generated": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "untrusted": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "one": [
      "ol",
      "li",
      "p"
    ],
    "point": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "application that": [
      "ol",
      "li",
      "p"
    ],
    "potentially": [
      "ol",
      "li",
      "p"
    ],
    "used": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "break": [
      "ol",
      "li",
      "p"
    ],
    "security": [
      "ol",
      "li",
      "p"
    ],
    "model": [
      "ol",
      "li",
      "p"
    ],
    "enumerate": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "li",
      "p"
    ],
    "note": [
      "ol",
      "li",
      "p"
    ],
    "expected": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "input at each": [
      "ol",
      "li",
      "p"
    ],
    "related": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "understand": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "handle": [
      "ol",
      "li",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "process": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "after": [
      "ol",
      "li",
      "p"
    ],
    "identifying": [
      "ol",
      "li",
      "p"
    ],
    "different": [
      "ol",
      "li",
      "p"
    ],
    "define": [
      "ol",
      "li",
      "p"
    ],
    "that should": [
      "ol",
      "li",
      "p"
    ],
    "provided": [
      "ol",
      "li",
      "p"
    ],
    "create": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "set": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "build": [
      "ol",
      "li",
      "p"
    ],
    "validator": [
      "ol",
      "li",
      "p"
    ],
    "centralize": [
      "ol",
      "li",
      "p"
    ],
    "helps": [
      "ol",
      "li",
      "p"
    ],
    "strengthen": [
      "ol",
      "li",
      "p"
    ],
    "limiting": [
      "ol",
      "li",
      "p"
    ],
    "amount": [
      "ol",
      "li",
      "p"
    ],
    "scattered": [
      "ol",
      "li",
      "p"
    ],
    "place": [
      "ol",
      "li",
      "p"
    ],
    "outside": [
      "ol",
      "li",
      "p"
    ],
    "world": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "produces": [
      "p",
      "p"
    ],
    "analysis": [
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "financial": [
      "p",
      "p"
    ],
    "unfortunately": [
      "p"
    ],
    "validates": [
      "p",
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "user's": [
      "p"
    ],
    "but": [
      "p"
    ],
    "returned": [
      "p",
      "pre",
      "pre"
    ],
    "therefore": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "integer": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "overflow": [
      "p"
    ],
    "harm": [
      "p"
    ],
    "business": [
      "p",
      "pre",
      "pre"
    ],
    "logic": [
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "generating": [
      "p"
    ],
    "import": [
      "pre",
      "pre"
    ],
    "javaio.*;import": [
      "pre",
      "pre"
    ],
    "javautil.*;import": [
      "pre",
      "pre"
    ],
    "javalang.*;import": [
      "pre",
      "pre"
    ],
    "javaxservlet.*;import": [
      "pre",
      "pre"
    ],
    "javaxservlet.http.*;import": [
      "pre",
      "pre"
    ],
    "javautil.regex.*;public": [
      "pre",
      "pre"
    ],
    "class": [
      "pre",
      "pre"
    ],
    "dataaggregator": [
      "pre",
      "pre"
    ],
    "extends": [
      "pre",
      "pre"
    ],
    "httpservlet{": [
      "pre",
      "pre"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "dogethttpservletrequest": [
      "pre",
      "pre"
    ],
    "httpservletresponse": [
      "pre",
      "pre"
    ],
    "response": [
      "pre",
      "pre"
    ],
    "throws": [
      "pre",
      "pre",
      "pre"
    ],
    "servletexception": [
      "pre",
      "pre"
    ],
    "ioexception": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "printwriter": [
      "pre",
      "pre"
    ],
    "responsegetwriter();": [
      "pre",
      "pre"
    ],
    "try": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "user-supplied": [
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "validatesearchterm(searchterm))": [
      "pre",
      "pre"
    ],
    "retstring": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"the": [
      "pre",
      "pre"
    ],
    "queried": [
      "pre",
      "pre"
    ],
    "\\\"\"": [
      "pre",
      "pre"
    ],
    "+=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encodehtmlsearchterm);": [
      "pre",
      "pre"
    ],
    "\"\\\"": [
      "pre",
      "pre"
    ],
    "produced": [
      "pre",
      "pre"
    ],
    "results<br>": [
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "outprintln(retstring);": [
      "pre",
      "pre"
    ],
    "aggregatedataout,": [
      "pre",
      "pre"
    ],
    "searchterm;": [
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre",
      "pre"
    ],
    "add": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "appropriate": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "logging": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "exception": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "handling": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "mechanisms": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "consult": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sections": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "outprintln(\"we": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "cannot": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "moment\"": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "+": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "please": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "again": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "later\");": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "catch": [
      "pre",
      "pre"
    ],
    "e": [
      "pre",
      "pre"
    ],
    "outflush();": [
      "pre",
      "pre"
    ],
    "outclose();": [
      "pre",
      "pre"
    ],
    "boolean": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "validatesearchtermstring": [
      "pre",
      "pre"
    ],
    "goodpattern": [
      "pre",
      "pre"
    ],
    "\"\\\\w|\\\\d)+\";": [
      "pre",
      "pre"
    ],
    "int": [
      "pre",
      "pre",
      "pre"
    ],
    "goodlength": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "==": [
      "pre",
      "pre"
    ],
    "null": [
      "pre",
      "pre"
    ],
    "false": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ifinput.length()": [
      "pre",
      "pre"
    ],
    "pattern": [
      "pre",
      "pre"
    ],
    "p": [
      "pre",
      "pre"
    ],
    "patterncompile(goodpattern);": [
      "pre",
      "pre"
    ],
    "matcher": [
      "pre",
      "pre"
    ],
    "m": [
      "pre",
      "pre"
    ],
    "pmatcher(input);": [
      "pre",
      "pre"
    ],
    "if!m.matches())": [
      "pre",
      "pre"
    ],
    "true": [
      "pre",
      "pre",
      "pre"
    ],
    "fails": [
      "pre"
    ],
    "validate": [
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "performs": [
      "pre",
      "pre"
    ],
    "certain": [
      "pre",
      "pre"
    ],
    "}}": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "since": [
      "p"
    ],
    "secured": [
      "p"
    ],
    "overflows": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "validaterawdbdata(rdata))": [
      "pre"
    ],
    "errmsg": [
      "pre"
    ],
    "\"business": [
      "pre"
    ],
    "executed\"": [
      "pre"
    ],
    "throw": [
      "pre"
    ],
    "new": [
      "pre"
    ],
    "exceptionerrmsg);": [
      "pre"
    ],
    "validaterawdbdatadouble[]": [
      "pre"
    ],
    "valid": [
      "pre",
      "pre",
      "pre"
    ],
    "i": [
      "pre",
      "pre"
    ],
    "inputlength;": [
      "pre"
    ],
    "i++": [
      "pre"
    ],
    "input[i]": [
      "pre"
    ],
    "00": [
      "pre"
    ],
    "||": [
      "pre"
    ],
    "inputi]": [
      "pre"
    ],
    "1000)": [
      "pre"
    ],
    "guidelines": [
      "h1"
    ],
    "filter": [
      "ul",
      "li",
      "a"
    ],
    "filename": [
      "ul",
      "li",
      "a"
    ],
    "path": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "filenames": [
      "ul",
      "li",
      "a"
    ],
    "paths": [
      "ul",
      "li",
      "a"
    ],
    "examples": [
      "h1"
    ],
    "using": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "jsf": [
      "ul",
      "li",
      "a"
    ],
    "springmvc": [
      "ul",
      "li",
      "a"
    ],
    "struts": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "esapi": [
      "ul",
      "li",
      "a"
    ],
    "executor": [
      "ul",
      "li",
      "a"
    ],
    "test": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "server-side": [
      "ul",
      "li",
      "a"
    ],
    "java": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "manipulation": [
      "ul",
      "li",
      "a"
    ],
    "double": [
      "ul",
      "li",
      "a"
    ],
    "encoding": [
      "ul",
      "li",
      "a"
    ],
    "bypass": [
      "ul",
      "li",
      "a"
    ],
    "underflow": [
      "ul",
      "li",
      "a"
    ],
    "deserialization": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Input and Data Validation Guidelines",
      "Input and Data Validation Checklists",
      "Input and Data Validation Code Examples",
      "Input and Data Validation Testing"
    ],
    "p": [
      "Check for input that has not been passed through a validation routine. All input from external sources should be validated.",
      "Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.",
      "An application can take input via various ways such as a web interface, database, file system or other software running on the server. Use the following steps to establish a validation strategy:",
      "Identify all sources of input. At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:",
      "Once you know the types of input from where your application may receive data, look for all entry points. Good starting points are method parameters and assignment statements. For example:",
      "This method uses the searchTerm variable:",
      "This assignment stores data from a GET request parameter named index and stores it in the string searchTerm. Ensure that this input is validated:",
      "This assignment uses the input that was gathered above to store more input from a database. Verify that searchTerm is validated before this use, and also ensure that rData is validated as another source of input.",
      "Trace data from source to sink. Trace each source of input from the immediate source through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.",
      "Identify validation routines. Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.",
      "Ensure quality of validators. Validation routines should check for length, range, format and type. Validation should first check for good data through whitelisting then for known malicious data through blacklisting. Do not rely on client-side validation alone as it can be bypassed easily.",
      "An application can take input via various ways: web interface, database, file system, other software running on the server, etc. Use the following steps to establish a validation strategy:",
      "Establish your application's trust boundary: The notion is that all input not generated by your application is untrusted.",
      "Identify all sources of input: An application can have various sources of input and each one is an entry point to your application that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input at each source. Potential sources of input in a web application typically include:",
      "Understand the input that your application can handle and process: After identifying the different entry points, define the format and type of input that should be provided through each entry point.",
      "Create a set of validators: Build a validator for each format and type of expected input. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.",
      "The following code produces a data analysis based on a financial index. Unfortunately, the application validates the user's input but not the returned data from the database. Therefore, the application is vulnerable to an integer overflow that can harm the business logic used in generating the data analysis.",
      "The following code produces a data analysis based on a financial index. Since the code validates all sources of input to the application, the application is secured from SQL injection and integer overflows."
    ],
    "ol": [
      "Identify all sources of input. At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:\r\n      \r\n        URL based parameters \r\n        Form based parameters \r\n        Hidden fields \r\n        Cookies \r\n        HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) \r\n        Local filesystem \r\n        Database \r\n        Other services running on the system \r\n        Javascript variables \r\n        File upload and attributes (filename, size, data, etc) \r\n        DNS results or host names \r\n        External component call return values (COM, AJAX, ActiveX) \r\n      \r\n      Once you know the types of input from where your application may receive data, look for all entry points. Good starting points are method parameters and assignment statements. For example: \r\n      This method uses the searchTerm variable:\r\n      void aggregateData(PrintWriter out, String searchTerm) ...double[] rData = common.queryDBForIndex(searchTerm);\r\n      This assignment stores data from a GET request parameter named index and stores it in the string searchTerm. Ensure that this input is validated:\r\n      String searchTerm = request.getParameter(\"index\");\r\n      This assignment uses the input that was gathered above to store more input from a database. Verify that searchTerm is validated before this use, and also ensure that rData is validated as another source of input.\r\n      double[] rData = common.queryDBForIndex(searchTerm);\r\n    \r\n    \r\n      \r\n        Trace data from source to sink. Trace each source of input from the immediate source through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.\r\n    \r\n    \r\n      \r\n        Identify validation routines. Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.\r\n    \r\n    \r\n      \r\n        Ensure quality of validators. Validation routines should check for length, range, format and type. Validation should first check for good data through whitelisting then for known malicious data through blacklisting. Do not rely on client-side validation alone as it can be bypassed easily.",
      "Establish your application's trust boundary: The notion is that all input not generated by your application is untrusted.\r\n    \r\n    \r\n      \r\n        Identify all sources of input: An application can have various sources of input and each one is an entry point to your application that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input at each source. Potential sources of input in a web application typically include:\r\n      \r\n        URL based parameters \r\n        Form based parameters \r\n        Hidden fields \r\n        Cookies \r\n        HTTP headers \r\n        Local filesystem \r\n        Database \r\n        Other related services\r\n      \r\n    \r\n    \r\n      \r\n        Understand the input that your application can handle and process: After identifying the different entry points, define the format and type of input that should be provided through each entry point. \r\n    \r\n    \r\n      \r\n      Create a set of validators: Build a validator for each format and type of expected input. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.",
      "URL based parameters \r\n        Form based parameters \r\n        Hidden fields \r\n        Cookies \r\n        HTTP headers \r\n        Local filesystem \r\n        Database \r\n        Other related services"
    ],
    "li": [
      "Identify all sources of input. At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:\r\n      \r\n        URL based parameters \r\n        Form based parameters \r\n        Hidden fields \r\n        Cookies \r\n        HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) \r\n        Local filesystem \r\n        Database \r\n        Other services running on the system \r\n        Javascript variables \r\n        File upload and attributes (filename, size, data, etc) \r\n        DNS results or host names \r\n        External component call return values (COM, AJAX, ActiveX) \r\n      \r\n      Once you know the types of input from where your application may receive data, look for all entry points. Good starting points are method parameters and assignment statements. For example: \r\n      This method uses the searchTerm variable:\r\n      void aggregateData(PrintWriter out, String searchTerm) ...double[] rData = common.queryDBForIndex(searchTerm);\r\n      This assignment stores data from a GET request parameter named index and stores it in the string searchTerm. Ensure that this input is validated:\r\n      String searchTerm = request.getParameter(\"index\");\r\n      This assignment uses the input that was gathered above to store more input from a database. Verify that searchTerm is validated before this use, and also ensure that rData is validated as another source of input.\r\n      double[] rData = common.queryDBForIndex(searchTerm);",
      "URL based parameters",
      "Form based parameters",
      "Hidden fields",
      "Cookies",
      "HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)",
      "Local filesystem",
      "Database",
      "Other services running on the system",
      "Javascript variables",
      "File upload and attributes (filename, size, data, etc)",
      "DNS results or host names",
      "External component call return values (COM, AJAX, ActiveX)",
      "Trace data from source to sink. Trace each source of input from the immediate source through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.",
      "Identify validation routines. Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.",
      "Ensure quality of validators. Validation routines should check for length, range, format and type. Validation should first check for good data through whitelisting then for known malicious data through blacklisting. Do not rely on client-side validation alone as it can be bypassed easily.",
      "Establish your application's trust boundary: The notion is that all input not generated by your application is untrusted.",
      "Identify all sources of input: An application can have various sources of input and each one is an entry point to your application that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input at each source. Potential sources of input in a web application typically include:\r\n      \r\n        URL based parameters \r\n        Form based parameters \r\n        Hidden fields \r\n        Cookies \r\n        HTTP headers \r\n        Local filesystem \r\n        Database \r\n        Other related services",
      "URL based parameters",
      "Form based parameters",
      "Hidden fields",
      "Cookies",
      "HTTP headers",
      "Local filesystem",
      "Database",
      "Other related services",
      "Understand the input that your application can handle and process: After identifying the different entry points, define the format and type of input that should be provided through each entry point.",
      "Create a set of validators: Build a validator for each format and type of expected input. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "strong": [
      "Identify all sources of input.",
      "Trace data from source to sink.",
      "Identify validation routines.",
      "Ensure quality of validators.",
      "Establish your application's trust boundary:",
      "Identify all sources of input",
      "Understand the input that your application can handle and process",
      "Create a set of validators"
    ],
    "ul": [
      "URL based parameters \r\n        Form based parameters \r\n        Hidden fields \r\n        Cookies \r\n        HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) \r\n        Local filesystem \r\n        Database \r\n        Other services running on the system \r\n        Javascript variables \r\n        File upload and attributes (filename, size, data, etc) \r\n        DNS results or host names \r\n        External component call return values (COM, AJAX, ActiveX)",
      "Validate Input from All Sources\r\n    \r\n    \r\n      Validate Input for Length, Range, Format, and Type\r\n    \r\n    \r\n      \r\n      \r\n      Validate All Input Passed to the Database\r\n    \r\n    \r\n      Filter All User-Supplied Filename and Path Input\r\n    \r\n    \r\n      Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated\r\n    \r\n    \r\n      Input Is Validated for Length, Range, Format and Type\r\n    \r\n    \r\n      All Database Input Is Validated\r\n    \r\n    \r\n      User-Supplied Filenames and Paths Are Validated\r\n    \r\n    \r\n      The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF\r\n    \r\n    \r\n      Input Validation Using SpringMVC\r\n    \r\n    \r\n      Input Validation Using Struts 1\r\n    \r\n    \r\n      Input Validation Using Struts 2\r\n    \r\n    \r\n      Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java\r\n    \r\n    \r\n      How to Test for Path Manipulation Bugs in Java\r\n    \r\n    \r\n      How to Test for Double Encoding Bugs in Java\r\n    \r\n    \r\n      How to Test for Client-side Validation Bypass Bugs in Java\r\n    \r\n    \r\n      How to Test for Integer Overflows in Java\r\n    \r\n    \r\n      How to Test for Integer Underflow Bugs in Java\r\n    \r\n    \r\n      How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "em": [
      "searchTerm",
      "GET",
      "index",
      "searchTerm",
      "searchTerm",
      "rData"
    ],
    "pre": [
      "void aggregateData(PrintWriter out, String searchTerm) ...double[] rData = common.queryDBForIndex(searchTerm);",
      "String searchTerm = request.getParameter(\"index\");",
      "double[] rData = common.queryDBForIndex(searchTerm);",
      "import java.io.*;import java.util.*;import java.lang.*;import javax.servlet.*;import javax.servlet.http.*;import java.util.regex.*;public final class DataAggregator extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            PrintWriter out = response.getWriter();            String searchTerm = request.getParameter(\"index\");            try            {                  // The application validates the user-supplied input                  if (validateSearchTerm(searchTerm))                  {                        String retString;                         retString = \"The queried index \\\"\";                        retString += encodeHtml(searchTerm);                        retString += \"\\\" produced the following results:<br> \";                        out.println(retString);                        aggregateData(out, searchTerm);                  }                  else                  {                        // Add the appropriate logging and exception handling                        // mechanisms. Consult the Exception Handling and                         // Logging sections                         out.println(\"We cannot handle your request at the moment.\"                                 + \" Please try again later.\");                  }            }            catch (Exception e)            {                  // Add the appropriate logging and exception handling                   // mechanisms. Consult the Exception Handling and                   // Logging sections                   out.println(\"We cannot handle your request at the moment.\"                           + \" Please try again later.\");            }            out.flush();            out.close();      }      boolean validateSearchTerm(String input)      {            String goodPattern = \"(\\\\w|\\\\d)+\";            int goodLength = 8;            if (input == null)            {                  return false;            }            if(input.length() > goodLength)            {                  return false;            }            Pattern p = Pattern.compile(goodPattern);            Matcher m = p.matcher(input);            if(!m.matches())            {                  return false;            }            return true;      }      void aggregateData(PrintWriter out, String searchTerm)      {            double[] rData = common.queryDBForIndex(searchTerm);            // The application fails to validate the returned            // data from the database            // Business logic that performs certain data analysis      }}",
      "import java.io.*;import java.util.*;import java.lang.*;import javax.servlet.*;import javax.servlet.http.*;import java.util.regex.*;public final class DataAggregator extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            PrintWriter out = response.getWriter();            String searchTerm = request.getParameter(\"index\");            try            {                  // The application validates the user-supplied input                  if (validateSearchTerm(searchTerm))                  {                        String retString;                         retString = \"The queried index \\\"\";                        retString += encodeHtml(searchTerm);                        retString += \"\\\" produced the following results:<br> \";                        out.println(retString);                        aggregateData(out, searchTerm);                  }                  else                  {                        // Add the appropriate logging and exception                        // handling mechanisms. Consult the Exception Handling                        // and Logging sections                         out.println(\"We cannot handle your request at the moment.\"                                 + \" Please try again later.\");                  }            }            catch (Exception e)            {                  // Add the appropriate logging and exception handling mechanisms                  // Consult the Exception Handling and Logging sections                   out.println(\"We cannot handle your request at the moment.\"                           + \" Please try again later.\");            }            out.flush();            out.close();      }      void aggregateData(PrintWriter out, String searchTerm) throws Exception      {            double[] rData = common.queryDBForIndex(searchTerm);            // The application validates the returned data from the database            if (validateRawDBData(rData))            {                  // Business logic that performs certain data analysis            }            else            {                  String errMsg = \"Business logic not executed\";                  throw new Exception(errMsg);            }      }      boolean validateSearchTerm(String input)      {            String goodPattern = \"(\\\\w|\\\\d)+\";            int goodLength = 8;            if (input == null)            {                  return false;            }            if(input.length() > goodLength)            {                  return false;            }            Pattern p = Pattern.compile(goodPattern);            Matcher m = p.matcher(input);            if(!m.matches())            {                  return false;            }            return true;      }      boolean validateRawDBData(double[] input)      {            boolean valid = true;            for (int i = 0; i < input.length; i++)            {                  if (input[i] < 0.0 || input[i] > 100.0)                  {                        valid = false;                  }            }            return valid;      }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "/article/b531d29c-86f7-4812-90ce-5f3f0f780aba",
      "text": "Validate Input from All Sources"
    },
    {
      "href": "/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d",
      "text": "Validate Input for Length, Range, Format, and Type"
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "\r\n      "
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "Validate All Input Passed to the Database"
    },
    {
      "href": "/article/a5491c44-164b-4046-94d3-b575b9745e8b",
      "text": "Filter All User-Supplied Filename and Path Input"
    },
    {
      "href": "/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8",
      "text": "Do Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/7f8deb21-cd52-41be-80b4-8897612021dc",
      "text": "Input from All Sources Is Validated"
    },
    {
      "href": "/article/61869793-2c10-40c0-b82a-babcc0312697",
      "text": "Input Is Validated for Length, Range, Format and Type"
    },
    {
      "href": "/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0",
      "text": "All Database Input Is Validated"
    },
    {
      "href": "/article/17884af0-fc83-412a-b613-4def4a6f84ad",
      "text": "User-Supplied Filenames and Paths Are Validated"
    },
    {
      "href": "/article/b1803c35-9579-4a38-9a63-30202160ef25",
      "text": "The Application Does Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/0f49430b-2abe-408f-b046-89fa739f5d53",
      "text": "Input Validation Using JSF"
    },
    {
      "href": "/article/18ac74df-602b-4a58-8998-52f638f3a045",
      "text": "Input Validation Using SpringMVC"
    },
    {
      "href": "/article/d124abb1-e230-43ef-8762-1caa0dbb89ca",
      "text": "Input Validation Using Struts 1"
    },
    {
      "href": "/article/2f917654-65a8-49c9-b000-c17f9765bf42",
      "text": "Input Validation Using Struts 2"
    },
    {
      "href": "/article/38342130-4e4b-47df-afd9-c7e8c86f77ee",
      "text": "Use ESAPI Executor"
    },
    {
      "href": "/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4",
      "text": "How to Test for Server-Side Code Injection in Java"
    },
    {
      "href": "/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0",
      "text": "How to Test for Path Manipulation Bugs in Java"
    },
    {
      "href": "/article/5c99da7b-b4eb-4315-b48c-ac2598c13144",
      "text": "How to Test for Double Encoding Bugs in Java"
    },
    {
      "href": "/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f",
      "text": "How to Test for Client-side Validation Bypass Bugs in Java"
    },
    {
      "href": "/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1",
      "text": "How to Test for Integer Overflows in Java"
    },
    {
      "href": "/article/ed20009a-59ef-415d-8e72-0ff3221a1346",
      "text": "How to Test for Integer Underflow Bugs in Java"
    },
    {
      "href": "/article/d7682043-0095-4700-97dd-01ce797c4ada",
      "text": "How to Test for Deserialization of Untrusted Data Bugs in Java"
    }
  ],
  "html": "<h1>What to Check For</h1>\r\n  <p>Check for input that has not been passed through a validation routine. All input from external sources should be validated.</p>\r\n  <h1>Why</h1>\r\n  <p>Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.</p>\r\n  <h1>How to Check</h1>\r\n  <p>An application can take input via various ways such as a web interface, database, file system or other software running on the server. Use the following steps to establish a validation strategy:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sources of input. </strong>At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:</p>\r\n      <ul>\r\n        <li>URL based parameters </li>\r\n        <li>Form based parameters </li>\r\n        <li>Hidden fields </li>\r\n        <li>Cookies </li>\r\n        <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) </li>\r\n        <li>Local filesystem </li>\r\n        <li>Database </li>\r\n        <li>Other services running on the system </li>\r\n        <li>Javascript variables </li>\r\n        <li>File upload and attributes (filename, size, data, etc) </li>\r\n        <li>DNS results or host names </li>\r\n        <li>External component call return values (COM, AJAX, ActiveX) </li>\r\n      </ul>\r\n      <p>Once you know&nbsp;the types of input from where your application may receive data, look for all entry points. Good starting points are method parameters and assignment statements. For example: </p>\r\n      <p>This method uses the <em>searchTerm</em> variable:</p>\r\n      <pre>void aggregateData(PrintWriter out, String searchTerm)<br /> ...<br />double[] rData = common.queryDBForIndex(searchTerm);</pre>\r\n      <p>This assignment stores data from a <em>GET</em> request parameter named <em>index</em> and stores it in the string <em>searchTerm</em>. Ensure that this input is validated:</p>\r\n      <pre>String searchTerm = request.getParameter(\"index\");</pre>\r\n      <p>This assignment uses the input that was gathered above to store more input from a database. Verify that <em>searchTerm</em> is validated before this use, and also ensure that <em>rData</em> is validated as another source of input.</p>\r\n      <pre>double[] rData = common.queryDBForIndex(searchTerm);</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Trace data from source to sink. </strong>Trace each source of input from the immediate source through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify validation routines. </strong>Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure quality of validators. </strong>Validation routines should check for length, range, format and type. Validation should first check for good data through whitelisting then for known malicious data through blacklisting. Do not rely on client-side validation alone as it can be bypassed easily.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>An application can take input via various ways: web interface, database, file system, other software running on the server, etc. Use the following steps to establish a validation strategy:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Establish your application's trust boundary:</strong> The notion is that all input not generated by your application is untrusted.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sources of input</strong>: An application can have various sources of input and each one is an entry point to your application&nbsp;that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input&nbsp;at&nbsp;each source. Potential sources of input in a web application typically include:</p>\r\n      <ol>\r\n        <li>URL based parameters </li>\r\n        <li>Form based parameters </li>\r\n        <li>Hidden fields </li>\r\n        <li>Cookies </li>\r\n        <li>HTTP headers </li>\r\n        <li>Local filesystem </li>\r\n        <li>Database </li>\r\n        <li>Other related services</li>\r\n      </ol>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Understand the input that your application can handle and process</strong>: After identifying the different entry points, define the format and type of input that&nbsp;should be provided through each entry point. </p>\r\n    </li>\r\n    <li>\r\n      <p />\r\n      <strong>Create a set of validators</strong>: Build a validator for each format and type of expected input. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators. </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code produces a data analysis based on a financial index. Unfortunately, the application validates the user's input but not the returned data from the database. Therefore, the application is vulnerable to an integer overflow that can harm the business logic used in generating the data analysis.</p>\r\n  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br /><br />            try<br />            {<br />                  // The application validates the user-supplied input<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                         retString = \"The queried index \\\"\";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += \"\\\" produced the following results:&lt;br&gt; \";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                         // Logging sections<br />                         out.println(\"We cannot handle your request at the moment.\"<br />                                 + \" Please try again later.\");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                   // mechanisms. Consult the Exception Handling and<br />                   // Logging sections <br />                  out.println(\"We cannot handle your request at the moment.\"<br />                           + \" Please try again later.\");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = \"(\\\\w|\\\\d)+\";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br /><br />      void aggregateData(PrintWriter out, String searchTerm)<br />      {<br />            double[] rData = common.queryDBForIndex(searchTerm);<br />            // The application fails to validate the returned<br />            // data from the database<br />            // Business logic that performs certain data analysis<br />      }<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code produces a data analysis based on a financial index. Since the code validates all sources of input to the application, the application is secured from SQL injection and integer overflows. <br /></p>\r\n  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br /><br />            try<br />            {<br />                  // The application validates the user-supplied input<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                         retString = \"The queried index \\\"\";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += \"\\\" produced the following results:&lt;br&gt; \";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception<br />                        // handling mechanisms. Consult the Exception Handling<br />                        // and Logging sections <br />                        out.println(\"We cannot handle your request at the moment.\"<br />                                 + \" Please try again later.\");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling mechanisms<br />                  // Consult the Exception Handling and Logging sections<br />                   out.println(\"We cannot handle your request at the moment.\"<br />                           + \" Please try again later.\");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      void aggregateData(PrintWriter out, String searchTerm) throws Exception<br />      {<br />            double[] rData = common.queryDBForIndex(searchTerm);<br /><br />            // The application validates the returned data from the database<br />            if (validateRawDBData(rData))<br />            {<br />                  // Business logic that performs certain data analysis<br />            }<br />            else<br />            {<br />                  String errMsg = \"Business logic not executed\";<br />                  throw new Exception(errMsg);<br />            }<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = \"(\\\\w|\\\\d)+\";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br /><br />      boolean validateRawDBData(double[] input)<br />      {<br />            boolean valid = true;<br /><br />            for (int i = 0; i &lt; input.length; i++)<br />            {<br />                  if (input[i] &lt; 0.0 || input[i] &gt; 100.0)<br />                  {<br />                        valid = false;<br />                  }<br />            }<br /><br />            return valid;<br />      }<br />}</pre>\r\n  <h1>Input and Data Validation Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/b531d29c-86f7-4812-90ce-5f3f0f780aba\">Validate Input from All Sources</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d\">Validate Input for Length, Range, Format, and Type</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">\r\n      </a>\r\n      <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">Validate All Input Passed to the Database</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/a5491c44-164b-4046-94d3-b575b9745e8b\">Filter All User-Supplied Filename and Path Input</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8\">Do Not Rely on Client-Side Validation</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/7f8deb21-cd52-41be-80b4-8897612021dc\">Input from All Sources Is Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/61869793-2c10-40c0-b82a-babcc0312697\">Input Is Validated for Length, Range, Format and Type</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0\">All Database Input Is Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/17884af0-fc83-412a-b613-4def4a6f84ad\">User-Supplied Filenames and Paths Are Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/b1803c35-9579-4a38-9a63-30202160ef25\">The Application Does Not Rely on Client-Side Validation</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Code Examples</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/0f49430b-2abe-408f-b046-89fa739f5d53\">Input Validation Using JSF</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/18ac74df-602b-4a58-8998-52f638f3a045\">Input Validation Using SpringMVC</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d124abb1-e230-43ef-8762-1caa0dbb89ca\">Input Validation Using Struts 1</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/2f917654-65a8-49c9-b000-c17f9765bf42\">Input Validation Using Struts 2</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/38342130-4e4b-47df-afd9-c7e8c86f77ee\">Use ESAPI Executor</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4\">How to Test for Server-Side Code Injection in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0\">How to Test for Path Manipulation Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/5c99da7b-b4eb-4315-b48c-ac2598c13144\">How to Test for Double Encoding Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f\">How to Test for Client-side Validation Bypass Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1\">How to Test for Integer Overflows in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/ed20009a-59ef-415d-8e72-0ff3221a1346\">How to Test for Integer Underflow Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d7682043-0095-4700-97dd-01ce797c4ada\">How to Test for Deserialization of Untrusted Data Bugs in Java</a>\r\n    </li>\r\n  </ul>"
}