{
  "id": "0bf6f129-8641-43f4-a29c-62f58493fb78",
  "checksum": "e9f254bd52006687cdb5121684dcd7a98a9a647a",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "font",
      "b",
      "a"
    ],
    "applications": [
      "p"
    ],
    "written": [
      "p"
    ],
    "using": [
      "p"
    ],
    "scala": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "a",
      "h1",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "h1",
      "ul",
      "li",
      "b",
      "a"
    ],
    "play": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "21.0": [
      "p"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "for": [
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "a",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "input": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "font",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "li",
      "font",
      "b",
      "a",
      "li",
      "font",
      "b",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "li",
      "font",
      "a",
      "b",
      "li",
      "b",
      "a",
      "li",
      "b",
      "a",
      "title"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "has": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "been": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "passed": [
      "p",
      "ul",
      "li",
      "font",
      "b",
      "a"
    ],
    "through": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "validation": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "h1",
      "ul",
      "li",
      "b",
      "a",
      "h1",
      "ul",
      "li",
      "b",
      "a"
    ],
    "routine": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "all": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "ul",
      "li",
      "font",
      "a",
      "b",
      "li",
      "b",
      "a",
      "title"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "font",
      "a",
      "b",
      "title"
    ],
    "external": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "sources": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "font",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "font",
      "a",
      "b",
      "title"
    ],
    "should": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "validated": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "font",
      "a",
      "b",
      "li",
      "b",
      "a",
      "li",
      "b",
      "a",
      "title"
    ],
    "why": [
      "h1"
    ],
    "is": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "font",
      "a",
      "b",
      "li",
      "b",
      "a",
      "li",
      "b",
      "a",
      "title"
    ],
    "can": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "lead": [
      "p"
    ],
    "cross-site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "sql": [
      "p"
    ],
    "injection": [
      "p"
    ],
    "directory": [
      "p"
    ],
    "traversals": [
      "p"
    ],
    "other": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vulnerabilities": [
      "p"
    ],
    "which": [
      "p"
    ],
    "would": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "attacker": [
      "p"
    ],
    "gain": [
      "p"
    ],
    "unauthorized": [
      "p"
    ],
    "access": [
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "data": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "h1",
      "h1"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "use": [
      "p"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "following": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "establish": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "strategy": [
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "font",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "application": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "b",
      "a"
    ],
    "take": [
      "ol",
      "li",
      "p"
    ],
    "via": [
      "ol",
      "li",
      "p"
    ],
    "various": [
      "ol",
      "li",
      "p"
    ],
    "ways": [
      "ol",
      "li",
      "p"
    ],
    "such": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "web": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "interface": [
      "ol",
      "li",
      "p"
    ],
    "database": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "file": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "system": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "or": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "software": [
      "ol",
      "li",
      "p"
    ],
    "running": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "on": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "server": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "at": [
      "ol",
      "li",
      "p"
    ],
    "design": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "time": [
      "ol",
      "li",
      "p"
    ],
    "potential": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "once": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "p"
    ],
    "scour": [
      "ol",
      "li",
      "p"
    ],
    "source": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "discover": [
      "ol",
      "li",
      "p"
    ],
    "may": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "missed": [
      "ol",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "typically": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "url": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "based": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "parameters": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "form": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "hidden": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "fields": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "cookies": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "http": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "headers": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "host,": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "accept": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "types": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "www": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "authentication": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "cache": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "settings": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "encodings": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "etc": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "local": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "filesystem": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "services": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "javascript": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "variables": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "upload": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "attributes": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "filename,": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "size": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "dns": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "results": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "host": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "names": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "component": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "call": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "return": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "values": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "ajax.": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "you've": [
      "ol",
      "li",
      "p"
    ],
    "identified": [
      "ol",
      "li",
      "p"
    ],
    "look": [
      "ol",
      "li",
      "p"
    ],
    "entry": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "points": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "li",
      "p"
    ],
    "sent": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "good": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "starting": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "method": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "assignment": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "statements": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "uses": [
      "ol",
      "li",
      "p"
    ],
    "the searchterm variable": [
      "ol",
      "li",
      "p"
    ],
    "def": [
      "ol",
      "li",
      "pre"
    ],
    "productsearch": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "action": [
      "ol",
      "li",
      "pre"
    ],
    "{": [
      "ol",
      "li",
      "pre"
    ],
    "implicit": [
      "ol",
      "li",
      "pre"
    ],
    "request": [
      "ol",
      "li",
      "pre"
    ],
    "..val": [
      "ol",
      "li",
      "pre"
    ],
    "searchterm": [
      "ol",
      "li",
      "em",
      "pre",
      "i",
      "em"
    ],
    "prodformsearchterm": [
      "ol",
      "li",
      "pre"
    ],
    "stores": [
      "ol",
      "li",
      "p"
    ],
    "form-field": [
      "ol",
      "li",
      "p"
    ],
    "searchterm and stores": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "string searchterm": [
      "ol",
      "li",
      "p"
    ],
    "ensure": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "before": [
      "ol",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "li",
      "p"
    ],
    "used": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "somewhere": [
      "ol",
      "li",
      "p"
    ],
    "trace": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "sink trace": [
      "ol",
      "li",
      "p"
    ],
    "each": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "final": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "destination": [
      "ol",
      "li",
      "p"
    ],
    "sink": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "memory": [
      "ol",
      "li",
      "p"
    ],
    "hard": [
      "ol",
      "li",
      "p"
    ],
    "drive": [
      "ol",
      "li",
      "p"
    ],
    "over": [
      "ol",
      "li",
      "p"
    ],
    "network": [
      "ol",
      "li",
      "p"
    ],
    "stored": [
      "ol",
      "li",
      "p"
    ],
    "store": [
      "ol",
      "li",
      "p"
    ],
    "routines each": [
      "ol",
      "li",
      "p"
    ],
    "associated": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "ideally": [
      "ol",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "li",
      "p"
    ],
    "occur": [
      "ol",
      "li",
      "p"
    ],
    "soon": [
      "ol",
      "li",
      "p"
    ],
    "reaches": [
      "ol",
      "li",
      "p"
    ],
    "shared": [
      "ol",
      "li",
      "p"
    ],
    "routines": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "better": [
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "p"
    ],
    "many": [
      "ol",
      "li",
      "p"
    ],
    "throughout": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "consolidation": [
      "ol",
      "li",
      "p"
    ],
    "aid": [
      "ol",
      "li",
      "p"
    ],
    "testing": [
      "ol",
      "li",
      "p"
    ],
    "reduce": [
      "ol",
      "li",
      "p"
    ],
    "chance": [
      "ol",
      "li",
      "p"
    ],
    "one-off": [
      "ol",
      "li",
      "p"
    ],
    "bugs": [
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "li",
      "p"
    ],
    "any": [
      "ol",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "b",
      "a"
    ],
    "flag": [
      "ol",
      "li",
      "p"
    ],
    "fixing": [
      "ol",
      "li",
      "p"
    ],
    "quality": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "validators": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "length": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "a",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "range": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "a",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "format": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "a",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "type": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "a",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "first": [
      "ol",
      "li",
      "p"
    ],
    "whitelisting": [
      "ol",
      "li",
      "p"
    ],
    "then": [
      "ol",
      "li",
      "p"
    ],
    "known": [
      "ol",
      "li",
      "p"
    ],
    "malicious": [
      "ol",
      "li",
      "p"
    ],
    "blacklisting": [
      "ol",
      "li",
      "p"
    ],
    "validate": [
      "ol",
      "li",
      "p",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "font",
      "b",
      "a",
      "li",
      "font",
      "b",
      "a",
      "li",
      "font",
      "b",
      "a"
    ],
    "server--do": [
      "ol",
      "li",
      "p"
    ],
    "rely": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "client-side": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "b",
      "a",
      "ul",
      "li",
      "b",
      "a"
    ],
    "alone": [
      "ol",
      "li",
      "p"
    ],
    "easily": [
      "ol",
      "li",
      "p"
    ],
    "bypassed": [
      "ol",
      "li",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "trust": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "boundary": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "consider": [
      "ol",
      "li",
      "p"
    ],
    "generated": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "untrusted": [
      "ol",
      "li",
      "p"
    ],
    "represents": [
      "ol",
      "li",
      "p"
    ],
    "point": [
      "ol",
      "li",
      "p"
    ],
    "application that": [
      "ol",
      "li",
      "p"
    ],
    "potentially": [
      "ol",
      "li",
      "p"
    ],
    "break": [
      "ol",
      "li",
      "p"
    ],
    "security": [
      "ol",
      "li",
      "p"
    ],
    "model": [
      "ol",
      "li",
      "p"
    ],
    "enumerate": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "li",
      "p"
    ],
    "note": [
      "ol",
      "li",
      "p"
    ],
    "expected": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "input at each": [
      "ol",
      "li",
      "p"
    ],
    "understand": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "handle": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "process": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "define": [
      "ol",
      "li",
      "p"
    ],
    "create": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "set": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "build": [
      "ol",
      "li",
      "p"
    ],
    "validator": [
      "ol",
      "li",
      "p"
    ],
    "centralize": [
      "ol",
      "li",
      "p"
    ],
    "validators--this": [
      "ol",
      "li",
      "p"
    ],
    "helps": [
      "ol",
      "li",
      "p"
    ],
    "strengthen": [
      "ol",
      "li",
      "p"
    ],
    "limiting": [
      "ol",
      "li",
      "p"
    ],
    "amount": [
      "ol",
      "li",
      "p"
    ],
    "scattered": [
      "ol",
      "li",
      "p"
    ],
    "place": [
      "ol",
      "li",
      "p"
    ],
    "outside": [
      "ol",
      "li",
      "p"
    ],
    "world": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "validatorssee": [
      "ol",
      "li"
    ],
    "the validate": [
      "ol",
      "li",
      "p"
    ],
    "type guideline": [
      "ol",
      "li",
      "p"
    ],
    "more": [
      "ol",
      "li",
      "p"
    ],
    "information": [
      "ol",
      "li",
      "p"
    ],
    "constructing": [
      "ol",
      "li",
      "p"
    ],
    "see": [
      "p"
    ],
    "guidelines": [
      "h1"
    ],
    "do": [
      "ul",
      "li",
      "b",
      "a"
    ],
    "checklists": [
      "h1"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Input and Data Validation Guidelines",
      "Input and Data Validation Checklists"
    ],
    "p": [
      "Applications written using Scala and Play Framework 2.1.0",
      "Check for input that has not been passed through a validation routine. All input from external sources should be validated.",
      "Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.",
      "Use the following steps to establish a validation strategy:",
      "Identify all sources of input. An application can take input via various ways such as a web interface, \r\ndatabase, file system or other software running on the server. At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:",
      "Once you've identified the sources of input, look for all entry points from where data from user can be sent to the server. Good starting points are method parameters and assignment statements. For example, this method uses the searchTerm variable:",
      "This assignment stores data from the form-field searchterm and stores it in the string searchTerm. Ensure that this input is validated before being used somewhere in the code.",
      "Trace data from source to sink. Trace each source of input through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.",
      "Identify validation routines. Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.",
      "Ensure quality of validators. Validation routines should check for length, range, format and type. First check for good data through whitelisting, then for known malicious data through blacklisting. Validate on the server--do not rely on client-side validation alone, as it can be easily bypassed.",
      "Establish your application's trust boundary: Consider all input not generated by your application to be untrusted.",
      "Identify all sources of input: Each source of input represents an entry point to your application that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input at each source. Potential sources of input in a web application typically include:",
      "Understand the input that your application can handle and process: For each source of input, define the format and type of input expected.",
      "Create a set of validators: Build a validator for each format and type of expected input. Centralize your application's validators--this helps strengthen the code by limiting the amount of validation code scattered throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.",
      "See the Validate Input for Length, Range, Format, and Type guideline for more information on constructing validation routines."
    ],
    "ol": [
      "Identify all sources of input. An application can take input via various ways such as a web interface, \r\ndatabase, file system or other software running on the server. At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:\r\n      \r\n      \r\n      \r\n      \r\n      \r\n        URL based parameters\r\n        Form based parameters\r\n        Hidden fields\r\n        Cookies\r\n        HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)\r\n        Local filesystem\r\n        Database\r\n        Other services running on the system\r\n        Javascript variables\r\n        File upload and attributes (filename, size, data, etc)\r\n        DNS results or host names\r\n        External component call return values (AJAX. etc)\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      Once you've identified the sources of input, look for all entry points from where data from user can be sent to the server. Good starting points are method parameters and assignment statements. For example, this method uses the searchTerm variable:\r\n      def productSearch = Action { implicit request => ...val searchTerm = prodForm.searchterm\r\n      This assignment stores data from the form-field searchterm and stores it in the string searchTerm. Ensure that this input is validated before being used somewhere in the code.\r\n    \r\n    \r\n      \r\n        Trace data from source to sink. Trace each source of input through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.\r\n    \r\n    \r\n      \r\n        Identify validation routines. Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.\r\n    \r\n    \r\n      \r\n        Ensure quality of validators. Validation routines should check for length, range, format and type. First check for good data through whitelisting, then for known malicious data through blacklisting. Validate on the server--do not rely on client-side validation alone, as it can be easily bypassed.",
      "",
      "",
      "Establish your application's trust boundary: Consider all input not generated by your application to be untrusted.\r\n    \r\n    \r\n      \r\n        Identify all sources of input: Each source of input represents an entry point to your application that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input at each source. Potential sources of input in a web application typically include: \r\n      \r\n      \r\n      \r\n        URL based parameters\r\n        Form based parameters\r\n        Hidden fields\r\n        Cookies\r\n        HTTP headers\r\n        Local filesystem\r\n        Database\r\n        Other services running on the system\r\n        Javascript variables\r\n        File upload and attributes (filename, size, data, etc)\r\n        DNS results or host names\r\n        External component call return values (AJAX. etc)\r\n      \r\n      \r\n      \r\n    \r\n    \r\n      \r\n        Understand the input that your application can handle and process: For each source of input, define the format and type of input expected.\r\n    \r\n    \r\n      \r\n      Create a set of validators: Build a validator for each format and type of expected input. Centralize your application's validators--this helps strengthen the code by limiting the amount of validation code scattered throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.See the Validate Input for Length, Range, Format, and Type guideline for more information on constructing validation routines.",
      "",
      ""
    ],
    "li": [
      "Identify all sources of input. An application can take input via various ways such as a web interface, \r\ndatabase, file system or other software running on the server. At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:\r\n      \r\n      \r\n      \r\n      \r\n      \r\n        URL based parameters\r\n        Form based parameters\r\n        Hidden fields\r\n        Cookies\r\n        HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)\r\n        Local filesystem\r\n        Database\r\n        Other services running on the system\r\n        Javascript variables\r\n        File upload and attributes (filename, size, data, etc)\r\n        DNS results or host names\r\n        External component call return values (AJAX. etc)\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      Once you've identified the sources of input, look for all entry points from where data from user can be sent to the server. Good starting points are method parameters and assignment statements. For example, this method uses the searchTerm variable:\r\n      def productSearch = Action { implicit request => ...val searchTerm = prodForm.searchterm\r\n      This assignment stores data from the form-field searchterm and stores it in the string searchTerm. Ensure that this input is validated before being used somewhere in the code.",
      "URL based parameters",
      "Form based parameters",
      "Hidden fields",
      "Cookies",
      "HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)",
      "Local filesystem",
      "Database",
      "Other services running on the system",
      "Javascript variables",
      "File upload and attributes (filename, size, data, etc)",
      "DNS results or host names",
      "External component call return values (AJAX. etc)",
      "Trace data from source to sink. Trace each source of input through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.",
      "Identify validation routines. Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.",
      "Ensure quality of validators. Validation routines should check for length, range, format and type. First check for good data through whitelisting, then for known malicious data through blacklisting. Validate on the server--do not rely on client-side validation alone, as it can be easily bypassed.",
      "Establish your application's trust boundary: Consider all input not generated by your application to be untrusted.",
      "Identify all sources of input: Each source of input represents an entry point to your application that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input at each source. Potential sources of input in a web application typically include: \r\n      \r\n      \r\n      \r\n        URL based parameters\r\n        Form based parameters\r\n        Hidden fields\r\n        Cookies\r\n        HTTP headers\r\n        Local filesystem\r\n        Database\r\n        Other services running on the system\r\n        Javascript variables\r\n        File upload and attributes (filename, size, data, etc)\r\n        DNS results or host names\r\n        External component call return values (AJAX. etc)",
      "URL based parameters",
      "Form based parameters",
      "Hidden fields",
      "Cookies",
      "HTTP headers",
      "Local filesystem",
      "Database",
      "Other services running on the system",
      "Javascript variables",
      "File upload and attributes (filename, size, data, etc)",
      "DNS results or host names",
      "External component call return values (AJAX. etc)",
      "Understand the input that your application can handle and process: For each source of input, define the format and type of input expected.",
      "Create a set of validators: Build a validator for each format and type of expected input. Centralize your application's validators--this helps strengthen the code by limiting the amount of validation code scattered throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.See the Validate Input for Length, Range, Format, and Type guideline for more information on constructing validation routines.",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "The Application Does Not Rely on Client-Side Validation"
    ],
    "strong": [
      "Identify all sources of input.",
      "Trace data from source to sink.",
      "Identify validation routines.",
      "Ensure quality of validators.",
      "Establish your application's trust boundary:",
      "Identify all sources of input",
      "Understand the input that your application can handle and process",
      "Create a set of validators"
    ],
    "ul": [
      "",
      "URL based parameters\r\n        Form based parameters\r\n        Hidden fields\r\n        Cookies\r\n        HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)\r\n        Local filesystem\r\n        Database\r\n        Other services running on the system\r\n        Javascript variables\r\n        File upload and attributes (filename, size, data, etc)\r\n        DNS results or host names\r\n        External component call return values (AJAX. etc)",
      "",
      "URL based parameters\r\n        Form based parameters\r\n        Hidden fields\r\n        Cookies\r\n        HTTP headers\r\n        Local filesystem\r\n        Database\r\n        Other services running on the system\r\n        Javascript variables\r\n        File upload and attributes (filename, size, data, etc)\r\n        DNS results or host names\r\n        External component call return values (AJAX. etc)",
      "Validate Input from All Sources\r\n        \r\n      \r\n    \r\n    \r\n      \r\n        \r\n          Validate Input for Length, Range, Format, and Type\r\n        \r\n      \r\n    \r\n    \r\n      \r\n        \r\n          Validate All Input Passed to the Database\r\n        \r\n      \r\n    \r\n    \r\n      \r\n        Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated\r\n        \r\n      \r\n    \r\n    \r\n      \r\n        Input Is Validated for Length, Range, Format and Type\r\n      \r\n    \r\n    \r\n      \r\n        All Database Input Is Validated\r\n      \r\n    \r\n    \r\n      \r\n        The Application Does Not Rely on Client-Side Validation"
    ],
    "font": [
      "the sources of input",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Input from All Sources Is Validated"
    ],
    "em": [
      "searchTerm",
      "searchTerm"
    ],
    "pre": [
      "def productSearch = Action { implicit request => ...val searchTerm = prodForm.searchterm"
    ],
    "br": [
      "",
      "",
      ""
    ],
    "i": [
      "searchterm"
    ],
    "a": [
      "Validate Input for Length, Range, Format, and Type",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "The Application Does Not Rely on Client-Side Validation"
    ],
    "b": [
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "The Application Does Not Rely on Client-Side Validation"
    ]
  },
  "links": [
    {
      "href": "b6795407-d01e-44ec-8aed-a440d388902b",
      "text": "Validate Input for Length, Range, Format, and Type"
    },
    {
      "href": "af528b9a-af5f-49b8-a314-4578c0b31273",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0);",
      "text": "Validate Input from All Sources"
    },
    {
      "href": "b6795407-d01e-44ec-8aed-a440d388902b",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0);",
      "text": "Validate Input for Length, Range, Format, and Type"
    },
    {
      "href": "00000000-0000-0000-0000-00000016b3b2",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0);",
      "text": "Validate All Input Passed to the Database"
    },
    {
      "href": "97d61072-14e2-48dd-a1bf-ec149efbcb54",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0);",
      "text": "Do Not Rely on Client-Side Validation"
    },
    {
      "href": "0bf6f129-8641-43f4-a29c-62f58493fb78",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-weight: bold;",
      "text": "\r\n          Input from All Sources Is Validated\r\n        "
    },
    {
      "href": "067e2f72-18f0-4f5a-ba9c-287691cd9ed3",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0);",
      "text": "Input Is Validated for Length, Range, Format and Type"
    },
    {
      "href": "2faf9bc6-fb15-4341-bb10-7dbc39e30d6e",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0);",
      "text": "All Database Input Is Validated"
    },
    {
      "href": "c5688313-0255-461c-a978-423596d182db",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(0, 0, 0);",
      "text": "The Application Does Not Rely on Client-Side Validation"
    }
  ],
  "html": "<h1>Applies To</h1>\r\n  <p>Applications written using Scala and Play Framework 2.1.0</p>\r\n  <h1 style=\"font-style: normal;\">What to Check For</h1>\r\n  <p style=\"font-style: normal;\">Check for input that has not been passed through a validation routine. All input from external sources should be validated.</p>\r\n  <h1 style=\"font-style: normal;\">Why</h1>\r\n  <p style=\"font-style: normal;\">Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.</p>\r\n  <h1 style=\"font-style: normal;\">How to Check</h1>\r\n  <p style=\"font-style: normal;\">Use the following steps to establish a validation strategy:</p>\r\n  <ol>\r\n    <li>\r\n      <p style=\"font-style: normal;\">\r\n        <strong>Identify all sources of input. </strong>An application can take input via various ways such as a web interface, \r\ndatabase, file system or other software running on the server. At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:</p>\r\n      <ul style=\"font-style: normal;\">\r\n      </ul>\r\n      <ol>\r\n      </ol>\r\n      <ul>\r\n        <li>URL based parameters</li>\r\n        <li>Form based parameters</li>\r\n        <li>Hidden fields</li>\r\n        <li>Cookies</li>\r\n        <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)</li>\r\n        <li>Local filesystem</li>\r\n        <li>Database</li>\r\n        <li>Other services running on the system</li>\r\n        <li>Javascript variables</li>\r\n        <li>File upload and attributes (filename, size, data, etc)</li>\r\n        <li>DNS results or host names</li>\r\n        <li>External component call return values (AJAX. etc)</li>\r\n      </ul>\r\n      <ol>\r\n      </ol>\r\n      <ul style=\"font-style: normal;\">\r\n      </ul>\r\n      <p style=\"font-style: normal;\">Once you've identified <font color=\"#NaN\">the sources of input</font>, look for all entry points from where data from user can be sent to the server. Good starting points are method parameters and assignment statements. For example, this method uses the&nbsp;<em>searchTerm</em>&nbsp;variable:</p>\r\n      <pre style=\"font-style: normal;\">def productSearch = Action { implicit request =&gt;<br /> ...<br />val searchTerm = prodForm.searchterm</pre>\r\n      <p>This assignment stores data from the form-field <i>searchterm</i>&nbsp;and&nbsp;stores it in the string&nbsp;<em style=\"font-style: normal;\">searchTerm</em>. Ensure that this input is validated before being used somewhere in the code.</p>\r\n    </li>\r\n    <li style=\"font-style: normal;\">\r\n      <p>\r\n        <strong>Trace data from source to sink.&nbsp;</strong>Trace each source of input through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.</p>\r\n    </li>\r\n    <li style=\"font-style: normal;\">\r\n      <p>\r\n        <strong>Identify validation routines.&nbsp;</strong>Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.</p>\r\n    </li>\r\n    <li style=\"font-style: normal;\">\r\n      <p>\r\n        <strong>Ensure quality of validators. </strong>Validation routines should check for length, range, format and type. First check for good data through whitelisting, then for known malicious data through blacklisting. Validate on the server--do not rely on client-side validation alone, as it can be easily bypassed.</p>\r\n    </li>\r\n  </ol>\r\n  <h1 style=\"font-style: normal;\">How to Fix</h1>\r\n  <ol style=\"font-style: normal;\">\r\n    <li>\r\n      <p>\r\n        <strong>Establish your application's trust boundary:</strong> Consider all input not generated by your application to be untrusted.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all sources of input</strong>: Each source of input represents an entry point to your application&nbsp;that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input&nbsp;at&nbsp;each source. Potential sources of input in a web application typically include: <br /></p>\r\n      <ol>\r\n      </ol>\r\n      <ul>\r\n        <li>URL based parameters</li>\r\n        <li>Form based parameters</li>\r\n        <li>Hidden fields</li>\r\n        <li>Cookies</li>\r\n        <li>HTTP headers</li>\r\n        <li>Local filesystem</li>\r\n        <li>Database</li>\r\n        <li>Other services running on the system</li>\r\n        <li>Javascript variables</li>\r\n        <li>File upload and attributes (filename, size, data, etc)</li>\r\n        <li>DNS results or host names</li>\r\n        <li>External component call return values (AJAX. etc)</li>\r\n      </ul>\r\n      <ol>\r\n      </ol>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Understand the input that your application can handle and process</strong>: For each source of input, define the format and type of input expected.</p>\r\n    </li>\r\n    <li>\r\n      <p />\r\n      <strong>Create a set of validators</strong>: Build a validator for each format and type of expected input. Centralize your application's validators--this helps strengthen the code by limiting the amount of validation code scattered throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.<p>See the&nbsp;<a href=\"b6795407-d01e-44ec-8aed-a440d388902b\">Validate Input for Length, Range, Format, and Type</a>&nbsp;guideline for more information on constructing validation routines.</p></li>\r\n  </ol>\r\n  <h1 style=\"margin: 0px; padding: 10px 0px 0px; font-size: 17px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: rgb(17, 17, 17);\">Input and Data Validation Guidelines</h1>\r\n  <ul style=\"margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small; color: rgb(17, 17, 17);\">\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <font color=\"#333399\" style=\"margin: 0px; padding: 0px;\">\r\n        <b style=\"margin: 0px; padding: 0px;\">\r\n          <a href=\"af528b9a-af5f-49b8-a314-4578c0b31273\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Validate Input from All Sources</a>\r\n        </b>\r\n      </font>\r\n    </li>\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <font color=\"#333399\" style=\"margin: 0px; padding: 0px;\">\r\n        <b style=\"margin: 0px; padding: 0px;\">\r\n          <a href=\"b6795407-d01e-44ec-8aed-a440d388902b\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Validate Input for Length, Range, Format, and Type</a>\r\n        </b>\r\n      </font>\r\n    </li>\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <font color=\"#333399\" style=\"margin: 0px; padding: 0px;\">\r\n        <b style=\"margin: 0px; padding: 0px;\">\r\n          <a href=\"00000000-0000-0000-0000-00000016b3b2\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Validate All Input Passed to the Database</a>\r\n        </b>\r\n      </font>\r\n    </li>\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <b style=\"margin: 0px; padding: 0px; color: rgb(51, 51, 153);\">\r\n        <a href=\"97d61072-14e2-48dd-a1bf-ec149efbcb54\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Do Not Rely on Client-Side Validation</a>\r\n      </b>\r\n    </li>\r\n  </ul>\r\n  <h1 style=\"margin: 0px; padding: 10px 0px 0px; font-size: 17px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: rgb(17, 17, 17);\">Input and Data Validation Checklists</h1>\r\n  <ul style=\"margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;\">\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <font style=\"margin: 0px; padding: 0px;\">\r\n        <a href=\"0bf6f129-8641-43f4-a29c-62f58493fb78\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0); font-weight: bold;\">\r\n          <b style=\"margin: 0px; padding: 0px;\">Input from All Sources Is Validated</b>\r\n        </a>\r\n      </font>\r\n    </li>\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <b style=\"margin: 0px; padding: 0px;\">\r\n        <a href=\"067e2f72-18f0-4f5a-ba9c-287691cd9ed3\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Input Is Validated for Length, Range, Format and Type</a>\r\n      </b>\r\n    </li>\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <b style=\"margin: 0px; padding: 0px;\">\r\n        <a href=\"2faf9bc6-fb15-4341-bb10-7dbc39e30d6e\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">All Database Input Is Validated</a>\r\n      </b>\r\n    </li>\r\n    <li style=\"margin: 0px; padding: 0px;\">\r\n      <b style=\"margin: 0px; padding: 0px;\">\r\n        <a href=\"c5688313-0255-461c-a978-423596d182db\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">The Application Does Not Rely on Client-Side Validation</a>\r\n      </b>\r\n    </li>\r\n  </ul>"
}