{
  "id": "ccc06e7a-5ba9-49d2-8f67-5d3211e37971",
  "checksum": "34a34c7719c5f6762306077e7577fe916ebaf4e6",
  "words": {
    "description": [
      "h2"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "software": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "performs": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "calculation": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "produce": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p"
    ],
    "integer": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "title"
    ],
    "overflow": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "title"
    ],
    "wraparound": [
      "p",
      "p",
      "title"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "logic": [
      "p"
    ],
    "assumes": [
      "p"
    ],
    "resulting": [
      "p"
    ],
    "value": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "will": [
      "p"
    ],
    "always": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "larger": [
      "p"
    ],
    "than": [
      "p"
    ],
    "original": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "introduce": [
      "p"
    ],
    "other": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "weaknesses": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ul",
      "li"
    ],
    "resource": [
      "p"
    ],
    "management": [
      "p"
    ],
    "execution": [
      "p",
      "p"
    ],
    "control": [
      "p",
      "p"
    ],
    "occurs": [
      "p",
      "p"
    ],
    "incremented": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "too": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "large": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "store": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "associated": [
      "p"
    ],
    "representation": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "may": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "wrap": [
      "p",
      "p"
    ],
    "become": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "very": [
      "p"
    ],
    "small": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "negative": [
      "p"
    ],
    "number": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "while": [
      "p"
    ],
    "intended": [
      "p"
    ],
    "behavior": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "circumstances": [
      "p"
    ],
    "rely": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p"
    ],
    "wrapping": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "have": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "security": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "consequences": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "unexpected": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "especially": [
      "p"
    ],
    "case": [
      "p"
    ],
    "triggered": [
      "p"
    ],
    "using": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "user-supplied": [
      "p"
    ],
    "inputs": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "becomes": [
      "p"
    ],
    "security-critical": [
      "p"
    ],
    "result": [
      "p"
    ],
    "looping": [
      "p"
    ],
    "make": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "decision": [
      "p"
    ],
    "determine": [
      "p"
    ],
    "offset": [
      "p"
    ],
    "size": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "behaviors": [
      "p"
    ],
    "such": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "memory": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "allocation": [
      "p"
    ],
    "copying": [
      "p"
    ],
    "concatenation": [
      "p"
    ],
    "etc": [
      "p"
    ],
    "discussion": [
      "h2"
    ],
    "real": [
      "p"
    ],
    "world": [
      "p"
    ],
    "255&#431=256.": [
      "p"
    ],
    "but": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "computer": [
      "p"
    ],
    "program": [
      "p"
    ],
    "sometimes": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "255&#431=0,": [
      "p"
    ],
    "0-1=65535": [
      "p"
    ],
    "maybe": [
      "p"
    ],
    "40000&#43;40,000=14464.": [
      "p"
    ],
    "you": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "don't": [
      "p",
      "p"
    ],
    "math": [
      "p",
      "p"
    ],
    "whiz": [
      "p"
    ],
    "smell": [
      "p"
    ],
    "something": [
      "p"
    ],
    "fishy": [
      "p"
    ],
    "actually": [
      "p"
    ],
    "kind": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "has": [
      "p"
    ],
    "been": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "going": [
      "p"
    ],
    "decades": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "there's": [
      "p"
    ],
    "perfectly": [
      "p"
    ],
    "rational": [
      "p"
    ],
    "incredibly": [
      "p"
    ],
    "boring": [
      "p"
    ],
    "explanation": [
      "p"
    ],
    "ultimately": [
      "p"
    ],
    "it's": [
      "p"
    ],
    "buried": [
      "p"
    ],
    "deep": [
      "p"
    ],
    "dna": [
      "p"
    ],
    "computers": [
      "p",
      "p"
    ],
    "who": [
      "p"
    ],
    "can't": [
      "p"
    ],
    "count": [
      "p"
    ],
    "infinity": [
      "p"
    ],
    "even": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "feels": [
      "p"
    ],
    "like": [
      "p",
      "p"
    ],
    "they": [
      "p"
    ],
    "take": [
      "p"
    ],
    "long": [
      "p"
    ],
    "complete": [
      "p"
    ],
    "important": [
      "p"
    ],
    "task": [
      "p"
    ],
    "programmers": [
      "p"
    ],
    "forget": [
      "p"
    ],
    "do": [
      "p"
    ],
    "people": [
      "p"
    ],
    "bad": [
      "p"
    ],
    "things": [
      "p"
    ],
    "ensue": [
      "p"
    ],
    "-": [
      "p"
    ],
    "anywhere": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "crashes": [
      "p"
    ],
    "faulty": [
      "p"
    ],
    "price": [
      "p"
    ],
    "calculations": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "infinite": [
      "p"
    ],
    "loops": [
      "p"
    ],
    "code": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "detection": [
      "h2",
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "methods": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "available": [
      "p",
      "p"
    ],
    "automated": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "static": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "analysis": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "weakness": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "often": [
      "ol",
      "li",
      "p"
    ],
    "detected": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "tools": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "many": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "modern": [
      "ol",
      "li",
      "p"
    ],
    "use": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "data": [
      "ol",
      "li",
      "p"
    ],
    "flow": [
      "ol",
      "li",
      "p"
    ],
    "constraint-based": [
      "ol",
      "li",
      "p"
    ],
    "techniques": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "minimize": [
      "ol",
      "li",
      "p"
    ],
    "false": [
      "ol",
      "li",
      "p"
    ],
    "positives": [
      "ol",
      "li",
      "p"
    ],
    "black": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "box": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "evidence": [
      "ol",
      "li",
      "p"
    ],
    "dynamic": [
      "ol",
      "li",
      "p"
    ],
    "interact": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "test": [
      "ol",
      "li",
      "p"
    ],
    "suites": [
      "ol",
      "li",
      "p"
    ],
    "diverse": [
      "ol",
      "li",
      "p"
    ],
    "fuzz": [
      "ol",
      "li",
      "p"
    ],
    "testing": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "fuzzing),": [
      "ol",
      "li",
      "p"
    ],
    "robustness": [
      "ol",
      "li",
      "p"
    ],
    "fault": [
      "ol",
      "li",
      "p"
    ],
    "injection": [
      "ol",
      "li",
      "p"
    ],
    "software's": [
      "ol",
      "li",
      "p"
    ],
    "operation": [
      "ol",
      "li",
      "p"
    ],
    "slow": [
      "ol",
      "li",
      "p"
    ],
    "down": [
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "unstable": [
      "ol",
      "li",
      "p"
    ],
    "crash": [
      "ol",
      "li",
      "p"
    ],
    "generate": [
      "ol",
      "li",
      "p"
    ],
    "incorrect": [
      "ol",
      "li",
      "p"
    ],
    "results": [
      "ol",
      "li",
      "p"
    ],
    "without": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "visibility": [
      "ol",
      "li",
      "p"
    ],
    "into": [
      "ol",
      "li",
      "p"
    ],
    "able": [
      "ol",
      "li",
      "p"
    ],
    "sufficiently": [
      "ol",
      "li",
      "p"
    ],
    "distinguish": [
      "ol",
      "li",
      "p"
    ],
    "others": [
      "ol",
      "li",
      "p"
    ],
    "requiring": [
      "ol",
      "li",
      "p"
    ],
    "follow-up": [
      "ol",
      "li",
      "p"
    ],
    "manual": [
      "ol",
      "li",
      "p"
    ],
    "diagnose": [
      "ol",
      "li",
      "p"
    ],
    "underlying": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "problem": [
      "ol",
      "li",
      "p"
    ],
    "mitigation": [
      "h2",
      "p"
    ],
    "define": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "protocols": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "ensure": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "strictly": [
      "ol",
      "li",
      "p"
    ],
    "defined": [
      "ol",
      "li",
      "p"
    ],
    "out-of-bounds": [
      "ol",
      "li",
      "p"
    ],
    "identified": [
      "ol",
      "li",
      "p"
    ],
    "simply": [
      "ol",
      "li",
      "p"
    ],
    "require": [
      "ol",
      "li",
      "p"
    ],
    "strict": [
      "ol",
      "li",
      "p"
    ],
    "conformance": [
      "ol",
      "li",
      "p"
    ],
    "protocol": [
      "ol",
      "li",
      "p"
    ],
    "language": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "allow": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "occur": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "provides": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "constructs": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "easier": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "avoid\nif": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "choose": [
      "ol",
      "li",
      "p"
    ],
    "compiler": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "automatic": [
      "ol",
      "li",
      "p"
    ],
    "bounds": [
      "ol",
      "li",
      "p"
    ],
    "checking": [
      "ol",
      "li",
      "p"
    ],
    "secure": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "framework": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "vetted": [
      "ol",
      "li",
      "p"
    ],
    "library": [
      "ol",
      "li",
      "p"
    ],
    "avoid": [
      "ol",
      "ol",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "libraries": [
      "ol",
      "li",
      "p"
    ],
    "frameworks": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "li",
      "p"
    ],
    "numbers": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "examples": [
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p"
    ],
    "safe": [
      "ol",
      "li",
      "p"
    ],
    "handling": [
      "ol",
      "li",
      "p"
    ],
    "packages": [
      "ol",
      "li",
      "p"
    ],
    "assafeint": [
      "ol",
      "li",
      "p"
    ],
    "c&#43;&#43;)": [
      "ol",
      "li",
      "p"
    ],
    "integerlib": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "c": [
      "ol",
      "li",
      "p"
    ],
    "c&#43&#43;).": [
      "ol",
      "li",
      "p"
    ],
    "perform": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "input": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "strong"
    ],
    "validation": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "any": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "numeric": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "by": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p"
    ],
    "ensuring": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "within": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "expected": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "range": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "enforce": [
      "ol",
      "li",
      "p"
    ],
    "meets": [
      "ol",
      "li",
      "p"
    ],
    "both": [
      "ol",
      "li",
      "p"
    ],
    "minimum": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "maximum": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "requirements": [
      "ol",
      "li",
      "p"
    ],
    "unsigned": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "integers": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "makes": [
      "ol",
      "li",
      "p"
    ],
    "sanity": [
      "ol",
      "li",
      "p"
    ],
    "checks": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "overflows": [
      "ol",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "signed": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "check": [
      "ol",
      "li",
      "p"
    ],
    "includes": [
      "ol",
      "li",
      "p"
    ],
    "values": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "well": [
      "ol",
      "li",
      "p"
    ],
    "understand": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "programming": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "language's": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "how": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "interacts": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "cwe-681).": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "pay": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "close": [
      "ol",
      "li",
      "p"
    ],
    "attention": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "byte": [
      "ol",
      "li",
      "p"
    ],
    "discrepancies": [
      "ol",
      "li",
      "p"
    ],
    "precision": [
      "ol",
      "li",
      "p"
    ],
    "signed/unsigned": [
      "ol",
      "li",
      "p"
    ],
    "distinctions": [
      "ol",
      "li",
      "p"
    ],
    "truncation": [
      "ol",
      "li",
      "p"
    ],
    "conversion": [
      "ol",
      "li",
      "p"
    ],
    "casting": [
      "ol",
      "li",
      "p"
    ],
    "between": [
      "ol",
      "li",
      "p"
    ],
    "types": [
      "ol",
      "li",
      "p"
    ],
    "\"not-a-number\"": [
      "ol",
      "li",
      "p"
    ],
    "handles": [
      "ol",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p"
    ],
    "also": [
      "ol",
      "li",
      "p"
    ],
    "careful": [
      "ol",
      "li",
      "p"
    ],
    "account": [
      "ol",
      "li",
      "p"
    ],
    "32-bit": [
      "ol",
      "li",
      "p"
    ],
    "64-bit": [
      "ol",
      "li",
      "p"
    ],
    "potential": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "differences": [
      "ol",
      "li",
      "p"
    ],
    "affect": [
      "ol",
      "li",
      "p"
    ],
    "server-side": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "controls": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "performed": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "client": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "side": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "these": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "duplicated": [
      "ol",
      "li",
      "p"
    ],
    "server": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "order": [
      "ol",
      "li",
      "p"
    ],
    "cwe-602": [
      "ol",
      "li",
      "p"
    ],
    "attackers": [
      "ol",
      "li",
      "p"
    ],
    "bypass": [
      "ol",
      "li",
      "p"
    ],
    "client-side": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "modifying": [
      "ol",
      "li",
      "p"
    ],
    "after": [
      "ol",
      "li",
      "p"
    ],
    "changing": [
      "ol",
      "li",
      "p"
    ],
    "remove": [
      "ol",
      "li",
      "p"
    ],
    "entirely": [
      "ol",
      "li",
      "p"
    ],
    "then": [
      "ol",
      "li",
      "p"
    ],
    "modified": [
      "ol",
      "li",
      "p"
    ],
    "would": [
      "ol",
      "li",
      "p"
    ],
    "submitted": [
      "ol",
      "li",
      "p"
    ],
    "examine": [
      "ol",
      "li",
      "p"
    ],
    "warnings": [
      "ol",
      "li",
      "p"
    ],
    "closely": [
      "ol",
      "li",
      "p"
    ],
    "eliminate": [
      "ol",
      "li",
      "p"
    ],
    "problems": [
      "ol",
      "li",
      "p"
    ],
    "implications": [
      "ol",
      "li",
      "p"
    ],
    "/": [
      "ol",
      "li",
      "p"
    ],
    "mismatch": [
      "ol",
      "li",
      "p"
    ],
    "operations": [
      "ol",
      "li",
      "p"
    ],
    "uninitialized": [
      "ol",
      "li",
      "p"
    ],
    "variables": [
      "ol",
      "li",
      "p"
    ],
    "rarely": [
      "ol",
      "li",
      "p"
    ],
    "exploitable": [
      "ol",
      "li",
      "p"
    ],
    "single": [
      "ol",
      "li",
      "p"
    ],
    "failure": [
      "ol",
      "li",
      "p"
    ],
    "lead": [
      "ol",
      "li",
      "p"
    ],
    "compromise": [
      "ol",
      "li",
      "p"
    ],
    "entire": [
      "ol",
      "li",
      "p"
    ],
    "system": [
      "ol",
      "li",
      "p"
    ],
    "safeint": [
      "em"
    ],
    "additional": [
      "h2"
    ],
    "information": [
      "h2",
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//cwe.mitre.org/top25/index.html#cwe-190": [
      "ul",
      "li",
      "a"
    ],
    "cwe-190": [
      "title"
    ]
  },
  "tags": {
    "h2": [
      "Description",
      "Discussion",
      "Detection",
      "Mitigation",
      "",
      "Additional Information"
    ],
    "p": [
      "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource\n management or execution control.",
      "An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended\n behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is\n used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.",
      "In the real world, 255&#43;1=256. But to a computer program, sometimes 255&#43;1=0, or 0-1=65535, or maybe 40,000&#43;40,000=14464. You don't have to be a math whiz to smell something fishy. Actually, this kind of behavior has been going on for decades, and there's\n a perfectly rational and incredibly boring explanation. Ultimately, it's buried deep in the DNA of computers, who can't count to infinity even if it sometimes feels like they take that long to complete an important task. When programmers forget that computers\n don't do math like people, bad things ensue - anywhere from crashes, faulty price calculations, infinite loops, and execution of code.",
      "The following detection methods for integer overflow vulnerabilities are available:",
      "Automated Static Analysis. This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.",
      "Black Box. Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and\n fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\n follow-up manual methods to diagnose the underlying problem.",
      "The following mitigation methods are available for integer overflow vulnerabilities:",
      "Define protocols. Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.",
      "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nIf possible, choose a language or compiler that performs automatic bounds checking.",
      "Use a secure framework. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\n unexpected consequences. Examples include safe integer handling packages such as\nSafeInt (C&#43;&#43;) or IntegerLib (C or C&#43;&#43;).",
      "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range. Use unsigned integers where possible. This makes\n it easier to perform sanity checks for integer overflows. If you must use signed integers, make sure that your range check includes minimum values as well as maximum values.",
      "Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\n numeric representation.",
      "Use server-side security controls. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "Pay attention to the compiler. Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness\n is rarely exploitable, a single failure may lead to the compromise of the entire system."
    ],
    "ol": [
      "Automated Static Analysis. This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n    \n    \n      \n        Black Box. Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and\n fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\n follow-up manual methods to diagnose the underlying problem.",
      "Define protocols. Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.\n    \n    \n      \n        Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nIf possible, choose a language or compiler that performs automatic bounds checking.\n    \n    \n      \n        Use a secure framework. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\n unexpected consequences. Examples include safe integer handling packages such as\nSafeInt (C&#43;&#43;) or IntegerLib (C or C&#43;&#43;).\n    \n    \n      \n        Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range. Use unsigned integers where possible. This makes\n it easier to perform sanity checks for integer overflows. If you must use signed integers, make sure that your range check includes minimum values as well as maximum values.\n    \n    \n      \n        Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\n numeric representation.\n    \n    \n      \n        Use server-side security controls. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n    \n    \n      \n        Pay attention to the compiler. Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness\n is rarely exploitable, a single failure may lead to the compromise of the entire system."
    ],
    "li": [
      "Automated Static Analysis. This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.",
      "Black Box. Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and\n fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\n follow-up manual methods to diagnose the underlying problem.",
      "Define protocols. Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.",
      "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nIf possible, choose a language or compiler that performs automatic bounds checking.",
      "Use a secure framework. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\n unexpected consequences. Examples include safe integer handling packages such as\nSafeInt (C&#43;&#43;) or IntegerLib (C or C&#43;&#43;).",
      "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range. Use unsigned integers where possible. This makes\n it easier to perform sanity checks for integer overflows. If you must use signed integers, make sure that your range check includes minimum values as well as maximum values.",
      "Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\n numeric representation.",
      "Use server-side security controls. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "Pay attention to the compiler. Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness\n is rarely exploitable, a single failure may lead to the compromise of the entire system.",
      "For more information about integer overflow vulnerabilities, please see \nhttp://cwe.mitre.org/top25/index.html#CWE-190"
    ],
    "strong": [
      "Automated Static Analysis.",
      "Black Box.",
      "Define protocols.",
      "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
      "Use a secure framework.",
      "Perform input validation on any numeric input by ensuring that it is within the expected range.",
      "Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681).",
      "Use server-side security controls.",
      "Pay attention to the compiler."
    ],
    "em": [
      "SafeInt",
      "IntegerLib"
    ],
    "ul": [
      "For more information about integer overflow vulnerabilities, please see \nhttp://cwe.mitre.org/top25/index.html#CWE-190"
    ],
    "a": [
      "http://cwe.mitre.org/top25/index.html#CWE-190"
    ]
  },
  "links": [
    {
      "href": "http://cwe.mitre.org/top25/index.html#CWE-190",
      "text": "\nhttp://cwe.mitre.org/top25/index.html#CWE-190"
    }
  ],
  "html": "<h2>Description</h2>\n  <p>The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource\n management or execution control.</p>\n  <p>An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended\n behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is\n used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.</p>\n  <h2>Discussion</h2>\n  <p>In the real world, 255&amp;#43;1=256. But to a computer program, sometimes 255&amp;#43;1=0, or 0-1=65535, or maybe 40,000&amp;#43;40,000=14464. You don't have to be a math whiz to smell something fishy. Actually, this kind of behavior has been going on for decades, and there's\n a perfectly rational and incredibly boring explanation. Ultimately, it's buried deep in the DNA of computers, who can't count to infinity even if it sometimes feels like they take that long to complete an important task. When programmers forget that computers\n don't do math like people, bad things ensue - anywhere from crashes, faulty price calculations, infinite loops, and execution of code.</p>\n  <h2>Detection</h2>\n  <p>The following detection methods for integer overflow vulnerabilities are available:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Automated Static Analysis. </strong>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Black Box.</strong> Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and\n fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\n follow-up manual methods to diagnose the underlying problem.</p>\n    </li>\n  </ol>\n  <h2>Mitigation</h2>\n  <h2>\n  </h2>\n  <p>The following mitigation methods are available for integer overflow vulnerabilities:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Define protocols.</strong> Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n</strong>If possible, choose a language or compiler that performs automatic bounds checking.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use a secure framework. </strong>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\n unexpected consequences. Examples include safe integer handling packages such as\n<em>SafeInt</em> (C&amp;#43;&amp;#43;) or <em>IntegerLib</em> (C or C&amp;#43;&amp;#43;).</p>\n    </li>\n    <li>\n      <p>\n        <strong>Perform input validation on any numeric input by ensuring that it is within the expected range.</strong> Enforce that the input meets both the minimum and maximum requirements for the expected range. Use unsigned integers where possible. This makes\n it easier to perform sanity checks for integer overflows. If you must use signed integers, make sure that your range check includes minimum values as well as maximum values.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681).</strong> Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\n numeric representation.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use server-side security controls.</strong> For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Pay attention to the compiler.</strong> Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness\n is rarely exploitable, a single failure may lead to the compromise of the entire system.</p>\n    </li>\n  </ol>\n  <h2>Additional Information</h2>\n  <ul>\n    <li>For more information about integer overflow vulnerabilities, please see <a href=\"http://cwe.mitre.org/top25/index.html#CWE-190\">\nhttp://cwe.mitre.org/top25/index.html#CWE-190</a></li>\n  </ul>"
}