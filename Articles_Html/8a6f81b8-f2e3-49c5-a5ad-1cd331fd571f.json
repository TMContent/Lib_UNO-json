{
  "id": "8a6f81b8-f2e3-49c5-a5ad-1cd331fd571f",
  "checksum": "6e74be35431c400168aa97a3c46b4db6d6c9529a",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p"
    ],
    "verify": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "pointer": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "validation": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "function": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "implemented": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "used": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "when": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "pointers": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "a",
      "title"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "title"
    ],
    "passed": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "arguments": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "functions": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "why": [
      "h1"
    ],
    "invalid": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "may": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "cause": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "program": [
      "p"
    ],
    "crash": [
      "p"
    ],
    "or": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "allow": [
      "p"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "attacker": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "artbitrary": [
      "p"
    ],
    "code": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "following": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "steps": [
      "p"
    ],
    "validated": [
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "before": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "locate": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "your": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "project": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "input": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "data": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "class": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "library": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "this": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "throw": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "exceptions": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "detected": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "checks": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "null": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p"
    ],
    "examine": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "uses": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "dynamic_cast": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "validate": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "type": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "win32": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "apis": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "if": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "appropriate": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "built": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "windows": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "platform": [
      "ol",
      "li",
      "p"
    ],
    "applicable": [
      "ol",
      "li",
      "p"
    ],
    "isbadreadptrisbadwriteptrisbadcodeptrisbadstringptr": [
      "ol",
      "li",
      "ul",
      "ol",
      "li",
      "ul"
    ],
    "look": [
      "ol",
      "li",
      "p"
    ],
    "accept": [
      "ol",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "very": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "beginning": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "isbadreadptr": [
      "li",
      "li"
    ],
    "isbadwriteptr": [
      "li",
      "li"
    ],
    "isbadcodeptr": [
      "li",
      "li"
    ],
    "isbadstringptr": [
      "li",
      "li"
    ],
    "fix": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "implement": [
      "p"
    ],
    "add": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "li",
      "p"
    ],
    "dedicated": [
      "ol",
      "li",
      "p"
    ],
    "first": [
      "ol",
      "li",
      "p"
    ],
    "most": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "obvious": [
      "ol",
      "li",
      "p"
    ],
    "thing": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p"
    ],
    "dynamic_cast when": [
      "ol",
      "li",
      "p"
    ],
    "converting": [
      "ol",
      "li",
      "p"
    ],
    "incompatible": [
      "ol",
      "li",
      "p"
    ],
    "returns": [
      "ol",
      "li",
      "p"
    ],
    "makes": [
      "ol",
      "li",
      "p"
    ],
    "suitable": [
      "ol",
      "li",
      "p"
    ],
    "checking": [
      "ol",
      "li",
      "p"
    ],
    "whether": [
      "ol",
      "li",
      "p"
    ],
    "points": [
      "ol",
      "li",
      "p"
    ],
    "object": [
      "ol",
      "li",
      "p"
    ],
    "correct": [
      "ol",
      "li",
      "p"
    ],
    "purpose": [
      "ol",
      "li",
      "p"
    ],
    "like": [
      "ol",
      "li",
      "p"
    ],
    "==": [
      "ol",
      "li",
      "p"
    ],
    "dynamic_castpointer))": [
      "ol",
      "li",
      "p"
    ],
    "//error": [
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "platforms": [
      "ol",
      "li",
      "p"
    ],
    "dereferencing": [
      "ol",
      "li",
      "p"
    ],
    "them": [
      "ol",
      "li",
      "p"
    ],
    "likely": [
      "ol",
      "li",
      "p"
    ],
    "useful": [
      "ol",
      "li",
      "p"
    ],
    "such": [
      "ol",
      "li",
      "p"
    ],
    "cases": [
      "ol",
      "li",
      "p"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Related Items"
    ],
    "ul": [
      "C++",
      "IsBadReadPtrIsBadWritePtrIsBadCodePtrIsBadStringPtr",
      "IsBadReadPtrIsBadWritePtrIsBadCodePtrIsBadStringPtr",
      "Validate Pointers Before Use"
    ],
    "li": [
      "C++",
      "Locate the pointer validation function. Your project should have an input and data validation class or library. Verify that this class or library has a pointer validation function. The pointer validation function should throw exceptions when invalid pointers are detected.",
      "Verify that the validation function checks for null. Examine the pointer validation function to make sure that it checks for null pointers.",
      "Verify that the validation function uses dynamic_cast. Examine the pointer validation function to make sure that it uses dynamic_cast to validate pointer type.",
      "Verify that the validation function uses Win32 APIs, if appropriate. If the project is built on a Windows platform, verify that the pointer validation function uses the following APIs as applicable: \r\n            \r\n              IsBadReadPtrIsBadWritePtrIsBadCodePtrIsBadStringPtr",
      "IsBadReadPtr",
      "IsBadWritePtr",
      "IsBadCodePtr",
      "IsBadStringPtr",
      "Verify that the pointer validation function is used. Look for functions that accept pointers as arguments. Verify that the pointer validation function is used to validate pointer arguments in the very beginning of function code.",
      "Add a pointer validation function. You should have a class or library dedicated to input and data validation. Add a function to this class or library to validate pointers. The pointer validation function should throw exceptions when invalid pointers are detected.",
      "Check for null pointers. The first and most obvious thing to check for is null. Add code to check that the pointer is not null to your validation function.",
      "Use dynamic_cast. When converting an incompatible pointer type, dynamic_cast returns a null pointer.  This makes dynamic_cast suitable for checking whether a pointer points to an object of a correct type. For the purpose of pointer validation, use it like this: if (NULL == dynamic_cast(pointer)) //error",
      "Use Win32 APIs. The following APIs may be used to validate pointers on Windows platforms: \r\n            \r\n              IsBadReadPtrIsBadWritePtrIsBadCodePtrIsBadStringPtr",
      "IsBadReadPtr",
      "IsBadWritePtr",
      "IsBadCodePtr",
      "IsBadStringPtr",
      "Validate pointers. Use the pointer validation function before dereferencing them. This is most likely to be useful when pointers are passed as arguments to functions. In such cases, pointers should be validated in the very beginning of function code.",
      "Validate Pointers Before Use"
    ],
    "p": [
      "Verify that a pointer validation function is implemented and used when pointers are passed as arguments to functions.",
      "Invalid pointers may cause the program to crash or allow an attacker to execute artbitrary code.",
      "Use the following steps to verify that pointers are validated before use:",
      "Locate the pointer validation function. Your project should have an input and data validation class or library. Verify that this class or library has a pointer validation function. The pointer validation function should throw exceptions when invalid pointers are detected.",
      "Verify that the validation function checks for null. Examine the pointer validation function to make sure that it checks for null pointers.",
      "Verify that the validation function uses dynamic_cast. Examine the pointer validation function to make sure that it uses dynamic_cast to validate pointer type.",
      "Verify that the validation function uses Win32 APIs, if appropriate. If the project is built on a Windows platform, verify that the pointer validation function uses the following APIs as applicable:",
      "Verify that the pointer validation function is used. Look for functions that accept pointers as arguments. Verify that the pointer validation function is used to validate pointer arguments in the very beginning of function code.",
      "Perform the following actions to implement a pointer validation function:",
      "Add a pointer validation function. You should have a class or library dedicated to input and data validation. Add a function to this class or library to validate pointers. The pointer validation function should throw exceptions when invalid pointers are detected.",
      "Check for null pointers. The first and most obvious thing to check for is null. Add code to check that the pointer is not null to your validation function.",
      "Use dynamic_cast. When converting an incompatible pointer type, dynamic_cast returns a null pointer.  This makes dynamic_cast suitable for checking whether a pointer points to an object of a correct type. For the purpose of pointer validation, use it like this: if (NULL == dynamic_cast(pointer)) //error",
      "Use Win32 APIs. The following APIs may be used to validate pointers on Windows platforms:",
      "Validate pointers. Use the pointer validation function before dereferencing them. This is most likely to be useful when pointers are passed as arguments to functions. In such cases, pointers should be validated in the very beginning of function code."
    ],
    "ol": [
      "Locate the pointer validation function. Your project should have an input and data validation class or library. Verify that this class or library has a pointer validation function. The pointer validation function should throw exceptions when invalid pointers are detected.\r\n      \r\n        \r\n          Verify that the validation function checks for null. Examine the pointer validation function to make sure that it checks for null pointers.\r\n        \r\n          \r\n            Verify that the validation function uses dynamic_cast. Examine the pointer validation function to make sure that it uses dynamic_cast to validate pointer type.\r\n          \r\n            \r\n              Verify that the validation function uses Win32 APIs, if appropriate. If the project is built on a Windows platform, verify that the pointer validation function uses the following APIs as applicable: \r\n            \r\n              IsBadReadPtrIsBadWritePtrIsBadCodePtrIsBadStringPtr\r\n            \r\n            \r\n              \r\n                Verify that the pointer validation function is used. Look for functions that accept pointers as arguments. Verify that the pointer validation function is used to validate pointer arguments in the very beginning of function code.",
      "Add a pointer validation function. You should have a class or library dedicated to input and data validation. Add a function to this class or library to validate pointers. The pointer validation function should throw exceptions when invalid pointers are detected.\r\n      \r\n        \r\n          Check for null pointers. The first and most obvious thing to check for is null. Add code to check that the pointer is not null to your validation function.\r\n        \r\n          \r\n            Use dynamic_cast. When converting an incompatible pointer type, dynamic_cast returns a null pointer.  This makes dynamic_cast suitable for checking whether a pointer points to an object of a correct type. For the purpose of pointer validation, use it like this: if (NULL == dynamic_cast(pointer)) //error\r\n          \r\n            \r\n              Use Win32 APIs. The following APIs may be used to validate pointers on Windows platforms: \r\n            \r\n              IsBadReadPtrIsBadWritePtrIsBadCodePtrIsBadStringPtr\r\n            \r\n            \r\n              \r\n                Validate pointers. Use the pointer validation function before dereferencing them. This is most likely to be useful when pointers are passed as arguments to functions. In such cases, pointers should be validated in the very beginning of function code."
    ],
    "strong": [
      "Locate the pointer validation function.",
      "Verify that the validation function checks for null.",
      "Verify that the validation function uses dynamic_cast.",
      "Verify that the validation function uses Win32 APIs, if appropriate.",
      "Verify that the pointer validation function is used.",
      "Add a pointer validation function.",
      "Check for null pointers.",
      "Use dynamic_cast.",
      "Use Win32 APIs.",
      "Validate pointers."
    ],
    "br": [
      ""
    ],
    "a": [
      "Validate Pointers Before Use"
    ]
  },
  "links": [
    {
      "href": "/article/3839edb9-a877-4e4a-8826-f683566ad67a",
      "text": "Validate Pointers Before Use"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that a pointer validation function is implemented and used when pointers are passed as arguments to functions.</p>\r\n  <h1>Why</h1>\r\n  <p>Invalid pointers may cause the program to crash or allow an attacker to execute artbitrary code.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to verify that pointers are validated before use:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Locate the pointer validation function.</strong> Your project should have an input and data validation class or library. Verify that this class or library has a pointer validation function. The pointer validation function should throw exceptions when invalid pointers are detected.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that the validation function checks for null.</strong> Examine the pointer validation function to make sure that it checks for null pointers.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Verify that the validation function uses dynamic_cast.</strong> Examine the pointer validation function to make sure that it uses dynamic_cast to validate pointer type.</p>\r\n          <li>\r\n            <p>\r\n              <strong>Verify that the validation function uses Win32 APIs, if appropriate.</strong> If the project is built on a Windows platform, verify that the pointer validation function uses the following APIs as applicable: </p>\r\n            <ul>\r\n              <li>IsBadReadPtr<li>IsBadWritePtr<li>IsBadCodePtr<li>IsBadStringPtr</li></li></li></li>\r\n            </ul>\r\n            <li>\r\n              <p>\r\n                <strong>Verify that the pointer validation function is used.</strong> Look for functions that accept pointers as arguments. Verify that the pointer validation function is used to validate pointer arguments in the very beginning of function code.</p>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Perform the following actions to implement a pointer validation function:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Add a pointer validation function.</strong> You should have a class or library dedicated to input and data validation. Add a function to this class or library to validate pointers. The pointer validation function should throw exceptions when invalid pointers are detected.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Check for null pointers.</strong> The first and most obvious thing to check for is null. Add code to check that the pointer is not null to your validation function.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Use dynamic_cast.</strong>&nbsp;When converting an incompatible pointer type, dynamic_cast returns a null pointer.&nbsp; This makes dynamic_cast suitable for checking whether a pointer points to an object of a correct type. For the purpose of pointer validation, use it like this: <br />if (NULL == dynamic_cast(pointer)) //error</p>\r\n          <li>\r\n            <p>\r\n              <strong>Use Win32 APIs.</strong> The following APIs may be used to validate pointers on Windows platforms: </p>\r\n            <ul>\r\n              <li>IsBadReadPtr<li>IsBadWritePtr<li>IsBadCodePtr<li>IsBadStringPtr</li></li></li></li>\r\n            </ul>\r\n            <li>\r\n              <p>\r\n                <strong>Validate pointers.</strong> Use the pointer validation function before dereferencing them. This is most likely to be useful when pointers are passed as arguments to functions. In such cases, pointers should be validated in the very beginning of function code.</p>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/3839edb9-a877-4e4a-8826-f683566ad67a\">Validate Pointers Before Use</a>\r\n    </li>\r\n  </ul>"
}