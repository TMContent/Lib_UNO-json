{
  "id": "417fdfc4-572a-4158-b0dc-7623e2507ef7",
  "checksum": "26be5df0c2c191938a28676d4a5a9674fd9e1ec4",
  "words": {
    "45": [
      "pre"
    ],
    "what": [
      "h1",
      "p"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "do": [
      "h1",
      "p",
      "title"
    ],
    "ensure": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "exceptions": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "cannot": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "recovered": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "title"
    ],
    "cause": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "application": [
      "p"
    ],
    "left": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "vulnerable": [
      "p",
      "p",
      "title"
    ],
    "state": [
      "p",
      "p"
    ],
    "i.e.,": [
      "p"
    ],
    "lacking": [
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "assurances": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "safety.": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "some": [
      "p"
    ],
    "systems": [
      "p",
      "p"
    ],
    "become": [
      "p"
    ],
    "after": [
      "p",
      "title"
    ],
    "occur": [
      "p",
      "p",
      "title"
    ],
    "because": [
      "p"
    ],
    "default": [
      "p"
    ],
    "behavior": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "simply": [
      "p",
      "p"
    ],
    "stop": [
      "p"
    ],
    "executing": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "when": [
      "p",
      "p",
      "h1"
    ],
    "encountering": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "error": [
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "weve": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "seen": [
      "p"
    ],
    "example": [
      "p",
      "p"
    ],
    "like": [
      "p",
      "p"
    ],
    "following": [
      "p"
    ],
    "looking": [
      "p"
    ],
    "at": [
      "p",
      "p"
    ],
    "various": [
      "p"
    ],
    "api": [
      "p",
      "p"
    ],
    "docs": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p"
    ],
    "reference": [
      "p"
    ],
    "implementations": [
      "p"
    ],
    "$result": [
      "pre"
    ],
    "=": [
      "pre"
    ],
    "perform_some_operationtest": [
      "pre"
    ],
    "string": [
      "pre"
    ],
    "$class_type;": [
      "pre"
    ],
    "if": [
      "pre",
      "p",
      "p"
    ],
    "!$result)": [
      "pre"
    ],
    "diean": [
      "pre"
    ],
    "occurred;": [
      "pre"
    ],
    "these": [
      "p"
    ],
    "examples": [
      "p"
    ],
    "run": [
      "p"
    ],
    "rampant": [
      "p"
    ],
    "dandelions": [
      "p"
    ],
    "over": [
      "p"
    ],
    "internet": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "demonstration": [
      "p"
    ],
    "how": [
      "p",
      "h1"
    ],
    "use": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "specific": [
      "p"
    ],
    "right?": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "but": [
      "p"
    ],
    "it": [
      "p"
    ],
    "also": [
      "p"
    ],
    "ignores": [
      "p"
    ],
    "handling!": [
      "p"
    ],
    "there": [
      "p",
      "p",
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "data": [
      "p"
    ],
    "lying": [
      "p"
    ],
    "around": [
      "p"
    ],
    "temporary": [
      "p"
    ],
    "file": [
      "p"
    ],
    "somewhere?": [
      "p"
    ],
    "our": [
      "p"
    ],
    "above": [
      "p"
    ],
    "stops": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "current": [
      "p"
    ],
    "context": [
      "p"
    ],
    "performs": [
      "p"
    ],
    "no": [
      "p"
    ],
    "cleanup": [
      "p",
      "p"
    ],
    "worse": [
      "p"
    ],
    "still": [
      "p"
    ],
    "handling": [
      "p",
      "p"
    ],
    "errors": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p"
    ],
    "way": [
      "p",
      "p"
    ],
    "troublesome": [
      "p"
    ],
    "since": [
      "p"
    ],
    "almost": [
      "p"
    ],
    "every": [
      "p"
    ],
    "function": [
      "p"
    ],
    "call": [
      "p"
    ],
    "capable": [
      "p",
      "p"
    ],
    "throwing": [
      "p"
    ],
    "several": [
      "p"
    ],
    "different": [
      "p"
    ],
    "kinds": [
      "p"
    ],
    "which": [
      "p"
    ],
    "need": [
      "p"
    ],
    "trapped": [
      "p"
    ],
    "better": [
      "p"
    ],
    "strategy": [
      "p"
    ],
    "needed": [
      "p"
    ],
    "handle": [
      "p"
    ],
    "gracefully": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "awkward": [
      "p"
    ],
    "unsafe": [
      "p"
    ],
    "system": [
      "p",
      "p",
      "title"
    ],
    "states": [
      "p",
      "p"
    ],
    "rule": [
      "p"
    ],
    "needs": [
      "p"
    ],
    "applied": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "segments": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "generating": [
      "p"
    ],
    "or": [
      "p"
    ],
    "propagating": [
      "p"
    ],
    "unrecoverable": [
      "p",
      "p",
      "p",
      "title"
    ],
    "even": [
      "p"
    ],
    "one": [
      "p"
    ],
    "place": [
      "p"
    ],
    "where": [
      "p"
    ],
    "constraint": [
      "p"
    ],
    "satisfied": [
      "p"
    ],
    "will": [
      "p"
    ],
    "eventually": [
      "p"
    ],
    "causes": [
      "p"
    ],
    "unhandled": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "properly": [
      "p"
    ],
    "involves": [
      "p"
    ],
    "few": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "declare": [
      "p"
    ],
    "global": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "handler": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "trap": [
      "p"
    ],
    "ensures": [
      "p"
    ],
    "very": [
      "p"
    ],
    "least": [
      "p"
    ],
    "are": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "caught": [
      "p"
    ],
    "structured": [
      "p"
    ],
    "management": [
      "p"
    ],
    "by": [
      "p"
    ],
    "using": [
      "p"
    ],
    "try/catch/finally": [
      "p"
    ],
    "blocks": [
      "p"
    ],
    "consistent": [
      "p"
    ],
    "does": [
      "p"
    ],
    "allow": [
      "p",
      "p"
    ],
    "inconsistent": [
      "p"
    ],
    "insecure": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "reporting": [
      "p"
    ],
    "production": [
      "p"
    ],
    "dont": [
      "p"
    ],
    "insightful": [
      "p"
    ],
    "messages": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "sent": [
      "p"
    ],
    "client": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "might": [
      "p"
    ],
    "result": [
      "p"
    ],
    "information": [
      "p"
    ],
    "disclosure": [
      "p"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "generic": [
      "ul",
      "li",
      "a"
    ],
    "pages": [
      "ul",
      "li",
      "a"
    ],
    "with": [
      "ul",
      "li",
      "a"
    ],
    "harmless": [
      "ul",
      "li",
      "a"
    ],
    "returned": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "leave": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Related Items"
    ],
    "p": [
      "Ensure that exceptions that cannot be recovered from do not cause the application to be left in a vulnerable state (i.e., lacking any assurances of exception safety).",
      "Some systems become vulnerable after exceptions occur, because the default behavior is to simply stop executing certain code when encountering an error. Weve all seen example code like the following when looking at various API docs and reference implementations:",
      "These examples run rampant like dandelions all over the internet. A simple demonstration of how to use a specific API, right? Sure, but it also ignores error handling! What if there is sensitive data lying around in a temporary file somewhere? Our above example simply stops execution in the current context, and performs no cleanup. Worse still, handling errors this way is troublesome, since almost every function call is capable of throwing several different kinds of errors, all of which need to be trapped. A better strategy is needed to handle all errors and gracefully prevent awkward, unsafe system states.",
      "This rule needs to be applied for all code segments that contain any code capable of generating or propagating unrecoverable exceptions. If there is even one place in the code where this constraint is not satisfied, a system state will eventually occur that causes an unrecoverable, unhandled exception.",
      "Handling unrecoverable exceptions properly involves a few steps: Declare a global error handler to trap all errors this ensures that at the very least, all exceptions are caught. Use structured exception management by using try/catch/finally blocks, there is a consistent way to cleanup from errors and ensure that the exception does not allow for inconsistent, insecure states. Secure error reporting for production systems dont allow insightful error messages to be sent to the client that might result in information disclosure.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "$result = perform_some_operation(test string, 45, $class_type);",
      "If (!$result) die(an error occurred);"
    ],
    "ul": [
      "Use a Global Exception Handler for Unhandled Exceptions\r\n      \r\n        Generic Error Pages with Harmless Messages are Returned to the Client"
    ],
    "li": [
      "Use a Global Exception Handler for Unhandled Exceptions",
      "Generic Error Pages with Harmless Messages are Returned to the Client"
    ],
    "a": [
      "Use a Global Exception Handler for Unhandled Exceptions",
      "Generic Error Pages with Harmless Messages are Returned to the Client"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "/article/33a894ce-2061-4741-be92-1d063c9cf057",
      "text": "Use a Global Exception Handler for Unhandled Exceptions"
    },
    {
      "href": "/article/209b61a1-022d-4574-ad70-293b9a1a5a86",
      "text": "Generic Error Pages with Harmless Messages are Returned to the Client"
    }
  ],
  "html": "<h1>What to Do</h1>\r\n  <p>Ensure that exceptions that cannot be recovered from do not cause the application to be left in a vulnerable state (i.e., lacking any assurances of exception safety).</p>\r\n  <h1>Why</h1>\r\n  <p>Some systems become vulnerable after exceptions occur, because the default behavior is to simply stop executing certain code when encountering an error. Weve all seen example code like the following when looking at various API docs and reference implementations: </p>\r\n  <pre>&#36;result = perform_some_operation(test string, 45, &#36;class_type); </pre>\r\n  <pre>If (&#33;&#36;result) die(an error occurred); </pre>\r\n  <p>These examples run rampant like dandelions all over the internet. A simple demonstration of how to use a specific API, right? Sure, but it also ignores error handling&#33; What if there is sensitive data lying around in a temporary file somewhere? Our above example simply stops execution in the current context, and performs no cleanup. Worse still, handling errors this way is troublesome, since almost every function call is capable of throwing several different kinds of errors, all of which need to be trapped. A better strategy is needed to handle all errors and gracefully prevent awkward, unsafe system states. </p>\r\n  <h1>When</h1>\r\n  <p>This rule needs to be applied for all code segments that contain any code capable of generating or propagating unrecoverable exceptions. If there is even one place in the code where this constraint is not satisfied, a system state will eventually occur that causes an unrecoverable, unhandled exception. </p>\r\n  <h1>How</h1>\r\n  <p>Handling unrecoverable exceptions properly involves a few steps: Declare a global error handler to trap all errors this ensures that at the very least, all exceptions are caught. Use structured exception management by using try/catch/finally blocks, there is a consistent way to cleanup from errors and ensure that the exception does not allow for inconsistent, insecure states. Secure error reporting for production systems dont allow insightful error messages to be sent to the client that might result in information disclosure. </p>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/33a894ce-2061-4741-be92-1d063c9cf057\">Use a Global Exception Handler for Unhandled Exceptions</a>\r\n      <li>\r\n        <a href=\"/article/209b61a1-022d-4574-ad70-293b9a1a5a86\">Generic Error Pages with Harmless Messages are Returned to the Client</a>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}