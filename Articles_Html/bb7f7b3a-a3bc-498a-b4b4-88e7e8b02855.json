{
  "id": "bb7f7b3a-a3bc-498a-b4b4-88e7e8b02855",
  "checksum": "1a4f49a6ee2838f5a9de07d7b635013a1a359332",
  "words": {
    "description": [
      "h1"
    ],
    "buffer": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "overflows": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "occur": [
      "p"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "manipulated": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "cause": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1"
    ],
    "write": [
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "beyond": [
      "p"
    ],
    "limits": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "allocated": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "short": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "overflow": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "happens": [
      "p"
    ],
    "tries": [
      "p",
      "p"
    ],
    "too": [
      "p",
      "p"
    ],
    "much": [
      "p",
      "p",
      "p"
    ],
    "into": [
      "p",
      "p",
      "p",
      "p"
    ],
    "little": [
      "p",
      "p"
    ],
    "memory)": [
      "p"
    ],
    "space": [
      "p"
    ],
    "there": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "two": [
      "p"
    ],
    "types": [
      "p"
    ],
    "stack": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "heap": [
      "p",
      "p",
      "p",
      "p"
    ],
    "easier": [
      "p"
    ],
    "exploit": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "because": [
      "p",
      "p"
    ],
    "stores": [
      "p"
    ],
    "instruction": [
      "p",
      "p",
      "p"
    ],
    "pointers": [
      "p",
      "p",
      "p"
    ],
    "addition": [
      "p"
    ],
    "buffers": [
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "overwriting": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "redirect": [
      "p"
    ],
    "applicationâ€™s": [
      "p"
    ],
    "execution": [
      "p",
      "p",
      "p",
      "p"
    ],
    "flow": [
      "p"
    ],
    "he": [
      "p",
      "p"
    ],
    "has": [
      "p",
      "p",
      "p"
    ],
    "placed": [
      "p",
      "p",
      "p",
      "p"
    ],
    "somewhere": [
      "p"
    ],
    "thus": [
      "p",
      "p",
      "p"
    ],
    "allowing": [
      "p"
    ],
    "him": [
      "p"
    ],
    "execute": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "arbitrary": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "amount": [
      "p",
      "p"
    ],
    "executed": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "limited": [
      "p"
    ],
    "\"classic\"": [
      "p"
    ],
    "people": [
      "p"
    ],
    "usually": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "refer": [
      "p"
    ],
    "they": [
      "p",
      "p",
      "p"
    ],
    "talk": [
      "p"
    ],
    "about": [
      "p"
    ],
    "contrast": [
      "p"
    ],
    "harder": [
      "p",
      "p"
    ],
    "less": [
      "p",
      "p",
      "p"
    ],
    "frequent": [
      "p"
    ],
    "well-known": [
      "p"
    ],
    "does": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "store": [
      "p"
    ],
    "at": [
      "p",
      "p"
    ],
    "least": [
      "p"
    ],
    "same": [
      "p"
    ],
    "consistent": [
      "p"
    ],
    "manner": [
      "p"
    ],
    "which": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "p"
    ],
    "heap-based": [
      "p",
      "p"
    ],
    "corrupt": [
      "p"
    ],
    "structures": [
      "p"
    ],
    "stored": [
      "p"
    ],
    "an": [
      "p"
    ],
    "attempt": [
      "p",
      "p"
    ],
    "overwrite": [
      "p"
    ],
    "function": [
      "p",
      "p"
    ],
    "pointer": [
      "p",
      "p"
    ],
    "point": [
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p"
    ],
    "idea": [
      "p"
    ],
    "calls": [
      "p"
    ],
    "whose": [
      "p"
    ],
    "been": [
      "p"
    ],
    "overwritten": [
      "p"
    ],
    "attacker's": [
      "p"
    ],
    "will": [
      "p",
      "p",
      "p"
    ],
    "instead": [
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "failed": [
      "p"
    ],
    "either": [
      "p"
    ],
    "type": [
      "p"
    ],
    "crashing": [
      "p",
      "p"
    ],
    "producing": [
      "p"
    ],
    "denial": [
      "p",
      "p",
      "p"
    ],
    "service": [
      "p",
      "p",
      "p",
      "p"
    ],
    "condition": [
      "p",
      "p"
    ],
    "affect": [
      "p"
    ],
    "applications": [
      "p",
      "p",
      "p"
    ],
    "using": [
      "p",
      "p"
    ],
    "native": [
      "p"
    ],
    "especially": [
      "p"
    ],
    "written": [
      "p"
    ],
    "c": [
      "p"
    ],
    "c++": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "impact": [
      "h1",
      "p"
    ],
    "attackers": [
      "p",
      "p",
      "p"
    ],
    "seek": [
      "p"
    ],
    "order": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "p"
    ],
    "privileges": [
      "p",
      "p",
      "p"
    ],
    "exploited": [
      "p"
    ],
    "however": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p",
      "p"
    ],
    "allow": [
      "p",
      "p"
    ],
    "most": [
      "p",
      "p"
    ],
    "results": [
      "p"
    ],
    "but": [
      "p",
      "p"
    ],
    "this": [
      "p"
    ],
    "presents": [
      "p"
    ],
    "interest": [
      "p"
    ],
    "became": [
      "p"
    ],
    "notorious": [
      "p"
    ],
    "network": [
      "p",
      "p",
      "p",
      "p"
    ],
    "services": [
      "p"
    ],
    "allowed": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p"
    ],
    "target": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "systems": [
      "p",
      "p"
    ],
    "remotely": [
      "p"
    ],
    "until": [
      "p"
    ],
    "web": [
      "p",
      "p"
    ],
    "20,": [
      "p"
    ],
    "opened": [
      "p"
    ],
    "new": [
      "p",
      "p"
    ],
    "horizons": [
      "p"
    ],
    "exploitation": [
      "p"
    ],
    "was": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "gold": [
      "p"
    ],
    "standard": [
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p"
    ],
    "hacking": [
      "p"
    ],
    "usual": [
      "p"
    ],
    "attack": [
      "p",
      "p"
    ],
    "scenario": [
      "p",
      "p"
    ],
    "would": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "run": [
      "p"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p"
    ],
    "server": [
      "p",
      "p",
      "p"
    ],
    "use": [
      "p"
    ],
    "shell": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "bind": [
      "p"
    ],
    "port": [
      "p",
      "p"
    ],
    "once": [
      "p"
    ],
    "bound": [
      "p"
    ],
    "connect": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "tunnel": [
      "p"
    ],
    "such": [
      "p",
      "p"
    ],
    "netcat": [
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "telnet": [
      "p"
    ],
    "commands": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p"
    ],
    "account": [
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "compromised": [
      "p",
      "p"
    ],
    "another": [
      "p"
    ],
    "vector": [
      "p"
    ],
    "targeted": [
      "p"
    ],
    "known": [
      "p"
    ],
    "\"client-side\"": [
      "p"
    ],
    "client-side": [
      "p"
    ],
    "involved": [
      "p"
    ],
    "unwittingly": [
      "p"
    ],
    "loading": [
      "p"
    ],
    "download": [
      "p"
    ],
    "from": [
      "p"
    ],
    "user's": [
      "p"
    ],
    "system": [
      "p",
      "p"
    ],
    "might": [
      "p"
    ],
    "mitigated": [
      "p"
    ],
    "measures": [
      "p",
      "p",
      "p"
    ],
    "built": [
      "p"
    ],
    "operating": [
      "p",
      "p"
    ],
    "added": [
      "p"
    ],
    "compiler": [
      "p"
    ],
    "some": [
      "p"
    ],
    "exploits": [
      "p"
    ],
    "bypass": [
      "p",
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "if": [
      "p"
    ],
    "cannot": [
      "p"
    ],
    "defenses": [
      "p",
      "p",
      "p",
      "p"
    ],
    "then": [
      "p"
    ],
    "reduced": [
      "p"
    ],
    "replacement": [
      "p"
    ],
    "writing": [
      "p"
    ],
    "correctly": [
      "p"
    ],
    "-": [
      "p"
    ],
    "proper": [
      "p"
    ],
    "defense": [
      "p"
    ],
    "validate": [
      "p",
      "p",
      "p"
    ],
    "size": [
      "p"
    ],
    "copied": [
      "p"
    ],
    "before": [
      "p",
      "p",
      "p"
    ],
    "copying": [
      "p",
      "p",
      "p"
    ],
    "notoriety": [
      "p"
    ],
    "their": [
      "p"
    ],
    "extreme": [
      "p"
    ],
    "potential": [
      "p"
    ],
    "danger": [
      "p"
    ],
    "resulted": [
      "p"
    ],
    "being": [
      "p"
    ],
    "it": [
      "p"
    ],
    "common": [
      "p",
      "p"
    ],
    "combined": [
      "p"
    ],
    "other": [
      "p"
    ],
    "security": [
      "p"
    ],
    "improved": [
      "p"
    ],
    "periphery": [
      "p"
    ],
    "increased": [
      "p"
    ],
    "popularity": [
      "p"
    ],
    "managed": [
      "p"
    ],
    "languages": [
      "p"
    ],
    "have": [
      "p"
    ],
    "become": [
      "p"
    ],
    "significantly": [
      "p"
    ],
    "let's": [
      "p"
    ],
    "make": [
      "p"
    ],
    "any": [
      "p"
    ],
    "ones": [
      "p"
    ],
    "follow": [
      "p"
    ],
    "instructions": [
      "p"
    ],
    "below": [
      "p"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "input": [
      "p",
      "p"
    ],
    "sizes": [
      "p",
      "p"
    ],
    "avoid": [
      "p"
    ],
    "dangerous": [
      "p",
      "p"
    ],
    "apis": [
      "p",
      "p"
    ],
    "check": [
      "h1",
      "p"
    ],
    "adequate": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "validated": [
      "p",
      "p"
    ],
    "specific": [
      "h1"
    ],
    "technologies": [
      "h1"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Specific Technologies"
    ],
    "p": [
      "Buffer overflows occur when code can be manipulated to cause the application to write data beyond the limits of memory allocated for that data. In short, a buffer overflow happens when the application tries to write too much data into too little (memory) space.",
      "There are two types of buffer overflows: stack buffer overflows and heap buffer overflows. Stack buffer overflows are much easier to exploit, because the stack stores instruction pointers in addition to data buffers. By overwriting the instruction pointers in the stack, the attacker can redirect the applicationâ€™s execution flow to data that he has placed somewhere in memory, thus allowing him to execute arbitrary code. The amount of code that can be executed is limited to the amount of data that can be placed by the attacker in memory. The stack buffer overflow is the \"classic\" buffer overflow that people usually refer to when they talk about buffer overflows.",
      "In contrast, heap buffer overflows are much harder to exploit, and they are thus less frequent and less well-known. The heap does not usually store instruction pointers, at least not in the same consistent manner that the stack does, which is why they are harder to exploit. To exploit a heap-based buffer overflow, the attacker tries to corrupt memory structures stored in the heap in an attempt to overwrite a function pointer to point to code that he has placed as data in memory. The idea is that when the application calls the function whose pointer has been overwritten, the attacker's code will be executed instead. The result of heap-based buffer overflows is also arbitrary code execution.",
      "A failed attempt for either type of buffer overflow will usually result in the application crashing, thus producing a denial of service condition.",
      "Buffer overflows affect applications using native code, especially applications written in C and C++.",
      "Attackers usually seek to exploit buffer overflows in order to execute arbitrary code with the privileges of the exploited application. However, not all buffer overflow vulnerabilities allow execution of arbitrary code. Most buffer overflow vulnerabilities allow crashing the application, which results in a denial of service condition, but this usually presents little interest to attackers.",
      "Buffer overflows became notorious because of vulnerabilities in network services that allowed attackers to execute code on the target systems remotely. Until Web 2.0, which opened new horizons for exploitation, the buffer overflow was the gold standard of malicious hacking. The usual attack scenario was that the attacker would run the exploit against a vulnerable target server and use the exploit to execute shell code, which would bind a shell to a port on the target server. Once a shell was bound to a port, the attacker would connect to the shell using a simple network tunnel, such as netcat or telnet, and execute commands on the target server with the privileges of the user account that was used by the compromised network service.",
      "Another attack vector targeted user applications and was known as the \"client-side\" exploit. The client-side scenario usually involved the user unwittingly loading exploit code into a vulnerable application, at which point the exploit code would execute the shell code. The shell code would download malicious code from the web and execute the malicious code on the user's system with the privileges of the compromised application.",
      "The impact of buffer overflow vulnerabilities might be mitigated by measures built into the operating system or added to the application by the compiler. Some exploits can bypass these measures, but if the exploit cannot bypass buffer overflow defenses, then arbitrary code execution will be reduced to denial of service. These defenses are not a replacement for writing code correctly - the proper defense against buffer overflows is to validate the size of copied data and the target buffer before copying.",
      "The notoriety of buffer overflows and their extreme potential danger resulted in defenses being placed against it into most common operating systems. Combined with other security measures, such as improved network periphery defenses and increased popularity of managed languages, buffer overflows have become significantly less common. Let's not make any new ones. Follow the instructions below to prevent buffer overflows.",
      "To prevent buffer overflows, validate all input, validate the sizes of data and the buffer before copying, and avoid dangerous APIs.",
      "To check for adequate protection against buffer overflows, verify that all input is validated, the sizes of data and target buffers are validated before copying, and dangerous APIs are not used."
    ],
    "ul": [
      "C++ Buffer Overflow"
    ],
    "li": [
      "C++ Buffer Overflow"
    ],
    "a": [
      "C++ Buffer Overflow"
    ]
  },
  "links": [
    {
      "href": "0530569f-b6bb-4a31-ae68-55dac9f4781a",
      "text": "C++ Buffer Overflow"
    }
  ],
  "html": "<h1>Description</h1><p>Buffer overflows occur when code can be manipulated to cause the application to write data beyond the limits of memory allocated for that data. In short, a buffer overflow happens when the application tries to write too much data into too little (memory) space. \n</p><p>\nThere are two types of buffer overflows: stack buffer overflows and heap buffer overflows. Stack buffer overflows are much easier to exploit, because the stack stores instruction pointers in addition to data buffers. By overwriting the instruction pointers in the stack, the attacker can redirect the applicationâ€™s execution flow to data that he has placed somewhere in memory, thus allowing him to execute arbitrary code. The amount of code that can be executed is limited to the amount of data that can be placed by the attacker in memory. The stack buffer overflow is the \"classic\" buffer overflow that people usually refer to when they talk about buffer overflows. \n</p><p>\nIn contrast, heap buffer overflows are much harder to exploit, and they are thus less frequent and less well-known. The heap does not usually store instruction pointers, at least not in the same consistent manner that the stack does, which is why they are harder to exploit. To exploit a heap-based buffer overflow, the attacker tries to corrupt memory structures stored in the heap in an attempt to overwrite a function pointer to point to code that he has placed as data in memory. The idea is that when the application calls the function whose pointer has been overwritten, the attacker's code will be executed instead. The result of heap-based buffer overflows is also arbitrary code execution. \n</p><p>\nA failed attempt for either type of buffer overflow will usually result in the application crashing, thus producing a denial of service condition. \n</p><p>\nBuffer overflows affect applications using native code, especially applications written in C and C++.\n</p><h1>Impact</h1><p>Attackers usually seek to exploit buffer overflows in order to execute arbitrary code with the privileges of the exploited application. However, not all buffer overflow vulnerabilities allow execution of arbitrary code. Most buffer overflow vulnerabilities allow crashing the application, which results in a denial of service condition, but this usually presents little interest to attackers. \n</p><p>\nBuffer overflows became notorious because of vulnerabilities in network services that allowed attackers to execute code on the target systems remotely. Until Web 2.0, which opened new horizons for exploitation, the buffer overflow was the gold standard of malicious hacking. The usual attack scenario was that the attacker would run the exploit against a vulnerable target server and use the exploit to execute shell code, which would bind a shell to a port on the target server. Once a shell was bound to a port, the attacker would connect to the shell using a simple network tunnel, such as netcat or telnet, and execute commands on the target server with the privileges of the user account that was used by the compromised network service. \n</p><p>\nAnother attack vector targeted user applications and was known as the \"client-side\" exploit. The client-side scenario usually involved the user unwittingly loading exploit code into a vulnerable application, at which point the exploit code would execute the shell code. The shell code would download malicious code from the web and execute the malicious code on the user's system with the privileges of the compromised application. \n</p><p>\nThe impact of buffer overflow vulnerabilities might be mitigated by measures built into the operating system or added to the application by the compiler. Some exploits can bypass these measures, but if the exploit cannot bypass buffer overflow defenses, then arbitrary code execution will be reduced to denial of service. These defenses are not a replacement for writing code correctly - the proper defense against buffer overflows is to validate the size of copied data and the target buffer before copying.\n</p><p>\nThe notoriety of buffer overflows and their extreme potential danger resulted in defenses being placed against it into most common operating systems. Combined with other security measures, such as improved network periphery defenses and increased popularity of managed languages, buffer overflows have become significantly less common. Let's not make any new ones. Follow the instructions below to prevent buffer overflows.\n</p><h1>Countermeasures</h1><p>To prevent buffer overflows, validate all input, validate the sizes of data and the buffer before copying, and avoid dangerous APIs.\n</p><h1>Application Check</h1><p>To check for adequate protection against buffer overflows, verify that all input is validated, the sizes of data and target buffers are validated before copying, and dangerous APIs are not used.\n</p><h1>Specific Technologies</h1><ul><li> <a href=\"0530569f-b6bb-4a31-ae68-55dac9f4781a\">C++ Buffer Overflow</a></li></ul>"
}