{
  "id": "d40e3076-3d0e-4da8-aded-880925593d65",
  "checksum": "bb748c8b0a4aa84fb168bdb074254822c760a109",
  "words": {
    "80": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "web": [
      "ul",
      "li",
      "div",
      "ol",
      "p"
    ],
    "application": [
      "ul",
      "li",
      "div",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "b",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "b",
      "p"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "p"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "ensure": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p"
    ],
    "effective": [
      "p",
      "p",
      "p",
      "ol",
      "p",
      "title"
    ],
    "filters": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "b",
      "li",
      "li",
      "p",
      "p",
      "b",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "b",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "b",
      "p",
      "title"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "title"
    ],
    "in": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "place": [
      "p",
      "title"
    ],
    "prevent": [
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "malicious": [
      "p",
      "p",
      "title"
    ],
    "traffic": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "from": [
      "p",
      "p",
      "p",
      "title"
    ],
    "entering": [
      "p",
      "title"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "perimeter": [
      "p",
      "title"
    ],
    "network": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "how": [
      "h1"
    ],
    "fix": [
      "h1"
    ],
    "filtering": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "published": [
      "p"
    ],
    "ports": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "firewall": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "efficient": [
      "p"
    ],
    "method": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "blocking": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "packets": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "payloads": [
      "p",
      "p"
    ],
    "range": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "packet": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "b",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "restrict": [
      "p",
      "p"
    ],
    "at": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "layer": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "based": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "source": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "destination": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "ip": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "addresses": [
      "p"
    ],
    "port": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "numbers": [
      "p"
    ],
    "complex": [
      "p"
    ],
    "inspect": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "application-specific": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li"
    ],
    "defense": [
      "p"
    ],
    "depth": [
      "p"
    ],
    "approach": [
      "p"
    ],
    "uses": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "layered": [
      "p"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "very": [
      "p",
      "ol",
      "p"
    ],
    "way": [
      "p"
    ],
    "block": [
      "p",
      "ol",
      "p",
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "there": [
      "p"
    ],
    "several": [
      "p"
    ],
    "common": [
      "p"
    ],
    "types": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "these": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "filter": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "protocol": [
      "ol",
      "li",
      "p"
    ],
    "or": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "number": [
      "ol",
      "li",
      "p"
    ],
    "address": [
      "ol",
      "li",
      "p"
    ],
    "computer": [
      "ol",
      "li",
      "p"
    ],
    "name": [
      "ol",
      "li",
      "p"
    ],
    "static": [
      "ol",
      "li",
      "p"
    ],
    "communication": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "through": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "specific": [
      "ol",
      "li",
      "p"
    ],
    "either": [
      "ol",
      "li",
      "p"
    ],
    "allowed": [
      "ol",
      "li",
      "p"
    ],
    "blocked": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "usually": [
      "ol",
      "li",
      "p"
    ],
    "logged": [
      "ol",
      "li",
      "p"
    ],
    "secure": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "denies": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "default": [
      "ol",
      "li",
      "p"
    ],
    "payload": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "unknown": [
      "ol",
      "li",
      "p"
    ],
    "might": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "dangerous": [
      "ol",
      "li",
      "p"
    ],
    "more": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "intelligent": [
      "ol",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "configured": [
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "decisions": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "access": [
      "ol",
      "li",
      "p"
    ],
    "control": [
      "ol",
      "li",
      "p"
    ],
    "rules": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "circuit-level": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "sessions": [
      "ol",
      "li",
      "p"
    ],
    "rather": [
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "data": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "inbound": [
      "ol",
      "li",
      "p"
    ],
    "outbound": [
      "ol",
      "li",
      "p"
    ],
    "client": [
      "ol",
      "li",
      "p"
    ],
    "makes": [
      "ol",
      "li",
      "p"
    ],
    "request": [
      "ol",
      "li",
      "p"
    ],
    "directly": [
      "ol",
      "li",
      "p"
    ],
    "against": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li"
    ],
    "firewall/gateway": [
      "ol",
      "li",
      "p"
    ],
    "turn": [
      "ol",
      "li",
      "p"
    ],
    "gateway": [
      "ol",
      "li",
      "p"
    ],
    "initiates": [
      "ol",
      "li",
      "p"
    ],
    "connection": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "server": [
      "ol",
      "li",
      "p"
    ],
    "acts": [
      "ol",
      "li",
      "p"
    ],
    "as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "broker": [
      "ol",
      "li",
      "p"
    ],
    "between": [
      "ol",
      "li",
      "p"
    ],
    "two": [
      "ol",
      "li",
      "p"
    ],
    "connections": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "p"
    ],
    "knowledge": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "p"
    ],
    "circuit": [
      "ol",
      "li",
      "p"
    ],
    "level": [
      "ol",
      "li",
      "p"
    ],
    "valid": [
      "ol",
      "li",
      "p"
    ],
    "interactions": [
      "ol",
      "li",
      "p"
    ],
    "they": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "do": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p"
    ],
    "actual": [
      "ol",
      "li",
      "p"
    ],
    "but": [
      "ol",
      "ol",
      "li",
      "p",
      "p"
    ],
    "count": [
      "ol",
      "li",
      "p"
    ],
    "frames": [
      "ol",
      "li",
      "p"
    ],
    "integrity": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "session": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "hijacking": [
      "ol",
      "li",
      "p"
    ],
    "replaying": [
      "ol",
      "li",
      "p"
    ],
    "smart": [
      "ol",
      "li",
      "p"
    ],
    "analyze": [
      "ol",
      "li",
      "p"
    ],
    "stream": [
      "ol",
      "li",
      "p"
    ],
    "provide": [
      "ol",
      "li",
      "p"
    ],
    "processing": [
      "ol",
      "li",
      "p"
    ],
    "including": [
      "ol",
      "ol",
      "li",
      "p",
      "p"
    ],
    "inspecting": [
      "ol",
      "li",
      "p"
    ],
    "screening": [
      "ol",
      "ol",
      "li",
      "p",
      "p"
    ],
    "redirecting": [
      "ol",
      "li",
      "p"
    ],
    "even": [
      "ol",
      "li",
      "p"
    ],
    "modifying": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "passes": [
      "ol",
      "li",
      "p"
    ],
    "protect": [
      "ol",
      "li",
      "p"
    ],
    "such": [
      "ol",
      "li",
      "p"
    ],
    "following": [
      "ol",
      "li",
      "p"
    ],
    "unsafe": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "smtp": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "commands": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "internal": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "dns": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "servers": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "http-based": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "red": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "nimda": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "which": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "use": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "http": [
      "ol",
      "ol",
      "p",
      "p",
      "p",
      "p"
    ],
    "delete": [
      "ol",
      "p",
      "p"
    ],
    "allow": [
      "ol",
      "ol",
      "p",
      "li",
      "p"
    ],
    "get": [
      "ol",
      "p"
    ],
    "capabilities": [
      "ol",
      "p"
    ],
    "content": [
      "ol",
      "p"
    ],
    "virus": [
      "ol",
      "p"
    ],
    "detection": [
      "ol",
      "p"
    ],
    "lexical": [
      "ol",
      "p"
    ],
    "analysis": [
      "ol",
      "p"
    ],
    "site": [
      "ol",
      "p"
    ],
    "categorization": [
      "ol",
      "p"
    ],
    "scenarios": [
      "ol",
      "p"
    ],
    "both": [
      "ol",
      "ol",
      "p",
      "li",
      "p"
    ],
    "security": [
      "ol",
      "p"
    ],
    "measures": [
      "ol",
      "p"
    ],
    "enforcement": [
      "ol",
      "p"
    ],
    "business": [
      "ol",
      "p"
    ],
    "stateful": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "b"
    ],
    "inspection": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "b"
    ],
    "limited": [
      "ol",
      "li",
      "p"
    ],
    "therefore": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p"
    ],
    "context": [
      "ol",
      "li",
      "p"
    ],
    "determine": [
      "ol",
      "li",
      "p"
    ],
    "using": [
      "ol",
      "li",
      "p"
    ],
    "contents": [
      "ol",
      "li",
      "p"
    ],
    "their": [
      "ol",
      "li",
      "p"
    ],
    "sequence": [
      "ol",
      "li",
      "p"
    ],
    "limits": [
      "ol",
      "li",
      "p"
    ],
    "scalability": [
      "ol",
      "li",
      "p"
    ],
    "custom": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "server/client": [
      "ol",
      "li",
      "p"
    ],
    "when": [
      "p"
    ],
    "you": [
      "p"
    ],
    "multiple": [
      "p"
    ],
    "levels": [
      "p"
    ],
    "stack": [
      "p"
    ],
    "helps": [
      "p"
    ],
    "your": [
      "p"
    ],
    "environment": [
      "p"
    ],
    "used": [
      "p"
    ],
    "destined": [
      "p"
    ],
    "any": [
      "p"
    ],
    "other": [
      "p"
    ],
    "further": [
      "p"
    ],
    "nature": [
      "p"
    ],
    "verb": [
      "p"
    ],
    "verbs": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "How to Fix"
    ],
    "ul": [
      "Web Application",
      "Unsafe SMTP commands Attacks against internal DNS servers. HTTP-based attacks (for example, Code Red and Nimda, which use application-specific knowledge)"
    ],
    "li": [
      "Web Application",
      "Packet filters. These can filter packets based on protocol, source or destination port number and source or destination address, or computer name. IP packet filters are static, and communication through a specific port is either allowed or blocked. Blocked packets are usually logged, and a secure packet filter denies by default. At the network layer, the payload is unknown and might be dangerous. More intelligent types of filtering must be configured to inspect the payload and make decisions based on access control rules.",
      "Circuit-level filters. These inspect sessions rather than payload data. An inbound or outbound client makes a request directly against the firewall/gateway, and in turn the gateway initiates a connection to the server and acts as a broker between the two connections. With knowledge of application connection rules, circuit level filters ensure valid interactions. They do not inspect the actual payload, but they do count frames to ensure packet integrity and prevent session hijacking and replaying.",
      "Application filters. Smart application filters can analyze a data stream for an application and provide application-specific processing, including inspecting, screening or blocking, redirecting, and even modifying the data as it passes through the firewall. Application filters protect against attacks such as the following: Unsafe SMTP commands Attacks against internal DNS servers. HTTP-based attacks (for example, Code Red and Nimda, which use application-specific knowledge)",
      "Unsafe SMTP commands",
      "Attacks against internal DNS servers.",
      "HTTP-based attacks (for example, Code Red and Nimda, which use application-specific knowledge)",
      "Stateful inspection. Application filters are limited to knowledge of the payload of a packet and therefore make filtering decisions based only on the payload. Stateful inspection uses both the payload and its context to determine filtering rules. Using the payload and the packet contents allow stateful inspection rules to ensure session and communication integrity. The inspection of packets, their payload, and sequence limits the scalability of stateful inspection.",
      "Custom application filters. These filters ensure the integrity of application server/client communication."
    ],
    "div": [
      "Web Application"
    ],
    "p": [
      "Check to ensure that effective filters are in place to prevent malicious traffic from entering the perimeter network.",
      "",
      "Filtering published ports on a firewall can be an effective and efficient method of blocking malicious packets and payloads. Filters range from simple packet filters that restrict traffic at the network layer based on source and destination IP addresses and port numbers, to complex application filters that inspect application-specific payloads. A defense in depth approach that uses layered filters is a very effective way to block attacks. There are several common types of firewall filters:",
      "Packet filters. These can filter packets based on protocol, source or destination port number and source or destination address, or computer name. IP packet filters are static, and communication through a specific port is either allowed or blocked. Blocked packets are usually logged, and a secure packet filter denies by default.",
      "At the network layer, the payload is unknown and might be dangerous. More intelligent types of filtering must be configured to inspect the payload and make decisions based on access control rules.",
      "Circuit-level filters. These inspect sessions rather than payload data. An inbound or outbound client makes a request directly against the firewall/gateway, and in turn the gateway initiates a connection to the server and acts as a broker between the two connections. With knowledge of application connection rules, circuit level filters ensure valid interactions. They do not inspect the actual payload, but they do count frames to ensure packet integrity and prevent session hijacking and replaying.",
      "Application filters. Smart application filters can analyze a data stream for an application and provide application-specific processing, including inspecting, screening or blocking, redirecting, and even modifying the data as it passes through the firewall. Application filters protect against attacks such as the following: Unsafe SMTP commands Attacks against internal DNS servers. HTTP-based attacks (for example, Code Red and Nimda, which use application-specific knowledge)",
      "For example, an application filter can block an HTTP DELETE, but allow an HTTP GET. The capabilities of content screening, including virus detection, lexical analysis, and site categorization, make application filters very effective in Web scenarios both as security measures and in enforcement of business rules.",
      "Stateful inspection. Application filters are limited to knowledge of the payload of a packet and therefore make filtering decisions based only on the payload. Stateful inspection uses both the payload and its context to determine filtering rules. Using the payload and the packet contents allow stateful inspection rules to ensure session and communication integrity. The inspection of packets, their payload, and sequence limits the scalability of stateful inspection.",
      "Custom application filters. These filters ensure the integrity of application server/client communication.",
      "When you use filters at multiple levels of the network stack, it helps make your environment more secure. For example, a packet filter can be used to block IP traffic destined for any port other than port 80, and an application filter might further restrict traffic based on the nature of the HTTP verb. For example, it might block HTTP DELETE verbs.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Packet filters. These can filter packets based on protocol, source or destination port number and source or destination address, or computer name. IP packet filters are static, and communication through a specific port is either allowed or blocked. Blocked packets are usually logged, and a secure packet filter denies by default. At the network layer, the payload is unknown and might be dangerous. More intelligent types of filtering must be configured to inspect the payload and make decisions based on access control rules. Circuit-level filters. These inspect sessions rather than payload data. An inbound or outbound client makes a request directly against the firewall/gateway, and in turn the gateway initiates a connection to the server and acts as a broker between the two connections. With knowledge of application connection rules, circuit level filters ensure valid interactions. They do not inspect the actual payload, but they do count frames to ensure packet integrity and prevent session hijacking and replaying. Application filters. Smart application filters can analyze a data stream for an application and provide application-specific processing, including inspecting, screening or blocking, redirecting, and even modifying the data as it passes through the firewall. Application filters protect against attacks such as the following: Unsafe SMTP commands Attacks against internal DNS servers. HTTP-based attacks (for example, Code Red and Nimda, which use application-specific knowledge) For example, an application filter can block an HTTP DELETE, but allow an HTTP GET. The capabilities of content screening, including virus detection, lexical analysis, and site categorization, make application filters very effective in Web scenarios both as security measures and in enforcement of business rules. Stateful inspection. Application filters are limited to knowledge of the payload of a packet and therefore make filtering decisions based only on the payload. Stateful inspection uses both the payload and its context to determine filtering rules. Using the payload and the packet contents allow stateful inspection rules to ensure session and communication integrity. The inspection of packets, their payload, and sequence limits the scalability of stateful inspection. Custom application filters. These filters ensure the integrity of application server/client communication."
    ],
    "b": [
      "Packet filters.",
      "Circuit-level filters.",
      "Application filters.",
      "Stateful inspection.",
      "Custom application filters"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>\n      <div>Web Application</div>\n    </li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Check to ensure that effective filters are in place to prevent malicious traffic from entering the perimeter network.</p>\n  <p />\n  <h1>How to Fix</h1>\n  <p>Filtering published ports on a firewall can be an effective and efficient method of blocking malicious packets and payloads. Filters range from simple packet filters that restrict traffic at the network layer based on source and destination IP addresses and port numbers, to complex application filters that inspect application-specific payloads. A defense in depth approach that uses layered filters is a very effective way to block attacks. There are several common types of firewall filters: </p>\n  <ol>\n    <li>\n      <p />\n      <b>Packet filters. </b>These can filter packets based on protocol, source or destination port number and source or destination address, or computer name. IP packet filters are static, and communication through a specific port is either allowed or blocked. Blocked packets are usually logged, and a secure packet filter denies by default. <p>At the network layer, the payload is unknown and might be dangerous. More intelligent types of filtering must be configured to inspect the payload and make decisions based on access control rules. </p><li><p><b>Circuit-level filters. </b>These inspect sessions rather than payload data. An inbound or outbound client makes a request directly against the firewall/gateway, and in turn the gateway initiates a connection to the server and acts as a broker between the two connections. With knowledge of application connection rules, circuit level filters ensure valid interactions. They do not inspect the actual payload, but they do count frames to ensure packet integrity and prevent session hijacking and replaying. </p><li><p /><b>Application filters. </b>Smart application filters can analyze a data stream for an application and provide application-specific processing, including inspecting, screening or blocking, redirecting, and even modifying the data as it passes through the firewall. Application filters protect against attacks such as the following: <ul><li>Unsafe SMTP commands <li>Attacks against internal DNS servers. <li>HTTP-based attacks (for example, Code Red and Nimda, which use application-specific knowledge) </li></li></li></ul><p>For example, an application filter can block an HTTP DELETE, but allow an HTTP GET. The capabilities of content screening, including virus detection, lexical analysis, and site categorization, make application filters very effective in Web scenarios both as security measures and in enforcement of business rules. </p><li><p><b>Stateful inspection. </b>Application filters are limited to knowledge of the payload of a packet and therefore make filtering decisions based only on the payload. Stateful inspection uses both the payload and its context to determine filtering rules. Using the payload and the packet contents allow stateful inspection rules to ensure session and communication integrity. The inspection of packets, their payload, and sequence limits the scalability of stateful inspection. </p><li><p><b>Custom application filters</b>. These filters ensure the integrity of application server/client communication. </p></li></li></li></li></li>\n  </ol>\n  <p>When you use filters at multiple levels of the network stack, it helps make your environment more secure. For example, a packet filter can be used to block IP traffic destined for any port other than port 80, and an application filter might further restrict traffic based on the nature of the HTTP verb. For example, it might block HTTP DELETE verbs.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}