{
  "id": "4622e083-5f10-4f9b-b493-475dd1976fdb",
  "checksum": "1ca1e521f5daa56649a9b55d05a959b3db6591df",
  "words": {
    "6": [
      "ol",
      "p",
      "li"
    ],
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "h1",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "h1"
    ],
    "aspnet": [
      "ul",
      "li"
    ],
    "what": [
      "h1",
      "ol",
      "p",
      "li"
    ],
    "check": [
      "h1",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li"
    ],
    "ensure": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "user": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "are": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "validated": [
      "p",
      "p",
      "title"
    ],
    "before": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "processing": [
      "p"
    ],
    "them": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "validating": [
      "p",
      "p"
    ],
    "user-provided": [
      "p"
    ],
    "login": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "information": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "title"
    ],
    "can": [
      "p",
      "ol",
      "p",
      "li"
    ],
    "help": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "cross": [
      "p"
    ],
    "site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "sql": [
      "p"
    ],
    "injections": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li"
    ],
    "other": [
      "p"
    ],
    "potential": [
      "p"
    ],
    "problems": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "on": [
      "p"
    ],
    "system": [
      "p"
    ],
    "architecture": [
      "p"
    ],
    "all": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "p",
      "li"
    ],
    "input": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li"
    ],
    "should": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li"
    ],
    "always": [
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li"
    ],
    "use": [
      "p",
      "p",
      "p",
      "ol",
      "p",
      "li",
      "strong"
    ],
    "encoded": [
      "p"
    ],
    "display": [
      "p"
    ],
    "but": [
      "p"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li",
      "title"
    ],
    "especially": [
      "p"
    ],
    "critical": [
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "it": [
      "p",
      "ol",
      "p",
      "li"
    ],
    "interacts": [
      "p"
    ],
    "with": [
      "p"
    ],
    "high-value": [
      "p"
    ],
    "data": [
      "p"
    ],
    "stores": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "follow": [
      "p"
    ],
    "these": [
      "p",
      "em"
    ],
    "steps": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "p",
      "li"
    ],
    "your": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ol",
      "p",
      "li"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "validates": [
      "p"
    ],
    "locate": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "handles": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "examine": [
      "ol",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p"
    ],
    "places": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "inside": [
      "ol",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "new": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "users": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "modifying": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "existing": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "changing": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "retrieving": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "related": [
      "ol",
      "li",
      "ul",
      "li",
      "h1"
    ],
    "removing": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "authenticating": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "verify": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "validation": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "p",
      "li",
      "strong"
    ],
    "handled": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "p"
    ],
    "properly": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "p"
    ],
    "addresses": [
      "ol",
      "li",
      "p"
    ],
    "username": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li",
      "strong"
    ],
    "throughout": [
      "ol",
      "li",
      "p"
    ],
    "the": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li"
    ],
    "different": [
      "ol",
      "li",
      "p"
    ],
    "stages": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li"
    ],
    "development": [
      "ol",
      "li",
      "p"
    ],
    "lifecycle": [
      "ol",
      "li",
      "p"
    ],
    "requirements": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "p",
      "li",
      "strong"
    ],
    "if": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "p",
      "li"
    ],
    "security": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "established": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "a": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "policy": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li"
    ],
    "regarding": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li"
    ],
    "acceptable": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li"
    ],
    "usernames": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ol",
      "p",
      "li"
    ],
    "such": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "a policy": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "state": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "length": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "set": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "valid": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "well": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "password": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "design": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "routines": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li"
    ],
    "positioned": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "at": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "trust": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "boundaries": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "instance": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "p",
      "li"
    ],
    "occur": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "processed": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "any": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "component": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "asp:login": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "id=\"login1\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "runat=\"server\"onloggingin=\"validateusername\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "..": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "/": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "implementation": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "strong"
    ],
    "implement": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "using": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "p",
      "li"
    ],
    "whitelist": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "p",
      "li",
      "strong"
    ],
    "not": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "p",
      "li"
    ],
    "blacklist": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "techniques": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "example": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "p",
      "li"
    ],
    "public": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "bool": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "validateusernamestring": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "username{": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "regex": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "rx": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "=": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "regex\"^[a-za-z0-9]{6,}$\");": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "return": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "rxismatch(username);}ensure": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "error": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "or": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "exception": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "conditions": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "correctly verify": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "authentication": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "procedures": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "exit": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "immediately": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "graceful": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "manner": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "upon": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "failed": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "onloggingin=\"validateusername\"": [
      "strong"
    ],
    "rxismatch(username);}": [
      "pre",
      "ol",
      "p",
      "li",
      "p",
      "pre"
    ],
    "fix": [
      "h1"
    ],
    "following": [
      "p"
    ],
    "when": [
      "p"
    ],
    "establish": [
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li",
      "strong"
    ],
    "character": [
      "ol",
      "p",
      "li"
    ],
    "minimum": [
      "ol",
      "p",
      "li"
    ],
    "allowed": [
      "ol",
      "p",
      "li"
    ],
    "least": [
      "ol",
      "p",
      "li"
    ],
    "characters": [
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li"
    ],
    "long": [
      "ol",
      "p",
      "li"
    ],
    "must": [
      "ol",
      "p",
      "li"
    ],
    "contain": [
      "ol",
      "p",
      "li"
    ],
    "alpha-numeric": [
      "ol",
      "p",
      "li"
    ],
    "only": [
      "ol",
      "p",
      "li"
    ],
    "whitelisting": [
      "ol",
      "p",
      "li"
    ],
    "involves": [
      "ol",
      "p",
      "li"
    ],
    "defining": [
      "ol",
      "p",
      "li"
    ],
    "once": [
      "ol",
      "p",
      "li"
    ],
    "defined": [
      "ol",
      "p",
      "li"
    ],
    "compare": [
      "ol",
      "p",
      "li"
    ],
    "against": [
      "ol",
      "p",
      "li"
    ],
    "list": [
      "ol",
      "ol",
      "p",
      "p",
      "li",
      "li"
    ],
    "does": [
      "ol",
      "p",
      "li"
    ],
    "match": [
      "ol",
      "p",
      "li"
    ],
    "an": [
      "ol",
      "p",
      "li"
    ],
    "item": [
      "ol",
      "p",
      "li"
    ],
    "from": [
      "ol",
      "p",
      "li",
      "p"
    ],
    "discard": [
      "ol",
      "p",
      "li"
    ],
    "this": [
      "ol",
      "p",
      "li"
    ],
    "technique": [
      "ol",
      "p",
      "li"
    ],
    "implemented": [
      "ol",
      "p",
      "li"
    ],
    "regular": [
      "ol",
      "p",
      "li"
    ],
    "expressions": [
      "ol",
      "p",
      "li"
    ],
    "items": [
      "h1"
    ],
    "you": [
      "em"
    ],
    "may": [
      "em"
    ],
    "find": [
      "em"
    ],
    "additional": [
      "em"
    ],
    "articles": [
      "em"
    ],
    "useful": [
      "em"
    ],
    "validate": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "What to Check For",
      "Why",
      "How To Check",
      "How To Fix",
      "Related Items",
      "",
      ""
    ],
    "ul": [
      "ASP.NET 4.0",
      "Creating new users \n        Modifying existing users \n        Changing credentials for existing users \n        Retrieving information related to existing users \n        Removing existing users \n        Authenticating users",
      "Requirements: Check if your application's security requirements have established a policy regarding acceptable usernames. Such a policy should state the length and input set for valid usernames as well as password requirements. \n        \n        \n          \n            Design: Check if all username validation routines are positioned properly at the trust boundaries of all of your application's routines that handle user credentials. For instance, all validation should occur before the username is processed by any component within your application:\n          <asp:Login ID=\"Login1\" runat=\"server\"OnLoggingIn=\"ValidateUsername\" ... />\n        \n        \n          \n            Implementation: Check if all username validation routines implement your application's policy regarding usernames. Verify that the implementation is using whitelist and not blacklist validation techniques. Example: public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}Ensure that all error or exception conditions are handled correctly. Verify that all authentication procedures exit immediately in a graceful manner upon failed username validation.",
      "Validate Login Information"
    ],
    "li": [
      "ASP.NET 4.0",
      "Locate all code that handles user credentials. Examine your application and identify all places inside its code base that handle user credentials. Common places include:\n      \n        Creating new users \n        Modifying existing users \n        Changing credentials for existing users \n        Retrieving information related to existing users \n        Removing existing users \n        Authenticating users",
      "Creating new users",
      "Modifying existing users",
      "Changing credentials for existing users",
      "Retrieving information related to existing users",
      "Removing existing users",
      "Authenticating users",
      "Verify that validation is handled properly. Ensure that your application addresses username validation throughout the different stages of your application's development lifecycle:\n      \n        \n          \n            Requirements: Check if your application's security requirements have established a policy regarding acceptable usernames. Such a policy should state the length and input set for valid usernames as well as password requirements. \n        \n        \n          \n            Design: Check if all username validation routines are positioned properly at the trust boundaries of all of your application's routines that handle user credentials. For instance, all validation should occur before the username is processed by any component within your application:\n          <asp:Login ID=\"Login1\" runat=\"server\"OnLoggingIn=\"ValidateUsername\" ... />\n        \n        \n          \n            Implementation: Check if all username validation routines implement your application's policy regarding usernames. Verify that the implementation is using whitelist and not blacklist validation techniques. Example: public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}Ensure that all error or exception conditions are handled correctly. Verify that all authentication procedures exit immediately in a graceful manner upon failed username validation.",
      "Requirements: Check if your application's security requirements have established a policy regarding acceptable usernames. Such a policy should state the length and input set for valid usernames as well as password requirements.",
      "Design: Check if all username validation routines are positioned properly at the trust boundaries of all of your application's routines that handle user credentials. For instance, all validation should occur before the username is processed by any component within your application:\n          <asp:Login ID=\"Login1\" runat=\"server\"OnLoggingIn=\"ValidateUsername\" ... />",
      "Implementation: Check if all username validation routines implement your application's policy regarding usernames. Verify that the implementation is using whitelist and not blacklist validation techniques. Example: public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}Ensure that all error or exception conditions are handled correctly. Verify that all authentication procedures exit immediately in a graceful manner upon failed username validation.",
      "Establish username requirements. Establish the acceptable character set and minimum length that should be allowed for a username. For instance, usernames should be at least 6 characters long and must contain alpha-numeric characters only.",
      "Use whitelist validation. Whitelisting involves defining what input is acceptable. Once valid input is defined, compare all input against the established list. If the input does not match an item from the list, your application should discard it. This technique can be implemented using regular expressions. Example: public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}",
      "Validate Login Information"
    ],
    "p": [
      "Ensure user credentials are validated before processing them.",
      "Validating user-provided login information can help to prevent cross site scripting attacks, SQL injections, and other potential problems, depending on system architecture. All input should always be validated before use and encoded before display, but login information is especially critical as it interacts with high-value data stores.",
      "Follow these steps to ensure that your application validates user credentials before use:",
      "Locate all code that handles user credentials. Examine your application and identify all places inside its code base that handle user credentials. Common places include:",
      "Verify that validation is handled properly. Ensure that your application addresses username validation throughout the different stages of your application's development lifecycle:",
      "Requirements: Check if your application's security requirements have established a policy regarding acceptable usernames. Such a policy should state the length and input set for valid usernames as well as password requirements.",
      "Design: Check if all username validation routines are positioned properly at the trust boundaries of all of your application's routines that handle user credentials. For instance, all validation should occur before the username is processed by any component within your application:",
      "Implementation:",
      "Ensure that all error or exception conditions are handled correctly. Verify that all authentication procedures exit immediately in a graceful manner upon failed username validation.",
      "Use the following steps when validating user credentials:",
      "Establish username requirements. Establish the acceptable character set and minimum length that should be allowed for a username. For instance, usernames should be at least 6 characters long and must contain alpha-numeric characters only. \n    \n      Use whitelist validation. Whitelisting involves defining what input is acceptable. Once valid input is defined, compare all input against the established list. If the input does not match an item from the list, your application should discard it. This technique can be implemented using regular expressions. Example: public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}",
      "",
      "",
      "public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Locate all code that handles user credentials. Examine your application and identify all places inside its code base that handle user credentials. Common places include:\n      \n        Creating new users \n        Modifying existing users \n        Changing credentials for existing users \n        Retrieving information related to existing users \n        Removing existing users \n        Authenticating users\n      \n    \n    \n      \n        Verify that validation is handled properly. Ensure that your application addresses username validation throughout the different stages of your application's development lifecycle:\n      \n        \n          \n            Requirements: Check if your application's security requirements have established a policy regarding acceptable usernames. Such a policy should state the length and input set for valid usernames as well as password requirements. \n        \n        \n          \n            Design: Check if all username validation routines are positioned properly at the trust boundaries of all of your application's routines that handle user credentials. For instance, all validation should occur before the username is processed by any component within your application:\n          <asp:Login ID=\"Login1\" runat=\"server\"OnLoggingIn=\"ValidateUsername\" ... />\n        \n        \n          \n            Implementation: Check if all username validation routines implement your application's policy regarding usernames. Verify that the implementation is using whitelist and not blacklist validation techniques. Example: public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}Ensure that all error or exception conditions are handled correctly. Verify that all authentication procedures exit immediately in a graceful manner upon failed username validation.",
      "Establish username requirements. Establish the acceptable character set and minimum length that should be allowed for a username. For instance, usernames should be at least 6 characters long and must contain alpha-numeric characters only. \n    \n      Use whitelist validation. Whitelisting involves defining what input is acceptable. Once valid input is defined, compare all input against the established list. If the input does not match an item from the list, your application should discard it. This technique can be implemented using regular expressions. Example: public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}"
    ],
    "strong": [
      "Locate all code that handles user credentials.",
      "Verify that validation is handled properly.",
      "Requirements",
      "Design",
      "OnLoggingIn=\"ValidateUsername\"",
      "Implementation",
      "Establish username requirements.",
      "Use whitelist validation."
    ],
    "pre": [
      "<asp:Login ID=\"Login1\" runat=\"server\"OnLoggingIn=\"ValidateUsername\" ... />",
      "public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}",
      "public bool ValidateUsername(string username){    Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");    return rx.IsMatch(username);}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "em": [
      "You may find these additional articles useful"
    ],
    "a": [
      "Validate Login Information"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "/article/1d26fc4a-1aba-40bd-91ed-1a7f1cbf5a8a",
      "text": "Validate Login Information"
    }
  ],
  "html": "<h1>Applies To</h1>\n  <ul>\n    <li>ASP.NET 4.0</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Ensure user credentials are validated before processing them.</p>\n  <h1>Why</h1>\n  <p>Validating user-provided login information can help to prevent cross site scripting attacks, SQL injections, and other potential problems, depending on system architecture. All input should always be validated before use and encoded before display, but login information is especially critical as it interacts with high-value data stores.</p>\n  <h1>How To Check</h1>\n  <p>Follow these steps to ensure that your application validates user credentials before use:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Locate all code that handles user credentials. </strong>Examine your application and identify all places inside its code base that handle user credentials. Common places include:</p>\n      <ul>\n        <li>Creating new users </li>\n        <li>Modifying existing users </li>\n        <li>Changing credentials for existing users </li>\n        <li>Retrieving information related to existing users </li>\n        <li>Removing existing users </li>\n        <li>Authenticating users</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that validation is handled properly. </strong>Ensure that your application addresses username validation throughout the different stages of your application's development lifecycle:</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Requirements</strong>: Check if your application's security requirements have established a policy regarding acceptable usernames. Such a&nbsp;policy should state the length and input set for valid usernames as well as password requirements. </p>\n        </li>\n        <li>\n          <p>\n            <strong>Design</strong>: Check if all username validation routines are positioned properly at the trust boundaries of all of your application's routines that handle user credentials. For instance, all validation should occur before the username is processed by any component within your application:</p>\n          <pre>&lt;asp:Login ID=\"Login1\"<br /> runat=\"server\"<br /><strong>OnLoggingIn=\"ValidateUsername\"<br /></strong> ...<br /> /&gt;</pre>\n        </li>\n        <li>\n          <p>\n            <strong>Implementation</strong>: </p>Check if all username validation routines implement your application's policy regarding usernames. Verify that the implementation is using whitelist and not blacklist validation techniques. Example: <pre>public bool ValidateUsername(string username)<br />{<br />&nbsp;&nbsp;&nbsp; Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");<br />&nbsp;&nbsp;&nbsp; return rx.IsMatch(username);<br />}</pre><p>Ensure that all error or exception conditions are handled correctly.&nbsp;Verify that all authentication procedures exit immediately in a graceful manner upon failed username validation. </p></li>\n      </ul>\n    </li>\n  </ol>\n  <h1>How To Fix</h1>\n  <p>Use the following steps when validating user credentials:</p>\n  <ol>\n    <p />\n    <li>\n      <strong>Establish username requirements.</strong> Establish the acceptable character set and minimum length that should be allowed for a username. For instance, usernames should be at least 6 characters long and must contain alpha-numeric characters only. <p /><p /></li>\n    <li>\n      <strong>Use whitelist validation.</strong> Whitelisting involves defining what input is acceptable. Once valid input is defined, compare all input against the established list. If the input does not match an item from the list, your application should discard it. This technique can be implemented using regular expressions. Example: <p /><pre>public bool ValidateUsername(string username)<br />{<br />&nbsp;&nbsp;&nbsp; Regex rx = new Regex(\"^[a-zA-Z0-9]{6,}$\");<br />&nbsp;&nbsp;&nbsp; return rx.IsMatch(username);<br />} </pre></li>\n  </ol>\n  <h1>Related Items</h1>\n  <em>You may find these additional articles useful</em>\n  <ul>\n    <li>\n      <a href=\"/article/1d26fc4a-1aba-40bd-91ed-1a7f1cbf5a8a\">Validate Login Information</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\n  <h1>\n  </h1>\n  <h1>\n  </h1>"
}