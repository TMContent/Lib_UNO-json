{
  "id": "ce899ba6-8ae2-4494-8706-ce863fae58e7",
  "checksum": "bcece20100ebb2fe69ad6005f34ba305899f4d96",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "carefully": [
      "p"
    ],
    "validate": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "use": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "p"
    ],
    "supplied": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "filename": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "blockquote",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "title"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "path": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "ensure": [
      "p",
      "p"
    ],
    "correct": [
      "p"
    ],
    "format": [
      "p"
    ],
    "validity": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "location": [
      "p"
    ],
    "within": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "context": [
      "p"
    ],
    "application": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "filtering": [
      "p"
    ],
    "paths": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "filenames": [
      "p",
      "p"
    ],
    "helps": [
      "p"
    ],
    "avoid": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "canonicalization": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "attack": [
      "p"
    ],
    "where": [
      "p"
    ],
    "your": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "may": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "caused": [
      "p"
    ],
    "read": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "write": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "files": [
      "p",
      "p",
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "server": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "when": [
      "h1",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "whenever": [
      "p",
      "p"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "used": [
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "component": [
      "p",
      "p"
    ],
    "for": [
      "p"
    ],
    "file": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "similar": [
      "p"
    ],
    "resource": [
      "p"
    ],
    "is": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "received": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "possible": [
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "any": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "storing": [
      "p"
    ],
    "by": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "keep": [
      "p"
    ],
    "user-provided": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "database": [
      "p"
    ],
    "store": [
      "p"
    ],
    "disk": [
      "p"
    ],
    "under": [
      "p"
    ],
    "guid": [
      "p"
    ],
    "likewise": [
      "p"
    ],
    "allow": [
      "p",
      "p"
    ],
    "users": [
      "p"
    ],
    "specify": [
      "p",
      "p"
    ],
    "details": [
      "p"
    ],
    "about": [
      "p"
    ],
    "which": [
      "p"
    ],
    "access": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "p",
      "p"
    ],
    "unless": [
      "p"
    ],
    "absolutely": [
      "p"
    ],
    "necessary": [
      "p"
    ],
    "you": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "must": [
      "p"
    ],
    "part": [
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "three": [
      "p"
    ],
    "methods": [
      "p"
    ],
    "safe": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "names": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "bugs": [
      "ol",
      "li",
      "p"
    ],
    "canonicalize": [
      "ol",
      "li",
      "p"
    ],
    "name": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "using": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "systemio.path.getfullpath": [
      "ol",
      "li",
      "p"
    ],
    "method": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "mappath": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "strong"
    ],
    "prevent": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "cross": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "mapping": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "map": [
      "ol",
      "li",
      "p"
    ],
    "virtual": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "physical": [
      "ol",
      "li",
      "p"
    ],
    "overload": [
      "ol",
      "li",
      "p"
    ],
    "requestmappath": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "accepts": [
      "ol",
      "li",
      "p"
    ],
    "bool": [
      "ol",
      "li",
      "p"
    ],
    "parameter": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "can": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "cross-application": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "sample": [
      "ol",
      "li",
      "p"
    ],
    "below": [
      "ol",
      "li",
      "p"
    ],
    "final": [
      "ol",
      "li",
      "p"
    ],
    "false": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "prevents": [
      "ol",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "means": [
      "ol",
      "li",
      "p"
    ],
    "cannot": [
      "ol",
      "li",
      "p"
    ],
    "successfully": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "supply": [
      "ol",
      "li",
      "p"
    ],
    "contains": [
      "ol",
      "li",
      "p"
    ],
    "\".\"": [
      "ol",
      "li",
      "p"
    ],
    "traverse": [
      "ol",
      "li",
      "p"
    ],
    "outside": [
      "ol",
      "li",
      "p"
    ],
    "application's": [
      "ol",
      "li",
      "p"
    ],
    "directory": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "hierarchy": [
      "ol",
      "li",
      "p"
    ],
    "attempt": [
      "ol",
      "li",
      "p"
    ],
    "results": [
      "ol",
      "li",
      "p"
    ],
    "an": [
      "ol",
      "li",
      "p"
    ],
    "exception": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "strong",
      "p",
      "p"
    ],
    "security": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "restrict": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "io": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "configure": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "li",
      "p",
      "title"
    ],
    "operations": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "web-application": [
      "ol",
      "li",
      "p"
    ],
    "restricted": [
      "ol",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p"
    ],
    "own": [
      "ol",
      "li",
      "p"
    ],
    "done": [
      "ol",
      "li",
      "p"
    ],
    "configuring": [
      "ol",
      "li",
      "p"
    ],
    "run": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "medium": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "trust": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "strong"
    ],
    "setting": [
      "ol",
      "li",
      "p"
    ],
    "trust>": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "element": [
      "ol",
      "li",
      "p"
    ],
    "webconfig": [
      "ol",
      "li",
      "p"
    ],
    "machineconfig": [
      "ol",
      "li",
      "p"
    ],
    "follows": [
      "ol",
      "li",
      "p"
    ],
    "level=\"medium\"": [
      "ol",
      "li",
      "pre"
    ],
    "/": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "running": [
      "ol",
      "li",
      "p"
    ],
    "applications": [
      "ol",
      "li",
      "p"
    ],
    "requires": [
      "ol",
      "li",
      "p"
    ],
    "appropriate": [
      "ol",
      "li",
      "p"
    ],
    "design": [
      "ol",
      "li",
      "p"
    ],
    "development": [
      "ol",
      "li",
      "p"
    ],
    "techniques": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "h1"
    ],
    "receives": [
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "appends": [
      "p"
    ],
    "hardcoded": [
      "p",
      "p"
    ],
    "verifies": [
      "p",
      "p"
    ],
    "see": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "blockquote",
      "pre",
      "p",
      "blockquote",
      "pre"
    ],
    "exists": [
      "p",
      "p"
    ],
    "opens": [
      "p"
    ],
    "performs": [
      "p"
    ],
    "it": [
      "p"
    ],
    "%@": [
      "blockquote",
      "pre"
    ],
    "page": [
      "blockquote",
      "pre"
    ],
    "language=\"c#\"": [
      "blockquote",
      "pre"
    ],
    "validaterequest=\"false\"": [
      "blockquote",
      "pre"
    ],
    "%": [
      "blockquote",
      "pre"
    ],
    "script": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "runat=\"server\"": [
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "void": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "submitbtn_clickobject": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "sender": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "eventargs": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "e": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "{": [
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "string": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "=": [
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "pre"
    ],
    "\"c\\\\configfiles\\\\\"": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "+": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "inputpathtext;": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "system.io.file.exists": [
      "blockquote",
      "pre"
    ],
    "filename))": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "systemio.filestream": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "fs": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "systemio.file.open(filename,": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "systemio.filemode.open);": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "}": [
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "/script>": [
      "blockquote",
      "pre",
      "blockquote",
      "pre"
    ],
    "html": [
      "blockquote",
      "pre"
    ],
    "xmlns=\"http//www.w3.org/1999/xhtml/overview.html\">": [
      "blockquote",
      "pre"
    ],
    "body>": [
      "blockquote",
      "pre"
    ],
    "form": [
      "blockquote",
      "pre"
    ],
    "id=\"form1\"": [
      "blockquote",
      "pre"
    ],
    "div>": [
      "blockquote",
      "pre"
    ],
    "asp:textbox": [
      "blockquote",
      "pre"
    ],
    "id=\"inputpath\"": [
      "blockquote",
      "pre"
    ],
    "textmode=\"multiline\"": [
      "blockquote",
      "pre"
    ],
    "width=\"382px\"": [
      "blockquote",
      "pre"
    ],
    "height=\"152px\"": [
      "blockquote",
      "pre"
    ],
    "/asp:textbox>": [
      "blockquote",
      "pre"
    ],
    "asp:button": [
      "blockquote",
      "pre"
    ],
    "id=\"submitbtn\"": [
      "blockquote",
      "pre"
    ],
    "text=\"submit\"": [
      "blockquote",
      "pre"
    ],
    "onclick=\"submitbtn_click\"": [
      "blockquote",
      "pre"
    ],
    "/div>": [
      "blockquote",
      "pre"
    ],
    "/form>": [
      "blockquote",
      "pre"
    ],
    "/body>": [
      "blockquote",
      "pre"
    ],
    "/html>": [
      "blockquote",
      "pre"
    ],
    "here": [
      "p"
    ],
    "one": [
      "p"
    ],
    "clearly": [
      "p"
    ],
    "notice": [
      "p"
    ],
    "intention": [
      "p"
    ],
    "developer": [
      "p"
    ],
    "limit": [
      "p"
    ],
    "c\\configfiles": [
      "p",
      "strong"
    ],
    "folder": [
      "p",
      "p"
    ],
    "however": [
      "p"
    ],
    "\".\\windows\\system32\\critical.ini\"": [
      "p"
    ],
    "then": [
      "p",
      "p"
    ],
    "will": [
      "p"
    ],
    "readily": [
      "p"
    ],
    "join": [
      "p"
    ],
    "give": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "critical": [
      "p"
    ],
    "system": [
      "p"
    ],
    "solution": [
      "h1"
    ],
    "side": [
      "p"
    ],
    "now": [
      "p",
      "p"
    ],
    "updated": [
      "p"
    ],
    "getfullpath": [
      "p",
      "p"
    ],
    "systemio.path.getfullpath(filename).tolower();": [
      "blockquote",
      "pre"
    ],
    "filename.startswith(\"c:\\\\configfiles\")": [
      "blockquote",
      "pre"
    ],
    "&&": [
      "blockquote",
      "pre"
    ],
    "systemio.file.exists": [
      "blockquote",
      "pre"
    ],
    "website": [
      "p"
    ],
    "calls": [
      "p"
    ],
    "indeed": [
      "p"
    ],
    "pointing": [
      "p"
    ],
    "somewhere": [
      "p"
    ],
    "c\\configfiles\\": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "filter": [
      "title"
    ],
    "user-supplied": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "Carefully validate use supplied filename and path to ensure correct format and validity of location within the context of the application",
      "Filtering paths and filenames helps to avoid a Canonicalization Attack where your application may be caused to read or write to arbitrary files on the server.",
      "Whenever the user input used as a filename or path component for a file or similar resource on the server is received.",
      "Whenever possible, user supplied input should not be used as a component of any filename or path. When storing files supplied by a user, keep the user-provided filename in a database and store the file on disk under a GUID. Likewise, do not allow users to specify details about which files to access unless absolutely necessary. When you must allow a user to specify part of a filename or path, the following three methods should be used to ensure safe handling of user supplied paths and filenames:",
      "Validate file paths and names: to avoid canonicalization bugs, canonicalize the file name by using the System.IO.Path.GetFullPath method.",
      "Use MapPath to prevent cross application mapping: When using MapPath to map a supplied virtual path to a physical path on the server, use the overload of Request.MapPath that accepts a bool parameter so that you can prevent cross-application mapping. In the sample below the final false parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception:",
      "Use Code Access Security to restrict File IO: You can configure all the file operations by the web-application to be restricted to its own virtual directory. This is done by configuring the application to run with Medium trust, you can do this by setting the <trust> element in Web.config or Machine.config as follows:",
      "Running applications successfully in Medium trust requires appropriate design and development techniques.",
      "In the following code example, the server receives a file name from the user. The server appends the user supplied filename to the a hardcoded path and verifies to see if this file exists on the server. If the file exists, the server opens the file and performs operations on it.",
      "Here one can clearly notice that the intention of the developer is to limit access to the C:\\ConfigFiles folder. However, if a user supplied the input \"..\\windows\\system32\\critical.ini\" then the application will readily join the user supplied input with the hardcoded path and give the attacker access to critical system files.",
      "The server side code of this application is now updated to use the GetFullPath method:",
      "Now, the website calls GetFullPath and then verifies that the file name is indeed pointing to somewhere within the C:\\ConfigFiles\\ folder.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Validate file paths and names: to avoid canonicalization bugs, canonicalize the file name by using the System.IO.Path.GetFullPath method.\r\n    \r\n    \r\n      \r\n        Use MapPath to prevent cross application mapping: When using MapPath to map a supplied virtual path to a physical path on the server, use the overload of Request.MapPath that accepts a bool parameter so that you can prevent cross-application mapping. In the sample below the final false parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception:\r\n    \r\n    \r\n      \r\n        Use Code Access Security to restrict File IO: You can configure all the file operations by the web-application to be restricted to its own virtual directory. This is done by configuring the application to run with Medium trust, you can do this by setting the <trust> element in Web.config or Machine.config as follows:\r\n       <trust level=\"Medium\" />\r\n      Running applications successfully in Medium trust requires appropriate design and development techniques."
    ],
    "li": [
      "Validate file paths and names: to avoid canonicalization bugs, canonicalize the file name by using the System.IO.Path.GetFullPath method.",
      "Use MapPath to prevent cross application mapping: When using MapPath to map a supplied virtual path to a physical path on the server, use the overload of Request.MapPath that accepts a bool parameter so that you can prevent cross-application mapping. In the sample below the final false parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception:",
      "Use Code Access Security to restrict File IO: You can configure all the file operations by the web-application to be restricted to its own virtual directory. This is done by configuring the application to run with Medium trust, you can do this by setting the <trust> element in Web.config or Machine.config as follows:\r\n       <trust level=\"Medium\" />\r\n      Running applications successfully in Medium trust requires appropriate design and development techniques."
    ],
    "strong": [
      "Validate file paths and names",
      "Use MapPath to prevent cross application mapping",
      "MapPath",
      "false",
      "Use Code Access Security to restrict File IO",
      "<trust>",
      "Medium trust",
      "C:\\ConfigFiles"
    ],
    "pre": [
      "<trust level=\"Medium\" />",
      "<%@ Page Language=\"C#\" ValidateRequest=\"false\" %> <script runat=\"server\">   void submitBtn_Click(object sender, EventArgs e)   {       String fileName = \"c:\\\\configfiles\\\\\" + inputPath.Text;       if (System.IO.File.Exists (fileName))       {            System.IO.FileStream fs = System.IO.File.Open(fileName, System.IO.FileMode.Open);       }   } </script> <html xmlns=\"http://www.w3.org/1999/xhtml/Overview.html\">   <body>     <form id=\"form1\" runat=\"server\">       <div>         <asp:TextBox ID=\"inputPath\" Runat=\"server\"               TextMode=\"MultiLine\" Width=\"382px\" Height=\"152px\">         </asp:TextBox>         <asp:Button ID=\"submitBtn\" Runat=\"server\" Text=\"Submit\"                      OnClick=\"submitBtn_Click\" />       </div>     </form>   </body> </html>",
      "<script runat=\"server\">   void submitBtn_Click(object sender, EventArgs e)   {       String fileName = \"c:\\\\configfiles\\\\\" + inputPath.Text;       fileName = System.IO.Path.GetFullPath(fileName).ToLower();       if (fileName.StartsWith(\"c:\\\\configfiles\") &&            System.IO.File.Exists (fileName))       {            System.IO.FileStream fs = System.IO.File.Open(fileName, System.IO.FileMode.Open);       }   } </script>"
    ],
    "blockquote": [
      "<%@ Page Language=\"C#\" ValidateRequest=\"false\" %> <script runat=\"server\">   void submitBtn_Click(object sender, EventArgs e)   {       String fileName = \"c:\\\\configfiles\\\\\" + inputPath.Text;       if (System.IO.File.Exists (fileName))       {            System.IO.FileStream fs = System.IO.File.Open(fileName, System.IO.FileMode.Open);       }   } </script> <html xmlns=\"http://www.w3.org/1999/xhtml/Overview.html\">   <body>     <form id=\"form1\" runat=\"server\">       <div>         <asp:TextBox ID=\"inputPath\" Runat=\"server\"               TextMode=\"MultiLine\" Width=\"382px\" Height=\"152px\">         </asp:TextBox>         <asp:Button ID=\"submitBtn\" Runat=\"server\" Text=\"Submit\"                      OnClick=\"submitBtn_Click\" />       </div>     </form>   </body> </html>",
      "<script runat=\"server\">   void submitBtn_Click(object sender, EventArgs e)   {       String fileName = \"c:\\\\configfiles\\\\\" + inputPath.Text;       fileName = System.IO.Path.GetFullPath(fileName).ToLower();       if (fileName.StartsWith(\"c:\\\\configfiles\") &&            System.IO.File.Exists (fileName))       {            System.IO.FileStream fs = System.IO.File.Open(fileName, System.IO.FileMode.Open);       }   } </script>"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\r\n  <p>Carefully validate use supplied filename and path to ensure correct format and validity of location within the context of the application</p>\r\n  <h1>Why</h1>\r\n  <p>Filtering paths and filenames helps to avoid a Canonicalization Attack where your application may be caused to read or write to arbitrary files on the server.</p>\r\n  <h1>When</h1>\r\n  <p>Whenever the user input used as a filename or path component for a file or similar resource on the server is received.</p>\r\n  <h1>How</h1>\r\n  <p>Whenever possible, user supplied input should not be used as a component of any filename or path. When storing files supplied by a user, keep the user-provided filename in a database and store the file on disk under a GUID. Likewise, do not allow users to specify details about which files to access unless absolutely necessary. When you must allow a user to specify part of a filename or path, the following three methods should be used to ensure safe handling of user supplied paths and filenames:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Validate file paths and names</strong>: to avoid canonicalization bugs, canonicalize the file name by using the System.IO.Path.GetFullPath method.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use MapPath to prevent cross application mapping</strong>: When using <strong>MapPath</strong> to map a supplied virtual path to a physical path on the server, use the overload of Request.MapPath that accepts a bool parameter so that you can prevent cross-application mapping. In the sample below the final <strong>false</strong> parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception:</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use Code Access Security to restrict File IO</strong>: You can configure all the file operations by the web-application to be restricted to its own virtual directory. This is done by configuring the application to run with Medium trust, you can do this by setting the <strong>&lt;trust&gt;</strong> element in Web.config or Machine.config as follows:</p>\r\n      <pre> &lt;trust level=\"Medium\" /&gt;</pre>\r\n      <p>Running applications successfully in <strong>Medium trust</strong> requires appropriate design and development techniques. </p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following code example, the server receives a file name from the user. The server appends the user supplied filename to the a hardcoded path and verifies to see if this file exists on the server. If the file exists, the server opens the file and performs operations on it.</p>\r\n  <blockquote>\r\n    <pre>&lt;%@ Page Language=\"C#\" ValidateRequest=\"false\" %&gt;<br /> &lt;script runat=\"server\"&gt;<br />   void submitBtn_Click(object sender, EventArgs e)<br />   {<br />       String fileName = \"c:\\\\configfiles\\\\\" + inputPath.Text;<br />       if (System.IO.File.Exists (fileName))<br />       {<br />            System.IO.FileStream fs = System.IO.File.Open(fileName, System.IO.FileMode.Open);<br />       }<br />   }<br /> &lt;/script&gt;<br /> &lt;html xmlns=\"http://www.w3.org/1999/xhtml/Overview.html\"&gt;<br />   &lt;body&gt;<br />     &lt;form id=\"form1\" runat=\"server\"&gt;<br />       &lt;div&gt;<br />         &lt;asp:TextBox ID=\"inputPath\" Runat=\"server\"<br />               TextMode=\"MultiLine\" Width=\"382px\" Height=\"152px\"&gt;<br />         &lt;/asp:TextBox&gt;<br />         &lt;asp:Button ID=\"submitBtn\" Runat=\"server\" Text=\"Submit\"<br />                      OnClick=\"submitBtn_Click\" /&gt;<br />       &lt;/div&gt;<br />     &lt;/form&gt;<br />   &lt;/body&gt;<br /> &lt;/html&gt;</pre>\r\n  </blockquote>\r\n  <p>Here one can clearly notice that the intention of the developer is to limit access to the <strong>C:\\ConfigFiles</strong> folder. However, if a user supplied the input \"..\\windows\\system32\\critical.ini\" then the application will readily join the user supplied input with the hardcoded path and give the attacker access to critical system files.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>The server side code of this application is now updated to use the GetFullPath method:</p>\r\n  <blockquote>\r\n    <pre> &lt;script runat=\"server\"&gt;<br />   void submitBtn_Click(object sender, EventArgs e)<br />   {<br />       String fileName = \"c:\\\\configfiles\\\\\" + inputPath.Text;<br />       fileName = System.IO.Path.GetFullPath(fileName).ToLower();<br />       if (fileName.StartsWith(\"c:\\\\configfiles\") &&<br />            System.IO.File.Exists (fileName))<br />       {<br />            System.IO.FileStream fs = System.IO.File.Open(fileName, System.IO.FileMode.Open);<br />       }<br />   }<br /> &lt;/script&gt;</pre>\r\n  </blockquote>\r\n  <p>Now, the website calls GetFullPath and then verifies that the file name is indeed pointing to somewhere within the C:\\ConfigFiles\\ folder.</p>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}