{
  "id": "c88e1b49-357d-4202-aafc-86ce0de485bd",
  "checksum": "13edece24f670be568d1f66ac00133093e11871f",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "ol",
      "li",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "h1",
      "h1",
      "p"
    ],
    "for": [
      "h1",
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "ensure": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "thatÂ a": [
      "p"
    ],
    "global": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "handler": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "has": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "been": [
      "p"
    ],
    "implemented": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "unhandled": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "exceptions": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "must": [
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "avoided": [
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "they": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "result": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "strong",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "entering": [
      "p"
    ],
    "an": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p"
    ],
    "unknown": [
      "p"
    ],
    "state": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "and/or": [
      "p"
    ],
    "revealing": [
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "internal": [
      "p"
    ],
    "details": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "using": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "will": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "prevent": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "help": [
      "p"
    ],
    "protect": [
      "p"
    ],
    "application's": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "performance": [
      "p"
    ],
    "security": [
      "p"
    ],
    "how": [
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "strong",
      "p",
      "ol",
      "li",
      "p"
    ],
    "your": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "handling": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1"
    ],
    "mechanism": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "root": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "locate": [
      "ol",
      "li",
      "p"
    ],
    "inside": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "case": [
      "ol",
      "ol",
      "li",
      "p",
      "li"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "java": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "servlets": [
      "ol",
      "li",
      "p"
    ],
    "at": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "pre",
      "pre"
    ],
    "servlet": [
      "ol",
      "li",
      "p"
    ],
    "level": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "h1",
      "h1"
    ],
    "public": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "final": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "class": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "sampleservlet": [
      "ol",
      "li",
      "pre"
    ],
    "extends": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "httpservlet{": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "void": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "dogethttpservletrequest": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "request": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "httpservletresponse": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "response": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "throws": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "servletexception": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "ioexception": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "{": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "pre",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "..": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "}": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "doposthttpservletrequest": [
      "ol",
      "li",
      "pre"
    ],
    "}}": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "verify": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "strong"
    ],
    "is": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "placed": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "accordingly": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "business": [
      "ol",
      "li",
      "p"
    ],
    "logic": [
      "ol",
      "li",
      "p"
    ],
    "try/catch/finally": [
      "ol",
      "li",
      "p",
      "em",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "em",
      "li",
      "p",
      "em",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "block": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "li",
      "p"
    ],
    "caught": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "type": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "throwable": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "em",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "ioexception{": [
      "ol",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "try": [
      "ol",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "catch": [
      "ol",
      "li",
      "pre",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "li",
      "p",
      "li",
      "p",
      "pre"
    ],
    "e": [
      "ol",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "//": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "add": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "appropriate": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "logging": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "mechanisms": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "contains": [
      "ol",
      "li",
      "strong"
    ],
    "javalang.throwable": [
      "ol",
      "li",
      "strong",
      "ol",
      "em",
      "li",
      "p",
      "strong"
    ],
    "webxml": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "configuration": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "file": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "framework": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "specific": [
      "ol",
      "li"
    ],
    "error": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "h1",
      "h1",
      "h1"
    ],
    "such": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "struts": [
      "ol",
      "li"
    ],
    "springmvc": [
      "ol",
      "li"
    ],
    "jsf": [
      "ol",
      "li"
    ],
    "etc)": [
      "ol",
      "li"
    ],
    "may": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "desirable": [
      "ol",
      "li"
    ],
    "but": [
      "ol",
      "li"
    ],
    "required": [
      "ol",
      "li"
    ],
    "some": [
      "ol",
      "li"
    ],
    "occur": [
      "ol",
      "li"
    ],
    "outside": [
      "ol",
      "li"
    ],
    "error-page>": [
      "ol",
      "ol",
      "ol",
      "li",
      "span",
      "p",
      "pre",
      "li",
      "li",
      "pre",
      "pre",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre"
    ],
    "exception-type>java.lang.throwable</exception-type>": [
      "ol",
      "li",
      "span",
      "p",
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "location>/error/myerrorpage.jsp</location></error-page>": [
      "ol",
      "li",
      "span",
      "p",
      "pre"
    ],
    "additionally": [
      "ol",
      "li",
      "strong"
    ],
    "http": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "codes": [
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "should": [
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "handled": [
      "ol",
      "li",
      "strong",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "strong"
    ],
    "this": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "prevents": [
      "ol",
      "li"
    ],
    "detailed": [
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "information": [
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "from": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "being": [
      "ol",
      "li"
    ],
    "presented": [
      "ol",
      "li"
    ],
    "user": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "system": [
      "ol",
      "li"
    ],
    "error-code>404</error-code>": [
      "ol",
      "li",
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "location>/error/error404.jsp</location>": [
      "ol",
      "li",
      "pre"
    ],
    "/error-page>": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "error-code>500</error-code>": [
      "ol",
      "li",
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "location>/error/error500.jsp</location>": [
      "ol",
      "li",
      "pre"
    ],
    "fix": [
      "h1"
    ],
    "handlers": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "any": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "are": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "not": [
      "p",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "otherwise": [
      "p"
    ],
    "use": [
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "following": [
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "steps": [
      "p"
    ],
    "set": [
      "p"
    ],
    "place": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "setting": [
      "ol",
      "li",
      "p"
    ],
    "up": [
      "ol",
      "li",
      "p"
    ],
    "involves": [
      "ol",
      "li",
      "p"
    ],
    "placing": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "portions": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "execution": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "blocks": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "javalang.throwable.": [
      "ol",
      "li",
      "p"
    ],
    "since": [
      "ol",
      "li",
      "p"
    ],
    "purpose": [
      "ol",
      "li",
      "p"
    ],
    "clean-up": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "bring": [
      "ol",
      "li",
      "p"
    ],
    "into": [
      "ol",
      "li",
      "p"
    ],
    "known": [
      "ol",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "li",
      "p"
    ],
    "careful": [
      "ol",
      "li",
      "p"
    ],
    "when": [
      "ol",
      "li",
      "p"
    ],
    "choosing": [
      "ol",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "depending": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "specifications": [
      "ol",
      "li",
      "p"
    ],
    "either": [
      "ol",
      "li",
      "p"
    ],
    "recover": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "continue": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "working": [
      "ol",
      "li",
      "p"
    ],
    "or": [
      "ol",
      "li",
      "p"
    ],
    "exit": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "gracefully": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "each": [
      "ol",
      "li",
      "p"
    ],
    "these": [
      "ol",
      "li",
      "p"
    ],
    "cases": [
      "ol",
      "li",
      "p"
    ],
    "differently": [
      "ol",
      "li",
      "p"
    ],
    "loop": [
      "ol",
      "li",
      "p"
    ],
    "allows": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "restart": [
      "ol",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "current": [
      "ol",
      "li",
      "p"
    ],
    "task": [
      "ol",
      "li",
      "p"
    ],
    "printwriter": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "out": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "responsegetwriter();": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "workdone": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "false": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "while": [
      "ol",
      "li",
      "pre"
    ],
    "!workdone)": [
      "ol",
      "li",
      "pre"
    ],
    "loggersevere(\"unhandled": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "was": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "caught\\n\"": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "+": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "etostring());": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "outprintln(\"an": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "occurred\");": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "outflush();": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "outclose();}": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "there": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "two": [
      "ol",
      "li",
      "p"
    ],
    "approaches": [
      "ol",
      "li",
      "p"
    ],
    "dynamic": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "conducted": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "consists": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "entire": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "log": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "provide": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "pre"
    ],
    "message": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "without": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "having": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "disclose": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "about": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "raised": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "//execute": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "routine": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "jsp": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "pages": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "effective": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "way": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "appears": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "provides": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre"
    ],
    "redirecting": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "page": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "therefore": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "never": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "sees": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "actual": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "%@": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "errorpage=\"errorhtml\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "%": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "em",
      "pre"
    ],
    "begin": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "%@page": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "tag": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "iserrorpage=\"true\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "setup": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "redirect": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "generic": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "location>/error/errorgeneric.jsp</location>Â </error-page>": [
      "ol",
      "li",
      "pre"
    ],
    "relevant": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "httperror": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "location>/error/error404.jsp</location>Â </error-page>Â <error-page>": [
      "ol",
      "li",
      "pre"
    ],
    "location>/error/error500.jsp</location>Â </error-page>": [
      "ol",
      "li",
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "produces": [
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "analysis": [
      "p",
      "p"
    ],
    "based": [
      "p",
      "p"
    ],
    "financial": [
      "p",
      "p"
    ],
    "index": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "unfortunately": [
      "p"
    ],
    "no": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "force": [
      "p"
    ],
    "reveal": [
      "p"
    ],
    "call": [
      "p"
    ],
    "stack": [
      "p"
    ],
    "possibly": [
      "p"
    ],
    "source": [
      "p",
      "p"
    ],
    "filenamesÂ by": [
      "p"
    ],
    "triggering": [
      "p"
    ],
    "import": [
      "pre",
      "pre"
    ],
    "javaio.*;import": [
      "pre",
      "pre"
    ],
    "javautil.*;import": [
      "pre",
      "pre"
    ],
    "javalang.*;import": [
      "pre",
      "pre"
    ],
    "javaxservlet.*;import": [
      "pre",
      "pre"
    ],
    "javaxservlet.http.*;import": [
      "pre",
      "pre"
    ],
    "javautil.regex.*;public": [
      "pre",
      "pre"
    ],
    "dataaggregator": [
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "searchterm": [
      "pre",
      "pre"
    ],
    "requestgetparameter(\"index\");": [
      "pre",
      "pre"
    ],
    "does": [
      "pre"
    ],
    "validatesearchterm(searchterm))": [
      "pre",
      "pre"
    ],
    "retstring": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"the": [
      "pre",
      "pre"
    ],
    "queried": [
      "pre",
      "pre"
    ],
    "\\\"\"": [
      "pre",
      "pre"
    ],
    "+=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encodehtmlsearchterm);": [
      "pre",
      "pre"
    ],
    "\"\\\"": [
      "pre",
      "pre"
    ],
    "produced": [
      "pre",
      "pre"
    ],
    "results<br>": [
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "outprintln(retstring);": [
      "pre",
      "pre"
    ],
    "aggregatedataout,": [
      "pre",
      "pre"
    ],
    "searchterm;": [
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre"
    ],
    "consult": [
      "pre",
      "pre",
      "pre"
    ],
    "section": [
      "pre",
      "pre",
      "pre"
    ],
    "outprintln(\"we": [
      "pre",
      "pre",
      "pre"
    ],
    "cannot": [
      "pre",
      "pre",
      "pre"
    ],
    "handle": [
      "pre",
      "pre",
      "pre"
    ],
    "moment": [
      "pre",
      "pre"
    ],
    "please": [
      "pre",
      "pre",
      "pre"
    ],
    "again": [
      "pre",
      "pre",
      "pre"
    ],
    "later\");": [
      "pre",
      "pre",
      "pre"
    ],
    "outclose();": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "because": [
      "p"
    ],
    "impossible": [
      "p"
    ],
    "surface": [
      "p"
    ],
    "client": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "debug": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "disclosedÂ to": [
      "p"
    ],
    "moment\"": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "learn": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "more": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "preventing": [
      "ul",
      "li",
      "a"
    ],
    "repeated": [
      "ul",
      "li",
      "a"
    ],
    "operations": [
      "ul",
      "li",
      "a"
    ],
    "visit": [
      "ul",
      "li"
    ],
    "lesson": [
      "ul",
      "li",
      "a"
    ],
    "available": [
      "ul",
      "li"
    ],
    "tutorial": [
      "ul",
      "li"
    ],
    "guidelines": [
      "h1"
    ],
    "structured": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "do": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "valuable": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "during": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "authentication": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "errors": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "include": [
      "ul",
      "li",
      "a"
    ],
    "output": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "used": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "disclosed": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "included": [
      "ul",
      "li",
      "a"
    ],
    "testing": [
      "h1"
    ],
    "test": [
      "ul",
      "li",
      "a"
    ],
    "disclosure": [
      "ul",
      "li",
      "a"
    ],
    "bugs": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Additional Resources",
      "Java Error Handling Guidelines",
      "Java Error Handling Checklists",
      "Java Error Handling Testing"
    ],
    "p": [
      "Ensure thatÂ a global exception handler has been implemented.",
      "Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions and help protect the application's performance and security.",
      "To check that your application has a global exception handling mechanism:",
      "Identify all root code. Locate all root code inside your application. In the case of Java Servlets, all root code will be at the servlet level. Example:",
      "Verify that all exception handling at the root level is placed accordingly. Verify that all business logic at the root level is placed inside a try/catch/finally block. Make sure the caught exception is of type Throwable. Example:",
      "<error-page>  <exception-type>java.lang.Throwable</exception-type>  <location>/error/myErrorPage.jsp</location></error-page>",
      "Global exception handlers will catch any exceptions that are not otherwise handled in your code. Use the following steps to set global exception handling:",
      "Place handler in root code. Setting up the global exception handlers involves placing portions of the root execution code inside try/catch/finally blocks where the caught exception is of type java.lang.Throwable. Since the purpose of the global exceptions is to clean-up and bring your application into a known state, you should be careful when choosing which portions of the root execution code to place inside such blocks. Depending on your application's specifications, your application may either recover and continue working or exit gracefully. In each of these cases, the global exception handlers will be placed differently.",
      "Recover and continue. The root try/catch/finally block is placed inside a loop. This allows your application to recover from the exception and restart the execution of its current task. Example:",
      "Exit gracefully. There are two approaches to placing an exception handler that allows your application to exit gracefully:",
      "Dynamic handling: This allows the handling to be conducted inside the Java code. It consists of placing the entire root execution code inside a try/catch/finally block. Using dynamic handling allows your application to log the error and provide an error message to the user without having to disclose any detailed information about the raised exception. Example:",
      "JSP error pages: JSP error pages provide an effective way for placing a global exception handler. If an unhandled exception appears, JSP provides a mechanism for redirecting the user to an error page; therefore, the user never sees the actual error. Example:",
      "The JSP error pages should begin with the <%@page %> tag. For example:",
      "Ensure an error page is setup for all unhandled java.lang.Throwable exceptions. This configuration allows the application to gracefully catch exceptions and redirect the user to a generic error page",
      "Ensure an error page is setup for all relevant HTTPerror codes. This configuration allows the application to gracefully catch HTTP error codes and redirect the user to a generic error page.",
      "The following code produces a data analysis based on a financial index. Unfortunately, there is no global exception handling. Therefore, an attacker can force the application to reveal its call stack and possibly the source code filenamesÂ by triggering an unhandled exception.",
      "The following code produces a data analysis based on a financial index. Because the code provides a global exception, it is impossible for an unhandled exception to surface to the client. Therefore, no debug and source data will be disclosedÂ to the attacker."
    ],
    "ol": [
      "Identify all root code. Locate all root code inside your application. In the case of Java Servlets, all root code will be at the servlet level. Example:\r\n      public final class SampleServlet extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            ...      }       public void doPost(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            ...      }}\r\n    \r\n    \r\n      \r\n        Verify that all exception handling at the root level is placed accordingly. Verify that all business logic at the root level is placed inside a try/catch/finally block. Make sure the caught exception is of type Throwable. Example:\r\n      public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      try      {            ...      }      catch (Throwable e)      {            // Add the appropriate logging mechanisms      }}\r\n    \r\n    \r\n      Verify that the application contains a global handler for java.lang.Throwable in your web.xml configuration file. A framework specific error handler (such as Struts, SpringMVC, JSF, etc.) may be desirable, but the web.xml handler is required as some exceptions can occur outside the framework.\r\n      <error-page>  <exception-type>java.lang.Throwable</exception-type>  <location>/error/myErrorPage.jsp</location></error-page>\r\n    \r\n      Additionally, HTTP error codes should be caught and handled by the application in the web.xml configuration file. This prevents detailed error information from being presented to the user in the case of a system error.\r\n        \r\n            <error-page>\r\n            <error-code>404</error-code>\r\n            <location>/error/error404.jsp</location>\r\n            </error-page>\r\n            <error-page>\r\n            <error-code>500</error-code>\r\n            <location>/error/error500.jsp</location>\r\n            </error-page>",
      "Place handler in root code. Setting up the global exception handlers involves placing portions of the root execution code inside try/catch/finally blocks where the caught exception is of type java.lang.Throwable. Since the purpose of the global exceptions is to clean-up and bring your application into a known state, you should be careful when choosing which portions of the root execution code to place inside such blocks. Depending on your application's specifications, your application may either recover and continue working or exit gracefully. In each of these cases, the global exception handlers will be placed differently.\r\n    \r\n    \r\n      \r\n        Recover and continue. The root try/catch/finally block is placed inside a loop. This allows your application to recover from the exception and restart the execution of its current task. Example:\r\n      public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      while (!workDone)      {            try            {                  ...            }            catch (Throwable e)            {                  logger.severe(\"Unhandled exception was caught:\\n\"                            + e.toString());                  out.println(\"An error has occurred.\");            }      }      out.flush();      out.close();}\r\n    \r\n    \r\n      \r\n        Exit gracefully. There are two approaches to placing an exception handler that allows your application to exit gracefully:\r\n      \r\n        \r\n          \r\n            Dynamic handling: This allows the handling to be conducted inside the Java code. It consists of placing the entire root execution code inside a try/catch/finally block. Using dynamic handling allows your application to log the error and provide an error message to the user without having to disclose any detailed information about the raised exception. Example:\r\n          public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      try      {            ...      }      catch (Throwable e)      {            //Execute clean-up routine            logger.severe(\"Unhandled exception was caught:\\n\"                       + e.toString());            out.println(\"An error has occurred.\");      }      out.flush();      out.close();}\r\n        \r\n        \r\n          \r\n            JSP error pages: JSP error pages provide an effective way for placing a global exception handler. If an unhandled exception appears, JSP provides a mechanism for redirecting the user to an error page; therefore, the user never sees the actual error. Example:\r\n          <%@ page errorPage=\"error.html\" %>\r\n          The JSP error pages should begin with the <%@page %> tag. For example:\r\n          <%@ page isErrorPage=\"true\" %>\r\n        \r\n      \r\n    \r\n    \r\n      \r\n        Ensure an error page is setup for all unhandled java.lang.Throwable exceptions. This configuration allows the application to gracefully catch exceptions and redirect the user to a generic error page\r\n      Â <error-page>Â Â  <exception-type>java.lang.Throwable</exception-type>Â Â  <location>/error/errorGeneric.jsp</location>Â </error-page>\r\n    \r\n    \r\n      \r\n        Ensure an error page is setup for all relevant HTTPerror codes. This configuration allows the application to gracefully catch HTTP error codes and redirect the user to a generic error page.\r\n      <error-page>Â Â  <error-code>404</error-code>Â Â  <location>/error/error404.jsp</location>Â </error-page>Â <error-page>Â Â  <error-code>500</error-code>Â Â  <location>/error/error500.jsp</location>Â </error-page>"
    ],
    "li": [
      "Identify all root code. Locate all root code inside your application. In the case of Java Servlets, all root code will be at the servlet level. Example:\r\n      public final class SampleServlet extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            ...      }       public void doPost(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            ...      }}",
      "Verify that all exception handling at the root level is placed accordingly. Verify that all business logic at the root level is placed inside a try/catch/finally block. Make sure the caught exception is of type Throwable. Example:\r\n      public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      try      {            ...      }      catch (Throwable e)      {            // Add the appropriate logging mechanisms      }}",
      "Verify that the application contains a global handler for java.lang.Throwable in your web.xml configuration file. A framework specific error handler (such as Struts, SpringMVC, JSF, etc.) may be desirable, but the web.xml handler is required as some exceptions can occur outside the framework.\r\n      <error-page>  <exception-type>java.lang.Throwable</exception-type>  <location>/error/myErrorPage.jsp</location></error-page>",
      "Additionally, HTTP error codes should be caught and handled by the application in the web.xml configuration file. This prevents detailed error information from being presented to the user in the case of a system error.\r\n        \r\n            <error-page>\r\n            <error-code>404</error-code>\r\n            <location>/error/error404.jsp</location>\r\n            </error-page>\r\n            <error-page>\r\n            <error-code>500</error-code>\r\n            <location>/error/error500.jsp</location>\r\n            </error-page>",
      "Place handler in root code. Setting up the global exception handlers involves placing portions of the root execution code inside try/catch/finally blocks where the caught exception is of type java.lang.Throwable. Since the purpose of the global exceptions is to clean-up and bring your application into a known state, you should be careful when choosing which portions of the root execution code to place inside such blocks. Depending on your application's specifications, your application may either recover and continue working or exit gracefully. In each of these cases, the global exception handlers will be placed differently.",
      "Recover and continue. The root try/catch/finally block is placed inside a loop. This allows your application to recover from the exception and restart the execution of its current task. Example:\r\n      public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      while (!workDone)      {            try            {                  ...            }            catch (Throwable e)            {                  logger.severe(\"Unhandled exception was caught:\\n\"                            + e.toString());                  out.println(\"An error has occurred.\");            }      }      out.flush();      out.close();}",
      "Exit gracefully. There are two approaches to placing an exception handler that allows your application to exit gracefully:\r\n      \r\n        \r\n          \r\n            Dynamic handling: This allows the handling to be conducted inside the Java code. It consists of placing the entire root execution code inside a try/catch/finally block. Using dynamic handling allows your application to log the error and provide an error message to the user without having to disclose any detailed information about the raised exception. Example:\r\n          public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      try      {            ...      }      catch (Throwable e)      {            //Execute clean-up routine            logger.severe(\"Unhandled exception was caught:\\n\"                       + e.toString());            out.println(\"An error has occurred.\");      }      out.flush();      out.close();}\r\n        \r\n        \r\n          \r\n            JSP error pages: JSP error pages provide an effective way for placing a global exception handler. If an unhandled exception appears, JSP provides a mechanism for redirecting the user to an error page; therefore, the user never sees the actual error. Example:\r\n          <%@ page errorPage=\"error.html\" %>\r\n          The JSP error pages should begin with the <%@page %> tag. For example:\r\n          <%@ page isErrorPage=\"true\" %>",
      "Dynamic handling: This allows the handling to be conducted inside the Java code. It consists of placing the entire root execution code inside a try/catch/finally block. Using dynamic handling allows your application to log the error and provide an error message to the user without having to disclose any detailed information about the raised exception. Example:\r\n          public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      try      {            ...      }      catch (Throwable e)      {            //Execute clean-up routine            logger.severe(\"Unhandled exception was caught:\\n\"                       + e.toString());            out.println(\"An error has occurred.\");      }      out.flush();      out.close();}",
      "JSP error pages: JSP error pages provide an effective way for placing a global exception handler. If an unhandled exception appears, JSP provides a mechanism for redirecting the user to an error page; therefore, the user never sees the actual error. Example:\r\n          <%@ page errorPage=\"error.html\" %>\r\n          The JSP error pages should begin with the <%@page %> tag. For example:\r\n          <%@ page isErrorPage=\"true\" %>",
      "Ensure an error page is setup for all unhandled java.lang.Throwable exceptions. This configuration allows the application to gracefully catch exceptions and redirect the user to a generic error page\r\n      Â <error-page>Â Â  <exception-type>java.lang.Throwable</exception-type>Â Â  <location>/error/errorGeneric.jsp</location>Â </error-page>",
      "Ensure an error page is setup for all relevant HTTPerror codes. This configuration allows the application to gracefully catch HTTP error codes and redirect the user to a generic error page.\r\n      <error-page>Â Â  <error-code>404</error-code>Â Â  <location>/error/error404.jsp</location>Â </error-page>Â <error-page>Â Â  <error-code>500</error-code>Â Â  <location>/error/error500.jsp</location>Â </error-page>",
      "To learn more about using JSP error pages, see: JSP Error Pages and Preventing Repeated Operations.",
      "To learn more about Java exceptions, visit: Lesson: Exceptions available from The Java Tutorial.",
      "Use Structured Exception Handling",
      "Use a Global Exception Handler for Unhandled Exceptions",
      "Do Not Disclose Valuable Information During Authentication Errors",
      "Do Not Disclose Exception Details to the Client",
      "Do Not Include Debug Data in Output",
      "Structured Exception Handling Is Used",
      "A Global Exception Handler Is Used for Unhandled Exceptions",
      "Valuable Information Is Not Disclosed During Authentication Errors",
      "Exception Details Are Not Disclosed to the Client",
      "Debug Data Is Not Included in Output",
      "How to Test for Exception Information Disclosure Bugs in Java"
    ],
    "strong": [
      "Identify all root code.",
      "Verify that all exception handling at the root level is placed accordingly.",
      "Verify that the application contains a global handler for java.lang.Throwable in your web.xml configuration file",
      "Additionally, HTTP error codes should be caught and handled by the application in the web.xml configuration file",
      "Place handler in root code.",
      "Recover and continue.",
      "Exit gracefully.",
      "Dynamic handling",
      "JSP error pages",
      "Ensure an error page is setup for all unhandled java.lang.Throwable exceptions.",
      "Ensure an error page is setup for all relevant HTTPerror codes."
    ],
    "pre": [
      "public final class SampleServlet extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            ...      }       public void doPost(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            ...      }}",
      "public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      try      {            ...      }      catch (Throwable e)      {            // Add the appropriate logging mechanisms      }}",
      "<error-page>  <exception-type>java.lang.Throwable</exception-type>  <location>/error/myErrorPage.jsp</location></error-page>",
      "<error-page>\r\n            <error-code>404</error-code>\r\n            <location>/error/error404.jsp</location>\r\n            </error-page>\r\n            <error-page>\r\n            <error-code>500</error-code>\r\n            <location>/error/error500.jsp</location>\r\n            </error-page>",
      "public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      while (!workDone)      {            try            {                  ...            }            catch (Throwable e)            {                  logger.severe(\"Unhandled exception was caught:\\n\"                            + e.toString());                  out.println(\"An error has occurred.\");            }      }      out.flush();      out.close();}",
      "public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      try      {            ...      }      catch (Throwable e)      {            //Execute clean-up routine            logger.severe(\"Unhandled exception was caught:\\n\"                       + e.toString());            out.println(\"An error has occurred.\");      }      out.flush();      out.close();}",
      "<%@ page errorPage=\"error.html\" %>",
      "<%@ page isErrorPage=\"true\" %>",
      "<error-page>Â Â  <exception-type>java.lang.Throwable</exception-type>Â Â  <location>/error/errorGeneric.jsp</location>Â </error-page>",
      "<error-page>Â Â  <error-code>404</error-code>Â Â  <location>/error/error404.jsp</location>Â </error-page>Â <error-page>Â Â  <error-code>500</error-code>Â Â  <location>/error/error500.jsp</location>Â </error-page>",
      "import java.io.*;import java.util.*;import java.lang.*;import javax.servlet.*;import javax.servlet.http.*;import java.util.regex.*;public final class DataAggregator extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            PrintWriter out = response.getWriter();            String searchTerm = request.getParameter(\"index\");            // The application does not provide a global exception handler            if (validateSearchTerm(searchTerm))            {                  String retString;                  retString = \"The queried index \\\"\";                  retString += encodeHtml(searchTerm);                  retString += \"\\\" produced the following results:<br> \";                  out.println(retString);                  aggregateData(out, searchTerm);            }            else            {                  // Add the appropriate logging mechanisms                  // Consult the Logging section                  out.println(\"We cannot handle your request at the moment.                           + \" Please try again later.\");            }            out.flush();            out.close();      }}",
      "import java.io.*;import java.util.*;import java.lang.*;import javax.servlet.*;import javax.servlet.http.*;import java.util.regex.*;public final class DataAggregator extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            PrintWriter out = response.getWriter();            String searchTerm = request.getParameter(\"index\");            // The application provides a global exception handler            try            {                  if (validateSearchTerm(searchTerm))                  {                        String retString;                        retString = \"The queried index \\\"\";                        retString += encodeHtml(searchTerm);                        retString += \"\\\" produced the following results:<br> \";                        out.println(retString);                        aggregateData(out, searchTerm);                  }                  else                  {                        // Add the appropriate logging mechanisms                        // Consult the Logging section                        out.println(\"We cannot handle your request at the moment.                                 + \" Please try again later.\");                  }            }            catch (Throwable e)            {                  // Add the appropriate logging mechanisms                  // Consult the Logging section                  out.println(\"We cannot handle your request at the moment.\"                           + \" Please try again later.\");            }            out.flush();            out.close();      }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "em": [
      "try/catch/finally",
      "Throwable",
      "try/catch/finally",
      "java.lang.Throwable",
      "try/catch/finally",
      "try/catch/finally",
      "<%@page %>"
    ],
    "span": [
      "<error-page>  <exception-type>java.lang.Throwable</exception-type>  <location>/error/myErrorPage.jsp</location></error-page>"
    ],
    "ul": [
      "Dynamic handling: This allows the handling to be conducted inside the Java code. It consists of placing the entire root execution code inside a try/catch/finally block. Using dynamic handling allows your application to log the error and provide an error message to the user without having to disclose any detailed information about the raised exception. Example:\r\n          public void doGet(HttpServletRequest request,      HttpServletResponse response) throws ServletException, IOException{      PrintWriter out = response.getWriter();      workDone = false;      try      {            ...      }      catch (Throwable e)      {            //Execute clean-up routine            logger.severe(\"Unhandled exception was caught:\\n\"                       + e.toString());            out.println(\"An error has occurred.\");      }      out.flush();      out.close();}\r\n        \r\n        \r\n          \r\n            JSP error pages: JSP error pages provide an effective way for placing a global exception handler. If an unhandled exception appears, JSP provides a mechanism for redirecting the user to an error page; therefore, the user never sees the actual error. Example:\r\n          <%@ page errorPage=\"error.html\" %>\r\n          The JSP error pages should begin with the <%@page %> tag. For example:\r\n          <%@ page isErrorPage=\"true\" %>",
      "To learn more about using JSP error pages, see: JSP Error Pages and Preventing Repeated Operations. \r\n    To learn more about Java exceptions, visit: Lesson: Exceptions available from The Java Tutorial.",
      "Use Structured Exception Handling\r\n    \r\n    \r\n      Use a Global Exception Handler for Unhandled Exceptions\r\n    \r\n    \r\n      Do Not Disclose Valuable Information During Authentication Errors\r\n    \r\n    \r\n      Do Not Disclose Exception Details to the Client\r\n    \r\n    \r\n      Do Not Include Debug Data in Output",
      "Structured Exception Handling Is Used\r\n    \r\n    \r\n      A Global Exception Handler Is Used for Unhandled Exceptions\r\n    \r\n    \r\n      Valuable Information Is Not Disclosed During Authentication Errors\r\n    \r\n    \r\n      Exception Details Are Not Disclosed to the Client\r\n    \r\n    \r\n      Debug Data Is Not Included in Output",
      "How to Test for Exception Information Disclosure Bugs in Java"
    ],
    "a": [
      "JSP Error Pages and Preventing Repeated Operations",
      "Lesson: Exceptions",
      "Use Structured Exception Handling",
      "Use a Global Exception Handler for Unhandled Exceptions",
      "Do Not Disclose Valuable Information During Authentication Errors",
      "Do Not Disclose Exception Details to the Client",
      "Do Not Include Debug Data in Output",
      "Structured Exception Handling Is Used",
      "A Global Exception Handler Is Used for Unhandled Exceptions",
      "Valuable Information Is Not Disclosed During Authentication Errors",
      "Exception Details Are Not Disclosed to the Client",
      "Debug Data Is Not Included in Output",
      "How to Test for Exception Information Disclosure Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "http://java.sun.com/developer/EJTechTips/2003/tt0114.html",
      "text": "JSP Error Pages and Preventing Repeated Operations"
    },
    {
      "href": "http://java.sun.com/docs/books/tutorial/essential/exceptions/index.html",
      "text": "Lesson: Exceptions"
    },
    {
      "href": "/article/fceefe0c-900a-4c29-9c2e-ee662aa9e1f1",
      "text": "Use Structured Exception Handling"
    },
    {
      "href": "/article/3e815c74-4d57-4c1b-8446-750b319ea046",
      "text": "Use a Global Exception Handler for Unhandled Exceptions"
    },
    {
      "href": "/article/30abc3c9-d288-4e8a-a614-fd1a1f331270",
      "text": "Do Not Disclose Valuable Information During Authentication Errors"
    },
    {
      "href": "/article/56ad1852-7fc3-4d1f-b109-bbcce29170f7",
      "text": "Do Not Disclose Exception Details to the Client"
    },
    {
      "href": "/article/fd4b2a8a-db2d-4594-ba30-3ce5f63ad459",
      "text": "Do Not Include Debug Data in Output"
    },
    {
      "href": "/article/2739df30-b3da-417e-8856-2201a2b2a17a",
      "text": "Structured Exception Handling Is Used"
    },
    {
      "href": "/article/c88e1b49-357d-4202-aafc-86ce0de485bd",
      "text": "A Global Exception Handler Is Used for Unhandled Exceptions"
    },
    {
      "href": "/article/e574d1d8-acae-4c64-90db-a0f6b98ca45f",
      "text": "Valuable Information Is Not Disclosed During Authentication Errors"
    },
    {
      "href": "/article/d13e57d7-f6f5-4bd4-8629-26c45f9f029b",
      "text": "Exception Details Are Not Disclosed to the Client"
    },
    {
      "href": "/article/d33cc3de-517c-4c84-95bd-24f14d9d99d6",
      "text": "Debug Data Is Not Included in Output"
    },
    {
      "href": "/article/5556fc17-3f60-4fc0-8717-0a2ff1c12701",
      "text": "How to Test for Exception Information Disclosure Bugs in Java"
    }
  ],
  "html": "<h1>What to Check For</h1>\r\n  <p>Ensure that&nbsp;a global exception handler has been implemented.</p>\r\n  <h1>Why</h1>\r\n  <p>Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions and help protect the application's performance and security.</p>\r\n  <h1>How to Check</h1>\r\n  <p>To check that your application has a global exception handling mechanism:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all root code. </strong>Locate all root code inside your application. In the case of Java Servlets, all root code will be at the servlet level. Example:</p>\r\n      <pre>public final class SampleServlet extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            ...<br />      }<br />       public void doPost(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            ...<br />      }<br />}</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that all exception handling at the root level is placed accordingly. </strong>Verify that all business logic at the root level is placed inside a <em>try/catch/finally</em> block. Make sure the caught exception is of type <em>Throwable</em>. Example:</p>\r\n      <pre>public void doGet(HttpServletRequest request, HttpServletResponse response)<br />      throws ServletException, IOException<br />{<br />      try<br />      {<br />            ...<br />      }<br />      catch (Throwable e)<br />      {<br />            // Add the appropriate logging mechanisms<br />      }<br />}</pre>\r\n    </li>\r\n    <li>\r\n      <strong>Verify that the application contains a global handler for java.lang.Throwable in your web.xml configuration file</strong>. A framework specific error handler (such as Struts, SpringMVC, JSF, etc.) may be desirable, but the web.xml handler is required as some exceptions can occur outside the framework.\r\n      <span><p /><pre>&lt;error-page&gt;<br />  &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;<br />  &lt;location&gt;/error/myErrorPage.jsp&lt;/location&gt;<br />&lt;/error-page&gt;<br /></pre></span></li>\r\n    <li>\r\n      <strong>Additionally, HTTP error codes should be caught and handled by the application in the web.xml configuration file</strong>. This prevents detailed error information from being presented to the user in the case of a system error.\r\n        <pre>\r\n            &lt;error-page&gt;\r\n            &lt;error-code&gt;404&lt;/error-code&gt;\r\n            &lt;location&gt;/error/error404.jsp&lt;/location&gt;\r\n            &lt;/error-page&gt;\r\n            &lt;error-page&gt;\r\n            &lt;error-code&gt;500&lt;/error-code&gt;\r\n            &lt;location&gt;/error/error500.jsp&lt;/location&gt;\r\n            &lt;/error-page&gt;\r\n        </pre></li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Global exception handlers will catch any exceptions that are not otherwise handled in your code. Use the following steps to set global exception handling:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Place handler in root code. </strong>Setting up the global exception handlers involves placing portions of the root execution code inside <em>try/catch/finally</em> blocks where the caught exception is of type <em>java.lang.Throwable</em>. Since the purpose of the global exceptions is to clean-up and bring your application into a known state, you should be careful when choosing which portions of the root execution code to place inside such blocks. Depending on your application's specifications, your application may either recover and continue working or exit gracefully. In each of these cases, the global exception handlers will be placed differently.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Recover and continue. </strong>The root <em>try/catch/finally</em> block is placed inside a loop. This allows your application to recover from the exception and restart the execution of its current task. Example:</p>\r\n      <pre>public void doGet(HttpServletRequest request,<br />      HttpServletResponse response) throws ServletException, IOException{<br />      PrintWriter out = response.getWriter();<br />      workDone = false;<br /><br />      while (!workDone)<br />      {<br />            try<br />            {<br />                  ...<br />            }<br />            catch (Throwable e)<br />            {<br />                  logger.severe(\"Unhandled exception was caught:\\n\"<br />                            + e.toString());<br />                  out.println(\"An error has occurred.\");<br />            }<br />      }<br /><br />      out.flush();<br />      out.close();<br />}</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Exit gracefully. </strong>There are two approaches to placing an exception handler that allows your application to exit gracefully:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Dynamic handling</strong>: This allows the handling to be conducted inside the Java code. It consists of placing the entire root execution code inside a <em>try/catch/finally</em> block. Using dynamic handling allows your application to log the error and provide an error message to the user without having to disclose any detailed information about the raised exception. Example:</p>\r\n          <pre>public void doGet(HttpServletRequest request,<br />      HttpServletResponse response) throws ServletException, IOException{<br />      PrintWriter out = response.getWriter();<br />      workDone = false;<br /><br />      try<br />      {<br />            ...<br />      }<br />      catch (Throwable e)<br />      {<br />            //Execute clean-up routine<br /><br />            logger.severe(\"Unhandled exception was caught:\\n\"<br />                       + e.toString());<br />            out.println(\"An error has occurred.\");<br />      }<br /><br />      out.flush();<br />      out.close();<br />}</pre>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>JSP error pages</strong>: JSP error pages provide an effective way for placing a global exception handler. If an unhandled exception appears, JSP provides a mechanism for redirecting the user to an error page; therefore, the user never sees the actual error. Example:</p>\r\n          <pre>&lt;%@ page errorPage=\"error.html\" %&gt;</pre>\r\n          <p>The JSP error pages should begin with the <em>&lt;%@page %&gt;</em> tag. For example:</p>\r\n          <pre>&lt;%@ page isErrorPage=\"true\" %&gt;</pre>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure an error page is setup for all unhandled java.lang.Throwable exceptions.</strong> This configuration allows the application to gracefully catch exceptions and redirect the user to a generic error page</p>\r\n      <pre>&nbsp;&lt;error-page&gt;<br />&nbsp;&nbsp; &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;<br />&nbsp;&nbsp; &lt;location&gt;/error/errorGeneric.jsp&lt;/location&gt;<br />&nbsp;&lt;/error-page&gt;</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure an error page is setup for all relevant HTTPerror codes.</strong> This configuration allows the application to gracefully catch HTTP error codes and redirect the user to a generic error page.</p>\r\n      <pre>&lt;error-page&gt;<br />&nbsp;&nbsp; &lt;error-code&gt;404&lt;/error-code&gt;<br />&nbsp;&nbsp; &lt;location&gt;/error/error404.jsp&lt;/location&gt;<br />&nbsp;&lt;/error-page&gt;<br />&nbsp;&lt;error-page&gt;<br />&nbsp;&nbsp; &lt;error-code&gt;500&lt;/error-code&gt;<br />&nbsp;&nbsp; &lt;location&gt;/error/error500.jsp&lt;/location&gt;<br />&nbsp;&lt;/error-page&gt;</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code produces a data analysis based on a financial index. Unfortunately, there is no global exception handling. Therefore, an attacker can force the application to reveal its call stack and possibly the source code filenames&nbsp;by triggering an unhandled exception.</p>\r\n  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br /><br />            // The application does not provide a global exception handler<br />            if (validateSearchTerm(searchTerm))<br />            {<br />                  String retString;<br /><br />                  retString = \"The queried index \\\"\";<br />                  retString += encodeHtml(searchTerm);<br />                  retString += \"\\\" produced the following results:&lt;br&gt; \";<br />                  out.println(retString);<br />                  aggregateData(out, searchTerm);<br />            }<br />            else<br />            {<br />                  // Add the appropriate logging mechanisms<br />                  // Consult the Logging section<br /><br />                  out.println(\"We cannot handle your request at the moment.<br />                           + \" Please try again later.\");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code produces a data analysis based on a financial index. Because the code provides a global exception, it is impossible for an unhandled exception to surface to the client. Therefore, no debug and source data will be disclosed&nbsp;to the attacker.</p>\r\n  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br /><br />            // The application provides a global exception handler<br />            try<br />            {<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br /><br />                        retString = \"The queried index \\\"\";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += \"\\\" produced the following results:&lt;br&gt; \";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging mechanisms<br />                        // Consult the Logging section<br /><br />                        out.println(\"We cannot handle your request at the moment.<br />                                 + \" Please try again later.\");<br />                  }<br />            }<br /><br />            catch (Throwable e)<br />            {<br />                  // Add the appropriate logging mechanisms<br />                  // Consult the Logging section<br /><br />                  out.println(\"We cannot handle your request at the moment.\"<br />                           + \" Please try again later.\");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />}</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about using JSP error pages, see: <a href=\"http://java.sun.com/developer/EJTechTips/2003/tt0114.html\">JSP Error Pages and Preventing Repeated Operations</a>. </li>\r\n    <li>To learn more about Java exceptions, visit: <a href=\"http://java.sun.com/docs/books/tutorial/essential/exceptions/index.html\">Lesson: Exceptions</a> available from The Java Tutorial.</li>\r\n  </ul>\r\n  <h1>Java Error Handling Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/fceefe0c-900a-4c29-9c2e-ee662aa9e1f1\">Use Structured Exception Handling</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/3e815c74-4d57-4c1b-8446-750b319ea046\">Use a Global Exception Handler for Unhandled Exceptions</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/30abc3c9-d288-4e8a-a614-fd1a1f331270\">Do Not Disclose Valuable Information During Authentication Errors</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/56ad1852-7fc3-4d1f-b109-bbcce29170f7\">Do Not Disclose Exception Details to the Client</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/fd4b2a8a-db2d-4594-ba30-3ce5f63ad459\">Do Not Include Debug Data in Output</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/2739df30-b3da-417e-8856-2201a2b2a17a\">Structured Exception Handling Is Used</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c88e1b49-357d-4202-aafc-86ce0de485bd\">A Global Exception Handler Is Used for Unhandled Exceptions</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/e574d1d8-acae-4c64-90db-a0f6b98ca45f\">Valuable Information Is Not Disclosed During Authentication Errors</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d13e57d7-f6f5-4bd4-8629-26c45f9f029b\">Exception Details Are Not Disclosed to the Client</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d33cc3de-517c-4c84-95bd-24f14d9d99d6\">Debug Data Is Not Included in Output</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Error Handling Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/5556fc17-3f60-4fc0-8717-0a2ff1c12701\">How to Test for Exception Information Disclosure Bugs in Java</a>\r\n    </li>\r\n  </ul>"
}