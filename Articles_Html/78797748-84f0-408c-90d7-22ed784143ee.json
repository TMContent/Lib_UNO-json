{
  "id": "78797748-84f0-408c-90d7-22ed784143ee",
  "checksum": "9a695f6c4cdc527b766a0a4a4a054bc201936585",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "c#": [
      "ul",
      "li"
    ],
    "server-side": [
      "ul",
      "li"
    ],
    "sql": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "server": [
      "ul",
      "li",
      "pre",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "ul",
      "li",
      "pre",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "this": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "code": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "snippet": [
      "p"
    ],
    "is": [
      "p",
      "ul",
      "li"
    ],
    "illustrate": [
      "p"
    ],
    "construction": [
      "p"
    ],
    "database": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "pre",
      "pre",
      "ul",
      "li",
      "title"
    ],
    "queries": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "title"
    ],
    "using": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "parameterized": [
      "p",
      "title"
    ],
    "arguments": [
      "p"
    ],
    "add": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "additional": [
      "p"
    ],
    "security": [
      "p",
      "pre"
    ],
    "operations": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "that": [
      "p",
      "pre"
    ],
    "rely": [
      "p"
    ],
    "upon": [
      "p"
    ],
    "user-supplied": [
      "p"
    ],
    "application": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "ul",
      "li"
    ],
    "input": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "objectives": [
      "h1"
    ],
    "incorporate": [
      "ul",
      "li"
    ],
    "user": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "into": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "statements": [
      "ul",
      "li"
    ],
    "while": [
      "ul",
      "li",
      "pre"
    ],
    "protecting": [
      "ul",
      "li"
    ],
    "against": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "potential": [
      "ul",
      "li"
    ],
    "njection": [
      "ul",
      "li"
    ],
    "attacks": [
      "ul",
      "li"
    ],
    "define": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "fix": [
      "ul",
      "li"
    ],
    "query": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "logic": [
      "ul",
      "li"
    ],
    "during": [
      "ul",
      "li"
    ],
    "implementation": [
      "ul",
      "li"
    ],
    "scenarios": [
      "h1"
    ],
    "needs": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "make": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "use": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "any": [
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "form": [
      "ul",
      "li"
    ],
    "in": [
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "output": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "other": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "solution": [
      "h1"
    ],
    "example": [
      "h1",
      "h1",
      "p",
      "ul",
      "li"
    ],
    "static": [
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "void": [
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "parameterizeddbquerystring": [
      "pre"
    ],
    "sparam{": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "create": [
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre"
    ],
    "a": [
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "connection": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "integrated": [
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "p",
      "pre",
      "ul",
      "li"
    ],
    "connectionstring": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"initial": [
      "pre",
      "pre"
    ],
    "catalog=snippetsdata": [
      "pre",
      "pre"
    ],
    "source=vm-win2003\\\\sqlexpress\t\t\tintegrated": [
      "pre"
    ],
    "security=sspi\";": [
      "pre"
    ],
    "sqlconnection": [
      "pre"
    ],
    "cn": [
      "pre",
      "pre"
    ],
    "sqlconnectionconnectionstring);": [
      "pre"
    ],
    "command": [
      "pre",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "object": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "with": [
      "pre",
      "pre"
    ],
    "our": [
      "pre",
      "pre",
      "pre"
    ],
    "note": [
      "pre"
    ],
    "syntax": [
      "pre"
    ],
    "for": [
      "pre",
      "ul",
      "li",
      "ul",
      "li",
      "title"
    ],
    "parameter": [
      "pre",
      "pre",
      "pre"
    ],
    "field": [
      "pre"
    ],
    "\"first\"": [
      "pre"
    ],
    "sqlcommand": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "sqlcommand\"select": [
      "pre",
      "pre"
    ],
    "first": [
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "last": [
      "pre",
      "pre"
    ],
    "people": [
      "pre",
      "pre"
    ],
    "where": [
      "pre",
      "pre"
    ],
    "@first\"": [
      "pre"
    ],
    "cn;": [
      "pre"
    ],
    "sqlparameter": [
      "pre"
    ],
    "which": [
      "pre",
      "ul",
      "li"
    ],
    "will": [
      "pre"
    ],
    "contain": [
      "pre"
    ],
    "argument": [
      "pre",
      "pre"
    ],
    "value": [
      "pre",
      "ul",
      "li"
    ],
    "we": [
      "pre",
      "pre",
      "pre"
    ],
    "wish": [
      "pre"
    ],
    "when": [
      "pre",
      "ul",
      "li"
    ],
    "creating": [
      "pre"
    ],
    "specify": [
      "pre"
    ],
    "name": [
      "pre"
    ],
    "type": [
      "pre",
      "ul",
      "li"
    ],
    "column": [
      "pre"
    ],
    "length": [
      "pre"
    ],
    "are": [
      "pre",
      "ul",
      "li"
    ],
    "passing": [
      "pre"
    ],
    "sqlcommandparameters.add(\"@first\",": [
      "pre"
    ],
    "sqldbtypevarchar,": [
      "pre"
    ],
    "sparamlength).value": [
      "pre"
    ],
    "sparam": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "open": [
      "pre",
      "pre"
    ],
    "execute": [
      "pre",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "returning": [
      "pre",
      "pre"
    ],
    "data": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "reader": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "cnopen();": [
      "pre"
    ],
    "sqldatareader": [
      "pre"
    ],
    "sqlcommandexecutereader();": [
      "pre"
    ],
    "reader.read())": [
      "pre",
      "pre"
    ],
    "consolewriteline(\"result:": [
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "+": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "readergetstring(0)": [
      "pre",
      "pre"
    ],
    "readergetstring(1));": [
      "pre"
    ],
    "close": [
      "pre",
      "pre"
    ],
    "readerclose();": [
      "pre"
    ],
    "cnclose();}": [
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "following": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "demonstrates": [
      "p"
    ],
    "concatenation": [
      "p"
    ],
    "dynamically": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "request\"first_name\"];//": [
      "pre"
    ],
    "securitystring": [
      "pre"
    ],
    "source=vm-win2003": [
      "pre"
    ],
    "\\\\sqlexpressintegrated": [
      "pre"
    ],
    "security=sspi\";sqlconnection": [
      "pre"
    ],
    "sqlconnectionconnectionstring);//": [
      "pre"
    ],
    "query//": [
      "pre"
    ],
    "generate": [
      "pre"
    ],
    "passed": [
      "pre"
    ],
    "parametersqlcommand": [
      "pre"
    ],
    "'\"": [
      "pre"
    ],
    "\"'\"": [
      "pre"
    ],
    "cn;//": [
      "pre"
    ],
    "readercnopen();sqldatareader": [
      "pre"
    ],
    "sqlcommandexecutereader();while": [
      "pre"
    ],
    "readergetstring(1));//": [
      "pre"
    ],
    "connectionreader.close();cn.close();": [
      "pre"
    ],
    "does": [
      "ul",
      "li"
    ],
    "not": [
      "ul",
      "li"
    ],
    "validate": [
      "ul",
      "li"
    ],
    "\"first_name\"": [
      "ul",
      "li"
    ],
    "cgi": [
      "ul",
      "li"
    ],
    "before": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "incorporation": [
      "ul",
      "li"
    ],
    "makes": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "dynamically-generated": [
      "ul",
      "li"
    ],
    "containing": [
      "ul",
      "li"
    ],
    "vulnerable": [
      "ul",
      "li"
    ],
    "injection": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "instance": [
      "ul",
      "li"
    ],
    "could": [
      "ul",
      "li"
    ],
    "result": [
      "ul",
      "li",
      "h1",
      "pre"
    ],
    "deletion": [
      "pre"
    ],
    "entire": [
      "pre"
    ],
    "environment": [
      "pre"
    ],
    "abcxyz'": [
      "pre"
    ],
    "drop": [
      "pre"
    ],
    "snippets": [
      "pre"
    ],
    "--": [
      "pre"
    ],
    "illustrates": [
      "ul",
      "li"
    ],
    "an": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "inline": [
      "ul",
      "li"
    ],
    "select": [
      "ul",
      "li"
    ],
    "statement": [
      "ul",
      "li"
    ],
    "may": [
      "ul",
      "li"
    ],
    "also": [
      "ul",
      "li"
    ],
    "be": [
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "possible": [
      "ul",
      "li"
    ],
    "stored": [
      "ul",
      "li"
    ],
    "procedures": [
      "ul",
      "li"
    ],
    "used": [
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ul",
      "li"
    ],
    "incorporated": [
      "ul",
      "li"
    ],
    "as": [
      "ul",
      "li"
    ],
    "above": [
      "ul",
      "li",
      "p"
    ],
    "test": [
      "h1",
      "p",
      "ol",
      "li",
      "p"
    ],
    "case": [
      "h1",
      "p",
      "ol",
      "li",
      "p"
    ],
    "classes": [
      "p"
    ],
    "must": [
      "p"
    ],
    "included": [
      "p"
    ],
    "project": [
      "p"
    ],
    "making": [
      "p"
    ],
    "sample": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "systemdata;using": [
      "pre"
    ],
    "systemdata.sqlclient;": [
      "pre"
    ],
    "requires": [
      "p"
    ],
    "performance": [
      "p"
    ],
    "two": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "run": [
      "ol",
      "li",
      "p"
    ],
    "table": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre"
    ],
    "\"people\"": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "li",
      "p"
    ],
    "dbo].[people]([first]": [
      "ol",
      "li",
      "pre"
    ],
    "varchar](50)": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "collate": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sql_latin1_general_cp1_ci_as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "null[last]": [
      "ol",
      "li",
      "pre"
    ],
    "null[email]": [
      "ol",
      "li",
      "pre"
    ],
    "varchar](max)": [
      "ol",
      "li",
      "pre"
    ],
    "null[phone]": [
      "ol",
      "li",
      "pre"
    ],
    "nchar](15)": [
      "ol",
      "li",
      "pre"
    ],
    "null": [
      "ol",
      "li",
      "pre"
    ],
    "mainstring[]": [
      "ol",
      "li",
      "pre"
    ],
    "args{": [
      "ol",
      "li",
      "pre"
    ],
    "parameterizeddbquery\"elvin\");}": [
      "ol",
      "li",
      "pre"
    ],
    "expected": [
      "h1",
      "ul",
      "li"
    ],
    "elvin": [
      "pre"
    ],
    "jones": [
      "pre"
    ],
    "more": [
      "h1"
    ],
    "information": [
      "h1"
    ],
    "should": [
      "ul",
      "li"
    ],
    "always": [
      "ul",
      "li"
    ],
    "considered": [
      "ul",
      "li"
    ],
    "\"tainted\"": [
      "ul",
      "li"
    ],
    "validated": [
      "ul",
      "li"
    ],
    "set": [
      "ul",
      "li"
    ],
    "known": [
      "ul",
      "li"
    ],
    "values": [
      "ul",
      "li"
    ],
    "characters": [
      "ul",
      "li"
    ],
    "acceptance": [
      "ul",
      "li"
    ],
    "by": [
      "ul",
      "li"
    ],
    "processing": [
      "ul",
      "li"
    ],
    "operation": [
      "ul",
      "li"
    ],
    "including": [
      "ul",
      "li"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "secure": [
      "title"
    ],
    "access": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Objectives",
      "Scenarios",
      "Solution Example",
      "Problem Example",
      "Test Case",
      "Expected Result",
      "More Information"
    ],
    "ul": [
      "C# Server-side SQL Server",
      "Incorporate user input into database statements while protecting against potential SQL njection attacks Define and fix query logic during implementation of database operations",
      "Application needs to make use of user input of any form in database queries Application needs to make use of output from other database or code operations in database queries",
      "Code does not first validate the \"first_name\" CGI data before incorporation into the database query SqlCommand object makes use of a dynamically-generated string containing user input, which makes this operations vulnerable to SQL injection. For instance, the following sParam value could result",
      "This example illustrates an inline SELECT statement. SQL injection may also be possible when stored procedures are used, if user input is incorporated dynamically, as above",
      "User input should always be considered \"tainted\" and validated against a set of known and expected values or characters before acceptance by an application for processing in any type of operation, including database queries."
    ],
    "li": [
      "C#",
      "Server-side",
      "SQL Server",
      "Incorporate user input into database statements while protecting against potential SQL njection attacks",
      "Define and fix query logic during implementation of database operations",
      "Application needs to make use of user input of any form in database queries",
      "Application needs to make use of output from other database or code operations in database queries",
      "Code does not first validate the \"first_name\" CGI data before incorporation into the database query",
      "SqlCommand object makes use of a dynamically-generated string containing user input, which makes this operations vulnerable to SQL injection. For instance, the following sParam value could result",
      "This example illustrates an inline SELECT statement. SQL injection may also be possible when stored procedures are used, if user input is incorporated dynamically, as above",
      "Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.\r\n      CREATE TABLE [dbo].[People]([first] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[last] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[email] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[phone] [nchar](15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL)",
      "Execute the following test case code. \r\n        static void Main(string[] args){     ParameterizedDBQuery(\"Elvin\");}",
      "User input should always be considered \"tainted\" and validated against a set of known and expected values or characters before acceptance by an application for processing in any type of operation, including database queries."
    ],
    "p": [
      "The purpose of this code snippet is to illustrate the construction of database queries using parameterized arguments to add additional security to database operations that rely upon user-supplied application input.",
      "The following example demonstrates the use of string concatenation to dynamically create a database query.",
      "The following classes must be included in any project making use of the sample code provided above:",
      "The test case requires performance of the following two steps:",
      "Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.",
      "Execute the following test case code.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "static void ParameterizedDBQuery(string sParam){    // Create a new database connection using Integrated Security    string connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003\\\\sqlexpress;\t\t\tIntegrated Security=SSPI;\";    SqlConnection cn = new SqlConnection(connectionString);    // Create a new SQL Command object with our query    // Note the syntax for our parameter field, \"first\"    SqlCommand sqlCommand = new SqlCommand(\"SELECT first, last FROM people WHERE first = @first\", cn);    // Create a new SqlParameter object, which will contain the argument value that we wish to query    // When creating the parameter we specify the parameter name, type of column in the database    // and length of the argument we are passing to the query.    sqlCommand.Parameters.Add(\"@first\", SqlDbType.VarChar, sParam.Length).Value = sParam;    // Open connection to the server and execute query, returning a data reader    cn.Open();    SqlDataReader reader = sqlCommand.ExecuteReader();    while (reader.Read())                Console.WriteLine(\"Result: \" + reader.GetString(0) + \" \" + reader.GetString(1));    // Close Reader and Connection.    reader.Close();    cn.Close();}",
      "string sParam = Request[\"first_name\"];// Create a new database connection using Integrated Securitystring connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003        \\\\sqlexpress;Integrated Security=SSPI;\";SqlConnection cn = new SqlConnection(connectionString);// Create a new SQL Command object with our query// Dynamically generate SQL query using passed parameterSqlCommand sqlCommand = new SqlCommand(\"SELECT first, last FROM people\t\t WHERE first = '\" + sParam + \"'\", cn);// Open connection to the server and execute query, returning a data readercn.Open();SqlDataReader reader = sqlCommand.ExecuteReader();while (reader.Read())            Console.WriteLine(\"Result: \" + reader.GetString(0) + \" \" + reader.GetString(1));// Close Reader and Connection.reader.Close();cn.Close();",
      "in the deletion of the entire application database from the   environment:        abcxyz'; drop database snippets; --",
      "using System.Data;using System.Data.SqlClient;",
      "CREATE TABLE [dbo].[People]([first] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[last] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[email] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[phone] [nchar](15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL)",
      "static void Main(string[] args){     ParameterizedDBQuery(\"Elvin\");}",
      "Result: Elvin Jones"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ol": [
      "Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.\r\n      CREATE TABLE [dbo].[People]([first] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[last] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[email] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[phone] [nchar](15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL)\r\n      \r\n        Execute the following test case code. \r\n        static void Main(string[] args){     ParameterizedDBQuery(\"Elvin\");}"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C# <li>Server-side <li>SQL Server</li></li></li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>The purpose of this code snippet is to illustrate the construction of database queries using parameterized arguments to add additional security to database operations that rely upon user-supplied application input.</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Incorporate user input into database statements while protecting against potential SQL njection attacks <li>Define and fix query logic during implementation of database operations</li></li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Application needs to make use of user input of any form in database queries <li>Application needs to make use of output from other database or code operations in database queries</li></li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <pre>static void ParameterizedDBQuery(string sParam)&#123;<br />    // Create a new database connection using Integrated Security<br />    string connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003\\\\sqlexpress;<br />&#9;&#9;&#9;Integrated Security=SSPI;\";<br />    SqlConnection cn = new SqlConnection(connectionString);<br />    // Create a new SQL Command object with our query<br />    // Note the syntax for our parameter field, \"first\"<br />    SqlCommand sqlCommand = new SqlCommand(\"SELECT first, last FROM people WHERE first = &#64;first\", cn);<br />    // Create a new SqlParameter object, which will contain the argument value that we wish to query<br />    // When creating the parameter we specify the parameter name, type of column in the database<br />    // and length of the argument we are passing to the query.<br />    sqlCommand.Parameters.Add(\"&#64;first\", SqlDbType.VarChar, sParam.Length).Value = sParam;<br />    // Open connection to the server and execute query, returning a data reader<br />    cn.Open();<br />    SqlDataReader reader = sqlCommand.ExecuteReader();<br />    while (reader.Read())<br />                Console.WriteLine(\"Result: \" &#43; reader.GetString(0) &#43; \" \" &#43; reader.GetString(1));<br />    // Close Reader and Connection.<br />    reader.Close();<br />    cn.Close();<br />&#125;</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>The following example demonstrates the use of string concatenation to dynamically create a database query. </p>\r\n  <pre>string sParam = Request&#91;\"first_name\"&#93;;<br />// Create a new database connection using Integrated Security<br />string connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003<br />        \\\\sqlexpress;Integrated Security=SSPI;\";<br />SqlConnection cn = new SqlConnection(connectionString);<br />// Create a new SQL Command object with our query<br />// Dynamically generate SQL query using passed parameter<br />SqlCommand sqlCommand = new SqlCommand(\"SELECT first, last FROM people<br />&#9;&#9; WHERE first = '\" &#43; sParam &#43; \"'\", cn);<br />// Open connection to the server and execute query, returning a data readercn.Open();<br />SqlDataReader reader = sqlCommand.ExecuteReader();<br />while (reader.Read())<br />            Console.WriteLine(\"Result: \" &#43; reader.GetString(0) &#43; \" \" &#43; reader.GetString(1));<br />// Close Reader and Connection.reader.Close();<br />cn.Close();</pre>\r\n  <ul>\r\n    <li>Code does not first validate the \"first_name\" CGI data before incorporation into the database query <li>SqlCommand object makes use of a dynamically-generated string containing user input, which makes this operations vulnerable to SQL injection. For instance, the following sParam value could result </li></li>\r\n  </ul>\r\n  <pre>  in the deletion of the entire application database from the<br />   environment:<br />        abcxyz';<br /> drop database snippets; -- </pre>\r\n  <ul>\r\n    <li>This example illustrates an inline SELECT statement. SQL injection may also be possible when stored procedures are used, if user input is incorporated dynamically, as above</li>\r\n  </ul>\r\n  <h1>Test Case</h1>\r\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\r\n  <pre>using System.Data;<br />using System.Data.SqlClient;</pre>\r\n  <p>The test case requires performance of the following two steps:</p>\r\n  <ol>\r\n    <li>\r\n      <p>Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.</p>\r\n      <pre>CREATE TABLE &#91;dbo&#93;.&#91;People&#93;(&#91;first&#93; &#91;varchar&#93;(50) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&#91;last&#93; &#91;varchar&#93;(50) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&#91;email&#93; &#91;varchar&#93;(max) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&#91;phone&#93; &#91;nchar&#93;(15) <br />COLLATE SQL_Latin1_General_CP1_CI_AS NULL)</pre>\r\n      <li>\r\n        <p>Execute the following test case code. </p>\r\n        <pre>static void Main(string&#91;&#93; args)&#123;<br />     ParameterizedDBQuery(\"Elvin\");<br />&#125;</pre>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Expected Result</h1>\r\n  <pre>Result: Elvin Jones</pre>\r\n  <h1>More Information</h1>\r\n  <ul>\r\n    <li>User input should always be considered \"tainted\" and validated against a set of known and expected values or characters before acceptance by an application for processing in any type of operation, including database queries. </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}