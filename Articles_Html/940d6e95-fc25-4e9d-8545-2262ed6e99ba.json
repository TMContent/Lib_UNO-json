{
  "id": "940d6e95-fc25-4e9d-8545-2262ed6e99ba",
  "checksum": "d4787bbd88ebcfd673ace457016fde5265019470",
  "words": {
    "315": [
      "p",
      "a"
    ],
    "description": [
      "h1"
    ],
    "scripting": [
      "p",
      "p",
      "p"
    ],
    "languages": [
      "p",
      "p"
    ],
    "often": [
      "p"
    ],
    "have": [
      "p"
    ],
    "functions": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "eval),": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "allow": [
      "p"
    ],
    "interpreting": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p"
    ],
    "string": [
      "p"
    ],
    "or": [
      "p"
    ],
    "file": [
      "p"
    ],
    "part": [
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p"
    ],
    "danger": [
      "p"
    ],
    "using": [
      "p",
      "p",
      "p"
    ],
    "these": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "under": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "conditions": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p"
    ],
    "may": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "supply": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "a",
      "ul",
      "li",
      "title"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "it": [
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "executed": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p"
    ],
    "gives": [
      "p"
    ],
    "full": [
      "p",
      "p"
    ],
    "control": [
      "p",
      "p"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "affect": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "but": [
      "p"
    ],
    "typically": [
      "p",
      "p"
    ],
    "occur": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "web": [
      "p",
      "p"
    ],
    "applications": [
      "p",
      "p"
    ],
    "written": [
      "p"
    ],
    "php": [
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "a"
    ],
    "impact": [
      "h1"
    ],
    "gains": [
      "p"
    ],
    "ability": [
      "p"
    ],
    "use": [
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p"
    ],
    "any": [
      "p"
    ],
    "operating": [
      "p"
    ],
    "system": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "em"
    ],
    "available": [
      "p"
    ],
    "environment": [
      "p"
    ],
    "one": [
      "p"
    ],
    "most": [
      "p",
      "p"
    ],
    "dangerous": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "vulnerability": [
      "p"
    ],
    "types": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "em"
    ],
    "not": [
      "p"
    ],
    "on": [
      "p"
    ],
    "top": [
      "p"
    ],
    "being": [
      "p"
    ],
    "extremely": [
      "p"
    ],
    "powerful": [
      "p"
    ],
    "easy": [
      "p"
    ],
    "exploit": [
      "p",
      "p"
    ],
    "especially": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "p"
    ],
    "validate": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a"
    ],
    "avoid": [
      "p",
      "p",
      "p",
      "p"
    ],
    "apis": [
      "p",
      "p",
      "p",
      "p"
    ],
    "positive": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "validation": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "disable": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "loading": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "libraries": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "from": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "urls": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "h1",
      "p"
    ],
    "your": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "em",
      "ul",
      "li"
    ],
    "find": [
      "p"
    ],
    "calls": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "data": [
      "p"
    ],
    "passed": [
      "p"
    ],
    "them": [
      "p"
    ],
    "sufficiently": [
      "p"
    ],
    "validated": [
      "p",
      "p"
    ],
    "ensure": [
      "p"
    ],
    "avoided": [
      "p",
      "p"
    ],
    "used": [
      "ul",
      "li",
      "a"
    ],
    "disabled": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "computer": [
      "h1",
      "p"
    ],
    "based": [
      "h1",
      "p"
    ],
    "training": [
      "h1",
      "p"
    ],
    "links": [
      "h1"
    ],
    "following": [
      "p"
    ],
    "courses": [
      "p"
    ],
    "more": [
      "p",
      "ul",
      "li"
    ],
    "background": [
      "p"
    ],
    "information": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "about": [
      "p",
      "ul",
      "li"
    ],
    "type": [
      "p"
    ],
    "creating": [
      "h2",
      "p",
      "a"
    ],
    "secure": [
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "a"
    ],
    "course": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "introduces": [
      "p"
    ],
    "best": [
      "p",
      "p"
    ],
    "practices": [
      "p",
      "p"
    ],
    "developing": [
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "identifies": [
      "p"
    ],
    "common": [
      "p",
      "p",
      "p",
      "p"
    ],
    "attackers": [
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "gain": [
      "p"
    ],
    "access": [
      "p",
      "p",
      "em"
    ],
    "critical": [
      "p"
    ],
    "addition": [
      "p"
    ],
    "explains": [
      "p"
    ],
    "mitigation": [
      "p",
      "p"
    ],
    "techniques": [
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "em"
    ],
    "write": [
      "p",
      "p"
    ],
    "after": [
      "p"
    ],
    "completing": [
      "p"
    ],
    "describe": [
      "p"
    ],
    "explain": [
      "p"
    ],
    "learn": [
      "p"
    ],
    "cod": [
      "p",
      "a"
    ],
    "valid": [
      "p",
      "em"
    ],
    "login": [
      "p",
      "p",
      "em",
      "em"
    ],
    "credentials": [
      "p",
      "p",
      "em",
      "em"
    ],
    "enrollment": [
      "p",
      "em"
    ],
    "itself": [
      "p",
      "em"
    ],
    "required": [
      "p",
      "em"
    ],
    "team": [
      "p",
      "em"
    ],
    "professor": [
      "p",
      "em"
    ],
    "content": [
      "p",
      "em"
    ],
    "need": [
      "p",
      "em"
    ],
    "please": [
      "p",
      "em"
    ],
    "contact": [
      "p",
      "em"
    ],
    "support@securityinnovationcom": [
      "p",
      "em"
    ],
    "help": [
      "p",
      "em"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/code_injection": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Computer Based Training Links",
      "Additional Resources"
    ],
    "p": [
      "Scripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application. Code injection vulnerabilities affect all scripting languages, but typically occur in web applications written in PHP.",
      "An attacker gains full control of the application and the ability to use any operating system functions that are available to the scripting environment. Code injection is one of the most dangerous vulnerability types, if not the most dangerous. On top of being extremely powerful, code injection vulnerabilities are typically easy to exploit, especially in web applications.",
      "To prevent code injection vulnerabilities, validate all input and avoid using dangerous APIs.",
      "Validate all input:",
      "Avoid using dangerous APIs:",
      "To check your application for code injection, find all the calls to dangerous functions and verify that data passed to them is sufficiently validated, and ensure that dangerous APIs are avoided.",
      "All input is validated:",
      "Dangerous APIs are avoided:",
      "Use the following Computer Based Training courses for more background information about this type of vulnerabilities.",
      "This course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. After completing this course, you will be able to describe the best practices for developing secure PHP code, explain common PHP vulnerabilities and learn mitigation techniques to avoid common PHP vulnerabilities and write secure code.",
      "COD 315 Creating Secure PHP Code",
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ],
    "ul": [
      "Use Positive Input Validation",
      "Disable Dangerous Functions\n Disable Loading Libraries from URLs",
      "Positive Input Validation Is Used",
      "Dangerous Functions Are Disabled\n Loading Libraries from URLs Is Disabled",
      "For more information about code injection, see http://en.wikipedia.org/wiki/Code_injection"
    ],
    "li": [
      "Use Positive Input Validation",
      "Disable Dangerous Functions",
      "Disable Loading Libraries from URLs",
      "Positive Input Validation Is Used",
      "Dangerous Functions Are Disabled",
      "Loading Libraries from URLs Is Disabled",
      "For more information about code injection, see http://en.wikipedia.org/wiki/Code_injection"
    ],
    "a": [
      "Use Positive Input Validation",
      "Disable Dangerous Functions",
      "Disable Loading Libraries from URLs",
      "Positive Input Validation Is Used",
      "Dangerous Functions Are Disabled",
      "Loading Libraries from URLs Is Disabled",
      "COD 315 Creating Secure PHP Code",
      "http://en.wikipedia.org/wiki/Code_injection"
    ],
    "h2": [
      "Creating Secure PHP Code"
    ],
    "em": [
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ]
  },
  "links": [
    {
      "href": "c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52",
      "text": "Use Positive Input Validation"
    },
    {
      "href": "fe289976-08f4-46b3-a6ec-b80828d090b6",
      "text": "Disable Dangerous Functions"
    },
    {
      "href": "f54eacd2-ec2f-47a8-9639-67c01a1fcdd0",
      "text": "Disable Loading Libraries from URLs"
    },
    {
      "href": "d4129497-3a66-44d1-881e-e6f004af2e0d",
      "text": "Positive Input Validation Is Used"
    },
    {
      "href": "50ff859f-1562-4b27-b230-1e3d5bd8a3b9",
      "text": "Dangerous Functions Are Disabled"
    },
    {
      "href": "b90c1869-82db-470a-9b22-15d7adfdb035",
      "text": "Loading Libraries from URLs Is Disabled"
    },
    {
      "href": "https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127620",
      "text": "COD 315 Creating Secure PHP Code"
    },
    {
      "href": "http://en.wikipedia.org/wiki/Code_injection",
      "text": "http://en.wikipedia.org/wiki/Code_injection"
    }
  ],
  "html": "<h1>Description</h1><p>Scripting languages often have functions, such as eval(), that allow interpreting a string or a file as a part of the application. The danger of using these functions is that, under certain conditions, an attacker may be able to supply malicious code and it will be executed as a part of the application. This gives the attacker full control of the application. Code injection vulnerabilities affect all scripting languages, but typically occur in web applications written in PHP. \n</p><h1>Impact</h1><p>An attacker gains full control of the application and the ability to use any operating system functions that are available to the scripting environment. Code injection is one of the most dangerous vulnerability types, if not the most dangerous. On top of being extremely powerful, code injection vulnerabilities are typically easy to exploit, especially in web applications. \n</p><h1>Countermeasures</h1><p>To prevent code injection vulnerabilities, validate all input and avoid using dangerous APIs. \n</p><p>\nValidate all input:</p><ul>\n<li> <a href=\"c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52\">Use Positive Input Validation</a></li>\n</ul><p>\nAvoid using dangerous APIs:</p><ul>\n<li> <a href=\"fe289976-08f4-46b3-a6ec-b80828d090b6\">Disable Dangerous Functions</a></li>\n<li> <a href=\"f54eacd2-ec2f-47a8-9639-67c01a1fcdd0\">Disable Loading Libraries from URLs</a></li>\n</ul><h1>Application Check</h1><p>To check your application for code injection, find all the calls to dangerous functions and verify that data passed to them is sufficiently validated, and ensure that dangerous APIs are avoided.\n</p><p>\nAll input is validated:</p><ul>\n<li> <a href=\"d4129497-3a66-44d1-881e-e6f004af2e0d\">Positive Input Validation Is Used</a></li>\n</ul><p>\nDangerous APIs are avoided:</p><ul>\n<li> <a href=\"50ff859f-1562-4b27-b230-1e3d5bd8a3b9\">Dangerous Functions Are Disabled</a></li>\n<li> <a href=\"b90c1869-82db-470a-9b22-15d7adfdb035\">Loading Libraries from URLs Is Disabled</a></li>\n</ul><h1>Computer Based Training Links</h1><p>Use the following Computer Based Training courses for more background information about this type of vulnerabilities.\n</p><h2>Creating Secure PHP Code</h2><p>This course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. After completing this course, you will be able to describe the best practices for developing secure PHP code, explain common PHP vulnerabilities and learn mitigation techniques to avoid common PHP vulnerabilities and write secure code.\n</p><p>\n<a href=\"https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127620\">COD 315 Creating Secure PHP Code</a>\n</p><p>\n<em>Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.</em>\n</p><h1>Additional Resources</h1><ul><li> For more information about code injection, see <a href=\"http://en.wikipedia.org/wiki/Code_injection\">http://en.wikipedia.org/wiki/Code_injection</a></li></ul>"
}