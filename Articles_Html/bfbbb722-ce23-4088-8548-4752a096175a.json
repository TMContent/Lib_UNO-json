{
  "id": "bfbbb722-ce23-4088-8548-4752a096175a",
  "checksum": "6077a6ddf0487880f29a126e3898c108ac2e99c0",
  "words": {
    "description": [
      "h1"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "write": [
      "p",
      "title"
    ],
    "managed": [
      "p",
      "title"
    ],
    "code": [
      "p",
      "p",
      "p",
      "title"
    ],
    "with": [
      "p"
    ],
    "fewer": [
      "p"
    ],
    "security": [
      "p"
    ],
    "issues": [
      "p"
    ],
    "you": [
      "p"
    ],
    "should": [
      "p"
    ],
    "adhere": [
      "p"
    ],
    "solid": [
      "p"
    ],
    "object-oriented": [
      "p"
    ],
    "design": [
      "p"
    ],
    "principles": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "apply": [
      "p"
    ],
    "secure": [
      "p",
      "title"
    ],
    "coding": [
      "p"
    ],
    "guidelines": [
      "p"
    ],
    "for": [
      "p",
      "p"
    ],
    "example": [
      "p"
    ],
    "assume": [
      "p"
    ],
    "that": [
      "p",
      "p"
    ],
    "all": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p"
    ],
    "malicious": [
      "p"
    ],
    "validate": [
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "sources": [
      "p"
    ],
    "web": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "this": [
      "p"
    ],
    "includes": [
      "p"
    ],
    "server": [
      "p"
    ],
    "controls": [
      "p",
      "p",
      "p"
    ],
    "html": [
      "p"
    ],
    "cookies": [
      "p"
    ],
    "query": [
      "p"
    ],
    "strings": [
      "p",
      "p"
    ],
    "network": [
      "p"
    ],
    "resources": [
      "p"
    ],
    "shared": [
      "p"
    ],
    "databases": [
      "p"
    ],
    "also": [
      "p"
    ],
    "do": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "echo": [
      "p"
    ],
    "untrusted": [
      "p"
    ],
    "back": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p"
    ],
    "client": [
      "p",
      "p"
    ],
    "use": [
      "p",
      "p"
    ],
    "role-based": [
      "p"
    ],
    "authorization": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "access": [
      "p"
    ],
    "on": [
      "p"
    ],
    "public": [
      "p"
    ],
    "classes": [
      "p"
    ],
    "class": [
      "p"
    ],
    "members": [
      "p"
    ],
    "structured": [
      "p"
    ],
    "exception": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "return": [
      "p"
    ],
    "generic": [
      "p"
    ],
    "errors": [
      "p"
    ],
    "restrict": [
      "p"
    ],
    "type": [
      "p"
    ],
    "member": [
      "p"
    ],
    "visibility": [
      "p"
    ],
    "limit": [
      "p"
    ],
    "publicly": [
      "p"
    ],
    "accessible": [
      "p"
    ],
    "store": [
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "data": [
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p"
    ],
    "connection": [
      "p"
    ],
    "encryption": [
      "p"
    ],
    "keys": [
      "p"
    ],
    "user": [
      "p"
    ],
    "account": [
      "p"
    ],
    "credentials": [
      "p"
    ],
    "in": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "how": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Description"
    ],
    "p": [
      "To write managed code with fewer security issues, you should adhere to solid, object-oriented design principles and apply secure coding guidelines. For example, assume that all input is malicious, and validate input from all sources. For Web applications, this includes server controls, HTML controls, cookies, query strings, network resources and shared databases. Also, do not echo untrusted input back to the client. Use role-based authorization to provide access controls on public classes and class members. Use structured exception handling to return generic errors to the client. Restrict type and member visibility to limit the code that is publicly accessible. Do not store sensitive data, such as connection strings, encryption keys, and user account credentials in code.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Description</h1>\r\n  <p>To write managed code with fewer security issues, you should adhere to solid, object-oriented design principles and apply secure coding guidelines. For example, assume that all input is malicious, and validate input from all sources. For Web applications, this includes server controls, HTML controls, cookies, query strings, network resources and shared databases. Also, do not echo untrusted input back to the client. Use role-based authorization to provide access controls on public classes and class members. Use structured exception handling to return generic errors to the client. Restrict type and member visibility to limit the code that is publicly accessible. Do not store sensitive data, such as connection strings, encryption keys, and user account credentials in code.</p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}