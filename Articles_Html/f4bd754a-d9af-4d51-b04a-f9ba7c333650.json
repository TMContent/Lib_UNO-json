{
  "id": "f4bd754a-d9af-4d51-b04a-f9ba7c333650",
  "checksum": "cc9bef9078d7b7984df1fb0b3d006c96f4a14862",
  "words": {
    "0": [
      "pre",
      "pre"
    ],
    "description": [
      "h1"
    ],
    "you": [
      "p",
      "p",
      "p",
      "blockquote",
      "blockquote"
    ],
    "can": [
      "p"
    ],
    "take": [
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "data": [
      "p",
      "blockquote",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "title"
    ],
    "directly": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "blockquote",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "user": [
      "p"
    ],
    "and": [
      "p",
      "blockquote",
      "blockquote",
      "blockquote"
    ],
    "construct": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "blockquote"
    ],
    "securestring": [
      "p",
      "b",
      "b",
      "p",
      "b",
      "b",
      "b",
      "title"
    ],
    "object": [
      "p"
    ],
    "one": [
      "p"
    ],
    "character": [
      "p"
    ],
    "at": [
      "p"
    ],
    "time": [
      "p"
    ],
    "by": [
      "p"
    ],
    "using": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "appendchar": [
      "p",
      "b"
    ],
    "method": [
      "p",
      "p",
      "p"
    ],
    "following": [
      "p"
    ],
    "code": [
      "p"
    ],
    "example": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "how": [
      "p",
      "title"
    ],
    "to": [
      "p",
      "blockquote",
      "p",
      "p",
      "p",
      "title",
      "title"
    ],
    "do": [
      "p"
    ],
    "this": [
      "p"
    ],
    "systemsecurtiy;securestring": [
      "pre",
      "pre"
    ],
    "securepassword": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre"
    ],
    "securestring);": [
      "pre",
      "pre"
    ],
    "consolewriteline(\"enter": [
      "pre",
      "pre"
    ],
    "password...\");": [
      "pre",
      "pre"
    ],
    "while": [
      "pre",
      "pre"
    ],
    "true)": [
      "pre",
      "pre"
    ],
    "&#123": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "consolekeyinfo": [
      "pre",
      "pre"
    ],
    "conkeyinfo": [
      "pre",
      "pre"
    ],
    "consolereadkey(true);": [
      "pre",
      "pre"
    ],
    "if": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "conkeyinfo.key": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "==": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "consolekeyenter)": [
      "pre",
      "pre"
    ],
    "break": [
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "consolekeyescape)": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "consolekeybackspace)": [
      "pre",
      "pre"
    ],
    "securepassword.length": [
      "pre",
      "pre"
    ],
    "&#33=": [
      "pre",
      "pre"
    ],
    "securepasswordremoveat(securepassword.length": [
      "pre",
      "pre"
    ],
    "-": [
      "pre",
      "pre"
    ],
    "1;": [
      "pre",
      "pre"
    ],
    "&#125": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "securepasswordappendchar(conkeyinfo.keychar);&#125;console.writeline(securepassword.length.tostring());": [
      "pre",
      "pre"
    ],
    "note&nbsp&nbsp;&nbsp;securestring": [
      "blockquote",
      "p"
    ],
    "does": [
      "blockquote",
      "p"
    ],
    "not": [
      "blockquote",
      "p"
    ],
    "support": [
      "blockquote",
      "p"
    ],
    "inspection": [
      "blockquote",
      "p"
    ],
    "comparison": [
      "blockquote",
      "p"
    ],
    "or": [
      "blockquote",
      "p"
    ],
    "conversion": [
      "blockquote",
      "p"
    ],
    "functionality": [
      "blockquote",
      "p"
    ],
    "it": [
      "blockquote",
      "p"
    ],
    "cannot": [
      "blockquote",
      "p",
      "blockquote"
    ],
    "be": [
      "blockquote",
      "p"
    ],
    "manipulated": [
      "blockquote",
      "p"
    ],
    "reveal": [
      "blockquote",
      "p"
    ],
    "note": [
      "b",
      "b"
    ],
    "subsequently": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "title"
    ],
    "marshalsecurestringtobstr": [
      "p",
      "b"
    ],
    "as": [
      "p",
      "p",
      "p",
      "blockquote"
    ],
    "follows": [
      "p"
    ],
    "systemruntime.interopservices;void": [
      "pre",
      "pre"
    ],
    "usesecretdatasecurestring": [
      "pre",
      "pre"
    ],
    "secret&#123;": [
      "pre",
      "pre"
    ],
    "intptr": [
      "pre",
      "pre"
    ],
    "bstr": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "marshalsecurestringtobstr(secret);": [
      "pre",
      "pre"
    ],
    "try": [
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "here": [
      "pre",
      "pre"
    ],
    "finally": [
      "pre",
      "pre"
    ],
    "make": [
      "pre",
      "pre",
      "p"
    ],
    "sure": [
      "pre",
      "pre",
      "p"
    ],
    "that": [
      "pre",
      "pre",
      "p"
    ],
    "clear": [
      "pre",
      "pre",
      "p",
      "blockquote"
    ],
    "text": [
      "pre",
      "pre",
      "p"
    ],
    "is": [
      "pre",
      "pre"
    ],
    "zeroed": [
      "pre",
      "pre"
    ],
    "out": [
      "pre",
      "pre"
    ],
    "marshalzerofreebstr(bstr);": [
      "pre",
      "pre"
    ],
    "&#125&#125;": [
      "pre",
      "pre"
    ],
    "soon": [
      "p"
    ],
    "are": [
      "p",
      "blockquote"
    ],
    "finished": [
      "p"
    ],
    "with": [
      "p"
    ],
    "marshalzerofreebstr": [
      "p",
      "b"
    ],
    "note&nbsp&nbsp;&nbsp;avoid": [
      "blockquote"
    ],
    "converting": [
      "blockquote"
    ],
    "back": [
      "blockquote"
    ],
    "forth": [
      "blockquote"
    ],
    "between": [
      "blockquote"
    ],
    "regular": [
      "blockquote",
      "blockquote"
    ],
    "strings": [
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote"
    ],
    "secure": [
      "blockquote"
    ],
    "because": [
      "blockquote"
    ],
    "immutable": [
      "blockquote"
    ],
    "them": [
      "blockquote"
    ],
    "result": [
      "blockquote"
    ],
    "could": [
      "blockquote"
    ],
    "have": [
      "blockquote"
    ],
    "multiple": [
      "blockquote"
    ],
    "copies": [
      "blockquote"
    ],
    "of": [
      "blockquote"
    ],
    "unencrypted": [
      "blockquote"
    ],
    "in": [
      "blockquote",
      "title"
    ],
    "memory": [
      "blockquote",
      "title"
    ],
    "system": [
      "b"
    ],
    "string": [
      "b"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ],
    "protect": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Description"
    ],
    "p": [
      "You can take sensitive data directly from the user and construct a SecureString object one character at a time by using the AppendChar method. The following code example shows how to do this.",
      "Note&nbsp;&nbsp;&nbsp;SecureString does not support inspection, comparison, or conversion functionality. It cannot be manipulated to reveal the data.",
      "To subsequently use the data from SecureString, use the Marshal.SecureStringToBSTR method, as follows.",
      "",
      "As soon as you are finished with the data, make sure that you use the Marshal.ZeroFreeBSTR method to clear the text data.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "SecureString",
      "AppendChar",
      "Note",
      "SecureString",
      "SecureString",
      "Marshal.SecureStringToBSTR",
      "Marshal.ZeroFreeBSTR",
      "Note",
      "SecureString",
      "SecureString",
      "System",
      "String"
    ],
    "pre": [
      "using System.Securtiy;SecureString securePassword = new SecureString(); Console.WriteLine(\"Enter Password....\"); while (true) &#123;    ConsoleKeyInfo conKeyInfo = Console.ReadKey(true);    if (conKeyInfo.Key == ConsoleKey.Enter)        break;    else if (conKeyInfo.Key == ConsoleKey.Escape)        return;    else if (conKeyInfo.Key == ConsoleKey.Backspace)    &#123;        if (securePassword.Length &#33;= 0)            securePassword.RemoveAt(securePassword.Length - 1);    &#125;    else        securePassword.AppendChar(conKeyInfo.KeyChar);&#125;Console.WriteLine(securePassword.Length.ToString());",
      "using System.Securtiy;SecureString securePassword = new SecureString(); Console.WriteLine(\"Enter Password....\"); while (true) &#123;    ConsoleKeyInfo conKeyInfo = Console.ReadKey(true);    if (conKeyInfo.Key == ConsoleKey.Enter)        break;    else if (conKeyInfo.Key == ConsoleKey.Escape)        return;    else if (conKeyInfo.Key == ConsoleKey.Backspace)    &#123;        if (securePassword.Length &#33;= 0)            securePassword.RemoveAt(securePassword.Length - 1);    &#125;    else        securePassword.AppendChar(conKeyInfo.KeyChar);&#125;Console.WriteLine(securePassword.Length.ToString());",
      "using System.Runtime.InteropServices;void UseSecretData(SecureString secret)&#123;    IntPtr bstr = Marshal.SecureStringToBSTR(secret);    try    &#123;        // Use the bstr here    &#125;    finally    &#123;        // Make sure that the clear text data is zeroed out.        Marshal.ZeroFreeBSTR(bstr);    &#125;&#125;",
      "using System.Runtime.InteropServices;void UseSecretData(SecureString secret)&#123;    IntPtr bstr = Marshal.SecureStringToBSTR(secret);    try    &#123;        // Use the bstr here    &#125;    finally    &#123;        // Make sure that the clear text data is zeroed out.        Marshal.ZeroFreeBSTR(bstr);    &#125;&#125;"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "blockquote": [
      "Note&nbsp;&nbsp;&nbsp;SecureString does not support inspection, comparison, or conversion functionality. It cannot be manipulated to reveal the data.",
      "Note&nbsp;&nbsp;&nbsp;Avoid converting back and forth between regular strings and secure strings because regular strings are immutable and you cannot clear them. As a result, you could have multiple copies of unencrypted strings in memory."
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Description</h1>\n  <p>You can take sensitive data directly from the user and construct a <b>SecureString</b> object one character at a time by using the <b>AppendChar</b> method. The following code example shows how to do this. </p>\n  <pre>\n    <pre>using System.Securtiy;<br />SecureString securePassword = new SecureString();<br /> Console.WriteLine(\"Enter Password....\");<br /> while (true)<br /> &amp;#123;<br />    ConsoleKeyInfo conKeyInfo = Console.ReadKey(true);<br />    if (conKeyInfo.Key == ConsoleKey.Enter)<br />        break;<br />    else if (conKeyInfo.Key == ConsoleKey.Escape)<br />        return;<br />    else if (conKeyInfo.Key == ConsoleKey.Backspace)<br />    &amp;#123;<br />        if (securePassword.Length &amp;#33;= 0)<br />            securePassword.RemoveAt(securePassword.Length - 1);<br />    &amp;#125;<br />    else<br />        securePassword.AppendChar(conKeyInfo.KeyChar);<br />&amp;#125;<br />Console.WriteLine(securePassword.Length.ToString());  </pre>\n  </pre>\n  <blockquote>\n    <p>\n      <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;<b>SecureString</b> does not support inspection, comparison, or conversion functionality. It cannot be manipulated to reveal the data.</p>\n  </blockquote>\n  <p>To subsequently use the data from <b>SecureString</b>, use the <b>Marshal.SecureStringToBSTR</b> method, as follows.</p>\n  <pre>\n    <p>\n    </p>\n    <pre>using System.Runtime.InteropServices;<br />void UseSecretData(SecureString secret)<br />&amp;#123;<br />    IntPtr bstr = Marshal.SecureStringToBSTR(secret);<br />    try<br />    &amp;#123;<br />        // Use the bstr here<br />    &amp;#125;<br />    finally<br />    &amp;#123;<br />        // Make sure that the clear text data is zeroed out.<br />        Marshal.ZeroFreeBSTR(bstr);<br />    &amp;#125;<br />&amp;#125;  </pre>\n  </pre>\n  <p>As soon as you are finished with the data, make sure that you use the <b>Marshal.ZeroFreeBSTR</b> method to clear the text data. </p>\n  <blockquote>\n    <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;Avoid converting back and forth between regular strings and secure strings because regular strings are immutable and you cannot clear them. As a result, you could have multiple copies of unencrypted strings in memory.</blockquote>Use of the <b>SecureString</b> class is less appropriate in ASP.NET applications. It is unlikely that you can extract data from a Web page that contains sensitive data (such as a credit card number) and place it inside a <b>SecureString</b> without it having already passed through intermediate <b>System</b>.<b> String</b> objects. <hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}