{
  "id": "d252b573-591c-4d11-9aab-621fb0a04993",
  "checksum": "1962502ead4f5816c8e60e151700d3b39e9cccf9",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "title"
    ],
    "check": [
      "h1",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "for": [
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "ensure": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p"
    ],
    "all": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "li",
      "p"
    ],
    "forms": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "require": [
      "p"
    ],
    "authentication": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "or": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "li",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "title"
    ],
    "trigger": [
      "p"
    ],
    "important": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "functionality": [
      "p"
    ],
    "are": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ol",
      "li"
    ],
    "protected": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "pre",
      "pre"
    ],
    "with": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "viewstateuserkey": [
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "strong",
      "pre",
      "pre",
      "title"
    ],
    "why": [
      "h1"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "one-click": [
      "p",
      "title"
    ],
    "attack": [
      "p"
    ],
    "consists": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "posting": [
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p"
    ],
    "http": [
      "p"
    ],
    "form": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "known": [
      "p"
    ],
    "vulnerable": [
      "p",
      "p"
    ],
    "web": [
      "p"
    ],
    "site": [
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "title"
    ],
    "called": [
      "p"
    ],
    "\"one-click\"": [
      "p"
    ],
    "because": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "usually": [
      "p"
    ],
    "begins": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p"
    ],
    "unaware": [
      "p"
    ],
    "victim": [
      "p",
      "p"
    ],
    "clicking": [
      "p"
    ],
    "on": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "alluring": [
      "p"
    ],
    "link": [
      "p",
      "p"
    ],
    "received": [
      "p"
    ],
    "through": [
      "p"
    ],
    "e-mail": [
      "p"
    ],
    "found": [
      "p"
    ],
    "when": [
      "p"
    ],
    "navigating": [
      "p"
    ],
    "crowded": [
      "p"
    ],
    "forum": [
      "p"
    ],
    "by": [
      "p",
      "p"
    ],
    "following": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "user": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "inadvertently": [
      "p"
    ],
    "triggers": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "remote": [
      "p"
    ],
    "process": [
      "p"
    ],
    "ends": [
      "p"
    ],
    "up": [
      "p"
    ],
    "submitting": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p"
    ],
    "allows": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "any": [
      "p"
    ],
    "action": [
      "p"
    ],
    "caused": [
      "p"
    ],
    "credentials": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "much": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "harder": [
      "p"
    ],
    "hackers": [
      "p"
    ],
    "use": [
      "p",
      "p"
    ],
    "content": [
      "p"
    ],
    "client-side": [
      "p"
    ],
    "view": [
      "p"
    ],
    "state": [
      "p"
    ],
    "prepare": [
      "p"
    ],
    "posts": [
      "p"
    ],
    "against": [
      "p"
    ],
    "each": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "time": [
      "p",
      "p"
    ],
    "invoked": [
      "p"
    ],
    "unique": [
      "p"
    ],
    "key": [
      "p",
      "p",
      "p"
    ],
    "generated": [
      "p"
    ],
    "contains": [
      "p"
    ],
    "encrypted": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "session": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "information": [
      "p"
    ],
    "submission": [
      "p"
    ],
    "rejected": [
      "p"
    ],
    "if": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ol",
      "li"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "another": [
      "p"
    ],
    "after": [
      "p"
    ],
    "timeout": [
      "p"
    ],
    "has": [
      "p"
    ],
    "expired": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "steps": [
      "p"
    ],
    "whether": [
      "p"
    ],
    "properly": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "pages": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "review": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "application": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "make": [
      "ol",
      "li",
      "p"
    ],
    "list": [
      "ol",
      "li",
      "p"
    ],
    "meet": [
      "ol",
      "li",
      "p"
    ],
    "either": [
      "ol",
      "li",
      "p"
    ],
    "criteria": [
      "ol",
      "li",
      "p"
    ],
    "requires": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "behavior": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "write": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "operation": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "persistent": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "store": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "eg.": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "sql": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "database": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "see": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "set": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p"
    ],
    "per": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "page": [
      "ol",
      "li",
      "p",
      "p",
      "b",
      "title"
    ],
    "oninit": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "strong",
      "p",
      "b"
    ],
    "virtual": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "method": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "page-derived": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "class": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "first": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "you": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "find": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "protection": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "there": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "then": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "coveredprotected": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "override": [
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "oniniteventargs": [
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "e": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "{": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "baseoninit(e);": [
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "sessionsessionid;}": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "next": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "individual": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "instancevoid": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "page_init": [
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "object": [
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "sender": [
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "eventargs": [
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "setting": [
      "ol",
      "li",
      "p"
    ],
    "constant": [
      "ol",
      "li",
      "p"
    ],
    "string—the": [
      "ol",
      "li",
      "p"
    ],
    "same": [
      "ol",
      "li",
      "p"
    ],
    "users—is": [
      "ol",
      "li",
      "p"
    ],
    "like": [
      "ol",
      "li",
      "p"
    ],
    "leaving": [
      "ol",
      "li",
      "p"
    ],
    "blank": [
      "ol",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "something": [
      "ol",
      "li",
      "p"
    ],
    "varies": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "user—such": [
      "ol",
      "li",
      "p"
    ],
    "as": [
      "ol",
      "li",
      "p"
    ],
    "id": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "better": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "yet": [
      "ol",
      "li",
      "p"
    ],
    "number": [
      "ol",
      "li",
      "p"
    ],
    "technical": [
      "ol",
      "li",
      "p"
    ],
    "social": [
      "ol",
      "li",
      "p"
    ],
    "reasons": [
      "ol",
      "li",
      "p"
    ],
    "fit": [
      "ol",
      "li",
      "p"
    ],
    "unpredictable": [
      "ol",
      "li",
      "p"
    ],
    "times": [
      "ol",
      "li",
      "p"
    ],
    "out": [
      "ol",
      "li",
      "p"
    ],
    "per-user": [
      "ol",
      "li",
      "p"
    ],
    "basis": [
      "ol",
      "li",
      "p"
    ],
    "void": [
      "pre",
      "pre"
    ],
    "fix": [
      "h1"
    ],
    "the following": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p"
    ],
    "added": [
      "p"
    ],
    "each of": [
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "based": [
      "p"
    ],
    "sessionid": [
      "p"
    ],
    "alternatively": [
      "p"
    ],
    "add": [
      "p"
    ],
    "note": [
      "p"
    ],
    "property": [
      "p"
    ],
    "pageinit": [
      "p",
      "b"
    ],
    "event.": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "once": [
      "p"
    ],
    "rather": [
      "p"
    ],
    "than": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "counter": [
      "title"
    ],
    "attacks": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix"
    ],
    "p": [
      "Check to ensure that all forms that require authentication or can be used to trigger important functionality are protected with ViewStateUserKey.",
      "A one-click attack consists of posting a malicious HTTP form to a known, vulnerable Web site. It is called \"one-click\" because it usually begins with an unaware victim clicking on an alluring link received through e-mail or found when navigating a crowded forum.  By following the link, the user inadvertently triggers a remote process that ends up submitting the malicious form to a site.  This allows an attacker to perform any action caused by the vulnerable form with the credentials of the victim.",
      "ViewStateUserKey makes it much harder for hackers to use the content of the client-side view state to prepare malicious posts against the site.  Each time a form is invoked, a unique key is generated.  The key contains encrypted time and session information, and the form submission is rejected if it is used in another session or after the session timeout has expired.",
      "Use the following steps to check whether ViewStateUserKey is used properly:",
      "Identify pages that should be protected. Review your application and make a list of all the forms that should be protected with ViewStateUserKey.  Forms that meet either of the following criteria should be protected:",
      "Check to see if the pages are protected. ViewStateUserKey can be set per page or in the OnInit virtual method of the page-derived class.",
      "Ensure ViewStateUserKey is set properly. Setting ViewStateUserKey to a constant string—the same for all users—is like leaving it blank.  It must be set to something that varies for each user—such as user ID or, better yet, session ID.  For a number of technical and social reasons, session ID is a much better fit because a session ID is unpredictable, times out, and varies on a per-user basis.",
      "The following code added to each of your pages will set the key based on SessionID.",
      "Alternatively, you can add this code to the OnInit virtual method of the Page-derived class.  (Note that you must set this property in the Page.Init event).  This will allow you to write the code once rather than per page.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "strong": [
      "ViewStateUserKey",
      "Identify pages that should be protected.",
      "Check to see if the pages are protected.",
      "OnInit",
      "OnInit",
      "Ensure ViewStateUserKey is set properly.",
      "ViewStateUserKey"
    ],
    "ol": [
      "Identify pages that should be protected. Review your application and make a list of all the forms that should be protected with ViewStateUserKey.  Forms that meet either of the following criteria should be protected:\r\n      \r\n        The form requires authentication \r\n        The form triggers important application behavior or a write operation to a persistent store (eg. SQL database)\r\n      \r\n    \r\n    \r\n      \r\n        Check to see if the pages are protected. ViewStateUserKey can be set per page or in the OnInit virtual method of the page-derived class.  \r\n      \r\n        First check OnInit, if you find protection there, then all of your pages are covered.protected override OnInit(EventArgs e) {   base.OnInit(e);    ViewStateUserKey = Session.SessionID;}\r\n        Next check the individual pages, for instance:void Page_Init (object sender, EventArgs e) {   ViewStateUserKey = Session.SessionID;}\r\n      \r\n    \r\n    \r\n      \r\n        Ensure ViewStateUserKey is set properly. Setting ViewStateUserKey to a constant string—the same for all users—is like leaving it blank.  It must be set to something that varies for each user—such as user ID or, better yet, session ID.  For a number of technical and social reasons, session ID is a much better fit because a session ID is unpredictable, times out, and varies on a per-user basis.",
      "First check OnInit, if you find protection there, then all of your pages are covered.protected override OnInit(EventArgs e) {   base.OnInit(e);    ViewStateUserKey = Session.SessionID;}\r\n        Next check the individual pages, for instance:void Page_Init (object sender, EventArgs e) {   ViewStateUserKey = Session.SessionID;}"
    ],
    "li": [
      "Identify pages that should be protected. Review your application and make a list of all the forms that should be protected with ViewStateUserKey.  Forms that meet either of the following criteria should be protected:\r\n      \r\n        The form requires authentication \r\n        The form triggers important application behavior or a write operation to a persistent store (eg. SQL database)",
      "The form requires authentication",
      "The form triggers important application behavior or a write operation to a persistent store (eg. SQL database)",
      "Check to see if the pages are protected. ViewStateUserKey can be set per page or in the OnInit virtual method of the page-derived class.  \r\n      \r\n        First check OnInit, if you find protection there, then all of your pages are covered.protected override OnInit(EventArgs e) {   base.OnInit(e);    ViewStateUserKey = Session.SessionID;}\r\n        Next check the individual pages, for instance:void Page_Init (object sender, EventArgs e) {   ViewStateUserKey = Session.SessionID;}",
      "First check OnInit, if you find protection there, then all of your pages are covered.protected override OnInit(EventArgs e) {   base.OnInit(e);    ViewStateUserKey = Session.SessionID;}",
      "Next check the individual pages, for instance:void Page_Init (object sender, EventArgs e) {   ViewStateUserKey = Session.SessionID;}",
      "Ensure ViewStateUserKey is set properly. Setting ViewStateUserKey to a constant string—the same for all users—is like leaving it blank.  It must be set to something that varies for each user—such as user ID or, better yet, session ID.  For a number of technical and social reasons, session ID is a much better fit because a session ID is unpredictable, times out, and varies on a per-user basis."
    ],
    "ul": [
      "The form requires authentication \r\n        The form triggers important application behavior or a write operation to a persistent store (eg. SQL database)",
      ""
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "pre": [
      "protected override OnInit(EventArgs e) {   base.OnInit(e);    ViewStateUserKey = Session.SessionID;}",
      "void Page_Init (object sender, EventArgs e) {   ViewStateUserKey = Session.SessionID;}",
      "void Page_Init (object sender, EventArgs e) {   ViewStateUserKey = Session.SessionID;}",
      "protected override OnInit(EventArgs e) {   base.OnInit(e);    ViewStateUserKey = Session.SessionID;}"
    ],
    "b": [
      "OnInit",
      "Page",
      "Page.Init"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Check For</h1>\r\n  <p>Check to ensure that all forms that require authentication or can be used to trigger important functionality are protected with ViewStateUserKey.</p>\r\n  <h1>Why</h1>\r\n  <p>A one-click attack consists of posting a malicious HTTP form to a known, vulnerable Web site. It is called \"one-click\" because it usually begins with an unaware victim clicking on an alluring link received through e-mail or found when navigating a crowded forum.&nbsp; By following the link, the user inadvertently triggers a remote process that ends up submitting the malicious form to a site.&nbsp; This allows an attacker to perform any action caused by the vulnerable form with the credentials of the victim.</p>\r\n  <p>\r\n    <strong>ViewStateUserKey</strong> makes it much harder for hackers to use the content of the client-side view state to prepare malicious posts against the site.&nbsp; Each time a form is invoked, a unique key is generated.&nbsp; The key contains encrypted time and session information, and the form submission is rejected if it is used in another session or after the session timeout has expired. </p>\r\n  <h1>How to Check</h1>\r\n  <p>Use the following steps to check whether ViewStateUserKey is used properly:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify pages that should be protected. </strong>Review your application and make a list of all the forms that should be protected with ViewStateUserKey.&nbsp; Forms that meet either of the following criteria should be protected:</p>\r\n      <ul>\r\n        <li>The form requires authentication </li>\r\n        <li>The form triggers important application behavior or a write operation to a persistent store (eg. SQL database)</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Check to see if the pages are protected. </strong>ViewStateUserKey can be set per page or in the <strong>OnInit</strong> virtual method of the page-derived class.&nbsp; </p>\r\n      <ol>\r\n        <li>First check <strong>OnInit</strong>, if you find protection there, then all of your pages are covered.<br /><br /><pre>protected override OnInit(EventArgs e) {<br />&nbsp;&nbsp; base.OnInit(e); <br />&nbsp;&nbsp; ViewStateUserKey = Session.SessionID;<br />}</pre></li>\r\n        <li>Next check the individual pages, for instance:<br /><br /><pre>void Page_Init (object sender, EventArgs e) {<br />&nbsp;&nbsp; ViewStateUserKey = Session.SessionID;<br />}</pre></li>\r\n      </ol>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure ViewStateUserKey is set properly. </strong>Setting <strong>ViewStateUserKey</strong> to a constant string—the same for all users—is like leaving it blank.&nbsp; It must be set to something that varies for each user—such as user ID or, better yet, session ID.&nbsp; For a number of technical and social reasons, session ID is a much better fit because a session ID is unpredictable, times out, and varies on a per-user basis. </p>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>The&nbsp;following code added to each&nbsp;of your pages will set the key based on SessionID.</p>\r\n  <pre>void Page_Init (object sender, EventArgs e) {<br />   ViewStateUserKey = Session.SessionID;<br />}</pre>\r\n  <p>Alternatively, you can add this code to the <b>OnInit</b> virtual method of the <b>Page</b>-derived class.&nbsp; (Note that you must set this property in the <b>Page.Init</b> event).&nbsp; This will allow you to write the code once rather than per page.</p>\r\n  <pre>protected override OnInit(EventArgs e) {<br />   base.OnInit(e); <br />   ViewStateUserKey = Session.SessionID;<br />}</pre>\r\n  <ul>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}