{
  "id": "0f49430b-2abe-408f-b046-89fa739f5d53",
  "checksum": "d80e977f021b010588e395e588cd3909d12bfff5",
  "words": {
    "1": [
      "ul",
      "li",
      "a"
    ],
    "2": [
      "ul",
      "li",
      "a"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "javajsf": [
      "ul"
    ],
    "java": [
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "jsf": [
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "title"
    ],
    "summary": [
      "h1"
    ],
    "perform": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "pre",
      "p",
      "ul",
      "li",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "title"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "title"
    ],
    "using": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "within": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "objectives": [
      "h1"
    ],
    "strong": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p"
    ],
    "powerful": [
      "p"
    ],
    "control": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "prevent": [
      "p"
    ],
    "various": [
      "p"
    ],
    "security": [
      "p",
      "p"
    ],
    "issues": [
      "p"
    ],
    "this": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "article": [
      "p"
    ],
    "will": [
      "p"
    ],
    "describe": [
      "p"
    ],
    "how": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "use": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "a",
      "ul",
      "li",
      "a"
    ],
    "built-in": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "mechanisms": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "provided": [
      "p"
    ],
    "by": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p"
    ],
    "appropriate": [
      "p"
    ],
    "solution": [
      "h1"
    ],
    "examples": [
      "h1",
      "h1"
    ],
    "there": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "are": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "several": [
      "p",
      "p"
    ],
    "ways": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "on": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "needed": [
      "p"
    ],
    "required": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "attribute": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "form": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "elements": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "most": [
      "ol",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "you": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "simply": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "add": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "required=\"true\"": [
      "ol",
      "ol",
      "li",
      "p",
      "em",
      "li",
      "pre"
    ],
    "ensure": [
      "ol",
      "li",
      "p"
    ],
    "field": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "pre"
    ],
    "when": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "submitted": [
      "ol",
      "li",
      "p"
    ],
    "trivial": [
      "ol",
      "li",
      "p"
    ],
    "but": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "very": [
      "ol",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "h1"
    ],
    "easy": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "li",
      "p"
    ],
    "h:inputtext": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre"
    ],
    "value=\"#{mybeansomefield}\"": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre"
    ],
    "required=\"true\"/": [
      "ol",
      "li",
      "pre"
    ],
    "validators": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "mechanism": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "allows": [
      "ol",
      "li",
      "p"
    ],
    "directly": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "validating": [
      "ol",
      "li",
      "p"
    ],
    "any": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "many": [
      "ol",
      "li",
      "p"
    ],
    "f:validatelength": [
      "ol",
      "li",
      "pre"
    ],
    "minimum=\"6\"": [
      "ol",
      "li",
      "pre"
    ],
    "maximum=\"50\"/</h:inputtext>": [
      "ol",
      "li",
      "pre"
    ],
    "custom": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p"
    ],
    "method": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "from": [
      "ol",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "backing": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "bean": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "option": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "provides": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "build": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "out": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "checks": [
      "ol",
      "li",
      "p"
    ],
    "given": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "throw": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "pre"
    ],
    "validatorexception": [
      "ol",
      "ol",
      "li",
      "p",
      "em",
      "li",
      "pre"
    ],
    "if": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "necessary": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "completely": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "does": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "provide": [
      "ol",
      "li",
      "p"
    ],
    "hook": [
      "ol",
      "li",
      "p"
    ],
    "access": [
      "ol",
      "li",
      "p"
    ],
    "methods": [
      "ol",
      "li",
      "p"
    ],
    "validator": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "strong",
      "em",
      "em",
      "pre",
      "p",
      "p"
    ],
    "as": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "shown": [
      "ol",
      "li",
      "p"
    ],
    "below": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "value=\"#{mybeanmyfield}\"": [
      "ol",
      "li",
      "pre"
    ],
    "validator=\"#{mybeanvalidatemyfield}\"": [
      "ol",
      "li",
      "pre"
    ],
    "/": [
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "implementing": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "interface": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "have": [
      "ol",
      "li",
      "p"
    ],
    "could": [
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "li",
      "p"
    ],
    "reusable": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "exist": [
      "ol",
      "li",
      "p"
    ],
    "standard": [
      "ol",
      "li",
      "p"
    ],
    "validations": [
      "ol",
      "li",
      "p"
    ],
    "likely": [
      "ol",
      "li",
      "p"
    ],
    "best": [
      "ol",
      "li",
      "p"
    ],
    "it's": [
      "ol",
      "li",
      "p"
    ],
    "reuse": [
      "ol",
      "li",
      "p"
    ],
    "potential": [
      "ol",
      "li",
      "p"
    ],
    "first": [
      "ol",
      "li",
      "p"
    ],
    "need": [
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "p"
    ],
    "class": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre"
    ],
    "implements": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre"
    ],
    "throws": [
      "ol",
      "li",
      "p"
    ],
    "validationexception": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "javaxfaces.validator.validator....public": [
      "ol",
      "li",
      "pre"
    ],
    "myfieldvalidator": [
      "ol",
      "li",
      "pre"
    ],
    "{": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "public": [
      "ol",
      "li",
      "pre"
    ],
    "void": [
      "ol",
      "li",
      "pre"
    ],
    "validatefacescontext": [
      "ol",
      "li",
      "pre"
    ],
    "context": [
      "ol",
      "li",
      "pre"
    ],
    "uicomponent": [
      "ol",
      "li",
      "pre"
    ],
    "component": [
      "ol",
      "li",
      "pre"
    ],
    "object": [
      "ol",
      "li",
      "pre"
    ],
    "value   throws": [
      "ol",
      "li",
      "pre"
    ],
    "string": [
      "ol",
      "li",
      "pre"
    ],
    "myfield": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "string)": [
      "ol",
      "li",
      "pre"
    ],
    "if!myfield.contains(\"%\"))": [
      "ol",
      "li",
      "pre"
    ],
    "facesmessage": [
      "ol",
      "li",
      "pre"
    ],
    "message": [
      "ol",
      "li",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "facesmessage);": [
      "ol",
      "li",
      "pre"
    ],
    "messagesetseverity(facesmessage.severity_error);": [
      "ol",
      "li",
      "pre"
    ],
    "messagesetsummary(\"invalid": [
      "ol",
      "li",
      "pre"
    ],
    "format\");": [
      "ol",
      "li",
      "pre"
    ],
    "messagesetdetail(\"you": [
      "ol",
      "li",
      "pre"
    ],
    "can't": [
      "ol",
      "li",
      "pre"
    ],
    "wildcarding": [
      "ol",
      "li",
      "pre"
    ],
    "here\");": [
      "ol",
      "li",
      "pre"
    ],
    "contextaddmessage(\"myform:myfield\",": [
      "ol",
      "li",
      "pre"
    ],
    "message;": [
      "ol",
      "li",
      "pre"
    ],
    "validatorexceptionmessage);": [
      "ol",
      "li",
      "pre"
    ],
    "}": [
      "ol",
      "li",
      "pre"
    ],
    "}}": [
      "ol",
      "li",
      "pre"
    ],
    "order": [
      "ol",
      "li",
      "p"
    ],
    "register": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p"
    ],
    "adding": [
      "ol",
      "li",
      "p"
    ],
    "something": [
      "ol",
      "li",
      "p"
    ],
    "like": [
      "ol",
      "li",
      "p"
    ],
    "snippet": [
      "ol",
      "li",
      "p"
    ],
    "faces-configxml": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "file": [
      "ol",
      "li",
      "p"
    ],
    "validator> <validator-id>myfieldvalidator</validator-id> <validator-class>com.myapp.myfieldvalidator</validator-class></validator>": [
      "ol",
      "li",
      "pre"
    ],
    "finally": [
      "ol",
      "li",
      "p"
    ],
    "would": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "similar": [
      "ol",
      "li",
      "p"
    ],
    "one": [
      "ol",
      "li",
      "p"
    ],
    "id=\"myfield\"": [
      "ol",
      "li",
      "pre"
    ],
    "value=\"#{mybeanmyfield}\"> <f:validator": [
      "ol",
      "li",
      "pre"
    ],
    "validatorid=\"myfieldvalidator\"": [
      "ol",
      "li",
      "pre"
    ],
    "/</h:inputtext>": [
      "ol",
      "li",
      "pre"
    ],
    "listed": [
      "ol",
      "li",
      "p"
    ],
    "above": [
      "ol",
      "li",
      "p"
    ],
    "ui": [
      "ol",
      "li",
      "p"
    ],
    "pattern": [
      "ol",
      "li",
      "p"
    ],
    "displaying": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "error": [
      "ol",
      "li",
      "p"
    ],
    "messages": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre"
    ],
    "back": [
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "li",
      "p"
    ],
    "hmessages": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "or": [
      "ol",
      "li",
      "p"
    ],
    "hmessage": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "tag": [
      "ol",
      "li",
      "p"
    ],
    "//for": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "all": [
      "ol",
      "li",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "messagesh:messages": [
      "ol",
      "li",
      "pre"
    ],
    "single": [
      "ol",
      "li",
      "pre"
    ],
    "fieldh:message": [
      "ol",
      "li",
      "pre"
    ],
    "for=\"username\"": [
      "ol",
      "li",
      "pre"
    ],
    "conclusion": [
      "p"
    ],
    "function": [
      "p"
    ],
    "used": [
      "p"
    ],
    "properly": [
      "p"
    ],
    "applied": [
      "p"
    ],
    "thoroughly": [
      "p"
    ],
    "throughout": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "options": [
      "p"
    ],
    "accomplishing": [
      "p"
    ],
    "task": [
      "p"
    ],
    "more": [
      "h1",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "information": [
      "h1",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//courses.coreservlets.com/course-materials/pdf/jsf/08-validation.pdffor": [
      "ul"
    ],
    "about data": [
      "ul",
      "li"
    ],
    "conversion": [
      "ul",
      "li"
    ],
    "see http//www.ibm.com/developerworks/java/library/j-jsf3/": [
      "ul",
      "li"
    ],
    "http//courses.coreservlets.com/course-materials/pdf/jsf/08-validation.pdf": [
      "li",
      "a"
    ],
    "http//www.ibm.com/developerworks/java/library/j-jsf3/": [
      "a"
    ],
    "data": [
      "h1",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "guidelines": [
      "h1"
    ],
    "validate": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "a"
    ],
    "sources": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "length": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "range": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "format": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "type": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "passed": [
      "ul",
      "li",
      "a",
      "a"
    ],
    "database": [
      "ul",
      "li",
      "a",
      "a",
      "ul",
      "li",
      "a"
    ],
    "filter": [
      "ul",
      "li",
      "a"
    ],
    "user-supplied": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "filename": [
      "ul",
      "li",
      "a"
    ],
    "path": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "do": [
      "ul",
      "li",
      "a"
    ],
    "rely": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "client-side": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "validated": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "filenames": [
      "ul",
      "li",
      "a"
    ],
    "paths": [
      "ul",
      "li",
      "a"
    ],
    "springmvc": [
      "ul",
      "li",
      "a"
    ],
    "struts": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "esapi": [
      "ul",
      "li",
      "a"
    ],
    "executor": [
      "ul",
      "li",
      "a"
    ],
    "testing": [
      "h1"
    ],
    "test": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "server-side": [
      "ul",
      "li",
      "a"
    ],
    "injection": [
      "ul",
      "li",
      "a"
    ],
    "manipulation": [
      "ul",
      "li",
      "a"
    ],
    "bugs": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "double": [
      "ul",
      "li",
      "a"
    ],
    "encoding": [
      "ul",
      "li",
      "a"
    ],
    "bypass": [
      "ul",
      "li",
      "a"
    ],
    "integer": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "overflows": [
      "ul",
      "li",
      "a"
    ],
    "underflow": [
      "ul",
      "li",
      "a"
    ],
    "deserialization": [
      "ul",
      "li",
      "a"
    ],
    "untrusted": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Objectives",
      "Solution Examples",
      "More Information",
      "Input and Data Validation Guidelines",
      "Input and Data Validation Checklists",
      "Input and Data Validation Code Examples",
      "Input and Data Validation Testing"
    ],
    "ul": [
      "JAVAJSF",
      "For more information about input validation in JSF, please see http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdfFor more information about data conversion and validation in JSF, please see http://www.ibm.com/developerworks/java/library/j-jsf3/",
      "Validate Input from All Sources\n    \n    \n      Validate Input for Length, Range, Format, and Type\n    \n    \n      \n        Validate All Input Passed to the Database\n      \n    \n    \n      Filter All User-Supplied Filename and Path Input\n    \n    \n      Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated\n    \n    \n      Input Is Validated for Length, Range, Format and Type\n    \n    \n      All Database Input Is Validated\n    \n    \n      User-Supplied Filenames and Paths Are Validated\n    \n    \n      The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF\n    \n    \n      Input Validation Using SpringMVC\n    \n    \n      Input Validation Using Struts 1\n    \n    \n      Input Validation Using Struts 2\n    \n    \n      Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java\n    \n    \n      How to Test for Path Manipulation Bugs in Java\n    \n    \n      How to Test for Double Encoding Bugs in Java\n    \n    \n      How to Test for Client-side Validation Bypass Bugs in Java\n    \n    \n      How to Test for Integer Overflows in Java\n    \n    \n      How to Test for Integer Underflow Bugs in Java\n    \n    \n      How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "li": [
      "JAVA",
      "JSF",
      "Using the required attribute on form elements. For most form elements in JSF, you can simply add the required=\"true\" attribute to ensure that the field has a value when submitted. This is a trivial, but very common, validation and is easy to handle in JSF.\n      <h:inputText value=\"#{myBean.someField}\" required=\"true\"/>",
      "Use built-in validators. This mechanism allows you to add validation directly within the field of the form you are validating using any of the many built-in validators. \n        <h:inputText value=\"#{myBean.someField}\" required=\"true\">    <f:validateLength minimum=\"6\" maximum=\"50\"/></h:inputText>",
      "Use custom method from backing bean to perform validation. This option simply provides you with a mechanism to build out a method that checks the given field and throw a ValidatorException if necessary. This is completely custom code, but JSF does provide a hook to access custom validation methods by using the validator attribute as shown below.\n          <h:inputText value=\"#{myBean.myField}\" validator=\"#{myBean.validateMyField}\" />",
      "Build a custom validator by implementing Validator interface. If you have a validation that could be reusable but does not exist in the standard validations, a custom validator is likely the best option given it's reuse potential. First, you need to build out the validation by creating a class that implements the Validator interface and throws a ValidationException when necessary.\n            javax.faces.validator.Validator....public class MyFieldValidator implements Validator {    public void validate(FacesContext context, UIComponent component, Object value)   throws ValidatorException {\n                    String myField = (String) value;        if(!myField.contains(\"%\")) {            FacesMessage message = new FacesMessage();            message.setSeverity(FacesMessage.SEVERITY_ERROR);            message.setSummary(\"Invalid format.\");            message.setDetail(\"You can't use wildcarding here.\");            context.addMessage(\"myForm:MyField\", message);            throw new ValidatorException(message);        }    }}\n            In order to use a custom validator, you simply register it with JSF by adding something like the below snippet to the faces-config.xml file.\n            <validator> <validator-id>myFieldValidator</validator-id> <validator-class>com.myapp.MyFieldValidator</validator-class></validator>\n            Finally, you would add the validator to a given field in a form similar to how you would use one of the built-in validators.\n            <h:inputText id=\"MyField\" value=\"#{myBean.myField}\"> <f:validator validatorId=\"myFieldValidator\" /></h:inputText>\n            For any of the validation mechanisms listed above, there is a common UI pattern for displaying the error messages back to the user. You can use the h:messages or h:message tag\n            //for displaying all messages<h:messages />\n            //for displaying messages for a single input field<h:message for=\"userName\" />",
      "For more information about input validation in JSF, please see http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf",
      "For more information about data conversion and validation in JSF, please see http://www.ibm.com/developerworks/java/library/j-jsf3/",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "p": [
      "Perform input validation using JSF within an application.",
      "Strong input validation is a powerful control that can prevent various security issues within an application. This article will describe how to use the built-in mechanisms provided by JSF to perform appropriate input validation.",
      "There are several ways to perform input validation using JSF depending on the needed validation.",
      "Using the required attribute on form elements. For most form elements in JSF, you can simply add the required=\"true\" attribute to ensure that the field has a value when submitted. This is a trivial, but very common, validation and is easy to handle in JSF.",
      "Use built-in validators. This mechanism allows you to add validation directly within the field of the form you are validating using any of the many built-in validators.",
      "Use custom method from backing bean to perform validation. This option simply provides you with a mechanism to build out a method that checks the given field and throw a ValidatorException if necessary. This is completely custom code, but JSF does provide a hook to access custom validation methods by using the validator attribute as shown below.",
      "Build a custom validator by implementing Validator interface. If you have a validation that could be reusable but does not exist in the standard validations, a custom validator is likely the best option given it's reuse potential. First, you need to build out the validation by creating a class that implements the Validator interface and throws a ValidationException when necessary.",
      "In order to use a custom validator, you simply register it with JSF by adding something like the below snippet to the faces-config.xml file.",
      "Finally, you would add the validator to a given field in a form similar to how you would use one of the built-in validators.",
      "For any of the validation mechanisms listed above, there is a common UI pattern for displaying the error messages back to the user. You can use the h:messages or h:message tag",
      "In conclusion, input validation can function as a strong security control if used properly and applied thoroughly throughout the application. The JSF framework provides several options for accomplishing this task."
    ],
    "ol": [
      "Using the required attribute on form elements. For most form elements in JSF, you can simply add the required=\"true\" attribute to ensure that the field has a value when submitted. This is a trivial, but very common, validation and is easy to handle in JSF.\n      <h:inputText value=\"#{myBean.someField}\" required=\"true\"/>\n      \n        \n          Use built-in validators. This mechanism allows you to add validation directly within the field of the form you are validating using any of the many built-in validators. \n        <h:inputText value=\"#{myBean.someField}\" required=\"true\">    <f:validateLength minimum=\"6\" maximum=\"50\"/></h:inputText>\n        \n          \n            Use custom method from backing bean to perform validation. This option simply provides you with a mechanism to build out a method that checks the given field and throw a ValidatorException if necessary. This is completely custom code, but JSF does provide a hook to access custom validation methods by using the validator attribute as shown below.\n          <h:inputText value=\"#{myBean.myField}\" validator=\"#{myBean.validateMyField}\" />\n          \n            \n              Build a custom validator by implementing Validator interface. If you have a validation that could be reusable but does not exist in the standard validations, a custom validator is likely the best option given it's reuse potential. First, you need to build out the validation by creating a class that implements the Validator interface and throws a ValidationException when necessary.\n            javax.faces.validator.Validator....public class MyFieldValidator implements Validator {    public void validate(FacesContext context, UIComponent component, Object value)   throws ValidatorException {\n                    String myField = (String) value;        if(!myField.contains(\"%\")) {            FacesMessage message = new FacesMessage();            message.setSeverity(FacesMessage.SEVERITY_ERROR);            message.setSummary(\"Invalid format.\");            message.setDetail(\"You can't use wildcarding here.\");            context.addMessage(\"myForm:MyField\", message);            throw new ValidatorException(message);        }    }}\n            In order to use a custom validator, you simply register it with JSF by adding something like the below snippet to the faces-config.xml file.\n            <validator> <validator-id>myFieldValidator</validator-id> <validator-class>com.myapp.MyFieldValidator</validator-class></validator>\n            Finally, you would add the validator to a given field in a form similar to how you would use one of the built-in validators.\n            <h:inputText id=\"MyField\" value=\"#{myBean.myField}\"> <f:validator validatorId=\"myFieldValidator\" /></h:inputText>\n            For any of the validation mechanisms listed above, there is a common UI pattern for displaying the error messages back to the user. You can use the h:messages or h:message tag\n            //for displaying all messages<h:messages />\n            //for displaying messages for a single input field<h:message for=\"userName\" />"
    ],
    "strong": [
      "Using the required attribute on form elements.",
      "Use built-in validators.",
      "Use custom method from backing bean to perform validation.",
      "Build a custom validator by implementing Validator interface."
    ],
    "em": [
      "required=\"true\"",
      "ValidatorException",
      "Validator",
      "Validator",
      "ValidationException",
      "faces-config.xml",
      "h:messages",
      "h:message"
    ],
    "pre": [
      "<h:inputText value=\"#{myBean.someField}\" required=\"true\"/>",
      "<h:inputText value=\"#{myBean.someField}\" required=\"true\">    <f:validateLength minimum=\"6\" maximum=\"50\"/></h:inputText>",
      "<h:inputText value=\"#{myBean.myField}\" validator=\"#{myBean.validateMyField}\" />",
      "javax.faces.validator.Validator....public class MyFieldValidator implements Validator {    public void validate(FacesContext context, UIComponent component, Object value)   throws ValidatorException {",
      "String myField = (String) value;        if(!myField.contains(\"%\")) {            FacesMessage message = new FacesMessage();            message.setSeverity(FacesMessage.SEVERITY_ERROR);            message.setSummary(\"Invalid format.\");            message.setDetail(\"You can't use wildcarding here.\");            context.addMessage(\"myForm:MyField\", message);            throw new ValidatorException(message);        }    }}",
      "<validator> <validator-id>myFieldValidator</validator-id> <validator-class>com.myapp.MyFieldValidator</validator-class></validator>",
      "<h:inputText id=\"MyField\" value=\"#{myBean.myField}\"> <f:validator validatorId=\"myFieldValidator\" /></h:inputText>",
      "//for displaying all messages<h:messages />",
      "//for displaying messages for a single input field<h:message for=\"userName\" />"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf",
      "http://www.ibm.com/developerworks/java/library/j-jsf3/",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf",
      "text": "http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf"
    },
    {
      "href": "http://www.ibm.com/developerworks/java/library/j-jsf3/",
      "text": "http://www.ibm.com/developerworks/java/library/j-jsf3/"
    },
    {
      "href": "/article/b531d29c-86f7-4812-90ce-5f3f0f780aba",
      "text": "Validate Input from All Sources"
    },
    {
      "href": "/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d",
      "text": "Validate Input for Length, Range, Format, and Type"
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "\n        Validate All Input Passed to the Database\n      "
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "Validate All Input Passed to the Database"
    },
    {
      "href": "/article/a5491c44-164b-4046-94d3-b575b9745e8b",
      "text": "Filter All User-Supplied Filename and Path Input"
    },
    {
      "href": "/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8",
      "text": "Do Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/7f8deb21-cd52-41be-80b4-8897612021dc",
      "text": "Input from All Sources Is Validated"
    },
    {
      "href": "/article/61869793-2c10-40c0-b82a-babcc0312697",
      "text": "Input Is Validated for Length, Range, Format and Type"
    },
    {
      "href": "/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0",
      "text": "All Database Input Is Validated"
    },
    {
      "href": "/article/17884af0-fc83-412a-b613-4def4a6f84ad",
      "text": "User-Supplied Filenames and Paths Are Validated"
    },
    {
      "href": "/article/b1803c35-9579-4a38-9a63-30202160ef25",
      "text": "The Application Does Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/0f49430b-2abe-408f-b046-89fa739f5d53",
      "text": "Input Validation Using JSF"
    },
    {
      "href": "/article/18ac74df-602b-4a58-8998-52f638f3a045",
      "text": "Input Validation Using SpringMVC"
    },
    {
      "href": "/article/d124abb1-e230-43ef-8762-1caa0dbb89ca",
      "text": "Input Validation Using Struts 1"
    },
    {
      "href": "/article/2f917654-65a8-49c9-b000-c17f9765bf42",
      "text": "Input Validation Using Struts 2"
    },
    {
      "href": "/article/38342130-4e4b-47df-afd9-c7e8c86f77ee",
      "text": "Use ESAPI Executor"
    },
    {
      "href": "/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4",
      "text": "How to Test for Server-Side Code Injection in Java"
    },
    {
      "href": "/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0",
      "text": "How to Test for Path Manipulation Bugs in Java"
    },
    {
      "href": "/article/5c99da7b-b4eb-4315-b48c-ac2598c13144",
      "text": "How to Test for Double Encoding Bugs in Java"
    },
    {
      "href": "/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f",
      "text": "How to Test for Client-side Validation Bypass Bugs in Java"
    },
    {
      "href": "/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1",
      "text": "How to Test for Integer Overflows in Java"
    },
    {
      "href": "/article/ed20009a-59ef-415d-8e72-0ff3221a1346",
      "text": "How to Test for Integer Underflow Bugs in Java"
    },
    {
      "href": "/article/d7682043-0095-4700-97dd-01ce797c4ada",
      "text": "How to Test for Deserialization of Untrusted Data Bugs in Java"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>JAVA<li>JSF</li></li>\n  </ul>\n  <h1>Summary</h1>\n  <p>Perform input validation using JSF within an application.</p>\n  <h1>Objectives</h1>\n  <p>Strong input validation is a powerful control that can prevent various security issues within an application. This article will describe how to use the built-in mechanisms provided by JSF to perform appropriate input validation.</p>\n  <h1>Solution Examples</h1>\n  <p>There are several ways to perform input validation using JSF depending on the needed validation. </p>\n  <ol>\n    <li>\n      <p>\n        <strong>Using the required attribute on form elements.</strong> For most form elements in JSF, you can simply add the <em>required=\"true\"</em> attribute to ensure that the field has a value when submitted. This is a trivial, but very common, validation and is easy to handle in JSF.</p>\n      <pre>&lt;h:inputText value=\"#&#123;myBean.someField&#125;\" required=\"true\"/&gt;</pre>\n      <li>\n        <p>\n          <strong>Use built-in validators.</strong> This mechanism allows you to add validation directly within the field of the form you are validating using any of the many built-in validators. </p>\n        <pre>&lt;h:inputText value=\"#&#123;myBean.someField&#125;\" required=\"true\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;f:validateLength minimum=\"6\" maximum=\"50\"/&gt;<br />&lt;/h:inputText&gt;</pre>\n        <li>\n          <p>\n            <strong>Use custom method from backing bean to perform validation.</strong> This option simply provides you with a mechanism to build out a method that checks the given field and throw a <em>ValidatorException</em> if necessary. This is completely custom code, but JSF does provide a hook to access custom validation methods by using the validator attribute as shown below.</p>\n          <pre>&lt;h:inputText value=\"#&#123;myBean.myField&#125;\" validator=\"#&#123;myBean.validateMyField&#125;\" /&gt;</pre>\n          <li>\n            <p>\n              <strong>Build a custom validator by implementing <em>Validator</em> interface.</strong> If you have a validation that could be reusable but does not exist in the standard validations, a custom validator is likely the best option given it's reuse potential. First, you need to build out the validation by creating a class that implements the <em>Validator</em> interface and throws a <em>ValidationException</em> when necessary.</p>\n            <pre>javax.faces.validator.Validator<br />....<br />public class MyFieldValidator implements Validator &#123;<br />&nbsp;&nbsp;&nbsp; public void validate(FacesContext context, UIComponent component, Object value)<br />&nbsp;&nbsp;&nbsp;throws ValidatorException &#123;</pre>\n            <pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String myField = (String) value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(&#33;myField.contains(\"&#37;\")) &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesMessage message = new FacesMessage();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message.setSeverity(FacesMessage.SEVERITY_ERROR);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message.setSummary(\"Invalid format.\");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message.setDetail(\"You can't use wildcarding here.\");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.addMessage(\"myForm:MyField\", message);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ValidatorException(message);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp; &#125;<br />&#125;</pre>\n            <p>In order to use a custom validator, you simply register it with JSF by adding something like the below snippet to the <em>faces-config.xml</em> file.</p>\n            <pre>&lt;validator&gt;<br />&nbsp;&lt;validator-id&gt;myFieldValidator&lt;/validator-id&gt;<br />&nbsp;&lt;validator-class&gt;com.myapp.MyFieldValidator&lt;/validator-class&gt;<br />&lt;/validator&gt;</pre>\n            <p>Finally, you would add the validator to a given field in a form similar to how you would use one of the built-in validators.</p>\n            <pre>&lt;h:inputText id=\"MyField\" value=\"#&#123;myBean.myField&#125;\"&gt;<br />&nbsp;&lt;f:validator validatorId=\"myFieldValidator\" /&gt;<br />&lt;/h:inputText&gt;</pre>\n            <p>For any of the validation mechanisms listed above, there is a common UI pattern for displaying the error messages back to the user. You can use the <em>h:messages</em> or <em>h:message</em> tag</p>\n            <pre>//for displaying all messages<br />&lt;h:messages /&gt;</pre>\n            <pre>//for displaying messages for a single input field<br />&lt;h:message for=\"userName\" /&gt;</pre>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <p>In conclusion, input validation can function as a strong security control if used properly and applied thoroughly throughout the application. The JSF framework provides several options for accomplishing this task.</p>\n  <h1>More Information</h1>\n  <ul>\n    <li>For more information about input validation in JSF, please see <a href=\"http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf\">http://courses.coreservlets.com/Course-Materials/pdf/jsf/08-Validation.pdf</a><li>For more information about&nbsp;data conversion and validation in JSF, please see&nbsp;<a href=\"http://www.ibm.com/developerworks/java/library/j-jsf3/\">http://www.ibm.com/developerworks/java/library/j-jsf3/</a></li></li>\n  </ul>\n  <h1>Input and Data Validation Guidelines</h1>\n  <ul>\n    <li>\n      <a href=\"/article/b531d29c-86f7-4812-90ce-5f3f0f780aba\">Validate Input from All Sources</a>\n    </li>\n    <li>\n      <a href=\"/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d\">Validate Input for Length, Range, Format, and Type</a>\n    </li>\n    <li>\n      <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">\n        <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">Validate All Input Passed to the Database</a>\n      </a>\n    </li>\n    <li>\n      <a href=\"/article/a5491c44-164b-4046-94d3-b575b9745e8b\">Filter All User-Supplied Filename and Path Input</a>\n    </li>\n    <li>\n      <a href=\"/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8\">Do Not Rely on Client-Side Validation</a>\n    </li>\n  </ul>\n  <h1>Input and Data Validation Checklists</h1>\n  <ul>\n    <li>\n      <a href=\"/article/7f8deb21-cd52-41be-80b4-8897612021dc\">Input from All Sources Is Validated</a>\n    </li>\n    <li>\n      <a href=\"/article/61869793-2c10-40c0-b82a-babcc0312697\">Input Is Validated for Length, Range, Format and Type</a>\n    </li>\n    <li>\n      <a href=\"/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0\">All Database Input Is Validated</a>\n    </li>\n    <li>\n      <a href=\"/article/17884af0-fc83-412a-b613-4def4a6f84ad\">User-Supplied Filenames and Paths Are Validated</a>\n    </li>\n    <li>\n      <a href=\"/article/b1803c35-9579-4a38-9a63-30202160ef25\">The Application Does Not Rely on Client-Side Validation</a>\n    </li>\n  </ul>\n  <h1>Input and Data Validation Code Examples</h1>\n  <ul>\n    <li>\n      <a href=\"/article/0f49430b-2abe-408f-b046-89fa739f5d53\">Input Validation Using JSF</a>\n    </li>\n    <li>\n      <a href=\"/article/18ac74df-602b-4a58-8998-52f638f3a045\">Input Validation Using SpringMVC</a>\n    </li>\n    <li>\n      <a href=\"/article/d124abb1-e230-43ef-8762-1caa0dbb89ca\">Input Validation Using Struts 1</a>\n    </li>\n    <li>\n      <a href=\"/article/2f917654-65a8-49c9-b000-c17f9765bf42\">Input Validation Using Struts 2</a>\n    </li>\n    <li>\n      <a href=\"/article/38342130-4e4b-47df-afd9-c7e8c86f77ee\">Use ESAPI Executor</a>\n    </li>\n  </ul>\n  <h1>Input and Data Validation Testing</h1>\n  <ul>\n    <li>\n      <a href=\"/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4\">How to Test for Server-Side Code Injection in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0\">How to Test for Path Manipulation Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/5c99da7b-b4eb-4315-b48c-ac2598c13144\">How to Test for Double Encoding Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f\">How to Test for Client-side Validation Bypass Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1\">How to Test for Integer Overflows in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/ed20009a-59ef-415d-8e72-0ff3221a1346\">How to Test for Integer Underflow Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/d7682043-0095-4700-97dd-01ce797c4ada\">How to Test for Deserialization of Untrusted Data Bugs in Java</a>\n    </li>\n  </ul>"
}