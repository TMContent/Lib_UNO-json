{
  "id": "0222317d-61d3-4b11-955e-247bb66eb50a",
  "checksum": "57cef41cbbb2d9648e6dfafbbb70ab630521e6d8",
  "words": {
    "description": [
      "h1"
    ],
    "null": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "pointer": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "dereference": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p"
    ],
    "occur": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "h1"
    ],
    "attempts": [
      "p",
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "object": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "reference": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "value": [
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p"
    ],
    "valid": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "checks": [
      "p"
    ],
    "pointers": [
      "p"
    ],
    "references": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "for": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "before": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a"
    ],
    "using": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "them": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "won't": [
      "p"
    ],
    "issues": [
      "p"
    ],
    "affect": [
      "p"
    ],
    "all": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "impact": [
      "h1",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "managed": [
      "p"
    ],
    "languages": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p"
    ],
    "denial": [
      "p"
    ],
    "service": [
      "p"
    ],
    "will": [
      "p"
    ],
    "throw": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "exception": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "usually": [
      "p",
      "p"
    ],
    "crash": [
      "p",
      "p"
    ],
    "some": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "might": [
      "p"
    ],
    "not": [
      "p"
    ],
    "even": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "p"
    ],
    "check": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "h1",
      "p"
    ],
    "passed": [
      "p"
    ],
    "argument": [
      "p"
    ],
    "function": [
      "p",
      "p",
      "p"
    ],
    "-": [
      "p"
    ],
    "such": [
      "p"
    ],
    "situations": [
      "p"
    ],
    "best": [
      "p"
    ],
    "these": [
      "p"
    ],
    "very": [
      "p"
    ],
    "beginning": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "return": [
      "p"
    ],
    "error": [
      "p"
    ],
    "detected": [
      "p"
    ],
    "adequate": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "against": [
      "p"
    ],
    "this": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "checked": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "definitions": [
      "p"
    ],
    "at": [
      "p"
    ],
    "least": [
      "p"
    ],
    "used": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "being": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check"
    ],
    "p": [
      "Null pointer dereference vulnerabilities occur when the application attempts to use a pointer (object reference) that has a null value as if it has a valid value. If application code checks pointers (object references) for null before using them, null pointer dereference vulnerabilities won't occur.",
      "Null pointer dereference issues affect all applications.",
      "The impact of null dereference in managed languages is denial of service. The application will throw an exception and usually crash when it attempts to dereference a null pointer. In some cases, the application might not even crash.",
      "To prevent null dereference vulnerabilities, check object references for null before using them. Usually, an object reference is passed as an argument to a function - in such situations, it is best to check these object references for null in the very beginning of the function and throw an exception or return an error code if a null value is detected.",
      "To check for adequate protection against this vulnerability, make sure that object references are checked for null in the beginning of function definitions or at least before the object references are used."
    ],
    "ul": [
      "Check Object References for Null Before Using Them",
      "Object References Are Checked for Null Before Being Used"
    ],
    "li": [
      "Check Object References for Null Before Using Them",
      "Object References Are Checked for Null Before Being Used"
    ],
    "a": [
      "Check Object References for Null Before Using Them",
      "Object References Are Checked for Null Before Being Used"
    ]
  },
  "links": [
    {
      "href": "92f27c14-6962-4366-875f-101e6ab68230",
      "text": "Check Object References for Null Before Using Them"
    },
    {
      "href": "54335321-0b6a-4d2e-8ee3-594ecf8c00cf",
      "text": "Object References Are Checked for Null Before Being Used"
    }
  ],
  "html": "<h1>Description</h1><p>Null pointer dereference vulnerabilities occur when the application attempts to use a pointer (object reference) that has a null value as if it has a valid value. If application code checks pointers (object references) for null before using them, null pointer dereference vulnerabilities won't occur. \n</p><p>\nNull pointer dereference issues affect all applications.\n</p><h1>Impact</h1><p>The impact of null dereference in managed languages is denial of service. The application will throw an exception and usually crash when it attempts to dereference a null pointer. In some cases, the application might not even crash.\n</p><h1>Countermeasures</h1><p>To prevent null dereference vulnerabilities, check object references for null before using them. Usually, an object reference is passed as an argument to a function - in such situations, it is best to check these object references for null in the very beginning of the function and throw an exception or return an error code if a null value is detected. \n</p><ul>\n<li> <a href=\"92f27c14-6962-4366-875f-101e6ab68230\">Check Object References for Null Before Using Them</a></li>\n</ul><h1>Application Check</h1><p>To check for adequate protection against this vulnerability, make sure that object references are checked for null in the beginning of function definitions or at least before the object references are used.\n</p><ul>\n<li> <a href=\"54335321-0b6a-4d2e-8ee3-594ecf8c00cf\">Object References Are Checked for Null Before Being Used</a></li></ul>"
}