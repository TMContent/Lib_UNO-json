{
  "id": "bcf8adb4-8186-4b97-b490-4fa33f506bfd",
  "checksum": "481e2e078c4ac8fe3d940997fe0ed6d0e15e66b9",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "title"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "written": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "servlets": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li"
    ],
    "jsp": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "limit": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "access": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "title"
    ],
    "credential": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "title"
    ],
    "store": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "title"
    ],
    "why": [
      "h1"
    ],
    "unauthorized": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "lead": [
      "p"
    ],
    "users'": [
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "being": [
      "p"
    ],
    "overwritten": [
      "p"
    ],
    "thereby": [
      "p"
    ],
    "allowing": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "gain": [
      "p"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p"
    ],
    "resources": [
      "p"
    ],
    "without": [
      "p"
    ],
    "obtaining": [
      "p"
    ],
    "valid": [
      "p",
      "pre",
      "pre"
    ],
    "prior": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "any": [
      "p"
    ],
    "time": [
      "p"
    ],
    "you": [
      "p"
    ],
    "have": [
      "p"
    ],
    "an applicatiom": [
      "p"
    ],
    "that uses": [
      "p"
    ],
    "one": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "follow": [
      "p"
    ],
    "these": [
      "p"
    ],
    "steps": [
      "p",
      "pre",
      "pre"
    ],
    "avoid": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "disclosing": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "location": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "not": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre"
    ],
    "disclose": [
      "ol",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "let regular": [
      "ol",
      "li",
      "p"
    ],
    "users": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "know": [
      "ol",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "located": [
      "ol",
      "li",
      "p"
    ],
    "secure": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "required": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "for": [
      "ol",
      "li",
      "p",
      "strong",
      "pre"
    ],
    "accessing": [
      "ol",
      "li",
      "p",
      "strong",
      "pre"
    ],
    "a": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "configuration": [
      "ol",
      "li",
      "p"
    ],
    "file": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "and": [
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encrypt": [
      "ol",
      "li",
      "p"
    ],
    "them": [
      "ol",
      "li",
      "p"
    ],
    "place": [
      "ol",
      "li",
      "p"
    ],
    "encryption": [
      "ol",
      "li",
      "p"
    ],
    "key": [
      "ol",
      "li",
      "p"
    ],
    "keystore": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "encrypted": [
      "ol",
      "li",
      "p"
    ],
    "local": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "account": [
      "ol",
      "li",
      "p"
    ],
    "password": [
      "ol",
      "li",
      "p"
    ],
    "restrict": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "repository": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "number": [
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "system": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "li",
      "p"
    ],
    "appropriate": [
      "ol",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "permissions": [
      "ol",
      "li",
      "p"
    ],
    "read/write": [
      "ol",
      "li",
      "p"
    ],
    "database": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "accounts": [
      "ol",
      "li",
      "p"
    ],
    "server": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "following": [
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "authenticates": [
      "p",
      "p"
    ],
    "user": [
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "based": [
      "p",
      "p"
    ],
    "their": [
      "p",
      "p"
    ],
    "because": [
      "p"
    ],
    "discloses": [
      "p",
      "pre"
    ],
    "anybody": [
      "p"
    ],
    "with": [
      "p"
    ],
    "also": [
      "p"
    ],
    "has": [
      "p"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "boolean": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "validateuserstring": [
      "pre",
      "pre"
    ],
    "char]": [
      "pre",
      "pre"
    ],
    "pass{": [
      "pre",
      "pre"
    ],
    "connection": [
      "pre"
    ],
    "cn": [
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "prepare": [
      "pre",
      "pre"
    ],
    "before": [
      "pre",
      "pre"
    ],
    "querying": [
      "pre",
      "pre"
    ],
    "..": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "try": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "necessary": [
      "pre"
    ],
    "drivermanagerregisterdriver(new": [
      "pre"
    ],
    "oraclejdbc.driver.oracledriver());": [
      "pre"
    ],
    "=": [
      "pre",
      "pre"
    ],
    "drivermanagergetconnection(\"jdbc:oracle:thin:@testbox:1521:orcl2\",": [
      "pre"
    ],
    "\"myapp\"": [
      "pre"
    ],
    "\"pass\";": [
      "pre"
    ],
    "query": [
      "pre",
      "pre"
    ],
    "perform": [
      "pre",
      "pre"
    ],
    "rest": [
      "pre",
      "pre"
    ],
    "authentication": [
      "pre",
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "catch": [
      "pre",
      "pre"
    ],
    "sqlexception": [
      "pre",
      "pre"
    ],
    "se": [
      "pre",
      "pre"
    ],
    "add": [
      "pre",
      "pre"
    ],
    "logging": [
      "pre",
      "pre"
    ],
    "exception": [
      "pre",
      "pre"
    ],
    "handling": [
      "pre",
      "pre"
    ],
    "mechanisms": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "false": [
      "pre",
      "pre"
    ],
    "valid}": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "relies": [
      "p"
    ],
    "other": [
      "p"
    ],
    "parts": [
      "p"
    ],
    "handle": [
      "p"
    ],
    "connectivity": [
      "p"
    ],
    "therefore": [
      "p"
    ],
    "does": [
      "p"
    ],
    "reveal": [
      "p"
    ],
    "application's": [
      "p",
      "pre"
    ],
    "are": [
      "pre"
    ],
    "hard-coded": [
      "pre"
    ],
    "in": [
      "pre"
    ],
    "routine": [
      "pre"
    ],
    "myappgetdbconnection();": [
      "pre"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "ul": [
      "Applications written using Servlets or JSP."
    ],
    "li": [
      "Applications written using Servlets or JSP.",
      "Avoid disclosing the location of the store. Do not disclose the location of the store within your application. Do not let regular application users know where the store is located.",
      "Secure credentials required for accessing the store. Store your credentials within a configuration file and encrypt them. Place the encryption key within a keystore that is encrypted using a local account password.",
      "Restrict access to repository. Limit the number of users that can access the store. If it is a file on the local file system, set the appropriate permissions to restrict the read/write access. If it is a database, restrict the accounts that can access the database server."
    ],
    "p": [
      "Limit the access to the credential store.",
      "Unauthorized access to the credential store can lead to users' credentials being overwritten, thereby allowing the attacker to gain access to application resources without obtaining valid credentials prior to the attack.",
      "Limit access to the credential store any time you have an applicatiom that uses one.",
      "Follow these steps to limit the access to the credential store:",
      "Avoid disclosing the location of the store. Do not disclose the location of the store within your application. Do not let regular application users know where the store is located.",
      "Secure credentials required for accessing the store. Store your credentials within a configuration file and encrypt them. Place the encryption key within a keystore that is encrypted using a local account password.",
      "Restrict access to repository. Limit the number of users that can access the store. If it is a file on the local file system, set the appropriate permissions to restrict the read/write access. If it is a database, restrict the accounts that can access the database server.",
      "The following code authenticates a user based on their credentials. Because the code discloses the credentials to the user database, anybody with access to the code also has access to the credential store.",
      "The following code authenticates a user based on their credentials. The code relies on other parts of the application to handle database connectivity. Therefore, the code does not reveal the application's credentials to the credential store."
    ],
    "ol": [
      "Avoid disclosing the location of the store. Do not disclose the location of the store within your application. Do not let regular application users know where the store is located. \r\n    \r\n    \r\n      \r\n        Secure credentials required for accessing the store. Store your credentials within a configuration file and encrypt them. Place the encryption key within a keystore that is encrypted using a local account password.\r\n    \r\n    \r\n      \r\n        Restrict access to repository. Limit the number of users that can access the store. If it is a file on the local file system, set the appropriate permissions to restrict the read/write access. If it is a database, restrict the accounts that can access the database server."
    ],
    "strong": [
      "Avoid disclosing the location of the store.",
      "Secure credentials required for accessing the store.",
      "Restrict access to repository."
    ],
    "pre": [
      "public boolean validateUser(String user, char[] pass){      boolean valid;      Connection cn;      // Prepare credentials before querying the credential store      ...      try      {            // The application discloses the credentials necessary for            // accessing the user database            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());            cn = DriverManager.getConnection(\"jdbc:oracle:thin:@testbox:1521:orcl2\",                                             \"myapp\", \"pass\");            // Query the credential store and perform the rest            // of the authentication steps            ...      }      catch (SQLException se)      {            // Add the appropriate logging and exception handling mechanisms            return false;      }      return valid;}",
      "public boolean validateUser(String user, char[] pass){      boolean valid;      // Prepare credentials before querying the credential store      ...      try      {            // The credentials to the application's user database            // are not hard-coded in the authentication routine            cn = MyApp.getDBConnection();            // Query the credential store and perform the rest            // of the authentication steps            ...      }      catch (SQLException se)      {            // Add the appropriate logging and exception handling mechanisms            return false;      }      return valid;}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Limit the access to the credential store.</p>\r\n  <h1>Why</h1>\r\n  <p>Unauthorized access to the credential store can lead to users' credentials being overwritten, thereby allowing the attacker to gain access to application resources without obtaining valid credentials prior to the attack.</p>\r\n  <h1>When</h1>\r\n  <p>Limit access to the credential store any time you have an&nbsp;applicatiom that&nbsp;uses one.</p>\r\n  <h1>How</h1>\r\n  <p>Follow these steps to limit the access to the credential store: </p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Avoid disclosing the location of the store. </strong>Do not disclose the location of the store within your application. Do not let&nbsp;regular application users know where the store is located. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Secure credentials required for accessing the store. </strong>Store your credentials within a configuration file and encrypt them. Place the encryption key within a keystore that is encrypted using a local account password.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Restrict access to repository. </strong>Limit the number of users that can access the store. If it is a file on the local file system, set the appropriate permissions to restrict the read/write access. If it is a database, restrict the accounts that can access the database server.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code authenticates a user based on their credentials. Because the code discloses the credentials to the user database, anybody with access to the code also has access to the credential store. </p>\r\n  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      boolean valid;<br />      Connection cn;<br /><br />      // Prepare credentials before querying the credential store<br />      ...<br />      try<br />      {<br />            // The application discloses the credentials necessary for<br />            // accessing the user database<br />            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());<br />            cn = DriverManager.getConnection(\"jdbc:oracle:thin:@testbox:1521:orcl2\",<br />                                             \"myapp\", \"pass\");<br />            // Query the credential store and perform the rest<br />            // of the authentication steps<br />            ...<br />      }<br />      catch (SQLException se)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br /><br />      return valid;<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code authenticates a user based on their credentials. The code relies on other parts of the application to handle database connectivity. Therefore, the code does not reveal the application's credentials to the credential store. </p>\r\n  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      boolean valid;<br />      // Prepare credentials before querying the credential store<br />      ...<br />      try<br />      {<br />            // The credentials to the application's user database<br />            // are not hard-coded in the authentication routine<br />            cn = MyApp.getDBConnection();<br />            // Query the credential store and perform the rest<br />            // of the authentication steps<br />            ...<br />      }<br />      catch (SQLException se)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />      return valid;<br />}</pre>\r\n  <br />"
}