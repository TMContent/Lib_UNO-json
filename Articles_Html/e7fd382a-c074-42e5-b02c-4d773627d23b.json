{
  "id": "e7fd382a-c074-42e5-b02c-4d773627d23b",
  "checksum": "49bf3cede59e205443d947edc34606e17023caca",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "c++": [
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "don't": [
      "p",
      "title"
    ],
    "use": [
      "p",
      "p",
      "title"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "format": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "strings": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "stream": [
      "p"
    ],
    "functions": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "avoid": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "using": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "formatted": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "input-output": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "if": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "re-)write": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "code": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "guarantee": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "never": [
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "can": [
      "p"
    ],
    "control": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "contents": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "string": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "may": [
      "p"
    ],
    "be": [
      "p"
    ],
    "able": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "when": [
      "h1",
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "actions": [
      "p"
    ],
    "assure": [
      "p"
    ],
    "not": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "uses formatted": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "list": [
      "ol",
      "li",
      "p"
    ],
    "sprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "_snprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "printf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "fprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "scanf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "fscanfsscanfswprintf": [
      "ol",
      "li",
      "ul"
    ],
    "wsprintfa": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "wsprintfw": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vsprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vswprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "_snwprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "_vsnprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "_vsnwprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vwprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vfprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "vwfprintf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "fwscanf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "wscanf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "swscanf": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "consider": [
      "ol",
      "li",
      "p"
    ],
    "replacing": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "p"
    ],
    "iostream": [
      "ol",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "li",
      "p"
    ],
    "prone": [
      "ol",
      "li",
      "p"
    ],
    "vulnerabilities": [
      "ol",
      "li",
      "p"
    ],
    "exclude": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "from": [
      "ol",
      "li",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "place": [
      "ol",
      "li",
      "p"
    ],
    "separate": [
      "ol",
      "li",
      "p"
    ],
    "variables": [
      "ol",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "li",
      "p"
    ],
    "pass": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "as": [
      "ol",
      "li",
      "p"
    ],
    "variadic": [
      "ol",
      "li",
      "p"
    ],
    "arguments": [
      "ol",
      "li",
      "p"
    ],
    "instead": [
      "ol",
      "li",
      "p"
    ],
    "placing": [
      "ol",
      "li",
      "p"
    ],
    "fscanf": [
      "li"
    ],
    "sscanf": [
      "li"
    ],
    "swprintf": [
      "li"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "for": [
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "excluding": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see https//www.securecoding.cert.org/confluence/display/cplusplus/fio30-cpp.+exclude+user+input+from+format+strings": [
      "ul",
      "li"
    ],
    "https//www.securecoding.cert.org/confluence/display/cplusplus/fio30-cpp.+exclude+user+input+from+format+strings": [
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Additional Resources"
    ],
    "ul": [
      "C++",
      "sprintf _snprintf printf fprintf scanf  fscanfsscanfswprintf wsprintfA wsprintfW vsprintf vswprintf _snwprintf _vsnprintf _vsnwprintf vprintf vwprintf vfprintf vwfprintf fwscanf wscanf swscanf",
      "For more information about excluding user input from format strings, please see https://www.securecoding.cert.org/confluence/display/cplusplus/FIO30-CPP.+Exclude+user+input+from+format+strings"
    ],
    "li": [
      "C++",
      "Identify code that uses formatted input-output functions. The following is a list of formatted input-output functions:\n      \n        sprintf _snprintf printf fprintf scanf  fscanfsscanfswprintf wsprintfA wsprintfW vsprintf vswprintf _snwprintf _vsnprintf _vsnwprintf vprintf vwprintf vfprintf vwfprintf fwscanf wscanf swscanf",
      "sprintf",
      "_snprintf",
      "printf",
      "fprintf",
      "scanf",
      "fscanf",
      "sscanf",
      "swprintf",
      "wsprintfA",
      "wsprintfW",
      "vsprintf",
      "vswprintf",
      "_snwprintf",
      "_vsnprintf",
      "_vsnwprintf",
      "vprintf",
      "vwprintf",
      "vfprintf",
      "vwfprintf",
      "fwscanf",
      "wscanf",
      "swscanf",
      "Avoid using formatted functions. Consider replacing formatted input-output functions with iostream C++ functions, which are not prone to format string vulnerabilities.",
      "(Re-)Write code to exclude user input from format strings. Place user input in separate variables and pass it as variadic arguments to the formatted input-output functions, instead of placing it in a format strings.",
      "For more information about excluding user input from format strings, please see https://www.securecoding.cert.org/confluence/display/cplusplus/FIO30-CPP.+Exclude+user+input+from+format+strings"
    ],
    "p": [
      "Don't use user input in format strings. Use C++ stream functions to avoid using formatted input-output functions, if possible. (Re-)Write code to guarantee that user input is never used in format strings.",
      "An attacker that can control the contents of a format string may be able to execute arbitrary code.",
      "Avoid using user input in format strings when using formatted input-output functions.",
      "Perform the following actions to assure that user input is not used in format strings:",
      "Identify code that uses formatted input-output functions. The following is a list of formatted input-output functions:",
      "Avoid using formatted functions. Consider replacing formatted input-output functions with iostream C++ functions, which are not prone to format string vulnerabilities.",
      "(Re-)Write code to exclude user input from format strings. Place user input in separate variables and pass it as variadic arguments to the formatted input-output functions, instead of placing it in a format strings."
    ],
    "ol": [
      "Identify code that uses formatted input-output functions. The following is a list of formatted input-output functions:\n      \n        sprintf _snprintf printf fprintf scanf  fscanfsscanfswprintf wsprintfA wsprintfW vsprintf vswprintf _snwprintf _vsnprintf _vsnwprintf vprintf vwprintf vfprintf vwfprintf fwscanf wscanf swscanf\n      \n      \n        \n          Avoid using formatted functions. Consider replacing formatted input-output functions with iostream C++ functions, which are not prone to format string vulnerabilities.\n        \n          \n            (Re-)Write code to exclude user input from format strings. Place user input in separate variables and pass it as variadic arguments to the formatted input-output functions, instead of placing it in a format strings."
    ],
    "strong": [
      "Identify code that uses formatted input-output functions.",
      "Avoid using formatted functions.",
      "(Re-)Write code to exclude user input from format strings."
    ],
    "a": [
      "https://www.securecoding.cert.org/confluence/display/cplusplus/FIO30-CPP.+Exclude+user+input+from+format+strings"
    ]
  },
  "links": [
    {
      "href": "https://www.securecoding.cert.org/confluence/display/cplusplus/FIO30-CPP.+Exclude+user+input+from+format+strings",
      "text": "https://www.securecoding.cert.org/confluence/display/cplusplus/FIO30-CPP.+Exclude+user+input+from+format+strings"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Don't use user input in format strings. Use C&#43;&#43; stream functions to avoid using formatted input-output functions, if possible. (Re-)Write code to guarantee that user input is never used in format strings.</p>\n  <h1>Why</h1>\n  <p>An attacker that can control the contents of a format string may be able to execute arbitrary code.</p>\n  <h1>When</h1>\n  <p>Avoid using user input in format strings when using formatted input-output functions.</p>\n  <h1>How</h1>\n  <p>Perform the following actions to assure that user input is not used in format strings:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify code that uses&nbsp;formatted input-output functions.</strong> The following is a list of formatted input-output functions:</p>\n      <ul>\n        <li>sprintf <li>_snprintf <li>printf <li>fprintf <li>scanf&nbsp; <li>fscanf<li>sscanf<li>swprintf <li>wsprintfA <li>wsprintfW <li>vsprintf <li>vswprintf <li>_snwprintf <li>_vsnprintf <li>_vsnwprintf <li>vprintf <li>vwprintf <li>vfprintf <li>vwfprintf <li>fwscanf <li>wscanf <li>swscanf</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li>\n      </ul>\n      <li>\n        <p>\n          <strong>Avoid using formatted functions.</strong> Consider replacing formatted input-output functions with iostream C&#43;&#43; functions, which are not prone to format string vulnerabilities.</p>\n        <li>\n          <p>\n            <strong>(Re-)Write code to exclude user input from format strings.</strong> Place user input in separate variables and pass it as variadic arguments to the formatted input-output functions, instead of placing it in a format strings.</p>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information about excluding user input from format strings, please see&nbsp;<a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/FIO30-CPP.&#43;Exclude&#43;user&#43;input&#43;from&#43;format&#43;strings\">https://www.securecoding.cert.org/confluence/display/cplusplus/FIO30-CPP.&#43;Exclude&#43;user&#43;input&#43;from&#43;format&#43;strings</a></li>\n  </ul>"
}