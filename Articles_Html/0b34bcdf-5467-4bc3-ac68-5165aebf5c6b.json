{
  "id": "0b34bcdf-5467-4bc3-ac68-5165aebf5c6b",
  "checksum": "296ad1d6e12f0ae1f2cca922f96395b87f5a6ad9",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "h1",
      "p",
      "h1",
      "p",
      "p"
    ],
    "c++": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "ul",
      "li"
    ],
    "verify": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p"
    ],
    "c-style": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "casts": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "not": [
      "p",
      "title"
    ],
    "used": [
      "p",
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "supports": [
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "introduces": [
      "p"
    ],
    "its": [
      "p"
    ],
    "own": [
      "p"
    ],
    "safer": [
      "p",
      "p"
    ],
    "type-casts": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p"
    ],
    "new": [
      "p"
    ],
    "style": [
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p"
    ],
    "because": [
      "p",
      "p"
    ],
    "they": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "compiler": [
      "p"
    ],
    "better": [
      "p"
    ],
    "detect": [
      "p"
    ],
    "dangerous": [
      "p"
    ],
    "casting": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "examine": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "it": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "when": [
      "p"
    ],
    "type-casting": [
      "p",
      "ul",
      "li"
    ],
    "is": [
      "p"
    ],
    "fix": [
      "h1"
    ],
    "change": [
      "p"
    ],
    "instead": [
      "p"
    ],
    "of": [
      "p"
    ],
    "there": [
      "p"
    ],
    "several": [
      "p"
    ],
    "type-cast": [
      "p"
    ],
    "options": [
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "static_casttype>(object)const_cast<type>(object)dynamic_cast<type>(object)reinterpret_cast<type>(object)": [
      "pre"
    ],
    "most": [
      "p"
    ],
    "situations": [
      "p"
    ],
    "static": [
      "p",
      "p"
    ],
    "dynamic": [
      "p",
      "p",
      "p"
    ],
    "should": [
      "p"
    ],
    "be": [
      "p"
    ],
    "generally": [
      "p"
    ],
    "preferred": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "additional": [
      "p",
      "h1"
    ],
    "checks": [
      "p"
    ],
    "at": [
      "p"
    ],
    "runtime": [
      "p"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "securely": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "https//www.securecoding.cert.org/confluence/display/cplusplus/exp05-cpp.+do+not+use+c-style+casts": [
      "ul",
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "avoid": [
      "ul",
      "li",
      "a"
    ],
    "using": [
      "ul",
      "li",
      "a"
    ],
    "type": [
      "ul",
      "li",
      "a",
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Additional Resources",
      "Related Items"
    ],
    "ul": [
      "C++",
      "For more information about type-casting securely, please see https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts",
      "Avoid Using C-Style Type Casts"
    ],
    "li": [
      "C++",
      "For more information about type-casting securely, please see https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts",
      "Avoid Using C-Style Type Casts"
    ],
    "p": [
      "Verify that C-style casts are not used.",
      "C++ supports C-style casts and introduces its own, safer type-casts. The new C++ style type-casts are safer to use because they allow the compiler to better detect dangerous casting.",
      "Examine code to verify that it uses C++ style casts when type-casting is used.",
      "Change code to use C++ style casts instead of C-style casts. There are several type-cast options in C++:",
      "In most situations, static and dynamic casts should be used. Dynamic casts are generally preferred to static casts, because dynamic casts perform additional checks at runtime."
    ],
    "pre": [
      "static_cast<type>(object)const_cast<type>(object)dynamic_cast<type>(object)reinterpret_cast<type>(object)"
    ],
    "br": [
      "",
      "",
      ""
    ],
    "a": [
      "https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts",
      "Avoid Using C-Style Type Casts"
    ]
  },
  "links": [
    {
      "href": "https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts",
      "text": "https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts"
    },
    {
      "href": "/article/3256ae28-8f3f-4699-92bc-0a07dbbdf7cb",
      "text": "Avoid Using C-Style Type Casts"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that C-style casts are not used.</p>\r\n  <h1>Why</h1>\r\n  <p>C&#43;&#43; supports C-style casts and introduces its own, safer type-casts. The new C&#43;&#43; style type-casts are safer to use because they allow the compiler to better detect dangerous casting.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Examine code to verify that it uses C&#43;&#43; style casts when type-casting is used.</p>\r\n  <h1>How to Fix</h1>\r\n  <p>Change code to use C&#43;&#43; style casts instead of C-style casts. There are several type-cast options in C&#43;&#43;:</p>\r\n  <pre>static_cast&lt;type&gt;(object)<br />const_cast&lt;type&gt;(object)<br />dynamic_cast&lt;type&gt;(object)<br />reinterpret_cast&lt;type&gt;(object)</pre>\r\n  <p>In most situations, static and dynamic casts should be used. Dynamic casts are generally preferred to static casts, because dynamic casts perform additional checks at runtime.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about type-casting securely, please see <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.&#43;Do&#43;not&#43;use&#43;C-style&#43;casts\">https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.&#43;Do&#43;not&#43;use&#43;C-style&#43;casts</a></li>\r\n  </ul>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/3256ae28-8f3f-4699-92bc-0a07dbbdf7cb\">Avoid Using C-Style Type Casts</a>\r\n    </li>\r\n  </ul>"
}