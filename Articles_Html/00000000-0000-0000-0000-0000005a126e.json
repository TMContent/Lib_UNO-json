{
  "id": "00000000-0000-0000-0000-0000005a126e",
  "checksum": "14248321cec1f7ca97a8eff3c139f98f8b6d5a8f",
  "words": {
    "10": [
      "p"
    ],
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "aspnet": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2",
      "ol",
      "li"
    ],
    "ensure": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "all": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "xml": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "syntactically": [
      "p"
    ],
    "validated": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "on": [
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "using": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "pre",
      "title"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "schema": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "such": [
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "xsd": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "dtd": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "p"
    ],
    "why": [
      "h2"
    ],
    "attacker": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "passing": [
      "p"
    ],
    "malicious": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attempt": [
      "p"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "aim": [
      "p"
    ],
    "exploit": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "overwriting": [
      "p"
    ],
    "disclose": [
      "p"
    ],
    "information": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "uris": [
      "p",
      "ol",
      "li"
    ],
    "cause": [
      "p"
    ],
    "parser": [
      "p",
      "ol",
      "li",
      "strong",
      "p",
      "p"
    ],
    "crash": [
      "p"
    ],
    "process": [
      "p"
    ],
    "slowly": [
      "p"
    ],
    "performing": [
      "p",
      "ol",
      "li"
    ],
    "syntactic": [
      "p",
      "p",
      "p"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "helps": [
      "p"
    ],
    "reduce": [
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "risks": [
      "p"
    ],
    "ensuring": [
      "p",
      "p"
    ],
    "received": [
      "p",
      "p"
    ],
    "matches": [
      "p"
    ],
    "expected": [
      "p"
    ],
    "format": [
      "p",
      "p"
    ],
    "its": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "own": [
      "p"
    ],
    "not": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "sufficient": [
      "p"
    ],
    "semantic": [
      "p"
    ],
    "also": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "needed": [
      "p"
    ],
    "fully": [
      "p"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "but": [
      "p",
      "ol",
      "li"
    ],
    "it": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "important": [
      "p"
    ],
    "step": [
      "p"
    ],
    "for": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "both": [
      "p"
    ],
    "security": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "reliability": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "when": [
      "h2",
      "p"
    ],
    "created": [
      "p",
      "p"
    ],
    "consumed": [
      "p",
      "p"
    ],
    "should": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "follow": [
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "strict": [
      "p"
    ],
    "validate": [
      "p",
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong",
      "p",
      "p",
      "title"
    ],
    "against": [
      "p"
    ],
    "any": [
      "p"
    ],
    "how": [
      "h2",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "with": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "either": [
      "p",
      "p"
    ],
    "xsds": [
      "p",
      "ol",
      "li"
    ],
    "are": [
      "p",
      "p"
    ],
    "more": [
      "p",
      "ol",
      "li"
    ],
    "flexible": [
      "p"
    ],
    "generally": [
      "p"
    ],
    "favored": [
      "p"
    ],
    "over": [
      "p"
    ],
    "dtds": [
      "p"
    ],
    "solve": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "areas": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "where": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "generates": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "consumes": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "enumerate": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "generated": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "li"
    ],
    "parsed": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "define": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "which": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li"
    ],
    "describes": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "examine": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "tightly": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "defines": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "structure": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "consist": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "single": [
      "ol",
      "li"
    ],
    "file": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "multiple": [
      "ol",
      "li"
    ],
    "files": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "in-line": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "if": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "being": [
      "ol",
      "li"
    ],
    "dynamically": [
      "ol",
      "li"
    ],
    "via": [
      "ol",
      "li"
    ],
    "code": [
      "ol",
      "li"
    ],
    "likely": [
      "ol",
      "li"
    ],
    "outputted": [
      "ol",
      "li"
    ],
    "well": [
      "ol",
      "li"
    ],
    "systemxml.schema.xmlschemainference": [
      "ol",
      "li",
      "em"
    ],
    "class": [
      "ol",
      "li"
    ],
    "output": [
      "ol",
      "li"
    ],
    "tweaked": [
      "ol",
      "li"
    ],
    "hand": [
      "ol",
      "li"
    ],
    "accuracy": [
      "ol",
      "li"
    ],
    "validity": [
      "ol",
      "li"
    ],
    "finally": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "constrain": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "element": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "types": [
      "ol",
      "li"
    ],
    "example": [
      "ol",
      "li",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "h2"
    ],
    "defining": [
      "ol",
      "li"
    ],
    "birthday": [
      "ol",
      "li",
      "p"
    ],
    "assigning": [
      "ol",
      "li"
    ],
    "xsdate": [
      "ol",
      "li",
      "em"
    ],
    "type": [
      "ol",
      "li"
    ],
    "systemxml.xmlreader": [
      "ol",
      "li",
      "em"
    ],
    "systemxml.xmlreadersettings": [
      "ol",
      "li",
      "em",
      "ol",
      "li",
      "em"
    ],
    "classes": [
      "ol",
      "li"
    ],
    "instantiate": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "xmlreadersettings": [
      "ol",
      "ol",
      "li",
      "li",
      "em",
      "em",
      "ol",
      "ol",
      "li",
      "em",
      "li",
      "em"
    ],
    "object": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "xmlschemasetschemas": [
      "ol",
      "li",
      "em"
    ],
    "property": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "add": [
      "ol",
      "li"
    ],
    "one": [
      "ol",
      "li"
    ],
    "then": [
      "ol",
      "li"
    ],
    "set": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "validationtype": [
      "ol",
      "li",
      "em",
      "ol",
      "li",
      "em"
    ],
    "validationtypeschema.": [
      "ol",
      "li"
    ],
    "xmlreader": [
      "ol",
      "li",
      "em",
      "ol",
      "li",
      "em"
    ],
    "xmlreadercreate()": [
      "ol",
      "li",
      "em",
      "ol",
      "li",
      "em"
    ],
    "method": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "takes": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "validationtypeschema": [
      "em"
    ],
    "errors": [
      "p",
      "p"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "exception": [
      "p",
      "p"
    ],
    "systemxml;\nusing": [
      "pre"
    ],
    "systemxml.schema;\nxmlreadersettings": [
      "pre"
    ],
    "xmlsettings": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre"
    ],
    "xmlreadersettings);\nxmlsettings.schemas.add(\"http://www.example.com/types\",": [
      "pre"
    ],
    "\"typesxsd\");\nxmlsettings.validationtype": [
      "pre"
    ],
    "validationtypeschema;\nxmlreader": [
      "pre"
    ],
    "xmldata": [
      "pre",
      "pre"
    ],
    "xmlreadercreate(\"data.xml\",": [
      "pre",
      "pre"
    ],
    "xmlsettings;": [
      "pre",
      "pre"
    ],
    "instead": [
      "p"
    ],
    "require": [
      "p"
    ],
    "additional": [
      "p"
    ],
    "considerations": [
      "p"
    ],
    "externally": [
      "ol",
      "li"
    ],
    "referenced": [
      "ol",
      "li"
    ],
    "found": [
      "ol",
      "li",
      "p"
    ],
    "external": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "uri": [
      "ol",
      "li"
    ],
    "needs": [
      "ol",
      "li"
    ],
    "wrapped": [
      "ol",
      "li"
    ],
    "within": [
      "ol",
      "li"
    ],
    "doctype": [
      "ol",
      "li"
    ],
    "definition": [
      "ol",
      "li"
    ],
    "tag": [
      "ol",
      "li"
    ],
    "used": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "however": [
      "ol",
      "li"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "fewer": [
      "ol",
      "li"
    ],
    "options": [
      "ol",
      "li"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "compared": [
      "ol",
      "li"
    ],
    "secure": [
      "ol",
      "li",
      "strong"
    ],
    "default": [
      "ol",
      "li"
    ],
    "processing": [
      "ol",
      "li",
      "p"
    ],
    "disabled": [
      "ol",
      "li"
    ],
    "lead": [
      "ol",
      "li"
    ],
    "denial": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "service": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "other": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "validationtypedtd.": [
      "ol",
      "li"
    ],
    "next": [
      "ol",
      "li"
    ],
    "prohibitdtd": [
      "ol",
      "li",
      "em"
    ],
    "false": [
      "ol",
      "li",
      "em"
    ],
    "maxcharactersindocument": [
      "ol",
      "li",
      "em"
    ],
    "this": [
      "ol",
      "li"
    ],
    "prevents": [
      "ol",
      "li"
    ],
    "attack": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "submitting": [
      "ol",
      "li"
    ],
    "excessively": [
      "ol",
      "li"
    ],
    "large": [
      "ol",
      "li"
    ],
    "document": [
      "ol",
      "li"
    ],
    "reasonable": [
      "ol",
      "li"
    ],
    "maximum": [
      "ol",
      "li"
    ],
    "number": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "characters": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "maxcharactersfromentities": [
      "ol",
      "li",
      "em"
    ],
    "limits": [
      "ol",
      "li"
    ],
    "entity": [
      "ol",
      "li"
    ],
    "expansion": [
      "ol",
      "li"
    ],
    "preventing": [
      "ol",
      "li"
    ],
    "another": [
      "ol",
      "li"
    ],
    "called": [
      "ol",
      "li"
    ],
    "bomb": [
      "ol",
      "li"
    ],
    "does": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "entities": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "li"
    ],
    "xmlresolver": [
      "ol",
      "ol",
      "li",
      "li",
      "em",
      "em"
    ],
    "null": [
      "ol",
      "li",
      "em"
    ],
    "xmlsecureresolver": [
      "ol",
      "li",
      "em"
    ],
    "restricts": [
      "ol",
      "li"
    ],
    "accessed": [
      "ol",
      "li"
    ],
    "validationtypedtd": [
      "em"
    ],
    "disabling": [
      "p"
    ],
    "systemxml;\nxmlreadersettings": [
      "pre"
    ],
    "xmlreadersettings);\nxmlsettings.validationtype": [
      "pre"
    ],
    "validationtypedtd;\nxmlsettings.prohibitdtd": [
      "pre"
    ],
    "false\nxmlsettings.maxcharactersindocument": [
      "pre"
    ],
    "1024\nxmlsettings.maxcharactersfromentities": [
      "pre"
    ],
    "300\nxmlsettings.xmlresolver": [
      "pre"
    ],
    "null\nxmlreader": [
      "pre"
    ],
    "problem": [
      "h2"
    ],
    "registration": [
      "p",
      "p"
    ],
    "form": [
      "p",
      "p"
    ],
    "directory": [
      "p"
    ],
    "website": [
      "p"
    ],
    "several": [
      "p"
    ],
    "fields": [
      "p"
    ],
    "specifically": [
      "p"
    ],
    "name": [
      "p",
      "p",
      "p"
    ],
    "date": [
      "p",
      "p"
    ],
    "birth": [
      "p",
      "p"
    ],
    "phone": [
      "p",
      "p"
    ],
    "employment": [
      "p",
      "p"
    ],
    "status": [
      "p",
      "p"
    ],
    "each": [
      "p"
    ],
    "item": [
      "p"
    ],
    "collected": [
      "p"
    ],
    "client": [
      "p"
    ],
    "side": [
      "p"
    ],
    "blob": [
      "p"
    ],
    "sent": [
      "p"
    ],
    "no": [
      "p"
    ],
    "done": [
      "p"
    ],
    "than": [
      "p"
    ],
    "“well-formed": [
      "p"
    ],
    "xml”": [
      "p"
    ],
    "passed": [
      "p"
    ],
    "!--?xml": [
      "pre",
      "pre"
    ],
    "version=\"10\"?-->\n<person>": [
      "pre"
    ],
    "name>joe": [
      "pre"
    ],
    "blow/name>": [
      "pre"
    ],
    "dob>1986-08-25</dob>": [
      "pre"
    ],
    "phone>5558675309</phone>": [
      "pre"
    ],
    "employmentstatus>unemployed</employmentstatus>\n</person>": [
      "pre"
    ],
    "perform": [
      "p",
      "p",
      "p"
    ],
    "depending": [
      "p"
    ],
    "processed": [
      "p"
    ],
    "echoed": [
      "p"
    ],
    "users": [
      "p"
    ],
    "xss": [
      "p",
      "p"
    ],
    "content": [
      "p",
      "p"
    ],
    "carried": [
      "p",
      "p"
    ],
    "out": [
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p"
    ],
    "query": [
      "p"
    ],
    "solution": [
      "h2"
    ],
    "only": [
      "p",
      "p",
      "p"
    ],
    "properly": [
      "p"
    ],
    "formatted": [
      "p"
    ],
    "version=\"10\"?-->\n<xs:schema": [
      "pre"
    ],
    "xmlnsxs=\"http://www.w3.org/2001/xmlschema\">": [
      "pre"
    ],
    "xs:element": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "name=\"person\"": [
      "pre"
    ],
    "xs:complextype>": [
      "pre"
    ],
    "xs:sequence>": [
      "pre"
    ],
    "name=\"name\"": [
      "pre"
    ],
    "xs:simpletype>": [
      "pre",
      "pre",
      "pre"
    ],
    "xs:restriction": [
      "pre",
      "pre",
      "pre"
    ],
    "base=\"xsstring\">": [
      "pre",
      "pre",
      "pre"
    ],
    "xs:pattern": [
      "pre",
      "pre"
    ],
    "value=\"a-za-z": [
      "pre"
    ],
    "+\"></xs:pattern>": [
      "pre"
    ],
    "/xs:restriction>": [
      "pre",
      "pre",
      "pre"
    ],
    "/xs:simpletype>": [
      "pre",
      "pre",
      "pre"
    ],
    "/xs:element>": [
      "pre",
      "pre",
      "pre"
    ],
    "name=\"dob\"": [
      "pre"
    ],
    "type=\"xsdate\"></xs:element>": [
      "pre"
    ],
    "name=\"phone\"": [
      "pre"
    ],
    "value=\"0-9]{10}\"></xs:pattern>": [
      "pre"
    ],
    "name=\"employmentstatus\"": [
      "pre"
    ],
    "xs:enumeration": [
      "pre",
      "pre"
    ],
    "value=\"unemployed\"</xs:enumeration>": [
      "pre"
    ],
    "value=\"employed\"</xs:enumeration>": [
      "pre"
    ],
    "/xs:sequence>": [
      "pre"
    ],
    "/xs:complextype>": [
      "pre"
    ],
    "/xs:element>\n</xs:schema>": [
      "pre"
    ],
    "accept": [
      "p"
    ],
    "that’s": [
      "p",
      "p",
      "p"
    ],
    "made": [
      "p",
      "p"
    ],
    "up": [
      "p",
      "p"
    ],
    "latin": [
      "p"
    ],
    "alphabet": [
      "p"
    ],
    "spaces": [
      "p"
    ],
    "yyyy-mm-dd": [
      "p"
    ],
    "digits": [
      "p",
      "p"
    ],
    "exactly": [
      "p"
    ],
    "long": [
      "p"
    ],
    "“unemployed”": [
      "p"
    ],
    "\"employed\"": [
      "p"
    ],
    "even": [
      "p"
    ],
    "manipulated": [
      "p"
    ],
    "before": [
      "p"
    ],
    "sending": [
      "p"
    ],
    "would": [
      "p"
    ],
    "invalid": [
      "p"
    ],
    "reject": [
      "p"
    ],
    "tried": [
      "p"
    ],
    "special": [
      "p"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "ul": [
      "ASP.NET"
    ],
    "li": [
      "ASP.NET",
      "Identify all areas where the application generates or consumes XML data. Enumerate all areas where XML data is generated or parsed in your application.",
      "Define an XSD which describes the XML data. Examine the XML data and define an XSD which tightly defines the structure of the XML data. An XML Schema can consist of a single file, multiple files, or in-line with the XML. If the XML is being generated dynamically via code, it is likely that an XSD can be outputted as well. XSDs can also be generated from XML data by using the System.Xml.Schema.XmlSchemaInference class, but the output should be tweaked by hand to ensure accuracy and validity. Finally, the XSD should tightly constrain the XML data by using element types; for example defining a birthday element and assigning it the xs:date type.",
      "Validate the XML with the XSD. XML can be validated using the System.Xml.XmlReader and the System.Xml.XmlReaderSettings classes. Instantiate an XmlReaderSettings object and use the XmlSchemaSetSchemas property to add one or more XSD files. Then set the ValidationType property to ValidationType.Schema. Finally instantiate an XmlReader object using the XmlReader.Create() method which takes the XML Data and the XmlReaderSettings object.",
      "Identify all areas where the application generates or consumes XML data. Enumerate all areas where XML data is generated or parsed in your application.",
      "Define a DTD which describes the XML data. Examine the XML data and define a DTD which tightly defines the structure of the XML data. DTD can consist of an externally referenced file or found in-line with the XML. The external DTD URI or the DTD data needs to be wrapped within a DOCTYPE definition tag. Finally, the DTD can be used to constrain the XML data; however it has fewer options to do so compared to XSD.",
      "Secure the XML Parser. By default DTD processing is disabled as it can lead to Denial of Service or other attacks. Instantiate a System.Xml.XmlReaderSettings object and set its ValidationType property to ValidationType.DTD. Next set its ProhibitDtd property to false. Set its MaxCharactersInDocument property; this property prevents an attacker from performing a Denial of Service attack by submitting an excessively large XML document, the property should be set to a reasonable maximum number of characters. Set its MaxCharactersFromEntities Property, which limits the number of characters from entity expansion, preventing another Denial of Service attack called an XML bomb. Finally, if your XML does not use external entities, you should set the XmlReaderSettings XmlResolver property to null. If your XML does use external entities, the XmlResolver property should be set to an XmlSecureResolver which restricts the URIs that entities can be accessed from.",
      "Validate the XML. Finally, instantiate an XmlReader object using the XmlReader.Create() method which takes the XML Data and the XmlReaderSettings object."
    ],
    "p": [
      "Ensure that all XML data is syntactically validated on the server by using an XML schema such as XSD or DTD.",
      "An attacker passing malicious XML input can attempt XML injection attacks that aim to exploit your application by overwriting XML data, disclose information from arbitrary URIs, or cause the XML parser to crash or process slowly. Performing syntactic validation helps reduce these risks by ensuring that the input received matches the expected format. Syntactic validation on its own is not sufficient, as semantic validation is also needed to fully prevent these attacks, but it is an important step for both the security and reliability of your application.",
      "All XML data that is created or consumed by an application should follow a strict XML schema. Validate XML against the schema when any XML data is consumed or created.",
      "XML data can be validated with either an XSD or DTD. XSDs are more flexible and are generally favored over DTDs.",
      "To solve using XSD in ASP.NET use the following steps:",
      "An example of validation using an XML Schema, XML validation errors will result in an Exception.",
      "Using DTD instead of XSD require additional security considerations. To solve using DTD in ASP.NET use the following steps:",
      "An example of validation using a DTD and disabling external entities. XML validation errors will result in an Exception.",
      "A registration form for a directory website has several fields, specifically, name, date of birth, phone number and employment status. Each item is collected client side, and an XML blob of the data is sent to the server for processing. No input validation or syntactic validation of the data is done other than ensuring the data is “well-formed XML” by the parser.",
      "An example of XML passed by the server.",
      "An attacker can perform a number of injection attacks, depending on how the data is processed. For example if the name is echoed to other users, XSS or content injection attack can be carried out. Or if the birthday is used in a SQL query, a SQL Injection attack can be carried out.",
      "An XSD can be used to validate the XML data from the registration form. Not only can the XSD ensure that the XML data is properly formatted, it can also be used to perform input validation to prevent injection attacks such as content, XSS, or SQL injection.",
      "The following XSD defines the XML data.",
      "The XML parser will use the XSD to validate the received XML. It will only accept a name that’s made up of the Latin alphabet characters and spaces, a date of birth that’s in the format of YYYY-MM-DD, a phone number that’s made up of only digits and is exactly 10 digits long, and an employment status of either “Unemployed” or \"Employed\". So even if an attack manipulated the XML data before sending it to the server, the malicious data would be found to be invalid, and reject it if the attacker tried to perform an injection attack with special characters."
    ],
    "ol": [
      "Identify all areas where the application generates or consumes XML data. Enumerate all areas where XML data is generated or parsed in your application.\n Define an XSD which describes the XML data. Examine the XML data and define an XSD which tightly defines the structure of the XML data. An XML Schema can consist of a single file, multiple files, or in-line with the XML. If the XML is being generated dynamically via code, it is likely that an XSD can be outputted as well. XSDs can also be generated from XML data by using the System.Xml.Schema.XmlSchemaInference class, but the output should be tweaked by hand to ensure accuracy and validity. Finally, the XSD should tightly constrain the XML data by using element types; for example defining a birthday element and assigning it the xs:date type.\n Validate the XML with the XSD. XML can be validated using the System.Xml.XmlReader and the System.Xml.XmlReaderSettings classes. Instantiate an XmlReaderSettings object and use the XmlSchemaSetSchemas property to add one or more XSD files. Then set the ValidationType property to ValidationType.Schema. Finally instantiate an XmlReader object using the XmlReader.Create() method which takes the XML Data and the XmlReaderSettings object.",
      "Identify all areas where the application generates or consumes XML data. Enumerate all areas where XML data is generated or parsed in your application.\n Define a DTD which describes the XML data. Examine the XML data and define a DTD which tightly defines the structure of the XML data. DTD can consist of an externally referenced file or found in-line with the XML. The external DTD URI or the DTD data needs to be wrapped within a DOCTYPE definition tag. Finally, the DTD can be used to constrain the XML data; however it has fewer options to do so compared to XSD.\n Secure the XML Parser. By default DTD processing is disabled as it can lead to Denial of Service or other attacks. Instantiate a System.Xml.XmlReaderSettings object and set its ValidationType property to ValidationType.DTD. Next set its ProhibitDtd property to false. Set its MaxCharactersInDocument property; this property prevents an attacker from performing a Denial of Service attack by submitting an excessively large XML document, the property should be set to a reasonable maximum number of characters. Set its MaxCharactersFromEntities Property, which limits the number of characters from entity expansion, preventing another Denial of Service attack called an XML bomb. Finally, if your XML does not use external entities, you should set the XmlReaderSettings XmlResolver property to null. If your XML does use external entities, the XmlResolver property should be set to an XmlSecureResolver which restricts the URIs that entities can be accessed from.\n Validate the XML. Finally, instantiate an XmlReader object using the XmlReader.Create() method which takes the XML Data and the XmlReaderSettings object."
    ],
    "strong": [
      "Identify all areas where the application generates or consumes XML data.",
      "Define an XSD which describes the XML data.",
      "Validate the XML with the XSD.",
      "Identify all areas where the application generates or consumes XML data.",
      "Define a DTD which describes the XML data.",
      "Secure the XML Parser.",
      "Validate the XML."
    ],
    "em": [
      "System.Xml.Schema.XmlSchemaInference",
      "xs:date",
      "System.Xml.XmlReader",
      "System.Xml.XmlReaderSettings",
      "XmlReaderSettings",
      "XmlSchemaSetSchemas",
      "ValidationType",
      "ValidationType.Schema",
      "XmlReader",
      "XmlReader.Create()",
      "XmlReaderSettings",
      "System.Xml.XmlReaderSettings",
      "ValidationType",
      "ValidationType.DTD",
      "ProhibitDtd",
      "false",
      "MaxCharactersInDocument",
      "MaxCharactersFromEntities",
      "XmlReaderSettings XmlResolver",
      "null",
      "XmlResolver",
      "XmlSecureResolver",
      "XmlReader",
      "XmlReader.Create()",
      "XmlReaderSettings"
    ],
    "pre": [
      "using System.Xml;\nusing System.Xml.Schema;\nXmlReaderSettings xmlSettings = new XmlReaderSettings();\nxmlSettings.Schemas.Add(\"http://www.example.com/types\", \"types.xsd\");\nxmlSettings.ValidationType = ValidationType.Schema;\nXmlReader xmlData = XmlReader.Create(\"data.xml\", xmlSettings);",
      "using System.Xml;\nXmlReaderSettings xmlSettings = new XmlReaderSettings();\nxmlSettings.ValidationType = ValidationType.DTD;\nxmlSettings.ProhibitDtd = false;\nxmlSettings.MaxCharactersInDocument = 1024;\nxmlSettings.MaxCharactersFromEntities = 300;\nxmlSettings.XmlResolver = null;\nXmlReader xmlData = XmlReader.Create(\"data.xml\", xmlSettings);",
      "<!--?xml version=\"1.0\"?-->\n<person>\n  <name>Joe Blow</name>\n  <dob>1986-08-25</dob>\n  <phone>5558675309</phone>\n  <employmentstatus>Unemployed</employmentstatus>\n</person>",
      "<!--?xml version=\"1.0\"?-->\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n  <xs:element name=\"person\">\n    <xs:complextype>\n      <xs:sequence>\n        <xs:element name=\"name\">\n          <xs:simpletype>\n            <xs:restriction base=\"xs:string\">\n              <xs:pattern value=\"[a-zA-Z ]+\"></xs:pattern>\n            </xs:restriction>\n          </xs:simpletype>\n        </xs:element>\n        <xs:element name=\"dob\" type=\"xs:date\"></xs:element>\n        <xs:element name=\"phone\">\n          <xs:simpletype>\n            <xs:restriction base=\"xs:string\">\n              <xs:pattern value=\"[0-9]{10}\"></xs:pattern>\n            </xs:restriction>\n          </xs:simpletype>\n        </xs:element>\n        <xs:element name=\"employmentStatus\">\n          <xs:simpletype>\n            <xs:restriction base=\"xs:string\">\n              <xs:enumeration value=\"Unemployed\"></xs:enumeration>\n              <xs:enumeration value=\"Employed\"></xs:enumeration>\n            </xs:restriction>\n          </xs:simpletype>\n        </xs:element>\n      </xs:sequence>\n    </xs:complextype>\n  </xs:element>\n</xs:schema>"
    ]
  },
  "links": [],
  "html": "<h2>Applies To</h2><ul><li> ASP.NET </li>\n</ul><h2>What to Do</h2><p>Ensure that all XML data is syntactically validated on the server by using an XML schema such as XSD or DTD.\n</p><h2>Why</h2><p>An attacker passing malicious XML input can attempt XML injection attacks that aim to exploit your application by overwriting XML data, disclose information from arbitrary URIs, or cause the XML parser to crash or process slowly. Performing syntactic validation helps reduce these risks by ensuring that the input received matches the expected format. Syntactic validation on its own is not sufficient, as semantic validation is also needed to fully prevent these attacks, but it is an important step for both the security and reliability of your application.\n</p><h2>When</h2><p>All XML data that is created or consumed by an application should follow a strict XML schema. Validate XML against the schema when any XML data is consumed or created.\n</p><h2>How</h2><p>XML data can be validated with either an XSD or DTD. XSDs are more flexible and are generally favored over DTDs.\n</p><p>\nTo solve using XSD in ASP.NET use the following steps:</p><ol>\n<li> <strong>Identify all areas where the application generates or consumes XML data.</strong> Enumerate all areas where XML data is generated or parsed in your application.</li>\n<li> <strong>Define an XSD which describes the XML data.</strong> Examine the XML data and define an XSD which tightly defines the structure of the XML data. An XML Schema can consist of a single file, multiple files, or in-line with the XML. If the XML is being generated dynamically via code, it is likely that an XSD can be outputted as well. XSDs can also be generated from XML data by using the <em>System.Xml.Schema.XmlSchemaInference</em> class, but the output should be tweaked by hand to ensure accuracy and validity. Finally, the XSD should tightly constrain the XML data by using element types; for example defining a birthday element and assigning it the <em>xs:date</em> type.</li>\n<li> <strong>Validate the XML with the XSD.</strong> XML can be validated using the <em>System.Xml.XmlReader</em> and the <em>System.Xml.XmlReaderSettings</em> classes. Instantiate an <em>XmlReaderSettings</em> object and use the <em>XmlSchemaSetSchemas</em> property to add one or more XSD files. Then set the <em>ValidationType</em> property to <em>ValidationType.Schema</em>. Finally instantiate an <em>XmlReader</em> object using the <em>XmlReader.Create()</em> method which takes the XML Data and the <em>XmlReaderSettings</em> object.</li>\n</ol><p>\nAn example of validation using an XML Schema, XML validation errors will result in an Exception.</p><pre>using System.Xml;\nusing System.Xml.Schema;\nXmlReaderSettings xmlSettings = new XmlReaderSettings();\nxmlSettings.Schemas.Add(\"http://www.example.com/types\", \"types.xsd\");\nxmlSettings.ValidationType = ValidationType.Schema;\nXmlReader xmlData = XmlReader.Create(\"data.xml\", xmlSettings);\n</pre><p>\nUsing DTD instead of XSD require additional security considerations. To solve using DTD in ASP.NET use the following steps:</p><ol>\n<li> <strong>Identify all areas where the application generates or consumes XML data.</strong> Enumerate all areas where XML data is generated or parsed in your application.</li>\n<li> <strong>Define a DTD which describes the XML data.</strong> Examine the XML data and define a DTD which tightly defines the structure of the XML data. DTD can consist of an externally referenced file or found in-line with the XML. The external DTD URI or the DTD data needs to be wrapped within a DOCTYPE definition tag. Finally, the DTD can be used to constrain the XML data; however it has fewer options to do so compared to XSD.</li>\n<li> <strong>Secure the XML Parser.</strong> By default DTD processing is disabled as it can lead to Denial of Service or other attacks. Instantiate a <em>System.Xml.XmlReaderSettings</em> object and set its <em>ValidationType</em> property to <em>ValidationType.DTD</em>. Next set its <em>ProhibitDtd</em> property to <em>false</em>. Set its <em>MaxCharactersInDocument</em> property; this property prevents an attacker from performing a Denial of Service attack by submitting an excessively large XML document, the property should be set to a reasonable maximum number of characters. Set its <em>MaxCharactersFromEntities</em> Property, which limits the number of characters from entity expansion, preventing another Denial of Service attack called an XML bomb. Finally, if your XML does not use external entities, you should set the <em>XmlReaderSettings XmlResolver</em> property to <em>null</em>. If your XML does use external entities, the <em>XmlResolver</em> property should be set to an <em>XmlSecureResolver</em> which restricts the URIs that entities can be accessed from.</li>\n<li> <strong>Validate the XML.</strong> Finally, instantiate an <em>XmlReader</em> object using the <em>XmlReader.Create()</em> method which takes the XML Data and the <em>XmlReaderSettings</em> object.</li>\n</ol><p>\nAn example of validation using a DTD and disabling external entities. XML validation errors will result in an Exception.</p><pre>using System.Xml;\nXmlReaderSettings xmlSettings = new XmlReaderSettings();\nxmlSettings.ValidationType = ValidationType.DTD;\nxmlSettings.ProhibitDtd = false;\nxmlSettings.MaxCharactersInDocument = 1024;\nxmlSettings.MaxCharactersFromEntities = 300;\nxmlSettings.XmlResolver = null;\nXmlReader xmlData = XmlReader.Create(\"data.xml\", xmlSettings);\n</pre><h2>Problem Example</h2><p>A registration form for a directory website has several fields, specifically, name, date of birth, phone number and employment status. Each item is collected client side, and an XML blob of the data is sent to the server for processing. No input validation or syntactic validation of the data is done other than ensuring the data is “well-formed XML” by the parser.\n</p><p>\nAn example of XML passed by the server.</p><pre>&lt;!--?xml version=\"1.0\"?--&gt;\n&lt;person&gt;\n  &lt;name&gt;Joe Blow&lt;/name&gt;\n  &lt;dob&gt;1986-08-25&lt;/dob&gt;\n  &lt;phone&gt;5558675309&lt;/phone&gt;\n  &lt;employmentstatus&gt;Unemployed&lt;/employmentstatus&gt;\n&lt;/person&gt;\n</pre><p>\nAn attacker can perform a number of injection attacks, depending on how the data is processed. For example if the name is echoed to other users, XSS or content injection attack can be carried out. Or if the birthday is used in a SQL query, a SQL Injection attack can be carried out.\n</p><h2>Solution Example</h2><p>An XSD can be used to validate the XML data from the registration form. Not only can the XSD ensure that the XML data is properly formatted, it can also be used to perform input validation to prevent injection attacks such as content, XSS, or SQL injection.\n</p><p>\nThe following XSD defines the XML data.</p><pre>&lt;!--?xml version=\"1.0\"?--&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n  &lt;xs:element name=\"person\"&gt;\n    &lt;xs:complextype&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=\"name\"&gt;\n          &lt;xs:simpletype&gt;\n            &lt;xs:restriction base=\"xs:string\"&gt;\n              &lt;xs:pattern value=\"[a-zA-Z ]+\"&gt;&lt;/xs:pattern&gt;\n            &lt;/xs:restriction&gt;\n          &lt;/xs:simpletype&gt;\n        &lt;/xs:element&gt;\n        &lt;xs:element name=\"dob\" type=\"xs:date\"&gt;&lt;/xs:element&gt;\n        &lt;xs:element name=\"phone\"&gt;\n          &lt;xs:simpletype&gt;\n            &lt;xs:restriction base=\"xs:string\"&gt;\n              &lt;xs:pattern value=\"[0-9]{10}\"&gt;&lt;/xs:pattern&gt;\n            &lt;/xs:restriction&gt;\n          &lt;/xs:simpletype&gt;\n        &lt;/xs:element&gt;\n        &lt;xs:element name=\"employmentStatus\"&gt;\n          &lt;xs:simpletype&gt;\n            &lt;xs:restriction base=\"xs:string\"&gt;\n              &lt;xs:enumeration value=\"Unemployed\"&gt;&lt;/xs:enumeration&gt;\n              &lt;xs:enumeration value=\"Employed\"&gt;&lt;/xs:enumeration&gt;\n            &lt;/xs:restriction&gt;\n          &lt;/xs:simpletype&gt;\n        &lt;/xs:element&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:complextype&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</pre> <p>\nThe XML parser will use the XSD to validate the received XML. It will only accept a name that’s made up of the Latin alphabet characters and spaces, a date of birth that’s in the format of YYYY-MM-DD, a phone number that’s made up of only digits and is exactly 10 digits long, and an employment status of either “Unemployed” or \"Employed\". So even if an attack manipulated the XML data before sending it to the server, the malicious data would be found to be invalid, and reject it if the attacker tried to perform an injection attack with special characters.\n</p>"
}