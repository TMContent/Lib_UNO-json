{
  "id": "ba64e4ba-9d14-4054-a99e-b6594f9698d6",
  "checksum": "559e8c0276f23f890bf24e9ca67d0470ecd9b0ad",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p"
    ],
    "scala": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "play": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "21.0+": [
      "p"
    ],
    "what": [
      "h1",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "do": [
      "h1"
    ],
    "validate": [
      "p",
      "p",
      "p",
      "title"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "title"
    ],
    "processing": [
      "p",
      "p",
      "title"
    ],
    "them": [
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "failure": [
      "p"
    ],
    "could": [
      "p"
    ],
    "cause": [
      "p"
    ],
    "improper": [
      "p"
    ],
    "authentication": [
      "p"
    ],
    "this": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "allow": [
      "p"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "authenticate": [
      "p"
    ],
    "as": [
      "p"
    ],
    "another": [
      "p"
    ],
    "without": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "need": [
      "p"
    ],
    "steal": [
      "p"
    ],
    "when": [
      "h1",
      "p"
    ],
    "if": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre",
      "span"
    ],
    "your": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "accepts": [
      "p"
    ],
    "processes": [
      "p"
    ],
    "then": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "following": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "validating": [
      "p"
    ],
    "establish": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "username": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "requirements determine": [
      "ol",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li"
    ],
    "acceptable": [
      "ol",
      "li",
      "p"
    ],
    "character": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "li",
      "p"
    ],
    "length": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "allowed": [
      "ol",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "p"
    ],
    "a": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "span",
      "span",
      "ul",
      "li"
    ],
    "instance": [
      "ol",
      "li",
      "p"
    ],
    "require": [
      "ol",
      "li",
      "p"
    ],
    "usernames": [
      "ol",
      "li",
      "p",
      "title"
    ],
    "at": [
      "ol",
      "li",
      "p"
    ],
    "least six": [
      "ol",
      "li",
      "p"
    ],
    "characters": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "long": [
      "ol",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "contain": [
      "ol",
      "li",
      "p"
    ],
    "alpha-numeric": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "whitelist": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "validation whitelisting": [
      "ol",
      "li",
      "p"
    ],
    "involves": [
      "ol",
      "li",
      "p"
    ],
    "establishment": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "li",
      "p"
    ],
    "good": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "once": [
      "ol",
      "li",
      "p"
    ],
    "defined": [
      "ol",
      "li",
      "p"
    ],
    "compare": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "li",
      "p"
    ],
    "against": [
      "ol",
      "li",
      "p"
    ],
    "established": [
      "ol",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p"
    ],
    "resemble": [
      "ol",
      "li",
      "p"
    ],
    "discard": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p"
    ],
    "technique": [
      "ol",
      "li",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "p"
    ],
    "using": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "regular": [
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "expressions": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "example": [
      "ol",
      "li",
      "p"
    ],
    "val": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "pid": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "span",
      "span",
      "span",
      "span",
      "span"
    ],
    "userform": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "empidval": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "uname": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "span",
      "span",
      "span"
    ],
    "usernameval": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "name": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "findname": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "whitelistpattern": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "\"\\\\w|\\\\d)+\"": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "rval": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "issafe": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "pattern": [
      "ol",
      "li",
      "pre",
      "span",
      "a"
    ],
    "matcher": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    ".": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "matches": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "{": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    ".....": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "//code": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "action": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "}": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "span",
      "span"
    ],
    "else": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "exception": [
      "ol",
      "li",
      "pre",
      "span"
    ],
    "requirements": [
      "strong"
    ],
    "validation": [
      "strong"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "tutorial": [
      "ul",
      "li"
    ],
    "on": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "available": [
      "ul",
      "li"
    ],
    "at regular-expressionsinfo.": [
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "expression": [
      "ul",
      "li"
    ],
    "in": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "documentation": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "for regex": [
      "ul",
      "li"
    ],
    "pattern in": [
      "ul",
      "li"
    ],
    "regular-expressionsinfo": [
      "a"
    ],
    "regex": [
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "",
      "Additional Resources"
    ],
    "p": [
      "Scala and Play Framework 2.1.0+",
      "Validate user credentials before processing them.",
      "Failure to validate user credentials could cause improper authentication. This can allow an attacker to authenticate as another user without the need to steal credentials.",
      "If your application accepts and processes user credentials, then validate the credentials before processing them.",
      "",
      "Use the following steps when validating user credentials:",
      "Establish username requirements. Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least six characters long and must contain alpha-numeric characters only.",
      "Use whitelist validation. Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:",
      ""
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ol": [
      "Establish username requirements. Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least six characters long and must contain alpha-numeric characters only.\n    \n    \n      \n        Use whitelist validation. Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:\n      \n      \n        val pid \n        =\n        \n        \n        UserForm\n        .\n        empidval uname \n        =\n        \n        \n        UserForm\n        .\n        usernameval name \n        =\n        \n        \n        Name\n        .\n        findname\n        (\n        pid\n        ,\n         uname\n        )\n        \n          val whitelistPattern \n        =\n        \n        \n        \"(\\\\w|\\\\d)+\"\n        .\n        rval issafe \n        =\n        whitelistPattern\n        .\n        pattern\n        .\n        matcher\n        (\n        uname\n        ).\n        matches\n        if\n        \n        \n        (\n        issafe\n        ){\n        \n          \n        \n        ......\n        \n        \n        //Code for Action\n        \n          \n        \n        }\n        else\n        {\n        \n          \n        \n        ......\n        \n        \n        //Code for Exception\n        \n          \n        \n        }"
    ],
    "li": [
      "Establish username requirements. Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least six characters long and must contain alpha-numeric characters only.",
      "Use whitelist validation. Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:\n      \n      \n        val pid \n        =\n        \n        \n        UserForm\n        .\n        empidval uname \n        =\n        \n        \n        UserForm\n        .\n        usernameval name \n        =\n        \n        \n        Name\n        .\n        findname\n        (\n        pid\n        ,\n         uname\n        )\n        \n          val whitelistPattern \n        =\n        \n        \n        \"(\\\\w|\\\\d)+\"\n        .\n        rval issafe \n        =\n        whitelistPattern\n        .\n        pattern\n        .\n        matcher\n        (\n        uname\n        ).\n        matches\n        if\n        \n        \n        (\n        issafe\n        ){\n        \n          \n        \n        ......\n        \n        \n        //Code for Action\n        \n          \n        \n        }\n        else\n        {\n        \n          \n        \n        ......\n        \n        \n        //Code for Exception\n        \n          \n        \n        }",
      "A tutorial on regular expressions is available at Regular-Expressions.info.",
      "For more information on using regular expression in Scala, see: Documentation for Regex Pattern in Scala documentation."
    ],
    "strong": [
      "Establish username requirements.",
      "Use whitelist validation."
    ],
    "pre": [
      "val pid \n        =\n        \n        \n        UserForm\n        .\n        empidval uname \n        =\n        \n        \n        UserForm\n        .\n        usernameval name \n        =\n        \n        \n        Name\n        .\n        findname\n        (\n        pid\n        ,\n         uname\n        )\n        \n          val whitelistPattern \n        =\n        \n        \n        \"(\\\\w|\\\\d)+\"\n        .\n        rval issafe \n        =\n        whitelistPattern\n        .\n        pattern\n        .\n        matcher\n        (\n        uname\n        ).\n        matches\n        if\n        \n        \n        (\n        issafe\n        ){\n        \n          \n        \n        ......\n        \n        \n        //Code for Action\n        \n          \n        \n        }\n        else\n        {\n        \n          \n        \n        ......\n        \n        \n        //Code for Exception\n        \n          \n        \n        }"
    ],
    "span": [
      "val pid",
      "=",
      "",
      "UserForm",
      ".",
      "empidval uname",
      "=",
      "",
      "UserForm",
      ".",
      "usernameval name",
      "=",
      "",
      "Name",
      ".",
      "findname",
      "(",
      "pid",
      ",",
      "uname",
      ")",
      "val whitelistPattern",
      "=",
      "",
      "\"(\\\\w|\\\\d)+\"",
      ".",
      "rval issafe",
      "=",
      "whitelistPattern",
      ".",
      "pattern",
      ".",
      "matcher",
      "(",
      "uname",
      ").",
      "matches",
      "if",
      "",
      "(",
      "issafe",
      "){",
      "",
      "......",
      "",
      "//Code for Action",
      "",
      "}",
      "else",
      "{",
      "",
      "......",
      "",
      "//Code for Exception",
      "",
      "}"
    ],
    "ul": [
      "A tutorial on regular expressions is available at Regular-Expressions.info.\n    For more information on using regular expression in Scala, see: Documentation for Regex Pattern in Scala documentation."
    ],
    "a": [
      "Regular-Expressions.info",
      "Regex Pattern"
    ]
  },
  "links": [
    {
      "href": "http://www.regular-expressions.info/",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(51, 51, 153); font-weight: bold;",
      "text": "Regular-Expressions.info"
    },
    {
      "href": "http://www.scala-lang.org/api/current/index.html#scala.util.matching.Regex",
      "target": "_blank",
      "style": "margin: 0px; padding: 0px; color: rgb(51, 51, 153); font-weight: bold;",
      "text": "Regex Pattern"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <p>Scala and Play Framework 2.1.0+<br /></p>\n  <h1>What to Do</h1>\n  <p>Validate user credentials before processing them.</p>\n  <h1>Why</h1>\n  <p>Failure to validate user credentials could cause improper authentication. This can allow an attacker to authenticate as another user without the need to steal credentials.</p>\n  <h1>When</h1>\n  <p>If your application accepts and processes user credentials, then validate the credentials before processing them.</p>\n  <h1>How</h1>\n  <p />\n  <p style=\"margin: 0.5em 0px 1em; padding: 0px; line-height: 1.5em; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;\">Use the following steps when validating user credentials:</p>\n  <ol style=\"margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;\">\n    <li style=\"margin: 0px; padding: 0px;\">\n      <p style=\"margin: 0.5em 0px 1em; padding: 0px; line-height: 1.5em;\">\n        <strong style=\"margin: 0px; padding: 0px;\">Establish username requirements.&nbsp;</strong>Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least&nbsp;six characters long and must contain alpha-numeric characters only.</p>\n    </li>\n    <li style=\"margin: 0px; padding: 0px;\">\n      <p style=\"margin: 0.5em 0px 1em; padding: 0px; line-height: 1.5em;\">\n        <strong style=\"margin: 0px; padding: 0px;\">Use whitelist validation.&nbsp;</strong>Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:\n      </p>\n      <pre class=\"prettyprint\">\n        <span class=\"pln\">val pid </span>\n        <span class=\"pun\">=</span>\n        <span class=\"pln\">\n        </span>\n        <span class=\"typ\">UserForm</span>\n        <span class=\"pun\">.</span>\n        <span class=\"pln\">empid<br />val uname </span>\n        <span class=\"pun\">=</span>\n        <span class=\"pln\">\n        </span>\n        <span class=\"typ\">UserForm</span>\n        <span class=\"pun\">.</span>\n        <span class=\"pln\">username<br />val name </span>\n        <span class=\"pun\">=</span>\n        <span class=\"pln\">\n        </span>\n        <span class=\"typ\">Name</span>\n        <span class=\"pun\">.</span>\n        <span class=\"pln\">findname</span>\n        <span class=\"pun\">(</span>\n        <span class=\"pln\">pid</span>\n        <span class=\"pun\">,</span>\n        <span class=\"pln\"> uname</span>\n        <span class=\"pun\">)</span>\n        <span class=\"pln\">\n          <br />val whitelistPattern </span>\n        <span class=\"pun\">=</span>\n        <span class=\"pln\">\n        </span>\n        <span class=\"str\">\"(\\\\w|\\\\d)+\"</span>\n        <span class=\"pun\">.</span>\n        <span class=\"pln\">r<br />val issafe </span>\n        <span class=\"pun\">=</span>\n        <span class=\"pln\">whitelistPattern</span>\n        <span class=\"pun\">.</span>\n        <span class=\"pln\">pattern</span>\n        <span class=\"pun\">.</span>\n        <span class=\"pln\">matcher</span>\n        <span class=\"pun\">(</span>\n        <span class=\"pln\">uname</span>\n        <span class=\"pun\">).</span>\n        <span class=\"pln\">matches<br /></span>\n        <span class=\"kwd\">if</span>\n        <span class=\"pln\">\n        </span>\n        <span class=\"pun\">(</span>\n        <span class=\"pln\">issafe</span>\n        <span class=\"pun\">){</span>\n        <span class=\"pln\">\n          <br />\n        </span>\n        <span class=\"pun\">......</span>\n        <span class=\"pln\">\n        </span>\n        <span class=\"com\">//Code for Action</span>\n        <span class=\"pln\">\n          <br />\n        </span>\n        <span class=\"pun\">}</span>\n        <span class=\"kwd\">else</span>\n        <span class=\"pun\">{</span>\n        <span class=\"pln\">\n          <br />\n        </span>\n        <span class=\"pun\">......</span>\n        <span class=\"pln\">\n        </span>\n        <span class=\"com\">//Code for Exception</span>\n        <span class=\"pln\">\n          <br />\n        </span>\n        <span class=\"pun\">}</span>\n      </pre>\n    </li>\n  </ol>\n  <h1 style=\"margin: 0px; padding: 10px 0px 0px; font-size: 17px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">\n  </h1>\n  <h1 style=\"margin: 0px; padding: 10px 0px 0px; font-size: 17px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);\">Additional Resources</h1>\n  <ul style=\"margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small; background-color: rgb(255, 255, 255);\">\n    <li style=\"margin: 0px; padding: 0px;\">A tutorial on regular expressions is available at&nbsp;<a href=\"http://www.regular-expressions.info/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(51, 51, 153); font-weight: bold;\">Regular-Expressions.info</a>.</li>\n    <li style=\"margin: 0px; padding: 0px;\">For more information on using regular expression in Scala, see: Documentation for&nbsp;<a href=\"http://www.scala-lang.org/api/current/index.html#scala.util.matching.Regex\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(51, 51, 153); font-weight: bold;\">Regex Pattern</a>&nbsp;in Scala documentation.</li>\n  </ul>\n  <p />"
}