{
  "id": "4dfedb8e-17d3-495d-843e-476c5e470f27",
  "checksum": "a0c708322bda2038dc5a2635e1052c960f9ce823",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "p"
    ],
    "always": [
      "p"
    ],
    "encode": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "output": [
      "p",
      "p",
      "title"
    ],
    "which": [
      "p",
      "p"
    ],
    "contains": [
      "p",
      "title"
    ],
    "untrusted": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "appropriately": [
      "p"
    ],
    "for": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "context": [
      "p",
      "p",
      "title"
    ],
    "in": [
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "will": [
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "this": [
      "p",
      "p",
      "p"
    ],
    "prevents": [
      "p"
    ],
    "potentially": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "script": [
      "p"
    ],
    "tags": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "being": [
      "p"
    ],
    "interpreted": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "by": [
      "p",
      "title"
    ],
    "client's": [
      "p"
    ],
    "browser": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "whenever": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p"
    ],
    "echo": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "client": [
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p"
    ],
    "guideline&nbsp;": [
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "come": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p"
    ],
    "database": [
      "p",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "calls": [
      "p"
    ],
    "into": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "if": [
      "p",
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "write": [
      "p",
      "p"
    ],
    "includes": [
      "p"
    ],
    "shared": [
      "p",
      "p"
    ],
    "local": [
      "p"
    ],
    "file": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p"
    ],
    "trust": [
      "p"
    ],
    "it&nbsp;": [
      "p"
    ],
    "echoing": [
      "p"
    ],
    "directly": [
      "p"
    ],
    "back": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "cross-site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "among": [
      "p"
    ],
    "other": [
      "p"
    ],
    "problems&nbsp;": [
      "p"
    ],
    "encoding": [
      "p",
      "p",
      "p"
    ],
    "ensures": [
      "p"
    ],
    "is": [
      "p",
      "p"
    ],
    "treated": [
      "p"
    ],
    "literal": [
      "p"
    ],
    "text": [
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "script&nbsp;": [
      "p"
    ],
    "microsoftsecurity.applicationantixsslibrary.htmlencode": [
      "p",
      "b"
    ],
    "method&nbsp;": [
      "p"
    ],
    "similarly": [
      "p"
    ],
    "urls": [
      "p"
    ],
    "might": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "unsafe": [
      "p"
    ],
    "characters": [
      "p"
    ],
    "because": [
      "p"
    ],
    "they": [
      "p"
    ],
    "have": [
      "p"
    ],
    "been": [
      "p"
    ],
    "constructed": [
      "p"
    ],
    "microsoftsecurity.applicationantixsslibrary.urlencode": [
      "p",
      "b"
    ],
    "make": [
      "p",
      "p"
    ],
    "them": [
      "p"
    ],
    "safe": [
      "p"
    ],
    "note": [
      "p",
      "b"
    ],
    "&nbsp": [
      "p",
      "p"
    ],
    "sure": [
      "p"
    ],
    "at": [
      "p"
    ],
    "last": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "opportunity": [
      "p"
    ],
    "before": [
      "p"
    ],
    "returned": [
      "p"
    ],
    "client&nbsp;": [
      "p"
    ],
    "any": [
      "p"
    ],
    "earlier": [
      "p"
    ],
    "than": [
      "p"
    ],
    "may": [
      "p"
    ],
    "know": [
      "p"
    ],
    "exact": [
      "p"
    ],
    "hence": [
      "p"
    ],
    "format": [
      "p"
    ],
    "need": [
      "p"
    ],
    "into&nbsp;": [
      "p"
    ],
    "also": [
      "p"
    ],
    "early": [
      "p"
    ],
    "of": [
      "p"
    ],
    "some": [
      "p"
    ],
    "result": [
      "p"
    ],
    "double": [
      "p"
    ],
    "problems": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ],
    "all": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "p": [
      "Always encode output which contains untrusted data appropriately for the context in which it will be used.",
      "This prevents potentially malicious script tags from being interpreted as code by the client's browser",
      "Whenever your application will echo untrusted input to the client use this guideline.&nbsp; Untrusted input can come from the user, from the client, from a database, or from untrusted code that your application calls into.",
      "If you write output that includes user input or data from a shared database or a local file that you do not trust, encode it.&nbsp; Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks, among other problems.&nbsp; Encoding the data ensures that it is treated as literal text and not as script.&nbsp; You can use the Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode method.&nbsp; Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode to make them safe.",
      "Note &nbsp; &nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&nbsp; Also, early encoding of some data can result in double encoding problems.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode",
      "Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode",
      "Note"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\n  <p>Always encode output which contains untrusted data appropriately for the context in which it will be used. </p>\n  <h1>Why</h1>\n  <p>This prevents potentially malicious script tags from being interpreted as code by the client's browser</p>\n  <h1>When</h1>\n  <p>Whenever your application will echo untrusted input to the client use this guideline.&amp;nbsp; Untrusted input can come from the user, from the client, from a database, or from untrusted code that your application calls into.</p>\n  <h1>How</h1>\n  <p>If you write output that includes user input or data from a shared database or a local file that you do not trust, encode it.&amp;nbsp; Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks, among other problems.&amp;nbsp; Encoding the data ensures that it is treated as literal text and not as script.&amp;nbsp; You can use the <b>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</b> method.&amp;nbsp; Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <b>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</b> to make them safe. </p>\n  <p>\n    <b>Note</b> &amp;nbsp; &amp;nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&amp;nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&amp;nbsp; Also, early encoding of some data can result in double encoding problems. </p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
}