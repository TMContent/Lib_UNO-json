{
  "id": "b5fb44c5-1702-42cf-b6be-894c511af7ac",
  "checksum": "79d18fcd9bd2ba1e12c1736f7e3b7221d551fafd",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "li",
      "h2",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "web": [
      "ul",
      "li",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p"
    ],
    "server-side": [
      "ul",
      "li",
      "h2",
      "h2"
    ],
    "what": [
      "h2"
    ],
    "check": [
      "h2",
      "h2",
      "p"
    ],
    "for": [
      "h2",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "ensure": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "type": [
      "p",
      "ol",
      "li"
    ],
    "safe": [
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "parameters": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "are": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "used": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "when": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "performing": [
      "p"
    ],
    "database": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "transactions": [
      "p",
      "ol",
      "li",
      "strong"
    ],
    "why": [
      "h2"
    ],
    "prepared": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "statements": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "mitigate": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "number": [
      "p"
    ],
    "one": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "database-facing": [
      "p"
    ],
    "injection": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "powerful": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "language": [
      "p"
    ],
    "independent": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "depends": [
      "p"
    ],
    "on": [
      "p"
    ],
    "algorithm": [
      "p"
    ],
    "generate": [
      "p"
    ],
    "strings": [
      "p"
    ],
    "passed": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "affects": [
      "p"
    ],
    "engine": [
      "p",
      "p"
    ],
    "not": [
      "p"
    ],
    "actual": [
      "p"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "exploits": [
      "p"
    ],
    "creation": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "string": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "which": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "embedded": [
      "p",
      "p"
    ],
    "manually": [
      "p"
    ],
    "with": [
      "p"
    ],
    "escape": [
      "p"
    ],
    "sequences": [
      "p"
    ],
    "such": [
      "p"
    ],
    "single": [
      "p"
    ],
    "quote": [
      "p",
      "p"
    ],
    "')": [
      "p"
    ],
    "or": [
      "p"
    ],
    "double": [
      "p"
    ],
    "\")": [
      "p"
    ],
    "characters.": [
      "p"
    ],
    "using": [
      "p"
    ],
    "method": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "inserts": [
      "p"
    ],
    "valid": [
      "p"
    ],
    "statement": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "fragments": [
      "p"
    ],
    "part": [
      "p"
    ],
    "so": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "turn": [
      "p"
    ],
    "within": [
      "p"
    ],
    "query": [
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "submitted": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "successful": [
      "p"
    ],
    "exploitation": [
      "p"
    ],
    "allows": [
      "p"
    ],
    "potentially": [
      "p"
    ],
    "compromise": [
      "p"
    ],
    "entire": [
      "p"
    ],
    "often": [
      "p"
    ],
    "underlying": [
      "p"
    ],
    "operating": [
      "p"
    ],
    "system": [
      "p"
    ],
    "offer": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "simple": [
      "p"
    ],
    "yet": [
      "p"
    ],
    "efficient": [
      "p"
    ],
    "mitigation": [
      "p"
    ],
    "since": [
      "p"
    ],
    "automatically": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "user-input": [
      "p"
    ],
    "non-escaped": [
      "p"
    ],
    "form": [
      "p"
    ],
    "passing": [
      "p"
    ],
    "much": [
      "p"
    ],
    "like": [
      "p"
    ],
    "function": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "call": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "by": [
      "p",
      "ol",
      "li"
    ],
    "parameterizing": [
      "p"
    ],
    "type-enforcing": [
      "p"
    ],
    "them": [
      "p"
    ],
    "effectively": [
      "p"
    ],
    "filtered": [
      "p"
    ],
    "how": [
      "h2",
      "h2"
    ],
    "if": [
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "locate": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "queries": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "throughout": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "your": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "verify": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "each": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "transaction": [
      "ol",
      "li",
      "strong"
    ],
    "uses": [
      "ol",
      "li",
      "strong"
    ],
    "examine": [
      "ol",
      "li"
    ],
    "being": [
      "ol",
      "li"
    ],
    "executed": [
      "ol",
      "li"
    ],
    "fix": [
      "h2"
    ],
    "use": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "prevent": [
      "p"
    ],
    "follow": [
      "p"
    ],
    "these": [
      "p"
    ],
    "steps": [
      "p",
      "ol",
      "li"
    ],
    "after": [
      "ol",
      "li"
    ],
    "locating": [
      "ol",
      "li"
    ],
    "understand": [
      "ol",
      "li"
    ],
    "format": [
      "ol",
      "li"
    ],
    "parameter's": [
      "ol",
      "li"
    ],
    "data": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "exact": [
      "ol",
      "li"
    ],
    "syntax": [
      "ol",
      "li"
    ],
    "different": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "programming": [
      "ol",
      "li"
    ],
    "languages": [
      "ol",
      "li"
    ],
    "access": [
      "ol",
      "li"
    ],
    "apis": [
      "ol",
      "li"
    ],
    "basic": [
      "ol",
      "li"
    ],
    "writing": [
      "ol",
      "li"
    ],
    "get": [
      "ol",
      "li"
    ],
    "handle": [
      "ol",
      "li"
    ],
    "prepare": [
      "ol",
      "li"
    ],
    "make": [
      "ol",
      "li"
    ],
    "bindparam": [
      "ol",
      "li"
    ],
    "bind": [
      "ol",
      "li"
    ],
    "variables": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "load": [
      "ol",
      "li"
    ],
    "into": [
      "ol",
      "li"
    ],
    "execute": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "essential": [
      "h2",
      "h2"
    ],
    "security": [
      "h2",
      "h2"
    ],
    "guidelines": [
      "h2"
    ],
    "validate": [
      "ul",
      "li",
      "a"
    ],
    "encode": [
      "ul",
      "li",
      "a"
    ],
    "included": [
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "output": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "force": [
      "ul",
      "li",
      "a"
    ],
    "reauthentication": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "executing": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "critical": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "functionality": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "include": [
      "ul",
      "li",
      "a"
    ],
    "unique": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "tokens": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "http": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "requests": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "role-based": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "authorization": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "url-encode": [
      "ul",
      "li",
      "a"
    ],
    "response": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "headers": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklist": [
      "h2"
    ],
    "items": [
      "h2"
    ],
    "validated": [
      "ul",
      "li",
      "a"
    ],
    "encoded": [
      "ul",
      "li",
      "a"
    ],
    "enforced": [
      "ul",
      "li",
      "a"
    ],
    "url-encoded": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Essential Server-side Security Guidelines",
      "Essential Server-side Security Checklist Items"
    ],
    "ul": [
      "Web Applications\n Server-side",
      "Validate All Input\n Use Prepared Statements for SQL Queries\n Encode Input Included in Output\n Force Reauthentication when Executing Critical Functionality\n Include Unique Tokens in HTTP Requests\n Use Role-based Authorization\n URL-Encode Data in HTTP Response Headers",
      "All Input Is Validated\n Prepared Statements Are Used for SQL Queries\n Input Included in Output Is Encoded\n Reauthentication Is Enforced When Executing Critical Functionality\n Unique Tokens Are Included in HTTP Requests\n Role-based Authorization Is Used\n Data in HTTP Response Headers Is URL-Encoded"
    ],
    "li": [
      "Web Applications",
      "Server-side",
      "Identify all database transactions. Locate all SQL queries throughout your application.",
      "Verify that each transaction uses prepared statements. Examine each SQL query that is being executed by the application to verify that prepared statements are used.",
      "Identify SQL queries. Locate all SQL queries throughout your application.",
      "Identify the parameters in each SQL query. After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.",
      "Use prepared statements for SQL queries. The exact syntax to use prepared statements is different for different programming languages and database access APIs. The basic steps for writing a prepared statement are: get a database handle, call the prepare function to make the prepared statement, use the bindParam function to bind prepared statement parameters to variables, load data into the variables, and call the execute function to execute the prepared statement.",
      "Validate All Input",
      "Use Prepared Statements for SQL Queries",
      "Encode Input Included in Output",
      "Force Reauthentication when Executing Critical Functionality",
      "Include Unique Tokens in HTTP Requests",
      "Use Role-based Authorization",
      "URL-Encode Data in HTTP Response Headers",
      "All Input Is Validated",
      "Prepared Statements Are Used for SQL Queries",
      "Input Included in Output Is Encoded",
      "Reauthentication Is Enforced When Executing Critical Functionality",
      "Unique Tokens Are Included in HTTP Requests",
      "Role-based Authorization Is Used",
      "Data in HTTP Response Headers Is URL-Encoded"
    ],
    "p": [
      "Ensure that type safe SQL parameters are used when performing database transactions.",
      "Prepared statements mitigate the number one risk for database-facing Web applications: SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database engine, not the actual application. It exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (') or double quote (\") characters). Using this method, an attacker inserts valid SQL statement fragments as part of user input so they, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating system.",
      "Prepared statements offer a simple yet efficient mitigation since they automatically contain user-input in a non-escaped form, passing the input as parameters, much like a function call. By parameterizing input parameters and type-enforcing them, user input is effectively filtered.",
      "To check if prepared statements are used:",
      "To use prepared statements to prevent SQL injection, follow these steps:"
    ],
    "ol": [
      "Identify all database transactions. Locate all SQL queries throughout your application. \n Verify that each transaction uses prepared statements. Examine each SQL query that is being executed by the application to verify that prepared statements are used.",
      "Identify SQL queries. Locate all SQL queries throughout your application.\n Identify the parameters in each SQL query. After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.\n Use prepared statements for SQL queries. The exact syntax to use prepared statements is different for different programming languages and database access APIs. The basic steps for writing a prepared statement are: get a database handle, call the prepare function to make the prepared statement, use the bindParam function to bind prepared statement parameters to variables, load data into the variables, and call the execute function to execute the prepared statement."
    ],
    "strong": [
      "Identify all database transactions.",
      "Verify that each transaction uses prepared statements.",
      "Identify SQL queries.",
      "Identify the parameters in each SQL query.",
      "Use prepared statements for SQL queries."
    ],
    "a": [
      "Validate All Input",
      "Use Prepared Statements for SQL Queries",
      "Encode Input Included in Output",
      "Force Reauthentication when Executing Critical Functionality",
      "Include Unique Tokens in HTTP Requests",
      "Use Role-based Authorization",
      "URL-Encode Data in HTTP Response Headers",
      "All Input Is Validated",
      "Prepared Statements Are Used for SQL Queries",
      "Input Included in Output Is Encoded",
      "Reauthentication Is Enforced When Executing Critical Functionality",
      "Unique Tokens Are Included in HTTP Requests",
      "Role-based Authorization Is Used",
      "Data in HTTP Response Headers Is URL-Encoded"
    ]
  },
  "links": [
    {
      "href": "e2c5d605-2b34-4e1c-80aa-211a0ad7b64f",
      "text": "Validate All Input"
    },
    {
      "href": "397488da-ce91-4768-9ad9-1e6928980d72",
      "text": "Use Prepared Statements for SQL Queries"
    },
    {
      "href": "496b6306-dca6-48b6-920e-67e768dbe334",
      "text": "Encode Input Included in Output"
    },
    {
      "href": "45d61f0a-c4d3-44f0-93b1-d8205cd13fbe",
      "text": "Force Reauthentication when Executing Critical Functionality"
    },
    {
      "href": "fdb460e6-5d18-4e35-a093-4b260155d79e",
      "text": "Include Unique Tokens in HTTP Requests"
    },
    {
      "href": "00000000-0000-0000-0000-0000007ecacc",
      "text": "Use Role-based Authorization"
    },
    {
      "href": "1445abaf-4bb9-474c-b7e4-7bf58fe80f39",
      "text": "URL-Encode Data in HTTP Response Headers"
    },
    {
      "href": "8dfa8088-a6cb-4062-8a44-0df8f2bc1cc4",
      "text": "All Input Is Validated"
    },
    {
      "href": "b5fb44c5-1702-42cf-b6be-894c511af7ac",
      "text": "Prepared Statements Are Used for SQL Queries"
    },
    {
      "href": "0ee9bc9f-c363-4a2d-be89-f84c069bda65",
      "text": "Input Included in Output Is Encoded"
    },
    {
      "href": "1c2b0859-c898-4f1c-b826-21392a7fc773",
      "text": "Reauthentication Is Enforced When Executing Critical Functionality"
    },
    {
      "href": "a2ef2a76-e562-4dd0-af9e-a6eb2b76c0d3",
      "text": "Unique Tokens Are Included in HTTP Requests"
    },
    {
      "href": "00000000-0000-0000-0000-0000008495ec",
      "text": "Role-based Authorization Is Used"
    },
    {
      "href": "3eb26600-9126-493a-a3cf-9d4b9815efc9",
      "text": "Data in HTTP Response Headers Is URL-Encoded"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> Web Applications</li>\n<li> Server-side</li>\n</ul><h2>What to Check For</h2><p>Ensure that type safe SQL parameters are used when performing database transactions.\n</p><h2>Why</h2><p>Prepared statements mitigate the number one risk for database-facing Web applications: SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database engine, not the actual application. It exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (') or double quote (\") characters). Using this method, an attacker inserts valid SQL statement fragments as part of user input so they, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating system.\n</p><p>\nPrepared statements offer a simple yet efficient mitigation since they automatically contain user-input in a non-escaped form, passing the input as parameters, much like a function call. By parameterizing input parameters and type-enforcing them, user input is effectively filtered. \n</p><h2>How to Check</h2><p>To check if prepared statements are used:\n</p><ol>\n<li> <strong>Identify all database transactions.</strong> Locate all SQL queries throughout your application. </li>\n<li> <strong>Verify that each transaction uses prepared statements.</strong> Examine each SQL query that is being executed by the application to verify that prepared statements are used.</li>\n</ol><h2>How to Fix</h2><p>To use prepared statements to prevent SQL injection, follow these steps:\n</p><ol>\n<li> <strong>Identify SQL queries.</strong> Locate all SQL queries throughout your application.</li>\n<li> <strong>Identify the parameters in each SQL query.</strong> After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.</li>\n<li> <strong>Use prepared statements for SQL queries.</strong> The exact syntax to use prepared statements is different for different programming languages and database access APIs. The basic steps for writing a prepared statement are: get a database handle, call the prepare function to make the prepared statement, use the bindParam function to bind prepared statement parameters to variables, load data into the variables, and call the execute function to execute the prepared statement. </li>\n</ol><h2>Essential Server-side Security Guidelines</h2><ul><li> <a href=\"e2c5d605-2b34-4e1c-80aa-211a0ad7b64f\">Validate All Input</a></li>\n<li> <a href=\"397488da-ce91-4768-9ad9-1e6928980d72\">Use Prepared Statements for SQL Queries</a></li>\n<li> <a href=\"496b6306-dca6-48b6-920e-67e768dbe334\">Encode Input Included in Output</a></li>\n<li> <a href=\"45d61f0a-c4d3-44f0-93b1-d8205cd13fbe\">Force Reauthentication when Executing Critical Functionality</a></li>\n<li> <a href=\"fdb460e6-5d18-4e35-a093-4b260155d79e\">Include Unique Tokens in HTTP Requests</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000007ecacc\">Use Role-based Authorization</a></li>\n<li> <a href=\"1445abaf-4bb9-474c-b7e4-7bf58fe80f39\">URL-Encode Data in HTTP Response Headers</a></li>\n</ul><h2>Essential Server-side Security Checklist Items</h2><ul><li> <a href=\"8dfa8088-a6cb-4062-8a44-0df8f2bc1cc4\">All Input Is Validated</a></li>\n<li> <a href=\"b5fb44c5-1702-42cf-b6be-894c511af7ac\">Prepared Statements Are Used for SQL Queries</a></li>\n<li> <a href=\"0ee9bc9f-c363-4a2d-be89-f84c069bda65\">Input Included in Output Is Encoded</a></li>\n<li> <a href=\"1c2b0859-c898-4f1c-b826-21392a7fc773\">Reauthentication Is Enforced When Executing Critical Functionality</a></li>\n<li> <a href=\"a2ef2a76-e562-4dd0-af9e-a6eb2b76c0d3\">Unique Tokens Are Included in HTTP Requests</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000008495ec\">Role-based Authorization Is Used</a></li>\n<li> <a href=\"3eb26600-9126-493a-a3cf-9d4b9815efc9\">Data in HTTP Response Headers Is URL-Encoded</a></li></ul>"
}