{
  "id": "da387bde-606c-4edb-9b11-950e238e237b",
  "checksum": "a126ed70220d3e56dbd86c861f4866fe8abb729e",
  "words": {
    "1": [
      "p",
      "p",
      "b"
    ],
    "2": [
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "3": [
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "4": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "5": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "8": [
      "div",
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "9": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "10": [
      "div",
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "31": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "40": [
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "100": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "120": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "300": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "555": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "12345": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "summary": [
      "h1"
    ],
    "this": [
      "p",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "how": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "pre",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "title",
      "title"
    ],
    "shows": [
      "p",
      "p",
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "title"
    ],
    "regular": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "div",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h1",
      "p",
      "p",
      "b",
      "ul",
      "li",
      "title"
    ],
    "expressions": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "div",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "b",
      "title"
    ],
    "within": [
      "p",
      "p",
      "p"
    ],
    "aspnet": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "title"
    ],
    "applications": [
      "p",
      "p",
      "p"
    ],
    "constrain": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "title"
    ],
    "untrusted": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "pre",
      "pre",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "title"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "a": [
      "p",
      "ul",
      "li",
      "div",
      "p",
      "h1",
      "h2",
      "h2",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "div",
      "pre",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "good": [
      "p"
    ],
    "way": [
      "p"
    ],
    "validate": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "h2",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "text": [
      "p",
      "p"
    ],
    "fields": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "names": [
      "p",
      "p",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "addresses": [
      "p",
      "p"
    ],
    "phone": [
      "p",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "numbers": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "td",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td"
    ],
    "other": [
      "p",
      "p",
      "p",
      "p"
    ],
    "user": [
      "p"
    ],
    "information": [
      "p",
      "ul",
      "li"
    ],
    "them": [
      "p"
    ],
    "apply": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "formatting": [
      "p",
      "ul",
      "li"
    ],
    "rules": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "check": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "lengths": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "captured": [
      "p"
    ],
    "with": [
      "p"
    ],
    "server": [
      "p",
      "p",
      "h2",
      "p"
    ],
    "controls": [
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "ul",
      "li",
      "div",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "h2",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "pre",
      "pre",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "ul",
      "li"
    ],
    "regularexpressionvalidator": [
      "p",
      "b",
      "ul",
      "li",
      "div",
      "ul",
      "li",
      "b",
      "p",
      "b",
      "h1",
      "p",
      "b",
      "h2",
      "ol",
      "li",
      "b",
      "p",
      "b"
    ],
    "control": [
      "p",
      "p",
      "ul",
      "li",
      "div",
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "forms": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "td"
    ],
    "query": [
      "p",
      "p"
    ],
    "strings": [
      "p"
    ],
    "cookies": [
      "p",
      "p"
    ],
    "html": [
      "p",
      "p"
    ],
    "systemtext.regularexpressions.regex": [
      "p",
      "b"
    ],
    "class": [
      "p",
      "ul",
      "li",
      "div",
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "h2",
      "ol",
      "li"
    ],
    "contents": [
      "h1"
    ],
    "objectives": [
      "ul",
      "li",
      "div",
      "h1"
    ],
    "overview": [
      "ul",
      "li",
      "div",
      "h1"
    ],
    "using": [
      "ul",
      "ul",
      "li",
      "div",
      "li",
      "div",
      "h1",
      "p",
      "h2",
      "h2",
      "h1",
      "p",
      "ol",
      "li",
      "b",
      "p"
    ],
    "regex": [
      "ul",
      "li",
      "div",
      "ul",
      "li",
      "b",
      "p",
      "b",
      "h1",
      "p",
      "b",
      "h2",
      "ol",
      "li",
      "b",
      "div",
      "div",
      "pre",
      "pre"
    ],
    "common": [
      "ul",
      "li",
      "div",
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "b",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "additional": [
      "ul",
      "li",
      "div",
      "h1"
    ],
    "resources": [
      "ul",
      "li",
      "div",
      "h1"
    ],
    "format": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "th",
      "tr",
      "td"
    ],
    "learn": [
      "ul",
      "li"
    ],
    "that": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "be": [
      "ul",
      "li",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "used": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "make": [
      "p"
    ],
    "unfounded": [
      "p",
      "p"
    ],
    "assumptions": [
      "p",
      "p"
    ],
    "about": [
      "p"
    ],
    "type": [
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "length": [
      "p",
      "p",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "or": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "range": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "application": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "td"
    ],
    "unlikely": [
      "p"
    ],
    "robust": [
      "p"
    ],
    "validation": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "become": [
      "p"
    ],
    "security": [
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "issue": [
      "p"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "attacker": [
      "p",
      "p",
      "p"
    ],
    "discovers": [
      "p"
    ],
    "have": [
      "p"
    ],
    "made": [
      "p"
    ],
    "then": [
      "p",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "td"
    ],
    "supply": [
      "p"
    ],
    "carefully": [
      "p"
    ],
    "crafted": [
      "p"
    ],
    "compromises": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "td"
    ],
    "attempting": [
      "p"
    ],
    "sql": [
      "p"
    ],
    "injection": [
      "p",
      "p"
    ],
    "cross-site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "avoid": [
      "p",
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "tax": [
      "p",
      "ul",
      "li"
    ],
    "identification": [
      "p",
      "ul",
      "li"
    ],
    "so": [
      "p"
    ],
    "on": [
      "p"
    ],
    "do": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "acceptable": [
      "ul",
      "li"
    ],
    "characters": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "div",
      "pre",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "for": [
      "ul",
      "li",
      "p",
      "p",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td",
      "ul",
      "li"
    ],
    "example": [
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "pattern-based": [
      "ul",
      "li"
    ],
    "zip": [
      "ul",
      "li",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "codes": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "postal": [
      "ul",
      "li"
    ],
    "require": [
      "ul",
      "li"
    ],
    "specific": [
      "ul",
      "li"
    ],
    "patterns": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "expression": [
      "p",
      "ol",
      "li",
      "div",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "th",
      "ul",
      "li"
    ],
    "support": [
      "p"
    ],
    "available": [
      "p"
    ],
    "through": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "div",
      "pre",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td",
      "title"
    ],
    "systemtext.regularexpressions": [
      "p",
      "b",
      "p",
      "b",
      "ol",
      "li",
      "b"
    ],
    "namespace": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "capture": [
      "p"
    ],
    "restrict": [
      "p"
    ],
    "valid": [
      "p",
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "strip": [
      "p"
    ],
    "unwanted": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "checks": [
      "p"
    ],
    "defining": [
      "p"
    ],
    "must": [
      "p",
      "p",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "match": [
      "p",
      "ol",
      "li",
      "div",
      "pre"
    ],
    "control's": [
      "h2"
    ],
    "add": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "page": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "set": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "controltovalidate": [
      "ol",
      "li",
      "b"
    ],
    "property": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "indicate": [
      "ol",
      "li"
    ],
    "which": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "validationexpression": [
      "ol",
      "li",
      "b"
    ],
    "appropriate": [
      "ol",
      "li"
    ],
    "errormessage": [
      "ol",
      "li",
      "b"
    ],
    "define": [
      "ol",
      "li"
    ],
    "message": [
      "ol",
      "li"
    ],
    "display": [
      "ol",
      "li"
    ],
    "fails": [
      "ol",
      "li"
    ],
    "name": [
      "p",
      "p",
      "ol",
      "li",
      "div",
      "pre",
      "p",
      "pre",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "field": [
      "p",
      "p",
      "p",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "th",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "&#37;&#64;": [
      "div",
      "pre",
      "div",
      "pre"
    ],
    "language=\"c#\"": [
      "div",
      "pre",
      "div",
      "pre"
    ],
    "&#37><form": [
      "div",
      "pre"
    ],
    "id=\"form1\"": [
      "div",
      "pre",
      "div",
      "pre"
    ],
    "runat=\"server\"&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "asp:textbox": [
      "div",
      "pre"
    ],
    "id=\"txtname\"": [
      "div",
      "pre"
    ],
    "runat=\"server\"/&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "asp:button": [
      "div",
      "pre"
    ],
    "id=\"btnsubmit\"": [
      "div",
      "pre"
    ],
    "runat=\"server\"": [
      "div",
      "pre",
      "pre"
    ],
    "text=\"submit\"": [
      "div",
      "pre"
    ],
    "/&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "asp:regularexpressionvalidator": [
      "div",
      "pre"
    ],
    "id=\"regexpname\"": [
      "div",
      "pre"
    ],
    "runat=\"server\"&nbsp&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre"
    ],
    "errormessage=\"this": [
      "div",
      "pre"
    ],
    "does": [
      "div",
      "pre",
      "ol",
      "li",
      "div",
      "pre"
    ],
    "not": [
      "div",
      "pre",
      "p",
      "ol",
      "li",
      "div",
      "pre",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "validate\"": [
      "div",
      "pre"
    ],
    "controltovalidate=\"txtname\"&nbsp&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "validationexpression=\"&#94&#91;a-za-z'.\\s&#93;&#123;1,40&#125;&#36;\"": [
      "div",
      "pre"
    ],
    "/</form>": [
      "div",
      "pre"
    ],
    "preceding": [
      "p"
    ],
    "code": [
      "p",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td"
    ],
    "constrains": [
      "p"
    ],
    "alphabetic": [
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "lowercase": [
      "p",
      "div",
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "uppercase,": [
      "p"
    ],
    "space": [
      "p",
      "p",
      "div",
      "pre"
    ],
    "single": [
      "p"
    ],
    "quotation": [
      "p"
    ],
    "mark": [
      "p"
    ],
    "apostrophe": [
      "p"
    ],
    "o'dell": [
      "p"
    ],
    "period": [
      "p"
    ],
    "dot": [
      "p"
    ],
    "character": [
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "addition": [
      "p"
    ],
    "constrained": [
      "p"
    ],
    "&#94": [
      "h2",
      "p",
      "b",
      "b"
    ],
    "&#36": [
      "h2",
      "p",
      "b"
    ],
    "enclosing": [
      "p"
    ],
    "caret": [
      "p"
    ],
    "&#94;)": [
      "p"
    ],
    "dollar": [
      "p"
    ],
    "sign": [
      "p",
      "p"
    ],
    "&#36;)markers": [
      "p"
    ],
    "ensures": [
      "p"
    ],
    "consists": [
      "p"
    ],
    "desired": [
      "p"
    ],
    "content": [
      "p",
      "p"
    ],
    "nothing": [
      "p"
    ],
    "else": [
      "p"
    ],
    "matches": [
      "p",
      "p"
    ],
    "position": [
      "p",
      "p"
    ],
    "at": [
      "p",
      "p",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td",
      "ul",
      "li"
    ],
    "beginning": [
      "p",
      "p"
    ],
    "string": [
      "p",
      "p",
      "p",
      "pre"
    ],
    "end": [
      "p",
      "p"
    ],
    "omit": [
      "p"
    ],
    "these": [
      "p"
    ],
    "markers": [
      "p"
    ],
    "could": [
      "p"
    ],
    "affix": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "bypass": [
      "p"
    ],
    "filter": [
      "p"
    ],
    "&#36)": [
      "b"
    ],
    "means": [
      "p",
      "p"
    ],
    "cannot": [
      "p"
    ],
    "need": [
      "p"
    ],
    "from": [
      "p",
      "div",
      "pre",
      "p"
    ],
    "sources": [
      "p"
    ],
    "than": [
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "form": [
      "p",
      "div",
      "pre"
    ],
    "parameters": [
      "p"
    ],
    "statement": [
      "ol",
      "li"
    ],
    "reference": [
      "ol",
      "li"
    ],
    "call": [
      "ol",
      "li"
    ],
    "ismatch": [
      "ol",
      "li",
      "b",
      "p",
      "b"
    ],
    "method": [
      "ol",
      "li",
      "p"
    ],
    "shown": [
      "ol",
      "li",
      "p"
    ],
    "//": [
      "ol",
      "ol",
      "li",
      "li",
      "div",
      "div",
      "pre",
      "pre"
    ],
    "instance": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "methodregex": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "reg": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "=": [
      "ol",
      "li",
      "div",
      "pre",
      "pre",
      "div",
      "pre"
    ],
    "new": [
      "ol",
      "li",
      "div",
      "pre",
      "div",
      "pre"
    ],
    "regex&#64;\"&#94;&#91;a-za-z'.&#93;&#123;1,40&#125;&#36;\");response.write(reg.ismatch(txtname.text));//": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "static": [
      "ol",
      "li",
      "div",
      "pre",
      "p"
    ],
    "methodif": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "&#33;regex.ismatch(txtname.text,": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "&#64\"&#94;&#91;a-za-z'.&#93;&#123;1,40&#125;&#36;\"))&#123;&nbsp;": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "schema&#125": [
      "ol",
      "li",
      "div",
      "pre"
    ],
    "performance": [
      "p"
    ],
    "reasons": [
      "p"
    ],
    "where": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "unnecessary": [
      "p"
    ],
    "object": [
      "p"
    ],
    "creation": [
      "p"
    ],
    "client-side": [
      "p"
    ],
    "&#37>": [
      "div",
      "pre"
    ],
    "html&nbsp;": [
      "div",
      "pre"
    ],
    "&nbsp;": [
      "div",
      "pre"
    ],
    "body>&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "method=\"post\"": [
      "div",
      "pre"
    ],
    "action=\"htmlcontrolsaspx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "name=\"txtname\"": [
      "div",
      "pre"
    ],
    "type=\"text\"": [
      "div",
      "pre"
    ],
    "/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "name=\"submitbtn\"": [
      "div",
      "pre"
    ],
    "type=\"submit\"": [
      "div",
      "pre"
    ],
    "value=\"submit\"/&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "/form>&nbsp;": [
      "div",
      "pre"
    ],
    "/body></html>": [
      "div",
      "pre"
    ],
    "script": [
      "pre"
    ],
    "&nbsp": [
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "void": [
      "pre"
    ],
    "page_loadobject": [
      "pre"
    ],
    "sender": [
      "pre"
    ],
    "eventargs": [
      "pre"
    ],
    "e&nbsp;": [
      "pre"
    ],
    "&#123&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "request.requesttype": [
      "pre"
    ],
    "==": [
      "pre"
    ],
    "\"post\"&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "&#123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "requestform&#91;\"txtname\"&#93;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "name.length": [
      "pre"
    ],
    "0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "&#123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "system.text.regularexpressions.regex.ismatch(name,": [
      "pre"
    ],
    "&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "\"&#94&#91;a-za-z'.&#93;&#123;1,40&#125;&#36;\"))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "responsewrite(\"valid": [
      "pre"
    ],
    "name\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "else&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "responsewrite(\"invalid": [
      "pre"
    ],
    "name\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "&#125&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "&#125&nbsp;": [
      "pre"
    ],
    "&#125": [
      "pre"
    ],
    "/script>": [
      "pre"
    ],
    "comments": [
      "h2",
      "p"
    ],
    "much": [
      "p"
    ],
    "easier": [
      "p"
    ],
    "understand": [
      "p"
    ],
    "syntax": [
      "p"
    ],
    "comment": [
      "p"
    ],
    "each": [
      "p"
    ],
    "component": [
      "p"
    ],
    "number": [
      "p",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "#).": [
      "p"
    ],
    "enable": [
      "p"
    ],
    "also": [
      "p"
    ],
    "specify": [
      "p"
    ],
    "regexoptionsignorepatternwhitespace,": [
      "p"
    ],
    "non-escaped": [
      "p"
    ],
    "white": [
      "p"
    ],
    "ignored": [
      "p"
    ],
    "#": [
      "b",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "regexoptionsignorepatternwhitespace": [
      "b"
    ],
    "regex&#64;\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "&#94&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "anchor": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "start&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "?=.&#42;\\d)&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "contain": [
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "least": [
      "div",
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "one": [
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "numeric": [
      "div",
      "pre",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "tr",
      "tr",
      "td",
      "td",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "character&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre"
    ],
    "?=.&#42;&#91;a-z&#93;)&nbsp;": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "uppercase": [
      "div",
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&#123;8,10&#125;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "length&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "\\s&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "allows": [
      "div",
      "pre",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "&#36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "div",
      "pre"
    ],
    "end\"": [
      "div",
      "pre"
    ],
    "regexoptionsignorepatternwhitespace);": [
      "div",
      "pre"
    ],
    "some": [
      "p",
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "table": [
      "p",
      "p",
      "b"
    ],
    "samples": [
      "div",
      "table",
      "tbody",
      "tr",
      "th"
    ],
    "description": [
      "div",
      "table",
      "tbody",
      "tr",
      "th"
    ],
    "&#94&#91;a-za-z''-'\\s&#93;&#123;1,40&#125;&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "john": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "doeo'dell": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "validates": [
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "up": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "few": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "special": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "modify": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "list": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "social": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&#94\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "111-11-1111": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "supplied": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "consist": [
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "followed": [
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "td"
    ],
    "dash": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "&#94&#91;01&#93;?&#91;-": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&#93;?(\\(&#91;2-9&#93;\\d&#123;2&#125;\\)&#124;&#91;2-9&#93;\\d&#123;2&#125;)&#91;-": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&#93;?\\d&#123;3&#125;&#91;-": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&#93;?\\d&#123;4&#125;&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "425)": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "555-0123425-555-0123425": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "01231-425-555-0123": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "us.": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "it": [
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "optionally": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "enclosed": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "parentheses": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "e-mail": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "&#94(&#91;0-9a-za-z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-za-z&#93;)&#42;&#64;(&#91;0-9a-za-z&#93;&#91;-\\w&#93;&#42;&#91;0-9a-za-z&#93;\\.)&#43;&#91;a-za-z&#93;&#123;2,9&#125;)&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "someone&#64example.com": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "address": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "url": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "&#94(ht&#124;f)tp(s?)\\:\\/\\/&#91;0-9a-za-z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-za-z&#93;)&#42;(:(0-9)&#42;)&#42;(\\/?)(&#91;a-za-z0-9\\-\\.\\?\\,\\'\\/\\\\\\&#43;&&#37;\\&#36;#_&#93;&#42;)?&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "http//www.microsoft.com": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&#94(\\d&#123;5&#125;-\\d&#123;4&#125;&#124;\\d&#123;5&#125;&#124;\\d&#123;9&#125;)&#36;&#124;&#94;(&#91;a-za-z&#93;\\d&#91;a-za-z&#93;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "\\d&#91a-za-z&#93;\\d)&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "password": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "?&#33;&#94;&#91;0-9&#93;&#42;&#36;)(?&#33;&#94;&#91;a-za-z&#93;&#42;&#36;)&#94;(&#91;a-za-z0-9&#93;&#123;8,10&#125;)&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "strong": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "between": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "digit": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "non-": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "negative": [
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "integer": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "&#94\\d&#43;&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "0986": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "contains": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "greater": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "zero": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "currency": [
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "&#94\\d&#43;(\\.\\d\\d)?&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "positive": [
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "amount": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "there": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "decimal": [
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "point": [
      "div",
      "div",
      "div",
      "div",
      "table",
      "table",
      "table",
      "table",
      "tbody",
      "tbody",
      "tbody",
      "tbody",
      "tr",
      "tr",
      "td",
      "td",
      "tr",
      "tr",
      "td",
      "td"
    ],
    "requires": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "after": [
      "div",
      "div",
      "table",
      "table",
      "tbody",
      "tbody",
      "tr",
      "td",
      "tr",
      "td"
    ],
    "but": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "&#94(-)?\\d&#43;(\\.\\d\\d)?&#36;": [
      "div",
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "more": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "tutorial": [
      "ul",
      "li"
    ],
    "http//www.regular-expressions.info/tutorial.html.": [
      "ul",
      "li"
    ],
    "http//www.regular-expressions.info/tutorial.html": [
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Summary",
      "Contents",
      "Objectives",
      "Overview",
      "Using a RegularExpressionValidator Control",
      "Using the Regex Class",
      "Common Regular Expressions",
      "Additional Resources"
    ],
    "p": [
      "This How to shows how you can use regular expressions within ASP.NET applications to constrain untrusted input. Regular expressions are a good way to validate text fields such as names, addresses, phone numbers, and other user information. You can use them to constrain input, apply formatting rules, and check lengths. To validate input captured with server controls, you can use the RegularExpressionValidator control. To validate other forms of input, such as query strings, cookies, and HTML control input, you can use the System.Text.RegularExpressions.Regex class.",
      "This How to shows how you can use regular expressions within ASP.NET applications to constrain untrusted input.",
      "If you make unfounded assumptions about the type, length, format, or range of input, your application is unlikely to be robust. Input validation can become a security issue if an attacker discovers that you have made unfounded assumptions. The attacker can then supply carefully crafted input that compromises your application by attempting SQL injection, cross-site scripting, and other injection attacks. To avoid such vulnerability, you should validate text fields (such as names, addresses, tax identification numbers, and so on) and use regular expressions to do the following:",
      "Regular expression support is available to ASP.NET applications through the RegularExpressionValidator control and the Regex class in the System.Text.RegularExpressions namespace.",
      "If you capture input by using server controls, you can use the RegularExpressionValidator control to validate that input. You can use regular expressions to restrict the range of valid characters, to strip unwanted characters, and to perform length and format checks. You can constrain the input format by defining patterns that the input must match.",
      "The following example shows a RegularExpressionValidator control used to validate a name field.",
      "The regular expression used in the preceding code example constrains an input name field to alphabetic characters (lowercase and uppercase), space characters, the single quotation mark (or apostrophe) for names such as O'Dell, and the period or dot character. In addition, the field length is constrained to 40 characters.",
      "Enclosing the expression in the caret (&#94;) and dollar sign (&#36;)markers ensures that the expression consists of the desired content and nothing else. A &#94; matches the position at the beginning of the input string and a &#36; matches the position at the end of the input string. If you omit these markers, an attacker could affix malicious input to the beginning or end of valid content and bypass your filter.",
      "If you are not using server controls (which means you cannot use the validation controls) or if you need to validate input from sources other than form fields, such as query string parameters or cookies, you can use the Regex class within the System.Text.RegularExpressions namespace.",
      "For performance reasons, you should use the static IsMatch method where possible to avoid unnecessary object creation.",
      "The following example shows how to use a regular expression to validate a name input through a regular client-side HTML control.",
      "Regular expressions are much easier to understand if you use the following syntax and comment each component of the expression by using a number sign (#). To enable comments, you must also specify RegexOptions.IgnorePatternWhitespace, which means that non-escaped white space is ignored.",
      "Some common regular expressions are shown in Table 1.",
      "Table 1. Common Regular Expressions",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "RegularExpressionValidator",
      "System.Text.RegularExpressions.Regex",
      "RegularExpressionValidator",
      "Regex",
      "RegularExpressionValidator",
      "Regex",
      "System.Text.RegularExpressions",
      "RegularExpressionValidator",
      "RegularExpressionValidator",
      "ControlToValidate",
      "ValidationExpression",
      "ErrorMessage",
      "RegularExpressionValidator",
      "&#94;",
      "&#36;)",
      "&#94;",
      "&#36;",
      "Regex",
      "System.Text.RegularExpressions",
      "using",
      "System.Text.RegularExpressions",
      "IsMatch",
      "Regex",
      "IsMatch",
      "#",
      "RegexOptions.IgnorePatternWhitespace",
      "Table 1. Common Regular Expressions"
    ],
    "ul": [
      "Objectives\n      \n        Overview\n        \n          Using a RegularExpressionValidator Control\n          \n            Using the Regex Class\n            \n              Common Regular Expressions\n              \n                Additional Resources",
      "Use regular expressions to constrain input, apply format rules, and check lengths. Use the ASP.NET RegularExpressionValidator control to constrain and validate input. Use the Regex class to constrain and validate input. Learn common regular expressions that can be used to constrain input.",
      "Constrain the acceptable range of input characters. Apply formatting rules. For example, pattern-based fields, such as tax identification numbers, ZIP Codes, or postal codes, require specific patterns of input characters. Check lengths.",
      "For more information, see the regular expression tutorial at http://www.regular-expressions.info/tutorial.html."
    ],
    "li": [
      "Objectives",
      "Overview",
      "Using a RegularExpressionValidator Control",
      "Using the Regex Class",
      "Common Regular Expressions",
      "Additional Resources",
      "Use regular expressions to constrain input, apply format rules, and check lengths.",
      "Use the ASP.NET RegularExpressionValidator control to constrain and validate input.",
      "Use the Regex class to constrain and validate input.",
      "Learn common regular expressions that can be used to constrain input.",
      "Constrain the acceptable range of input characters.",
      "Apply formatting rules. For example, pattern-based fields, such as tax identification numbers, ZIP Codes, or postal codes, require specific patterns of input characters.",
      "Check lengths.",
      "Add a RegularExpressionValidator control to your page.",
      "Set the ControlToValidate property to indicate which control to validate.",
      "Set the ValidationExpression property to an appropriate regular expression.",
      "Set the ErrorMessage property to define the message to display if the validation fails.",
      "Add a using statement to reference the System.Text.RegularExpressions namespace.",
      "Call the IsMatch method of the Regex class, as shown in the following example. // Instance method:Regex reg = new Regex(&#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\");Response.Write(reg.IsMatch(txtName.Text));// Static method:if (&#33;Regex.IsMatch(txtName.Text, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\"))&#123;&nbsp; // Name does not match schema&#125;",
      "For more information, see the regular expression tutorial at http://www.regular-expressions.info/tutorial.html."
    ],
    "div": [
      "Objectives",
      "Overview",
      "Using a RegularExpressionValidator Control",
      "Using the Regex Class",
      "Common Regular Expressions",
      "Additional Resources",
      "<&#37;&#64; language=\"C#\" &#37;><form id=\"form1\" runat=\"server\">&nbsp;&nbsp;&nbsp; <asp:TextBox ID=\"txtName\" runat=\"server\"/>&nbsp;&nbsp;&nbsp; <asp:Button ID=\"btnSubmit\" runat=\"server\" Text=\"Submit\" />&nbsp;&nbsp;&nbsp; <asp:RegularExpressionValidator ID=\"regexpName\" runat=\"server\"&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ErrorMessage=\"This expression does not validate.\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlToValidate=\"txtName\"&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValidationExpression=\"&#94;&#91;a-zA-Z'.\\s&#93;&#123;1,40&#125;&#36;\" /></form>",
      "// Instance method:Regex reg = new Regex(&#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\");Response.Write(reg.IsMatch(txtName.Text));// Static method:if (&#33;Regex.IsMatch(txtName.Text, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\"))&#123;&nbsp; // Name does not match schema&#125;",
      "<&#37;&#64; Page Language=\"C#\" &#37;>\n    <html&nbsp; >&nbsp; <body>&nbsp;&nbsp;&nbsp; <form id=\"form1\" method=\"post\" action=\"HtmlControls.aspx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input name=\"txtName\" type=\"text\" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input name=\"submitBtn\" type=\"Submit\" value=\"Submit\"/>&nbsp;&nbsp;&nbsp; </form>&nbsp; </body></html>",
      "Regex regex = new Regex(&#64;\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#94;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # anchor at the start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (?=.&#42;\\d)&nbsp;&nbsp;&nbsp;&nbsp; # must contain at least one numeric character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (?=.&#42;&#91;a-z&#93;)&nbsp; # must contain one lowercase character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (?=.&#42;&#91;A-Z&#93;)&nbsp; # must contain one uppercase character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .&#123;8,10&#125;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # From 8 to 10 characters in length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # allows a space &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#36;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # anchor at the end\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegexOptions.IgnorePatternWhitespace);",
      "Field \n          Expression\n          Format Samples\n          Description\n        \n        \n          Name\n          &#94;&#91;a-zA-Z''-'\\s&#93;&#123;1,40&#125;&#36;\n          John DoeO'Dell\n          Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.\n        \n        \n          Social Security Number\n          &#94;\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;&#36;\n          111-11-1111\n          Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.\n        \n        \n          Phone Number\n          &#94;&#91;01&#93;?&#91;- .&#93;?(\\(&#91;2-9&#93;\\d&#123;2&#125;\\)&#124;&#91;2-9&#93;\\d&#123;2&#125;)&#91;- .&#93;?\\d&#123;3&#125;&#91;- .&#93;?\\d&#123;4&#125;&#36;\n          (425) 555-0123425-555-0123425 555 01231-425-555-0123\n          Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. \n        \n        \n          E-mail \n          &#94;(&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;&#64;(&#91;0-9a-zA-Z&#93;&#91;-\\w&#93;&#42;&#91;0-9a-zA-Z&#93;\\.)&#43;&#91;a-zA-Z&#93;&#123;2,9&#125;)&#36;\n          someone&#64;example.com\n          Validates an e-mail address.\n        \n        \n          URL\n          &#94;(ht&#124;f)tp(s?)\\:\\/\\/&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;(:(0-9)&#42;)&#42;(\\/?)(&#91;a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\&#43;&&#37;\\&#36;#_&#93;&#42;)?&#36;\n          http://www.microsoft.com\n          Validates a URL \n        \n        \n          ZIP Code\n          &#94;(\\d&#123;5&#125;-\\d&#123;4&#125;&#124;\\d&#123;5&#125;&#124;\\d&#123;9&#125;)&#36;&#124;&#94;(&#91;a-zA-Z&#93;\\d&#91;a-zA-Z&#93; \\d&#91;a-zA-Z&#93;\\d)&#36;\n          12345\n          Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.\n        \n        \n          Password\n          (?&#33;&#94;&#91;0-9&#93;&#42;&#36;)(?&#33;&#94;&#91;a-zA-Z&#93;&#42;&#36;)&#94;(&#91;a-zA-Z0-9&#93;&#123;8,10&#125;)&#36;\n          &nbsp;\n          Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.\n        \n        \n          Non- negative integer\n          &#94;\\d&#43;&#36;\n          0986\n          Validates that the field contains an integer greater than zero.\n        \n        \n          Currency (non- negative)\n          &#94;\\d&#43;(\\.\\d\\d)?&#36;\n          1.00\n          Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.\n        \n        \n          Currency (positive or negative)\n          &#94;(-)?\\d&#43;(\\.\\d\\d)?&#36;\n          1.20\n          Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point."
    ],
    "h2": [
      "To validate a server control's input using a RegularExpressionValidator",
      "Using &#94; and &#36;",
      "To use the Regex class",
      "Use Regular Expression Comments"
    ],
    "ol": [
      "Add a RegularExpressionValidator control to your page. Set the ControlToValidate property to indicate which control to validate. Set the ValidationExpression property to an appropriate regular expression. Set the ErrorMessage property to define the message to display if the validation fails.",
      "Add a using statement to reference the System.Text.RegularExpressions namespace. Call the IsMatch method of the Regex class, as shown in the following example. // Instance method:Regex reg = new Regex(&#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\");Response.Write(reg.IsMatch(txtName.Text));// Static method:if (&#33;Regex.IsMatch(txtName.Text, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\"))&#123;&nbsp; // Name does not match schema&#125;"
    ],
    "pre": [
      "<&#37;&#64; language=\"C#\" &#37;><form id=\"form1\" runat=\"server\">&nbsp;&nbsp;&nbsp; <asp:TextBox ID=\"txtName\" runat=\"server\"/>&nbsp;&nbsp;&nbsp; <asp:Button ID=\"btnSubmit\" runat=\"server\" Text=\"Submit\" />&nbsp;&nbsp;&nbsp; <asp:RegularExpressionValidator ID=\"regexpName\" runat=\"server\"&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ErrorMessage=\"This expression does not validate.\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlToValidate=\"txtName\"&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValidationExpression=\"&#94;&#91;a-zA-Z'.\\s&#93;&#123;1,40&#125;&#36;\" /></form>",
      "// Instance method:Regex reg = new Regex(&#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\");Response.Write(reg.IsMatch(txtName.Text));// Static method:if (&#33;Regex.IsMatch(txtName.Text, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#64;\"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\"))&#123;&nbsp; // Name does not match schema&#125;",
      "<&#37;&#64; Page Language=\"C#\" &#37;>",
      "<html&nbsp; >&nbsp; <body>&nbsp;&nbsp;&nbsp; <form id=\"form1\" method=\"post\" action=\"HtmlControls.aspx\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input name=\"txtName\" type=\"text\" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input name=\"submitBtn\" type=\"Submit\" value=\"Submit\"/>&nbsp;&nbsp;&nbsp; </form>&nbsp; </body></html>",
      "<script runat=\"server\">",
      "&nbsp; void Page_Load(object sender, EventArgs e)&nbsp; &#123;&nbsp;&nbsp;&nbsp; if (Request.RequestType == \"POST\")&nbsp;&nbsp;&nbsp; &#123;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string name = Request.Form&#91;\"txtName\"&#93;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (name.Length > 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (System.Text.RegularExpressions.Regex.IsMatch(name, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"&#94;&#91;a-zA-Z'.&#93;&#123;1,40&#125;&#36;\"))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Write(\"Valid name\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response.Write(\"Invalid name\");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;&nbsp;&nbsp;&nbsp; &#125;&nbsp; &#125;",
      "</script>",
      "Regex regex = new Regex(&#64;\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#94;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # anchor at the start&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (?=.&#42;\\d)&nbsp;&nbsp;&nbsp;&nbsp; # must contain at least one numeric character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (?=.&#42;&#91;a-z&#93;)&nbsp; # must contain one lowercase character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (?=.&#42;&#91;A-Z&#93;)&nbsp; # must contain one uppercase character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .&#123;8,10&#125;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # From 8 to 10 characters in length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # allows a space &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#36;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # anchor at the end\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegexOptions.IgnorePatternWhitespace);"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "table": [
      "Field \n          Expression\n          Format Samples\n          Description\n        \n        \n          Name\n          &#94;&#91;a-zA-Z''-'\\s&#93;&#123;1,40&#125;&#36;\n          John DoeO'Dell\n          Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.\n        \n        \n          Social Security Number\n          &#94;\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;&#36;\n          111-11-1111\n          Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.\n        \n        \n          Phone Number\n          &#94;&#91;01&#93;?&#91;- .&#93;?(\\(&#91;2-9&#93;\\d&#123;2&#125;\\)&#124;&#91;2-9&#93;\\d&#123;2&#125;)&#91;- .&#93;?\\d&#123;3&#125;&#91;- .&#93;?\\d&#123;4&#125;&#36;\n          (425) 555-0123425-555-0123425 555 01231-425-555-0123\n          Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. \n        \n        \n          E-mail \n          &#94;(&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;&#64;(&#91;0-9a-zA-Z&#93;&#91;-\\w&#93;&#42;&#91;0-9a-zA-Z&#93;\\.)&#43;&#91;a-zA-Z&#93;&#123;2,9&#125;)&#36;\n          someone&#64;example.com\n          Validates an e-mail address.\n        \n        \n          URL\n          &#94;(ht&#124;f)tp(s?)\\:\\/\\/&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;(:(0-9)&#42;)&#42;(\\/?)(&#91;a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\&#43;&&#37;\\&#36;#_&#93;&#42;)?&#36;\n          http://www.microsoft.com\n          Validates a URL \n        \n        \n          ZIP Code\n          &#94;(\\d&#123;5&#125;-\\d&#123;4&#125;&#124;\\d&#123;5&#125;&#124;\\d&#123;9&#125;)&#36;&#124;&#94;(&#91;a-zA-Z&#93;\\d&#91;a-zA-Z&#93; \\d&#91;a-zA-Z&#93;\\d)&#36;\n          12345\n          Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.\n        \n        \n          Password\n          (?&#33;&#94;&#91;0-9&#93;&#42;&#36;)(?&#33;&#94;&#91;a-zA-Z&#93;&#42;&#36;)&#94;(&#91;a-zA-Z0-9&#93;&#123;8,10&#125;)&#36;\n          &nbsp;\n          Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.\n        \n        \n          Non- negative integer\n          &#94;\\d&#43;&#36;\n          0986\n          Validates that the field contains an integer greater than zero.\n        \n        \n          Currency (non- negative)\n          &#94;\\d&#43;(\\.\\d\\d)?&#36;\n          1.00\n          Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.\n        \n        \n          Currency (positive or negative)\n          &#94;(-)?\\d&#43;(\\.\\d\\d)?&#36;\n          1.20\n          Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point."
    ],
    "tbody": [
      "Field \n          Expression\n          Format Samples\n          Description\n        \n        \n          Name\n          &#94;&#91;a-zA-Z''-'\\s&#93;&#123;1,40&#125;&#36;\n          John DoeO'Dell\n          Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.\n        \n        \n          Social Security Number\n          &#94;\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;&#36;\n          111-11-1111\n          Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.\n        \n        \n          Phone Number\n          &#94;&#91;01&#93;?&#91;- .&#93;?(\\(&#91;2-9&#93;\\d&#123;2&#125;\\)&#124;&#91;2-9&#93;\\d&#123;2&#125;)&#91;- .&#93;?\\d&#123;3&#125;&#91;- .&#93;?\\d&#123;4&#125;&#36;\n          (425) 555-0123425-555-0123425 555 01231-425-555-0123\n          Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. \n        \n        \n          E-mail \n          &#94;(&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;&#64;(&#91;0-9a-zA-Z&#93;&#91;-\\w&#93;&#42;&#91;0-9a-zA-Z&#93;\\.)&#43;&#91;a-zA-Z&#93;&#123;2,9&#125;)&#36;\n          someone&#64;example.com\n          Validates an e-mail address.\n        \n        \n          URL\n          &#94;(ht&#124;f)tp(s?)\\:\\/\\/&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;(:(0-9)&#42;)&#42;(\\/?)(&#91;a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\&#43;&&#37;\\&#36;#_&#93;&#42;)?&#36;\n          http://www.microsoft.com\n          Validates a URL \n        \n        \n          ZIP Code\n          &#94;(\\d&#123;5&#125;-\\d&#123;4&#125;&#124;\\d&#123;5&#125;&#124;\\d&#123;9&#125;)&#36;&#124;&#94;(&#91;a-zA-Z&#93;\\d&#91;a-zA-Z&#93; \\d&#91;a-zA-Z&#93;\\d)&#36;\n          12345\n          Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.\n        \n        \n          Password\n          (?&#33;&#94;&#91;0-9&#93;&#42;&#36;)(?&#33;&#94;&#91;a-zA-Z&#93;&#42;&#36;)&#94;(&#91;a-zA-Z0-9&#93;&#123;8,10&#125;)&#36;\n          &nbsp;\n          Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.\n        \n        \n          Non- negative integer\n          &#94;\\d&#43;&#36;\n          0986\n          Validates that the field contains an integer greater than zero.\n        \n        \n          Currency (non- negative)\n          &#94;\\d&#43;(\\.\\d\\d)?&#36;\n          1.00\n          Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.\n        \n        \n          Currency (positive or negative)\n          &#94;(-)?\\d&#43;(\\.\\d\\d)?&#36;\n          1.20\n          Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point."
    ],
    "tr": [
      "Field \n          Expression\n          Format Samples\n          Description",
      "Name\n          &#94;&#91;a-zA-Z''-'\\s&#93;&#123;1,40&#125;&#36;\n          John DoeO'Dell\n          Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.",
      "Social Security Number\n          &#94;\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;&#36;\n          111-11-1111\n          Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.",
      "Phone Number\n          &#94;&#91;01&#93;?&#91;- .&#93;?(\\(&#91;2-9&#93;\\d&#123;2&#125;\\)&#124;&#91;2-9&#93;\\d&#123;2&#125;)&#91;- .&#93;?\\d&#123;3&#125;&#91;- .&#93;?\\d&#123;4&#125;&#36;\n          (425) 555-0123425-555-0123425 555 01231-425-555-0123\n          Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters.",
      "E-mail \n          &#94;(&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;&#64;(&#91;0-9a-zA-Z&#93;&#91;-\\w&#93;&#42;&#91;0-9a-zA-Z&#93;\\.)&#43;&#91;a-zA-Z&#93;&#123;2,9&#125;)&#36;\n          someone&#64;example.com\n          Validates an e-mail address.",
      "URL\n          &#94;(ht&#124;f)tp(s?)\\:\\/\\/&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;(:(0-9)&#42;)&#42;(\\/?)(&#91;a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\&#43;&&#37;\\&#36;#_&#93;&#42;)?&#36;\n          http://www.microsoft.com\n          Validates a URL",
      "ZIP Code\n          &#94;(\\d&#123;5&#125;-\\d&#123;4&#125;&#124;\\d&#123;5&#125;&#124;\\d&#123;9&#125;)&#36;&#124;&#94;(&#91;a-zA-Z&#93;\\d&#91;a-zA-Z&#93; \\d&#91;a-zA-Z&#93;\\d)&#36;\n          12345\n          Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.",
      "Password\n          (?&#33;&#94;&#91;0-9&#93;&#42;&#36;)(?&#33;&#94;&#91;a-zA-Z&#93;&#42;&#36;)&#94;(&#91;a-zA-Z0-9&#93;&#123;8,10&#125;)&#36;\n          &nbsp;\n          Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.",
      "Non- negative integer\n          &#94;\\d&#43;&#36;\n          0986\n          Validates that the field contains an integer greater than zero.",
      "Currency (non- negative)\n          &#94;\\d&#43;(\\.\\d\\d)?&#36;\n          1.00\n          Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.",
      "Currency (positive or negative)\n          &#94;(-)?\\d&#43;(\\.\\d\\d)?&#36;\n          1.20\n          Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point."
    ],
    "th": [
      "Field",
      "Expression",
      "Format Samples",
      "Description"
    ],
    "td": [
      "Name",
      "&#94;&#91;a-zA-Z''-'\\s&#93;&#123;1,40&#125;&#36;",
      "John DoeO'Dell",
      "Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.",
      "Social Security Number",
      "&#94;\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;&#36;",
      "111-11-1111",
      "Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.",
      "Phone Number",
      "&#94;&#91;01&#93;?&#91;- .&#93;?(\\(&#91;2-9&#93;\\d&#123;2&#125;\\)&#124;&#91;2-9&#93;\\d&#123;2&#125;)&#91;- .&#93;?\\d&#123;3&#125;&#91;- .&#93;?\\d&#123;4&#125;&#36;",
      "(425) 555-0123425-555-0123425 555 01231-425-555-0123",
      "Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters.",
      "E-mail",
      "&#94;(&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;&#64;(&#91;0-9a-zA-Z&#93;&#91;-\\w&#93;&#42;&#91;0-9a-zA-Z&#93;\\.)&#43;&#91;a-zA-Z&#93;&#123;2,9&#125;)&#36;",
      "someone&#64;example.com",
      "Validates an e-mail address.",
      "URL",
      "&#94;(ht&#124;f)tp(s?)\\:\\/\\/&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;(:(0-9)&#42;)&#42;(\\/?)(&#91;a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\&#43;&&#37;\\&#36;#_&#93;&#42;)?&#36;",
      "http://www.microsoft.com",
      "Validates a URL",
      "ZIP Code",
      "&#94;(\\d&#123;5&#125;-\\d&#123;4&#125;&#124;\\d&#123;5&#125;&#124;\\d&#123;9&#125;)&#36;&#124;&#94;(&#91;a-zA-Z&#93;\\d&#91;a-zA-Z&#93; \\d&#91;a-zA-Z&#93;\\d)&#36;",
      "12345",
      "Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.",
      "Password",
      "(?&#33;&#94;&#91;0-9&#93;&#42;&#36;)(?&#33;&#94;&#91;a-zA-Z&#93;&#42;&#36;)&#94;(&#91;a-zA-Z0-9&#93;&#123;8,10&#125;)&#36;",
      "&nbsp;",
      "Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.",
      "Non- negative integer",
      "&#94;\\d&#43;&#36;",
      "0986",
      "Validates that the field contains an integer greater than zero.",
      "Currency (non- negative)",
      "&#94;\\d&#43;(\\.\\d\\d)?&#36;",
      "1.00",
      "Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.",
      "Currency (positive or negative)",
      "&#94;(-)?\\d&#43;(\\.\\d\\d)?&#36;",
      "1.20",
      "Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point."
    ],
    "a": [
      "http://www.regular-expressions.info/tutorial.html"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://www.regular-expressions.info/tutorial.html",
      "text": "http://www.regular-expressions.info/tutorial.html"
    }
  ],
  "html": "<h1>Summary</h1>\n  <p>This How to shows how you can use regular expressions within ASP.NET applications to constrain untrusted input. Regular expressions are a good way to validate text fields such as names, addresses, phone numbers, and other user information. You can use them to constrain input, apply formatting rules, and check lengths. To validate input captured with server controls, you can use the <b>RegularExpressionValidator</b> control. To validate other forms of input, such as query strings, cookies, and HTML control input, you can use the <b>System.Text.RegularExpressions.Regex</b> class.</p>\n  <p>This How to shows how you can use regular expressions within ASP.NET applications to constrain untrusted input.</p>\n  <h1>Contents</h1>\n  <ul>\n    <li>\n      <div>Objectives</div>\n      <li>\n        <div>Overview</div>\n        <li>\n          <div>Using a RegularExpressionValidator Control</div>\n          <li>\n            <div>Using the Regex Class</div>\n            <li>\n              <div>Common Regular Expressions</div>\n              <li>\n                <div>Additional Resources</div>\n              </li>\n            </li>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ul>\n  <h1>Objectives</h1>\n  <ul>\n    <li>Use regular expressions to constrain input, apply format rules, and check lengths. <li>Use the ASP.NET <b>RegularExpressionValidator</b> control to constrain and validate input. <li>Use the <b>Regex</b> class to constrain and validate input. <li>Learn common regular expressions that can be used to constrain input. </li></li></li></li>\n  </ul>\n  <h1>Overview</h1>\n  <p>If you make unfounded assumptions about the type, length, format, or range of input, your application is unlikely to be robust. Input validation can become a security issue if an attacker discovers that you have made unfounded assumptions. The attacker can then supply carefully crafted input that compromises your application by attempting SQL injection, cross-site scripting, and other injection attacks. To avoid such vulnerability, you should validate text fields (such as names, addresses, tax identification numbers, and so on) and use regular expressions to do the following: </p>\n  <ul>\n    <li>Constrain the acceptable range of input characters. <li>Apply formatting rules. For example, pattern-based fields, such as tax identification numbers, ZIP Codes, or postal codes, require specific patterns of input characters. <li>Check lengths. </li></li></li>\n  </ul>\n  <p>Regular expression support is available to ASP.NET applications through the <b>RegularExpressionValidator</b> control and the <b>Regex</b> class in the <b>System.Text.RegularExpressions</b> namespace.</p>\n  <h1>Using a RegularExpressionValidator Control</h1>\n  <p>If you capture input by using server controls, you can use the <b>RegularExpressionValidator</b> control to validate that input. You can use regular expressions to restrict the range of valid characters, to strip unwanted characters, and to perform length and format checks. You can constrain the input format by defining patterns that the input must match.</p>\n  <h2>To validate a server control's input using a RegularExpressionValidator </h2>\n  <ol>\n    <li>Add a <b>RegularExpressionValidator</b> control to your page. <li>Set the <b>ControlToValidate</b> property to indicate which control to validate. <li>Set the <b>ValidationExpression</b> property to an appropriate regular expression. <li>Set the <b>ErrorMessage</b> property to define the message to display if the validation fails. </li></li></li></li>\n  </ol>\n  <p>The following example shows a <b>RegularExpressionValidator</b> control used to validate a name field.</p>\n  <div>\n    <pre>&lt;&amp;#37;&amp;#64; language=\"C#\" &amp;#37;&gt;<br />&lt;form id=\"form1\" runat=\"server\"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox ID=\"txtName\" runat=\"server\"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID=\"btnSubmit\" runat=\"server\" Text=\"Submit\" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:RegularExpressionValidator ID=\"regexpName\" runat=\"server\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage=\"This expression does not validate.\" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate=\"txtName\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ValidationExpression=\"&amp;#94;&amp;#91;a-zA-Z'.\\s&amp;#93;&amp;#123;1,40&amp;#125;&amp;#36;\" /&gt;<br />&lt;/form&gt;  </pre>\n  </div>\n  <p>The regular expression used in the preceding code example constrains an input name field to alphabetic characters (lowercase and uppercase), space characters, the single quotation mark (or apostrophe) for names such as O'Dell, and the period or dot character. In addition, the field length is constrained to 40 characters.</p>\n  <h2>Using &amp;#94; and &amp;#36;</h2>\n  <p>Enclosing the expression in the caret (<b>&amp;#94;</b>) and dollar sign (<b>&amp;#36;)</b>markers ensures that the expression consists of the desired content and nothing else. A <b>&amp;#94;</b> matches the position at the beginning of the input string and a <b>&amp;#36;</b> matches the position at the end of the input string. If you omit these markers, an attacker could affix malicious input to the beginning or end of valid content and bypass your filter.</p>\n  <h1>Using the Regex Class</h1>\n  <p>If you are not using server controls (which means you cannot use the validation controls) or if you need to validate input from sources other than form fields, such as query string parameters or cookies, you can use the <b>Regex</b> class within the <b>System.Text.RegularExpressions</b> namespace.</p>\n  <h2>To use the Regex class </h2>\n  <ol>\n    <li>Add a <b>using</b> statement to reference the <b>System.Text.RegularExpressions</b> namespace. <li>Call the <b>IsMatch</b> method of the <b>Regex</b> class, as shown in the following example. <div><pre>// Instance method:<br />Regex reg = new Regex(&amp;#64;\"&amp;#94;&amp;#91;a-zA-Z'.&amp;#93;&amp;#123;1,40&amp;#125;&amp;#36;\");<br />Response.Write(reg.IsMatch(txtName.Text));<br />// Static method:<br />if (&amp;#33;Regex.IsMatch(txtName.Text, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#64;\"&amp;#94;&amp;#91;a-zA-Z'.&amp;#93;&amp;#123;1,40&amp;#125;&amp;#36;\"))<br />&amp;#123;<br />&amp;nbsp; // Name does not match schema<br />&amp;#125;  </pre></div></li></li>\n  </ol>\n  <p>For performance reasons, you should use the static <b>IsMatch</b> method where possible to avoid unnecessary object creation.</p>\n  <p>The following example shows how to use a regular expression to validate a name input through a regular client-side HTML control.</p>\n  <div>\n    <pre>&lt;&amp;#37;&amp;#64; Page Language=\"C#\" &amp;#37;&gt;</pre>\n    <pre>&lt;html&amp;nbsp; &gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id=\"form1\" method=\"post\" action=\"HtmlControls.aspx\"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Name:<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name=\"txtName\" type=\"text\" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name=\"submitBtn\" type=\"Submit\" value=\"Submit\"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;</pre>\n  </div>\n  <pre>&lt;script runat=\"server\"&gt;</pre>\n  <pre>&amp;nbsp; void Page_Load(object sender, EventArgs e)<br />&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (Request.RequestType == \"POST\")<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string name = Request.Form&amp;#91;\"txtName\"&amp;#93;;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (name.Length &gt; 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (System.Text.RegularExpressions.Regex.IsMatch(name, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \"&amp;#94;&amp;#91;a-zA-Z'.&amp;#93;&amp;#123;1,40&amp;#125;&amp;#36;\"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(\"Valid name\");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(\"Invalid name\");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp; &amp;#125;</pre>\n  <pre>&lt;/script&gt;  </pre>\n  <h2>Use Regular Expression Comments</h2>\n  <p>Regular expressions are much easier to understand if you use the following syntax and comment each component of the expression by using a number sign (<b>#</b>). To enable comments, you must also specify <b>RegexOptions.IgnorePatternWhitespace</b>, which means that non-escaped white space is ignored.</p>\n  <div>\n    <pre>Regex regex = new Regex(&amp;#64;\"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#94;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # anchor at the start<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (?=.&amp;#42;\\d)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # must contain at least one numeric character<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (?=.&amp;#42;&amp;#91;a-z&amp;#93;)&amp;nbsp; # must contain one lowercase character<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (?=.&amp;#42;&amp;#91;A-Z&amp;#93;)&amp;nbsp; # must contain one uppercase character<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .&amp;#123;8,10&amp;#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # From 8 to 10 characters in length<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \\s&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # allows a space <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#36;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # anchor at the end\", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; RegexOptions.IgnorePatternWhitespace);  </pre>\n  </div>\n  <h1>Common Regular Expressions</h1>\n  <p>Some common regular expressions are shown in Table 1.</p>\n  <p>\n    <b>Table 1. Common Regular Expressions</b>\n  </p>\n  <div>\n    <table>\n      <tbody>\n        <tr>\n          <th>Field </th>\n          <th>Expression</th>\n          <th>Format Samples</th>\n          <th>Description</th>\n        </tr>\n        <tr>\n          <td>Name</td>\n          <td>&amp;#94;&amp;#91;a-zA-Z''-'\\s&amp;#93;&amp;#123;1,40&amp;#125;&amp;#36;</td>\n          <td>John Doe<br />O'Dell</td>\n          <td>Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.</td>\n        </tr>\n        <tr>\n          <td>Social Security Number</td>\n          <td>&amp;#94;\\d&amp;#123;3&amp;#125;-\\d&amp;#123;2&amp;#125;-\\d&amp;#123;4&amp;#125;&amp;#36;</td>\n          <td>111-11-1111</td>\n          <td>Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.</td>\n        </tr>\n        <tr>\n          <td>Phone Number</td>\n          <td>&amp;#94;&amp;#91;01&amp;#93;?&amp;#91;- .&amp;#93;?(\\(&amp;#91;2-9&amp;#93;\\d&amp;#123;2&amp;#125;\\)&amp;#124;&amp;#91;2-9&amp;#93;\\d&amp;#123;2&amp;#125;)&amp;#91;- .&amp;#93;?\\d&amp;#123;3&amp;#125;&amp;#91;- .&amp;#93;?\\d&amp;#123;4&amp;#125;&amp;#36;</td>\n          <td>(425) 555-0123<br />425-555-0123<br />425 555 0123<br />1-425-555-0123</td>\n          <td>Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. </td>\n        </tr>\n        <tr>\n          <td>E-mail </td>\n          <td>&amp;#94;(&amp;#91;0-9a-zA-Z&amp;#93;(&amp;#91;-.\\w&amp;#93;&amp;#42;&amp;#91;0-9a-zA-Z&amp;#93;)&amp;#42;&amp;#64;(&amp;#91;0-9a-zA-Z&amp;#93;&amp;#91;-\\w&amp;#93;&amp;#42;&amp;#91;0-9a-zA-Z&amp;#93;\\.)&amp;#43;&amp;#91;a-zA-Z&amp;#93;&amp;#123;2,9&amp;#125;)&amp;#36;</td>\n          <td>someone&amp;#64;example.com</td>\n          <td>Validates an e-mail address.</td>\n        </tr>\n        <tr>\n          <td>URL</td>\n          <td>&amp;#94;(ht&amp;#124;f)tp(s?)\\:\\/\\/&amp;#91;0-9a-zA-Z&amp;#93;(&amp;#91;-.\\w&amp;#93;&amp;#42;&amp;#91;0-9a-zA-Z&amp;#93;)&amp;#42;(:(0-9)&amp;#42;)&amp;#42;(\\/?)(&amp;#91;a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\&amp;#43;&amp;&amp;#37;\\&amp;#36;#_&amp;#93;&amp;#42;)?&amp;#36;</td>\n          <td>http://www.microsoft.com</td>\n          <td>Validates a URL </td>\n        </tr>\n        <tr>\n          <td>ZIP Code</td>\n          <td>&amp;#94;(\\d&amp;#123;5&amp;#125;-\\d&amp;#123;4&amp;#125;&amp;#124;\\d&amp;#123;5&amp;#125;&amp;#124;\\d&amp;#123;9&amp;#125;)&amp;#36;&amp;#124;&amp;#94;(&amp;#91;a-zA-Z&amp;#93;\\d&amp;#91;a-zA-Z&amp;#93; \\d&amp;#91;a-zA-Z&amp;#93;\\d)&amp;#36;</td>\n          <td>12345</td>\n          <td>Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.</td>\n        </tr>\n        <tr>\n          <td>Password</td>\n          <td>(?&amp;#33;&amp;#94;&amp;#91;0-9&amp;#93;&amp;#42;&amp;#36;)(?&amp;#33;&amp;#94;&amp;#91;a-zA-Z&amp;#93;&amp;#42;&amp;#36;)&amp;#94;(&amp;#91;a-zA-Z0-9&amp;#93;&amp;#123;8,10&amp;#125;)&amp;#36;</td>\n          <td>&amp;nbsp;</td>\n          <td>Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.</td>\n        </tr>\n        <tr>\n          <td>Non- negative integer</td>\n          <td>&amp;#94;\\d&amp;#43;&amp;#36;</td>\n          <td>0<br />986</td>\n          <td>Validates that the field contains an integer greater than zero.</td>\n        </tr>\n        <tr>\n          <td>Currency (non- negative)</td>\n          <td>&amp;#94;\\d&amp;#43;(\\.\\d\\d)?&amp;#36;</td>\n          <td>1.00</td>\n          <td>Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.</td>\n        </tr>\n        <tr>\n          <td>Currency (positive or negative)</td>\n          <td>&amp;#94;(-)?\\d&amp;#43;(\\.\\d\\d)?&amp;#36;</td>\n          <td>1.20</td>\n          <td>Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information, see the regular expression tutorial at <a href=\"http://www.regular-expressions.info/tutorial.html\">http://www.regular-expressions.info/tutorial.html</a>.</li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}