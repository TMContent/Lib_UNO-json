{
  "id": "9f21442f-2aee-4573-8be6-a5b51d9c89b8",
  "checksum": "eabb2d75f95ec6aad00b03737d149fa5bbd6c2a5",
  "words": {
    "1": [
      "ul",
      "li",
      "a"
    ],
    "2": [
      "ul",
      "li",
      "a"
    ],
    "8": [
      "pre"
    ],
    "9": [
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "applications": [
      "ul",
      "li",
      "p"
    ],
    "written": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "servlets": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li"
    ],
    "jsp": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "avoid": [
      "p"
    ],
    "placing": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "title"
    ],
    "procedures": [
      "p"
    ],
    "only": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "on": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "client": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre"
    ],
    "side": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "pre"
    ],
    "all": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1"
    ],
    "should": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "validated": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "server": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "client-side": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "executed": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "by": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "h1"
    ],
    "can": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "easily": [
      "p",
      "p"
    ],
    "bypassed": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p"
    ],
    "major": [
      "p"
    ],
    "design": [
      "p"
    ],
    "problem": [
      "p",
      "h1"
    ],
    "when": [
      "p",
      "h1",
      "p"
    ],
    "it": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "appears": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "web": [
      "p"
    ],
    "places": [
      "p"
    ],
    "trust": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "browser": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "entity": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "never": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "trusted": [
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "accepts": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "always": [
      "p",
      "p"
    ],
    "validate": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "for": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "length": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "range": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "type": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "how": [
      "h1",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "used": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "improve": [
      "p",
      "p"
    ],
    "user": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "experience": [
      "p"
    ],
    "security": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "purposes": [
      "p",
      "p"
    ],
    "check": [
      "p"
    ],
    "performance": [
      "p"
    ],
    "catching": [
      "p"
    ],
    "malformed": [
      "p"
    ],
    "therefore": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "saving": [
      "p"
    ],
    "roundtrip": [
      "p"
    ],
    "however": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "server-side": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "protect": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "malicious": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "following": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "steps": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "developing": [
      "p"
    ],
    "because": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "running": [
      "ol",
      "li",
      "p"
    ],
    "user's": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "machine": [
      "ol",
      "li",
      "p"
    ],
    "fully": [
      "ol",
      "li",
      "p"
    ],
    "controlled": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "any": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "attacker": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "javascript": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p"
    ],
    "enhance": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "pages": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "useful": [
      "ol",
      "li",
      "p"
    ],
    "enhancing": [
      "ol",
      "li",
      "p"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "presentation": [
      "ol",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "no": [
      "ol",
      "li",
      "p",
      "p",
      "pre"
    ],
    "mechanism": [
      "ol",
      "li",
      "p"
    ],
    "integrity": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "li",
      "a"
    ],
    "its": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "rely": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "enforce": [
      "ol",
      "li",
      "p"
    ],
    "decisions": [
      "ol",
      "li",
      "p"
    ],
    "place": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "p",
      "p"
    ],
    "validator": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "properly": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "routines": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "determine": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "data": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "passed": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "take": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "forms": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "url-based": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "parameters": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "form-based": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "hidden": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "fields": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "cookies": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "understand": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "constraints": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "associated": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "each": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "clear": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "define": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "format": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "build": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "expected": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "create": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "validators": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "there": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "make": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "same": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "as": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "well": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "once": [
      "ol",
      "li",
      "p"
    ],
    "developed": [
      "ol",
      "li",
      "p"
    ],
    "important": [
      "ol",
      "li",
      "p"
    ],
    "at": [
      "ol",
      "li",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "boundary": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "extends": [
      "ol",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "process": [
      "ol",
      "li",
      "p"
    ],
    "space": [
      "ol",
      "li",
      "p"
    ],
    "considered a": [
      "ol",
      "li",
      "p"
    ],
    "part": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "produces": [
      "p",
      "p"
    ],
    "analysis": [
      "p",
      "p"
    ],
    "based": [
      "p",
      "p"
    ],
    "financial": [
      "p",
      "p"
    ],
    "index": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "unfortunately": [
      "p"
    ],
    "via": [
      "p"
    ],
    "routine": [
      "p"
    ],
    "since": [
      "p"
    ],
    "bypass": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "exploit": [
      "p",
      "p"
    ],
    "cross-site": [
      "p",
      "p"
    ],
    "scripting": [
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p"
    ],
    "injection": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "vulnerabilities": [
      "p",
      "p"
    ],
    "!--": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "filename": [
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "idv01html": [
      "pre",
      "pre"
    ],
    "--<html>": [
      "pre",
      "pre"
    ],
    "head>": [
      "pre",
      "pre"
    ],
    "page": [
      "pre",
      "pre"
    ],
    "uses": [
      "pre",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "--": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "script": [
      "pre"
    ],
    "language=\"javascript\"<!--function": [
      "pre"
    ],
    "validate){": [
      "pre"
    ],
    "var": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "idx": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "documentforms[0].elements[0].value;": [
      "pre"
    ],
    "regex": [
      "pre"
    ],
    "new": [
      "pre"
    ],
    "regexp\"[a-za-z0-9]+\");": [
      "pre"
    ],
    "match": [
      "pre",
      "pre"
    ],
    "regexexec(idx);": [
      "pre"
    ],
    "ret": [
      "pre",
      "pre"
    ],
    "false": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ifidx.length": [
      "pre"
    ],
    "&&": [
      "pre"
    ],
    "!=": [
      "pre"
    ],
    "null": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "true": [
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre"
    ],
    "alert\"invalid": [
      "pre"
    ],
    "index!\";": [
      "pre"
    ],
    "return": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ret}//": [
      "pre"
    ],
    "/script>": [
      "pre"
    ],
    "title>query": [
      "pre",
      "pre"
    ],
    "index/title>": [
      "pre",
      "pre"
    ],
    "/head>": [
      "pre",
      "pre"
    ],
    "body>": [
      "pre",
      "pre"
    ],
    "relies": [
      "pre"
    ],
    "form": [
      "pre",
      "pre"
    ],
    "method=\"post\"": [
      "pre",
      "pre"
    ],
    "action=\"/myapp/aggregate\"": [
      "pre",
      "pre"
    ],
    "onsubmit=\"return": [
      "pre"
    ],
    "validate)\">": [
      "pre"
    ],
    "index <input": [
      "pre",
      "pre"
    ],
    "name=\"index\"": [
      "pre",
      "pre"
    ],
    "type=\"text\"": [
      "pre",
      "pre"
    ],
    "size=\"10\"": [
      "pre",
      "pre"
    ],
    "name=\"submit\"": [
      "pre",
      "pre"
    ],
    "value=\"query\"": [
      "pre",
      "pre"
    ],
    "type=\"submit\"": [
      "pre",
      "pre"
    ],
    "/form>": [
      "pre",
      "pre"
    ],
    "/body></html>//": [
      "pre",
      "pre"
    ],
    "/myapp/aggregateimport": [
      "pre",
      "pre"
    ],
    "javaio.*;import": [
      "pre",
      "pre"
    ],
    "javautil.*;import": [
      "pre",
      "pre"
    ],
    "javalang.*;import": [
      "pre",
      "pre"
    ],
    "javaxservlet.*;import": [
      "pre",
      "pre"
    ],
    "javaxservlet.http.*;import": [
      "pre",
      "pre"
    ],
    "javautil.regex.*;public": [
      "pre",
      "pre"
    ],
    "final": [
      "pre",
      "pre"
    ],
    "class": [
      "pre",
      "pre"
    ],
    "dataaggregator": [
      "pre",
      "pre"
    ],
    "httpservlet{": [
      "pre",
      "pre"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "void": [
      "pre",
      "pre"
    ],
    "dogethttpservletrequest": [
      "pre",
      "pre"
    ],
    "request": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "httpservletresponse": [
      "pre",
      "pre"
    ],
    "response": [
      "pre",
      "pre"
    ],
    "throws": [
      "pre",
      "pre"
    ],
    "servletexception": [
      "pre",
      "pre"
    ],
    "ioexception": [
      "pre",
      "pre"
    ],
    "printwriter": [
      "pre",
      "pre"
    ],
    "out": [
      "pre",
      "pre"
    ],
    "responsegetwriter();": [
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "searchterm": [
      "pre",
      "pre"
    ],
    "requestgetparameter(\"index\");": [
      "pre",
      "pre"
    ],
    "try": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "retstring": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"the": [
      "pre",
      "pre"
    ],
    "queried": [
      "pre",
      "pre"
    ],
    "\\\"\"": [
      "pre",
      "pre"
    ],
    "+=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encodehtmlsearchterm);": [
      "pre",
      "pre"
    ],
    "\"\\\"": [
      "pre",
      "pre"
    ],
    "produced": [
      "pre",
      "pre"
    ],
    "results<br>": [
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre"
    ],
    "outprintln(retstring);": [
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "does": [
      "pre",
      "ul",
      "li",
      "a"
    ],
    "provide": [
      "pre"
    ],
    "aggregatedataout,": [
      "pre",
      "pre"
    ],
    "searchterm;": [
      "pre",
      "pre"
    ],
    "catch": [
      "pre",
      "pre"
    ],
    "exception": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "e": [
      "pre",
      "pre"
    ],
    "add": [
      "pre",
      "pre",
      "pre"
    ],
    "appropriate": [
      "pre",
      "pre",
      "pre"
    ],
    "logging": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "handling": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "mechanisms": [
      "pre",
      "pre",
      "pre"
    ],
    "consult": [
      "pre",
      "pre",
      "pre"
    ],
    "sections": [
      "pre",
      "pre",
      "pre"
    ],
    "outprintln(\"we": [
      "pre",
      "pre",
      "pre"
    ],
    "cannot": [
      "pre",
      "pre",
      "pre"
    ],
    "handle": [
      "pre",
      "pre",
      "pre"
    ],
    "moment\"": [
      "pre",
      "pre",
      "pre"
    ],
    "+": [
      "pre",
      "pre",
      "pre"
    ],
    "\"please": [
      "pre",
      "pre",
      "pre"
    ],
    "again": [
      "pre",
      "pre",
      "pre"
    ],
    "later\");": [
      "pre",
      "pre",
      "pre"
    ],
    "outflush();": [
      "pre",
      "pre"
    ],
    "outclose();": [
      "pre",
      "pre"
    ],
    "}}": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "impossible": [
      "p"
    ],
    "and/or": [
      "p"
    ],
    "validatesearchterm(searchterm))": [
      "pre"
    ],
    "boolean": [
      "pre"
    ],
    "validatesearchtermstring": [
      "pre"
    ],
    "goodpattern": [
      "pre"
    ],
    "\"\\\\w|\\\\d)+\";": [
      "pre"
    ],
    "int": [
      "pre"
    ],
    "goodlength": [
      "pre",
      "pre"
    ],
    "==": [
      "pre"
    ],
    "ifinput.length()": [
      "pre"
    ],
    "pattern": [
      "pre"
    ],
    "p": [
      "pre"
    ],
    "patterncompile(goodpattern);": [
      "pre"
    ],
    "matcher": [
      "pre"
    ],
    "m": [
      "pre"
    ],
    "pmatcher(input);": [
      "pre"
    ],
    "if!m.matches())": [
      "pre"
    ],
    "guidelines": [
      "h1"
    ],
    "sources": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "database": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "filter": [
      "ul",
      "li",
      "a"
    ],
    "user-supplied": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "path": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "filenames": [
      "ul",
      "li",
      "a"
    ],
    "paths": [
      "ul",
      "li",
      "a"
    ],
    "examples": [
      "h1"
    ],
    "jsf": [
      "ul",
      "li",
      "a"
    ],
    "springmvc": [
      "ul",
      "li",
      "a"
    ],
    "struts": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "esapi": [
      "ul",
      "li",
      "a"
    ],
    "executor": [
      "ul",
      "li",
      "a"
    ],
    "testing": [
      "h1"
    ],
    "test": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "java": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "manipulation": [
      "ul",
      "li",
      "a"
    ],
    "bugs": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "double": [
      "ul",
      "li",
      "a"
    ],
    "encoding": [
      "ul",
      "li",
      "a"
    ],
    "integer": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "overflows": [
      "ul",
      "li",
      "a"
    ],
    "underflow": [
      "ul",
      "li",
      "a"
    ],
    "deserialization": [
      "ul",
      "li",
      "a"
    ],
    "untrusted": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "Input and Data Validation Guidelines",
      "Input and Data Validation Checklists",
      "Input and Data Validation Code Examples",
      "Input and Data Validation Testing"
    ],
    "ul": [
      "Applications written using Servlets or JSP.",
      "Identify input. Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:\n          \n            URL-based parameters \n            Form-based parameters \n            Hidden fields \n            Cookies\n          \n        \n        \n          \n            Understand the input. Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.\n        \n        \n          \n            Create a set of validators. Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well.",
      "URL-based parameters \n            Form-based parameters \n            Hidden fields \n            Cookies",
      "Validate Input from All Sources\n    \n    \n      Validate Input for Length, Range, Format, and Type\n    \n    \n      \n      \n      Validate All Input Passed to the Database\n    \n    \n      Filter All User-Supplied Filename and Path Input\n    \n    \n      Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated\n    \n    \n      Input Is Validated for Length, Range, Format and Type\n    \n    \n      All Database Input Is Validated\n    \n    \n      User-Supplied Filenames and Paths Are Validated\n    \n    \n      The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF\n    \n    \n      Input Validation Using SpringMVC\n    \n    \n      Input Validation Using Struts 1\n    \n    \n      Input Validation Using Struts 2\n    \n    \n      Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java\n    \n    \n      How to Test for Path Manipulation Bugs in Java\n    \n    \n      How to Test for Double Encoding Bugs in Java\n    \n    \n      How to Test for Client-side Validation Bypass Bugs in Java\n    \n    \n      How to Test for Integer Overflows in Java\n    \n    \n      How to Test for Integer Underflow Bugs in Java\n    \n    \n      How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "li": [
      "Applications written using Servlets or JSP.",
      "Never trust the browser. Because the browser is running on the user's machine, it can be fully controlled by the user. Therefore, any client-side validation code can be controlled and bypassed by an attacker.",
      "Use JavaScript only to enhance your pages. JavaScript is useful for enhancing your application's presentation. However, it has no mechanism to protect the integrity of its code. Do not rely on JavaScript to enforce security decisions.",
      "Place a server-side validator for all input. Input validation should be executed on the server side. Use the following steps to properly set the validation routines: \n      \n        \n          \n            Identify input. Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:\n          \n            URL-based parameters \n            Form-based parameters \n            Hidden fields \n            Cookies\n          \n        \n        \n          \n            Understand the input. Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.\n        \n        \n          \n            Create a set of validators. Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well. \n        \n      \n      Once developed, it is important to place the validation routines at your application's trust boundary. Because your application's trust boundary extends only to your application's process space, the user's browser should not be considered a part of your application's trust boundary.",
      "Identify input. Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:\n          \n            URL-based parameters \n            Form-based parameters \n            Hidden fields \n            Cookies",
      "URL-based parameters",
      "Form-based parameters",
      "Hidden fields",
      "Cookies",
      "Understand the input. Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.",
      "Create a set of validators. Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well.",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "p": [
      "Avoid placing the validation procedures only on the client side. All input should be validated server side.",
      "Client-side validation is executed by the client and can be easily bypassed. Client-side validation is a major design problem when it appears in web applications. It places trust in the browser, an entity that should never be trusted.",
      "If your application accepts input from the client, always validate for length, range and type on the server.",
      "Client-side validation should only be used to improve user experience, never for security purposes. A client-side input validation check can improve application performance by catching malformed input on the client and, therefore, saving a roundtrip to the server. However, client side validation can be easily bypassed and should never be used for security purposes. Always use server-side validation to protect your application from malicious attacks.",
      "Use the following steps when developing client side validation:",
      "Never trust the browser. Because the browser is running on the user's machine, it can be fully controlled by the user. Therefore, any client-side validation code can be controlled and bypassed by an attacker.",
      "Use JavaScript only to enhance your pages. JavaScript is useful for enhancing your application's presentation. However, it has no mechanism to protect the integrity of its code. Do not rely on JavaScript to enforce security decisions.",
      "Place a server-side validator for all input. Input validation should be executed on the server side. Use the following steps to properly set the validation routines:",
      "Identify input. Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:",
      "Understand the input. Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.",
      "Create a set of validators. Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well.",
      "Once developed, it is important to place the validation routines at your application's trust boundary. Because your application's trust boundary extends only to your application's process space, the user's browser should not be considered a part of your application's trust boundary.",
      "The following code produces a data analysis based on a financial index. Unfortunately, the user's input is validated only on the client side via a JavaScript routine. Since there is no validation on the server, an attacker can bypass all validation and exploit cross-site scripting and SQL injection vulnerabilities.",
      "The following code produces a data analysis based on a financial index. Because the application uses server-side validation, it is impossible for an attacker to bypass the validation routines and exploit any cross-site scripting and/or SQL injection vulnerabilities."
    ],
    "ol": [
      "Never trust the browser. Because the browser is running on the user's machine, it can be fully controlled by the user. Therefore, any client-side validation code can be controlled and bypassed by an attacker.\n    \n    \n      \n        Use JavaScript only to enhance your pages. JavaScript is useful for enhancing your application's presentation. However, it has no mechanism to protect the integrity of its code. Do not rely on JavaScript to enforce security decisions. \n    \n    \n      \n        Place a server-side validator for all input. Input validation should be executed on the server side. Use the following steps to properly set the validation routines: \n      \n        \n          \n            Identify input. Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:\n          \n            URL-based parameters \n            Form-based parameters \n            Hidden fields \n            Cookies\n          \n        \n        \n          \n            Understand the input. Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.\n        \n        \n          \n            Create a set of validators. Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well. \n        \n      \n      Once developed, it is important to place the validation routines at your application's trust boundary. Because your application's trust boundary extends only to your application's process space, the user's browser should not be considered a part of your application's trust boundary."
    ],
    "strong": [
      "Never trust the browser.",
      "Use JavaScript only to enhance your pages.",
      "Place a server-side validator for all input.",
      "Identify input.",
      "Understand the input.",
      "Create a set of validators."
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "pre": [
      "<!-- Filename: idv01.html --><html>  <head>    <!-- The page uses client-side validation only -->    <script language=\"JavaScript\"><!--function validate(){   var idx = document.forms[0].elements[0].value;   var regex = new RegExp(\"[a-zA-Z0-9]+\");   var match = regex.exec(idx);   var ret = false;    if(idx.length < 9 && match != null)    {      ret = true;    }   else   {      alert(\"Invalid index!\");   }    return ret;}// -->    </script>    <title>Query for index</title>  </head>  <body>    <!-- The application relies on client side validation -->    <form method=\"post\" action=\"/myapp/aggregate\" onsubmit=\"return validate()\">      index: <input name=\"index\" type=\"text\" size=\"10\">      <input name=\"submit\" value=\"query\" type=\"submit\">    </form>  </body></html>// Filename: /myapp/aggregateimport java.io.*;import java.util.*;import java.lang.*;import javax.servlet.*;import javax.servlet.http.*;import java.util.regex.*;public final class DataAggregator extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            PrintWriter out = response.getWriter();            String searchTerm = request.getParameter(\"index\");            try            {                  String retString;                  retString = \"The queried index \\\"\";                  retString += encodeHtml(searchTerm);                  retString += \"\\\" produced the following results:<br> \";                  out.println(retString);                   // The application does not provide a server-side validation                  aggregateData(out, searchTerm);            }            catch (Exception e)            {                  // Add the appropriate logging and exception handling                  // mechanisms. Consult the Exception Handling and                  // Logging sections                  out.println(\"We cannot handle your request at the moment.\"                           +  \"Please try again later.\");            }            out.flush();            out.close();      }}",
      "<!-- Filename: idv01.html --><html>  <head>    <!-- The page uses server-side validation only -->    <title>Query for index</title>  </head>  <body>    <!-- The application uses no client-side validation -->    <form method=\"post\" action=\"/myapp/aggregate\">      index: <input name=\"index\" type=\"text\" size=\"10\">      <input name=\"submit\" value=\"query\" type=\"submit\">    </form>  </body></html>// Filename: /myapp/aggregateimport java.io.*;import java.util.*;import java.lang.*;import javax.servlet.*;import javax.servlet.http.*;import java.util.regex.*;public final class DataAggregator extends HttpServlet{      public void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException      {            PrintWriter out = response.getWriter();            String searchTerm = request.getParameter(\"index\");            try            {                  // The application uses only server-side validation                  if (validateSearchTerm(searchTerm))                  {                        String retString;                        retString = \"The queried index \\\"\";                        retString += encodeHtml(searchTerm);                        retString += \"\\\" produced the following results:<br> \";                        out.println(retString);                        aggregateData(out, searchTerm);                  }                  else                  {                        // Add the appropriate logging and exception handling                        // mechanisms. Consult the Exception Handling and                        // Logging sections                        out.println(\"We cannot handle your request at the moment.\"                                 +  \"Please try again later.\");                  }            }            catch (Exception e)            {                  // Add the appropriate logging and exception handling                  // mechanisms. Consult the Exception Handling and                  // Logging sections                  out.println(\"We cannot handle your request at the moment.\"                           +  \"Please try again later.\");            }            out.flush();            out.close();      }      boolean validateSearchTerm(String input)      {            String goodPattern = \"(\\\\w|\\\\d)+\";            int goodLength = 8;            if (input == null)            {                  return false;            }            if(input.length() > goodLength)            {                  return false;            }            Pattern p = Pattern.compile(goodPattern);            Matcher m = p.matcher(input);            if(!m.matches())            {                  return false;            }            return true;      }}"
    ],
    "a": [
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "/article/b531d29c-86f7-4812-90ce-5f3f0f780aba",
      "text": "Validate Input from All Sources"
    },
    {
      "href": "/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d",
      "text": "Validate Input for Length, Range, Format, and Type"
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "\n      "
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "Validate All Input Passed to the Database"
    },
    {
      "href": "/article/a5491c44-164b-4046-94d3-b575b9745e8b",
      "text": "Filter All User-Supplied Filename and Path Input"
    },
    {
      "href": "/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8",
      "text": "Do Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/7f8deb21-cd52-41be-80b4-8897612021dc",
      "text": "Input from All Sources Is Validated"
    },
    {
      "href": "/article/61869793-2c10-40c0-b82a-babcc0312697",
      "text": "Input Is Validated for Length, Range, Format and Type"
    },
    {
      "href": "/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0",
      "text": "All Database Input Is Validated"
    },
    {
      "href": "/article/17884af0-fc83-412a-b613-4def4a6f84ad",
      "text": "User-Supplied Filenames and Paths Are Validated"
    },
    {
      "href": "/article/b1803c35-9579-4a38-9a63-30202160ef25",
      "text": "The Application Does Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/0f49430b-2abe-408f-b046-89fa739f5d53",
      "text": "Input Validation Using JSF"
    },
    {
      "href": "/article/18ac74df-602b-4a58-8998-52f638f3a045",
      "text": "Input Validation Using SpringMVC"
    },
    {
      "href": "/article/d124abb1-e230-43ef-8762-1caa0dbb89ca",
      "text": "Input Validation Using Struts 1"
    },
    {
      "href": "/article/2f917654-65a8-49c9-b000-c17f9765bf42",
      "text": "Input Validation Using Struts 2"
    },
    {
      "href": "/article/38342130-4e4b-47df-afd9-c7e8c86f77ee",
      "text": "Use ESAPI Executor"
    },
    {
      "href": "/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4",
      "text": "How to Test for Server-Side Code Injection in Java"
    },
    {
      "href": "/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0",
      "text": "How to Test for Path Manipulation Bugs in Java"
    },
    {
      "href": "/article/5c99da7b-b4eb-4315-b48c-ac2598c13144",
      "text": "How to Test for Double Encoding Bugs in Java"
    },
    {
      "href": "/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f",
      "text": "How to Test for Client-side Validation Bypass Bugs in Java"
    },
    {
      "href": "/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1",
      "text": "How to Test for Integer Overflows in Java"
    },
    {
      "href": "/article/ed20009a-59ef-415d-8e72-0ff3221a1346",
      "text": "How to Test for Integer Underflow Bugs in Java"
    },
    {
      "href": "/article/d7682043-0095-4700-97dd-01ce797c4ada",
      "text": "How to Test for Deserialization of Untrusted Data Bugs in Java"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>Applications written using Servlets or JSP.</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Avoid placing the validation procedures only on the client side. All input should be validated server side.</p>\n  <h1>Why</h1>\n  <p>Client-side validation is executed by the client and can be easily bypassed. Client-side validation is a major design problem when it appears in web applications. It places trust in the browser, an entity that should never be trusted.</p>\n  <h1>When</h1>\n  <p>If your application accepts input from the client, always validate for length, range and type on the server.</p>\n  <h1>How</h1>\n  <p>Client-side validation should only be used to improve user experience, never for security purposes. A client-side input validation check can improve application performance by catching malformed input on the client and, therefore, saving a roundtrip to the server. However, client side validation can be easily bypassed and should never be used for security purposes. Always use server-side validation to protect your application from malicious attacks.</p>\n  <p>Use the following steps when developing client side validation: </p>\n  <ol>\n    <li>\n      <p>\n        <strong>Never trust the browser.</strong> Because the browser is running on the user's machine, it can be fully controlled by the user. Therefore, any client-side validation code can be controlled and bypassed by an attacker.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use JavaScript only to enhance your pages.</strong> JavaScript is useful for enhancing your application's presentation. However, it has no mechanism to protect the integrity of its code. Do not rely on JavaScript to enforce security decisions. </p>\n    </li>\n    <li>\n      <p>\n        <strong>Place a server-side validator for all input. </strong>Input validation should be executed on the server side. Use the following steps to properly set the validation routines: </p>\n      <ul>\n        <li>\n          <p>\n            <strong>Identify input.</strong> Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:</p>\n          <ul>\n            <li>URL-based parameters </li>\n            <li>Form-based parameters </li>\n            <li>Hidden fields </li>\n            <li>Cookies</li>\n          </ul>\n        </li>\n        <li>\n          <p>\n            <strong>Understand the input.</strong> Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.</p>\n        </li>\n        <li>\n          <p>\n            <strong>Create a set of validators.</strong> Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well. <br /></p>\n        </li>\n      </ul>\n      <p>Once developed, it is important to place the validation routines at your application's trust boundary. Because your application's trust boundary extends only to your application's process space, the user's browser should not be considered&nbsp;a part of your application's trust boundary.</p>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The following code produces a data analysis based on a financial index. Unfortunately, the user's input is validated only on the client side via a JavaScript routine. Since there is no validation on the server, an attacker can bypass all validation and exploit cross-site scripting and SQL injection vulnerabilities.</p>\n  <pre>&lt;!-- Filename: idv01.html --&gt;<br />&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;!-- The page uses client-side validation only --&gt;<br />    &lt;script language=\"JavaScript\"&gt;<br />&lt;!--function validate()<br />{<br />   var idx = document.forms[0].elements[0].value;<br />   var regex = new RegExp(\"[a-zA-Z0-9]+\");<br />   var match = regex.exec(idx);<br />   var ret = false;<br />    if(idx.length &lt; 9 && match != null)<br />    {<br />      ret = true;<br />    }<br />   else<br />   {<br />      alert(\"Invalid index!\");<br />   }<br />    return ret;<br />}<br />// --&gt;<br />    &lt;/script&gt;<br />    &lt;title&gt;Query for index&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;!-- The application relies on client side validation --&gt;<br />    &lt;form method=\"post\" action=\"/myapp/aggregate\" onsubmit=\"return validate()\"&gt;<br />      index:&nbsp;&lt;input name=\"index\" type=\"text\" size=\"10\"&gt;<br />      &lt;input name=\"submit\" value=\"query\" type=\"submit\"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;<br /><br /><br />// Filename: /myapp/aggregate<br />import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br /><br />            try<br />            {<br />                  String retString;<br />                  retString = \"The queried index \\\"\";<br />                  retString += encodeHtml(searchTerm);<br />                  retString += \"\\\" produced the following results:&lt;br&gt; \";<br />                  out.println(retString);<br />                   // The application does not provide a server-side validation<br />                  aggregateData(out, searchTerm);<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println(\"We cannot handle your request at the moment.\"<br />                           +  \"Please try again later.\");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />}</pre>\n  <h1>Solution Example</h1>\n  <p>The following code produces a data analysis based on a financial index. Because the application uses server-side validation, it is impossible for an attacker to bypass the validation routines and exploit any cross-site scripting and/or SQL injection vulnerabilities.</p>\n  <pre>&lt;!-- Filename: idv01.html --&gt;<br />&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;!-- The page uses server-side validation only --&gt;<br />    &lt;title&gt;Query for index&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;!-- The application uses no client-side validation --&gt;<br />    &lt;form method=\"post\" action=\"/myapp/aggregate\"&gt;<br />      index:&nbsp;&lt;input name=\"index\" type=\"text\" size=\"10\"&gt;<br />      &lt;input name=\"submit\" value=\"query\" type=\"submit\"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;<br /><br /><br />// Filename: /myapp/aggregate<br />import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter(\"index\");<br /><br />            try<br />            {<br />                  // The application uses only server-side validation<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                        retString = \"The queried index \\\"\";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += \"\\\" produced the following results:&lt;br&gt; \";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println(\"We cannot handle your request at the moment.\"<br />                                 +  \"Please try again later.\");<br />                  }<br />            }<br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println(\"We cannot handle your request at the moment.\"<br />                           +  \"Please try again later.\");<br />            }<br /><br />            out.flush();<br /><br />            out.close();<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = \"(\\\\w|\\\\d)+\";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br />}</pre>\n  <h1>Input and Data Validation Guidelines</h1>\n  <ul>\n    <li>\n      <a href=\"/article/b531d29c-86f7-4812-90ce-5f3f0f780aba\">Validate Input from All Sources</a>\n    </li>\n    <li>\n      <a href=\"/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d\">Validate Input for Length, Range, Format, and Type</a>\n    </li>\n    <li>\n      <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">\n      </a>\n      <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">Validate All Input Passed to the Database</a>\n    </li>\n    <li>\n      <a href=\"/article/a5491c44-164b-4046-94d3-b575b9745e8b\">Filter All User-Supplied Filename and Path Input</a>\n    </li>\n    <li>\n      <a href=\"/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8\">Do Not Rely on Client-Side Validation</a>\n    </li>\n  </ul>\n  <h1>Input and Data Validation Checklists</h1>\n  <ul>\n    <li>\n      <a href=\"/article/7f8deb21-cd52-41be-80b4-8897612021dc\">Input from All Sources Is Validated</a>\n    </li>\n    <li>\n      <a href=\"/article/61869793-2c10-40c0-b82a-babcc0312697\">Input Is Validated for Length, Range, Format and Type</a>\n    </li>\n    <li>\n      <a href=\"/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0\">All Database Input Is Validated</a>\n    </li>\n    <li>\n      <a href=\"/article/17884af0-fc83-412a-b613-4def4a6f84ad\">User-Supplied Filenames and Paths Are Validated</a>\n    </li>\n    <li>\n      <a href=\"/article/b1803c35-9579-4a38-9a63-30202160ef25\">The Application Does Not Rely on Client-Side Validation</a>\n    </li>\n  </ul>\n  <h1>Input and Data Validation Code Examples</h1>\n  <ul>\n    <li>\n      <a href=\"/article/0f49430b-2abe-408f-b046-89fa739f5d53\">Input Validation Using JSF</a>\n    </li>\n    <li>\n      <a href=\"/article/18ac74df-602b-4a58-8998-52f638f3a045\">Input Validation Using SpringMVC</a>\n    </li>\n    <li>\n      <a href=\"/article/d124abb1-e230-43ef-8762-1caa0dbb89ca\">Input Validation Using Struts 1</a>\n    </li>\n    <li>\n      <a href=\"/article/2f917654-65a8-49c9-b000-c17f9765bf42\">Input Validation Using Struts 2</a>\n    </li>\n    <li>\n      <a href=\"/article/38342130-4e4b-47df-afd9-c7e8c86f77ee\">Use ESAPI Executor</a>\n    </li>\n  </ul>\n  <h1>Input and Data Validation Testing</h1>\n  <ul>\n    <li>\n      <a href=\"/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4\">How to Test for Server-Side Code Injection in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0\">How to Test for Path Manipulation Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/5c99da7b-b4eb-4315-b48c-ac2598c13144\">How to Test for Double Encoding Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f\">How to Test for Client-side Validation Bypass Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1\">How to Test for Integer Overflows in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/ed20009a-59ef-415d-8e72-0ff3221a1346\">How to Test for Integer Underflow Bugs in Java</a>\n    </li>\n    <li>\n      <a href=\"/article/d7682043-0095-4700-97dd-01ce797c4ada\">How to Test for Deserialization of Untrusted Data Bugs in Java</a>\n    </li>\n  </ul>"
}