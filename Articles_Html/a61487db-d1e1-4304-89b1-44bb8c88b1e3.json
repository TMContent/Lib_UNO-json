{
  "id": "a61487db-d1e1-4304-89b1-44bb8c88b1e3",
  "checksum": "c6a1e2e7bab6e4b0704f279a771cefebc66b5f6d",
  "words": {
    "0": [
      "pre",
      "pre"
    ],
    "1": [
      "ol",
      "li",
      "p"
    ],
    "9": [
      "pre"
    ],
    "14": [
      "pre"
    ],
    "19": [
      "pre"
    ],
    "24": [
      "pre"
    ],
    "38": [
      "pre"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre"
    ],
    "check": [
      "h1",
      "h1",
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong",
      "pre"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "ul",
      "li"
    ],
    "verify": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "pre"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "validates": [
      "p",
      "p"
    ],
    "all": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "title"
    ],
    "data": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "title"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "title"
    ],
    "passed": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "between": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "title"
    ],
    "java": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "title"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "title"
    ],
    "native": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "unchecked": [
      "p"
    ],
    "input": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "pre"
    ],
    "and/or": [
      "p"
    ],
    "output": [
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "lead": [
      "p"
    ],
    "buffer": [
      "p"
    ],
    "overflows": [
      "p"
    ],
    "injection": [
      "p",
      "p"
    ],
    "based": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "such": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "sql": [
      "p"
    ],
    "cross-site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "etc,": [
      "p"
    ],
    "exploit": [
      "p"
    ],
    "weaknesses": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "due": [
      "p"
    ],
    "security": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "risk": [
      "p",
      "p"
    ],
    "posed": [
      "p"
    ],
    "by": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "pre"
    ],
    "if": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "language": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "boundaries": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "clearly": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "defined": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "needs": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "ensure": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "you": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "li",
      "p"
    ],
    "identified": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "locations": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "interacts": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "moves": [
      "ol",
      "li",
      "p"
    ],
    "special": [
      "ol",
      "li",
      "p"
    ],
    "attention": [
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "li",
      "p"
    ],
    "given": [
      "ol",
      "li",
      "p"
    ],
    "error": [
      "ol",
      "li",
      "p"
    ],
    "handling": [
      "ol",
      "li",
      "p"
    ],
    "routines": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "no": [
      "ol",
      "li",
      "p"
    ],
    "holes": [
      "ol",
      "li",
      "p"
    ],
    "introduced": [
      "ol",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "component": [
      "ol",
      "li",
      "p"
    ],
    "quality": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "validators": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "properly": [
      "ol",
      "li",
      "p"
    ],
    "validated": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "title"
    ],
    "length": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "pre"
    ],
    "range": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "format": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "type": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "passing": [
      "ol",
      "li",
      "p"
    ],
    "through": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "step": [
      "ol",
      "li",
      "p"
    ],
    "validation": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "p"
    ],
    "centralized": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "better": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "cleaner": [
      "ol",
      "li",
      "p"
    ],
    "control": [
      "ol",
      "li",
      "p"
    ],
    "shared": [
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "p"
    ],
    "many": [
      "ol",
      "li",
      "p"
    ],
    "spread": [
      "ol",
      "li",
      "p"
    ],
    "throughout": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "every": [
      "ol",
      "li",
      "p"
    ],
    "time": [
      "ol",
      "li",
      "p"
    ],
    "accepts": [
      "ol",
      "li",
      "p"
    ],
    "external": [
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "first": [
      "ol",
      "li",
      "p"
    ],
    "pass": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "fix": [
      "h1"
    ],
    "there": [
      "p"
    ],
    "several": [
      "p"
    ],
    "things": [
      "p"
    ],
    "consider": [
      "p"
    ],
    "when": [
      "p"
    ],
    "validating": [
      "p"
    ],
    "input/output": [
      "p"
    ],
    "barriers": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "distinguishing the": [
      "ol",
      "li",
      "p"
    ],
    "very": [
      "ol",
      "li",
      "p"
    ],
    "important": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "because": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "sandbox": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "provides": [
      "ol",
      "li",
      "p"
    ],
    "multiple": [
      "ol",
      "li",
      "p"
    ],
    "checks": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "know": [
      "ol",
      "li",
      "p"
    ],
    "boundary between where": [
      "ol",
      "li",
      "p"
    ],
    "ends": [
      "ol",
      "li",
      "p"
    ],
    "compiled": [
      "ol",
      "li",
      "p"
    ],
    "begins to": [
      "ol",
      "li",
      "p"
    ],
    "interact directly": [
      "ol",
      "li",
      "p"
    ],
    "cpu": [
      "ol",
      "li",
      "p"
    ],
    "can compensate": [
      "ol",
      "li",
      "p"
    ],
    "for the": [
      "ol",
      "li",
      "p"
    ],
    "lack": [
      "ol",
      "li",
      "p"
    ],
    "inside": [
      "ol",
      "li",
      "p"
    ],
    "validate": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "after": [
      "ol",
      "li",
      "p"
    ],
    "discovering": [
      "ol",
      "li",
      "p"
    ],
    "determine": [
      "ol",
      "li",
      "p"
    ],
    "structure": [
      "ol",
      "li",
      "p"
    ],
    "build": [
      "ol",
      "li",
      "p"
    ],
    "a": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "validator": [
      "ol",
      "li",
      "p"
    ],
    "each": [
      "ol",
      "li",
      "p"
    ],
    "two": [
      "ol",
      "li",
      "p"
    ],
    "environments": [
      "ol",
      "li",
      "p"
    ],
    "construct": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "centralize": [
      "ol",
      "li",
      "p"
    ],
    "helps": [
      "ol",
      "li",
      "p"
    ],
    "strengthen": [
      "ol",
      "li",
      "p"
    ],
    "limiting": [
      "ol",
      "li",
      "p"
    ],
    "amount": [
      "ol",
      "li",
      "p"
    ],
    "scattered": [
      "ol",
      "li",
      "p"
    ],
    "place": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "following": [
      "p",
      "p"
    ],
    "segment": [
      "p",
      "p",
      "p"
    ],
    "shows": [
      "p",
      "p"
    ],
    "jni": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "utilizes": [
      "p",
      "p"
    ],
    "com": [
      "p",
      "p"
    ],
    "object": [
      "p",
      "p"
    ],
    "making": [
      "p"
    ],
    "assumption": [
      "p"
    ],
    "will": [
      "p"
    ],
    "handle": [
      "p"
    ],
    "does": [
      "p"
    ],
    "not": [
      "p"
    ],
    "valid": [
      "p",
      "pre",
      "pre"
    ],
    "guid": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "since": [
      "p"
    ],
    "invalid": [
      "p"
    ],
    "guids": [
      "p"
    ],
    "may": [
      "p"
    ],
    "cause": [
      "p"
    ],
    "unhandled": [
      "p",
      "p"
    ],
    "exceptions": [
      "p",
      "p"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "force": [
      "p"
    ],
    "disclose": [
      "p"
    ],
    "call": [
      "p"
    ],
    "stack": [
      "p"
    ],
    "possibly": [
      "p"
    ],
    "source": [
      "p"
    ],
    "filenames": [
      "p"
    ],
    "#include": [
      "pre",
      "pre"
    ],
    "jni.h>#include": [
      "pre",
      "pre"
    ],
    "sys/types.h>#include": [
      "pre",
      "pre"
    ],
    "fcntl.h>#include": [
      "pre",
      "pre"
    ],
    "stdio.h>#include": [
      "pre",
      "pre"
    ],
    "atlbase.h>#include": [
      "pre",
      "pre"
    ],
    "windows.h>#include": [
      "pre",
      "pre"
    ],
    "wtypes.h>jniexport": [
      "pre"
    ],
    "jbooleanjnicall": [
      "pre"
    ],
    "java_identifier_invokeobject": [
      "pre",
      "pre"
    ],
    "jnienv": [
      "pre",
      "pre"
    ],
    "*": [
      "pre",
      "pre"
    ],
    "env": [
      "pre",
      "pre"
    ],
    "jobject": [
      "pre",
      "pre"
    ],
    "jobj": [
      "pre",
      "pre"
    ],
    "jstring": [
      "pre",
      "pre"
    ],
    "jguid{": [
      "pre",
      "pre"
    ],
    "hresult": [
      "pre",
      "pre"
    ],
    "result": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "clsid": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "iunknown": [
      "pre",
      "pre"
    ],
    "*piunkn": [
      "pre",
      "pre"
    ],
    "lpwstr": [
      "pre",
      "pre"
    ],
    "jboolean": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "iscopy": [
      "pre",
      "pre"
    ],
    "ret": [
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "false": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "char*": [
      "pre",
      "pre"
    ],
    "temp_guid": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "*env)->getstringutfchars(env,": [
      "pre",
      "pre"
    ],
    "jguid": [
      "pre",
      "pre"
    ],
    "&iscopy;": [
      "pre",
      "pre"
    ],
    "//the": [
      "pre"
    ],
    "fails": [
      "pre"
    ],
    "sysallocstringlen0,": [
      "pre",
      "pre"
    ],
    "38;": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "multibytetowidecharcp_acp,": [
      "pre",
      "pre"
    ],
    "-1": [
      "pre",
      "pre"
    ],
    "guidfromstringguid,": [
      "pre",
      "pre"
    ],
    "&clsid;": [
      "pre",
      "pre"
    ],
    "..": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ret}": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "being": [
      "p"
    ],
    "reduces": [
      "p"
    ],
    "wtypes.h>": [
      "pre"
    ],
    "jniexport": [
      "pre"
    ],
    "jnicall": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "verifies": [
      "pre"
    ],
    "matches": [
      "pre"
    ],
    "criteria": [
      "pre"
    ],
    "if!validguid(temp_guid))": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ret}bool": [
      "pre"
    ],
    "validguidchar": [
      "pre"
    ],
    "*guid{": [
      "pre"
    ],
    "right": [
      "pre"
    ],
    "ifstrlen(guid)": [
      "pre"
    ],
    "!=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sample": [
      "pre"
    ],
    "{1ef4a023-143a-4e0e-ad72-69c2c68c2d70}": [
      "pre"
    ],
    "ifguid[0]": [
      "pre"
    ],
    "'{'": [
      "pre"
    ],
    "ifguid[9]": [
      "pre"
    ],
    "'-'": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ifguid[14]": [
      "pre"
    ],
    "ifguid[19]": [
      "pre"
    ],
    "ifguid[24]": [
      "pre"
    ],
    "ifguid[37]": [
      "pre"
    ],
    "'}'": [
      "pre"
    ],
    "int": [
      "pre"
    ],
    "i=1": [
      "pre"
    ],
    "whilei<37)": [
      "pre"
    ],
    "if(guid[i]": [
      "pre"
    ],
    "'a'": [
      "pre",
      "pre"
    ],
    "&&": [
      "pre",
      "pre",
      "pre"
    ],
    "guidi]": [
      "pre",
      "pre",
      "pre"
    ],
    "'f'": [
      "pre",
      "pre"
    ],
    "||": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "guid[i]": [
      "pre",
      "pre"
    ],
    "'0'": [
      "pre"
    ],
    "'9'": [
      "pre"
    ],
    "else": [
      "pre"
    ],
    "i++": [
      "pre",
      "pre"
    ],
    "ifi": [
      "pre"
    ],
    "==": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "i": [
      "pre",
      "pre",
      "pre"
    ],
    "true}": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "issues": [
      "ul",
      "li"
    ],
    "introduces": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "unsafe": [
      "ul",
      "li",
      "a"
    ],
    "from": [
      "ul",
      "li"
    ],
    "owasp": [
      "ul",
      "li"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Additional Resources"
    ],
    "p": [
      "Verify that your application validates all data that is passed between Java code and native code.",
      "Unchecked input and/or output can lead to buffer overflows, injection based attacks such as SQL injection, cross-site scripting, etc., that exploit weaknesses in the application.",
      "Due to the security risk posed by the use of native code, verify that your application validates data that is passed between native code and Java:",
      "Check if language boundaries are clearly defined. If your Java application needs to use native code, ensure that you have identified all the locations where the Java code interacts with native code. As your application moves between Java code and native code, special attention needs to be given to error handling routines, so that no security holes are introduced in your application by its native component.",
      "Verify the quality of your application's validators. Verify that your application's data is properly validated for length, range, format and type.",
      "Verify that all data is validated. Verify that all data passing through the locations identified in Step 1 is validated.",
      "Ensure that data validation code is centralized. It is better that all validation routines in your application are centralized for cleaner and better control. Shared validation routines are better than creating many spread throughout your application's code base. Every time your application accepts external data as input, it should first pass through this set of validation routines.",
      "There are several things to consider when validating input/output between native and Java code:",
      "Check language barriers. Distinguishing the boundaries between native and Java code is very important. Because the Java sandbox provides multiple security checks to its code, it is important to know the boundary between where the Java sandbox ends and the compiled code begins to interact directly with the CPU, so you can compensate for the lack of such checks inside the native code.",
      "Validate for length, range, format and type. After discovering the language boundaries, determine the type, format and structure of the data that is passed between Java and native code. Build a validator for each type of data that is passed between the two environments.",
      "Construct a set of validators. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on the language barriers. Your application should pass data between native and Java code only through its set of validators.",
      "The following segment shows a JNI code that utilizes a COM object. Making the assumption that the Java code will handle data validation, the JNI segment does not verify that the passed input is a valid GUID. Since invalid GUIDs may cause unhandled exceptions, an attacker can force the application to disclose its call stack and possibly its source filenames.",
      "The following segment shows a JNI code that utilizes a COM object. Because the passed input is validated as being a GUID, the application reduces the risk of unhandled exceptions."
    ],
    "ol": [
      "Check if language boundaries are clearly defined. If your Java application needs to use native code, ensure that you have identified all the locations where the Java code interacts with native code. As your application moves between Java code and native code, special attention needs to be given to error handling routines, so that no security holes are introduced in your application by its native component.\n    \n    \n      \n        Verify the quality of your application's validators. Verify that your application's data is properly validated for length, range, format and type.\n    \n    \n      \n        Verify that all data is validated. Verify that all data passing through the locations identified in Step 1 is validated.\n    \n    \n      \n        Ensure that data validation code is centralized. It is better that all validation routines in your application are centralized for cleaner and better control. Shared validation routines are better than creating many spread throughout your application's code base. Every time your application accepts external data as input, it should first pass through this set of validation routines.",
      "Check language barriers. Distinguishing the boundaries between native and Java code is very important. Because the Java sandbox provides multiple security checks to its code, it is important to know the boundary between where the Java sandbox ends and the compiled code begins to interact directly with the CPU, so you can compensate for the lack of such checks inside the native code.\n    \n    \n      \n        Validate for length, range, format and type. After discovering the language boundaries, determine the type, format and structure of the data that is passed between Java and native code. Build a validator for each type of data that is passed between the two environments. \n    \n    \n      \n        Construct a set of validators. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on the language barriers. Your application should pass data between native and Java code only through its set of validators."
    ],
    "li": [
      "Check if language boundaries are clearly defined. If your Java application needs to use native code, ensure that you have identified all the locations where the Java code interacts with native code. As your application moves between Java code and native code, special attention needs to be given to error handling routines, so that no security holes are introduced in your application by its native component.",
      "Verify the quality of your application's validators. Verify that your application's data is properly validated for length, range, format and type.",
      "Verify that all data is validated. Verify that all data passing through the locations identified in Step 1 is validated.",
      "Ensure that data validation code is centralized. It is better that all validation routines in your application are centralized for cleaner and better control. Shared validation routines are better than creating many spread throughout your application's code base. Every time your application accepts external data as input, it should first pass through this set of validation routines.",
      "Check language barriers. Distinguishing the boundaries between native and Java code is very important. Because the Java sandbox provides multiple security checks to its code, it is important to know the boundary between where the Java sandbox ends and the compiled code begins to interact directly with the CPU, so you can compensate for the lack of such checks inside the native code.",
      "Validate for length, range, format and type. After discovering the language boundaries, determine the type, format and structure of the data that is passed between Java and native code. Build a validator for each type of data that is passed between the two environments.",
      "Construct a set of validators. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on the language barriers. Your application should pass data between native and Java code only through its set of validators.",
      "For more information about the security issues that JNI introduces, see: Unsafe JNI from OWASP."
    ],
    "strong": [
      "Check if language boundaries are clearly defined.",
      "Verify the quality of your application's validators.",
      "Verify that all data is validated.",
      "Ensure that data validation code is centralized.",
      "Check language barriers.",
      "Validate for length, range, format and type.",
      "Construct a set of validators."
    ],
    "pre": [
      "#include <jni.h>#include <sys/types.h>#include <fcntl.h>#include <stdio.h>#include <atlbase.h>#include <windows.h>#include <wtypes.h>JNIEXPORT jbooleanJNICALL Java_Identifier_invokeObject      (JNIEnv * env, jobject jobj, jstring jguid){      HRESULT result;      CLSID clsid;      IUnknown *pIunkn;      LPWSTR guid;      jboolean iscopy;      jboolean ret = false;      char* temp_guid = (*env)->GetStringUTFChars(env, jguid, &iscopy);      //The application fails to verify that the GUID is valid      guid = SysAllocStringLen(0, 38);      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);      result = GUIDFromString(guid, &clsid);      ...      return ret;}",
      "#include <jni.h>#include <sys/types.h>#include <fcntl.h>#include <stdio.h>#include <atlbase.h>#include <windows.h>#include <wtypes.h>  JNIEXPORT jboolean JNICALL Java_Identifier_invokeObject      (JNIEnv * env, jobject jobj, jstring jguid){      HRESULT result;      CLSID clsid;      IUnknown *pIunkn;      LPWSTR guid;      jboolean iscopy;      jboolean ret = false;      char* temp_guid = (*env)->GetStringUTFChars(env, jguid, &iscopy);      // The application verifies that the input matches the criteria for a GUID      if(!validGUID(temp_guid))      {            return ret;      }      guid = SysAllocStringLen(0, 38);      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);      result = GUIDFromString(guid, &clsid);       ...      return ret;}bool validGUID(char *guid){      // Check that GUID is of right length      if(strlen(guid) != 38) return false;      // Sample GUID: {1EF4A023-143A-4e0e-AD72-69C2C68C2D70}      if(guid[0]  != '{') return false;      if(guid[9]  != '-') return false;      if(guid[14] != '-') return false;      if(guid[19] != '-') return false;      if(guid[24] != '-') return false;      if(guid[37] != '}') return false;      int i=1;      while(i<37)      {            if((guid[i] >= 'a' && guid[i] <= 'f')                  || (guid[i] >= 'A' && guid[i] <= 'F')                  || (guid[i] >= '0' && guid[i] <= '9')            {                  // GUID is valid            }            else            {                  return false;            }            i++;            if(i == 9 || i == 14 || i == 19 || i == 24)            {                  i++;            }      }      return true;}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "For more information about the security issues that JNI introduces, see: Unsafe JNI from OWASP."
    ],
    "a": [
      "Unsafe JNI"
    ]
  },
  "links": [
    {
      "href": "http://www.owasp.org/index.php/Unsafe_JNI",
      "text": "Unsafe JNI"
    }
  ],
  "html": "<h1>What to Check For</h1>\n  <p>Verify that your application validates all data that is passed between Java code and native code.</p>\n  <h1>Why</h1>\n  <p>Unchecked input and/or output can lead to buffer overflows, injection based attacks such as SQL injection, cross-site scripting, etc., that exploit weaknesses in the application.</p>\n  <h1>How to Check</h1>\n  <p>Due to the security risk posed by the use of native code, verify that your application validates data that is passed between native code and Java:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Check if language boundaries are clearly defined. </strong>If your Java application needs to use native code, ensure that you have identified all the locations where the Java code interacts with native code. As your application moves between Java code and native code, special attention needs to be given to error handling routines, so that no security holes are introduced in your application by its native component.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Verify the quality of your application's validators. </strong>Verify that your application's data is properly validated for length, range, format and type.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that all data is validated. </strong>Verify that all data passing through the locations identified in Step 1 is validated.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Ensure that data validation code is centralized. </strong>It is better that all validation routines in your application are centralized for cleaner and better control. Shared validation routines are better than creating many spread throughout your application's code base. Every time your application accepts external data as input, it should first pass through this set of validation routines.</p>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>There are several things to consider when validating input/output between native and Java code: </p>\n  <ol>\n    <li>\n      <p>\n        <strong>Check language barriers. </strong>Distinguishing&nbsp;the boundaries between native and Java code is very important. Because the Java sandbox provides multiple security checks to its code, it is important to know the boundary&nbsp;between&nbsp;where the Java sandbox ends and the compiled code begins&nbsp;to interact&nbsp;directly with the CPU, so you can&nbsp;compensate for&nbsp;the lack of such checks inside the native code.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Validate for length, range, format and type. </strong>After discovering the language boundaries, determine the type, format and structure of the data that is passed between Java and native code. Build a validator for each type of data that is passed between the two environments. </p>\n    </li>\n    <li>\n      <p>\n        <strong>Construct a set of validators. </strong>Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on the language barriers. Your application should pass data between native and Java code only through its set of validators.</p>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The following segment shows a JNI code that utilizes a COM object. Making the assumption that the Java code will handle data validation, the JNI segment does not verify that the passed input is a valid GUID. Since invalid GUIDs may cause unhandled exceptions, an attacker can force the application to disclose its call stack and possibly its source filenames.</p>\n  <pre>#include &lt;jni.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;fcntl.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;atlbase.h&gt;<br />#include &lt;windows.h&gt;<br />#include &lt;wtypes.h&gt;<br />JNIEXPORT jboolean<br />JNICALL Java_Identifier_invokeObject<br />      (JNIEnv * env, jobject jobj, jstring jguid)<br />{<br />      HRESULT result;<br />      CLSID clsid;<br />      IUnknown *pIunkn;<br />      LPWSTR guid;<br />      jboolean iscopy;<br />      jboolean ret = false;<br />      char* temp_guid = (*env)-&gt;GetStringUTFChars(env, jguid, &iscopy);<br />      //The application fails to verify that the GUID is valid<br />      guid = SysAllocStringLen(0, 38);<br />      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);<br />      result = GUIDFromString(guid, &clsid);<br />      ...<br />      return ret;<br />}</pre>\n  <h1>Solution Example</h1>\n  <p>The following segment shows a JNI code that utilizes a COM object. Because the passed input is validated as being a GUID, the application reduces the risk of unhandled exceptions.</p>\n  <pre>#include &lt;jni.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;fcntl.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;atlbase.h&gt;<br />#include &lt;windows.h&gt;<br />#include &lt;wtypes.h&gt;  <br />JNIEXPORT jboolean <br />JNICALL Java_Identifier_invokeObject<br />      (JNIEnv * env, jobject jobj, jstring jguid)<br />{<br />      HRESULT result;<br />      CLSID clsid;<br />      IUnknown *pIunkn;<br />      LPWSTR guid;<br />      jboolean iscopy;<br />      jboolean ret = false;<br />      char* temp_guid = (*env)-&gt;GetStringUTFChars(env, jguid, &iscopy);<br />      // The application verifies that the input matches the criteria for a GUID<br />      if(!validGUID(temp_guid))<br />      {<br />            return ret;<br />      }<br />      guid = SysAllocStringLen(0, 38);<br />      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);<br />      result = GUIDFromString(guid, &clsid);<br />       ...<br />      return ret;<br />}<br /><br />bool validGUID(char *guid)<br />{<br />      // Check that GUID is of right length<br />      if(strlen(guid) != 38) return false;<br />      // Sample GUID: {1EF4A023-143A-4e0e-AD72-69C2C68C2D70<br />}<br />      if(guid[0]  != '{') return false;<br />      if(guid[9]  != '-') return false;<br />      if(guid[14] != '-') return false;<br />      if(guid[19] != '-') return false;<br />      if(guid[24] != '-') return false;<br />      if(guid[37] != '}') return false;<br />      int i=1;<br />      while(i&lt;37)<br />      {<br />            if((guid[i] &gt;= 'a' && guid[i] &lt;= 'f')<br />                  || (guid[i] &gt;= 'A' && guid[i] &lt;= 'F')<br />                  || (guid[i] &gt;= '0' && guid[i] &lt;= '9')<br />            {<br />                  // GUID is valid<br />            }<br />            else<br />            {<br />                  return false;<br />            }<br />            i++;<br />            if(i == 9 || i == 14 || i == 19 || i == 24)<br />            {<br />                  i++;<br />            }<br />      }<br /><br />      return true;<br />}</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information about the security issues that JNI introduces, see: <a href=\"http://www.owasp.org/index.php/Unsafe_JNI\">Unsafe JNI</a> from OWASP. </li>\n  </ul>\n  <br />"
}