{
  "id": "fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f",
  "checksum": "abdd99fdb2f0ca37b72f7f3da3b138d69852cf94",
  "words": {
    "1": [
      "ul",
      "li",
      "h1",
      "h2",
      "em",
      "ol",
      "li"
    ],
    "2": [
      "ul",
      "li",
      "h2",
      "em",
      "h1",
      "ol",
      "li"
    ],
    "3": [
      "ul",
      "li",
      "h1"
    ],
    "4": [
      "ul",
      "li",
      "h1"
    ],
    "401": [
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "j2ee": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "services": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "must": [
      "p",
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p"
    ],
    "client": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "order": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "check": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "bugs": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "such": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p"
    ],
    "cross-site": [
      "p",
      "p"
    ],
    "scripting": [
      "p",
      "p"
    ],
    "many": [
      "p",
      "p",
      "p"
    ],
    "rely": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em",
      "p",
      "p",
      "p",
      "p"
    ],
    "client-side": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "scripts": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p"
    ],
    "sent": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "along": [
      "p"
    ],
    "with": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "pages": [
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p"
    ],
    "these": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "proper": [
      "p",
      "p",
      "p",
      "p"
    ],
    "format": [
      "p",
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "entered": [
      "p"
    ],
    "into": [
      "p",
      "p",
      "p"
    ],
    "forms": [
      "p",
      "p"
    ],
    "at": [
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "p",
      "p"
    ],
    "page": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "submitted": [
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "avoiding": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h2",
      "h2",
      "em",
      "em",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "round": [
      "p"
    ],
    "trip": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "checks": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p"
    ],
    "email": [
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "ol",
      "li"
    ],
    "addresses": [
      "p"
    ],
    "phone": [
      "p"
    ],
    "numbers": [
      "p"
    ],
    "zip": [
      "p"
    ],
    "codes": [
      "p"
    ],
    "during": [
      "p"
    ],
    "script": [
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "bypass": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "attack": [
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "modifies": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p"
    ],
    "annuls": [
      "p",
      "ol",
      "li"
    ],
    "against": [
      "p",
      "p",
      "p"
    ],
    "malicious": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "successfully": [
      "p"
    ],
    "submit": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "execute": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "h1",
      "p"
    ],
    "an": [
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "recommended": [
      "p"
    ],
    "follow": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p",
      "p"
    ],
    "test": [
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "h1",
      "h1",
      "p",
      "h1",
      "p",
      "h1",
      "p"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1"
    ],
    "start": [
      "ul",
      "li",
      "h1"
    ],
    "testing": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "exploring": [
      "ul",
      "li",
      "h1"
    ],
    "additional": [
      "ul",
      "li",
      "h1",
      "p",
      "h2",
      "em"
    ],
    "first": [
      "p"
    ],
    "necessary": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "title"
    ],
    "attackers": [
      "p",
      "p",
      "p",
      "p"
    ],
    "exploit": [
      "p"
    ],
    "two": [
      "p"
    ],
    "common": [
      "p"
    ],
    "ways": [
      "p"
    ],
    "bypassing": [
      "p"
    ],
    "disabling": [
      "ul",
      "li",
      "h2",
      "em",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "p"
    ],
    "prior": [
      "ul",
      "li",
      "h2",
      "em"
    ],
    "submitting": [
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "em",
      "h2",
      "em",
      "p",
      "p"
    ],
    "request": [
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "ol",
      "li",
      "pre",
      "p",
      "h2",
      "em",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "modifying": [
      "ul",
      "li",
      "h2",
      "em",
      "p"
    ],
    "validated": [
      "ul",
      "li",
      "h2",
      "em"
    ],
    "after": [
      "ul",
      "li",
      "h2",
      "em"
    ],
    "using": [
      "ul",
      "li",
      "h2",
      "em",
      "h2",
      "em",
      "p"
    ],
    "http": [
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "h2",
      "em",
      "p"
    ],
    "proxy": [
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h2",
      "em",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "scenario": [
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "disables": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "ol",
      "li",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "setting": [
      "p"
    ],
    "his": [
      "p"
    ],
    "browser": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "options": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "disable": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "javascript": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "making": [
      "p",
      "p"
    ],
    "actual": [
      "p"
    ],
    "doing": [
      "p",
      "p"
    ],
    "may": [
      "p"
    ],
    "any": [
      "p"
    ],
    "sequence": [
      "p"
    ],
    "characters": [
      "p"
    ],
    "detail": [
      "p",
      "p"
    ],
    "requests": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "containing": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "fields": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "form": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "sends": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "receives": [
      "ol",
      "li"
    ],
    "enters": [
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "submits": [
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "note": [
      "p",
      "p",
      "p"
    ],
    "however": [
      "p"
    ],
    "including": [
      "p"
    ],
    "ajax-based": [
      "p"
    ],
    "capabilities": [
      "p"
    ],
    "so": [
      "p",
      "p"
    ],
    "might": [
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "unable": [
      "p"
    ],
    "disabled": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "case": [
      "p"
    ],
    "needs": [
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "doesn’t": [
      "p"
    ],
    "modify": [
      "p",
      "ol",
      "li"
    ],
    "but": [
      "p"
    ],
    "instead": [
      "p",
      "p"
    ],
    "proxies": [
      "p",
      "ol",
      "li"
    ],
    "through": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "packet-intercepting": [
      "p"
    ],
    "burp": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "webscarab": [
      "p"
    ],
    "then": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "well-formed": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "target": [
      "p"
    ],
    "intercept": [
      "p",
      "em"
    ],
    "change": [
      "p"
    ],
    "string": [
      "p"
    ],
    "enables": [
      "ol",
      "li"
    ],
    "packet": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "interception": [
      "ol",
      "li"
    ],
    "allowed)": [
      "ol",
      "li"
    ],
    "since": [
      "ol",
      "li"
    ],
    "valid": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "makes": [
      "ol",
      "li"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "intercepted": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "replaces": [
      "ol",
      "li"
    ],
    "forwards": [
      "ol",
      "li"
    ],
    "second": [
      "p"
    ],
    "what": [
      "p"
    ],
    "them": [
      "p",
      "p"
    ],
    "avoid": [
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "exists": [
      "p"
    ],
    "because": [
      "p"
    ],
    "only": [
      "p",
      "p",
      "p"
    ],
    "security-specific": [
      "p"
    ],
    "send": [
      "p"
    ],
    "reduce": [
      "p"
    ],
    "number": [
      "p"
    ],
    "round-trips": [
      "p"
    ],
    "between": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "address": [
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "ol",
      "li"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p"
    ],
    "clicks": [
      "p"
    ],
    "button": [
      "p"
    ],
    "jsp": [
      "p",
      "p"
    ],
    "invokes": [
      "p",
      "p",
      "p"
    ],
    "validateform)to": [
      "p"
    ],
    "validateform)": [
      "strong"
    ],
    "%@page": [
      "pre"
    ],
    "contenttype=\"text/html\"": [
      "pre"
    ],
    "pageencoding=\"utf-8\"%\n<!doctype": [
      "pre"
    ],
    "html": [
      "pre",
      "pre"
    ],
    "public": [
      "pre"
    ],
    "\"-//w3c//dtd": [
      "pre"
    ],
    "transitional//en\"\"http://www.w3.org/tr/html4/loose.dtd\">\n<html><head><meta": [
      "pre"
    ],
    "http-equiv=\"content-type\"": [
      "pre"
    ],
    "content=\"text/html": [
      "pre"
    ],
    "charset=utf-8\"<title>java": [
      "pre"
    ],
    "search/title><script>function": [
      "pre"
    ],
    "validateformemailstr){\t//": [
      "pre"
    ],
    "e-mail": [
      "pre"
    ],
    "valid\tvar": [
      "pre"
    ],
    "emailpat": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"^a-za-z0-9._%+-]+@[a-za-z0-9.-]+\\\\.[a-za-z]{2,4}$\";\tvar": [
      "pre"
    ],
    "matcharray": [
      "pre",
      "pre"
    ],
    "emailstrmatch(emailpat);\tif": [
      "pre"
    ],
    "==": [
      "pre"
    ],
    "null": [
      "pre"
    ],
    "{\t\talert\"incorrect": [
      "pre"
    ],
    "format\";\t\treturn": [
      "pre"
    ],
    "false\t}\tdocument.form1.action": [
      "pre"
    ],
    "\"getprofile\"": [
      "pre"
    ],
    "documentform1.method": [
      "pre"
    ],
    "\"post\"": [
      "pre"
    ],
    "docuemntform1.submit();": [
      "pre"
    ],
    "return": [
      "pre"
    ],
    "true": [
      "pre",
      "pre"
    ],
    "}/script>": [
      "pre"
    ],
    "body><form": [
      "pre"
    ],
    "name=\"form1\"": [
      "pre"
    ],
    "action=\"getprofile\"": [
      "pre"
    ],
    "method=\"post\"onsubmit=\"return": [
      "pre"
    ],
    "validateformthis.username.value);\">email": [
      "pre"
    ],
    "type=\"text\"": [
      "pre"
    ],
    "name=\"username\"": [
      "pre"
    ],
    "size=\"20\"<br/>password:": [
      "pre"
    ],
    "type=\"password\"": [
      "pre"
    ],
    "name=\"password\"": [
      "pre"
    ],
    "size=\"20\"<br/><input": [
      "pre"
    ],
    "type=\"submit\"": [
      "pre"
    ],
    "value=\"submit\"</form></body></html>": [
      "pre"
    ],
    "onsubmit=\"return": [
      "strong"
    ],
    "validateformthis.username.value);": [
      "strong"
    ],
    "server-side": [
      "p",
      "p",
      "p"
    ],
    "method": [
      "p"
    ],
    "named": [
      "p"
    ],
    "getprofile": [
      "p",
      "em"
    ],
    "validating": [
      "p",
      "p"
    ],
    "function": [
      "p",
      "p"
    ],
    "alerts": [
      "p"
    ],
    "incorrect": [
      "p"
    ],
    "developer": [
      "p"
    ],
    "avoids": [
      "p"
    ],
    "round-trip": [
      "p"
    ],
    "formats": [
      "p"
    ],
    "problem": [
      "p"
    ],
    "arises": [
      "p"
    ],
    "developers": [
      "p",
      "p",
      "p"
    ],
    "kind": [
      "p",
      "p"
    ],
    "protecting": [
      "p"
    ],
    "security": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p"
    ],
    "command": [
      "p"
    ],
    "similar": [
      "p"
    ],
    "require": [
      "p"
    ],
    "ill-intended": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "trivially": [
      "p"
    ],
    "one": [
      "p"
    ],
    "above": [
      "p",
      "p"
    ],
    "protect": [
      "p"
    ],
    "perform": [
      "p",
      "p",
      "p"
    ],
    "private": [
      "pre"
    ],
    "boolean": [
      "pre"
    ],
    "validateemailstring": [
      "pre"
    ],
    "emailstr{\tstring": [
      "pre"
    ],
    "\"a-za-z0-9._%+-]+@[a-za-z0-9.-]+\\\\.[a-za-z]{2,4}\";": [
      "pre"
    ],
    "!emailstr.matches(emailpat))\t{\t\treturn": [
      "pre"
    ],
    "false\t}\treturn": [
      "pre"
    ],
    "}protected": [
      "pre"
    ],
    "void": [
      "pre"
    ],
    "processrequesthttpservletrequest": [
      "pre"
    ],
    "httpservletresponse": [
      "pre"
    ],
    "response": [
      "pre"
    ],
    "throws": [
      "pre"
    ],
    "servletexception": [
      "pre"
    ],
    "ioexception{\tresponsesetcontenttype(\"text/html;charset=utf-8\");\tprintwriter": [
      "pre"
    ],
    "out": [
      "pre"
    ],
    "responsegetwriter();": [
      "pre"
    ],
    "!validateemail(request.getparameter(\"username\")))": [
      "pre"
    ],
    "{": [
      "pre",
      "pre"
    ],
    "outprintln(\"invalid": [
      "pre"
    ],
    "format\";\t}": [
      "pre"
    ],
    "else": [
      "pre"
    ],
    "//": [
      "pre"
    ],
    "continue": [
      "pre"
    ],
    "authentication": [
      "pre",
      "p"
    ],
    "process..\t}": [
      "pre"
    ],
    "}": [
      "pre"
    ],
    "inside": [
      "p"
    ],
    "processrequest": [
      "p",
      "em"
    ],
    "runs": [
      "p"
    ],
    "starts": [
      "p"
    ],
    "checking": [
      "p"
    ],
    "correct": [
      "p"
    ],
    "stops": [
      "p"
    ],
    "process": [
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "next": [
      "p"
    ],
    "discovering": [
      "p"
    ],
    "basic": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "attacker’s": [
      "p"
    ],
    "perspective": [
      "p"
    ],
    "discover": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "successful": [
      "p"
    ],
    "your": [
      "p"
    ],
    "internet": [
      "h2",
      "em",
      "p"
    ],
    "open": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "navigate": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "click": [
      "ol",
      "li"
    ],
    "ok": [
      "ol",
      "li"
    ],
    "expected": [
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "performs": [
      "p"
    ],
    "rejects": [
      "p"
    ],
    "intercepting": [
      "h2",
      "em"
    ],
    "download": [
      "ol",
      "li"
    ],
    "suite": [
      "ol",
      "li"
    ],
    "http://portswigger.net/suite/).": [
      "ol",
      "li"
    ],
    "proxy-intercept": [
      "ol",
      "li",
      "em"
    ],
    "tab": [
      "ol",
      "li"
    ],
    "set": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "“intercept": [
      "ol",
      "li"
    ],
    "on”": [
      "ol",
      "li"
    ],
    "connection": [
      "ol",
      "li"
    ],
    "use": [
      "ol",
      "li",
      "p"
    ],
    "fill": [
      "ol",
      "li"
    ],
    "allowed": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "values": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "changing": [
      "ol",
      "li"
    ],
    "malformed": [
      "ol",
      "li",
      "p"
    ],
    "ones": [
      "ol",
      "li"
    ],
    "see": [
      "ol",
      "li"
    ],
    "figures": [
      "ol",
      "li"
    ],
    "below.": [
      "ol",
      "li"
    ],
    "forward": [
      "ol",
      "li"
    ],
    "http//portswigger.net/suite/": [
      "a"
    ],
    "reject": [
      "p"
    ],
    "final": [
      "p"
    ],
    "where": [
      "p"
    ],
    "ajax": [
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p"
    ],
    "high": [
      "h2",
      "em"
    ],
    "risk": [
      "h2",
      "em"
    ],
    "asynchronous": [
      "p"
    ],
    "xml": [
      "p"
    ],
    "heavily": [
      "p"
    ],
    "important": [
      "p"
    ],
    "consider": [
      "p",
      "h2",
      "em"
    ],
    "impossible": [
      "p"
    ],
    "bug": [
      "p"
    ],
    "will": [
      "p"
    ],
    "stop": [
      "p"
    ],
    "therefore": [
      "p"
    ],
    "required": [
      "p"
    ],
    "frameworks": [
      "h2",
      "em",
      "p"
    ],
    "integrate": [
      "p"
    ],
    "other": [
      "p"
    ],
    "flash/flex": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "its": [
      "p"
    ],
    "own": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "flash": [
      "p",
      "p"
    ],
    "parameters": [
      "p"
    ],
    "validators": [
      "p"
    ],
    "flex": [
      "p"
    ],
    "their": [
      "p"
    ],
    "fail": [
      "p"
    ],
    "do": [
      "p"
    ],
    "conclusions": [
      "h1"
    ],
    "allow": [
      "p"
    ],
    "input-related": [
      "p"
    ],
    "xss": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "implementing": [
      "p"
    ],
    "done": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "nature": [
      "p"
    ],
    "under": [
      "p"
    ],
    "traditional,": [
      "p"
    ],
    "etc.": [
      "p"
    ],
    "java": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Start Testing and Exploring",
      "Step 4: Execute Additional Testing",
      "Conclusions"
    ],
    "ul": [
      "J2EE applications and services",
      "Step 1: Understand attack scenarios \n    Step 2: Analyze causes and countermeasures \n    Step 3: Start testing and exploring \n    Step 4: Execute additional testing",
      "Disabling a client-side script prior to submitting a request \n    Modifying validated data after submitting a request, using an HTTP proxy"
    ],
    "li": [
      "J2EE applications and services",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Execute additional testing",
      "Disabling a client-side script prior to submitting a request",
      "Modifying validated data after submitting a request, using an HTTP proxy",
      "Attacker requests a Web page containing input fields, such as a Web form. The application sends a Web page with a client-side input validation script.",
      "Attacker receives the Web page and annuls the client-side validation by disabling JavaScript in the browser.",
      "Attacker enters malicious data in the input fields and submits the Web form.",
      "Attacker requests a Web page containing input fields, such as a Web form. The application sends a Web page with client-side input validation script.",
      "Attacker proxies browser through HTTP proxy and enables HTTP packet interception.",
      "Attacker enters well-formed (allowed) data in the input fields and then submits the Web form. Since the input is valid, the Web page makes a request to the application, which is intercepted by HTTP proxy.",
      "In HTTP proxy, the attacker replaces the well-formed data with malicious data and forwards the packet to the application.",
      "Open a browser and navigate to the Web page containing client-side validation script.",
      "Open browser Options and navigate to security options.",
      "Disable JavaScript and then click OK.",
      "Submit ill-intended data in the Web form.",
      "Open a browser and navigate to a Web page containing a client-side validation script.",
      "Download and execute Burp suite (http://portswigger.net/suite/).",
      "In Proxy->Intercept tab, set proxy to “intercept is on.”",
      "In browser, set connection options to use Burp proxy.",
      "Fill in the Web page with allowed values, such as a valid email address.",
      "Submit the Web page.",
      "In Burp proxy, modify the intercepted request by changing the allowed values with malformed ones (see Figures 1 and 2 below).",
      "Forward request."
    ],
    "p": [
      "Web applications must validate client input in order to check for injection bugs such as SQL injection and cross-site scripting.  Many Web applications rely on client-side scripts that are sent to the client along with Web pages. The application uses these scripts to check for proper format of input data entered into Web forms at the client before the page is submitted to the server, avoiding a round trip for simple format checks such as email addresses, phone numbers, and ZIP codes.  During a client-side script validation bypass attack, the attacker modifies or annuls a client-side script that checks against malicious input in order to successfully submit the input and execute an attack on the application.",
      "It is recommended to follow these steps to test for client-side validation bypass bugs in J2EE:",
      "First, it is necessary to understand how attackers exploit client-side validation bypass bugs.   Two common ways of bypassing client-side scripts are:",
      "In this scenario, the attacker disables the client-side script by setting his browser options to disable JavaScript before making the actual request to the application server. By doing this, the attacker may submit any sequence of characters to the application.",
      "In detail:",
      "Note, however, that many applications, including AJAX-based applications, rely on JavaScript capabilities, so the attacker might be unable to submit the form with JavaScript disabled. If this is the case, the attacker needs to execute the following attack.",
      "In this scenario, the attacker doesn’t modify or disable the client-side script but instead proxies the browser through an HTTP packet-intercepting proxy such as Burp proxy or WebScarab. The attacker then enters well-formed input data into the target input fields and submits the request. The attacker then uses the proxy to intercept the request and change the well-formed input data into a malicious string.",
      "In detail:",
      "The second step in testing for client-side validation bypass bugs is to analyze what causes them and how to avoid them.",
      "This vulnerability exists because applications rely only on client-side checks for security-specific checks. Many applications send client-side scripts to reduce the number of round-trips between the client and the server.  For instance, the following code checks if an email address is valid before submitting a Web form. When a client clicks on the submit button, the JSP page invokes validateForm()to check for a valid email address before submitting the form:",
      "",
      "Note that the form invokes a server-side JSP method named getProfile through a validating JavaScript function that alerts the client if the input email address is in an incorrect format. By doing this, the developer avoids a round-trip to the server to check for valid email address formats.",
      "A problem arises when developers rely on this kind of check for protecting against application security attacks such as SQL injection, cross-site scripting, command injection, and similar attacks that require attackers to submit ill-intended input to the application.  Attackers can trivially bypass client-side checks, such as the one above, in order to attack the application.",
      "To protect against client-side bypass bugs, J2EE applications must perform proper validation at the server:",
      "Note that the code above invokes the validating email function inside processRequest, which runs at the server. The request starts by checking if the email is in the correct format and stops the authentication process if it is not.",
      "The next step in discovering client-side validation bypass bugs is to execute basic test cases from an attacker’s perspective in order to discover if they are successful in your application.",
      "Follow these steps to test for client-side validation bypass by disabling JavaScript:",
      "Expected result: The application performs proper server-side validation and rejects the ill-intended data.",
      "Follow these steps to bypass client-side validation by modifying a Web page:",
      "Expected result: The application must perform proper server-side validation and reject the ill-intended data.",
      "",
      "",
      "The final step in testing for client-side validation bugs is to understand additional scenarios where testing is necessary.",
      "AJAX (Asynchronous JavaScript and XML) applications rely heavily on client-side scripts. It is important to consider that it is impossible to disable JavaScript when testing for this bug in AJAX applications, as this will stop the browser from making requests; therefore, the use of a proxy is required with AJAX applications.",
      "Web developers might integrate J2EE applications with other Internet frameworks such as Flash/Flex. This kind of framework might provide its own client-side forms with data validation options. Make sure to test Flash parameters for this vulnerability, as developers might rely on Web form validators such as Flex to validate their input at the client only, and fail to do so at the server.",
      "Client-side validation bypass bugs allow attackers to submit malformed data that is not expected by the application in order to execute input-related attacks such as XSS and SQL injection. Applications are vulnerable when they rely on client-side scripts only to perform security checks instead of implementing these checks at the server. Testing can be done by disabling JavaScript or using an HTTP proxy, depending on the nature of the application under test (traditional, AJAX, Flash, etc).",
      ""
    ],
    "h2": [
      "Scenario 1: Disabling a Client-side Script Prior to Submitting a Request",
      "Scenario 2: Modifying Validated Data after Submitting a Request by using an HTTP Proxy",
      "Test by Disabling JavaScript in Internet Browser",
      "Test by Intercepting HTTP Request using a proxy",
      "AJAX Applications are at High Risk",
      "Consider Additional Frameworks"
    ],
    "em": [
      "Scenario 1: Disabling a Client-side Script Prior to Submitting a Request",
      "Scenario 2: Modifying Validated Data after Submitting a Request by using an HTTP Proxy",
      "",
      "getProfile",
      "processRequest",
      "Test by Disabling JavaScript in Internet Browser",
      "Test by Intercepting HTTP Request using a proxy",
      "Proxy->Intercept",
      "intercept is on",
      "AJAX Applications are at High Risk",
      "Consider Additional Frameworks"
    ],
    "ol": [
      "Attacker requests a Web page containing input fields, such as a Web form. The application sends a Web page with a client-side input validation script. \n    Attacker receives the Web page and annuls the client-side validation by disabling JavaScript in the browser. \n    Attacker enters malicious data in the input fields and submits the Web form.",
      "Attacker requests a Web page containing input fields, such as a Web form. The application sends a Web page with client-side input validation script. \n    Attacker proxies browser through HTTP proxy and enables HTTP packet interception. \n    Attacker enters well-formed (allowed) data in the input fields and then submits the Web form. Since the input is valid, the Web page makes a request to the application, which is intercepted by HTTP proxy. \n    In HTTP proxy, the attacker replaces the well-formed data with malicious data and forwards the packet to the application.",
      "Open a browser and navigate to the Web page containing client-side validation script. \n    Open browser Options and navigate to security options. \n    Disable JavaScript and then click OK. \n    Submit ill-intended data in the Web form.",
      "Open a browser and navigate to a Web page containing a client-side validation script. \n    Download and execute Burp suite (http://portswigger.net/suite/). \n    In Proxy->Intercept tab, set proxy to “intercept is on.” \n    In browser, set connection options to use Burp proxy. \n    Fill in the Web page with allowed values, such as a valid email address. \n    Submit the Web page. \n    In Burp proxy, modify the intercepted request by changing the allowed values with malformed ones (see Figures 1 and 2 below). \n    Forward request."
    ],
    "strong": [
      "validateForm()",
      "onsubmit=\"return validateForm(this.username.value);",
      ""
    ],
    "pre": [
      "<%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><title>Java Search</title><script>function validateForm(emailStr){\t// checks if the e-mail address is valid\tvar emailPat = \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\";\tvar matchArray = emailStr.match(emailPat);\tif (matchArray == null)        {\t\talert(\"Incorrect email address format\");\t\treturn false;\t}\tdocument.form1.action = \"getProfile\";   \tdocument.form1.method = \"POST\";   \tdocuemnt.form1.submit();   \treturn true; }</script> <body><form name=\"form1\" action=\"getProfile\" method=\"POST\"onsubmit=\"return validateForm(this.username.value);\">Email address: <input type=\"text\" name=\"username\" size=\"20\"><br/>Password: <input type=\"password\" name=\"password\" size=\"20\"><br/><input type=\"submit\" value=\"Submit\"></form></body></html>",
      "private boolean validateEmail(String emailStr){\tString emailPat = \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\"; \tif (!emailStr.matches(emailPat))\t{\t\treturn false;\t}\treturn true;  }protected void processRequest(HttpServletRequest request,\t\t\t HttpServletResponse response)            \t\tthrows ServletException, IOException{\tresponse.setContentType(\"text/html;charset=UTF-8\");\tPrintWriter out = response.getWriter();   \tif (!validateEmail(request.getParameter(\"username\")))   \t{      \t\tout.println(\"Invalid email format\");\t} \telse   \t{        \t\t// continue with authentication process...\t} }"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://portswigger.net/suite/"
    ]
  },
  "links": [
    {
      "href": "http://portswigger.net/suite/",
      "text": "http://portswigger.net/suite/"
    }
  ],
  "html": "<h1>\n     Applies to \n  </h1>\n  <ul>\n    <li>J2EE applications and services</li>\n  </ul>\n  <h1>\n     Summary \n  </h1>\n  <p>Web applications must validate client input in order to check for injection bugs such as SQL injection and cross-site scripting.  Many Web applications rely on client-side scripts that are sent to the client along with Web pages. The application uses these scripts to check for proper format of input data entered into Web forms at the client before the page is submitted to the server, avoiding a round trip for simple format checks such as email addresses, phone numbers, and ZIP codes.  During a client-side script validation bypass attack, the attacker modifies or annuls a client-side script that checks against malicious input in order to successfully submit the input and execute an attack on the application.</p>\n  <p>It is recommended to follow these steps to test for client-side validation bypass bugs in J2EE:</p>\n  <ul>\n    <li>Step 1: Understand attack scenarios </li>\n    <li>Step 2: Analyze causes and countermeasures </li>\n    <li>Step 3: Start testing and exploring </li>\n    <li>Step 4: Execute additional testing</li>\n  </ul>\n  <h1>\n     Step 1: Understand attack scenarios \n  </h1>\n  <p>First, it is necessary to understand how attackers exploit client-side validation bypass bugs.   Two common ways of bypassing client-side scripts are:</p>\n  <ul>\n    <li>Disabling a client-side script prior to submitting a request </li>\n    <li>Modifying validated data after submitting a request, using an HTTP proxy</li>\n  </ul>\n  <h2>\n    <em>Scenario 1: Disabling a Client-side Script Prior to Submitting a Request</em>\n  </h2>\n  <p>In this scenario, the attacker disables the client-side script by setting his browser options to disable JavaScript before making the actual request to the application server. By doing this, the attacker may submit any sequence of characters to the application.</p>\n  <p>In detail:</p>\n  <ol>\n    <li>Attacker requests a Web page containing input fields, such as a Web form. The application sends a Web page with a client-side input validation script. </li>\n    <li>Attacker receives the Web page and annuls the client-side validation by disabling JavaScript in the browser. </li>\n    <li>Attacker enters malicious data in the input fields and submits the Web form.</li>\n  </ol>\n  <p>Note, however, that many applications, including AJAX-based applications, rely on JavaScript capabilities, so the attacker might be unable to submit the form with JavaScript disabled. If this is the case, the attacker needs to execute the following attack.</p>\n  <h2>\n    <em>Scenario 2: Modifying Validated Data after Submitting a Request by using an HTTP Proxy</em>\n  </h2>\n  <p>In this scenario, the attacker doesn’t modify or disable the client-side script but instead proxies the browser through an HTTP packet-intercepting proxy such as Burp proxy or WebScarab. The attacker then enters well-formed input data into the target input fields and submits the request. The attacker then uses the proxy to intercept the request and change the well-formed input data into a malicious string.</p>\n  <p>In detail:</p>\n  <ol>\n    <li>Attacker requests a Web page containing input fields, such as a Web form. The application sends a Web page with client-side input validation script. </li>\n    <li>Attacker proxies browser through HTTP proxy and enables HTTP packet interception. </li>\n    <li>Attacker enters well-formed (allowed) data in the input fields and then submits the Web form. Since the input is valid, the Web page makes a request to the application, which is intercepted by HTTP proxy. </li>\n    <li>In HTTP proxy, the attacker replaces the well-formed data with malicious data and forwards the packet to the application.</li>\n  </ol>\n  <h1>\n     Step 2: Analyze Causes and Countermeasures \n  </h1>\n  <p>The second step in testing for client-side validation bypass bugs is to analyze what causes them and how to avoid them.</p>\n  <p>This vulnerability exists because applications rely only on client-side checks for security-specific checks. Many applications send client-side scripts to reduce the number of round-trips between the client and the server.  For instance, the following code checks if an email address is valid before submitting a Web form. When a client clicks on the submit button, the JSP page invokes <strong>validateForm()</strong><em></em>to check for a valid email address before submitting the form:</p>\n  <pre>&lt;%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%&gt;\n&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;<br />&lt;head&gt;<br />&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;<br />&lt;title&gt;Java Search&lt;/title&gt;<br /><br />&lt;script&gt;<br />function validateForm(emailStr)<br />{<br />\t// checks if the e-mail address is valid<br />\tvar emailPat = \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\";<br />\tvar matchArray = emailStr.match(emailPat);<br />\tif (matchArray == null)<br />        {<br />\t\talert(\"Incorrect email address format\");<br />\t\treturn false;<br />\t}<br />\tdocument.form1.action = \"getProfile\";<br />   \tdocument.form1.method = \"POST\";<br />   \tdocuemnt.form1.submit();<br />   \treturn true; <br />}<br />&lt;/script&gt; <br />&lt;body&gt;<br /><br />&lt;form name=\"form1\" action=\"getProfile\" method=\"POST\"<br /><strong>onsubmit=\"return validateForm(this.username.value);</strong>\"&gt;<br /><br />Email address: <br />&lt;input type=\"text\" name=\"username\" size=\"20\"&gt;&lt;br/&gt;<br />Password: <br />&lt;input type=\"password\" name=\"password\" size=\"20\"&gt;&lt;br/&gt;<br />&lt;input type=\"submit\" value=\"Submit\"&gt;<br />&lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt; \n  </pre>\n  <p>\n  </p>\n  <p>Note that the form invokes a server-side JSP method named <em>getProfile</em> through a validating JavaScript function that alerts the client if the input email address is in an incorrect format. By doing this, the developer avoids a round-trip to the server to check for valid email address formats.</p>\n  <p>A problem arises when developers rely on this kind of check for protecting against application security attacks such as SQL injection, cross-site scripting, command injection, and similar attacks that require attackers to submit ill-intended input to the application.  Attackers can trivially bypass client-side checks, such as the one above, in order to attack the application.</p>\n  <p>To protect against client-side bypass bugs, J2EE applications must perform proper validation at the server:</p>\n  <pre>private boolean validateEmail(String emailStr)<br />{<br />\tString emailPat = \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\"; <br />\tif (!emailStr.matches(emailPat))<br />\t{<br />\t\treturn false;<br />\t}<br />\treturn true;  <br />}<br /><br />protected void processRequest(HttpServletRequest request,<br />\t\t\t HttpServletResponse response)<br />            \t\tthrows ServletException, IOException<br />{<br /><br />\tresponse.setContentType(\"text/html;charset=UTF-8\");<br />\tPrintWriter out = response.getWriter();<br /><br />   \tif (!validateEmail(request.getParameter(\"username\")))<br />   \t{<br />      \t\tout.println(\"Invalid email format\");<br />\t} <br />\telse<br />   \t{  <br />      \t\t// continue with authentication process...<br />\t} <br />}</pre>\n  <p>Note that the code above invokes the validating email function inside <em>processRequest</em>, which runs at the server. The request starts by checking if the email is in the correct format and stops the authentication process if it is not.</p>\n  <h1>\n     Step 3: Start Testing and Exploring \n  </h1>\n  <p>The next step in discovering client-side validation bypass bugs is to execute basic test cases from an attacker’s perspective in order to discover if they are successful in your application.</p>\n  <h2>\n    <em>Test by Disabling JavaScript in Internet Browser</em>\n  </h2>\n  <p>Follow these steps to test for client-side validation bypass by disabling JavaScript:</p>\n  <ol>\n    <li>Open a browser and navigate to the Web page containing client-side validation script. </li>\n    <li>Open browser Options and navigate to security options. </li>\n    <li>Disable JavaScript and then click OK. </li>\n    <li>Submit ill-intended data in the Web form. </li>\n  </ol>\n  <p>Expected result: The application performs proper server-side validation and rejects the ill-intended data. </p>\n  <h2>\n    <em>Test by Intercepting HTTP Request using a proxy</em>\n  </h2>\n  <p>Follow these steps to bypass client-side validation by modifying a Web page:</p>\n  <ol>\n    <li>Open a browser and navigate to a Web page containing a client-side validation script. </li>\n    <li>Download and execute Burp suite (<a href=\"http://portswigger.net/suite/\">http://portswigger.net/suite/</a>). </li>\n    <li>In <em>Proxy-&gt;Intercept</em> tab, set proxy to “<em>intercept is on</em>.” </li>\n    <li>In browser, set connection options to use Burp proxy. </li>\n    <li>Fill in the Web page with allowed values, such as a valid email address. </li>\n    <li>Submit the Web page. </li>\n    <li>In Burp proxy, modify the intercepted request by changing the allowed values with malformed ones (see Figures 1 and 2 below). </li>\n    <li>Forward request.</li>\n  </ol>\n  <p>Expected result: The application must perform proper server-side validation and reject the ill-intended data.</p>\n  <p>\n    <strong>\n    </strong>\n  </p>\n  <p />\n  <h1>\n         Step 4: Execute Additional Testing \n      </h1>\n  <p>The final step in testing for client-side validation bugs is to understand additional scenarios where testing is necessary.</p>\n  <h2>\n    <em>AJAX Applications are at High Risk</em>\n  </h2>\n  <p>AJAX (Asynchronous JavaScript and XML) applications rely heavily on client-side scripts. It is important to consider that it is impossible to disable JavaScript when testing for this bug in AJAX applications, as this will stop the browser from making requests; therefore, the use of a proxy is required with AJAX applications.</p>\n  <h2>\n    <em>Consider Additional Frameworks</em>\n  </h2>\n  <p>Web developers might integrate J2EE applications with other Internet frameworks such as Flash/Flex. This kind of framework might provide its own client-side forms with data validation options. Make sure to test Flash parameters for this vulnerability, as developers might rely on Web form validators such as Flex to validate their input at the client only, and fail to do so at the server.</p>\n  <h1>\n         Conclusions \n      </h1>\n  <p />Client-side validation bypass bugs allow attackers to submit malformed data that is not expected by the application in order to execute input-related attacks such as XSS and SQL injection. Applications are vulnerable when they rely on client-side scripts only to perform security checks instead of implementing these checks at the server. Testing can be done by disabling JavaScript or using an HTTP proxy, depending on the nature of the application under test (traditional, AJAX, Flash, etc).    \n  <p />"
}