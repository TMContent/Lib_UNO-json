{
  "id": "5338f3dc-2b13-41d1-9515-9c3c3ec448fe",
  "checksum": "d3f6107437e84449ba6e6260826ebbae3055336b",
  "words": {
    "8005": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "p",
      "li",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "check": [
      "h1",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "ensure": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "has": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "defined": [
      "p",
      "title"
    ],
    "security": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "policy": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "p",
      "em",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "title"
    ],
    "applies": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "principle": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "pre",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "least": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "privilege": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "restrict": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "execution": [
      "p"
    ],
    "only": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "allow": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "minimum": [
      "p"
    ],
    "set": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "necessary": [
      "p"
    ],
    "actions": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "why": [
      "h1"
    ],
    "defining": [
      "p"
    ],
    "java": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "em",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "title"
    ],
    "defense": [
      "p"
    ],
    "in-depth": [
      "p"
    ],
    "mechanism": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "for preventing": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "performing": [
      "p"
    ],
    "tasks": [
      "p"
    ],
    "operating": [
      "p"
    ],
    "system": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "would": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "otherwise": [
      "p"
    ],
    "this": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li"
    ],
    "especially": [
      "p"
    ],
    "important if": [
      "p"
    ],
    "becomes": [
      "p"
    ],
    "compromised": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "by": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p",
      "pre",
      "li",
      "ul",
      "li"
    ],
    "an": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "application's": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li"
    ],
    "should": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "based": [
      "p"
    ],
    "on": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "business": [
      "p",
      "p"
    ],
    "requirements": [
      "p",
      "p"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "following": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "implements": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "deploys": [
      "p"
    ],
    "matches": [
      "p"
    ],
    "organization's": [
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "assets": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "need": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "protected": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "review": [
      "ol",
      "li",
      "p"
    ],
    "threat": [
      "ol",
      "li",
      "p"
    ],
    "model": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "documentation": [
      "ol",
      "li",
      "p"
    ],
    "enumerate": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "resources": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "you": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "protect": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "common": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "protection": [
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "files": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "-": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "upload": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "download": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "sockets": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "enables": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "listener": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "or": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "makes": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "connections": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "backend": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "systems": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "properties": [
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "network": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "database": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "operations": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "runtime": [
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "each": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "asset": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "correct": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "permissions": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "p"
    ],
    "using": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "determine": [
      "ol",
      "li",
      "p"
    ],
    "appropriate": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "pre",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "granted": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p"
    ],
    "identified": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "resource": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "verify": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "codebase": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "em",
      "p",
      "em",
      "pre",
      "strong",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "li",
      "pre",
      "pre"
    ],
    "attribute": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "associated": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "permission": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "p",
      "p",
      "p"
    ],
    "without": [
      "ol",
      "li",
      "p"
    ],
    "can": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "accessed": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "any": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p",
      "p"
    ],
    "components": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "instance": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "entry": [
      "ol",
      "li",
      "p"
    ],
    "grants": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "global": [
      "ol",
      "li",
      "p"
    ],
    "read": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "file": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "/tmp/myfile": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "grant{": [
      "ol",
      "li",
      "pre"
    ],
    "javaio.filepermission": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"/tmp/myfile\"": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "\"read\"};": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "instead": [
      "ol",
      "li",
      "p"
    ],
    "access": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "em",
      "p",
      "p",
      "pre",
      "pre",
      "li",
      "ul",
      "li",
      "p"
    ],
    "located": [
      "ol",
      "li",
      "p"
    ],
    "in/usr/myapp/": [
      "ol",
      "li",
      "p"
    ],
    "grant": [
      "ol",
      "li",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "pre"
    ],
    "\"file/usr/myapp/\"{": [
      "ol",
      "li",
      "pre"
    ],
    "enforced": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li"
    ],
    "policies": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "when": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "they": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "loaded": [
      "ol",
      "li",
      "p"
    ],
    "into": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "sure": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "system-wide": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre"
    ],
    "if": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p"
    ],
    "included": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "ul",
      "li",
      "strong",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "<java": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "home/lib/security/java.security).": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "h1",
      "h1"
    ],
    "#": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "class": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "instantiate": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "as": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "strong"
    ],
    "name": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "class#": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "used": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "object#policy.provider=sun.security.provider.policyfile#": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "default": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "have": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "single": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "file#": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "user's": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "home": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "directorypolicy.url.1=file:${java.home}/lib/security/java.policypolicy.url.2=file:${user.home}/myapp.java.policy": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "command": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "line": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "environment": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "configured": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "start": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "-djavasecurity.manager": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em",
      "strong",
      "ol",
      "li",
      "pre"
    ],
    "-djavasecurity.policy": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "flags": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "-djavasecurity.manager-djava.security.policy=/usr/myapp/myapp.java.policy": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "server": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "object": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "verifies": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "whether": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "securitymanager": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "em",
      "em",
      "ol",
      "ol",
      "li",
      "p",
      "em",
      "li",
      "p",
      "em"
    ],
    "been": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "assigned": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "system.getsecuritymanager()": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "==": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "pre"
    ],
    "null{": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "systemsetsecuritymanager(new": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "securitymanager));}": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "disk": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "accessible": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "its": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "administrators": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "right": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "filesystem": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "not": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "via": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "web": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "memory verify": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "that your": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "at": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "start-up": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "dedicated": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "manager": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "handling": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "modifications": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "during": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "/usr/myapp/": [
      "em"
    ],
    "\"file/usr/myapp/\"": [
      "strong"
    ],
    "home/lib/security/java.security": [
      "em"
    ],
    "-djavasecurity.policy=/usr/myapp/myapp.java.policy": [
      "strong"
    ],
    "memory": [
      "strong"
    ],
    "fix": [
      "h1"
    ],
    "although": [
      "p"
    ],
    "applications": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "run": [
      "p"
    ],
    "inside": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li"
    ],
    "virtual": [
      "p"
    ],
    "machine": [
      "p"
    ],
    "do": [
      "p"
    ],
    "execute": [
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "context": [
      "p"
    ],
    "privileged": [
      "p"
    ],
    "user": [
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "consider": [
      "p"
    ],
    "tightening": [
      "p"
    ],
    "restrictions": [
      "p"
    ],
    "employing": [
      "p"
    ],
    "successfully": [
      "p"
    ],
    "utilize": [
      "p"
    ],
    "uses": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "types": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "requires": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "those": [
      "ol",
      "li",
      "p"
    ],
    "connect": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "socket": [
      "ol",
      "li",
      "p"
    ],
    "connection": [
      "ol",
      "li",
      "p"
    ],
    "write": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "logs": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "two": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "ways": [
      "ol",
      "li",
      "p"
    ],
    "—": [
      "ol",
      "li",
      "p"
    ],
    "signing": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "base": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "always": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "sign": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "whenever": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "ensures": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "authenticity": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "java's": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "keytool": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "location": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "\"filee:/myapp/bin/\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "create": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "p"
    ],
    "once": [
      "ol",
      "li",
      "p"
    ],
    "required": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "enumerated": [
      "ol",
      "li",
      "p"
    ],
    "reflects": [
      "ol",
      "li",
      "p"
    ],
    "type": [
      "ol",
      "li",
      "p"
    ],
    "\"filee:/myapp/bin/-\"": [
      "ol",
      "li",
      "pre"
    ],
    "{": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "//": [
      "ol",
      "li",
      "pre"
    ],
    "placeholder": [
      "ol",
      "li",
      "pre"
    ],
    "permissions}": [
      "ol",
      "li",
      "pre"
    ],
    "assign": [
      "ol",
      "li",
      "p"
    ],
    "provides": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "different": [
      "ol",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "customized": [
      "ol",
      "li",
      "p"
    ],
    "meet": [
      "ol",
      "li",
      "p"
    ],
    "needs": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javasecurity.allpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "allpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "other": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "seldom be": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javasecurity.allpermission;": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaxsound.sampled.audiopermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "audiopermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "rights": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "system's": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "audio": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "play": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "record": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javaxsound.sampled.audiopermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"play\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaxsecurity.auth.authpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "authpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "authentication": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "procedures": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "authpermission's": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "argument": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "configuration": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "em",
      "li",
      "p"
    ],
    "parameter": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "guard": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "subject": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "em",
      "li",
      "p",
      "em"
    ],
    "logincontext": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "objects": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "javaxsecurity.auth.authpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"modifyprincipals\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaawt.awtpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "awtpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "experience": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "graphical": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "interface": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "clipboard": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javaawt.awtpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"accessclipboard\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaxsecurity.auth.kerberos.delegationpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "delegationpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "restricts": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "usage": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "kerberos": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "delegation": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javaxsecurity.auth.kerberos.delegationpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"\\\"host/fooexample.com@example.com\\\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\\\"krbtgt/examplecom@example.com\\\"\";": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaio.filepermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "filepermission": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "em",
      "em"
    ],
    "local": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "delete": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "note": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "code's": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "directory": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "strong"
    ],
    "subdirectories": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "\"e/myapp/logs/20061016.log\",": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"write\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javautil.logging.loggingpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "loggingpermission": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "em",
      "em"
    ],
    "standard": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "logging": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "currently": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "control": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javautil.logging.loggingpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"control\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javanet.netpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "netpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "various": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "allows": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "ability": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "specify": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "stream": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "handler": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "constructing": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "url": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javanet.netpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"specifystreamhandler\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaxsecurity.auth.privatecredentialpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "privatecredentialpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "protects": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "private": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "credentials": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "em",
      "li",
      "p"
    ],
    "belonging": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "particular": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javaxsecurity.auth.privatecredentialpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"javaxresource.spi.security.passwordcredential": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "*": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\\\"*\\\"\"\"read\";": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javautil.propertypermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "propertypermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "specifies": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "read/write": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "object's": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javautil.propertypermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"javahome\",": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"read\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javalang.reflect.reflectpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "reflectpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "reflective": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "suppressing": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "language": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "checks": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "i.e.": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "public": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "reflected": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "their": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "point": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javalang.reflect.reflectpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"suppressaccesschecks\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javalang.runtimepermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "runtimepermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "such": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "loading": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "external": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "libraries": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "halting": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "jvm": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "javalang.runtimepermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"accessdeclaredmembers\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javasecurity.securitypermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "securitypermission": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "related": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "events": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javasecurity.securitypermission": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"createaccesscontrolcontext\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaio.serializablepermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "serializablepermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "more": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "advanced": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "features": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "serialization": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "substitution": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "one": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "another": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javaio.serializablepermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"enablesubstitution\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javaxsecurity.auth.kerberos.servicepermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "servicepermission": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "services": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "supplemental": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javaxsecurity.auth.kerberos.servicepermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"krbtgt/examplecom@example.com\",": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"initiate\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javanet.socketpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "socketpermission": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em",
      "li",
      "ol",
      "li",
      "p",
      "em"
    ],
    "host": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "accept": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "listen": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "given": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "port": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "resolve": [
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "host's": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "ip/hostname": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javanet.socketpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "\"serv02example.com:3306\",": [
      "ol",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "\"connect\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javasql.sqlpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "sqlpermission": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "em",
      "em"
    ],
    "executed": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "methods": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "deprecated": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "javaxnet.ssl.sslpermission:": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "sslpermission": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "em",
      "em"
    ],
    "ssl": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "get": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "sslsessioncontext": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "sslsession": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "javaxnet.ssl.sslpermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"getsslsessioncontext\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "load": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "{java.home}/lib/security/java.policy)": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "{user.home}/.java.policy).": [
      "ol",
      "li",
      "p"
    ],
    "-djavasecurity.policy(={policy": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "file}": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "flag": [
      "ol",
      "li",
      "p"
    ],
    "routine": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "append": [
      "ol",
      "li",
      "p"
    ],
    "jvm's": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "force": [
      "ol",
      "li",
      "p"
    ],
    "-djavasecurity.policy=e:/myapp/config/myapp.policy": [
      "ol",
      "li",
      "pre"
    ],
    "enforce": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "fully": [
      "ol",
      "li",
      "p"
    ],
    "attach": [
      "ol",
      "li",
      "p"
    ],
    "because": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "most": [
      "ol",
      "li",
      "p"
    ],
    "packages": [
      "ol",
      "li",
      "p"
    ],
    "come": [
      "ol",
      "li",
      "p"
    ],
    "built-in": [
      "ol",
      "li",
      "p"
    ],
    "linked": [
      "ol",
      "li",
      "p"
    ],
    "enforcing": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "certain": [
      "ol",
      "li",
      "p"
    ],
    "fairly": [
      "ol",
      "li",
      "p"
    ],
    "easy": [
      "ol",
      "li",
      "p"
    ],
    "task": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "aware": [
      "ol",
      "li",
      "p"
    ],
    "may": [
      "ol",
      "li",
      "p"
    ],
    "essential": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "examples": [
      "ol",
      "li",
      "p"
    ],
    "but": [
      "ol",
      "li",
      "p"
    ],
    "limited": [
      "ol",
      "li",
      "p"
    ],
    "server's": [
      "ol",
      "li",
      "p"
    ],
    "etc": [
      "ol",
      "li",
      "p"
    ],
    "problems": [
      "ol",
      "li",
      "p"
    ],
    "enumerating": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "helps": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "basic": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "functionality": [
      "ol",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "normal": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "inherits": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "void": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "dogethttpservletrequest": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "request": [
      "ol",
      "ol",
      "li",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "p"
    ],
    "httpservletresponse": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "response": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "throws": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "servletexception": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "ioexception{": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "printwriter": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "out": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "responsegetwriter();": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "codesigner]": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "csign": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "null": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "em"
    ],
    "codesource": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "csource": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "codesourcenull,": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "csign;": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "principal]": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "principals": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "principal0];": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "protectiondomain": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "pdomain": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "protectiondomaincsource,": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "principals;": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "javasecurity.policy": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "javasecurity.policy.getpolicy();": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "permissioncollection": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "permcollect": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "policygetpermissions(pdomain);": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "enumeration": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "permlist": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "permcollectelements();": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "while": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "permlist.hasmoreelements())": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "outprintln(": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "\"br>\"": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "+": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "permlistnextelement().tostring());": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "}}": [
      "ol",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "snippet": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "perform": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "intended": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "action": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "performs": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "unauthorized": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "enable": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "monitor": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "environment's": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "denied": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "em",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "errors": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "tomcat": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "properly": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "administrator": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "1270.0.1": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "exception": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "thread": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "\"containerbackgroundprocessorstandardengine[catalina]]\"": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "javasecurity.accesscontrolexception:": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "java.lang.runtimepermission": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "setcontextclassloader...caused": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "java.net.socketpermission": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "1270.0.1:8005": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "connectresolve)": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "pre"
    ],
    "measures": [
      "ol",
      "li",
      "p"
    ],
    "taken": [
      "ol",
      "li",
      "p"
    ],
    "storing": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "choose": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "dedicate": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "web-accessible": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "limits": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "scope": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "users who": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "potentially": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "compromise": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "contents": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "apply": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "avoid": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "mistakes": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "delegate": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "alter": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "custom": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "altering": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "strict": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "manager's": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "authorized": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "\"getpolicy\"java.security.securitypermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"setpolicy\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "early": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "delaying": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "enforcement": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "bigger": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "window": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "opportunity": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "payload": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "through": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "{user.home}/.java.policy)": [
      "em"
    ],
    "problem": [
      "h1"
    ],
    "shows": [
      "p",
      "p"
    ],
    "part": [
      "p",
      "p"
    ],
    "developer": [
      "p",
      "p"
    ],
    "his": [
      "p",
      "p",
      "p"
    ],
    "component": [
      "p",
      "p",
      "p",
      "p"
    ],
    "applied": [
      "p",
      "p"
    ],
    "valid": [
      "p",
      "p"
    ],
    "hosted": [
      "p",
      "p"
    ],
    "same": [
      "p"
    ],
    "{permission": [
      "pre",
      "pre"
    ],
    "\"connect\"};": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "\"filee:/myapp/bin/dbmanager/-\"": [
      "pre"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "Ensure that your application has a defined security policy that applies the principle of least privilege. Restrict application execution to only allow the minimum set of necessary actions.",
      "Defining a Java security policy is a defense in-depth mechanism for preventing your application from performing tasks that the operating system would otherwise allow. This is especially important if your application becomes compromised by an attacker.",
      "Your application's security policy should be based on your business requirements. Use the following steps to ensure that your application implements and deploys a security policy that matches your organization's business requirements:",
      "Identify assets that need to be protected. Review your application's threat model documentation and enumerate all system resources that you need to protect. Common resources that need protection include:",
      "Ensure each asset is protected by the correct permissions and actions. Using the principle of least privilege, determine the appropriate permissions and actions that need to be granted for each identified resource. Verify that a codeBase attribute is associated with each granted permission. Without the attribute, the resource can be accessed by any of your application's components. For instance, the following entry from the security policy grants a global permission to read the file /tmp/myfile:",
      "Instead, include the codeBase that would restrict read access only to components located in/usr/myapp/:",
      "Ensure your security policy is enforced. Your application's security policies will be enforced only when they are loaded into the Java Runtime. To make sure your security policies will be enforced:",
      "System-wide security properties: Check if your security policy is included in the system-wide security properties file (<java home>/lib/security/java.security). Example:",
      "Command line: Check if your application's environment is configured to start with the -Djava.security.manager and -Djava.security.policy flags:",
      "System object: Check if your application verifies whether a SecurityManager object has been assigned within the System object:",
      "Ensure your application's security policy is protected. Use the following steps to verify that your application's security policy is protected:",
      "Although Java applications run inside a virtual machine, do not execute your application in the context of a privileged user. Consider tightening the restrictions on your application by employing Java Policies.",
      "Use the following steps to successfully utilize Java Permissions:",
      "Identify the system resources that your application uses. Enumerate all resources that your application will need to access. Identify the types of permissions that your application requires to access those resources. For example, your application will need to connect to your database via a socket connection or write to your logs.",
      "Identify your application. Your application can be identified via two ways inside a Java policy — code signing or code base.",
      "Code signing. Always sign your code whenever possible. This ensures the authenticity of your code. Use Java's KeyTool when signing your code.",
      "Code base. Identify the location of your code. Example:",
      "Create the appropriate policy. Once all required resources are enumerated, create a Java policy that reflects the type of access that is required for each resource. Example:",
      "Assign a permission for each required resource. Java provides different types of permissions, each of which can be customized to meet your application's needs:",
      "java.security.AllPermission:\n            AllPermission grants all other permissions to the code. It should seldom be used. Example:",
      "javax.sound.sampled.AudioPermission:\n            AudioPermission grants access rights to the system's audio components. It should be used only when the application is required to play or record audio. Example:",
      "javax.security.auth.AuthPermission:\n            AuthPermission is used during authentication procedures. The AuthPermission's only argument is the name of the security configuration parameter. This permission class is used to guard access to the Policy, Subject, LoginContext, and Configuration objects. Example:",
      "java.awt.AWTPermission:\n            AWTPermission grants access to the system's user experience and graphical interface. For example, the following permission would allow the application to access the system's clipboard:",
      "javax.security.auth.kerberos.DelegationPermission:\n            DelegationPermission restricts the usage of the Kerberos delegation model. Example:",
      "java.io.FilePermission:\n            FilePermission grants access to files on the local system. Access right are read, write, execute, delete. Note that FilePermission always grants read access to files within the code's directory and any subdirectories. Example:",
      "java.util.logging.LoggingPermission:\n            LoggingPermission is associated with Java's standard logging mechanism. Currently LoggingPermission grants only the right to control Java's logging configuration. Example:",
      "java.net.NetPermission:\n            NetPermission grants access to various network permissions. For example, the following permission allows the ability to specify a stream handler when constructing a URL:",
      "javax.security.auth.PrivateCredentialPermission:\n            PrivateCredentialPermission protects access to the private Credentials belonging to a particular Subject. Example:",
      "java.util.PropertyPermission:\n            PropertyPermission specifies the read/write access to an object's or System's properties. Example:",
      "java.lang.reflect.ReflectPermission:\n            ReflectPermission grants access to reflective operations. Currently it only allows suppressing the standard Java language access checks (i.e. public, protected and private) by reflected objects at their point of use. Example:",
      "java.lang.RuntimePermission:\n            RuntimePermission grants access to runtime operations such as loading external libraries and halting the JVM. Example:",
      "java.security.SecurityPermission:\n            SecurityPermission is used any security related events. Example:",
      "java.io.SerializablePermission:\n            SerializablePermission grant access to more advanced features of Java's serialization model. For example, the following permission allows the substitution of one object for another during serialization:",
      "javax.security.auth.kerberos.ServicePermission:\n            ServicePermission protects the access to Kerberos services and any supplemental credentials. Example:",
      "java.net.SocketPermission:\n            SocketPermission grants access to the network via sockets. It allows your application to connect to a host, accept connections from a host, listen on a given port, or resolve the other host's IP/hostname. Example:",
      "java.sql.SQLPermission:\n            SQLPermission grants access to operations executed during database access. Currently all standard Java methods that use SQLPermission are deprecated.",
      "javax.net.ssl.SSLPermission:\n            SSLPermission grants access to SSL related operations. For example, an SSLPermission would be required to get the SSLSessionContext of an SSLSession:",
      "Load the policy at runtime. By default Java provides two policy files: a system policy file ({java.home}/lib/security/java.policy) and a user policy file ({user.home}/.java.policy). Use the -Djava.security.policy(={policy file}) flag to load your policy during the start-up routine of your application's server. Make sure you use only a single = to append your policy to the JVM's default policies as == will force the JVM to load your policy only. Example:",
      "Enforce your application's policy. To fully enforce your application's policy, attach a SecurityManager to the System object. Because most standard Java packages come with built-in permission checks that are linked to the System's SecurityManager, enforcing a certain set of permissions is a fairly easy task. Example:",
      "or",
      "Be aware that enforcing a security policy may restrict access to various resources that are essential to the application's environment. Examples of such resources include, but are not limited to, use of network sockets, application server's local files, etc. Use the following steps to resolve such problems:",
      "Enumerate all permissions that are granted to your application's environment. Enumerating all granted permissions to your application's environment helps identify the basic functionality that it requires for its normal operations. The following code helps you identify all permissions that your application inherits from its environment:",
      "Note that the code snippet will perform its intended action only if the System's SecurityManager is set to null.",
      "Check if your application's environment performs unauthorized actions. Enable the SecurityManager during the start-up routine of your application's environment. Monitor the environment's logs for any access denied errors. For instance, Tomcat will not function properly if the administrator does not grant a SocketPermission to connect and resolve 127.0.0.1 on port 8005:",
      "Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"     java.security.AccessControlException: access denied          (java.lang.RuntimePermission setContextClassLoader)...Caused by: java.security.AccessControlException: access denied          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)",
      "Grant the essential permissions for your application's environment. Grant all essential permissions into the security policy for your application's environment to allow the environment to function properly.",
      "Protect security policy files. Make sure that appropriate security measures are taken when storing the security policy files.",
      "Avoid common mistakes.",
      "Delegate a Policy Manager: Java allows its applications to alter the JVM's policies during runtime. If your application needs to alter its policies during runtime, create a custom Policy Manager and delegate it the task of altering Java policies. Using the SecurityPermission class, enforce strict access control to the manager's functionality such that only authorized components can request modifications to the JVM's policies.",
      "The following permissions must be granted to the Policy Manager's code:",
      "Enforce the security policy as early as possible: Delaying the enforcement of the security policies provides a bigger window of opportunity for an attacker to execute a payload through your compromised application.",
      "The following snippet shows part of the Java policy for an application. Because the developer has not identified his component, the applied permission will be valid for any other component hosted within the same Java application.",
      "The following snippet shows part of the Java policy for an application. Because the developer has identified his component, the applied permission will be valid only for his component hosted within the Java application."
    ],
    "ol": [
      "Identify assets that need to be protected. Review your application's threat model documentation and enumerate all system resources that you need to protect. Common resources that need protection include:\n      \n        Files - upload and download code\n        Sockets - code that enables listener sockets or code that makes connections to backend systems\n        System properties \n        Network connections \n        Database operations \n        Runtime operations\n      \n    \n    \n      \n        Ensure each asset is protected by the correct permissions and actions. Using the principle of least privilege, determine the appropriate permissions and actions that need to be granted for each identified resource. Verify that a codeBase attribute is associated with each granted permission. Without the attribute, the resource can be accessed by any of your application's components. For instance, the following entry from the security policy grants a global permission to read the file /tmp/myfile:\n      grant{    permission java.io.FilePermission \"/tmp/myfile\", \"read\";};\n      Instead, include the codeBase that would restrict read access only to components located in/usr/myapp/: \n      grant codeBase \"file:/usr/myapp/\"{    permission java.io.FilePermission \"/tmp/myfile\", \"read\";};\n    \n    \n      \n        Ensure your security policy is enforced. Your application's security policies will be enforced only when they are loaded into the Java Runtime. To make sure your security policies will be enforced:\n      \n        \n          \n            System-wide security properties: Check if your security policy is included in the system-wide security properties file (<java home>/lib/security/java.security). Example:\n          # Class to instantiate as the system Policy. This is the name of the class# that will be used as the Policy object.#policy.provider=sun.security.provider.PolicyFile# The default is to have a single system-wide policy file,# and a policy file in the user's home directory.policy.url.1=file:${java.home}/lib/security/java.policypolicy.url.2=file:${user.home}/myapp.java.policy\n        \n        \n          \n            Command line: Check if your application's environment is configured to start with the -Djava.security.manager and -Djava.security.policy flags:\n          java -Djava.security.manager-Djava.security.policy=/usr/myapp/myapp.java.policy <application server>\n        \n        \n          \n            System object: Check if your application verifies whether a SecurityManager object has been assigned within the System object: \n          if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}\n        \n      \n    \n    \n      \n        Ensure your application's security policy is protected. Use the following steps to verify that your application's security policy is protected: \n      \n        \n          On disk: Verify that your application's security policy is accessible only by your application and its administrators. Ensure that the security policy has the right filesystem permissions set and is not accessible via the web. \n        \n          In memory: Verify that your application's security policy is enforced at start-up. Ensure that your application has a dedicated Policy Manager for handling any policy modifications during runtime.",
      "Identify the system resources that your application uses. Enumerate all resources that your application will need to access. Identify the types of permissions that your application requires to access those resources. For example, your application will need to connect to your database via a socket connection or write to your logs.\n    \n    \n      \n        Identify your application. Your application can be identified via two ways inside a Java policy — code signing or code base.\n      \n        \n          \n            Code signing. Always sign your code whenever possible. This ensures the authenticity of your code. Use Java's KeyTool when signing your code.\n        \n        \n          \n            Code base. Identify the location of your code. Example:\n          codeBase \"file:e:/myapp/bin/\"\n        \n      \n    \n    \n      \n        Create the appropriate policy. Once all required resources are enumerated, create a Java policy that reflects the type of access that is required for each resource. Example:\n      grant codeBase \"file:e:/myapp/bin/-\" {    // A placeholder for all appropriate permissions};\n      Assign a permission for each required resource. Java provides different types of permissions, each of which can be customized to meet your application's needs:\n      \n        \n          \n            java.security.AllPermission:\n            AllPermission grants all other permissions to the code. It should seldom be used. Example:\n          permission java.security.AllPermission;\n        \n        \n          \n            javax.sound.sampled.AudioPermission:\n            AudioPermission grants access rights to the system's audio components. It should be used only when the application is required to play or record audio. Example:\n          permission javax.sound.sampled.AudioPermission \"play\";\n        \n        \n          \n            javax.security.auth.AuthPermission:\n            AuthPermission is used during authentication procedures. The AuthPermission's only argument is the name of the security configuration parameter. This permission class is used to guard access to the Policy, Subject, LoginContext, and Configuration objects. Example:\n          permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n        \n        \n          \n            java.awt.AWTPermission:\n            AWTPermission grants access to the system's user experience and graphical interface. For example, the following permission would allow the application to access the system's clipboard:\n          permission java.awt.AWTPermission \"accessClipboard\";\n        \n        \n          \n            javax.security.auth.kerberos.DelegationPermission:\n            DelegationPermission restricts the usage of the Kerberos delegation model. Example:\n          permission javax.security.auth.kerberos.DelegationPermission       \"\\\"host/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\\\"\";\n        \n        \n          \n            java.io.FilePermission:\n            FilePermission grants access to files on the local system. Access right are read, write, execute, delete. Note that FilePermission always grants read access to files within the code's directory and any subdirectories. Example:\n          permission java.io.FilePermission \"e:/myapp/logs/20061016.log\", \"write\";\n        \n        \n          \n            java.util.logging.LoggingPermission:\n            LoggingPermission is associated with Java's standard logging mechanism. Currently LoggingPermission grants only the right to control Java's logging configuration. Example:\n          permission java.util.logging.LoggingPermission \"control\";\n        \n        \n          \n            java.net.NetPermission:\n            NetPermission grants access to various network permissions. For example, the following permission allows the ability to specify a stream handler when constructing a URL:\n          permission java.net.NetPermission \"specifyStreamHandler\";\n        \n        \n          \n            javax.security.auth.PrivateCredentialPermission:\n            PrivateCredentialPermission protects access to the private Credentials belonging to a particular Subject. Example:\n          permission javax.security.auth.PrivateCredentialPermission                \"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\",\"read\";\n        \n        \n          \n            java.util.PropertyPermission:\n            PropertyPermission specifies the read/write access to an object's or System's properties. Example:\n          permission java.util.PropertyPermission \"java.home\", \"read\";\n        \n        \n          \n            java.lang.reflect.ReflectPermission:\n            ReflectPermission grants access to reflective operations. Currently it only allows suppressing the standard Java language access checks (i.e. public, protected and private) by reflected objects at their point of use. Example:\n          permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n        \n        \n          \n            java.lang.RuntimePermission:\n            RuntimePermission grants access to runtime operations such as loading external libraries and halting the JVM. Example:\n          permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n        \n        \n          \n            java.security.SecurityPermission:\n            SecurityPermission is used any security related events. Example:\n          permission java.security.SecurityPermission \"createAccessControlContext\";\n        \n        \n          \n            java.io.SerializablePermission:\n            SerializablePermission grant access to more advanced features of Java's serialization model. For example, the following permission allows the substitution of one object for another during serialization:\n          permission java.io.SerializablePermission \"enableSubstitution\";\n        \n        \n          \n            javax.security.auth.kerberos.ServicePermission:\n            ServicePermission protects the access to Kerberos services and any supplemental credentials. Example:\n          permission javax.security.auth.kerberos.ServicePermission                                    \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\";\n        \n        \n          \n            java.net.SocketPermission:\n            SocketPermission grants access to the network via sockets. It allows your application to connect to a host, accept connections from a host, listen on a given port, or resolve the other host's IP/hostname. Example:\n          permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";\n        \n        \n          \n            java.sql.SQLPermission:\n            SQLPermission grants access to operations executed during database access. Currently all standard Java methods that use SQLPermission are deprecated. \n        \n        \n          \n            javax.net.ssl.SSLPermission:\n            SSLPermission grants access to SSL related operations. For example, an SSLPermission would be required to get the SSLSessionContext of an SSLSession:\n          permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";\n        \n      \n    \n    \n      \n        Load the policy at runtime. By default Java provides two policy files: a system policy file ({java.home}/lib/security/java.policy) and a user policy file ({user.home}/.java.policy). Use the -Djava.security.policy(={policy file}) flag to load your policy during the start-up routine of your application's server. Make sure you use only a single = to append your policy to the JVM's default policies as == will force the JVM to load your policy only. Example: \n      -Djava.security.policy=e:/myapp/config/myapp.policy\n    \n    \n      \n        Enforce your application's policy. To fully enforce your application's policy, attach a SecurityManager to the System object. Because most standard Java packages come with built-in permission checks that are linked to the System's SecurityManager, enforcing a certain set of permissions is a fairly easy task. Example: \n      if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}\n      or\n      -Djava.security.manager\n      Be aware that enforcing a security policy may restrict access to various resources that are essential to the application's environment. Examples of such resources include, but are not limited to, use of network sockets, application server's local files, etc. Use the following steps to resolve such problems:\n      \n        \n          \n            Enumerate all permissions that are granted to your application's environment. Enumerating all granted permissions to your application's environment helps identify the basic functionality that it requires for its normal operations. The following code helps you identify all permissions that your application inherits from its environment:\n          public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      PrintWriter out = response.getWriter();      CodeSigner[] cSign = null;      CodeSource cSource = new CodeSource(null, cSign);      Principal[] principals = new Principal[0];      ProtectionDomain pDomain = new ProtectionDomain(cSource,                                                    null, null, principals);      java.security.Policy policy = java.security.Policy.getPolicy();      PermissionCollection permCollect = policy.getPermissions(pDomain);      Enumeration permList = permCollect.elements();      while (permList.hasMoreElements())      {            out.println( \"<br>\" + permList.nextElement().toString());      }}\n          Note that the code snippet will perform its intended action only if the System's SecurityManager is set to null.\n        \n        \n          \n          Check if your application's environment performs unauthorized actions. Enable the SecurityManager during the start-up routine of your application's environment. Monitor the environment's logs for any access denied errors. For instance, Tomcat will not function properly if the administrator does not grant a SocketPermission to connect and resolve 127.0.0.1 on port 8005: Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"     java.security.AccessControlException: access denied          (java.lang.RuntimePermission setContextClassLoader)...Caused by: java.security.AccessControlException: access denied          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)\n        \n          \n            Grant the essential permissions for your application's environment. Grant all essential permissions into the security policy for your application's environment to allow the environment to function properly.\n        \n      \n    \n    \n      \n        Protect security policy files. Make sure that appropriate security measures are taken when storing the security policy files.\n      \n        \n          Choose a security policy directory: Dedicate a directory for storing your application's security policy files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory. \n        \n          Set appropriate permissions: Apply the appropriate filesystem permissions such that the security policy files can be only accessed by your application and its administrators.\n      \n    \n    \n      \n        Avoid common mistakes.\n      \n        \n          \n            Delegate a Policy Manager: Java allows its applications to alter the JVM's policies during runtime. If your application needs to alter its policies during runtime, create a custom Policy Manager and delegate it the task of altering Java policies. Using the SecurityPermission class, enforce strict access control to the manager's functionality such that only authorized components can request modifications to the JVM's policies.\n          The following permissions must be granted to the Policy Manager's code:\n          java.security.SecurityPermission \"getPolicy\";java.security.SecurityPermission \"setPolicy\";\n        \n        \n          \n            Enforce the security policy as early as possible: Delaying the enforcement of the security policies provides a bigger window of opportunity for an attacker to execute a payload through your compromised application.",
      "Enumerate all permissions that are granted to your application's environment. Enumerating all granted permissions to your application's environment helps identify the basic functionality that it requires for its normal operations. The following code helps you identify all permissions that your application inherits from its environment:\n          public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      PrintWriter out = response.getWriter();      CodeSigner[] cSign = null;      CodeSource cSource = new CodeSource(null, cSign);      Principal[] principals = new Principal[0];      ProtectionDomain pDomain = new ProtectionDomain(cSource,                                                    null, null, principals);      java.security.Policy policy = java.security.Policy.getPolicy();      PermissionCollection permCollect = policy.getPermissions(pDomain);      Enumeration permList = permCollect.elements();      while (permList.hasMoreElements())      {            out.println( \"<br>\" + permList.nextElement().toString());      }}\n          Note that the code snippet will perform its intended action only if the System's SecurityManager is set to null.\n        \n        \n          \n          Check if your application's environment performs unauthorized actions. Enable the SecurityManager during the start-up routine of your application's environment. Monitor the environment's logs for any access denied errors. For instance, Tomcat will not function properly if the administrator does not grant a SocketPermission to connect and resolve 127.0.0.1 on port 8005: Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"     java.security.AccessControlException: access denied          (java.lang.RuntimePermission setContextClassLoader)...Caused by: java.security.AccessControlException: access denied          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)\n        \n          \n            Grant the essential permissions for your application's environment. Grant all essential permissions into the security policy for your application's environment to allow the environment to function properly."
    ],
    "li": [
      "Identify assets that need to be protected. Review your application's threat model documentation and enumerate all system resources that you need to protect. Common resources that need protection include:\n      \n        Files - upload and download code\n        Sockets - code that enables listener sockets or code that makes connections to backend systems\n        System properties \n        Network connections \n        Database operations \n        Runtime operations",
      "Files - upload and download code",
      "Sockets - code that enables listener sockets or code that makes connections to backend systems",
      "System properties",
      "Network connections",
      "Database operations",
      "Runtime operations",
      "Ensure each asset is protected by the correct permissions and actions. Using the principle of least privilege, determine the appropriate permissions and actions that need to be granted for each identified resource. Verify that a codeBase attribute is associated with each granted permission. Without the attribute, the resource can be accessed by any of your application's components. For instance, the following entry from the security policy grants a global permission to read the file /tmp/myfile:\n      grant{    permission java.io.FilePermission \"/tmp/myfile\", \"read\";};\n      Instead, include the codeBase that would restrict read access only to components located in/usr/myapp/: \n      grant codeBase \"file:/usr/myapp/\"{    permission java.io.FilePermission \"/tmp/myfile\", \"read\";};",
      "Ensure your security policy is enforced. Your application's security policies will be enforced only when they are loaded into the Java Runtime. To make sure your security policies will be enforced:\n      \n        \n          \n            System-wide security properties: Check if your security policy is included in the system-wide security properties file (<java home>/lib/security/java.security). Example:\n          # Class to instantiate as the system Policy. This is the name of the class# that will be used as the Policy object.#policy.provider=sun.security.provider.PolicyFile# The default is to have a single system-wide policy file,# and a policy file in the user's home directory.policy.url.1=file:${java.home}/lib/security/java.policypolicy.url.2=file:${user.home}/myapp.java.policy\n        \n        \n          \n            Command line: Check if your application's environment is configured to start with the -Djava.security.manager and -Djava.security.policy flags:\n          java -Djava.security.manager-Djava.security.policy=/usr/myapp/myapp.java.policy <application server>\n        \n        \n          \n            System object: Check if your application verifies whether a SecurityManager object has been assigned within the System object: \n          if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}",
      "System-wide security properties: Check if your security policy is included in the system-wide security properties file (<java home>/lib/security/java.security). Example:\n          # Class to instantiate as the system Policy. This is the name of the class# that will be used as the Policy object.#policy.provider=sun.security.provider.PolicyFile# The default is to have a single system-wide policy file,# and a policy file in the user's home directory.policy.url.1=file:${java.home}/lib/security/java.policypolicy.url.2=file:${user.home}/myapp.java.policy",
      "Command line: Check if your application's environment is configured to start with the -Djava.security.manager and -Djava.security.policy flags:\n          java -Djava.security.manager-Djava.security.policy=/usr/myapp/myapp.java.policy <application server>",
      "System object: Check if your application verifies whether a SecurityManager object has been assigned within the System object: \n          if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}",
      "Ensure your application's security policy is protected. Use the following steps to verify that your application's security policy is protected: \n      \n        \n          On disk: Verify that your application's security policy is accessible only by your application and its administrators. Ensure that the security policy has the right filesystem permissions set and is not accessible via the web. \n        \n          In memory: Verify that your application's security policy is enforced at start-up. Ensure that your application has a dedicated Policy Manager for handling any policy modifications during runtime.",
      "On disk: Verify that your application's security policy is accessible only by your application and its administrators. Ensure that the security policy has the right filesystem permissions set and is not accessible via the web.",
      "In memory: Verify that your application's security policy is enforced at start-up. Ensure that your application has a dedicated Policy Manager for handling any policy modifications during runtime.",
      "Identify the system resources that your application uses. Enumerate all resources that your application will need to access. Identify the types of permissions that your application requires to access those resources. For example, your application will need to connect to your database via a socket connection or write to your logs.",
      "Identify your application. Your application can be identified via two ways inside a Java policy — code signing or code base.\n      \n        \n          \n            Code signing. Always sign your code whenever possible. This ensures the authenticity of your code. Use Java's KeyTool when signing your code.\n        \n        \n          \n            Code base. Identify the location of your code. Example:\n          codeBase \"file:e:/myapp/bin/\"",
      "Code signing. Always sign your code whenever possible. This ensures the authenticity of your code. Use Java's KeyTool when signing your code.",
      "Code base. Identify the location of your code. Example:\n          codeBase \"file:e:/myapp/bin/\"",
      "Create the appropriate policy. Once all required resources are enumerated, create a Java policy that reflects the type of access that is required for each resource. Example:\n      grant codeBase \"file:e:/myapp/bin/-\" {    // A placeholder for all appropriate permissions};\n      Assign a permission for each required resource. Java provides different types of permissions, each of which can be customized to meet your application's needs:\n      \n        \n          \n            java.security.AllPermission:\n            AllPermission grants all other permissions to the code. It should seldom be used. Example:\n          permission java.security.AllPermission;\n        \n        \n          \n            javax.sound.sampled.AudioPermission:\n            AudioPermission grants access rights to the system's audio components. It should be used only when the application is required to play or record audio. Example:\n          permission javax.sound.sampled.AudioPermission \"play\";\n        \n        \n          \n            javax.security.auth.AuthPermission:\n            AuthPermission is used during authentication procedures. The AuthPermission's only argument is the name of the security configuration parameter. This permission class is used to guard access to the Policy, Subject, LoginContext, and Configuration objects. Example:\n          permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n        \n        \n          \n            java.awt.AWTPermission:\n            AWTPermission grants access to the system's user experience and graphical interface. For example, the following permission would allow the application to access the system's clipboard:\n          permission java.awt.AWTPermission \"accessClipboard\";\n        \n        \n          \n            javax.security.auth.kerberos.DelegationPermission:\n            DelegationPermission restricts the usage of the Kerberos delegation model. Example:\n          permission javax.security.auth.kerberos.DelegationPermission       \"\\\"host/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\\\"\";\n        \n        \n          \n            java.io.FilePermission:\n            FilePermission grants access to files on the local system. Access right are read, write, execute, delete. Note that FilePermission always grants read access to files within the code's directory and any subdirectories. Example:\n          permission java.io.FilePermission \"e:/myapp/logs/20061016.log\", \"write\";\n        \n        \n          \n            java.util.logging.LoggingPermission:\n            LoggingPermission is associated with Java's standard logging mechanism. Currently LoggingPermission grants only the right to control Java's logging configuration. Example:\n          permission java.util.logging.LoggingPermission \"control\";\n        \n        \n          \n            java.net.NetPermission:\n            NetPermission grants access to various network permissions. For example, the following permission allows the ability to specify a stream handler when constructing a URL:\n          permission java.net.NetPermission \"specifyStreamHandler\";\n        \n        \n          \n            javax.security.auth.PrivateCredentialPermission:\n            PrivateCredentialPermission protects access to the private Credentials belonging to a particular Subject. Example:\n          permission javax.security.auth.PrivateCredentialPermission                \"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\",\"read\";\n        \n        \n          \n            java.util.PropertyPermission:\n            PropertyPermission specifies the read/write access to an object's or System's properties. Example:\n          permission java.util.PropertyPermission \"java.home\", \"read\";\n        \n        \n          \n            java.lang.reflect.ReflectPermission:\n            ReflectPermission grants access to reflective operations. Currently it only allows suppressing the standard Java language access checks (i.e. public, protected and private) by reflected objects at their point of use. Example:\n          permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n        \n        \n          \n            java.lang.RuntimePermission:\n            RuntimePermission grants access to runtime operations such as loading external libraries and halting the JVM. Example:\n          permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n        \n        \n          \n            java.security.SecurityPermission:\n            SecurityPermission is used any security related events. Example:\n          permission java.security.SecurityPermission \"createAccessControlContext\";\n        \n        \n          \n            java.io.SerializablePermission:\n            SerializablePermission grant access to more advanced features of Java's serialization model. For example, the following permission allows the substitution of one object for another during serialization:\n          permission java.io.SerializablePermission \"enableSubstitution\";\n        \n        \n          \n            javax.security.auth.kerberos.ServicePermission:\n            ServicePermission protects the access to Kerberos services and any supplemental credentials. Example:\n          permission javax.security.auth.kerberos.ServicePermission                                    \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\";\n        \n        \n          \n            java.net.SocketPermission:\n            SocketPermission grants access to the network via sockets. It allows your application to connect to a host, accept connections from a host, listen on a given port, or resolve the other host's IP/hostname. Example:\n          permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";\n        \n        \n          \n            java.sql.SQLPermission:\n            SQLPermission grants access to operations executed during database access. Currently all standard Java methods that use SQLPermission are deprecated. \n        \n        \n          \n            javax.net.ssl.SSLPermission:\n            SSLPermission grants access to SSL related operations. For example, an SSLPermission would be required to get the SSLSessionContext of an SSLSession:\n          permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";",
      "java.security.AllPermission:\n            AllPermission grants all other permissions to the code. It should seldom be used. Example:\n          permission java.security.AllPermission;",
      "javax.sound.sampled.AudioPermission:\n            AudioPermission grants access rights to the system's audio components. It should be used only when the application is required to play or record audio. Example:\n          permission javax.sound.sampled.AudioPermission \"play\";",
      "javax.security.auth.AuthPermission:\n            AuthPermission is used during authentication procedures. The AuthPermission's only argument is the name of the security configuration parameter. This permission class is used to guard access to the Policy, Subject, LoginContext, and Configuration objects. Example:\n          permission javax.security.auth.AuthPermission \"modifyPrincipals\";",
      "java.awt.AWTPermission:\n            AWTPermission grants access to the system's user experience and graphical interface. For example, the following permission would allow the application to access the system's clipboard:\n          permission java.awt.AWTPermission \"accessClipboard\";",
      "javax.security.auth.kerberos.DelegationPermission:\n            DelegationPermission restricts the usage of the Kerberos delegation model. Example:\n          permission javax.security.auth.kerberos.DelegationPermission       \"\\\"host/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\\\"\";",
      "java.io.FilePermission:\n            FilePermission grants access to files on the local system. Access right are read, write, execute, delete. Note that FilePermission always grants read access to files within the code's directory and any subdirectories. Example:\n          permission java.io.FilePermission \"e:/myapp/logs/20061016.log\", \"write\";",
      "java.util.logging.LoggingPermission:\n            LoggingPermission is associated with Java's standard logging mechanism. Currently LoggingPermission grants only the right to control Java's logging configuration. Example:\n          permission java.util.logging.LoggingPermission \"control\";",
      "java.net.NetPermission:\n            NetPermission grants access to various network permissions. For example, the following permission allows the ability to specify a stream handler when constructing a URL:\n          permission java.net.NetPermission \"specifyStreamHandler\";",
      "javax.security.auth.PrivateCredentialPermission:\n            PrivateCredentialPermission protects access to the private Credentials belonging to a particular Subject. Example:\n          permission javax.security.auth.PrivateCredentialPermission                \"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\",\"read\";",
      "java.util.PropertyPermission:\n            PropertyPermission specifies the read/write access to an object's or System's properties. Example:\n          permission java.util.PropertyPermission \"java.home\", \"read\";",
      "java.lang.reflect.ReflectPermission:\n            ReflectPermission grants access to reflective operations. Currently it only allows suppressing the standard Java language access checks (i.e. public, protected and private) by reflected objects at their point of use. Example:\n          permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";",
      "java.lang.RuntimePermission:\n            RuntimePermission grants access to runtime operations such as loading external libraries and halting the JVM. Example:\n          permission java.lang.RuntimePermission \"accessDeclaredMembers\";",
      "java.security.SecurityPermission:\n            SecurityPermission is used any security related events. Example:\n          permission java.security.SecurityPermission \"createAccessControlContext\";",
      "java.io.SerializablePermission:\n            SerializablePermission grant access to more advanced features of Java's serialization model. For example, the following permission allows the substitution of one object for another during serialization:\n          permission java.io.SerializablePermission \"enableSubstitution\";",
      "javax.security.auth.kerberos.ServicePermission:\n            ServicePermission protects the access to Kerberos services and any supplemental credentials. Example:\n          permission javax.security.auth.kerberos.ServicePermission                                    \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\";",
      "java.net.SocketPermission:\n            SocketPermission grants access to the network via sockets. It allows your application to connect to a host, accept connections from a host, listen on a given port, or resolve the other host's IP/hostname. Example:\n          permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";",
      "java.sql.SQLPermission:\n            SQLPermission grants access to operations executed during database access. Currently all standard Java methods that use SQLPermission are deprecated.",
      "javax.net.ssl.SSLPermission:\n            SSLPermission grants access to SSL related operations. For example, an SSLPermission would be required to get the SSLSessionContext of an SSLSession:\n          permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";",
      "Load the policy at runtime. By default Java provides two policy files: a system policy file ({java.home}/lib/security/java.policy) and a user policy file ({user.home}/.java.policy). Use the -Djava.security.policy(={policy file}) flag to load your policy during the start-up routine of your application's server. Make sure you use only a single = to append your policy to the JVM's default policies as == will force the JVM to load your policy only. Example: \n      -Djava.security.policy=e:/myapp/config/myapp.policy",
      "Enforce your application's policy. To fully enforce your application's policy, attach a SecurityManager to the System object. Because most standard Java packages come with built-in permission checks that are linked to the System's SecurityManager, enforcing a certain set of permissions is a fairly easy task. Example: \n      if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}\n      or\n      -Djava.security.manager\n      Be aware that enforcing a security policy may restrict access to various resources that are essential to the application's environment. Examples of such resources include, but are not limited to, use of network sockets, application server's local files, etc. Use the following steps to resolve such problems:\n      \n        \n          \n            Enumerate all permissions that are granted to your application's environment. Enumerating all granted permissions to your application's environment helps identify the basic functionality that it requires for its normal operations. The following code helps you identify all permissions that your application inherits from its environment:\n          public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      PrintWriter out = response.getWriter();      CodeSigner[] cSign = null;      CodeSource cSource = new CodeSource(null, cSign);      Principal[] principals = new Principal[0];      ProtectionDomain pDomain = new ProtectionDomain(cSource,                                                    null, null, principals);      java.security.Policy policy = java.security.Policy.getPolicy();      PermissionCollection permCollect = policy.getPermissions(pDomain);      Enumeration permList = permCollect.elements();      while (permList.hasMoreElements())      {            out.println( \"<br>\" + permList.nextElement().toString());      }}\n          Note that the code snippet will perform its intended action only if the System's SecurityManager is set to null.\n        \n        \n          \n          Check if your application's environment performs unauthorized actions. Enable the SecurityManager during the start-up routine of your application's environment. Monitor the environment's logs for any access denied errors. For instance, Tomcat will not function properly if the administrator does not grant a SocketPermission to connect and resolve 127.0.0.1 on port 8005: Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"     java.security.AccessControlException: access denied          (java.lang.RuntimePermission setContextClassLoader)...Caused by: java.security.AccessControlException: access denied          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)\n        \n          \n            Grant the essential permissions for your application's environment. Grant all essential permissions into the security policy for your application's environment to allow the environment to function properly.",
      "Enumerate all permissions that are granted to your application's environment. Enumerating all granted permissions to your application's environment helps identify the basic functionality that it requires for its normal operations. The following code helps you identify all permissions that your application inherits from its environment:\n          public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      PrintWriter out = response.getWriter();      CodeSigner[] cSign = null;      CodeSource cSource = new CodeSource(null, cSign);      Principal[] principals = new Principal[0];      ProtectionDomain pDomain = new ProtectionDomain(cSource,                                                    null, null, principals);      java.security.Policy policy = java.security.Policy.getPolicy();      PermissionCollection permCollect = policy.getPermissions(pDomain);      Enumeration permList = permCollect.elements();      while (permList.hasMoreElements())      {            out.println( \"<br>\" + permList.nextElement().toString());      }}\n          Note that the code snippet will perform its intended action only if the System's SecurityManager is set to null.",
      "Check if your application's environment performs unauthorized actions. Enable the SecurityManager during the start-up routine of your application's environment. Monitor the environment's logs for any access denied errors. For instance, Tomcat will not function properly if the administrator does not grant a SocketPermission to connect and resolve 127.0.0.1 on port 8005: Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"     java.security.AccessControlException: access denied          (java.lang.RuntimePermission setContextClassLoader)...Caused by: java.security.AccessControlException: access denied          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)",
      "Grant the essential permissions for your application's environment. Grant all essential permissions into the security policy for your application's environment to allow the environment to function properly.",
      "Protect security policy files. Make sure that appropriate security measures are taken when storing the security policy files.\n      \n        \n          Choose a security policy directory: Dedicate a directory for storing your application's security policy files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory. \n        \n          Set appropriate permissions: Apply the appropriate filesystem permissions such that the security policy files can be only accessed by your application and its administrators.",
      "Choose a security policy directory: Dedicate a directory for storing your application's security policy files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory.",
      "Set appropriate permissions: Apply the appropriate filesystem permissions such that the security policy files can be only accessed by your application and its administrators.",
      "Avoid common mistakes.\n      \n        \n          \n            Delegate a Policy Manager: Java allows its applications to alter the JVM's policies during runtime. If your application needs to alter its policies during runtime, create a custom Policy Manager and delegate it the task of altering Java policies. Using the SecurityPermission class, enforce strict access control to the manager's functionality such that only authorized components can request modifications to the JVM's policies.\n          The following permissions must be granted to the Policy Manager's code:\n          java.security.SecurityPermission \"getPolicy\";java.security.SecurityPermission \"setPolicy\";\n        \n        \n          \n            Enforce the security policy as early as possible: Delaying the enforcement of the security policies provides a bigger window of opportunity for an attacker to execute a payload through your compromised application.",
      "Delegate a Policy Manager: Java allows its applications to alter the JVM's policies during runtime. If your application needs to alter its policies during runtime, create a custom Policy Manager and delegate it the task of altering Java policies. Using the SecurityPermission class, enforce strict access control to the manager's functionality such that only authorized components can request modifications to the JVM's policies.\n          The following permissions must be granted to the Policy Manager's code:\n          java.security.SecurityPermission \"getPolicy\";java.security.SecurityPermission \"setPolicy\";",
      "Enforce the security policy as early as possible: Delaying the enforcement of the security policies provides a bigger window of opportunity for an attacker to execute a payload through your compromised application."
    ],
    "strong": [
      "Identify assets that need to be protected.",
      "Ensure each asset is protected by the correct permissions and actions.",
      "",
      "codeBase \"file:/usr/myapp/\"",
      "Ensure your security policy is enforced.",
      "System-wide security properties:",
      "Command line:",
      "-Djava.security.manager",
      "-Djava.security.policy=/usr/myapp/myapp.java.policy",
      "System object:",
      "Ensure your application's security policy is protected.",
      "On disk:",
      "In memory:",
      "Identify the system resources that your application uses.",
      "Identify your application.",
      "Code signing.",
      "Code base.",
      "Create the appropriate policy.",
      "java.security.AllPermission:",
      "javax.sound.sampled.AudioPermission:",
      "javax.security.auth.AuthPermission:",
      "java.awt.AWTPermission:",
      "javax.security.auth.kerberos.DelegationPermission:",
      "java.io.FilePermission:",
      "java.util.logging.LoggingPermission:",
      "java.net.NetPermission:",
      "javax.security.auth.PrivateCredentialPermission:",
      "java.util.PropertyPermission:",
      "java.lang.reflect.ReflectPermission:",
      "java.lang.RuntimePermission:",
      "java.security.SecurityPermission:",
      "java.io.SerializablePermission:",
      "javax.security.auth.kerberos.ServicePermission:",
      "java.net.SocketPermission:",
      "java.sql.SQLPermission:",
      "javax.net.ssl.SSLPermission:",
      "Load the policy at runtime.",
      "=",
      "==",
      "Enforce your application's policy.",
      "Enumerate all permissions that are granted to your application's environment.",
      "Check if your application's environment performs unauthorized actions.",
      "Grant the essential permissions for your application's environment.",
      "Protect security policy files.",
      "Choose a security policy directory:",
      "Set appropriate permissions:",
      "Avoid common mistakes",
      "Delegate a Policy Manager:",
      "Enforce the security policy as early as possible:"
    ],
    "ul": [
      "Files - upload and download code\n        Sockets - code that enables listener sockets or code that makes connections to backend systems\n        System properties \n        Network connections \n        Database operations \n        Runtime operations",
      "System-wide security properties: Check if your security policy is included in the system-wide security properties file (<java home>/lib/security/java.security). Example:\n          # Class to instantiate as the system Policy. This is the name of the class# that will be used as the Policy object.#policy.provider=sun.security.provider.PolicyFile# The default is to have a single system-wide policy file,# and a policy file in the user's home directory.policy.url.1=file:${java.home}/lib/security/java.policypolicy.url.2=file:${user.home}/myapp.java.policy\n        \n        \n          \n            Command line: Check if your application's environment is configured to start with the -Djava.security.manager and -Djava.security.policy flags:\n          java -Djava.security.manager-Djava.security.policy=/usr/myapp/myapp.java.policy <application server>\n        \n        \n          \n            System object: Check if your application verifies whether a SecurityManager object has been assigned within the System object: \n          if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}",
      "On disk: Verify that your application's security policy is accessible only by your application and its administrators. Ensure that the security policy has the right filesystem permissions set and is not accessible via the web. \n        \n          In memory: Verify that your application's security policy is enforced at start-up. Ensure that your application has a dedicated Policy Manager for handling any policy modifications during runtime.",
      "Code signing. Always sign your code whenever possible. This ensures the authenticity of your code. Use Java's KeyTool when signing your code.\n        \n        \n          \n            Code base. Identify the location of your code. Example:\n          codeBase \"file:e:/myapp/bin/\"",
      "java.security.AllPermission:\n            AllPermission grants all other permissions to the code. It should seldom be used. Example:\n          permission java.security.AllPermission;\n        \n        \n          \n            javax.sound.sampled.AudioPermission:\n            AudioPermission grants access rights to the system's audio components. It should be used only when the application is required to play or record audio. Example:\n          permission javax.sound.sampled.AudioPermission \"play\";\n        \n        \n          \n            javax.security.auth.AuthPermission:\n            AuthPermission is used during authentication procedures. The AuthPermission's only argument is the name of the security configuration parameter. This permission class is used to guard access to the Policy, Subject, LoginContext, and Configuration objects. Example:\n          permission javax.security.auth.AuthPermission \"modifyPrincipals\";\n        \n        \n          \n            java.awt.AWTPermission:\n            AWTPermission grants access to the system's user experience and graphical interface. For example, the following permission would allow the application to access the system's clipboard:\n          permission java.awt.AWTPermission \"accessClipboard\";\n        \n        \n          \n            javax.security.auth.kerberos.DelegationPermission:\n            DelegationPermission restricts the usage of the Kerberos delegation model. Example:\n          permission javax.security.auth.kerberos.DelegationPermission       \"\\\"host/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\\\"\";\n        \n        \n          \n            java.io.FilePermission:\n            FilePermission grants access to files on the local system. Access right are read, write, execute, delete. Note that FilePermission always grants read access to files within the code's directory and any subdirectories. Example:\n          permission java.io.FilePermission \"e:/myapp/logs/20061016.log\", \"write\";\n        \n        \n          \n            java.util.logging.LoggingPermission:\n            LoggingPermission is associated with Java's standard logging mechanism. Currently LoggingPermission grants only the right to control Java's logging configuration. Example:\n          permission java.util.logging.LoggingPermission \"control\";\n        \n        \n          \n            java.net.NetPermission:\n            NetPermission grants access to various network permissions. For example, the following permission allows the ability to specify a stream handler when constructing a URL:\n          permission java.net.NetPermission \"specifyStreamHandler\";\n        \n        \n          \n            javax.security.auth.PrivateCredentialPermission:\n            PrivateCredentialPermission protects access to the private Credentials belonging to a particular Subject. Example:\n          permission javax.security.auth.PrivateCredentialPermission                \"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\",\"read\";\n        \n        \n          \n            java.util.PropertyPermission:\n            PropertyPermission specifies the read/write access to an object's or System's properties. Example:\n          permission java.util.PropertyPermission \"java.home\", \"read\";\n        \n        \n          \n            java.lang.reflect.ReflectPermission:\n            ReflectPermission grants access to reflective operations. Currently it only allows suppressing the standard Java language access checks (i.e. public, protected and private) by reflected objects at their point of use. Example:\n          permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";\n        \n        \n          \n            java.lang.RuntimePermission:\n            RuntimePermission grants access to runtime operations such as loading external libraries and halting the JVM. Example:\n          permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n        \n        \n          \n            java.security.SecurityPermission:\n            SecurityPermission is used any security related events. Example:\n          permission java.security.SecurityPermission \"createAccessControlContext\";\n        \n        \n          \n            java.io.SerializablePermission:\n            SerializablePermission grant access to more advanced features of Java's serialization model. For example, the following permission allows the substitution of one object for another during serialization:\n          permission java.io.SerializablePermission \"enableSubstitution\";\n        \n        \n          \n            javax.security.auth.kerberos.ServicePermission:\n            ServicePermission protects the access to Kerberos services and any supplemental credentials. Example:\n          permission javax.security.auth.kerberos.ServicePermission                                    \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\";\n        \n        \n          \n            java.net.SocketPermission:\n            SocketPermission grants access to the network via sockets. It allows your application to connect to a host, accept connections from a host, listen on a given port, or resolve the other host's IP/hostname. Example:\n          permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";\n        \n        \n          \n            java.sql.SQLPermission:\n            SQLPermission grants access to operations executed during database access. Currently all standard Java methods that use SQLPermission are deprecated. \n        \n        \n          \n            javax.net.ssl.SSLPermission:\n            SSLPermission grants access to SSL related operations. For example, an SSLPermission would be required to get the SSLSessionContext of an SSLSession:\n          permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";",
      "Choose a security policy directory: Dedicate a directory for storing your application's security policy files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory. \n        \n          Set appropriate permissions: Apply the appropriate filesystem permissions such that the security policy files can be only accessed by your application and its administrators.",
      "Delegate a Policy Manager: Java allows its applications to alter the JVM's policies during runtime. If your application needs to alter its policies during runtime, create a custom Policy Manager and delegate it the task of altering Java policies. Using the SecurityPermission class, enforce strict access control to the manager's functionality such that only authorized components can request modifications to the JVM's policies.\n          The following permissions must be granted to the Policy Manager's code:\n          java.security.SecurityPermission \"getPolicy\";java.security.SecurityPermission \"setPolicy\";\n        \n        \n          \n            Enforce the security policy as early as possible: Delaying the enforcement of the security policies provides a bigger window of opportunity for an attacker to execute a payload through your compromised application."
    ],
    "em": [
      "codeBase",
      "/tmp/myfile",
      "codeBase",
      "/usr/myapp/",
      "<java home>/lib/security/java.security",
      "-Djava.security.manager",
      "-Djava.security.policy",
      "SecurityManager",
      "AllPermission",
      "AudioPermission",
      "AuthPermission",
      "AuthPermission's",
      "Policy, Subject, LoginContext",
      "Configuration",
      "AWTPermission",
      "DelegationPermission",
      "FilePermission",
      "FilePermission",
      "LoggingPermission",
      "LoggingPermission",
      "NetPermission",
      "PrivateCredentialPermission",
      "Credentials",
      "Subject",
      "PropertyPermission",
      "ReflectPermission",
      "RuntimePermission",
      "SecurityPermission",
      "SerializablePermission",
      "ServicePermission",
      "SocketPermission",
      "SQLPermission",
      "SQLPermission",
      "SSLPermission",
      "SSLPermission",
      "SSLSessionContext",
      "SSLSession",
      "({java.home}/lib/security/java.policy)",
      "({user.home}/.java.policy)",
      "-Djava.security.policy(={policy file})",
      "SecurityManager",
      "SecurityManager",
      "SecurityManager",
      "null",
      "SecurityManager",
      "access denied",
      "SocketPermission",
      "SecurityPermission class"
    ],
    "pre": [
      "grant{    permission java.io.FilePermission \"/tmp/myfile\", \"read\";};",
      "grant codeBase \"file:/usr/myapp/\"{    permission java.io.FilePermission \"/tmp/myfile\", \"read\";};",
      "# Class to instantiate as the system Policy. This is the name of the class# that will be used as the Policy object.#policy.provider=sun.security.provider.PolicyFile# The default is to have a single system-wide policy file,# and a policy file in the user's home directory.policy.url.1=file:${java.home}/lib/security/java.policypolicy.url.2=file:${user.home}/myapp.java.policy",
      "java -Djava.security.manager-Djava.security.policy=/usr/myapp/myapp.java.policy <application server>",
      "if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}",
      "codeBase \"file:e:/myapp/bin/\"",
      "grant codeBase \"file:e:/myapp/bin/-\" {    // A placeholder for all appropriate permissions};",
      "permission java.security.AllPermission;",
      "permission javax.sound.sampled.AudioPermission \"play\";",
      "permission javax.security.auth.AuthPermission \"modifyPrincipals\";",
      "permission java.awt.AWTPermission \"accessClipboard\";",
      "permission javax.security.auth.kerberos.DelegationPermission       \"\\\"host/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\\\"\";",
      "permission java.io.FilePermission \"e:/myapp/logs/20061016.log\", \"write\";",
      "permission java.util.logging.LoggingPermission \"control\";",
      "permission java.net.NetPermission \"specifyStreamHandler\";",
      "permission javax.security.auth.PrivateCredentialPermission                \"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\",\"read\";",
      "permission java.util.PropertyPermission \"java.home\", \"read\";",
      "permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";",
      "permission java.lang.RuntimePermission \"accessDeclaredMembers\";",
      "permission java.security.SecurityPermission \"createAccessControlContext\";",
      "permission java.io.SerializablePermission \"enableSubstitution\";",
      "permission javax.security.auth.kerberos.ServicePermission                                    \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\";",
      "permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";",
      "permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";",
      "-Djava.security.policy=e:/myapp/config/myapp.policy",
      "if (System.getSecurityManager() == null){      System.setSecurityManager(new SecurityManager());}",
      "-Djava.security.manager",
      "public void doGet(HttpServletRequest request, HttpServletResponse response)      throws ServletException, IOException{      PrintWriter out = response.getWriter();      CodeSigner[] cSign = null;      CodeSource cSource = new CodeSource(null, cSign);      Principal[] principals = new Principal[0];      ProtectionDomain pDomain = new ProtectionDomain(cSource,                                                    null, null, principals);      java.security.Policy policy = java.security.Policy.getPolicy();      PermissionCollection permCollect = policy.getPermissions(pDomain);      Enumeration permList = permCollect.elements();      while (permList.hasMoreElements())      {            out.println( \"<br>\" + permList.nextElement().toString());      }}",
      "Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"     java.security.AccessControlException: access denied          (java.lang.RuntimePermission setContextClassLoader)...Caused by: java.security.AccessControlException: access denied          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)",
      "java.security.SecurityPermission \"getPolicy\";java.security.SecurityPermission \"setPolicy\";",
      "grant {permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";};",
      "grant codeBase \"file:e:/myapp/bin/DBManager/-\" {permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";};"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Check For</h1>\n  <p>Ensure that your application has a defined security policy that applies the principle of least privilege. Restrict application execution to only allow the minimum set of necessary actions.</p>\n  <h1>Why</h1>\n  <p>Defining a Java security policy is a defense in-depth mechanism for&nbsp;preventing your application from performing tasks that the operating system would otherwise allow. This is especially important&nbsp;if your application becomes compromised by an attacker.</p>\n  <h1>How to Check</h1>\n  <p>Your application's security policy should be based on your business requirements. Use the following steps to ensure that your application implements and deploys a security policy that matches your organization's business requirements:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify assets that need to be protected. </strong>Review your application's threat model documentation and enumerate all system resources that you need to protect. Common resources that need protection include:</p>\n      <ul>\n        <li>Files - upload and download code</li>\n        <li>Sockets - code that enables listener sockets or code that makes connections to backend systems</li>\n        <li>System properties </li>\n        <li>Network connections </li>\n        <li>Database operations </li>\n        <li>Runtime operations</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Ensure each asset is protected by the correct permissions and actions. </strong>Using the principle of least privilege, determine the appropriate permissions and actions that need to be granted for each identified resource. Verify that a <em>codeBase</em> attribute is associated with each granted permission. Without the attribute, the resource can be accessed by any of your application's components. For instance, the following entry from the security policy grants a global permission to read the file <em>/tmp/myfile</em>:</p>\n      <pre>grant<br />{<br />    permission java.io.FilePermission \"/tmp/myfile\", \"read\";<br />};</pre>\n      <p>Instead, include the <em>codeBase</em> that would restrict read access only to components located in<strong></strong><em>/usr/myapp/</em>: </p>\n      <pre>grant <strong>codeBase \"file:/usr/myapp/\"<br /></strong>{<br />    permission java.io.FilePermission \"/tmp/myfile\", \"read\";<br />};</pre>\n    </li>\n    <li>\n      <p>\n        <strong>Ensure your security policy is enforced. </strong>Your application's security policies will be enforced only when they are loaded into the Java Runtime. To make sure your security policies will be enforced:</p>\n      <ul>\n        <li>\n          <p>\n            <strong>System-wide security properties:</strong> Check if your security policy is included in the system-wide security properties file (<em>&lt;java home&gt;/lib/security/java.security</em>). Example:</p>\n          <pre># Class to instantiate as the system Policy. This is the name of the class<br /># that will be used as the Policy object.<br />#<br />policy.provider=sun.security.provider.PolicyFile<br /><br /># The default is to have a single system-wide policy file,<br /># and a policy file in the user's home directory.<br />policy.url.1=file:${java.home}/lib/security/java.policy<br />policy.url.2=file:${user.home}/myapp.java.policy</pre>\n        </li>\n        <li>\n          <p>\n            <strong>Command line:</strong> Check if your application's environment is configured to start with the <em>-Djava.security.manager</em> and <em>-Djava.security.policy</em> flags:</p>\n          <pre>java <strong>-Djava.security.manager<br /></strong><strong>-Djava.security.policy=/usr/myapp/myapp.java.policy</strong> &lt;application server&gt;</pre>\n        </li>\n        <li>\n          <p>\n            <strong>System object:</strong> Check if your application verifies whether a <em>SecurityManager</em> object has been assigned within the System object: </p>\n          <pre>if (System.getSecurityManager() == null)<br />{<br />      System.setSecurityManager(new SecurityManager());<br />}</pre>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Ensure your application's security policy is protected. </strong>Use the following steps to verify that your application's security policy is protected: </p>\n      <ul>\n        <li>\n          <strong>On disk:</strong> Verify that your application's security policy is accessible only by your application and its administrators. Ensure that the security policy has the right filesystem permissions set and is not accessible via the web. </li>\n        <li>\n          <strong>In memory:</strong>&nbsp;Verify that&nbsp;your application's security policy is enforced at start-up. Ensure that your application has a dedicated Policy Manager for handling any policy modifications during runtime.</li>\n      </ul>\n    </li>\n  </ol>\n  <h1>How to Fix</h1>\n  <p>Although Java applications run inside a virtual machine, do not execute your application in the context of a privileged user. Consider tightening the restrictions on your application by employing Java Policies.</p>\n  <p>Use the following steps to successfully utilize Java Permissions:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify the system resources that your application uses. </strong>Enumerate all resources that your application will need to access. Identify the types of permissions that your application requires to access those resources. For example, your application will need to connect to your database via a socket connection or write to your logs.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Identify your application. </strong>Your application can be identified via two ways inside a Java policy — code signing or code base.</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Code signing.</strong> Always sign your code whenever possible. This ensures the authenticity of your code. Use Java's KeyTool when signing your code.</p>\n        </li>\n        <li>\n          <p>\n            <strong>Code base.</strong> Identify the location of your code. Example:</p>\n          <pre>codeBase \"file:e:/myapp/bin/\"</pre>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Create the appropriate policy. </strong>Once all required resources are enumerated, create a Java policy that reflects the type of access that is required for each resource. Example:</p>\n      <pre>grant codeBase \"file:e:/myapp/bin/-\" <br />{<br />    // A placeholder for all appropriate permissions<br />};</pre>\n      <p>Assign a permission for each required resource. Java provides different types of permissions, each of which can be customized to meet your application's needs:</p>\n      <ul>\n        <li>\n          <p>\n            <strong>java.security.AllPermission:</strong>\n            <em>AllPermission</em> grants all other permissions to the code. It should seldom&nbsp;be used. Example:</p>\n          <pre>permission java.security.AllPermission;</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.sound.sampled.AudioPermission:</strong>\n            <em>AudioPermission</em> grants access rights to the system's audio components. It should be used only when the application is required to play or record audio. Example:</p>\n          <pre>permission javax.sound.sampled.AudioPermission \"play\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.AuthPermission:</strong>\n            <em>AuthPermission</em> is used during authentication procedures. The <em>AuthPermission's</em> only argument is the name of the security configuration parameter. This permission class is used to guard access to the <em>Policy, Subject, LoginContext</em>, and <em>Configuration</em> objects. Example:</p>\n          <pre>permission javax.security.auth.AuthPermission \"modifyPrincipals\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.awt.AWTPermission:</strong>\n            <em>AWTPermission</em> grants access to the system's user experience and graphical interface. For example, the following permission would allow the application to access the system's clipboard:</p>\n          <pre>permission java.awt.AWTPermission \"accessClipboard\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.kerberos.DelegationPermission:</strong>\n            <em>DelegationPermission</em> restricts the usage of the Kerberos delegation model. Example:</p>\n          <pre>permission javax.security.auth.kerberos.DelegationPermission<br />       \"\\\"host/foo.example.com@EXAMPLE.COM\\\" \\\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\\\"\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.io.FilePermission:</strong>\n            <em>FilePermission</em> grants access to files on the local system. Access right are read, write, execute, delete. Note that <em>FilePermission</em> always grants read access to files within the code's directory and any subdirectories. Example:</p>\n          <pre>permission java.io.FilePermission \"e:/myapp/logs/20061016.log\", \"write\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.util.logging.LoggingPermission:</strong>\n            <em>LoggingPermission</em> is associated with Java's standard logging mechanism. Currently <em>LoggingPermission</em> grants only the right to control Java's logging configuration. Example:</p>\n          <pre>permission java.util.logging.LoggingPermission \"control\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.net.NetPermission:</strong>\n            <em>NetPermission</em> grants access to various network permissions. For example, the following permission allows the ability to specify a stream handler when constructing a URL:</p>\n          <pre>permission java.net.NetPermission \"specifyStreamHandler\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.PrivateCredentialPermission:</strong>\n            <em>PrivateCredentialPermission</em> protects access to the private <em>Credentials</em> belonging to a particular <em>Subject</em>. Example:</p>\n          <pre>permission javax.security.auth.PrivateCredentialPermission<br />                \"javax.resource.spi.security.PasswordCredential * \\\"*\\\"\",\"read\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.util.PropertyPermission:</strong>\n            <em>PropertyPermission</em> specifies the read/write access to an object's or System's properties. Example:</p>\n          <pre>permission java.util.PropertyPermission \"java.home\", \"read\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.lang.reflect.ReflectPermission:</strong>\n            <em>ReflectPermission</em> grants access to reflective operations. Currently it only allows suppressing the standard Java language access checks (i.e. public, protected and private) by reflected objects at their point of use. Example:</p>\n          <pre>permission java.lang.reflect.ReflectPermission \"suppressAccessChecks\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.lang.RuntimePermission:</strong>\n            <em>RuntimePermission</em> grants access to runtime operations such as loading external libraries and halting the JVM. Example:</p>\n          <pre>permission java.lang.RuntimePermission \"accessDeclaredMembers\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.security.SecurityPermission:</strong>\n            <em>SecurityPermission</em> is used any security related events. Example:</p>\n          <pre>permission java.security.SecurityPermission \"createAccessControlContext\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.io.SerializablePermission:</strong>\n            <em>SerializablePermission</em> grant access to more advanced features of Java's serialization model. For example, the following permission allows the substitution of one object for another during serialization:</p>\n          <pre>permission java.io.SerializablePermission \"enableSubstitution\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>javax.security.auth.kerberos.ServicePermission:</strong>\n            <em>ServicePermission</em> protects the access to Kerberos services and any supplemental credentials. Example:</p>\n          <pre>permission javax.security.auth.kerberos.ServicePermission<br />                                    \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\", \"initiate\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.net.SocketPermission:</strong>\n            <em>SocketPermission</em> grants access to the network via sockets. It allows your application to connect to a host, accept connections from a host, listen on a given port, or resolve the other host's IP/hostname. Example:</p>\n          <pre>permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>java.sql.SQLPermission:</strong>\n            <em>SQLPermission</em> grants access to operations executed during database access. Currently all standard Java methods that use <em>SQLPermission</em> are deprecated. <br /></p>\n        </li>\n        <li>\n          <p>\n            <strong>javax.net.ssl.SSLPermission:</strong>\n            <em>SSLPermission</em> grants access to SSL related operations. For example, an <em>SSLPermission</em> would be required to get the <em>SSLSessionContext</em> of an <em>SSLSession</em>:</p>\n          <pre>permission javax.net.ssl.SSLPermission \"getSSLSessionContext\";</pre>\n        </li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Load the policy at runtime. </strong>By default Java provides two policy files: a system policy file<em> ({java.home}/lib/security/java.policy)</em> and a user policy file <em>({user.home}/.java.policy)</em>. Use the <em>-Djava.security.policy(={policy file})</em> flag to load your policy during the start-up routine of your application's server. Make sure you use only a single <strong>=</strong> to append your policy to the JVM's default policies as <strong>==</strong> will force the JVM to load your policy only. Example: </p>\n      <pre>-Djava.security.policy=e:/myapp/config/myapp.policy</pre>\n    </li>\n    <li>\n      <p>\n        <strong>Enforce your application's policy. </strong>To fully enforce your application's policy, attach a <em>SecurityManager</em> to the System object. Because most standard Java packages come with built-in permission checks that are linked to the System's <em>SecurityManager</em>, enforcing a certain set of permissions is a fairly easy task. Example: </p>\n      <pre>if (System.getSecurityManager() == null)<br />{<br />      System.setSecurityManager(new SecurityManager());<br />}</pre>\n      <p>or</p>\n      <pre>-Djava.security.manager</pre>\n      <p>Be aware that enforcing a security policy may restrict access to various resources that are essential to the application's environment. Examples of such resources include, but are not limited to, use of network sockets, application server's local files, etc. Use the following steps to resolve such problems:</p>\n      <ol>\n        <li>\n          <p>\n            <strong>Enumerate all permissions that are granted to your application's environment. </strong>Enumerating all granted permissions to your application's environment helps identify the basic functionality that it requires for its normal operations. The following code helps you identify all permissions that your application inherits from its environment:</p>\n          <pre>public void doGet(HttpServletRequest request, HttpServletResponse response)<br />      throws ServletException, IOException<br />{<br />      PrintWriter out = response.getWriter();<br />      CodeSigner[] cSign = null;<br />      CodeSource cSource = new CodeSource(null, cSign);<br />      Principal[] principals = new Principal[0];<br />      ProtectionDomain pDomain = new ProtectionDomain(cSource,<br />                                                    null, null, principals);<br />      java.security.Policy policy = java.security.Policy.getPolicy();<br />      PermissionCollection permCollect = policy.getPermissions(pDomain);<br />      Enumeration permList = permCollect.elements();<br />      while (permList.hasMoreElements())<br />      {<br />            out.println( \"&lt;br&gt;\" + permList.nextElement().toString());<br />      }<br />}</pre>\n          <p>Note that the code snippet will perform its intended action only if the System's <em>SecurityManager</em> is set to <em>null</em>.</p>\n        </li>\n        <li>\n          <p />\n          <strong>Check if your application's environment performs unauthorized actions. </strong>Enable the <em>SecurityManager</em> during the start-up routine of your application's environment. Monitor the environment's logs for any <em>access denied</em> errors. For instance, Tomcat will not function properly if the administrator does not grant a <em>SocketPermission</em> to connect and resolve 127.0.0.1 on port 8005: <p /><pre>Exception in thread \"ContainerBackgroundProcessor[StandardEngine[Catalina]]\"<br />     java.security.AccessControlException: access denied<br />          (java.lang.RuntimePermission setContextClassLoader)<br />...<br />Caused by: java.security.AccessControlException: access denied<br />          (java.net.SocketPermission 127.0.0.1:8005 connect,resolve)</pre></li>\n        <li>\n          <p>\n            <strong>Grant the essential permissions for your application's environment. </strong>Grant all essential permissions into the security policy for your application's environment to allow the environment to function properly.</p>\n        </li>\n      </ol>\n    </li>\n    <li>\n      <p>\n        <strong>Protect security policy files. </strong>Make sure that appropriate security measures are taken when storing the security policy files.</p>\n      <ul>\n        <li>\n          <strong>Choose a security policy directory:</strong> Dedicate a directory for storing your application's security policy files. Make sure the directory is not web-accessible. This limits the scope of users&nbsp;who can potentially compromise the contents inside the directory. </li>\n        <li>\n          <strong>Set appropriate permissions:</strong> Apply the appropriate filesystem permissions such that the security policy files can be only accessed by your application and its administrators.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Avoid common mistakes</strong>.</p>\n      <ul>\n        <li>\n          <p>\n            <strong>Delegate a Policy Manager:</strong> Java allows its applications to alter the JVM's policies during runtime. If your application needs to alter its policies during runtime, create a custom Policy Manager and delegate it the task of altering Java policies. Using the <em>SecurityPermission class</em>, enforce strict access control to the manager's functionality such that only authorized components can request modifications to the JVM's policies.</p>\n          <p>The following permissions must be granted to the Policy Manager's code:</p>\n          <pre>java.security.SecurityPermission \"getPolicy\";<br />java.security.SecurityPermission \"setPolicy\";</pre>\n        </li>\n        <li>\n          <p>\n            <strong>Enforce the security policy as early as possible:</strong> Delaying the enforcement of the security policies provides a bigger window of opportunity for an attacker to execute a payload through your compromised application.</p>\n        </li>\n      </ul>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The following snippet shows part of the Java policy for an application. Because the developer has not identified his component, the applied permission will be valid for any other component hosted within the same Java application.</p>\n  <pre>grant <br />{<br />permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";<br />}; </pre>\n  <h1>Solution Example</h1>\n  <p>The following snippet shows part of the Java policy for an application. Because the developer has identified his component, the applied permission will be valid only for his component hosted within the Java application.</p>\n  <pre>grant codeBase \"file:e:/myapp/bin/DBManager/-\" <br />{<br />permission java.net.SocketPermission \"serv02.example.com:3306\", \"connect\";<br />};</pre>\n  <br />"
}