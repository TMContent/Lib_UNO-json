{
  "id": "ac058cd0-c5ee-4e53-b18a-99c9b3928ba9",
  "checksum": "34e40668af4e66b57c46cee94e3c124f5cbeeb40",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "blockquote",
      "p",
      "p",
      "title"
    ],
    "do": [
      "h1"
    ],
    "use": [
      "p",
      "blockquote",
      "p",
      "p",
      "title"
    ],
    "properties": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "expose": [
      "p",
      "title"
    ],
    "non-private": [
      "p"
    ],
    "fields": [
      "p",
      "p",
      "p",
      "blockquote",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "allow": [
      "p"
    ],
    "you": [
      "p"
    ],
    "add": [
      "p"
    ],
    "additional": [
      "p",
      "h1"
    ],
    "constraints": [
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p"
    ],
    "validation": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "blockquote",
      "p"
    ],
    "permission": [
      "p"
    ],
    "demands": [
      "p"
    ],
    "when": [
      "h1",
      "blockquote",
      "p"
    ],
    "this": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "pre"
    ],
    "an": [
      "p",
      "p"
    ],
    "important": [
      "p"
    ],
    "guideline": [
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "followed": [
      "p"
    ],
    "all": [
      "p"
    ],
    "the": [
      "p"
    ],
    "time": [
      "p",
      "blockquote",
      "p"
    ],
    "how": [
      "h1",
      "p"
    ],
    "not": [
      "p",
      "pre"
    ],
    "exposed": [
      "p"
    ],
    "directly": [
      "p"
    ],
    "calling": [
      "p"
    ],
    "code": [
      "p",
      "blockquote",
      "p"
    ],
    "mark": [
      "p"
    ],
    "private": [
      "p",
      "pre"
    ],
    "create": [
      "p"
    ],
    "read/write": [
      "p"
    ],
    "read-only": [
      "p"
    ],
    "access": [
      "p"
    ],
    "them": [
      "p"
    ],
    "note   private": [
      "blockquote",
      "p"
    ],
    "are": [
      "blockquote",
      "p"
    ],
    "enforced": [
      "blockquote",
      "p"
    ],
    "at": [
      "blockquote",
      "p"
    ],
    "compile": [
      "blockquote",
      "p"
    ],
    "only": [
      "blockquote",
      "p"
    ],
    "malicious": [
      "blockquote",
      "p"
    ],
    "runs": [
      "blockquote",
      "p"
    ],
    "in": [
      "blockquote",
      "p"
    ],
    "a": [
      "blockquote",
      "p"
    ],
    "full": [
      "blockquote",
      "p"
    ],
    "trust": [
      "blockquote",
      "p"
    ],
    "environment": [
      "blockquote",
      "p"
    ],
    "it": [
      "blockquote",
      "p"
    ],
    "could": [
      "blockquote",
      "p"
    ],
    "reflection": [
      "blockquote",
      "p"
    ],
    "unmanaged": [
      "blockquote",
      "p"
    ],
    "pointers": [
      "blockquote",
      "p"
    ],
    "bypass": [
      "blockquote",
      "p"
    ],
    "these": [
      "blockquote",
      "p"
    ],
    "visibility": [
      "blockquote",
      "p"
    ],
    "restrictions": [
      "blockquote",
      "p"
    ],
    "note": [
      "b"
    ],
    "here": [
      "p"
    ],
    "example": [
      "p"
    ],
    "of": [
      "p"
    ],
    "property": [
      "p"
    ],
    "for": [
      "p"
    ],
    "adding": [
      "p"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "class": [
      "pre"
    ],
    "employee{": [
      "pre"
    ],
    "string": [
      "pre",
      "pre"
    ],
    "employeename": [
      "pre"
    ],
    "name": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "get": [
      "pre"
    ],
    "return": [
      "pre"
    ],
    "thisemployeename;": [
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre"
    ],
    "set": [
      "pre"
    ],
    "if!regex.ismatch(value,@\"^[a-za-z'.\\s]{1,40}$\"))": [
      "pre"
    ],
    "throw": [
      "pre"
    ],
    "new": [
      "pre"
    ],
    "argumentexception\"employee": [
      "pre"
    ],
    "well": [
      "pre"
    ],
    "formed\";": [
      "pre"
    ],
    "thisemployeename": [
      "pre"
    ],
    "=": [
      "pre"
    ],
    "value": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "resources": [
      "h1"
    ],
    "using": [
      "ul",
      "li"
    ],
    "at http//msdn.microsoft.com/en-us/library/w86s7x04.aspx": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/w86s7x04.aspx": [
      "a"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Additional Resources"
    ],
    "p": [
      "Use properties to expose non-private fields.",
      "Properties allow you to add additional constraints, such as input validation or permission demands.",
      "This is an important guideline and should be followed all the time.",
      "Fields should not be exposed directly to calling code. Mark fields as private, and create read/write or read-only properties to access them.",
      "Note   Private fields are enforced at compile time only. When malicious code runs in a full trust environment, it could use reflection or unmanaged pointers to bypass these visibility restrictions.",
      "Here is an example of how to use property for adding input validation.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "blockquote": [
      "Note   Private fields are enforced at compile time only. When malicious code runs in a full trust environment, it could use reflection or unmanaged pointers to bypass these visibility restrictions."
    ],
    "b": [
      "Note"
    ],
    "pre": [
      "public class Employee{    private String employeeName;    public String Name    {       get       {            return this.employeeName;        }       set       {           if(!Regex.IsMatch(value,@\"^[a-zA-Z'.\\s]{1,40}$\"))           {               throw new ArgumentException(\"Employee Name is not well formed\");           }                      this.employeeName = value;       }    }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "Using Properties at http://msdn.microsoft.com/en-us/library/w86s7x04.aspx"
    ],
    "li": [
      "Using Properties at http://msdn.microsoft.com/en-us/library/w86s7x04.aspx"
    ],
    "a": [
      "http://msdn.microsoft.com/en-us/library/w86s7x04.aspx"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn.microsoft.com/en-us/library/w86s7x04.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/w86s7x04.aspx"
    }
  ],
  "html": "<h1>What to Do</h1>\r\n  <p>Use properties to expose non-private fields.</p>\r\n  <h1>Why</h1>\r\n  <p>Properties allow you to add additional constraints, such as input validation or permission demands.</p>\r\n  <h1>When</h1>\r\n  <p>This is an important guideline and should be followed all the time.</p>\r\n  <h1>How</h1>\r\n  <p>Fields should not be exposed directly to calling code. Mark fields as private, and create read/write or read-only properties to access them.</p>\r\n  <blockquote>\r\n    <p>\r\n      <b>Note</b>&nbsp;&nbsp;&nbsp;Private fields are enforced at compile time only. When malicious code runs in a full trust environment, it could use reflection or unmanaged pointers to bypass these visibility restrictions.</p>\r\n  </blockquote>\r\n  <p>Here is an example of how to use property for adding input validation.&nbsp;</p>\r\n  <pre>public class Employee<br />&#123;<br />&nbsp;&nbsp;&nbsp; private String employeeName;<br />&nbsp;&nbsp;&nbsp; public String Name<br />&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.employeeName; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(&#33;Regex.IsMatch(value,&#64;\"&#94;&#91;a-zA-Z'.\\s&#93;&#123;1,40&#125;&#36;\"))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ArgumentException(\"Employee Name is not well formed\");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.employeeName = value;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#125;<br />&nbsp;&nbsp;&nbsp; &#125;<br />&#125;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>Using Properties at&nbsp;<a href=\"http://msdn.microsoft.com/en-us/library/w86s7x04.aspx\">http://msdn.microsoft.com/en-us/library/w86s7x04.aspx</a></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}