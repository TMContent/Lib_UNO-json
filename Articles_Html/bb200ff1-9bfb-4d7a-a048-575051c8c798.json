{
  "id": "bb200ff1-9bfb-4d7a-a048-575051c8c798",
  "checksum": "d7883018e230db272d237d5f5533b5f750c887c5",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "ul",
      "li"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre"
    ],
    "ensure": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "passwords": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "are": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "cleared": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "after": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "their": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "sensitive": [
      "p"
    ],
    "data": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "pre",
      "p",
      "ul",
      "li"
    ],
    "used": [
      "p"
    ],
    "establish": [
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p"
    ],
    "trust": [
      "p"
    ],
    "relationship": [
      "p"
    ],
    "leaving": [
      "p"
    ],
    "them": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "can": [
      "p"
    ],
    "expose": [
      "p"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "attacker": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "password": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "pre",
      "p",
      "p"
    ],
    "examine": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "li",
      "p"
    ],
    "application": [
      "ol",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "places": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "inside": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "new": [
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "users": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "modifying": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "existing": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "changing": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "credentials": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "authenticating": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "verify": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "stored": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p"
    ],
    "mutable": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p"
    ],
    "objects": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p"
    ],
    "each": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "identified": [
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "object": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "such": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "character": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre"
    ],
    "array": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre"
    ],
    "this": [
      "ol",
      "li",
      "p"
    ],
    "allows": [
      "ol",
      "li",
      "p"
    ],
    "the": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "overwritten": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "rely": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p"
    ],
    "garbage": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "collector": [
      "ol",
      "li",
      "p"
    ],
    "immutable": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "net": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "strings": [
      "ol",
      "li",
      "p"
    ],
    "do": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "allow": [
      "ol",
      "li",
      "p"
    ],
    "space": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "modified": [
      "ol",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "li",
      "p"
    ],
    "allocated": [
      "ol",
      "li",
      "p"
    ],
    "containing": [
      "ol",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "quickly": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "li",
      "p"
    ],
    "passed": [
      "ol",
      "li",
      "p"
    ],
    "between": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p"
    ],
    "class": [
      "ol",
      "li",
      "p"
    ],
    "or": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "boundaries": [
      "ol",
      "li",
      "p"
    ],
    "except": [
      "ol",
      "li",
      "p"
    ],
    "when": [
      "ol",
      "li",
      "p"
    ],
    "absolutely": [
      "ol",
      "li",
      "p"
    ],
    "necessary": [
      "ol",
      "li",
      "p"
    ],
    "note": [
      "ol",
      "li",
      "p"
    ],
    "examples": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "below": [
      "ol",
      "li",
      "p"
    ],
    "difference": [
      "ol",
      "li",
      "p"
    ],
    "byte": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "strong",
      "strong",
      "strong",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "cannot": [
      "ol",
      "li",
      "p"
    ],
    "guarantee": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "overwrite": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "same": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "location": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "heap": [
      "ol",
      "li",
      "p"
    ],
    "already": [
      "ol",
      "li",
      "p"
    ],
    "occupied": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "however": [
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "variable": [
      "ol",
      "li",
      "p"
    ],
    "element": [
      "ol",
      "li",
      "p"
    ],
    "byte],": [
      "ol",
      "li",
      "p"
    ],
    "then": [
      "ol",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "contains": [
      "ol",
      "li",
      "p"
    ],
    "actual": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p"
    ],
    "char": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "p"
    ],
    "char]": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "byte]": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "string": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "pre"
    ],
    "instances": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "locations": [
      "ol",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "been": [
      "ol",
      "li",
      "p"
    ],
    "setting": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "pointer": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "null": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "does": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "clear": [
      "ol",
      "li",
      "p"
    ],
    "memory-": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "assigned": [
      "ol",
      "li",
      "p"
    ],
    "zero": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "p",
      "p",
      "h1"
    ],
    "improper": [
      "ol",
      "li",
      "p"
    ],
    "removal": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "pass": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "p",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "getpassword);...//insufficient": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "removing": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "memorypass": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "nullexample": [
      "ol",
      "li"
    ],
    "proper": [
      "ol",
      "li",
      "p"
    ],
    "removalchar[]": [
      "ol",
      "li"
    ],
    "getpassword);...//proper": [
      "ol",
      "li",
      "pre"
    ],
    "clearing": [
      "ol",
      "li",
      "pre"
    ],
    "remove": [
      "ol",
      "li",
      "pre"
    ],
    "memoryforint": [
      "ol",
      "li",
      "pre"
    ],
    "i=0": [
      "ol",
      "li",
      "pre"
    ],
    "ipass.length;": [
      "ol",
      "li",
      "pre"
    ],
    "i++{": [
      "ol",
      "li",
      "pre"
    ],
    "passi]": [
      "ol",
      "li",
      "pre"
    ],
    "'": [
      "ol",
      "li",
      "pre"
    ],
    "'}pass": [
      "ol",
      "li",
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "following": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "although": [
      "p"
    ],
    "removed": [
      "p"
    ],
    "collection": [
      "p"
    ],
    "called": [
      "p"
    ],
    "erased": [
      "p"
    ],
    "getpassword);...pass": [
      "p",
      "pre"
    ],
    "nullgc.collect();": [
      "p",
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "learn": [
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "types": [
      "ul",
      "li"
    ],
    "visit": [
      "ul",
      "li"
    ],
    "type": [
      "ul",
      "li",
      "a"
    ],
    "fundamentals": [
      "ul",
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "guideline": [
      "h1",
      "ul",
      "li",
      "a"
    ],
    "leave": [
      "ul",
      "li",
      "a"
    ],
    "memory&nbsp": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ],
    "left": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "Problem Example",
      "Additional Resources",
      "Related Guideline"
    ],
    "p": [
      "Ensure that passwords are cleared from memory after their use.",
      "Passwords are sensitive data that are used to establish a trust relationship. Leaving them in memory after their use can expose them to an attacker.",
      "Identify all password use. Examine your application and identify all places inside its code base that handle user passwords. Common places include:",
      "Verify that passwords are stored in mutable objects. Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector. Verify that passwords are not stored in immutable objects, such as .NET strings, that do not allow their memory space to be modified after being allocated.",
      "Ensure that the memory containing the password is overwritten as quickly after use as possible. Ensure that passwords are not passed between function, class, or object boundaries except when absolutely necessary. Note in the examples below the difference between Byte and byte. .NET cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a Byte. However, if you overwrite a byte variable or an element inside a byte[], then you have overwritten the same memory location that contains the actual data.",
      "Examples of Mutable objects:",
      "Examples of Immutable objects:",
      "Verify that all password instances are cleared. Ensure that all the memory locations where passwords have been stored are cleared or overwritten after their use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory.",
      "Example of improper password removal:",
      "char[] pass = GetPassword();...//insufficient for removing a password from memorypass = null;",
      "Example of proper password removal:",
      "The following code makes a use of a password. Although the pointer to the string is removed and garbage collection is called, .NET does not guarantee the data will be erased.",
      "string pass = GetPassword();...pass = null;GC.Collect();",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Identify all password use. Examine your application and identify all places inside its code base that handle user passwords. Common places include:\n      \n        Creating new users \n        Modifying existing users \n        Changing credentials for existing users \n        Authenticating users\n      \n    \n    \n      \n        Verify that passwords are stored in mutable objects. Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector. Verify that passwords are not stored in immutable objects, such as .NET strings, that do not allow their memory space to be modified after being allocated.\n      Ensure that the memory containing the password is overwritten as quickly after use as possible. Ensure that passwords are not passed between function, class, or object boundaries except when absolutely necessary. Note in the examples below the difference between Byte and byte. .NET cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a Byte. However, if you overwrite a byte variable or an element inside a byte[], then you have overwritten the same memory location that contains the actual data.\n      Examples of Mutable objects:\n      \n        char \n        char[] \n        byte \n        byte[]\n      \n      Examples of Immutable objects:\n      \n        string \n        Byte \n        Byte[] \n        Char\n      \n    \n    \n      \n        Verify that all password instances are cleared. Ensure that all the memory locations where passwords have been stored are cleared or overwritten after their use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory. \n      Example of improper password removal: char[] pass = GetPassword();...//insufficient for removing a password from memorypass = null;Example of proper password removal:char[] pass = GetPassword();...//proper clearing of character array to remove data from memoryfor(int i=0; i<pass.Length; i++){      pass[i] = ' ';}pass = null;"
    ],
    "li": [
      "Identify all password use. Examine your application and identify all places inside its code base that handle user passwords. Common places include:\n      \n        Creating new users \n        Modifying existing users \n        Changing credentials for existing users \n        Authenticating users",
      "Creating new users",
      "Modifying existing users",
      "Changing credentials for existing users",
      "Authenticating users",
      "Verify that passwords are stored in mutable objects. Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector. Verify that passwords are not stored in immutable objects, such as .NET strings, that do not allow their memory space to be modified after being allocated.\n      Ensure that the memory containing the password is overwritten as quickly after use as possible. Ensure that passwords are not passed between function, class, or object boundaries except when absolutely necessary. Note in the examples below the difference between Byte and byte. .NET cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a Byte. However, if you overwrite a byte variable or an element inside a byte[], then you have overwritten the same memory location that contains the actual data.\n      Examples of Mutable objects:\n      \n        char \n        char[] \n        byte \n        byte[]\n      \n      Examples of Immutable objects:\n      \n        string \n        Byte \n        Byte[] \n        Char",
      "char",
      "char[]",
      "byte",
      "byte[]",
      "string",
      "Byte",
      "Byte[]",
      "Char",
      "Verify that all password instances are cleared. Ensure that all the memory locations where passwords have been stored are cleared or overwritten after their use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory. \n      Example of improper password removal: char[] pass = GetPassword();...//insufficient for removing a password from memorypass = null;Example of proper password removal:char[] pass = GetPassword();...//proper clearing of character array to remove data from memoryfor(int i=0; i<pass.Length; i++){      pass[i] = ' ';}pass = null;",
      "To learn more about .NET data types, visit: .NET Type Fundamentals.",
      "Guideline: Do Not Leave Passwords in Memory&nbsp;"
    ],
    "strong": [
      "Identify all password use.",
      "Verify that passwords are stored in mutable objects.",
      "Byte",
      "byte",
      "Byte",
      "byte",
      "byte[]",
      "Verify that all password instances are cleared."
    ],
    "ul": [
      "Creating new users \n        Modifying existing users \n        Changing credentials for existing users \n        Authenticating users",
      "char \n        char[] \n        byte \n        byte[]",
      "string \n        Byte \n        Byte[] \n        Char",
      "To learn more about .NET data types, visit: .NET Type Fundamentals.",
      "Guideline: Do Not Leave Passwords in Memory&nbsp;"
    ],
    "pre": [
      "char[] pass = GetPassword();...//insufficient for removing a password from memorypass = null;",
      "char[] pass = GetPassword();...//proper clearing of character array to remove data from memoryfor(int i=0; i<pass.Length; i++){      pass[i] = ' ';}pass = null;",
      "string pass = GetPassword();...pass = null;GC.Collect();"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      ".NET Type Fundamentals",
      "Guideline: Do Not Leave Passwords in Memory&nbsp;"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn.microsoft.com/en-us/magazine/cc301569.aspx",
      "text": ".NET Type Fundamentals"
    },
    {
      "href": "/article/2120b3fe-34c6-47bf-be83-d9756e512d02",
      "text": "Guideline: Do Not Leave Passwords in Memory&nbsp;"
    }
  ],
  "html": "<h1>What to Check For</h1>\n  <p>Ensure that passwords are cleared from memory after their use.</p>\n  <h1>Why</h1>\n  <p>Passwords are sensitive data that are used to establish a trust relationship. Leaving them in memory after their use can expose them to an attacker.</p>\n  <h1>How to Check</h1>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify all password use. </strong>Examine your application and identify all places inside its code base that handle user passwords. Common places include:</p>\n      <ul>\n        <li>Creating new users </li>\n        <li>Modifying existing users </li>\n        <li>Changing credentials for existing users </li>\n        <li>Authenticating users</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that passwords are stored in mutable objects.</strong> Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector. Verify that passwords are not stored in immutable objects, such as .NET strings, that do not allow their memory space to be modified after being allocated.</p>\n      <p>Ensure that the memory containing the password is overwritten as quickly after use as possible. Ensure that passwords are not passed between function, class, or object boundaries except when absolutely necessary. Note in the examples below the difference between <strong>Byte</strong> and <strong>byte</strong>. .NET cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a <strong>Byte</strong>. However, if you overwrite a <strong>byte</strong> variable or an element inside a <strong>byte[]</strong>, then you have overwritten the same memory location that contains the actual data.</p>\n      <p>Examples of Mutable objects:</p>\n      <ul>\n        <li>char </li>\n        <li>char[] </li>\n        <li>byte </li>\n        <li>byte[]</li>\n      </ul>\n      <p>Examples of Immutable objects:</p>\n      <ul>\n        <li>string </li>\n        <li>Byte </li>\n        <li>Byte[] </li>\n        <li>Char</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that all password instances are cleared.</strong> Ensure that all the memory locations where passwords have been stored are cleared or overwritten after their use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory. </p>\n      <p />Example of improper password removal: <p /><pre>char[] pass = GetPassword();<br />...<br />//insufficient for removing a password from memory<br />pass = null;</pre><p>Example of proper password removal:</p><pre>char[] pass = GetPassword();<br />...<br />//proper clearing of character array to remove data from memory<br />for(int i=0; i&lt;pass.Length; i++){<br />      pass[i] = ' ';<br />}<br />pass = null;</pre></li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The following code makes a use of a password. Although the pointer to the string is removed and garbage collection is called, .NET does not guarantee the data will be erased.</p>\n  <p />\n  <pre>string pass = GetPassword();<br />...<br />pass = null;<br />GC.Collect();</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>To learn more about .NET data types, visit: <a href=\"http://msdn.microsoft.com/en-us/magazine/cc301569.aspx\">.NET Type Fundamentals</a>.</li>\n  </ul>\n  <h1>Related Guideline</h1>\n  <ul>\n    <li>\n      <a href=\"/article/2120b3fe-34c6-47bf-be83-d9756e512d02\">Guideline: Do Not Leave Passwords in Memory&amp;nbsp;</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>"
}