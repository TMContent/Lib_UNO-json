{
  "id": "ee502c11-9305-43ea-9761-634ee39a3d9c",
  "checksum": "30c4721d9e5406128396ddad2a631a1b6c0d35d7",
  "words": {
    "1": [
      "h1",
      "pre"
    ],
    "2": [
      "h1"
    ],
    "3": [
      "h1"
    ],
    "8": [
      "pre"
    ],
    "10": [
      "pre"
    ],
    "11": [
      "p"
    ],
    "40": [
      "ul",
      "li",
      "pre"
    ],
    "123": [
      "ol",
      "li"
    ],
    "2003": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h3",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "aspnet": [
      "ul",
      "li",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "how": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "shows": [
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "number": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "ways": [
      "p"
    ],
    "help": [
      "p",
      "p"
    ],
    "protect": [
      "p",
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "h2",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h3",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "occur": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "uses": [
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p"
    ],
    "construct": [
      "p"
    ],
    "dynamic": [
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "statements": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li"
    ],
    "stored": [
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "procedures": [
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "connect": [
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h3",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "database": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "conventional": [
      "p"
    ],
    "security": [
      "p",
      "p",
      "p"
    ],
    "measures": [
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "use": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "ssl": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "div",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "ipsec": [
      "p"
    ],
    "do": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "successful": [
      "p",
      "p"
    ],
    "enable": [
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "p"
    ],
    "users": [
      "p"
    ],
    "execute": [
      "p",
      "p"
    ],
    "commands": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "div",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "application's": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "li"
    ],
    "countermeasures": [
      "p",
      "p"
    ],
    "include": [
      "p",
      "p",
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "div",
      "pre",
      "pre",
      "p",
      "div",
      "div",
      "pre",
      "pre",
      "p",
      "div",
      "pre",
      "pre",
      "h2",
      "div",
      "div",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "list": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "acceptable": [
      "p",
      "p"
    ],
    "characters": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p"
    ],
    "constrain": [
      "p",
      "h1",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2"
    ],
    "parameterized": [
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "access": [
      "p",
      "p",
      "p",
      "pre",
      "h2",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "h3",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "least": [
      "p",
      "pre",
      "p"
    ],
    "privileged": [
      "p",
      "p"
    ],
    "account": [
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h3",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "has": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "restricted": [
      "p",
      "p"
    ],
    "permissions": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "with": [
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h1",
      "p",
      "p",
      "h3",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "recommended": [
      "p"
    ],
    "approach": [
      "p"
    ],
    "because": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "parameters": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "pre",
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "type": [
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p"
    ],
    "safe": [
      "p",
      "ul",
      "li",
      "pre"
    ],
    "type-safe": [
      "p",
      "ul",
      "li"
    ],
    "also": [
      "p",
      "p",
      "pre",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p"
    ],
    "situations": [
      "p",
      "p",
      "p",
      "p"
    ],
    "where": [
      "p",
      "p",
      "pre",
      "p"
    ],
    "cannot": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "consider": [
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "character": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "escaping": [
      "p"
    ],
    "techniques": [
      "p"
    ],
    "overview": [
      "h1"
    ],
    "attack": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "enables": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "privileges": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "granted": [
      "p"
    ],
    "login": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "problem": [
      "p"
    ],
    "more": [
      "p"
    ],
    "severe": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "over-privileged": [
      "p",
      "ul",
      "li"
    ],
    "example": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "eliminate": [
      "p"
    ],
    "then": [
      "p"
    ],
    "without": [
      "p",
      "ul",
      "li"
    ],
    "adequate": [
      "p"
    ],
    "safeguards": [
      "p"
    ],
    "attacker": [
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "might": [
      "p"
    ],
    "able": [
      "p",
      "ul",
      "li"
    ],
    "perform": [
      "p",
      "ul",
      "li",
      "pre"
    ],
    "operation": [
      "p"
    ],
    "common": [
      "p",
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p"
    ],
    "make": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "b",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "susceptible": [
      "p",
      "p"
    ],
    "weak": [
      "ul",
      "li"
    ],
    "validation": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "construction": [
      "ul",
      "li"
    ],
    "logins": [
      "ul",
      "li"
    ],
    "step": [
      "h1",
      "h1",
      "h1"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "should": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p"
    ],
    "all": [
      "p"
    ],
    "applications": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "length": [
      "p",
      "p",
      "p"
    ],
    "format": [
      "p",
      "p"
    ],
    "range": [
      "p"
    ],
    "constraining": [
      "p",
      "p",
      "p"
    ],
    "queries": [
      "p"
    ],
    "note when": [
      "p"
    ],
    "good": [
      "p"
    ],
    "practice": [
      "p"
    ],
    "create": [
      "p",
      "div",
      "pre",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "regular": [
      "p",
      "p",
      "p"
    ],
    "expressions": [
      "p",
      "p"
    ],
    "reject": [
      "p"
    ],
    "any": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "potential": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "associated": [
      "p"
    ],
    "unacceptable": [
      "p",
      "p",
      "p"
    ],
    "always": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "overlook": [
      "p"
    ],
    "defining": [
      "p"
    ],
    "represented": [
      "p"
    ],
    "alternate": [
      "p"
    ],
    "pass": [
      "p"
    ],
    "note": [
      "b",
      "b"
    ],
    "web": [
      "h2",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "pages": [
      "h2",
      "p"
    ],
    "start": [
      "p"
    ],
    "server-side": [
      "p",
      "p"
    ],
    "rely": [
      "p"
    ],
    "client-side": [
      "p",
      "p"
    ],
    "easily": [
      "p",
      "p"
    ],
    "bypassed": [
      "p"
    ],
    "only": [
      "p",
      "pre",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "reduce": [
      "p"
    ],
    "round": [
      "p",
      "p"
    ],
    "trips": [
      "p"
    ],
    "improve": [
      "p"
    ],
    "experience": [
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h3",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "controls": [
      "p",
      "p",
      "p",
      "p"
    ],
    "validator": [
      "p"
    ],
    "regularexpressionvalidator": [
      "p",
      "em",
      "p",
      "em"
    ],
    "rangevalidator": [
      "p",
      "em"
    ],
    "html": [
      "p",
      "p"
    ],
    "regex": [
      "p",
      "em",
      "p",
      "em"
    ],
    "class": [
      "p",
      "p",
      "p"
    ],
    "previous": [
      "p"
    ],
    "ssn": [
      "p",
      "div",
      "pre",
      "p"
    ],
    "value": [
      "p",
      "p",
      "p"
    ],
    "captured": [
      "p"
    ],
    "textbox": [
      "p",
      "em"
    ],
    "control": [
      "p",
      "p",
      "p"
    ],
    "its": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "shown": [
      "p",
      "p"
    ],
    "following": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "%@": [
      "div",
      "pre"
    ],
    "language=\"c#\"": [
      "div",
      "pre"
    ],
    "%<form": [
      "div",
      "pre"
    ],
    "id=\"form1\"": [
      "div",
      "pre"
    ],
    "runat=\"server\"": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "asp:textbox": [
      "div",
      "pre"
    ],
    "id=\"ssn\"": [
      "div",
      "pre"
    ],
    "runat=\"server\"/": [
      "div",
      "pre"
    ],
    "asp:regularexpressionvalidator": [
      "div",
      "pre"
    ],
    "id=\"regexpssn\"": [
      "div",
      "pre"
    ],
    "errormessage=\"incorrect": [
      "div",
      "pre"
    ],
    "number\"": [
      "div",
      "pre"
    ],
    "controltovalidate=\"ssn\"": [
      "div",
      "pre"
    ],
    "validationexpression=\"^\\d{3}-\\d{2}-\\d{4}$\"": [
      "div",
      "pre"
    ],
    "/</form>": [
      "div",
      "pre"
    ],
    "another": [
      "p"
    ],
    "source": [
      "p",
      "ul",
      "li"
    ],
    "query": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "string": [
      "p",
      "pre",
      "div",
      "pre",
      "p"
    ],
    "parameter": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "cookie": [
      "p",
      "p"
    ],
    "systemtext.regularexpressions": [
      "p",
      "em"
    ],
    "namespace": [
      "p"
    ],
    "assumes": [
      "p"
    ],
    "obtained": [
      "p"
    ],
    "systemtext.regularexpressions;": [
      "pre",
      "div",
      "pre"
    ],
    "regex.ismatch(request.cookies[\"ssn\"],": [
      "pre"
    ],
    "\"^\\d{3}-\\d{2}-\\d{4}$\"){": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "database}else{": [
      "pre"
    ],
    "handle": [
      "pre",
      "ul",
      "li",
      "h2"
    ],
    "bad": [
      "pre"
    ],
    "input}": [
      "pre"
    ],
    "some": [
      "p"
    ],
    "need": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "provide": [
      "p",
      "p",
      "p",
      "p"
    ],
    "perhaps": [
      "p"
    ],
    "addition": [
      "p"
    ],
    "page-level": [
      "p"
    ],
    "two": [
      "p"
    ],
    "untrusted": [
      "ul",
      "ul",
      "li",
      "li",
      "b"
    ],
    "clients": [
      "ul",
      "li",
      "b"
    ],
    "come": [
      "ul",
      "li"
    ],
    "guarantee": [
      "ul",
      "li"
    ],
    "well": [
      "ul",
      "li"
    ],
    "been": [
      "ul",
      "li"
    ],
    "validated": [
      "ul",
      "li"
    ],
    "constrained": [
      "ul",
      "li"
    ],
    "add": [
      "ul",
      "li",
      "p"
    ],
    "logic": [
      "ul",
      "li",
      "pre"
    ],
    "constrains": [
      "ul",
      "li"
    ],
    "routines": [
      "ul",
      "li",
      "ul",
      "li",
      "h2",
      "p"
    ],
    "library": [
      "ul",
      "ul",
      "li",
      "li",
      "b"
    ],
    "packaged": [
      "ul",
      "li"
    ],
    "designed": [
      "ul",
      "li"
    ],
    "multiple": [
      "ul",
      "li"
    ],
    "own": [
      "ul",
      "li"
    ],
    "no": [
      "ul",
      "li"
    ],
    "assumptions": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li",
      "p"
    ],
    "client": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "routine": [
      "p"
    ],
    "prior": [
      "p"
    ],
    "statement": [
      "p",
      "ul",
      "li"
    ],
    "systemusing": [
      "div",
      "pre"
    ],
    "public": [
      "pre"
    ],
    "void": [
      "pre"
    ],
    "createnewuseraccountstring": [
      "pre"
    ],
    "name": [
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "password{": [
      "pre"
    ],
    "check": [
      "pre",
      "pre",
      "pre"
    ],
    "contains": [
      "pre",
      "pre"
    ],
    "lower": [
      "pre",
      "pre"
    ],
    "case": [
      "pre",
      "pre",
      "pre",
      "p",
      "ul",
      "li",
      "p"
    ],
    "upper": [
      "pre"
    ],
    "letters": [
      "pre"
    ],
    "apostrophe": [
      "pre"
    ],
    "dot": [
      "pre"
    ],
    "white": [
      "pre"
    ],
    "space": [
      "pre"
    ],
    "between": [
      "pre",
      "pre"
    ],
    "long": [
      "pre",
      "pre"
    ],
    "!regexismatch(useridtxt.text,": [
      "pre"
    ],
    "@\"^a-za-z'./s]{1,40}$\"))": [
      "pre"
    ],
    "throw": [
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "ol",
      "li"
    ],
    "formatexception\"invalid": [
      "pre",
      "pre"
    ],
    "format\";": [
      "pre",
      "pre"
    ],
    "password": [
      "pre",
      "pre"
    ],
    "at": [
      "pre",
      "ol",
      "li"
    ],
    "one": [
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "digit": [
      "pre"
    ],
    "letter": [
      "pre",
      "pre"
    ],
    "uppercase": [
      "pre"
    ],
    "!regexismatch(passwordtxt.text,": [
      "pre"
    ],
    "@\"^?=.*\\d)(?=.*[a-z])(?=.*[a-z]).{8,10}$\"": [
      "pre"
    ],
    ")": [
      "pre"
    ],
    "..}": [
      "pre"
    ],
    "does": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "necessarily": [
      "p",
      "p"
    ],
    "prevent": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "important": [
      "p"
    ],
    "thing": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "unfiltered": [
      "p"
    ],
    "described": [
      "p"
    ],
    "\"overview\"": [
      "p"
    ],
    "section": [
      "p"
    ],
    "document": [
      "p"
    ],
    "sqlparametercollection": [
      "p",
      "em"
    ],
    "calling": [
      "p"
    ],
    "procedure": [
      "p",
      "p",
      "p",
      "div",
      "pre",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "systemdata;using": [
      "div",
      "pre",
      "div",
      "pre",
      "div",
      "pre"
    ],
    "systemdata.sqlclient;": [
      "div",
      "pre",
      "div",
      "pre"
    ],
    "sqlconnection": [
      "div",
      "pre",
      "pre",
      "div",
      "pre"
    ],
    "connection": [
      "div",
      "pre",
      "pre",
      "div",
      "pre",
      "p"
    ],
    "=": [
      "div",
      "div",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sqlconnectionconnectionstring)){": [
      "div",
      "pre",
      "pre",
      "div",
      "pre"
    ],
    "dataset": [
      "div",
      "pre",
      "pre",
      "div",
      "div",
      "pre",
      "pre"
    ],
    "userdataset": [
      "div",
      "pre",
      "pre"
    ],
    "dataset);": [
      "div",
      "pre",
      "pre",
      "div",
      "pre"
    ],
    "sqldataadapter": [
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "pre",
      "div",
      "div",
      "pre",
      "pre"
    ],
    "mycommand": [
      "div",
      "pre"
    ],
    "\"loginstoredprocedure\"": [
      "div",
      "pre"
    ],
    "connection;": [
      "div",
      "pre",
      "pre",
      "div",
      "pre"
    ],
    "mycommandselectcommand.commandtype": [
      "div",
      "pre"
    ],
    "commandtypestoredprocedure;": [
      "div",
      "pre"
    ],
    "mycommandselectcommand.parameters.add(\"@au_id\",": [
      "div",
      "pre",
      "pre"
    ],
    "sqldbtypevarchar,": [
      "div",
      "pre",
      "pre"
    ],
    "11;": [
      "div",
      "pre",
      "pre"
    ],
    "mycommandselectcommand.parameters[\"@au_id\"].value": [
      "div",
      "pre",
      "pre"
    ],
    "ssntext;": [
      "div",
      "pre",
      "pre"
    ],
    "mycommandfill(userdataset);}": [
      "div",
      "pre"
    ],
    "@au_id": [
      "p",
      "em"
    ],
    "treated": [
      "p"
    ],
    "literal": [
      "p"
    ],
    "executable": [
      "p"
    ],
    "checked": [
      "p"
    ],
    "preceding": [
      "p",
      "p"
    ],
    "longer": [
      "p"
    ],
    "than": [
      "p"
    ],
    "conform": [
      "p"
    ],
    "defined": [
      "p"
    ],
    "sqlparameter": [
      "p",
      "em",
      "div",
      "div",
      "pre",
      "pre"
    ],
    "throws": [
      "p"
    ],
    "exception": [
      "p",
      "p"
    ],
    "review": [
      "h2",
      "p"
    ],
    "several": [
      "p",
      "p"
    ],
    "dborunquery": [
      "div",
      "pre"
    ],
    "@var": [
      "div",
      "pre",
      "ul",
      "li",
      "em"
    ],
    "ntext": [
      "div",
      "pre"
    ],
    "asexec": [
      "div",
      "pre"
    ],
    "sp_executesql": [
      "div",
      "pre"
    ],
    "@vargo": [
      "div",
      "pre"
    ],
    "similar": [
      "p"
    ],
    "executes": [
      "ul",
      "li"
    ],
    "whatever": [
      "ul",
      "li"
    ],
    "passed": [
      "ul",
      "li"
    ],
    "variable": [
      "ul",
      "li"
    ],
    "being": [
      "ul",
      "li"
    ],
    "set": [
      "ul",
      "li"
    ],
    "drop": [
      "ul",
      "li",
      "div",
      "pre"
    ],
    "table": [
      "ul",
      "ul",
      "li",
      "li",
      "div",
      "pre",
      "p",
      "p"
    ],
    "orders": [
      "ul",
      "ul",
      "li",
      "li",
      "div",
      "pre",
      "p"
    ],
    "will": [
      "ul",
      "ul",
      "li",
      "p",
      "li"
    ],
    "dropped": [
      "ul",
      "li",
      "p"
    ],
    "runs": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "dbo": [
      "ul",
      "li",
      "em"
    ],
    "procedure's": [
      "ul",
      "li"
    ],
    "runquery)": [
      "ul",
      "li"
    ],
    "poor": [
      "ul",
      "li"
    ],
    "choice": [
      "ul",
      "li"
    ],
    "probe": [
      "ul",
      "li"
    ],
    "he": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "she": [
      "ul",
      "li",
      "p"
    ],
    "see": [
      "ul",
      "li"
    ],
    "like": [
      "ul",
      "li"
    ],
    "runquery": [
      "ul",
      "li",
      "em",
      "em"
    ],
    "guess": [
      "ul",
      "li"
    ],
    "likely": [
      "ul",
      "li"
    ],
    "run": [
      "ul",
      "li"
    ],
    "supplied": [
      "ul",
      "li"
    ],
    "still": [
      "p"
    ],
    "constructing": [
      "p"
    ],
    "sqlparameterscollection": [
      "p",
      "em"
    ],
    "mydataadapter": [
      "pre"
    ],
    "\"select": [
      "pre",
      "div",
      "div",
      "pre",
      "pre"
    ],
    "au_lname": [
      "pre"
    ],
    "au_fname": [
      "pre"
    ],
    "authors": [
      "pre"
    ],
    "au_id": [
      "pre"
    ],
    "@au_id\"": [
      "pre"
    ],
    "mydataadapterfill(userdataset);}": [
      "pre"
    ],
    "batching": [
      "h2"
    ],
    "misconception": [
      "p"
    ],
    "concatenate": [
      "p"
    ],
    "send": [
      "p"
    ],
    "batch": [
      "p"
    ],
    "single": [
      "p",
      "p",
      "p"
    ],
    "trip": [
      "p"
    ],
    "however": [
      "p"
    ],
    "technique": [
      "p"
    ],
    "sure": [
      "p",
      "p",
      "p"
    ],
    "names": [
      "p",
      "p"
    ],
    "repeated": [
      "p"
    ],
    "making": [
      "p",
      "p"
    ],
    "unique": [
      "p"
    ],
    "during": [
      "p"
    ],
    "text": [
      "p"
    ],
    "concatenation": [
      "p"
    ],
    "here": [
      "p"
    ],
    "systemdata.sqlclient;.": [
      "div",
      "pre"
    ],
    "dataadapter": [
      "div",
      "pre"
    ],
    "customerid": [
      "div",
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "into": [
      "div",
      "pre"
    ],
    "#temp1": [
      "div",
      "pre"
    ],
    "customers": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "\"": [
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre"
    ],
    "+": [
      "div",
      "div",
      "div",
      "pre",
      "pre",
      "pre"
    ],
    "\"where": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "@custidparm": [
      "div",
      "pre"
    ],
    "select": [
      "div",
      "pre"
    ],
    "companyname": [
      "div",
      "pre"
    ],
    "country": [
      "div",
      "pre"
    ],
    "@countryparm": [
      "div",
      "pre"
    ],
    "#temp1;\",": [
      "div",
      "pre"
    ],
    "custidparm": [
      "div",
      "pre"
    ],
    "dataadapterselectcommand.parameters.add(": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "\"@custidparm\"": [
      "div",
      "pre"
    ],
    "sqldbtypenchar,": [
      "div",
      "pre"
    ],
    "5;": [
      "div",
      "pre"
    ],
    "custidparmvalue": [
      "div",
      "pre"
    ],
    "customeridtext;": [
      "div",
      "pre"
    ],
    "countryparm": [
      "div",
      "pre"
    ],
    "\"@countryparm\"": [
      "div",
      "pre"
    ],
    "sqldbtypenvarchar,": [
      "div",
      "pre"
    ],
    "15;": [
      "div",
      "pre"
    ],
    "countryparmvalue": [
      "div",
      "pre"
    ],
    "countrytext;": [
      "div",
      "pre"
    ],
    "connectionopen();": [
      "div",
      "pre"
    ],
    "dataadapterfill(dataset);}.": [
      "div",
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "considerations": [
      "h1"
    ],
    "other": [
      "p"
    ],
    "things": [
      "p"
    ],
    "develop": [
      "p"
    ],
    "escape": [
      "ul",
      "li",
      "h2",
      "p",
      "p"
    ],
    "special": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p"
    ],
    "least-privileged": [
      "ul",
      "li",
      "h2",
      "p",
      "p"
    ],
    "avoid": [
      "ul",
      "li",
      "h2"
    ],
    "disclosing": [
      "ul",
      "li",
      "h2"
    ],
    "error": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "information": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "forced": [
      "p"
    ],
    "instead": [
      "p"
    ],
    "safeguard": [
      "p"
    ],
    "against": [
      "p"
    ],
    "have": [
      "p",
      "p",
      "p"
    ],
    "meaning": [
      "p",
      "p"
    ],
    "quote": [
      "p",
      "p"
    ],
    "character.": [
      "p"
    ],
    "handled": [
      "p"
    ],
    "utilized": [
      "p"
    ],
    "cause": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "note special": [
      "p"
    ],
    "pose": [
      "p"
    ],
    "threat": [
      "p"
    ],
    "thereby": [
      "p"
    ],
    "them": [
      "p",
      "p"
    ],
    "harmless": [
      "p"
    ],
    "illustrated": [
      "p"
    ],
    "fragment": [
      "p"
    ],
    "private": [
      "div",
      "pre"
    ],
    "safesqlliteralstring": [
      "div",
      "pre"
    ],
    "inputsql{": [
      "div",
      "pre"
    ],
    "return": [
      "div",
      "pre",
      "p"
    ],
    "inputsqlreplace(\"'\",": [
      "div",
      "pre"
    ],
    "\"''\";}": [
      "div",
      "pre"
    ],
    "windows": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "authentication": [
      "p",
      "p",
      "p"
    ],
    "operating": [
      "p"
    ],
    "system": [
      "p"
    ],
    "perspective": [
      "p"
    ],
    "limited": [
      "p",
      "p",
      "p",
      "p"
    ],
    "ability": [
      "p"
    ],
    "resources": [
      "p"
    ],
    "additionally": [
      "p"
    ],
    "whether": [
      "p"
    ],
    "corresponding": [
      "p"
    ],
    "running": [
      "p"
    ],
    "microsoft": [
      "p",
      "p"
    ],
    "accesses": [
      "p"
    ],
    "different": [
      "p"
    ],
    "same": [
      "p"
    ],
    "domain": [
      "p",
      "ol",
      "li",
      "i"
    ],
    "default": [
      "p"
    ],
    "pool": [
      "p"
    ],
    "under": [
      "p"
    ],
    "network": [
      "p",
      "h3",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "service": [
      "p",
      "h3",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "server's": [
      "ol",
      "li"
    ],
    "credentials": [
      "ol",
      "li"
    ],
    "presented": [
      "ol",
      "li"
    ],
    "identity": [
      "ol",
      "li"
    ],
    "domain\\webservername$": [
      "ol",
      "li"
    ],
    "called": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "xyz": [
      "ol",
      "li"
    ],
    "xyz\\123$": [
      "ol",
      "li",
      "em"
    ],
    "grant": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "required": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "creating": [
      "ol",
      "li"
    ],
    "adding": [
      "ol",
      "li"
    ],
    "role": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "establish": [
      "ol",
      "li"
    ],
    "let": [
      "ol",
      "li"
    ],
    "call": [
      "ol",
      "li"
    ],
    "tables": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "needs": [
      "ol",
      "li"
    ],
    "sufficient": [
      "ol",
      "li"
    ],
    "based": [
      "ol",
      "li"
    ],
    "minimum": [
      "ol",
      "li"
    ],
    "requirements": [
      "ol",
      "li"
    ],
    "performs": [
      "ol",
      "li",
      "p"
    ],
    "lookups": [
      "ol",
      "li",
      "p"
    ],
    "update": [
      "ol",
      "li",
      "p"
    ],
    "read": [
      "ol",
      "li",
      "p"
    ],
    "limits": [
      "ol",
      "li",
      "p"
    ],
    "damage": [
      "ol",
      "li",
      "p"
    ],
    "succeeds": [
      "ol",
      "li",
      "p"
    ],
    "webservername": [
      "i"
    ],
    "structured": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "catch": [
      "p"
    ],
    "errors": [
      "p",
      "p",
      "p"
    ],
    "propagating": [
      "p"
    ],
    "back": [
      "p"
    ],
    "log": [
      "p"
    ],
    "detailed": [
      "p",
      "p",
      "p"
    ],
    "locally": [
      "p"
    ],
    "but": [
      "p"
    ],
    "details": [
      "p"
    ],
    "while": [
      "p"
    ],
    "connecting": [
      "p"
    ],
    "nature": [
      "p"
    ],
    "disclose": [
      "p"
    ],
    "related": [
      "p"
    ],
    "could": [
      "p"
    ],
    "useful": [
      "p"
    ],
    "compromise": [
      "p"
    ],
    "attackers": [
      "p"
    ],
    "messages": [
      "p"
    ],
    "deconstruct": [
      "p"
    ],
    "trying": [
      "p"
    ],
    "inject": [
      "p"
    ],
    "message": [
      "p"
    ],
    "may": [
      "p"
    ],
    "reveal": [
      "p"
    ],
    "valuable": [
      "p"
    ],
    "naming": [
      "p"
    ],
    "conventions": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Overview",
      "Step 1. Constrain Input",
      "Step 2. Use Parameters with Stored Procedures",
      "Step 3. Use Parameters with Dynamic SQL",
      "Additional Considerations"
    ],
    "ul": [
      "ASP.NET 4.0",
      "Weak input validation. \n    Dynamic construction of SQL statements without the use of type-safe parameters. \n    Use of over-privileged database logins.",
      "Untrusted clients. If the data can come from an untrusted source or you cannot guarantee how well the data has been validated and constrained, add validation logic that constrains input to your data access routines. \n    \n      Library code. If your data access code is packaged as a library designed for use by multiple applications, your data access code should perform its own validation, because you can make no safe assumptions about the client applications.",
      "The stored procedure executes whatever statement is passed to it. Consider the @var variable being set to: DROP TABLE ORDERS;  In this case, the ORDERS table will be dropped. \n    The stored procedure runs with dbo privileges. \n    The stored procedure's name (RunQuery) is a poor choice. If an attacker is able to probe the database, he or she will see the name of the stored procedure. With a name like RunQuery, he can guess that the stored procedure is likely to run the supplied query.",
      "Use escape routines to handle special input characters. \n    Use a least-privileged database account. \n    Avoid disclosing error information."
    ],
    "li": [
      "ASP.NET 4.0",
      "Weak input validation.",
      "Dynamic construction of SQL statements without the use of type-safe parameters.",
      "Use of over-privileged database logins.",
      "Untrusted clients. If the data can come from an untrusted source or you cannot guarantee how well the data has been validated and constrained, add validation logic that constrains input to your data access routines.",
      "Library code. If your data access code is packaged as a library designed for use by multiple applications, your data access code should perform its own validation, because you can make no safe assumptions about the client applications.",
      "The stored procedure executes whatever statement is passed to it. Consider the @var variable being set to: DROP TABLE ORDERS;  In this case, the ORDERS table will be dropped.",
      "The stored procedure runs with dbo privileges.",
      "The stored procedure's name (RunQuery) is a poor choice. If an attacker is able to probe the database, he or she will see the name of the stored procedure. With a name like RunQuery, he can guess that the stored procedure is likely to run the supplied query.",
      "Use escape routines to handle special input characters.",
      "Use a least-privileged database account.",
      "Avoid disclosing error information.",
      "Create a SQL Server login for the Web server's Network Service account. The Network Service account has network credentials that are presented at the database server as the identity DOMAIN\\WEBSERVERNAME$. For example, if your domain is called XYZ and the Web server is called 123, you create a database login for XYZ\\123$.",
      "Grant the new login access to the required database by creating a database user and adding the user to a database role.",
      "Establish permissions to let this database role call the required stored procedures or access the required tables in the database. Only grant access to stored procedures the application needs to use, and only grant sufficient access to tables based on the application's minimum requirements. For example, if the ASP.NET application only performs database lookups and does not update any data, you only need to grant read access to the tables. This limits the damage that an attacker can cause if the attacker succeeds in a SQL injection attack."
    ],
    "p": [
      "This How to shows a number of ways to help protect your ASP.NET application from SQL injection attacks. SQL injection can occur when an application uses input to construct dynamic SQL statements or when it uses stored procedures to connect to the database. Conventional security measures, such as the use of SSL and IPsec, do not protect your application from SQL injection attacks. Successful SQL injection attacks enable malicious users to execute commands in an application's database.",
      "Countermeasures include using a list of acceptable characters to constrain input, using parameterized SQL for data access, and using a least privileged account that has restricted permissions in the database. Using stored procedures with parameterized SQL is the recommended approach because SQL parameters are type safe. Type-safe SQL parameters can also be used with dynamic SQL. In situations where parameterized SQL cannot be used, consider using character escaping techniques.",
      "A successful SQL injection attack enables a malicious user to execute commands in your application's database by using the privileges granted to your application's login. The problem is more severe if your application uses an over-privileged account to connect to the database. For example, if your application's login has privileges to eliminate a database, then without adequate safeguards, an attacker might be able to perform this operation.",
      "Common vulnerabilities that make your data access code susceptible to SQL injection attacks include:",
      "You should validate all input to your ASP.NET applications for type, length, format, and range. By constraining the input used in your data access queries, you can protect your application from SQL injection.",
      "Note: When constraining input, it is a good practice to create a list of acceptable characters and use regular expressions to reject any characters that are not on the list. The potential risk associated with using a list of unacceptable characters is that it is always possible to overlook an unacceptable character when defining the list; also, an unacceptable character can be represented in an alternate format to pass validation.",
      "Start by constraining input in the server-side code for your ASP.NET Web pages. Do not rely on client-side validation because it can be easily bypassed. Use client-side validation only to reduce round trips and to improve the user experience.",
      "If you use server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator and RangeValidator controls to constrain input. If you use regular HTML input controls, use the Regex class in your server-side code to constrain input.",
      "If in the previous code example, the SSN value is captured by an ASP.NET TextBox control, you can constrain its input by using a RegularExpressionValidator control as shown in the following.",
      "If the SSN input is from another source, such as an HTML control, a query string parameter, or a cookie, you can constrain it by using the Regex class from the System.Text.RegularExpressions namespace. The following example assumes that the input is obtained from a cookie.",
      "In some situations, you need to provide validation in your data access code, perhaps in addition to your ASP.NET page-level validation. Two common situations where you need to provide validation in your data access code are:",
      "The following example shows how a data access routine can validate its input parameters by using regular expressions prior to using the parameters in a SQL statement.",
      "Using stored procedures does not necessarily prevent SQL injection. The important thing to do is use parameters with stored procedures. If you do not use parameters, your stored procedures can be susceptible to SQL injection if they use unfiltered input as described in the \"Overview\" section of this document.",
      "The following code shows how to use SqlParameterCollection when calling a stored procedure.",
      "In this case, the @au_id parameter is treated as a literal value and not as executable code. Also, the parameter is checked for type and length. In the preceding code example, the input value cannot be longer than 11 characters. If the data does not conform to the type or length defined by the parameter, the SqlParameter class throws an exception.",
      "Because using stored procedures with parameters does not necessarily prevent SQL injection, you should review your application's use of this type of stored procedure. For example, the following parameterized stored procedure has several security vulnerabilities.",
      "An application that uses a stored procedure similar to the one in the preceding code example has the following vulnerabilities:",
      "In this case, the ORDERS table will be dropped.",
      "If you cannot use stored procedures, you should still use parameters when constructing dynamic SQL statements. The following code shows how to use SqlParametersCollection with dynamic SQL.",
      "A common misconception is that if you concatenate several SQL statements to send a batch of statements to the server in a single round trip, you cannot use parameters. However, you can use this technique if you make sure that parameter names are not repeated. You can easily do this by making sure that you use unique parameter names during SQL text concatenation, as shown here.",
      "Other things to consider when you develop countermeasures to prevent SQL injection include:",
      "In situations where parameterized SQL cannot be used and you are forced to use dynamic SQL instead, you need to safeguard against input characters that have special meaning to SQL Server (such as the single quote character). If not handled, special characters such as the single quote character in the input can be utilized to cause SQL injection.",
      "Note: Special input characters pose a threat only with dynamic SQL and not when using parameterized SQL.",
      "Escape routines add an escape character to characters that have special meaning to SQL Server, thereby making them harmless. This is illustrated in the following code fragment:",
      "Your application should connect to the database by using a least-privileged account. If you use Windows authentication to connect, the Windows account should be least-privileged from an operating system perspective and should have limited privileges and limited ability to access Windows resources. Additionally, whether or not you use Windows authentication or SQL authentication, the corresponding SQL Server login should be restricted by permissions in the database.",
      "Consider the example of an ASP.NET application running on Microsoft Windows Server 2003 that accesses a database on a different server in the same domain. By default, the ASP.NET application runs in an application pool that runs under the Network Service account. This account is a least privileged account.",
      "For example, if the ASP.NET application only performs database lookups and does not update any data, you only need to grant read access to the tables. This limits the damage that an attacker can cause if the attacker succeeds in a SQL injection attack.",
      "Use structured exception handling to catch errors and prevent them from propagating back to the client. Log detailed error information locally, but return limited error details to the client.",
      "If errors occur while the user is connecting to the database, be sure that you provide only limited information about the nature of the error to the user. If you disclose information related to data access and database errors, you could provide a malicious user with useful information that he or she can use to compromise your database security. Attackers use the information in detailed error messages to help deconstruct a SQL query that they are trying to inject with malicious code. A detailed error message may reveal valuable information such as the connection string, SQL server name, or table and database naming conventions.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "Note:",
      "Untrusted clients.",
      "Library code.",
      "Note:"
    ],
    "h2": [
      "Constrain Input in ASP.NET Web Pages",
      "Constrain Input in Data Access Code",
      "Review Your Application's Use of Parameterized Stored Procedures",
      "Using Parameter Batching",
      "Use Escape Routines to Handle Special Input Characters",
      "Use a Least-Privileged Database Account",
      "Avoid Disclosing Error Information"
    ],
    "em": [
      "RegularExpressionValidator",
      "RangeValidator",
      "Regex",
      "TextBox",
      "RegularExpressionValidator",
      "Regex",
      "System.Text.RegularExpressions",
      "SqlParameterCollection",
      "@au_id",
      "SqlParameter",
      "@var",
      "dbo",
      "RunQuery",
      "RunQuery",
      "SqlParametersCollection",
      "XYZ\\123$"
    ],
    "div": [
      "<%@ language=\"C#\" %><form id=\"form1\" runat=\"server\">    <asp:TextBox ID=\"SSN\" runat=\"server\"/>    <asp:RegularExpressionValidator ID=\"regexpSSN\" runat=\"server\"                  ErrorMessage=\"Incorrect SSN Number\"          ControlToValidate=\"SSN\"                  ValidationExpression=\"^\\d{3}-\\d{2}-\\d{4}$\" /></form>",
      "using System;using System.Text.RegularExpressions;",
      "using System.Data;using System.Data.SqlClient;\n    using (SqlConnection connection = new SqlConnection(connectionString)){  DataSet userDataset = new DataSet();  SqlDataAdapter myCommand = new SqlDataAdapter(              \"LoginStoredProcedure\", connection);  myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;  myCommand.SelectCommand.Parameters.Add(\"@au_id\", SqlDbType.VarChar, 11);  myCommand.SelectCommand.Parameters[\"@au_id\"].Value = SSN.Text;\n      myCommand.Fill(userDataset);}",
      "CREATE PROCEDURE dbo.RunQuery @var ntext ASexec sp_executesql @varGO",
      "DROP TABLE ORDERS;",
      "using System.Data;using System.Data.SqlClient;",
      "using System.Data;using System.Data.SqlClient;. . .using (SqlConnection connection = new SqlConnection(connectionString)){  SqlDataAdapter dataAdapter = new SqlDataAdapter(       \"SELECT CustomerID INTO #Temp1 FROM Customers \" +       \"WHERE CustomerID > @custIDParm; SELECT CompanyName FROM Customers \" +       \"WHERE Country = @countryParm and CustomerID IN \" +       \"(SELECT CustomerID FROM #Temp1);\",       connection);  SqlParameter custIDParm = dataAdapter.SelectCommand.Parameters.Add(                                          \"@custIDParm\", SqlDbType.NChar, 5);  custIDParm.Value = customerID.Text;\n      SqlParameter countryParm = dataAdapter.SelectCommand.Parameters.Add(                                      \"@countryParm\", SqlDbType.NVarChar, 15);  countryParm.Value = country.Text;\n      connection.Open();  DataSet dataSet = new DataSet();  dataAdapter.Fill(dataSet);}. . .",
      "private string SafeSqlLiteral(string inputSQL){  return inputSQL.Replace(\"'\", \"''\");}"
    ],
    "pre": [
      "<%@ language=\"C#\" %><form id=\"form1\" runat=\"server\">    <asp:TextBox ID=\"SSN\" runat=\"server\"/>    <asp:RegularExpressionValidator ID=\"regexpSSN\" runat=\"server\"                  ErrorMessage=\"Incorrect SSN Number\"          ControlToValidate=\"SSN\"                  ValidationExpression=\"^\\d{3}-\\d{2}-\\d{4}$\" /></form>",
      "using System.Text.RegularExpressions;",
      "if (Regex.IsMatch(Request.Cookies[\"SSN\"], \"^\\d{3}-\\d{2}-\\d{4}$\")){    // access the database}else{    // handle the bad input}",
      "using System;using System.Text.RegularExpressions;",
      "public void CreateNewUserAccount(string name, string password){    // Check name contains only lower case or upper case letters,     // the apostrophe, a dot, or white space. Also check it is     // between 1 and 40 characters long    if ( !Regex.IsMatch(userIDTxt.Text, @\"^[a-zA-Z'./s]{1,40}$\"))      throw new FormatException(\"Invalid name format\");",
      "",
      "// Check password contains at least one digit, one lower case     // letter, one uppercase letter, and is between 8 and 10     // characters long    if ( !Regex.IsMatch(passwordTxt.Text,                       @\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\" ))      throw new FormatException(\"Invalid password format\");",
      "",
      "// Perform data access logic (using type safe parameters)    ...}",
      "using System.Data;using System.Data.SqlClient;",
      "using (SqlConnection connection = new SqlConnection(connectionString)){  DataSet userDataset = new DataSet();  SqlDataAdapter myCommand = new SqlDataAdapter(              \"LoginStoredProcedure\", connection);  myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;  myCommand.SelectCommand.Parameters.Add(\"@au_id\", SqlDbType.VarChar, 11);  myCommand.SelectCommand.Parameters[\"@au_id\"].Value = SSN.Text;",
      "myCommand.Fill(userDataset);}",
      "CREATE PROCEDURE dbo.RunQuery @var ntext ASexec sp_executesql @varGO",
      "DROP TABLE ORDERS;",
      "using System.Data;using System.Data.SqlClient;",
      "using (SqlConnection connection = new SqlConnection(connectionString)){  DataSet userDataset = new DataSet();  SqlDataAdapter myDataAdapter = new SqlDataAdapter(         \"SELECT au_lname, au_fname FROM Authors WHERE au_id = @au_id\",          connection);                  myCommand.SelectCommand.Parameters.Add(\"@au_id\", SqlDbType.VarChar, 11);  myCommand.SelectCommand.Parameters[\"@au_id\"].Value = SSN.Text;  myDataAdapter.Fill(userDataset);}",
      "using System.Data;using System.Data.SqlClient;. . .using (SqlConnection connection = new SqlConnection(connectionString)){  SqlDataAdapter dataAdapter = new SqlDataAdapter(       \"SELECT CustomerID INTO #Temp1 FROM Customers \" +       \"WHERE CustomerID > @custIDParm; SELECT CompanyName FROM Customers \" +       \"WHERE Country = @countryParm and CustomerID IN \" +       \"(SELECT CustomerID FROM #Temp1);\",       connection);  SqlParameter custIDParm = dataAdapter.SelectCommand.Parameters.Add(                                          \"@custIDParm\", SqlDbType.NChar, 5);  custIDParm.Value = customerID.Text;",
      "SqlParameter countryParm = dataAdapter.SelectCommand.Parameters.Add(                                      \"@countryParm\", SqlDbType.NVarChar, 15);  countryParm.Value = country.Text;",
      "connection.Open();  DataSet dataSet = new DataSet();  dataAdapter.Fill(dataSet);}. . .",
      "private string SafeSqlLiteral(string inputSQL){  return inputSQL.Replace(\"'\", \"''\");}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "h3": [
      "To access SQL Server with the Network Service account"
    ],
    "ol": [
      "Create a SQL Server login for the Web server's Network Service account. The Network Service account has network credentials that are presented at the database server as the identity DOMAIN\\WEBSERVERNAME$. For example, if your domain is called XYZ and the Web server is called 123, you create a database login for XYZ\\123$. \n    Grant the new login access to the required database by creating a database user and adding the user to a database role. \n    Establish permissions to let this database role call the required stored procedures or access the required tables in the database. Only grant access to stored procedures the application needs to use, and only grant sufficient access to tables based on the application's minimum requirements. For example, if the ASP.NET application only performs database lookups and does not update any data, you only need to grant read access to the tables. This limits the damage that an attacker can cause if the attacker succeeds in a SQL injection attack."
    ],
    "i": [
      "DOMAIN",
      "WEBSERVERNAME"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>ASP.NET 4.0</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>This How to shows a number of ways to help protect your ASP.NET application from SQL injection attacks. SQL injection can occur when an application uses input to construct dynamic SQL statements or when it uses stored procedures to connect to the database. Conventional security measures, such as the use of SSL and IPsec, do not protect your application from SQL injection attacks. Successful SQL injection attacks enable malicious users to execute commands in an application's database.</p>\n  <p>Countermeasures include using a list of acceptable characters to constrain input, using parameterized SQL for data access, and using a least privileged account that has restricted permissions in the database. Using stored procedures with parameterized SQL is the recommended approach because SQL parameters are type safe. Type-safe SQL parameters can also be used with dynamic SQL. In situations where parameterized SQL cannot be used, consider using character escaping techniques. </p>\n  <h1>Overview</h1>\n  <p>A successful SQL injection attack enables a malicious user to execute commands in your application's database by using the privileges granted to your application's login. The problem is more severe if your application uses an over-privileged account to connect to the database. For example, if your application's login has privileges to eliminate a database, then without adequate safeguards, an attacker might be able to perform this operation.</p>\n  <p>Common vulnerabilities that make your data access code susceptible to SQL injection attacks include: </p>\n  <ul>\n    <li>Weak input validation. </li>\n    <li>Dynamic construction of SQL statements without the use of type-safe parameters. </li>\n    <li>Use of over-privileged database logins. </li>\n  </ul>\n  <h1>Step 1. Constrain Input</h1>\n  <p>You should validate all input to your ASP.NET applications for type, length, format, and range. By constraining the input used in your data access queries, you can protect your application from SQL injection. </p>\n  <p>\n    <b>Note:</b>&nbsp;When constraining input, it is a good practice to create a list of acceptable characters and use regular expressions to reject any characters that are not on the list. The potential risk associated with using a list of unacceptable characters is that it is always possible to overlook an unacceptable character when defining the list; also, an unacceptable character can be represented in an alternate format to pass validation. </p>\n  <h2>Constrain Input in ASP.NET Web Pages</h2>\n  <p>Start by constraining input in the server-side code for your ASP.NET Web pages. Do not rely on client-side validation because it can be easily bypassed. Use client-side validation only to reduce round trips and to improve the user experience.</p>\n  <p>If you use server controls, use the ASP.NET validator controls, such as the <em>RegularExpressionValidator</em> and <em>RangeValidator</em> controls to constrain input. If you use regular HTML input controls, use the <em>Regex</em> class in your server-side code to constrain input.</p>\n  <p>If in the previous code example, the SSN value is captured by an ASP.NET <em>TextBox</em> control, you can constrain its input by using a <em>RegularExpressionValidator</em> control as shown in the following.</p>\n  <div>\n    <pre>&lt;%@ language=\"C#\" %&gt;<br />&lt;form id=\"form1\" runat=\"server\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;asp:TextBox ID=\"SSN\" runat=\"server\"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;asp:RegularExpressionValidator ID=\"regexpSSN\" runat=\"server\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ErrorMessage=\"Incorrect SSN Number\" <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ControlToValidate=\"SSN\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ValidationExpression=\"^\\d{3}-\\d{2}-\\d{4}$\" /&gt;<br />&lt;/form&gt;  </pre>\n  </div>\n  <p>If the SSN input is from another source, such as an HTML control, a query string parameter, or a cookie, you can constrain it by using the <em>Regex</em> class from the <em>System.Text.RegularExpressions</em> namespace. The following example assumes that the input is obtained from a cookie.</p>\n  <pre>using System.Text.RegularExpressions;</pre>\n  <pre>if (Regex.IsMatch(Request.Cookies[\"SSN\"], \"^\\d{3}-\\d{2}-\\d{4}$\"))<br />{<br />&nbsp;&nbsp;&nbsp; // access the database<br />}<br />else<br />{<br />&nbsp;&nbsp;&nbsp; // handle the bad input<br />}  </pre>\n  <h2>Constrain Input in Data Access Code</h2>\n  <p>In some situations, you need to provide validation in your data access code, perhaps in addition to your ASP.NET page-level validation. Two common situations where you need to provide validation in your data access code are: </p>\n  <ul>\n    <li>\n      <b>Untrusted clients.</b> If the data can come from an untrusted source or you cannot guarantee how well the data has been validated and constrained, add validation logic that constrains input to your data access routines. </li>\n    <li>\n      <b>Library code. </b>If your data access code is packaged as a library designed for use by multiple applications, your data access code should perform its own validation, because you can make no safe assumptions about the client applications. </li>\n  </ul>\n  <p>The following example shows how a data access routine can validate its input parameters by using regular expressions prior to using the parameters in a SQL statement.</p>\n  <div>\n    <pre>using System;<br />using System.Text.RegularExpressions;</pre>\n  </div>\n  <pre>public void CreateNewUserAccount(string name, string password)<br />{<br />&nbsp;&nbsp;&nbsp; // Check name contains only lower case or upper case letters, <br />&nbsp;&nbsp;&nbsp; // the apostrophe, a dot, or white space. Also check it is <br />&nbsp;&nbsp;&nbsp; // between 1 and 40 characters long<br />&nbsp;&nbsp;&nbsp; if ( !Regex.IsMatch(userIDTxt.Text, @\"^[a-zA-Z'./s]{1,40}$\"))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new FormatException(\"Invalid name format\");</pre>\n  <pre>&nbsp;</pre>\n  <pre>&nbsp;&nbsp;&nbsp; // Check password contains at least one digit, one lower case <br />&nbsp;&nbsp;&nbsp; // letter, one uppercase letter, and is between 8 and 10 <br />&nbsp;&nbsp;&nbsp; // characters long<br />&nbsp;&nbsp;&nbsp; if ( !Regex.IsMatch(passwordTxt.Text, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\" ))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new FormatException(\"Invalid password format\");</pre>\n  <pre>&nbsp;</pre>\n  <pre>&nbsp;&nbsp;&nbsp; // Perform data access logic (using type safe parameters)<br />&nbsp;&nbsp;&nbsp; ...<br />}</pre>\n  <h1>Step 2. Use Parameters with Stored Procedures</h1>\n  <p>Using stored procedures does not necessarily prevent SQL injection. The important thing to do is use parameters with stored procedures. If you do not use parameters, your stored procedures can be susceptible to SQL injection if they use unfiltered input as described in the \"Overview\" section of this document.</p>\n  <p>The following code shows how to use <em>SqlParameterCollection</em> when calling a stored procedure.</p>\n  <div>\n    <pre>using System.Data;<br />using System.Data.SqlClient;</pre>\n    <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&nbsp; DataSet userDataset = new DataSet();<br />&nbsp; SqlDataAdapter myCommand = new SqlDataAdapter( <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"LoginStoredProcedure\", connection);<br />&nbsp; myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;<br />&nbsp; myCommand.SelectCommand.Parameters.Add(\"@au_id\", SqlDbType.VarChar, 11);<br />&nbsp; myCommand.SelectCommand.Parameters[\"@au_id\"].Value = SSN.Text;</pre>\n    <pre>&nbsp; myCommand.Fill(userDataset);<br />}  </pre>\n  </div>\n  <p>In this case, the <em>@au_id</em> parameter is treated as a literal value and not as executable code. Also, the parameter is checked for type and length. In the preceding code example, the input value cannot be longer than 11 characters. If the data does not conform to the type or length defined by the parameter, the <em>SqlParameter</em> class throws an exception.</p>\n  <h2>Review Your Application's Use of Parameterized Stored Procedures</h2>\n  <p>Because using stored procedures with parameters does not necessarily prevent SQL injection, you should review your application's use of this type of stored procedure. For example, the following parameterized stored procedure has several security vulnerabilities.</p>\n  <div>\n    <pre>CREATE PROCEDURE dbo.RunQuery <br />@var ntext <br />AS<br />exec sp_executesql @var<br />GO&nbsp; </pre>\n  </div>\n  <p>An application that uses a stored procedure similar to the one in the preceding code example has the following vulnerabilities: </p>\n  <ul>\n    <li>The stored procedure executes whatever statement is passed to it. Consider the <em>@var</em> variable being set to: <div><pre>DROP TABLE ORDERS;  </pre></div><p>In this case, the ORDERS table will be dropped. </p></li>\n    <li>The stored procedure runs with <em>dbo</em> privileges. </li>\n    <li>The stored procedure's name (<em>RunQuery</em>) is a poor choice. If an attacker is able to probe the database, he or she will see the name of the stored procedure. With a name like <em>RunQuery</em>, he can guess that the stored procedure is likely to run the supplied query. </li>\n  </ul>\n  <h1>Step 3. Use Parameters with Dynamic SQL</h1>\n  <p>If you cannot use stored procedures, you should still use parameters when constructing dynamic SQL statements. The following code shows how to use <em>SqlParametersCollection</em> with dynamic SQL.</p>\n  <div>\n    <pre>using System.Data;<br />using System.Data.SqlClient;</pre>\n  </div>\n  <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&nbsp; DataSet userDataset = new DataSet();<br />&nbsp; SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"SELECT au_lname, au_fname FROM Authors WHERE au_id = @au_id\", <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp; myCommand.SelectCommand.Parameters.Add(\"@au_id\", SqlDbType.VarChar, 11);<br />&nbsp; myCommand.SelectCommand.Parameters[\"@au_id\"].Value = SSN.Text;<br />&nbsp; myDataAdapter.Fill(userDataset);<br />}</pre>\n  <h2>Using Parameter Batching</h2>\n  <p>A common misconception is that if you concatenate several SQL statements to send a batch of statements to the server in a single round trip, you cannot use parameters. However, you can use this technique if you make sure that parameter names are not repeated. You can easily do this by making sure that you use unique parameter names during SQL text concatenation, as shown here.</p>\n  <div>\n    <pre>using System.Data;<br />using System.Data.SqlClient;<br />. . .<br />using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&nbsp; SqlDataAdapter dataAdapter = new SqlDataAdapter(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"SELECT CustomerID INTO #Temp1 FROM Customers \" +<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"WHERE CustomerID &gt; @custIDParm; SELECT CompanyName FROM Customers \" +<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"WHERE Country = @countryParm and CustomerID IN \" +<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"(SELECT CustomerID FROM #Temp1);\",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection);<br />&nbsp; SqlParameter custIDParm = dataAdapter.SelectCommand.Parameters.Add(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"@custIDParm\", SqlDbType.NChar, 5);<br />&nbsp; custIDParm.Value = customerID.Text;</pre>\n    <pre>&nbsp; SqlParameter countryParm = dataAdapter.SelectCommand.Parameters.Add(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"@countryParm\", SqlDbType.NVarChar, 15);<br />&nbsp; countryParm.Value = country.Text;</pre>\n    <pre>&nbsp; connection.Open();<br />&nbsp; DataSet dataSet = new DataSet();<br />&nbsp; dataAdapter.Fill(dataSet);<br />}<br />. . .  </pre>\n  </div>\n  <h1>Additional Considerations</h1>\n  <p>Other things to consider when you develop countermeasures to prevent SQL injection include: </p>\n  <ul>\n    <li>Use escape routines to handle special input characters. </li>\n    <li>Use a least-privileged database account. </li>\n    <li>Avoid disclosing error information. </li>\n  </ul>\n  <h2>Use Escape Routines to Handle Special Input Characters</h2>\n  <p>In situations where parameterized SQL cannot be used and you are forced to use dynamic SQL instead, you need to safeguard against input characters that have special meaning to SQL Server (such as the single quote character). If not handled, special characters such as the single quote character in the input can be utilized to cause SQL injection. </p>\n  <p>\n    <b>Note:</b>&nbsp;Special input characters pose a threat only with dynamic SQL and not when using parameterized SQL. </p>\n  <p>Escape routines add an escape character to characters that have special meaning to SQL Server, thereby making them harmless. This is illustrated in the following code fragment:</p>\n  <div>\n    <pre>private string SafeSqlLiteral(string inputSQL)<br />{<br />  return inputSQL.Replace(\"'\", \"''\");<br />}</pre>\n  </div>\n  <h2>Use a Least-Privileged Database Account</h2>\n  <p>Your application should connect to the database by using a least-privileged account. If you use Windows authentication to connect, the Windows account should be least-privileged from an operating system perspective and should have limited privileges and limited ability to access Windows resources. Additionally, whether or not you use Windows authentication or SQL authentication, the corresponding SQL Server login should be restricted by permissions in the database.</p>\n  <p>Consider the example of an ASP.NET application running on Microsoft Windows Server 2003 that accesses a database on a different server in the same domain. By default, the ASP.NET application runs in an application pool that runs under the Network Service account. This account is a least privileged account.</p>\n  <h3>To access SQL Server with the Network Service account </h3>\n  <ol>\n    <li>Create a SQL Server login for the Web server's Network Service account. The Network Service account has network credentials that are presented at the database server as the identity <i>DOMAIN</i>\\<i>WEBSERVERNAME</i>$. For example, if your domain is called XYZ and the Web server is called 123, you create a database login for <em>XYZ\\123$</em>. </li>\n    <li>Grant the new login access to the required database by creating a database user and adding the user to a database role. </li>\n    <li>Establish permissions to let this database role call the required stored procedures or access the required tables in the database. Only grant access to stored procedures the application needs to use, and only grant sufficient access to tables based on the application's minimum requirements. <p>For example, if the ASP.NET application only performs database lookups and does not update any data, you only need to grant read access to the tables. This limits the damage that an attacker can cause if the attacker succeeds in a SQL injection attack. </p></li>\n  </ol>\n  <h2>Avoid Disclosing Error Information</h2>\n  <p>Use structured exception handling to catch errors and prevent them from propagating back to the client. Log detailed error information locally, but return limited error details to the client. </p>\n  <p>If errors occur while the user is connecting to the database, be sure that you provide only limited information about the nature of the error to the user. If you disclose information related to data access and database errors, you could provide a malicious user with useful information that he or she can use to compromise your database security. Attackers use the information in detailed error messages to help deconstruct a SQL query that they are trying to inject with malicious code. A detailed error message may reveal valuable information such as the connection string, SQL server name, or table and database naming conventions.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}