{
  "id": "c3d8d85b-1604-43f4-9384-45c6e0712d4c",
  "checksum": "b57e6cd8382942cf1df442a1cf499e8fcff7beba",
  "words": {
    "0": [
      "pre",
      "pre",
      "pre"
    ],
    "2": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "5": [
      "pre"
    ],
    "9": [
      "pre",
      "pre"
    ],
    "16": [
      "pre",
      "pre"
    ],
    "40": [
      "ul",
      "li"
    ],
    "128": [
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "aspnet": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "this": [
      "p",
      "pre"
    ],
    "code": [
      "p",
      "pre",
      "pre"
    ],
    "sample": [
      "p",
      "p",
      "strong"
    ],
    "is": [
      "p"
    ],
    "demonstrate": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "technique": [
      "p"
    ],
    "securely": [
      "p"
    ],
    "validate": [
      "p",
      "pre"
    ],
    "xml": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "p",
      "strong",
      "title"
    ],
    "payload": [
      "p",
      "ul",
      "li",
      "title"
    ],
    "received": [
      "p"
    ],
    "during": [
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "title"
    ],
    "service": [
      "p",
      "title"
    ],
    "method": [
      "p",
      "p",
      "strong"
    ],
    "call": [
      "p"
    ],
    "using": [
      "p",
      "ul",
      "li"
    ],
    "net.": [
      "p"
    ],
    "objectives": [
      "h1"
    ],
    "mitigate": [
      "ul",
      "li"
    ],
    "data": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "validation": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "title"
    ],
    "induced": [
      "ul",
      "li"
    ],
    "vulnerabilities": [
      "ul",
      "li"
    ],
    "through": [
      "ul",
      "li"
    ],
    "use": [
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "schema": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "title"
    ],
    "which": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "employs": [
      "ul",
      "li"
    ],
    "strong": [
      "ul",
      "li"
    ],
    "regular": [
      "ul",
      "li"
    ],
    "expression": [
      "ul",
      "li"
    ],
    "patterns": [
      "ul",
      "li",
      "p"
    ],
    "on": [
      "ul",
      "li",
      "p",
      "strong",
      "pre"
    ],
    "expected": [
      "ul",
      "li"
    ],
    "improve": [
      "ul",
      "li"
    ],
    "application": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "efficiency": [
      "ul",
      "li"
    ],
    "by": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "first": [
      "ul",
      "li"
    ],
    "requiring": [
      "ul",
      "li"
    ],
    "prior": [
      "ul",
      "li"
    ],
    "executing": [
      "ul",
      "li"
    ],
    "business": [
      "ul",
      "li"
    ],
    "logic": [
      "ul",
      "li"
    ],
    "scenarios": [
      "h1"
    ],
    "component": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "needs": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "access": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "functionality": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "that": [
      "ul",
      "li",
      "pre"
    ],
    "only": [
      "ul",
      "li"
    ],
    "exists": [
      "ul",
      "li"
    ],
    "in": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "different": [
      "ul",
      "li",
      "pre"
    ],
    "runtime": [
      "ul",
      "li"
    ],
    "occasionally": [
      "ul",
      "li"
    ],
    "privileged": [
      "ul",
      "li"
    ],
    "but": [
      "ul",
      "li",
      "pre"
    ],
    "wants": [
      "ul",
      "li"
    ],
    "low-privileged": [
      "ul",
      "li"
    ],
    "security": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "context": [
      "ul",
      "li"
    ],
    "for": [
      "ul",
      "li",
      "p",
      "strong",
      "pre"
    ],
    "enhanced": [
      "ul",
      "li"
    ],
    "overall": [
      "ul",
      "li"
    ],
    "solution": [
      "h1"
    ],
    "example": [
      "h1"
    ],
    "custom": [
      "p",
      "strong",
      "p",
      "strong"
    ],
    "performing": [
      "p",
      "strong"
    ],
    "some": [
      "p",
      "strong"
    ],
    "action": [
      "p",
      "strong"
    ],
    "an": [
      "p",
      "strong",
      "pre",
      "pre"
    ],
    "string": [
      "p",
      "strong",
      "pre",
      "pre",
      "pre"
    ],
    "blob": [
      "p",
      "strong"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "following": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "private": [
      "pre",
      "pre"
    ],
    "members": [
      "pre"
    ],
    "must": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "be": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "defined": [
      "pre",
      "p",
      "strong"
    ],
    "exampleprivate": [
      "pre"
    ],
    "int": [
      "pre"
    ],
    "validationerrcnt": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "lasterror": [
      "pre",
      "pre",
      "pre"
    ],
    "\"\"[webmethod]public": [
      "pre"
    ],
    "bool": [
      "pre",
      "pre"
    ],
    "processvaluestring": [
      "pre"
    ],
    "strxml{": [
      "pre"
    ],
    "connectionstring": [
      "pre"
    ],
    "\"initial": [
      "pre"
    ],
    "catalog=snippetsdata": [
      "pre"
    ],
    "source=winxp\\\\sqlexpressintegrated": [
      "pre"
    ],
    "security=sspi\";": [
      "pre"
    ],
    "sqlconnection": [
      "pre"
    ],
    "cn": [
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sqlconnectionconnectionstring);": [
      "pre"
    ],
    "retval": [
      "pre",
      "pre"
    ],
    "false": [
      "pre"
    ],
    "try": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "create": [
      "pre",
      "pre",
      "pre"
    ],
    "xmlreadersettings": [
      "pre",
      "pre"
    ],
    "object": [
      "pre"
    ],
    "since": [
      "pre",
      "pre"
    ],
    "we'll": [
      "pre",
      "pre",
      "pre"
    ],
    "need": [
      "pre"
    ],
    "add": [
      "pre"
    ],
    "our": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "it": [
      "pre"
    ],
    "xrs": [
      "pre"
    ],
    "xmlreadersettings);": [
      "pre"
    ],
    "set": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "document": [
      "pre",
      "pre",
      "pre"
    ],
    "against": [
      "pre",
      "pre"
    ],
    "xmlschemaset": [
      "pre"
    ],
    "xset": [
      "pre"
    ],
    "xmlschemaset);": [
      "pre"
    ],
    "read": [
      "pre"
    ],
    "under": [
      "pre"
    ],
    "root": [
      "pre"
    ],
    "xmlreader": [
      "pre",
      "pre"
    ],
    "xmlschemareader": [
      "pre"
    ],
    "xmltextreaderhttpcontext.current.request.physicalapplicationpath": [
      "pre"
    ],
    "+": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"\\\\xsd\\\\userschemaxsd\");": [
      "pre"
    ],
    "attribute": [
      "pre"
    ],
    "with": [
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "pre"
    ],
    "xsetadd(null,": [
      "pre"
    ],
    "xmlschemareader;": [
      "pre"
    ],
    "finally": [
      "pre"
    ],
    "attach": [
      "pre"
    ],
    "reader": [
      "pre",
      "pre",
      "pre"
    ],
    "settings": [
      "pre",
      "pre"
    ],
    "xrsschemas.add(xset);": [
      "pre"
    ],
    "we": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "define": [
      "pre"
    ],
    "event": [
      "pre",
      "pre",
      "p",
      "strong"
    ],
    "handler": [
      "pre",
      "p",
      "strong"
    ],
    "xrsvalidationeventhandler": [
      "pre"
    ],
    "+=": [
      "pre"
    ],
    "validationeventhandlervalidationeventhandler);": [
      "pre"
    ],
    "want": [
      "pre"
    ],
    "report": [
      "pre"
    ],
    "warnings": [
      "pre",
      "pre"
    ],
    "as": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "well": [
      "pre"
    ],
    "errors": [
      "pre",
      "pre",
      "pre"
    ],
    "xrsvalidationflags": [
      "pre",
      "pre"
    ],
    "|": [
      "pre"
    ],
    "xmlschemavalidationflagsreportvalidationwarnings;": [
      "pre"
    ],
    "type": [
      "pre",
      "pre"
    ],
    "should": [
      "pre"
    ],
    "so": [
      "pre",
      "pre"
    ],
    "enforce": [
      "pre"
    ],
    "xrsvalidationtype": [
      "pre"
    ],
    "validationtypeschema;": [
      "pre"
    ],
    "and": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "associate": [
      "pre"
    ],
    "stringreader": [
      "pre"
    ],
    "sreader": [
      "pre"
    ],
    "stringreaderstrxml);": [
      "pre"
    ],
    "xmlread": [
      "pre"
    ],
    "xmlreadercreate(sreader,": [
      "pre"
    ],
    "xrs;": [
      "pre"
    ],
    "lastly": [
      "pre"
    ],
    "load": [
      "pre"
    ],
    "forces": [
      "pre"
    ],
    "performed": [
      "pre"
    ],
    "process": [
      "pre",
      "pre"
    ],
    "xmldocument": [
      "pre"
    ],
    "xmldoc": [
      "pre"
    ],
    "xmldocument);": [
      "pre"
    ],
    "xmldocload(xmlread);": [
      "pre"
    ],
    "if": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "returns": [
      "pre"
    ],
    "throw": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "exception": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "last": [
      "pre"
    ],
    "error": [
      "pre",
      "pre"
    ],
    "message": [
      "pre"
    ],
    "failed": [
      "pre"
    ],
    "encountered": [
      "pre"
    ],
    "while": [
      "pre"
    ],
    "validating": [
      "pre",
      "pre"
    ],
    "exceptionlasterror);": [
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre"
    ],
    "passed": [
      "pre"
    ],
    "otherwise": [
      "pre"
    ],
    "request": [
      "pre"
    ],
    "normal": [
      "pre"
    ],
    "sqlcommand": [
      "pre"
    ],
    "sqlcmd": [
      "pre"
    ],
    "sqlcommand\"xmlvalidationsample\",cn);": [
      "pre"
    ],
    "sqlparameter": [
      "pre",
      "pre"
    ],
    "sqlparam": [
      "pre"
    ],
    "sqlparameter\"@strxml\",": [
      "pre"
    ],
    "sqldbtypevarchar,": [
      "pre"
    ],
    "strxmllength);": [
      "pre"
    ],
    "outparam": [
      "pre"
    ],
    "sqlparameter\"@retval\",": [
      "pre"
    ],
    "sqldbtypeint);": [
      "pre"
    ],
    "outparamdirection": [
      "pre"
    ],
    "parameterdirectionreturnvalue;": [
      "pre"
    ],
    "sqlparamvalue": [
      "pre"
    ],
    "strxml": [
      "pre"
    ],
    "sqlcmdcommandtype": [
      "pre"
    ],
    "commandtypestoredprocedure;": [
      "pre"
    ],
    "sqlcmdparameters.add(sqlparam);": [
      "pre"
    ],
    "sqlcmdparameters.add(outparam);": [
      "pre"
    ],
    "cnopen();": [
      "pre"
    ],
    "sqlcmdexecutenonquery();": [
      "pre"
    ],
    "converttoint16(outparam.value)": [
      "pre"
    ],
    "true": [
      "pre"
    ],
    "catch": [
      "pre"
    ],
    "ex": [
      "pre"
    ],
    "replace": [
      "pre"
    ],
    "user": [
      "pre"
    ],
    "supplied": [
      "pre"
    ],
    "handling": [
      "pre",
      "pre"
    ],
    "log": [
      "pre"
    ],
    "perform": [
      "pre",
      "title"
    ],
    "graceful": [
      "pre"
    ],
    "exception\"error": [
      "pre"
    ],
    "\"": [
      "pre",
      "pre",
      "pre"
    ],
    "exmessage);": [
      "pre"
    ],
    "finally{": [
      "pre"
    ],
    "cnclose();": [
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "result": [
      "pre"
    ],
    "retval}": [
      "pre"
    ],
    "\\\\xsd\\\\userschemaxsd": [
      "a"
    ],
    "void": [
      "pre"
    ],
    "validationeventhandlerobject": [
      "pre"
    ],
    "sender": [
      "pre"
    ],
    "systemxml.schema.validationeventargs": [
      "pre"
    ],
    "args{": [
      "pre"
    ],
    "validationerrcnt++": [
      "pre"
    ],
    "args.severity.equals(xmlseveritytype.warning))": [
      "pre"
    ],
    "\"warning": [
      "pre"
    ],
    "argsmessage;": [
      "pre",
      "pre"
    ],
    "args.severity.equals(xmlseveritytype.error))": [
      "pre"
    ],
    "\"error": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "pattern": [
      "p",
      "strong",
      "pre"
    ],
    "match": [
      "p",
      "strong",
      "pre"
    ],
    "validators": [
      "p",
      "strong"
    ],
    "?xml": [
      "pre"
    ],
    "version=\"10\"": [
      "pre"
    ],
    "encoding=\"utf-8\"?<xs:schema": [
      "pre"
    ],
    "id=\"userschema\"": [
      "pre"
    ],
    "targetnamespace=\"http//tempuri.org/xmlschema.xsd\"": [
      "pre"
    ],
    "elementformdefault=\"qualified\"": [
      "pre"
    ],
    "xmlns=\"http//tempuri.org/xmlschema.xsd\"": [
      "pre"
    ],
    "xmlnsmstns=\"http://tempuri.org/xmlschema.xsd\"": [
      "pre"
    ],
    "xmlnsxs=\"http://www.w3.org/2001/xmlschema\">": [
      "pre"
    ],
    "xs:element": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "name=\"users\"": [
      "pre"
    ],
    "xs:complextype>": [
      "pre",
      "pre"
    ],
    "xs:sequence>": [
      "pre",
      "pre"
    ],
    "minoccurs=\"1\"": [
      "pre"
    ],
    "maxoccurs=\"100\"": [
      "pre"
    ],
    "name=\"user\"": [
      "pre"
    ],
    "name=\"username\"": [
      "pre"
    ],
    "type=\"usernamestring\"": [
      "pre"
    ],
    "/": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "name=\"password\"": [
      "pre"
    ],
    "type=\"passwordstring\"": [
      "pre"
    ],
    "name=\"name\"": [
      "pre"
    ],
    "type=\"namestring\"": [
      "pre",
      "pre"
    ],
    "maxoccurs=\"2\"": [
      "pre"
    ],
    "name=\"streetaddress\"": [
      "pre"
    ],
    "type=\"addressstring\"": [
      "pre"
    ],
    "name=\"city\"": [
      "pre"
    ],
    "name=\"state\"": [
      "pre"
    ],
    "type=\"statevalue\"": [
      "pre"
    ],
    "name=\"postalcode\"": [
      "pre"
    ],
    "type=\"postalstring\"": [
      "pre"
    ],
    "name=\"phone\"": [
      "pre"
    ],
    "type=\"phonestring\"": [
      "pre"
    ],
    "name=\"ssn\"": [
      "pre"
    ],
    "type=\"ssnstring\"": [
      "pre"
    ],
    "name=\"emailaddress\"": [
      "pre"
    ],
    "type=\"emailstring\"": [
      "pre"
    ],
    "minoccurs=\"0\"": [
      "pre"
    ],
    "name=\"url\"": [
      "pre"
    ],
    "type=\"xsanyuri\"": [
      "pre"
    ],
    "/xs:sequence>": [
      "pre",
      "pre"
    ],
    "/xs:complextype>": [
      "pre",
      "pre"
    ],
    "/xs:element>": [
      "pre",
      "pre"
    ],
    "xs:simpletype": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "name=\"usernamestring\"": [
      "pre"
    ],
    "xs:restriction": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "base=\"xsstring\">": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "!--": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "allows": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "word": [
      "pre",
      "pre",
      "pre"
    ],
    "characters": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "a-za-z0-9_],": [
      "pre",
      "pre"
    ],
    "single": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "quote": [
      "pre",
      "pre"
    ],
    "dash": [
      "pre",
      "pre"
    ],
    "period": [
      "pre",
      "pre",
      "pre"
    ],
    "at": [
      "pre",
      "pre",
      "pre"
    ],
    "least": [
      "pre",
      "pre",
      "pre"
    ],
    "two": [
      "pre",
      "pre"
    ],
    "long": [
      "pre",
      "pre",
      "pre"
    ],
    "less": [
      "pre",
      "pre"
    ],
    "than": [
      "pre",
      "pre",
      "pre"
    ],
    "--": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "xs:minlength": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "value=\"2\"": [
      "pre",
      "pre",
      "pre"
    ],
    "xs:maxlength": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "value=\"16\"": [
      "pre",
      "pre"
    ],
    "xs:pattern": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "value=\"^\\w-'\\.]{2,16}$\"": [
      "pre"
    ],
    "/xs:restriction>": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "/xs:simpletype>": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "name=\"passwordstring\"": [
      "pre"
    ],
    "value=\"8\"": [
      "pre"
    ],
    "value=\"^*(?=.*\\d)(?=.*[a-z])(?=.*[a-z])(?=.*\t\t\t[`~!@#\\$%\\^\\&\\*\\(\\)-_\\=\\+\\[\\{\\]\\}\\\\\\|;:',<\\.>/?]).*$\"": [
      "pre"
    ],
    "name=\"namestring\"": [
      "pre"
    ],
    "names": [
      "pre"
    ],
    "no": [
      "pre"
    ],
    "more": [
      "pre"
    ],
    "consist": [
      "pre",
      "pre",
      "pre"
    ],
    "alphabetic": [
      "pre"
    ],
    "may": [
      "pre",
      "pre"
    ],
    "contain": [
      "pre",
      "pre",
      "pre"
    ],
    "hyphens": [
      "pre",
      "pre",
      "pre"
    ],
    "quotes": [
      "pre"
    ],
    "periods": [
      "pre"
    ],
    "spaces": [
      "pre"
    ],
    "value=\"128\"": [
      "pre"
    ],
    "value=\"^a-za-z-'\\.\\s]{2,128}$\"": [
      "pre"
    ],
    "name=\"addressstring\"": [
      "pre"
    ],
    "many": [
      "pre"
    ],
    "types": [
      "pre",
      "pre"
    ],
    "address": [
      "pre",
      "pre"
    ],
    "formats": [
      "pre",
      "pre"
    ],
    "do": [
      "pre"
    ],
    "series": [
      "pre",
      "pre"
    ],
    "digits": [
      "pre",
      "pre"
    ],
    "potentially": [
      "pre",
      "pre"
    ],
    "containing": [
      "pre"
    ],
    "punctuation": [
      "pre"
    ],
    "followed": [
      "pre",
      "pre",
      "pre"
    ],
    "representing": [
      "pre"
    ],
    "street": [
      "pre",
      "pre"
    ],
    "name": [
      "pre",
      "pre"
    ],
    "then": [
      "pre"
    ],
    "unit": [
      "pre"
    ],
    "number": [
      "pre",
      "pre"
    ],
    "value=\"^\\d{13}.?\\d{0,3}\\s[a-za-z]{2,30}(\\s[a-za-z]{2,15})?([#\\.0-9a-za-z]*)?$\"": [
      "pre"
    ],
    "name=\"statevalue\"": [
      "pre"
    ],
    "states": [
      "pre"
    ],
    "one": [
      "pre"
    ],
    "predefined": [
      "pre"
    ],
    "enumeration": [
      "pre"
    ],
    "exactly": [
      "pre"
    ],
    "xs:length": [
      "pre"
    ],
    "xs:enumeration": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "value=\"al\"": [
      "pre"
    ],
    "value=\"ak\"": [
      "pre"
    ],
    "value=\"ar\"": [
      "pre"
    ],
    "value=\"az\"": [
      "pre"
    ],
    "value=\"ca\"": [
      "pre"
    ],
    "value=\"co\"": [
      "pre"
    ],
    "value=\"ct\"": [
      "pre"
    ],
    "value=\"de\"": [
      "pre"
    ],
    "value=\"dc\"": [
      "pre"
    ],
    "value=\"fl\"": [
      "pre"
    ],
    "value=\"ga\"": [
      "pre"
    ],
    "value=\"hi\"": [
      "pre"
    ],
    "value=\"id\"": [
      "pre"
    ],
    "value=\"il\"": [
      "pre"
    ],
    "value=\"in\"": [
      "pre"
    ],
    "value=\"ia\"": [
      "pre"
    ],
    "value=\"ks\"": [
      "pre"
    ],
    "value=\"ky\"": [
      "pre"
    ],
    "value=\"la\"": [
      "pre"
    ],
    "value=\"me\"": [
      "pre"
    ],
    "value=\"md\"": [
      "pre"
    ],
    "value=\"ma\"": [
      "pre"
    ],
    "value=\"mi\"": [
      "pre"
    ],
    "value=\"mn\"": [
      "pre"
    ],
    "value=\"ms\"": [
      "pre"
    ],
    "value=\"mo\"": [
      "pre"
    ],
    "value=\"mt\"": [
      "pre"
    ],
    "value=\"ne\"": [
      "pre"
    ],
    "value=\"nv\"": [
      "pre"
    ],
    "value=\"nh\"": [
      "pre"
    ],
    "value=\"nj\"": [
      "pre"
    ],
    "value=\"nm\"": [
      "pre"
    ],
    "value=\"ny\"": [
      "pre"
    ],
    "value=\"nc\"": [
      "pre"
    ],
    "value=\"nd\"": [
      "pre"
    ],
    "value=\"oh\"": [
      "pre"
    ],
    "value=\"ok\"": [
      "pre"
    ],
    "value=\"or\"": [
      "pre"
    ],
    "value=\"pa\"": [
      "pre"
    ],
    "value=\"ri\"": [
      "pre"
    ],
    "value=\"sc\"": [
      "pre"
    ],
    "value=\"sd\"": [
      "pre"
    ],
    "value=\"tn\"": [
      "pre"
    ],
    "value=\"tx\"": [
      "pre"
    ],
    "value=\"ut\"": [
      "pre"
    ],
    "value=\"vt\"": [
      "pre"
    ],
    "value=\"va\"": [
      "pre"
    ],
    "value=\"wa\"": [
      "pre"
    ],
    "value=\"wv\"": [
      "pre"
    ],
    "value=\"wi\"": [
      "pre"
    ],
    "value=\"wy\"": [
      "pre"
    ],
    "name=\"postalstring\"": [
      "pre"
    ],
    "us": [
      "pre",
      "pre"
    ],
    "postal": [
      "pre"
    ],
    "format": [
      "pre"
    ],
    "zip": [
      "pre"
    ],
    "digit": [
      "pre"
    ],
    "or": [
      "pre",
      "pre"
    ],
    "zip+4": [
      "pre"
    ],
    "separated": [
      "pre"
    ],
    "value=\"^\\d{5}-]?(\\d{4})?$\"": [
      "pre"
    ],
    "value=\"5\"": [
      "pre"
    ],
    "value=\"10\"": [
      "pre",
      "pre"
    ],
    "name=\"ssnstring\"": [
      "pre"
    ],
    "ssns": [
      "pre"
    ],
    "optional": [
      "pre"
    ],
    "value=\"9\"": [
      "pre"
    ],
    "value=\"11\"": [
      "pre"
    ],
    "value=\"^\\d{3}-]?\\d{2}[-]?\\d{4}$$\"": [
      "pre"
    ],
    "name=\"phonestring\"": [
      "pre"
    ],
    "defines": [
      "pre"
    ],
    "formatted": [
      "pre"
    ],
    "telephone": [
      "pre"
    ],
    "value=\"^01]?[-": [
      "pre"
    ],
    "]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[-": [
      "pre"
    ],
    "]?\\d{3}[-": [
      "pre"
    ],
    "]?\\d{4}$\"": [
      "pre"
    ],
    "value=\"32\"": [
      "pre"
    ],
    "name=\"emailstring\"": [
      "pre"
    ],
    "common": [
      "pre"
    ],
    "email": [
      "pre"
    ],
    "can": [
      "pre"
    ],
    "start": [
      "pre"
    ],
    "alphanumeric": [
      "pre"
    ],
    "char": [
      "pre"
    ],
    "hyphen": [
      "pre"
    ],
    "domain": [
      "pre"
    ],
    "meeting": [
      "pre"
    ],
    "same": [
      "pre"
    ],
    "criteria": [
      "pre"
    ],
    "alpha": [
      "pre"
    ],
    "suffix": [
      "pre"
    ],
    "between": [
      "pre"
    ],
    "character": [
      "pre"
    ],
    "value=\"^[0-9a-za-z]([-.\\w]*[0-9a-za-z])*@([0-9a-za-z][-\\w]*[0-9a-za-z]\\.)+[a-za-z]{2,9})$\"": [
      "pre"
    ],
    "value=\"7\"": [
      "pre"
    ],
    "value=\"256\"": [
      "pre"
    ],
    "/xs:simpletype></xs:schema>": [
      "pre"
    ],
    "http//tempuri.org/xmlschema.xsd": [
      "a",
      "a",
      "a"
    ],
    "http//www.w3.org/2001/xmlschema": [
      "a"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Objectives",
      "Scenarios",
      "Solution Example"
    ],
    "ul": [
      "ASP.NET 4.0",
      "Mitigate data validation induced vulnerabilities through use of XML schema validation which employs strong validation using regular expression patterns on expected data. \n    Improve application efficiency by first requiring validation of XML payload prior to executing business logic.",
      "Application component needs to access functionality that only exists in a different runtime component. \n    Application occasionally needs access to privileged functionality but wants to use a low-privileged security context for enhanced overall security."
    ],
    "li": [
      "ASP.NET 4.0",
      "Mitigate data validation induced vulnerabilities through use of XML schema validation which employs strong validation using regular expression patterns on expected data.",
      "Improve application efficiency by first requiring validation of XML payload prior to executing business logic.",
      "Application component needs to access functionality that only exists in a different runtime component.",
      "Application occasionally needs access to privileged functionality but wants to use a low-privileged security context for enhanced overall security."
    ],
    "p": [
      "The purpose of this code sample is to demonstrate a technique to securely validate the XML payload received during a web service web method call using .NET.",
      "Custom Web method for performing some action on an XML String Blob",
      "Custom Defined XML Validation Event Handler",
      "Sample XML Schema with pattern match validators",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "strong": [
      "Custom Web method for performing some action on an XML String Blob",
      "Custom Defined XML Validation Event Handler",
      "Sample XML Schema with pattern match validators"
    ],
    "pre": [
      "// The following private members must be defined for this exampleprivate int validationErrCnt = 0;        private string lastError = \"\";[WebMethod]public bool ProcessValue(string strXML){    string connectionString =     \"Initial Catalog=snippets;Data Source=winxp\\\\sqlexpress;Integrated Security=SSPI;\";    SqlConnection cn = New SqlConnection(connectionString);    bool retval = false;    try {        // Create an XmlReaderSettings object since  we'll need to add our schema to it        XmlReaderSettings xrs = new XmlReaderSettings();        // Create a schema set which we'll use to validate our XML Document against        XmlSchemaSet xset = new XmlSchemaSet();        // Read in our schema under the web root.        XmlReader xmlschemareader =          new XmlTextReader(HttpContext.Current.Request.PhysicalApplicationPath + \"\\\\xsd\\\\Userschema.xsd\");        // Attribute the XML schema with our schema set        xset.Add(null, xmlschemareader);        // Finally attach our XML schema set to the reader settings        xrs.Schemas.Add(xset);        // We define a Validation Event Handler        xrs.ValidationEventHandler += new ValidationEventHandler(ValidationEventHandler);        // We want to report warnings as well as errors        xrs.ValidationFlags = xrs.ValidationFlags | XmlSchemaValidationFlags.ReportValidationWarnings;        // Our validation type should be set to schema so we enforce the schema on the document        xrs.ValidationType = ValidationType.Schema;        // Create our XML reader and associate our reader settings        StringReader sreader = new StringReader(strXML);        XmlReader xmlread = XmlReader.Create(sreader, xrs);        // Lastly load the document which forces a schema validation to be performed in the process        XmlDocument xmldoc = new XmlDocument();        xmldoc.Load(xmlread);        // If our event returns errors (and warnings) throw a new exception with our last error as the message        if (validationErrCnt > 0)        {            // FAILED VALIDATION: If we encountered errors while validating the XML            throw new Exception(lastError);        }        else        {            // PASSED VALIDATION: Otherwise process our request as normal            SqlCommand sqlcmd = new SqlCommand(\"XMLValidationSample\",cn);            SqlParameter sqlparam = new SqlParameter(\"@strxml\", SqlDbType.VarChar, strXML.Length);            SqlParameter outparam = new SqlParameter(\"@retval\", SqlDbType.Int);            outparam.Direction = ParameterDirection.ReturnValue;            sqlparam.Value = strXML;            sqlcmd.CommandType = CommandType.StoredProcedure;            sqlcmd.Parameters.Add(sqlparam);            sqlcmd.Parameters.Add(outparam);            cn.Open();            sqlcmd.ExecuteNonQuery();            if( Convert.ToInt16(outparam.Value) > 0)            {                retval = true;            }        }     }    catch (Exception ex)    {        // Replace following throw with User supplied exception handling code:         //  Log exception and perform graceful error handling        throw new Exception(\"Error validating XML: \" + ex.Message);    }    finally{        cn.Close();    }    // return result    return retval;}",
      "void ValidationEventHandler(object sender, System.Xml.Schema.ValidationEventArgs args){    validationErrCnt++;    if (args.Severity.Equals(XmlSeverityType.Warning))    {        lastError = \"Warning: \" + args.Message;    }    else if (args.Severity.Equals(XmlSeverityType.Error))    {       lastError = \"Error: \" + args.Message;    }}",
      "<?xml version=\"1.0\" encoding=\"utf-8\"?><xs:schema id=\"UserSchema\" targetNamespace=\"http://tempuri.org/XMLSchema.xsd\" \telementFormDefault=\"qualified\" xmlns=\"http://tempuri.org/XMLSchema.xsd\"\t xmlns:mstns=\"http://tempuri.org/XMLSchema.xsd\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">          <xs:element name=\"Users\">            <xs:complexType>              <xs:sequence>                <xs:element minOccurs=\"1\" maxOccurs=\"100\" name=\"User\">          <xs:complexType>            <xs:sequence>              <xs:element name=\"username\" type=\"usernamestring\" />              <xs:element name=\"password\" type=\"passwordstring\" />              <xs:element name=\"name\" type=\"namestring\" />              <xs:element maxOccurs=\"2\" name=\"streetaddress\" type=\"addressstring\" />              <xs:element name=\"city\" type=\"namestring\" />              <xs:element name=\"state\" type=\"statevalue\" />              <xs:element name=\"postalcode\" type=\"postalstring\" />              <xs:element name=\"phone\" type=\"phonestring\" />              <xs:element name=\"ssn\" type=\"ssnstring\" />              <xs:element name=\"emailaddress\" type=\"emailstring\" />              <xs:element minOccurs=\"0\" name=\"url\" type=\"xs:anyURI\" />            </xs:sequence>          </xs:complexType>        </xs:element>      </xs:sequence>    </xs:complexType>  </xs:element>  <xs:simpleType name=\"usernamestring\">    <xs:restriction base=\"xs:string\">      <!-- Allows word characters [A-Za-z0-9_], single quote, dash and period           must be at least two characters long and less than 16 -->      <xs:minLength value=\"2\" />      <xs:maxLength value=\"16\" />      <xs:pattern value=\"^[\\w-'\\.]{2,16}$\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"passwordstring\">    <xs:restriction base=\"xs:string\">      <!-- Allows word characters [A-Za-z0-9_], single quote, dash and period           must be at least two characters long and less than 16 -->      <xs:minLength value=\"8\" />      <xs:maxLength value=\"16\" />      <xs:pattern value=\"^.*(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\t\t\t[`~!@#\\$%\\^\\&\\*\\(\\)-_\\=\\+\\[\\{\\]\\}\\\\\\|;:',<\\.>/?]).*$\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"namestring\">    <xs:restriction base=\"xs:string\">      <!-- Names must be at least 2 characters, no more than 128 characters, and consist of   alphabetic characters, and may contain hyphens, single quotes, periods and spaces -->      <xs:minLength value=\"2\" />      <xs:maxLength value=\"128\" />      <xs:pattern value=\"^[a-zA-Z-'\\.\\s]{2,128}$\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"addressstring\">    <xs:restriction base=\"xs:string\">      <!-- Since so many different types of address formats we'll do a match against a series    of digits (potentially containing punctuation, followed by a series of characters    representing the street name and then potentially a type of street and unit number -->      <xs:pattern value=\"^\\d{1,3}.?\\d{0,3}\\s[a-zA-Z]{2,30}(\\s[a-zA-Z]{2,15})?([#\\.0-9a-zA-Z]*)?$\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"statevalue\">    <xs:restriction base=\"xs:string\">      <!-- States must be one of our predefined enumeration types and consist of exactly 2 characters -->      <xs:length value=\"2\" />      <xs:enumeration value=\"AL\" />      <xs:enumeration value=\"AK\" />      <xs:enumeration value=\"AR\" />      <xs:enumeration value=\"AZ\" />      <xs:enumeration value=\"CA\" />      <xs:enumeration value=\"CO\" />      <xs:enumeration value=\"CT\" />      <xs:enumeration value=\"DE\" />      <xs:enumeration value=\"DC\" />      <xs:enumeration value=\"FL\" />      <xs:enumeration value=\"GA\" />      <xs:enumeration value=\"HI\" />      <xs:enumeration value=\"ID\" />      <xs:enumeration value=\"IL\" />      <xs:enumeration value=\"IN\" />      <xs:enumeration value=\"IA\" />      <xs:enumeration value=\"KS\" />      <xs:enumeration value=\"KY\" />      <xs:enumeration value=\"LA\" />      <xs:enumeration value=\"ME\" />      <xs:enumeration value=\"MD\" />      <xs:enumeration value=\"MA\" />      <xs:enumeration value=\"MI\" />      <xs:enumeration value=\"MN\" />      <xs:enumeration value=\"MS\" />      <xs:enumeration value=\"MO\" />      <xs:enumeration value=\"MT\" />      <xs:enumeration value=\"NE\" />      <xs:enumeration value=\"NV\" />      <xs:enumeration value=\"NH\" />      <xs:enumeration value=\"NJ\" />      <xs:enumeration value=\"NM\" />      <xs:enumeration value=\"NY\" />      <xs:enumeration value=\"NC\" />      <xs:enumeration value=\"ND\" />      <xs:enumeration value=\"OH\" />      <xs:enumeration value=\"OK\" />      <xs:enumeration value=\"OR\" />      <xs:enumeration value=\"PA\" />      <xs:enumeration value=\"RI\" />      <xs:enumeration value=\"SC\" />      <xs:enumeration value=\"SD\" />      <xs:enumeration value=\"TN\" />      <xs:enumeration value=\"TX\" />      <xs:enumeration value=\"UT\" />      <xs:enumeration value=\"VT\" />      <xs:enumeration value=\"VA\" />      <xs:enumeration value=\"WA\" />      <xs:enumeration value=\"WV\" />      <xs:enumeration value=\"WI\" />      <xs:enumeration value=\"WY\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"postalstring\">    <xs:restriction base=\"xs:string\">      <!-- The following US postal code format allows ZIP (5 digit) or ZIP+4 formats   as a single string or separated by hyphens -->      <xs:pattern value=\"^\\d{5}[-]?(\\d{4})?$\" />      <xs:minLength value=\"5\" />      <xs:maxLength value=\"10\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"ssnstring\">    <xs:restriction base=\"xs:string\">      <!-- SSNs consist of 9 digits but may contain an optional 2 hyphens -->      <xs:minLength value=\"9\" />      <xs:maxLength value=\"11\" />      <xs:pattern value=\"^\\d{3}[-]?\\d{2}[-]?\\d{4}$$\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"phonestring\">    <xs:restriction base=\"xs:string\">      <!-- The following pattern defines a US formatted telephone number -->      <xs:pattern value=\"^[01]?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$\" />      <xs:minLength value=\"10\" />      <xs:maxLength value=\"32\" />    </xs:restriction>  </xs:simpleType>  <xs:simpleType name=\"emailstring\">    <xs:restriction base=\"xs:string\">    <!-- Allows common email address that can start with a alphanumeric char and contain word,       hyphen and period characters followed by a domain name meeting the same criteria followed       by a alpha suffix between 2 and 9 character long -->      <xs:pattern value=\"^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$\" />      <xs:minLength value=\"7\" />      <xs:maxLength value=\"256\" />    </xs:restriction>  </xs:simpleType></xs:schema>"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "\\\\xsd\\\\Userschema.xsd",
      "http://tempuri.org/XMLSchema.xsd",
      "http://tempuri.org/XMLSchema.xsd",
      "http://tempuri.org/XMLSchema.xsd",
      "http://www.w3.org/2001/XMLSchema"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "file://xsd//Userschema.xsd",
      "text": "\\\\xsd\\\\Userschema.xsd"
    },
    {
      "href": "http://tempuri.org/XMLSchema.xsd",
      "text": "http://tempuri.org/XMLSchema.xsd"
    },
    {
      "href": "http://tempuri.org/XMLSchema.xsd",
      "text": "http://tempuri.org/XMLSchema.xsd"
    },
    {
      "href": "http://tempuri.org/XMLSchema.xsd",
      "text": "http://tempuri.org/XMLSchema.xsd"
    },
    {
      "href": "http://www.w3.org/2001/XMLSchema",
      "text": "http://www.w3.org/2001/XMLSchema"
    }
  ],
  "html": "<h1>Applies To</h1>\n  <ul>\n    <li>ASP.NET 4.0</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>The purpose of this code sample is to demonstrate a technique to securely validate the XML payload received during a web service web method call using .NET.</p>\n  <h1>Objectives</h1>\n  <ul>\n    <li>Mitigate data validation induced vulnerabilities through use of XML schema validation which employs strong validation using regular expression patterns on expected data. </li>\n    <li>Improve application efficiency by first requiring validation of XML payload prior to executing business logic.</li>\n  </ul>\n  <h1>Scenarios</h1>\n  <ul>\n    <li>Application component needs to access functionality that only exists in a different runtime component. </li>\n    <li>Application occasionally needs access to privileged functionality but wants to use a low-privileged security context for enhanced overall security.</li>\n  </ul>\n  <h1>Solution Example</h1>\n  <p>\n    <strong>Custom Web method for performing some action on an XML String Blob</strong>\n  </p>\n  <pre>// The following private members must be defined for this example<br />private int validationErrCnt = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />private string lastError = \"\";<br /><br />[WebMethod]<br />public bool ProcessValue(string strXML)<br />{<br />&nbsp;&nbsp;&nbsp; string connectionString =<br />     \"Initial Catalog=snippets;Data Source=winxp\\\\sqlexpress;Integrated Security=SSPI;\";<br />&nbsp;&nbsp;&nbsp; SqlConnection cn = New SqlConnection(connectionString);<br />&nbsp;&nbsp;&nbsp; bool retval = false;<br /><br />&nbsp;&nbsp;&nbsp; try {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an XmlReaderSettings object since&nbsp; we'll need to add our schema to it<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlReaderSettings xrs = new XmlReaderSettings();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a schema set which we'll use to validate our XML Document against<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlSchemaSet xset = new XmlSchemaSet();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Read in our schema under the web root.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlReader xmlschemareader =<br />          new XmlTextReader(HttpContext.Current.Request.PhysicalApplicationPath + \"<a href=\"file://xsd//Userschema.xsd\">\\\\xsd\\\\Userschema.xsd</a>\");<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Attribute the XML schema with our schema set<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xset.Add(null, xmlschemareader);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Finally attach our XML schema set to the reader settings<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.Schemas.Add(xset);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We define a Validation Event Handler<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.ValidationEventHandler += new ValidationEventHandler(ValidationEventHandler);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We want to report warnings as well as errors<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.ValidationFlags = xrs.ValidationFlags | XmlSchemaValidationFlags.ReportValidationWarnings;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Our validation type should be set to schema so we enforce the schema on the document<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xrs.ValidationType = ValidationType.Schema;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create our XML reader and associate our reader settings<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringReader sreader = new StringReader(strXML);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlReader xmlread = XmlReader.Create(sreader, xrs);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Lastly load the document which forces a schema validation to be performed in the process<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XmlDocument xmldoc = new XmlDocument();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmldoc.Load(xmlread);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If our event returns errors (and warnings) throw a new exception with our last error as the message<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (validationErrCnt &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // FAILED VALIDATION: If we encountered errors while validating the XML<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception(lastError);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // PASSED VALIDATION: Otherwise process our request as normal<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlcmd = new SqlCommand(\"XMLValidationSample\",cn);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter sqlparam = new SqlParameter(\"@strxml\", SqlDbType.VarChar, strXML.Length);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlParameter outparam = new SqlParameter(\"@retval\", SqlDbType.Int);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outparam.Direction = ParameterDirection.ReturnValue;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlparam.Value = strXML;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.CommandType = CommandType.StoredProcedure;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.Parameters.Add(sqlparam);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.Parameters.Add(outparam);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Open();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqlcmd.ExecuteNonQuery();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( Convert.ToInt16(outparam.Value) &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retval = true;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; catch (Exception ex)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Replace following throw with User supplied exception handling code: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; Log exception and perform graceful error handling<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception(\"Error validating XML: \" + ex.Message);<br />&nbsp;&nbsp;&nbsp; }<br /><br /><br />    finally{<br />        cn.Close();<br /><br />    }<br /><br />&nbsp;&nbsp;&nbsp; // return result<br />&nbsp;&nbsp;&nbsp; return retval;<br />} </pre>\n  <p>\n    <strong>Custom Defined XML Validation Event Handler</strong>\n  </p>\n  <pre>void ValidationEventHandler(object sender, System.Xml.Schema.ValidationEventArgs args)<br />{<br />&nbsp;&nbsp;&nbsp; validationErrCnt++;<br /><br />&nbsp;&nbsp;&nbsp; if (args.Severity.Equals(XmlSeverityType.Warning))<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastError = \"Warning: \" + args.Message;<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; else if (args.Severity.Equals(XmlSeverityType.Error))<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lastError = \"Error: \" + args.Message;<br />&nbsp;&nbsp;&nbsp; }<br />}</pre>\n  <p>\n    <strong>Sample XML Schema with pattern match validators</strong>\n  </p>\n  <pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;<br />&lt;xs:schema id=\"UserSchema\" targetNamespace=\"<a href=\"http://tempuri.org/XMLSchema.xsd\">http://tempuri.org/XMLSchema.xsd</a>\" <br />\telementFormDefault=\"qualified\" xmlns=\"<a href=\"http://tempuri.org/XMLSchema.xsd\">http://tempuri.org/XMLSchema.xsd</a>\"<br />\t xmlns:mstns=\"<a href=\"http://tempuri.org/XMLSchema.xsd\">http://tempuri.org/XMLSchema.xsd</a>\" xmlns:xs=\"<a href=\"http://www.w3.org/2001/XMLSchema\">http://www.w3.org/2001/XMLSchema</a>\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"Users\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:complexType&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element minOccurs=\"1\" maxOccurs=\"100\" name=\"User\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:complexType&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"username\" type=\"usernamestring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"password\" type=\"passwordstring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"name\" type=\"namestring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element maxOccurs=\"2\" name=\"streetaddress\" type=\"addressstring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"city\" type=\"namestring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"state\" type=\"statevalue\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"postalcode\" type=\"postalstring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"phone\" type=\"phonestring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"ssn\" type=\"ssnstring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element name=\"emailaddress\" type=\"emailstring\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:element minOccurs=\"0\" name=\"url\" type=\"xs:anyURI\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:complexType&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:element&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/xs:sequence&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:complexType&gt;<br />&nbsp; &lt;/xs:element&gt;<br />&nbsp; &lt;xs:simpleType name=\"usernamestring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; must be at least two characters long and less than 16 --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value=\"2\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value=\"16\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^[\\w-'\\.]{2,16}$\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"passwordstring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; must be at least two characters long and less than 16 --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value=\"8\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value=\"16\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^.*(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*<br />\t\t\t[`~!@#\\$%\\^\\&\\*\\(\\)-_\\=\\+\\[\\{\\]\\}\\\\\\|;:',&lt;\\.&gt;/?]).*$\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"namestring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Names must be at least 2 characters, no more than 128 characters, and consist of<br />&nbsp;&nbsp; alphabetic characters, and may contain hyphens, single quotes, periods and spaces --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value=\"2\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value=\"128\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^[a-zA-Z-'\\.\\s]{2,128}$\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"addressstring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Since so many different types of address formats we'll do a match against a series <br />&nbsp;&nbsp; of digits (potentially containing punctuation, followed by a series of characters <br />&nbsp;&nbsp; representing the street name and then potentially a type of street and unit number --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^\\d{1,3}.?\\d{0,3}\\s[a-zA-Z]{2,30}(\\s[a-zA-Z]{2,15})?([#\\.0-9a-zA-Z]*)?$\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"statevalue\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- States must be one of our predefined enumeration types and consist of exactly 2 characters --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:length value=\"2\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"AL\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"AK\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"AR\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"AZ\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"CA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"CO\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"CT\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"DE\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"DC\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"FL\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"GA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"HI\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"ID\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"IL\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"IN\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"IA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"KS\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"KY\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"LA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"ME\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"MD\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"MA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"MI\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"MN\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"MS\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"MO\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"MT\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"NE\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"NV\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"NH\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"NJ\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"NM\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"NY\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"NC\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"ND\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"OH\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"OK\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"OR\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"PA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"RI\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"SC\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"SD\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"TN\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"TX\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"UT\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"VT\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"VA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"WA\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"WV\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"WI\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:enumeration value=\"WY\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"postalstring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- The following US postal code format allows ZIP (5 digit) or ZIP+4 formats<br />&nbsp;&nbsp; as a single string or separated by hyphens --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^\\d{5}[-]?(\\d{4})?$\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value=\"5\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value=\"10\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"ssnstring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- SSNs consist of 9 digits but may contain an optional 2 hyphens --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value=\"9\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value=\"11\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^\\d{3}[-]?\\d{2}[-]?\\d{4}$$\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"phonestring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- The following pattern defines a US formatted telephone number --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^[01]?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value=\"10\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value=\"32\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&nbsp; &lt;xs:simpleType name=\"emailstring\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;xs:restriction base=\"xs:string\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;!-- Allows common email address that can start with a alphanumeric char and contain word, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hyphen and period characters followed by a domain name meeting the same criteria followed <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; by a alpha suffix between 2 and 9 character long --&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:pattern value=\"^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:minLength value=\"7\" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;xs:maxLength value=\"256\" /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/xs:restriction&gt;<br />&nbsp; &lt;/xs:simpleType&gt;<br />&lt;/xs:schema&gt;</pre>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}