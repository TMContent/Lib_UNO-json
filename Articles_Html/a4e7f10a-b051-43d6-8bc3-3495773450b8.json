{
  "id": "a4e7f10a-b051-43d6-8bc3-3495773450b8",
  "checksum": "e53f777360346ec4cea83d38ae89461b35e40902",
  "words": {
    "what": [
      "h1",
      "p"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "a",
      "li",
      "li",
      "a"
    ],
    "check": [
      "h1",
      "h1",
      "p"
    ],
    "for": [
      "h1",
      "p",
      "p",
      "p"
    ],
    "ensure": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p"
    ],
    "type-safe": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "parameters": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "a",
      "title"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "when": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "constructing": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "dynamic": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "li",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "title"
    ],
    "queries": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "or": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "passing": [
      "p"
    ],
    "stored": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre",
      "li",
      "p"
    ],
    "procedures": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "why": [
      "h1"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p"
    ],
    "you": [
      "p"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "collection": [
      "p",
      "p"
    ],
    "treats": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "ol",
      "li",
      "pre",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "ol",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "literal": [
      "p"
    ],
    "value": [
      "p"
    ],
    "rather": [
      "p"
    ],
    "then": [
      "p"
    ],
    "executable": [
      "p"
    ],
    "code": [
      "p"
    ],
    "can": [
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "enforce": [
      "p"
    ],
    "type": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "pre",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "length": [
      "p"
    ],
    "constraints": [
      "p"
    ],
    "on": [
      "p",
      "p"
    ],
    "data": [
      "p",
      "p"
    ],
    "values": [
      "p"
    ],
    "outside": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "range": [
      "p"
    ],
    "trigger": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p"
    ],
    "exception": [
      "p"
    ],
    "not": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "attackers": [
      "p"
    ],
    "might": [
      "p"
    ],
    "able": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "injection": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "li",
      "li",
      "a",
      "li",
      "a"
    ],
    "attacks": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "embedded": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "a",
      "li",
      "li",
      "a"
    ],
    "unfiltered": [
      "p"
    ],
    "how": [
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "parameterized": [
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "database": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "p"
    ],
    "transactions": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "locate": [
      "ol",
      "li",
      "p"
    ],
    "throughout": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "application": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "h1",
      "p"
    ],
    "\"select": [
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "pre"
    ],
    "user": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p"
    ],
    "from": [
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "p"
    ],
    "myappusers": [
      "ol",
      "li",
      "pre"
    ],
    "where": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "p",
      "strong",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "?": [
      "ol",
      "li",
      "pre"
    ],
    "pass": [
      "ol",
      "li",
      "pre"
    ],
    "?\"": [
      "ol",
      "li",
      "pre"
    ],
    "verify": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "each": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "transaction": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "uses": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "possible": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "interacts": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "p"
    ],
    "backend": [
      "ol",
      "li",
      "p"
    ],
    "through": [
      "ol",
      "li",
      "p"
    ],
    "look": [
      "ol",
      "li",
      "p"
    ],
    "like": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "sqlcommand": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "mycommand": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sqlcommand\"sp_selectuser\",": [
      "ol",
      "li",
      "pre"
    ],
    "myconnection;//specify": [
      "ol",
      "li",
      "pre"
    ],
    "our": [
      "ol",
      "li",
      "pre"
    ],
    "command": [
      "ol",
      "li",
      "pre"
    ],
    "proceduremycommandcommandtype": [
      "ol",
      "li",
      "pre"
    ],
    "commandtypestoredprocedure;": [
      "ol",
      "li",
      "pre"
    ],
    "string": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "sqlstr": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "*": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "users": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "username": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "'\"": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "+": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "untext": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "\"'": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "password": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "p",
      "pre",
      "p",
      "pre",
      "p"
    ],
    "passtext": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "\"'\"sqlcommand": [
      "ol",
      "li",
      "pre"
    ],
    "sqlcommandsqlstr,": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "myconnection;": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "using": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "sqlparametercollection": [
      "ol",
      "li",
      "p"
    ],
    "class": [
      "ol",
      "li",
      "p"
    ],
    "sqlconnection": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "connection": [
      "ol",
      "li",
      "pre"
    ],
    "sqlconnectionconnectionstring)){": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "connectionopen();": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "sqldataadapter": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "mydataadapter": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "'@uname'": [
      "ol",
      "li",
      "pre"
    ],
    "'@pwd'\"": [
      "ol",
      "li",
      "pre"
    ],
    "connection;": [
      "ol",
      "li",
      "pre"
    ],
    "mycommandselectcommand.parameters.add(\"@uname\",": [
      "ol",
      "li",
      "pre"
    ],
    "sqldbtypevarchar,": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "24;": [
      "ol",
      "li",
      "pre"
    ],
    "mycommandselectcommand.parameters.add(\"@pwd\",": [
      "ol",
      "li",
      "pre"
    ],
    "16;": [
      "ol",
      "li",
      "pre"
    ],
    "mycommandselectcommand.parameters[\"@uname\"].value": [
      "ol",
      "li",
      "pre"
    ],
    "untext;": [
      "ol",
      "li",
      "pre"
    ],
    "mycommandselectcommand.parameters[\"@pwd\"].value": [
      "ol",
      "li",
      "pre"
    ],
    "passtext;": [
      "ol",
      "li",
      "pre"
    ],
    "mydataadapterfill(userdataset);": [
      "ol",
      "li",
      "pre"
    ],
    "..": [
      "ol",
      "li",
      "pre"
    ],
    "connectionclose();}": [
      "ol",
      "li",
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "consider": [
      "p"
    ],
    "aspnet": [
      "p",
      "a",
      "a"
    ],
    "handles": [
      "p"
    ],
    "employee": [
      "p",
      "p"
    ],
    "payroll": [
      "p"
    ],
    "functionality": [
      "p"
    ],
    "small": [
      "p"
    ],
    "company": [
      "p"
    ],
    "one": [
      "p"
    ],
    "pages": [
      "p"
    ],
    "requires": [
      "p"
    ],
    "retrieving": [
      "p"
    ],
    "record": [
      "p"
    ],
    "table": [
      "p"
    ],
    "based": [
      "p"
    ],
    "supplied": [
      "p"
    ],
    "via": [
      "p"
    ],
    "login": [
      "p"
    ],
    "dialog": [
      "p",
      "p"
    ],
    "developer": [
      "p"
    ],
    "created": [
      "p"
    ],
    "select": [
      "p",
      "p",
      "pre",
      "p"
    ],
    "query": [
      "p"
    ],
    "accomplish": [
      "p"
    ],
    "said": [
      "p"
    ],
    "task": [
      "p"
    ],
    "myconnection": [
      "pre"
    ],
    "\"'\"": [
      "pre"
    ],
    "sqldataadaptermycommand);": [
      "pre"
    ],
    "mycommandconnection.open();": [
      "pre"
    ],
    "sqldatareader": [
      "pre"
    ],
    "myreader": [
      "pre"
    ],
    "mycommandexecutereader();": [
      "pre"
    ],
    "..}": [
      "pre"
    ],
    "preceding": [
      "p"
    ],
    "statement": [
      "p",
      "p"
    ],
    "will": [
      "p",
      "p",
      "p"
    ],
    "work": [
      "p"
    ],
    "expected": [
      "p"
    ],
    "assuming": [
      "p"
    ],
    "perfectly": [
      "p"
    ],
    "constrained": [
      "p"
    ],
    "however": [
      "p"
    ],
    "happens": [
      "p"
    ],
    "enters": [
      "p"
    ],
    "unexpected": [
      "p"
    ],
    "such": [
      "p"
    ],
    "'1234'": [
      "p",
      "pre"
    ],
    "this": [
      "p",
      "p",
      "p"
    ],
    "mjones'": [
      "pre"
    ],
    "1=1": [
      "pre",
      "pre"
    ],
    "--": [
      "pre"
    ],
    "result": [
      "p"
    ],
    "being": [
      "p"
    ],
    "executed": [
      "p"
    ],
    "at": [
      "p"
    ],
    "level": [
      "p"
    ],
    "'mjones'": [
      "pre"
    ],
    "--'": [
      "pre"
    ],
    "allow": [
      "p"
    ],
    "person": [
      "p"
    ],
    "entering": [
      "p"
    ],
    "into": [
      "p"
    ],
    "box": [
      "p"
    ],
    "account": [
      "p"
    ],
    "details": [
      "p"
    ],
    "mjones": [
      "p"
    ],
    "without": [
      "p"
    ],
    "correct": [
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "learn": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "more": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "about": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "wikipedia": [
      "ul",
      "li"
    ],
    "countering": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "aspnet,": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "visit": [
      "ul",
      "li"
    ],
    "protect": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "aspnet.": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "injection-based": [
      "ul",
      "li"
    ],
    "related": [
      "h1"
    ],
    "guideline": [
      "h1",
      "ul",
      "li",
      "a"
    ],
    "safe": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "Problem Example",
      "Additional Resources",
      "Related Guideline"
    ],
    "p": [
      "Ensure that type-safe parameters are used when constructing dynamic SQL queries or when passing parameters to stored procedures.",
      "If you use the Parameters collection, SQL treats the input is as a literal value rather then as executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception.",
      "If type-safe SQL parameters are not used, attackers might be able to execute injection attacks that are embedded in the unfiltered input.",
      "To check if parameterized queries are used:",
      "Identify all database transactions. Locate all SQL queries throughout your application. Example:",
      "Verify that each transaction uses Stored Procedures where possible. Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:",
      "and not like:",
      "Verify that type-safe parameters are used. Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:",
      "Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application created an SQL SELECT query to accomplish said task:",
      "In the preceding example, the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:",
      "This will result in the SQL statement being executed at the database level:",
      "This will allow the person entering data into the dialog box to select the account details of mjones without the correct password.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Identify all database transactions. Locate all SQL queries throughout your application. Example:\r\n      \"select user from myappUsers where user = ? and pass = ?;\"\r\n      \r\n        \r\n          Verify that each transaction uses Stored Procedures where possible. Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:\r\n        SqlCommand myCommand = new SqlCommand(\"sp_SelectUser\", myConnection);//Specify our command is a stored proceduremyCommand.CommandType = CommandType.StoredProcedure; \r\n        and not like:\r\n        string SQLstr = \"SELECT * from users\t WHERE username = '\" + un.Text + \"'\t AND password = '\" + pass.Text + \"'\";SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);\r\n        \r\n          \r\n            Verify that type-safe parameters are used. Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:\r\n          using (SqlConnection connection = new SqlConnection(connectionString)){  connection.Open();  SqlDataAdapter myDataAdapter = new SqlDataAdapter(         \"SELECT * from users WHERE username = '@uname' AND password = '@pwd'\", connection);  myCommand.SelectCommand.Parameters.Add(\"@uname\", SqlDbType.VarChar, 24);  myCommand.SelectCommand.Parameters.Add(\"@pwd\", SqlDbType.VarChar, 16);  myCommand.SelectCommand.Parameters[\"@uname\"].Value = un.Text;  myCommand.SelectCommand.Parameters[\"@pwd\"].Value = pass.Text;  myDataAdapter.Fill(userDataset);  ...  connection.Close();}"
    ],
    "li": [
      "Identify all database transactions. Locate all SQL queries throughout your application. Example:\r\n      \"select user from myappUsers where user = ? and pass = ?;\"",
      "Verify that each transaction uses Stored Procedures where possible. Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:\r\n        SqlCommand myCommand = new SqlCommand(\"sp_SelectUser\", myConnection);//Specify our command is a stored proceduremyCommand.CommandType = CommandType.StoredProcedure; \r\n        and not like:\r\n        string SQLstr = \"SELECT * from users\t WHERE username = '\" + un.Text + \"'\t AND password = '\" + pass.Text + \"'\";SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);",
      "Verify that type-safe parameters are used. Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:\r\n          using (SqlConnection connection = new SqlConnection(connectionString)){  connection.Open();  SqlDataAdapter myDataAdapter = new SqlDataAdapter(         \"SELECT * from users WHERE username = '@uname' AND password = '@pwd'\", connection);  myCommand.SelectCommand.Parameters.Add(\"@uname\", SqlDbType.VarChar, 24);  myCommand.SelectCommand.Parameters.Add(\"@pwd\", SqlDbType.VarChar, 16);  myCommand.SelectCommand.Parameters[\"@uname\"].Value = un.Text;  myCommand.SelectCommand.Parameters[\"@pwd\"].Value = pass.Text;  myDataAdapter.Fill(userDataset);  ...  connection.Close();}",
      "To learn more about SQL injection, see: SQL Injection in Wikipedia.",
      "To learn more about countering SQL injection in ASP.NET, visit: How To: Protect From SQL Injection in ASP.NET.",
      "To learn more about countering injection-based attacks in ASP.NET, see: How To: Protect From Injection Attacks in ASP.NET.",
      "Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries"
    ],
    "strong": [
      "Identify all database transactions.",
      "Verify that each transaction uses Stored Procedures where possible.",
      "Verify that type-safe parameters are used."
    ],
    "pre": [
      "\"select user from myappUsers where user = ? and pass = ?;\"",
      "SqlCommand myCommand = new SqlCommand(\"sp_SelectUser\", myConnection);//Specify our command is a stored proceduremyCommand.CommandType = CommandType.StoredProcedure;",
      "string SQLstr = \"SELECT * from users\t WHERE username = '\" + un.Text + \"'\t AND password = '\" + pass.Text + \"'\";SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);",
      "using (SqlConnection connection = new SqlConnection(connectionString)){  connection.Open();  SqlDataAdapter myDataAdapter = new SqlDataAdapter(         \"SELECT * from users WHERE username = '@uname' AND password = '@pwd'\", connection);  myCommand.SelectCommand.Parameters.Add(\"@uname\", SqlDbType.VarChar, 24);  myCommand.SelectCommand.Parameters.Add(\"@pwd\", SqlDbType.VarChar, 16);  myCommand.SelectCommand.Parameters[\"@uname\"].Value = un.Text;  myCommand.SelectCommand.Parameters[\"@pwd\"].Value = pass.Text;  myDataAdapter.Fill(userDataset);  ...  connection.Close();}",
      "using (SqlConnection myConnection = new SqlConnection(connectionString)){  connection.Open();  string SQLstr = \"SELECT * from users WHERE username = '\" + un.Text + \"'\t AND password = '\" + pass.Text + \"'\";  SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);  SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);  myCommand.Connection.Open();  SqlDataReader myReader = myCommand.ExecuteReader();  ...}",
      "mjones' AND 1=1; --",
      "SELECT * from users WHERE username = 'mjones' AND 1=1; --'  AND password = '1234';"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "To learn more about SQL injection, see: SQL Injection in Wikipedia. To learn more about countering SQL injection in ASP.NET, visit: How To: Protect From SQL Injection in ASP.NET. To learn more about countering injection-based attacks in ASP.NET, see: How To: Protect From Injection Attacks in ASP.NET.",
      "Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries"
    ],
    "a": [
      "SQL Injection",
      "How To: Protect From SQL Injection in ASP.NET",
      "How To: Protect From Injection Attacks in ASP.NET",
      "Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://en.wikipedia.org/wiki/SQL_injection",
      "text": "SQL Injection"
    },
    {
      "href": "http://msdn2.microsoft.com/en-us/library/ms998271.aspx",
      "text": "How To: Protect From SQL Injection in ASP.NET"
    },
    {
      "href": "http://msdn2.microsoft.com/en-us/library/bb355989.aspx",
      "text": "How To: Protect From Injection Attacks in ASP.NET"
    },
    {
      "href": "/article/4be4ed09-ed2f-4f05-9e63-e20708807542",
      "text": "Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries"
    }
  ],
  "html": "<h1>What to Check For</h1>\r\n  <p>Ensure that type-safe parameters are used when constructing dynamic SQL queries or when passing parameters to stored procedures.</p>\r\n  <h1>Why</h1>\r\n  <p>If you use the Parameters collection, SQL treats the input is as a literal value rather then as executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception.</p>\r\n  <p>If type-safe SQL parameters are not used, attackers might be able to execute injection attacks that are embedded in the unfiltered input.</p>\r\n  <h1>How to Check</h1>\r\n  <p>To check if parameterized queries are used:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all database transactions. </strong>Locate all SQL queries throughout your application. Example:</p>\r\n      <pre>\"select user from myappUsers where user = ? and pass = ?;\"</pre>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that each transaction uses Stored Procedures where possible. </strong>Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:</p>\r\n        <pre>SqlCommand myCommand = new SqlCommand(\"sp_SelectUser\", myConnection);<br />//Specify our command is a stored procedure<br />myCommand.CommandType = CommandType.StoredProcedure; </pre>\r\n        <p>and not like:</p>\r\n        <pre>string SQLstr = \"SELECT &#42; from users<br />&#9; WHERE username = '\" &#43; un.Text &#43; \"'<br />&#9; AND password = '\" &#43; pass.Text &#43; \"'\";<br />SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);</pre>\r\n        <li>\r\n          <p>\r\n            <strong>Verify that type-safe parameters are used. </strong>Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:</p>\r\n          <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />&#123;<br />  connection.Open();<br />  SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />         \"SELECT &#42; from users WHERE username = '&#64;uname' AND password = '&#64;pwd'\", connection);<br />  myCommand.SelectCommand.Parameters.Add(\"&#64;uname\", SqlDbType.VarChar, 24);<br />  myCommand.SelectCommand.Parameters.Add(\"&#64;pwd\", SqlDbType.VarChar, 16);<br />  myCommand.SelectCommand.Parameters&#91;\"&#64;uname\"&#93;.Value = un.Text;<br />  myCommand.SelectCommand.Parameters&#91;\"&#64;pwd\"&#93;.Value = pass.Text;<br />  myDataAdapter.Fill(userDataset);  ...  connection.Close();<br />&#125;</pre>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application created an SQL SELECT query to accomplish said task:</p>\r\n  <pre>using (SqlConnection myConnection = new SqlConnection(connectionString))<br />&#123;<br />  connection.Open();<br />  string SQLstr = \"SELECT &#42; from users WHERE username = '\" &#43; un.Text &#43; \"'<br />&#9; AND password = '\" &#43; pass.Text &#43; \"'\";<br />  SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);<br />  SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);<br />  myCommand.Connection.Open();<br />  SqlDataReader myReader = myCommand.ExecuteReader();<br />  ...<br />&#125;</pre>\r\n  <p>In the preceding example, the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:</p>\r\n  <pre>mjones' AND 1=1; -- </pre>\r\n  <p>This will result in the SQL statement being executed at the database level:</p>\r\n  <pre>SELECT &#42; from users WHERE username = 'mjones' AND 1=1; --'  AND password = '1234';</pre>\r\n  <p>This will allow the person entering data into the dialog box to select the account details of mjones without the correct password.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>To learn more about SQL injection, see: <a href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL Injection</a> in Wikipedia. <li>To learn more about countering SQL injection in ASP.NET, visit: <a href=\"http://msdn2.microsoft.com/en-us/library/ms998271.aspx\">How To: Protect From SQL Injection in ASP.NET</a>. <li>To learn more about countering injection-based attacks in ASP.NET, see: <a href=\"http://msdn2.microsoft.com/en-us/library/bb355989.aspx\">How To: Protect From Injection Attacks in ASP.NET</a>.</li></li></li>\r\n  </ul>\r\n  <h1>Related Guideline</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/4be4ed09-ed2f-4f05-9e63-e20708807542\">Guideline: Use Type Safe SQL Parameters When Constructing SQL Queries</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}