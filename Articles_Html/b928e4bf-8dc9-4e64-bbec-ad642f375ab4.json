{
  "id": "b928e4bf-8dc9-4e64-bbec-ad642f375ab4",
  "checksum": "4e178d67b8354ed05f57b3f651b000bc9e197737",
  "words": {
    "1": [
      "ul",
      "li",
      "h1"
    ],
    "2": [
      "ul",
      "li",
      "h1"
    ],
    "3": [
      "ul",
      "li",
      "h1"
    ],
    "443": [
      "i"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "title"
    ],
    "scala": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "title"
    ],
    "and": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "play": [
      "p",
      "p"
    ],
    "framework": [
      "p"
    ],
    "21.0+": [
      "p"
    ],
    "summary": [
      "h1"
    ],
    "network": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "title"
    ],
    "credential": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "title"
    ],
    "sniffing": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "title"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "eavesdropping": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "where": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker’s": [
      "p",
      "p"
    ],
    "goal": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "capture": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "authentication": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "packets": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "order": [
      "p",
      "p"
    ],
    "reveal": [
      "p"
    ],
    "data": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "might": [
      "p",
      "ul",
      "li"
    ],
    "be": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "scheme": [
      "p",
      "ul",
      "li"
    ],
    "such": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "as": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "username": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "password": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "applications": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "don’t": [
      "p"
    ],
    "encrypt": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "client": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "li"
    ],
    "credentials": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "before": [
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "transmitting": [
      "p"
    ],
    "them": [
      "p",
      "p"
    ],
    "or don't": [
      "p"
    ],
    "secure": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "connection": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "through": [
      "p",
      "p"
    ],
    "which": [
      "p",
      "ul",
      "li"
    ],
    "occurs": [
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "ul",
      "li"
    ],
    "attack": [
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "follow": [
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "steps": [
      "p"
    ],
    "test": [
      "p",
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "title"
    ],
    "for": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "div",
      "div",
      "p",
      "b",
      "title"
    ],
    "bugs": [
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h1",
      "h1",
      "h1"
    ],
    "understand": [
      "ul",
      "li",
      "h1"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1"
    ],
    "analyze": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "causes": [
      "ul",
      "li",
      "h1"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1"
    ],
    "execute": [
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "li",
      "ol",
      "li"
    ],
    "cases": [
      "ul",
      "li",
      "p",
      "h1",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "starts": [
      "p"
    ],
    "when": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "selects": [
      "p",
      "ol",
      "li"
    ],
    "victim": [
      "p",
      "ul",
      "li"
    ],
    "authenticates": [
      "p"
    ],
    "with": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "over": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "via": [
      "p"
    ],
    "next": [
      "p",
      "p"
    ],
    "eavesdrops": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "li"
    ],
    "monitor": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "sniff": [
      "p"
    ],
    "exchanged": [
      "p",
      "p"
    ],
    "by": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "during": [
      "p"
    ],
    "login the": [
      "p"
    ],
    "type": [
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "depends": [
      "p"
    ],
    "access": [
      "p"
    ],
    "target": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "well": [
      "p",
      "p"
    ],
    "hub-based,": [
      "p"
    ],
    "switch-based": [
      "p",
      "ul",
      "li"
    ],
    "etc).": [
      "p"
    ],
    "include": [
      "p"
    ],
    "but": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p"
    ],
    "limited": [
      "p"
    ],
    "hub-based": [
      "ul",
      "li"
    ],
    "promiscuous": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "mode": [
      "ul",
      "li",
      "p"
    ],
    "arp": [
      "ul",
      "li",
      "p"
    ],
    "poisoning": [
      "ul",
      "li",
      "p"
    ],
    "dhcp": [
      "ul",
      "li"
    ],
    "spoofing": [
      "ul",
      "li"
    ],
    "wlan": [
      "ul",
      "li"
    ],
    "including": [
      "ul",
      "li"
    ],
    "require": [
      "ul",
      "li"
    ],
    "breaking": [
      "ul",
      "li"
    ],
    "wireless": [
      "ul",
      "li"
    ],
    "key": [
      "ul",
      "li",
      "p"
    ],
    "from": [
      "ul",
      "li",
      "p"
    ],
    "internet": [
      "ul",
      "li"
    ],
    "bgp": [
      "ul",
      "li"
    ],
    "router": [
      "ul",
      "li"
    ],
    "note": [
      "p"
    ],
    "credential-sniffing": [
      "p"
    ],
    "extension": [
      "p"
    ],
    "thus": [
      "p"
    ],
    "scenario": [
      "p"
    ],
    "described": [
      "p"
    ],
    "here": [
      "p",
      "p"
    ],
    "testing": [
      "p",
      "p",
      "p",
      "b"
    ],
    "section": [
      "p"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "go": [
      "p"
    ],
    "into": [
      "p"
    ],
    "detail": [
      "p",
      "p"
    ],
    "about": [
      "p"
    ],
    "while": [
      "p"
    ],
    "on the": [
      "p",
      "p"
    ],
    "uses": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "monitoring": [
      "p",
      "ol",
      "li"
    ],
    "tool": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "read": [
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "doesn’t": [
      "p",
      "p"
    ],
    "properly": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "retrieves": [
      "p",
      "ol",
      "li"
    ],
    "client’s": [
      "p",
      "p"
    ],
    "clear": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "text": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "weak": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "encryption": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "broken": [
      "p",
      "ol",
      "li"
    ],
    "later": [
      "p",
      "ol",
      "li"
    ],
    "executes": [
      "ol",
      "li"
    ],
    "between": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "packet-monitoring": [
      "ol",
      "li"
    ],
    "doesn't": [
      "ol",
      "li"
    ],
    "or in": [
      "ol",
      "li"
    ],
    "it": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "necessary": [
      "p",
      "p"
    ],
    "what": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "possible": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "title"
    ],
    "protect": [
      "p",
      "p",
      "p"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p"
    ],
    "schemes": [
      "h2",
      "em",
      "p",
      "p"
    ],
    "there": [
      "p",
      "p"
    ],
    "different": [
      "p"
    ],
    "available": [
      "p"
    ],
    "basicdigestweb": [
      "ul"
    ],
    "formsauthentication": [
      "ul"
    ],
    "using": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "channel": [
      "ul",
      "li",
      "p"
    ],
    "ssl/tls": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "ipsec": [
      "ul",
      "li",
      "p"
    ],
    "basic": [
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "digest": [
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "forms": [
      "li",
      "p"
    ],
    "prone": [
      "p"
    ],
    "sends": [
      "ul",
      "li"
    ],
    "base-64": [
      "ul",
      "li"
    ],
    "encoded": [
      "ul",
      "li"
    ],
    "value": [
      "ul",
      "li"
    ],
    "easily": [
      "ul",
      "li"
    ],
    "decoded": [
      "ul",
      "li"
    ],
    "attackers  most": [
      "ul",
      "li"
    ],
    "won’t": [
      "ul",
      "li"
    ],
    "use": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "remote": [
      "ul",
      "li"
    ],
    "clients": [
      "ul",
      "li"
    ],
    "however": [
      "ul",
      "li",
      "p"
    ],
    "choose": [
      "ul",
      "li"
    ],
    "local": [
      "ul",
      "li"
    ],
    "usersdigest": [
      "ul"
    ],
    "more": [
      "ul",
      "li"
    ],
    "since": [
      "ul",
      "li"
    ],
    "md5": [
      "ul",
      "li"
    ],
    "hash": [
      "ul",
      "li"
    ],
    "nonce": [
      "ul",
      "li"
    ],
    "number": [
      "ul",
      "li"
    ],
    "once": [
      "ul",
      "li",
      "p"
    ],
    "sending": [
      "ul",
      "li",
      "p"
    ],
    "wire": [
      "ul",
      "li"
    ],
    "nonetheless": [
      "ul",
      "li"
    ],
    "only": [
      "ul",
      "li"
    ],
    "configured": [
      "ul",
      "li",
      "p"
    ],
    "fall": [
      "ul",
      "li"
    ],
    "man-in-the-middle": [
      "ul",
      "li"
    ],
    "mitm)": [
      "ul",
      "li"
    ],
    "intercepting": [
      "ul",
      "li"
    ],
    "packages": [
      "ul",
      "li"
    ],
    "tell": [
      "ul",
      "li"
    ],
    "legacy": [
      "ul",
      "li"
    ],
    "users": [
      "li"
    ],
    "also": [
      "p"
    ],
    "implement": [
      "p"
    ],
    "common": [
      "p"
    ],
    "html": [
      "p"
    ],
    "developers": [
      "p"
    ],
    "must": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "add": [
      "p"
    ],
    "code": [
      "p"
    ],
    "ask": [
      "p"
    ],
    "send": [
      "p"
    ],
    "request": [
      "p",
      "li",
      "p",
      "p"
    ],
    "form": [
      "p"
    ],
    "submitted the": [
      "p"
    ],
    "travel": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "encrypts": [
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "packet": [
      "p"
    ],
    "sent": [
      "p",
      "p"
    ],
    "hence": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "channel this": [
      "p"
    ],
    "means": [
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "establish": [
      "p"
    ],
    "encrypted": [
      "p"
    ],
    "based": [
      "p"
    ],
    "public": [
      "p"
    ],
    "digital": [
      "p"
    ],
    "certificates": [
      "p",
      "p"
    ],
    "like": [
      "p",
      "p"
    ],
    "those": [
      "p"
    ],
    "https": [
      "p",
      "p",
      "p",
      "p",
      "i"
    ],
    "configuring": [
      "h2",
      "em"
    ],
    "avoid": [
      "p"
    ],
    "which depends": [
      "p"
    ],
    "host": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "runs": [
      "p"
    ],
    "apache": [
      "p"
    ],
    "tomcat": [
      "p"
    ],
    "the httpdconf file": [
      "p"
    ],
    "edited": [
      "p"
    ],
    "support": [
      "p"
    ],
    "ssl": [
      "p"
    ],
    "httpdconf": [
      "i"
    ],
    "meanwhile": [
      "p"
    ],
    "set": [
      "p",
      "li"
    ],
    "up": [
      "p"
    ],
    "modify": [
      "p"
    ],
    "appropriate": [
      "p"
    ],
    "configuration": [
      "p"
    ],
    "files": [
      "p"
    ],
    "protection": [
      "h2",
      "em"
    ],
    "at": [
      "h2",
      "em",
      "p"
    ],
    "layer": [
      "h2",
      "em",
      "h2",
      "em",
      "p",
      "p",
      "p"
    ],
    "because": [
      "p"
    ],
    "attackers": [
      "p"
    ],
    "able": [
      "p"
    ],
    "eavesdrop": [
      "p"
    ],
    "applications to": [
      "p"
    ],
    "mitigate": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "administrators": [
      "p",
      "p"
    ],
    "deploy": [
      "p",
      "p"
    ],
    "security": [
      "p"
    ],
    "defenses": [
      "p"
    ],
    "layer for": [
      "p"
    ],
    "example": [
      "p"
    ],
    "configure": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "defend": [
      "p"
    ],
    "tools": [
      "p"
    ],
    "check": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li"
    ],
    "interfaces": [
      "p"
    ],
    "running": [
      "p"
    ],
    "modes": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "run": [
      "p"
    ],
    "xarp": [
      "p"
    ],
    "switched": [
      "p"
    ],
    "networks": [
      "p"
    ],
    "following": [
      "p"
    ],
    "your": [
      "p"
    ],
    "select": [
      "ol",
      "li"
    ],
    "clientexecute": [
      "ol"
    ],
    "transmitted": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "expected": [
      "p",
      "p"
    ],
    "results the": [
      "p"
    ],
    "or via": [
      "p"
    ],
    "transport": [
      "h2",
      "em",
      "p",
      "p",
      "p",
      "div",
      "div",
      "p",
      "b"
    ],
    "additional": [
      "p"
    ],
    "relevant": [
      "p"
    ],
    "https in": [
      "p"
    ],
    "most": [
      "p"
    ],
    "browsers": [
      "p"
    ],
    "display": [
      "p"
    ],
    "padlock": [
      "p"
    ],
    "other": [
      "p"
    ],
    "comparable": [
      "p"
    ],
    "visual": [
      "p"
    ],
    "indicator": [
      "p"
    ],
    "browser’s": [
      "p",
      "ol",
      "li"
    ],
    "window": [
      "p"
    ],
    "lock": [
      "p"
    ],
    "show": [
      "p"
    ],
    "so": [
      "p"
    ],
    "tester": [
      "p"
    ],
    "really": [
      "p"
    ],
    "going": [
      "p"
    ],
    "proposed": [
      "p"
    ],
    "owasp": [
      "p"
    ],
    "proper": [
      "p"
    ],
    "done": [
      "p"
    ],
    "http": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "i"
    ],
    "proxy": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "examine": [
      "p"
    ],
    "url": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "requests": [
      "p"
    ],
    "i].": [
      "p"
    ],
    "download": [
      "ol",
      "li"
    ],
    "owasp’s": [
      "ol",
      "li"
    ],
    "webscarab": [
      "ol",
      "li"
    ],
    "burp": [
      "ol",
      "li"
    ],
    "proxyopen": [
      "ol"
    ],
    "browserset": [
      "ol"
    ],
    "options": [
      "ol",
      "li"
    ],
    "proxynavigate": [
      "ol"
    ],
    "a scala": [
      "ol",
      "li"
    ],
    "login/authentication": [
      "ol",
      "li"
    ],
    "pagein": [
      "ol"
    ],
    "turn": [
      "ol",
      "li"
    ],
    "intercept": [
      "ol",
      "li"
    ],
    "option": [
      "ol",
      "li"
    ],
    "onin": [
      "ol"
    ],
    "browser": [
      "ol",
      "li",
      "li"
    ],
    "enter": [
      "ol",
      "li"
    ],
    "make": [
      "ol",
      "li"
    ],
    "requestin": [
      "ol"
    ],
    "request’s": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "plain": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "open": [
      "li"
    ],
    "navigate": [
      "li"
    ],
    "page": [
      "li"
    ],
    "results": [
      "p"
    ],
    "made": [
      "p"
    ],
    "https if": [
      "p"
    ],
    "begin": [
      "p",
      "p"
    ],
    "with http": [
      "p"
    ],
    "post": [
      "pre",
      "pre"
    ],
    "http//www.example.com/login": [
      "pre",
      "strong"
    ],
    "http/11host:": [
      "pre",
      "pre"
    ],
    "wwwexample.comuser-agent:": [
      "pre",
      "pre"
    ],
    "mozilla/50": [
      "pre",
      "pre"
    ],
    "windows;": [
      "pre",
      "pre"
    ],
    "u": [
      "pre",
      "pre"
    ],
    "windows": [
      "pre",
      "pre"
    ],
    "nt": [
      "pre",
      "pre"
    ],
    "51;": [
      "pre",
      "pre"
    ],
    "rv1.8.1.14)": [
      "pre",
      "pre"
    ],
    "gecko/20080404accept": [
      "pre",
      "pre"
    ],
    "text/xmlapplication/xml,application/xhtml+xml,text/htmlaccept-language:": [
      "pre",
      "pre"
    ],
    "it-itit;q=0.8,en-us;q=0.5,en;q=0.3accept-encoding:": [
      "pre",
      "pre"
    ],
    "gzipdeflateaccept-charset:": [
      "pre",
      "pre"
    ],
    "iso-8859-1utf-8;q=0.7,*;q=0.7keep-alive:": [
      "pre",
      "pre"
    ],
    "300connection": [
      "pre",
      "pre"
    ],
    "keep-alivecookie": [
      "pre"
    ],
    "language=english": [
      "pre",
      "pre"
    ],
    "content-type": [
      "pre",
      "pre"
    ],
    "application/x-www-form-urlencodedcontent-length": [
      "pre",
      "pre"
    ],
    "27 username=test&password=test": [
      "pre"
    ],
    "https  if": [
      "p"
    ],
    "https and": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "port": [
      "p"
    ],
    "https/ssl": [
      "p"
    ],
    "443 by": [
      "p"
    ],
    "default:": [
      "p"
    ],
    "https//www.example.com:443/login": [
      "pre"
    ],
    "keep-alivereferer": [
      "pre"
    ],
    "https//www.example.com/login.jspcookie:": [
      "pre"
    ],
    "27username=test&password=test": [
      "pre"
    ],
    "https//www.example.com:443": [
      "strong"
    ],
    "i]  testing": [
      "div",
      "div",
      "p"
    ],
    "owasp-at-001 http://www.owasp.org/index.php/testing_for_credentials_transport": [
      "div",
      "div",
      "p"
    ],
    "http//www.owasp.org/index.php/testing_for_credentials_transport": [
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Execute Test Cases"
    ],
    "p": [
      "Scala and Play Framework 2.1.0+",
      "Network credential sniffing attacks are network eavesdropping attacks where the attacker’s goal is to capture authentication packets in order to reveal data that might be used in an authentication scheme, such as username and password. Applications that don’t encrypt client credentials before transmitting them or don't secure the connection through which authentication occurs are vulnerable to this attack.",
      "Follow these steps to test for network credential sniffing bugs in Scala:",
      "A network credential sniffing attack starts when an attacker selects a victim client that authenticates with a Scala web application over the network via username and password. Next, the attacker eavesdrops on the network connection in order to monitor, or sniff, the authentication packets exchanged by the client and the application during login. The type of network eavesdropping attack depends on the attacker’s access to the target network as well as the type of target network (hub-based, switch-based, etc.). Network eavesdropping attacks include but are not limited to:",
      "Note that a credential-sniffing attack is an extension of a network eavesdropping attack. Thus, the attack scenario described here as well as the test cases in the testing section will not go into detail about a network eavesdropping attack.",
      "While eavesdropping on the client connection, the attacker uses a network monitoring tool to capture and read the authentication packets. If the application doesn’t properly encrypt the connection, the attacker retrieves the client’s credentials in clear text or in weak encryption that can be broken later.",
      "In detail:",
      "Next, it is necessary to analyze what makes credential sniffing attacks possible and how to protect against them.",
      "There are different authentication schemes available to Scala web applications.",
      "Basic and digest authentication are prone to network credential sniffing, as these are weak authentication schemes:",
      "Web applications can also implement authentication using common HTML web forms. Here developers must add the necessary code to the application to ask for the client’s username and password and send the request to the application once the form is submitted. The username and password will travel in clear text unless the application encrypts the password before sending it to the server, or the authentication packet is sent over a secure connection such as SSL/TLS.",
      "Hence, to properly protect against network credential sniffing attacks, applications must perform authentication through a secure channel. This means that before any authentication packets are exchanged between the client and the server, the client and server must establish an encrypted channel based on public key encryption and digital certificates, like those used in SSL/TLS or HTTPS.",
      "To avoid network credential sniffing attacks, Scala web applications must be configured to use HTTPS with SSL/TLS certificates, which depends on the web server used to host the application.",
      "For instance, if a Scala application runs in an Apache Tomcat server, the httpd.conf file must be edited to support SSL.",
      "Meanwhile, to set up Scala with Play, modify the appropriate configuration files.",
      "Network credential sniffing attacks are possible because attackers are able to eavesdrop on the connection between the target client and Scala applications. To mitigate the risk of eavesdropping attacks, network administrators can deploy security defenses at the network layer. For example, properly deploy and configure IPSec to prevent an attacker from eavesdropping on a connection.",
      "To defend against promiscuous mode sniffing, administrators can execute tools that check for network interfaces running in promiscuous modes. Or, they can run a client application like Xarp to protect against ARP poisoning attacks in switched networks.",
      "Execute the following test cases to check if your application is vulnerable to network credential sniffing bugs.",
      "To test for network credential sniffing in Scala applications.",
      "Expected results: The application is vulnerable if credentials are sent in clear text or via weak encryption.",
      "An additional test that is relevant to network credential sniffing testing is to check if authentication occurs over a secure transport layer such as SSL/TLS or HTTPS. In most cases, web browsers display a padlock (or any other comparable visual indicator) in the browser’s window if the connection is secure. However, there are cases where the lock doesn’t show, so the tester must monitor authentication packets to check if they are really going over HTTPs.",
      "As proposed by OWASP, proper testing for a secure transport layer can be done by using an HTTP proxy tool to examine the URL of authentication requests [i]. To test for secure transport layer:",
      "Expected results: The application is vulnerable if the request URL is made over plain HTTP and not HTTPS. If the application uses plain HTTP, the authentication request’s URL will begin with http:",
      "",
      "The application is secure if the request URL is over HTTPS.  If the application uses HTTPS, the authentication request’s URL will begin with https and it will contain the network port used by HTTPS/SSL (443 by default):",
      "[i]  Testing for Credentials Transport. OWASP-AT-001. http://www.owasp.org/index.php/Testing_for_credentials_transport"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "Step 1: Understand attack scenarios\n    Step 2: Analyze causes and countermeasures\n    Step 3: Execute test cases",
      "Hub-based network attacks such as promiscuous mode sniffing.\n    Switch-based network attacks such as ARP poisoning or DHCP spoofing.\n    WLAN attacks, including attacks that require breaking a wireless key. \n    Sniffing packets from the Internet, such as an attack on a BGP router.",
      "BasicDigestWeb formsAuthentication using a secure channel, such as SSL/TLS or IPSec",
      "Basic authentication sends the password as a base-64 encoded value which can be easily decoded by attackers.  Most Scala web applications won’t use this authentication scheme for remote clients; however, applications might choose to use basic authentication for local network users.Digest authentication is more secure since it uses an MD5 hash with a nonce (number used once) to encrypt the password before sending it over the wire. Nonetheless, digest authentication is only secure if properly configured. It can fall victim to man-in-the-middle (MitM) attacks where an attacker intercepting authentication packages can tell the client to use Basic authentication or legacy digest authentication."
    ],
    "li": [
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Execute test cases",
      "Hub-based network attacks such as promiscuous mode sniffing.",
      "Switch-based network attacks such as ARP poisoning or DHCP spoofing.",
      "WLAN attacks, including attacks that require breaking a wireless key.",
      "Sniffing packets from the Internet, such as an attack on a BGP router.",
      "The attacker selects a target client.",
      "The attacker executes a network eavesdropping attack on the connection between the client and the Scala application.",
      "The attacker uses a packet-monitoring tool to capture authentication packets.",
      "If the application doesn't properly encrypt the connection, the attacker retrieves the client credentials in clear text or in weak encryption that can be broken later.",
      "Basic",
      "Digest",
      "Web forms",
      "Authentication using a secure channel, such as SSL/TLS or IPSec",
      "Basic authentication sends the password as a base-64 encoded value which can be easily decoded by attackers.  Most Scala web applications won’t use this authentication scheme for remote clients; however, applications might choose to use basic authentication for local network users.",
      "Digest authentication is more secure since it uses an MD5 hash with a nonce (number used once) to encrypt the password before sending it over the wire. Nonetheless, digest authentication is only secure if properly configured. It can fall victim to man-in-the-middle (MitM) attacks where an attacker intercepting authentication packages can tell the client to use Basic authentication or legacy digest authentication.",
      "Select a target client.",
      "Execute an eavesdropping attack between a client and Scala application.",
      "Use a network monitoring tool to check if credentials are transmitted in clear text.",
      "Download and execute a HTTP proxy tool, such as OWASP’s WebScarab or Burp Proxy.",
      "Open a web browser.",
      "Set web browser’s connection options to use HTTP proxy.",
      "Navigate to a Scala application login/authentication page.",
      "In the HTTP proxy, turn intercept option ON.",
      "In the web browser, enter username and password and make a request.",
      "In the HTTP proxy, check if the authentication request’s URL is transmitted in plain text."
    ],
    "em": [
      "",
      "Authentication Schemes",
      "Configuring Scala Authentication",
      "Protection at the Network Layer",
      "Test for Network Credential Sniffing",
      "Test for Secure Transport Layer"
    ],
    "ol": [
      "The attacker selects a target client.\n    The attacker executes a network eavesdropping attack on the connection between the client and the Scala application.\n    The attacker uses a packet-monitoring tool to capture authentication packets.\n    If the application doesn't properly encrypt the connection, the attacker retrieves the client credentials in clear text or in weak encryption that can be broken later.",
      "Select a target client.Execute an eavesdropping attack between a client and Scala application. Use a network monitoring tool to check if credentials are transmitted in clear text.",
      "Download and execute a HTTP proxy tool, such as OWASP’s WebScarab or Burp Proxy.Open a web browser.Set web browser’s connection options to use HTTP proxy.Navigate to a Scala application login/authentication page.In the HTTP proxy, turn intercept option ON.In the web browser, enter username and password and make a request.In the HTTP proxy, check if the authentication request’s URL is transmitted in plain text."
    ],
    "h2": [
      "Authentication Schemes",
      "Configuring Scala Authentication",
      "Protection at the Network Layer",
      "Test for Network Credential Sniffing",
      "Test for Secure Transport Layer"
    ],
    "i": [
      "httpd.conf",
      "http",
      "https",
      "443"
    ],
    "strong": [
      ":",
      "http://www.example.com/login",
      "https://www.example.com:443"
    ],
    "pre": [
      "POST http://www.example.com/login HTTP/1.1Host: www.example.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404Accept: text/xml,application/xml,application/xhtml+xml,text/htmlAccept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip,deflateAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7Keep-Alive: 300Connection: keep-aliveCookie: language=English; Content-Type: application/x-www-form-urlencodedContent-length: 27 username=test&password=test",
      "POST https://www.example.com:443/login HTTP/1.1Host: www.example.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404Accept: text/xml,application/xml,application/xhtml+xml,text/htmlAccept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3Accept-Encoding: gzip,deflateAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7Keep-Alive: 300Connection: keep-aliveReferer: https://www.example.com/login.jspCookie: language=English; Content-Type: application/x-www-form-urlencodedContent-length: 27username=test&password=test"
    ],
    "div": [
      "[i]  Testing for Credentials Transport. OWASP-AT-001. http://www.owasp.org/index.php/Testing_for_credentials_transport",
      "[i]  Testing for Credentials Transport. OWASP-AT-001. http://www.owasp.org/index.php/Testing_for_credentials_transport"
    ],
    "hr": [
      ""
    ],
    "b": [
      "Testing for Credentials Transport"
    ],
    "a": [
      "http://www.owasp.org/index.php/Testing_for_credentials_transport"
    ]
  },
  "links": [
    {
      "href": "http://www.owasp.org/index.php/Testing_for_credentials_transport",
      "text": "http://www.owasp.org/index.php/Testing_for_credentials_transport"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <p>Scala and Play Framework 2.1.0+<br /></p>\n  <h1>Summary</h1>\n  <p>Network credential sniffing attacks are network eavesdropping attacks where the attacker’s goal is to capture authentication packets in order to reveal data that might be used in an authentication scheme, such as username and password. Applications that don’t encrypt client credentials before transmitting them or&nbsp;don't secure the connection through which authentication occurs are vulnerable to this attack.</p>\n  <p>Follow these steps to test for network credential sniffing bugs in Scala:</p>\n  <ul>\n    <li>Step 1: Understand attack scenarios</li>\n    <li>Step 2: Analyze causes and countermeasures</li>\n    <li>Step 3: Execute test cases</li>\n  </ul>\n  <h1>Step 1: Understand Attack Scenarios</h1>\n  <p>A network credential sniffing attack starts when an attacker selects a victim client that authenticates with a Scala web application over the network via username and password. Next, the attacker eavesdrops on the network connection in order to monitor, or sniff, the authentication packets exchanged by the client and the application during login.&nbsp;The type of network eavesdropping attack depends on the attacker’s access to the target network as well as the type of target network (hub-based, switch-based, etc.). Network eavesdropping attacks include but are not limited to:</p>\n  <ul>\n    <li>Hub-based network attacks such as promiscuous mode sniffing.</li>\n    <li>Switch-based network attacks such as ARP poisoning or DHCP spoofing.</li>\n    <li>WLAN attacks, including attacks that require breaking a wireless key. <br /></li>\n    <li>Sniffing packets from the Internet, such as an attack on a BGP router.</li>\n  </ul>\n  <p>Note that a credential-sniffing attack is an extension of a network eavesdropping attack. Thus, the attack scenario described here as well as the test cases in the testing section will not go into detail about a network eavesdropping attack. <em></em></p>\n  <p>While eavesdropping on&nbsp;the client connection, the attacker uses a network monitoring tool to capture and read the authentication packets. If the application doesn’t properly encrypt the connection, the attacker retrieves the client’s credentials in clear text or in weak encryption that can be broken later.</p>\n  <p>In detail:</p>\n  <ol>\n    <li>The attacker selects a target client.</li>\n    <li>The attacker executes a network eavesdropping attack on the connection between the client and the Scala application.</li>\n    <li>The attacker uses a packet-monitoring tool to capture authentication packets.</li>\n    <li>If the application doesn't properly encrypt the connection, the attacker retrieves the client credentials in clear text or&nbsp;in weak encryption that can be broken later.</li>\n  </ol>\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\n  <p>Next, it is necessary to analyze what makes credential sniffing attacks possible and how to protect against them.&nbsp;&nbsp;</p>\n  <h2>\n    <em>Authentication Schemes</em>\n  </h2>\n  <p>There are different authentication schemes available to Scala web applications.</p>The common authentication schemes available are:<ul><li>Basic</li><li>Digest</li><li>Web forms</li><li>Authentication using a secure channel, such as SSL/TLS or IPSec</li></ul><p>Basic and digest authentication are prone to network credential sniffing, as these are weak authentication schemes:</p><ul><li>Basic authentication sends the password as a base-64 encoded value which can be easily decoded by attackers.&nbsp;&nbsp;Most Scala web applications won’t use this authentication scheme for remote clients; however, applications might choose to use basic authentication for local network users.</li><li>Digest authentication is more secure since it uses an MD5 hash with a nonce (number used once) to encrypt the password before sending it over the wire. Nonetheless, digest authentication is only secure if properly configured. It can fall victim to man-in-the-middle (MitM) attacks where an attacker intercepting authentication packages can tell the client to use Basic authentication or legacy digest authentication.&nbsp;&nbsp;&nbsp;&nbsp;</li></ul><p>Web applications can also implement authentication using common HTML web forms. Here developers must add the necessary code to the application to ask for the client’s username and password and send the request to the application once the form is submitted.&nbsp;The username and password will travel in clear text unless the application encrypts the password before sending it to the server, or the authentication packet is sent over a secure connection such as SSL/TLS.</p><p>Hence, to properly protect against network credential sniffing attacks, applications must perform authentication through a secure channel.&nbsp;This means that before any authentication packets are exchanged between the client and the server, the client and server must establish an encrypted channel based on public key encryption and digital certificates, like those used in SSL/TLS or HTTPS.</p><h2><em>Configuring Scala Authentication</em></h2><p>To avoid network credential sniffing attacks, Scala web applications must be configured to use HTTPS with SSL/TLS certificates, which&nbsp;depends on the web server used to host the application.</p><p>For instance, if a Scala application runs in an Apache Tomcat server, the&nbsp;<i>httpd.conf</i>&nbsp;file must be edited to support SSL.</p><p>Meanwhile, to set up Scala with Play, modify the appropriate configuration files.</p><h2><em>Protection at the Network Layer</em></h2><p>Network credential sniffing attacks are possible because attackers are able to eavesdrop on&nbsp;the connection between the target client and Scala applications.&nbsp;To mitigate the risk of eavesdropping attacks, network administrators can deploy security defenses at the network layer.&nbsp;For example, properly deploy and configure IPSec to prevent an attacker from eavesdropping on a connection.</p><p>To defend against promiscuous mode sniffing, administrators can execute tools that check for network interfaces running in promiscuous modes. Or, they can run a client application like Xarp to protect against ARP poisoning attacks in switched networks. <br /></p><h1>Step 3: Execute Test Cases</h1><p>Execute the following test cases to check if your application is vulnerable to network credential sniffing bugs.</p><h2><em>Test for Network Credential Sniffing</em></h2><p>To test for network credential sniffing in Scala applications.</p><ol><li>Select a target client.</li><li>Execute an eavesdropping attack between a client and Scala application. <br /></li><li>Use a network monitoring tool to check if credentials are transmitted in clear text.</li></ol><p>Expected results:&nbsp;The application is vulnerable if credentials are sent in clear text or&nbsp;via weak encryption.</p><h2><em>Test for Secure Transport Layer</em></h2><p>An additional test that is relevant to network credential sniffing testing is to check if authentication occurs over a secure transport layer such as SSL/TLS or HTTPS.&nbsp;In most cases, web browsers display a padlock (or any other comparable visual indicator) in the browser’s window if the connection is secure. However, there are cases where the lock doesn’t show, so the tester must monitor authentication packets to check if they are really going over HTTPs.</p><p>As proposed by OWASP, proper testing for a secure transport layer can be done by using an HTTP proxy tool to examine the URL of authentication requests [i]. To test for secure transport layer:</p><ol><li>Download and execute a HTTP proxy tool, such as OWASP’s WebScarab or Burp Proxy.</li><li>Open a web browser.</li><li>Set web browser’s connection options to use HTTP proxy.</li><li>Navigate to a&nbsp;Scala application login/authentication page.</li><li>In the HTTP proxy, turn intercept option ON.</li><li>In the web browser, enter username and password and make a request.</li><li>In the HTTP proxy, check if the authentication request’s URL is transmitted in plain text.</li></ol><p>Expected results: The application is vulnerable if the request URL is made over plain HTTP and not HTTPS.&nbsp;If the application uses plain HTTP, the authentication request’s URL will begin with&nbsp;<i>http</i><strong>:</strong></p><pre>POST <strong>http://www.example.com/login</strong> HTTP/1.1<br />Host: www.example.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404<br />Accept: text/xml,application/xml,application/xhtml+xml,text/html<br />Accept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7<br />Keep-Alive: 300<br />Connection: keep-alive<br />Cookie: language=English; <br />Content-Type: application/x-www-form-urlencoded<br />Content-length: 27<br />&nbsp;<br />username=test&password=test</pre><p /><p>The application is secure if the request URL is over HTTPS.&nbsp;&nbsp;If the application uses HTTPS, the authentication request’s URL will begin with <i>https&nbsp;</i>and it will contain the network port used by HTTPS/SSL (<i>443</i>&nbsp;by default):</p><pre>POST <strong>https://www.example.com:443</strong>/login HTTP/1.1<br />Host: www.example.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404<br />Accept: text/xml,application/xml,application/xhtml+xml,text/html<br />Accept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7<br />Keep-Alive: 300<br />Connection: keep-alive<br />Referer: https://www.example.com/login.jsp<br />Cookie: language=English; <br />Content-Type: application/x-www-form-urlencoded<br />Content-length: 27<br /><br />username=test&password=test<br /><br /></pre><div><hr /><div><p>[i]&nbsp;&nbsp;<b>Testing for Credentials Transport</b>. OWASP-AT-001.&nbsp;<a href=\"http://www.owasp.org/index.php/Testing_for_credentials_transport\">http://www.owasp.org/index.php/Testing_for_credentials_transport</a></p></div></div>"
}