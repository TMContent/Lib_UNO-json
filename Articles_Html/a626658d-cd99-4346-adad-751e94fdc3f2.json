{
  "id": "a626658d-cd99-4346-adad-751e94fdc3f2",
  "checksum": "e6e431cf452f148d89c04afc104737832fc17b7e",
  "words": {
    "35": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "2008": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "microsoft®": [
      "ul",
      "li"
    ],
    "windows": [
      "ul",
      "li"
    ],
    "communication": [
      "ul",
      "li"
    ],
    "foundation": [
      "ul",
      "li"
    ],
    "wcf)": [
      "ul",
      "li"
    ],
    "microsoft": [
      "ul",
      "li",
      "p"
    ],
    "visual": [
      "ul",
      "li"
    ],
    "studio®": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "if": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "pre"
    ],
    "are": [
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "pre",
      "title"
    ],
    "impersonation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "consider": [
      "p",
      "title"
    ],
    "programmatic": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "instead": [
      "p",
      "title"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "declarative": [
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "is": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p"
    ],
    "finer-grained": [
      "p",
      "p"
    ],
    "approach": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "reduce": [
      "p",
      "p"
    ],
    "security": [
      "p",
      "p"
    ],
    "risk": [
      "p",
      "p"
    ],
    "when": [
      "h1"
    ],
    "use": [
      "p",
      "p"
    ],
    "impersonate": [
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li"
    ],
    "original": [
      "p",
      "pre"
    ],
    "caller": [
      "p"
    ],
    "or": [
      "p"
    ],
    "aspnet": [
      "p"
    ],
    "service": [
      "p",
      "p"
    ],
    "account": [
      "p"
    ],
    "calling": [
      "p"
    ],
    "into": [
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "how": [
      "h1",
      "p"
    ],
    "allows": [
      "p"
    ],
    "on": [
      "p"
    ],
    "specific": [
      "p"
    ],
    "lines": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p"
    ],
    "rather": [
      "p"
    ],
    "than": [
      "p"
    ],
    "entire": [
      "p"
    ],
    "operation": [
      "p"
    ],
    "this": [
      "p"
    ],
    "however": [
      "p"
    ],
    "be": [
      "p"
    ],
    "aware": [
      "p"
    ],
    "it": [
      "p"
    ],
    "easier": [
      "p"
    ],
    "make": [
      "p"
    ],
    "mistake": [
      "p"
    ],
    "during": [
      "p"
    ],
    "implementation": [
      "p"
    ],
    "could": [
      "p"
    ],
    "leave": [
      "p"
    ],
    "impersonating": [
      "p"
    ],
    "at": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "higher": [
      "p"
    ],
    "privilege": [
      "p"
    ],
    "in": [
      "p"
    ],
    "event": [
      "p"
    ],
    "an": [
      "p"
    ],
    "error": [
      "p"
    ],
    "statement": [
      "p"
    ],
    "revert": [
      "p"
    ],
    "automatically": [
      "p"
    ],
    "following": [
      "p"
    ],
    "snippet": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "programmatically": [
      "p"
    ],
    "public": [
      "pre"
    ],
    "string": [
      "pre"
    ],
    "getdataint": [
      "pre"
    ],
    "value{": [
      "pre"
    ],
    "servicesecuritycontext.current.windowsidentity.impersonate())": [
      "pre"
    ],
    "{": [
      "pre"
    ],
    "//": [
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "impersonated": [
      "pre"
    ],
    "user": [
      "pre"
    ],
    "users": [
      "pre"
    ],
    "identity": [
      "pre"
    ],
    "stringformat(\"hi,": [
      "pre"
    ],
    "{0}": [
      "pre"
    ],
    "have": [
      "pre"
    ],
    "entered": [
      "pre"
    ],
    "{1}\"": [
      "pre"
    ],
    "windowsidentitygetcurrent().name,": [
      "pre"
    ],
    "value;": [
      "pre"
    ],
    "}": [
      "pre",
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "for": [
      "ul",
      "li",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "“delegation": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "with": [
      "ul",
      "li"
    ],
    "wcf”": [
      "ul",
      "li"
    ],
    "http//msdn2.microsoft.com/en-us/library/ms730088.aspxfor": [
      "ul"
    ],
    "delegation": [
      "ul",
      "li"
    ],
    "q&a": [
      "ul",
      "li"
    ],
    "impersonation/delegation": [
      "ul",
      "li"
    ],
    "section": [
      "ul",
      "li"
    ],
    "“wcf": [
      "ul",
      "li"
    ],
    "questions": [
      "ul",
      "li"
    ],
    "answers“": [
      "ul",
      "li"
    ],
    "http//www.codeplex.com/wcfsecurityguide/wiki/view.aspx?title=wcf%20questions%20and%20answers%20%28q%26a%29&referringtitle=home": [
      "ul",
      "li",
      "a"
    ],
    "http//msdn2.microsoft.com/en-us/library/ms730088.aspx": [
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Additional Resources"
    ],
    "ul": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5 Microsoft Visual Studio® 2008",
      "For more information, see “Delegation and Impersonation with WCF” at http://msdn2.microsoft.com/en-us/library/ms730088.aspxFor impersonation and delegation Q&A, see the Impersonation/Delegation section of “WCF 3.5 Questions and Answers“ at http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF%20Questions%20and%20Answers%20%28Q%26A%29&referringTitle=Home"
    ],
    "li": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5",
      "Microsoft Visual Studio® 2008",
      "For more information, see “Delegation and Impersonation with WCF” at http://msdn2.microsoft.com/en-us/library/ms730088.aspx",
      "For impersonation and delegation Q&A, see the Impersonation/Delegation section of “WCF 3.5 Questions and Answers“ at http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF%20Questions%20and%20Answers%20%28Q%26A%29&referringTitle=Home"
    ],
    "p": [
      "If you are using impersonation, consider using programmatic instead of declarative impersonation.",
      "Programmatic impersonation is a finer-grained approach that can reduce security risk.",
      "Use programmatic impersonation to impersonate the original caller or the ASP.NET service account calling into your service.",
      "Programmatic impersonation allows you to impersonate on specific lines of code rather than the entire operation. This finer-grained approach to impersonation can reduce security risk, however be aware that it is easier to make a mistake during implementation that could leave your code impersonating at higher privilege in the event of an error. Use the using statement to revert impersonation automatically.",
      "The following code snippet shows how to impersonate programmatically:",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "public string GetData(int value){  using (ServiceSecurityContext.Current.WindowsIdentity.Impersonate()) {     // return the impersonated user (original users identity)     return string.Format(\"Hi, {0}, you have entered: {1}\",          WindowsIdentity.GetCurrent().Name, value); }   }"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://msdn2.microsoft.com/en-us/library/ms730088.aspx",
      "http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF%20Questions%20and%20Answers%20%28Q%26A%29&referringTitle=Home"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn2.microsoft.com/en-us/library/ms730088.aspx",
      "text": "http://msdn2.microsoft.com/en-us/library/ms730088.aspx"
    },
    {
      "href": "http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF%20Questions%20and%20Answers%20%28Q%26A%29&referringTitle=Home",
      "text": "http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF%20Questions%20and%20Answers%20%28Q%26A%29&referringTitle=Home"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>If you are using impersonation, consider using programmatic instead of declarative impersonation. </p>\r\n  <h1>Why</h1>\r\n  <p>Programmatic impersonation is a finer-grained approach that can reduce security risk. </p>\r\n  <h1>When</h1>\r\n  <p>Use programmatic impersonation to impersonate the original caller or the ASP.NET service account calling into your service. </p>\r\n  <h1>How</h1>\r\n  <p>Programmatic impersonation allows you to impersonate on specific lines of code rather than the entire operation. This finer-grained approach to impersonation can reduce security risk, however be aware that it is easier to make a mistake during implementation that could leave your code impersonating at higher privilege in the event of an error. Use the using statement to revert impersonation automatically.</p>\r\n  <p>The following code snippet shows how to impersonate programmatically:</p>\r\n  <pre>public string GetData(int value)<br />&#123; <br /> using (ServiceSecurityContext.Current.WindowsIdentity.Impersonate())<br /> &#123;<br />     // return the impersonated user (original users identity)<br />     return string.Format(\"Hi, &#123;0&#125;, you have entered: &#123;1&#125;\",<br />          WindowsIdentity.GetCurrent().Name, value);<br /> &#125;   <br />&#125;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information, see &#8220;Delegation and Impersonation with WCF&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms730088.aspx\">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><li>For impersonation and delegation Q&A, see the Impersonation/Delegation section of &#8220;WCF 3.5 Questions and Answers&#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Questions&#37;20and&#37;20Answers&#37;20&#37;28Q&#37;26A&#37;29&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&#37;20Questions&#37;20and&#37;20Answers&#37;20&#37;28Q&#37;26A&#37;29&referringTitle=Home</a></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}