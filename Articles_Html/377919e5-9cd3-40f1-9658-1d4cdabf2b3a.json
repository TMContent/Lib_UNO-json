{
  "id": "377919e5-9cd3-40f1-9658-1d4cdabf2b3a",
  "checksum": "7ba6139185f195071fbc54f89133baa26a19b4ca",
  "words": {
    "0": [
      "p",
      "pre"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1"
    ],
    "when": [
      "p",
      "h1",
      "p",
      "p"
    ],
    "declaring": [
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "new": [
      "p",
      "p",
      "p"
    ],
    "variable": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p"
    ],
    "function": [
      "p",
      "p"
    ],
    "initialize": [
      "p",
      "p",
      "title"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "value": [
      "p",
      "p",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "title"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "unitialized": [
      "p"
    ],
    "variables": [
      "p",
      "p",
      "p",
      "title"
    ],
    "may": [
      "p",
      "p"
    ],
    "have": [
      "p"
    ],
    "garbage": [
      "p",
      "p"
    ],
    "values": [
      "p"
    ],
    "them": [
      "p"
    ],
    "that": [
      "p",
      "p"
    ],
    "can": [
      "p"
    ],
    "cause": [
      "p"
    ],
    "program": [
      "p"
    ],
    "run": [
      "p"
    ],
    "unpredictably": [
      "p"
    ],
    "worse": [
      "p"
    ],
    "yet": [
      "p"
    ],
    "which": [
      "p"
    ],
    "default": [
      "p",
      "p"
    ],
    "debugger": [
      "p"
    ],
    "production": [
      "p",
      "p"
    ],
    "causing": [
      "p"
    ],
    "application": [
      "p"
    ],
    "behave": [
      "p"
    ],
    "differently": [
      "p"
    ],
    "environment": [
      "p"
    ],
    "than": [
      "p"
    ],
    "does": [
      "p"
    ],
    "on": [
      "p"
    ],
    "development": [
      "p"
    ],
    "machine": [
      "p"
    ],
    "in a": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "make": [
      "p",
      "p"
    ],
    "sure": [
      "p",
      "p"
    ],
    "initialized": [
      "p",
      "p"
    ],
    "safe": [
      "p"
    ],
    "if": [
      "p",
      "p"
    ],
    "its": [
      "p",
      "p"
    ],
    "first": [
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "title"
    ],
    "assign": [
      "p"
    ],
    "from": [
      "p"
    ],
    "some": [
      "p"
    ],
    "other": [
      "p",
      "p"
    ],
    "operation": [
      "p",
      "p"
    ],
    "ok": [
      "p"
    ],
    "be": [
      "p"
    ],
    "read": [
      "p"
    ],
    "for": [
      "p"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p"
    ],
    "calculation": [
      "p"
    ],
    "array": [
      "p",
      "p",
      "p"
    ],
    "index": [
      "p",
      "pre",
      "pre"
    ],
    "or": [
      "p"
    ],
    "initialization": [
      "p"
    ],
    "has": [
      "p"
    ],
    "occurred": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "following": [
      "p",
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "indexed": [
      "p",
      "p"
    ],
    "with": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "uninitialized": [
      "p"
    ],
    "char*": [
      "pre",
      "pre"
    ],
    "arrayindexing){": [
      "pre",
      "pre"
    ],
    "int": [
      "pre",
      "pre"
    ],
    "char": [
      "pre",
      "pre"
    ],
    "*buffer": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre"
    ],
    "stringarrayindex];": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "buffer}": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "all": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "When declaring a new variable in your function, initialize the variable to a value before it is used.",
      "Unitialized variables may have garbage values in them that can cause your program to run unpredictably. Worse yet, variables which default initialize to 0 in a debugger may default to a garbage value in production causing your application to behave differently in a production environment than it does on your development machine.",
      "When declaring new variables in a function.",
      "When declaring a new variable make sure it is initialized to a safe value before it is used. If its first use is to assign a value from some other operation, that is ok. If its first use is to be read for the purpose of a calculation, array index or other operation, make sure the initialization has occurred first.",
      "In the following code the array is indexed with an uninitialized variable.",
      "In the following code the array is indexed with an initialized variable."
    ],
    "pre": [
      "char* ArrayIndexing(){  int index;  char *buffer = stringArray[index];    return buffer;}",
      "char* ArrayIndexing(){  int index = 0;  char *buffer = stringArray[index];    return buffer;}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\r\n  <p>When declaring a new variable in your function, initialize the variable to a value before it is used.</p>\r\n  <h1>Why</h1>\r\n  <p>Unitialized variables may have garbage values in them that can cause your program to run unpredictably. Worse yet, variables which default initialize to 0 in a debugger may default to a garbage value in production causing your application to behave differently in a production environment than it does on your development machine.</p>\r\n  <h1>When</h1>\r\n  <p>When declaring new variables in&nbsp;a function.</p>\r\n  <h1>How</h1>\r\n  <p>When declaring a new variable make sure it is initialized to a safe value before it is used. If its first use is to assign a value from some other operation, that is ok. If its first use is to be read for the purpose of a calculation, array index or other operation, make sure the initialization has occurred first.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>In the following code the array is indexed with an uninitialized variable.</p>\r\n  <pre>char&#42; ArrayIndexing()<br />&#123;<br />&nbsp; int index;<br />  char &#42;buffer = stringArray&#91;index&#93;;  <br />  return buffer;<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following code the array is indexed with an initialized variable.</p>\r\n  <pre>char&#42; ArrayIndexing()<br />&#123;<br />&nbsp; int index = 0;<br />  char &#42;buffer = stringArray&#91;index&#93;;  <br />  return buffer;<br />&#125;</pre>"
}