{
  "id": "a1fdf065-6bfb-4828-a3ba-9440eb63a00f",
  "checksum": "2213ec0bc75c4d006906d0ac3d26fd1888b2dffd",
  "words": {
    "description": [
      "h1"
    ],
    "use": [
      "p",
      "p",
      "p",
      "title"
    ],
    "structured": [
      "p",
      "title"
    ],
    "exception-handling": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "avoid": [
      "p"
    ],
    "unhandled": [
      "p"
    ],
    "exceptions": [
      "p"
    ],
    "finally": [
      "p",
      "p",
      "b",
      "b"
    ],
    "blocks": [
      "p"
    ],
    "ensure": [
      "p",
      "p",
      "pre"
    ],
    "that": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "resources": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p"
    ],
    "released": [
      "p"
    ],
    "files": [
      "p"
    ],
    "closed": [
      "p",
      "p"
    ],
    "and": [
      "p"
    ],
    "objects": [
      "p"
    ],
    "disposed": [
      "p"
    ],
    "of&#8212regardless": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p"
    ],
    "whether": [
      "p"
    ],
    "an": [
      "p",
      "pre"
    ],
    "exception": [
      "p",
      "pre",
      "p",
      "pre",
      "title"
    ],
    "occurs": [
      "p"
    ],
    "the": [
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "example": [
      "p",
      "p"
    ],
    "shows": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p"
    ],
    "block": [
      "p",
      "p"
    ],
    "database": [
      "p"
    ],
    "connection": [
      "p",
      "pre"
    ],
    "is": [
      "p",
      "pre"
    ],
    "promptly": [
      "p"
    ],
    "using": [
      "pre"
    ],
    "systemdata.sqlclient;using": [
      "pre"
    ],
    "systemsecurity;sqlconnection": [
      "pre"
    ],
    "conn": [
      "pre"
    ],
    "=": [
      "pre",
      "pre"
    ],
    "new": [
      "pre"
    ],
    "sqlconnection\"...\");try&#123;": [
      "pre"
    ],
    "connopen();": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "do": [
      "pre"
    ],
    "some": [
      "pre"
    ],
    "operation": [
      "pre"
    ],
    "might": [
      "pre"
    ],
    "cause": [
      "pre"
    ],
    "calling": [
      "pre"
    ],
    "close": [
      "pre"
    ],
    "as": [
      "pre",
      "pre",
      "p"
    ],
    "early": [
      "pre"
    ],
    "possible": [
      "pre"
    ],
    "connclose();": [
      "pre",
      "pre"
    ],
    "..": [
      "pre"
    ],
    "other": [
      "pre",
      "pre"
    ],
    "potentially": [
      "pre"
    ],
    "long": [
      "pre"
    ],
    "operations&#125;finally&#123;": [
      "pre"
    ],
    "if": [
      "pre"
    ],
    "conn.state==connectionstate.open)": [
      "pre"
    ],
    "&#9//": [
      "pre"
    ],
    "closed&#9;&#125;": [
      "pre"
    ],
    "help": [
      "p"
    ],
    "diagnose": [
      "p",
      "p"
    ],
    "security": [
      "p"
    ],
    "issues": [
      "p"
    ],
    "consider": [
      "p",
      "p"
    ],
    "adding": [
      "p"
    ],
    "catch": [
      "p",
      "b"
    ],
    "for": [
      "p"
    ],
    "securityexception": [
      "p",
      "p",
      "b",
      "b"
    ],
    "class": [
      "p"
    ],
    "has": [
      "p"
    ],
    "been": [
      "p"
    ],
    "enhanced": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "more": [
      "p"
    ],
    "information": [
      "p",
      "pre"
    ],
    "in": [
      "p",
      "p"
    ],
    "case": [
      "p"
    ],
    "failed": [
      "p"
    ],
    "permission": [
      "p"
    ],
    "demand": [
      "p"
    ],
    "additionally": [
      "p"
    ],
    "role-based": [
      "p"
    ],
    "access": [
      "p"
    ],
    "or": [
      "p"
    ],
    "identity": [
      "p",
      "p",
      "pre"
    ],
    "problems": [
      "p"
    ],
    "logging": [
      "p"
    ],
    "at": [
      "p"
    ],
    "time": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "catchexception": [
      "pre"
    ],
    "ex&#123;...": [
      "pre"
    ],
    "log": [
      "pre"
    ],
    "current": [
      "pre"
    ],
    "together": [
      "pre"
    ],
    "with": [
      "pre"
    ],
    "windowsidentity": [
      "pre"
    ],
    "wid": [
      "pre"
    ],
    "windowsidentitygetcurrent();...&#125;&nbsp;": [
      "pre"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ],
    "how": [
      "title"
    ],
    "handling": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Description"
    ],
    "p": [
      "Use structured exception-handling to avoid unhandled exceptions. Use finally blocks to ensure that resources are released, files are closed, and objects are disposed of&#8212;regardless of whether an exception occurs. The following code example shows to use a finally block to ensure that a database connection is closed promptly.",
      "To help diagnose security issues, consider adding a catch block for the SecurityException class. SecurityException has been enhanced to provide more information in case of a failed permission demand. Additionally, to diagnose role-based access or identity problems, consider logging the identity at the time of the exception, as shown in the following code example.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "finally",
      "finally",
      "catch",
      "SecurityException",
      "SecurityException"
    ],
    "pre": [
      "using System.Data.SqlClient;using System.Security;SqlConnection conn = new SqlConnection(\"...\");try&#123;    conn.Open();    // Do some operation that might cause an exception.    // Calling Close as early as possible.    conn.Close();    // ... other potentially long operations.&#125;finally&#123;    if (conn.State==ConnectionState.Open)        conn.Close();  &#9;// ensure that the connection is closed.&#9;&#125;",
      "catch(Exception ex)&#123;...    // Log current identity together with other exception information.    WindowsIdentity wid = WindowsIdentity.GetCurrent();...&#125;&nbsp;"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Description</h1>\n  <p>Use structured exception-handling to avoid unhandled exceptions. Use <b>finally</b> blocks to ensure that resources are released, files are closed, and objects are disposed of&amp;#8212;regardless of whether an exception occurs. The following code example shows to use a <b>finally</b> block to ensure that a database connection is closed promptly. </p>\n  <pre>using System.Data.SqlClient;<br />using System.Security;<br />SqlConnection conn = new SqlConnection(\"...\");<br />try&amp;#123;<br />    conn.Open();<br />    // Do some operation that might cause an exception.<br />    // Calling Close as early as possible.<br />    conn.Close();<br />    // ... other potentially long operations.<br />&amp;#125;<br />finally&amp;#123;<br />    if (conn.State==ConnectionState.Open)<br />        conn.Close();  <br />&amp;#9;// ensure that the connection is closed.<br />&amp;#9;&amp;#125;  </pre>\n  <p>To help diagnose security issues, consider adding a <b>catch</b> block for the <b>SecurityException</b> class. <b>SecurityException</b> has been enhanced to provide more information in case of a failed permission demand. Additionally, to diagnose role-based access or identity problems, consider logging the identity at the time of the exception, as shown in the following code example. </p>\n  <pre>catch(Exception ex)&amp;#123;...<br />    // Log current identity together with other exception information.<br />    WindowsIdentity wid = WindowsIdentity.GetCurrent();...<br />&amp;#125;&amp;nbsp;</pre>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}