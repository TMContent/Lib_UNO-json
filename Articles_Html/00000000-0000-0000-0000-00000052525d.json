{
  "id": "00000000-0000-0000-0000-00000052525d",
  "checksum": "6d47ba26a8ac630438ee8a9c42c39d00a7bb4054",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "java": [
      "ul",
      "li"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2"
    ],
    "multiple": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "threads": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "within": [
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p"
    ],
    "servlet": [
      "p"
    ],
    "session": [
      "p"
    ],
    "may": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p"
    ],
    "have": [
      "p"
    ],
    "access": [
      "p",
      "title"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "same": [
      "p",
      "p"
    ],
    "httpsession": [
      "p",
      "em",
      "p",
      "em",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "em",
      "em",
      "em",
      "em",
      "li",
      "em",
      "li",
      "em",
      "title"
    ],
    "objects": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "avoid": [
      "p"
    ],
    "using": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li"
    ],
    "instance": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p"
    ],
    "static": [
      "p"
    ],
    "class": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "variables": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "always": [
      "p"
    ],
    "consider": [
      "p"
    ],
    "thread": [
      "p",
      "p",
      "p",
      "title"
    ],
    "safety": [
      "p",
      "p",
      "title"
    ],
    "during": [
      "p"
    ],
    "object": [
      "p",
      "ol",
      "li",
      "title"
    ],
    "initialization": [
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "modification": [
      "p"
    ],
    "why": [
      "h2"
    ],
    "improper": [
      "p"
    ],
    "handling": [
      "p",
      "ol",
      "li",
      "strong"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "title"
    ],
    "can": [
      "p",
      "p"
    ],
    "lead": [
      "p",
      "p"
    ],
    "race": [
      "p"
    ],
    "conditions": [
      "p"
    ],
    "concurrency": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "issues": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "how": [
      "h2"
    ],
    "ensure": [
      "p",
      "title"
    ],
    "identify": [
      "ol",
      "li",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "that": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p"
    ],
    "be": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "modified": [
      "ol",
      "li",
      "strong"
    ],
    "by": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "find": [
      "ol",
      "li"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "modifies": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "which": [
      "ol",
      "li"
    ],
    "accessed": [
      "ol",
      "li"
    ],
    "one": [
      "ol",
      "li"
    ],
    "approach": [
      "ol",
      "li"
    ],
    "is": [
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "search": [
      "ol",
      "li"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li"
    ],
    "keyword": [
      "ol",
      "li"
    ],
    "then": [
      "ol",
      "li"
    ],
    "trace": [
      "ol",
      "li"
    ],
    "each": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "throughout": [
      "ol",
      "li"
    ],
    "use": [
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "immutable": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "ul",
      "li"
    ],
    "as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "strong"
    ],
    "much": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "possible": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "sound": [
      "ol",
      "li"
    ],
    "practice": [
      "ol",
      "li"
    ],
    "avoiding": [
      "ol",
      "li"
    ],
    "should": [
      "ol",
      "li"
    ],
    "used": [
      "ol",
      "li"
    ],
    "specifics": [
      "ol",
      "li"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "different": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "applications": [
      "ol",
      "li"
    ],
    "methods": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "local": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "data": [
      "ol",
      "li",
      "strong"
    ],
    "piece": [
      "ol",
      "li"
    ],
    "\"thread-safe\"": [
      "ol",
      "li"
    ],
    "if": [
      "ol",
      "li"
    ],
    "synchronize": [
      "ol",
      "li",
      "strong"
    ],
    "critical": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p"
    ],
    "sections": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "strong"
    ],
    "executed": [
      "ol",
      "li",
      "strong"
    ],
    "single": [
      "ol",
      "li",
      "strong"
    ],
    "operation": [
      "ol",
      "li",
      "strong"
    ],
    "complex": [
      "ol",
      "li"
    ],
    "operations": [
      "ol",
      "li"
    ],
    "on": [
      "ol",
      "li"
    ],
    "make": [
      "ol",
      "li"
    ],
    "sure": [
      "ol",
      "li"
    ],
    "synchronized": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h2"
    ],
    "example": [
      "h2",
      "h2"
    ],
    "shopping": [
      "p"
    ],
    "cart": [
      "p"
    ],
    "has": [
      "p"
    ],
    "pay": [
      "p"
    ],
    "now": [
      "p"
    ],
    "button": [
      "p",
      "p"
    ],
    "finalizes": [
      "p"
    ],
    "purchase": [
      "p"
    ],
    "charges": [
      "p"
    ],
    "customerâ€™s": [
      "p"
    ],
    "credit": [
      "p",
      "p"
    ],
    "card": [
      "p",
      "p"
    ],
    "an": [
      "p"
    ],
    "application": [
      "p"
    ],
    "not": [
      "p"
    ],
    "safe": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "user": [
      "p"
    ],
    "double-click": [
      "p"
    ],
    "charge": [
      "p"
    ],
    "customer": [
      "p"
    ],
    "twice": [
      "p"
    ],
    "transaction": [
      "p"
    ],
    "solution": [
      "h2"
    ],
    "both": [
      "p"
    ],
    "help": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "might": [
      "p"
    ],
    "simultaneous": [
      "p"
    ],
    "transactions": [
      "p"
    ],
    "additional": [
      "h2"
    ],
    "resources": [
      "h2"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html\n</add:></replace>": [
      "ul",
      "li"
    ],
    "http//docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html": [
      "a"
    ],
    "proper": [
      "title"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "How",
      "Problem Example",
      "Solution Example",
      "Additional Resources"
    ],
    "ul": [
      "Java",
      "For more information about using immutable objects, see http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html\n</add:></replace>"
    ],
    "li": [
      "Java",
      "Identify all HttpSession objects that may be modified by multiple threads. Find all code that modifies HttpSession objects, which may be accessed by multiple threads. One approach is to search code for the HttpSession keyword and then trace each HttpSession object throughout the code.",
      "Use immutable objects as much as possible. Using immutable objects is a sound practice for avoiding concurrency issues and should be used as much as possible. The specifics of using immutable objects are different for different applications.",
      "Use class methods and local variables data handling. For each piece of code that modifies HttpSession objects, use \"thread-safe\" class methods and local variables if possible.",
      "Synchronize critical sections that must be executed as a single operation. For complex operations on HttpSession objects, make sure that critical sections are synchronized.",
      "For more information about using immutable objects, see http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html\n</add:></replace>"
    ],
    "p": [
      "Multiple threads within a servlet session may have access to the same HttpSession objects. Avoid using instance and static class variables and always consider thread safety during object initialization or modification.",
      "Improper handling of HttpSession objects can lead to race conditions and concurrency issues.",
      "To ensure thread safety:",
      "A shopping cart has a Pay Now button that finalizes a purchase and charges the customerâ€™s credit card. An application that is not thread safe may allow for a user to double-click the button and charge the customer twice for the same transaction.",
      "Synchronized critical sections or immutable objects both can help prevent concurrency issues that might lead to simultaneous credit card transactions."
    ],
    "em": [
      "HttpSession",
      "HttpSession",
      "HttpSession",
      "HttpSession",
      "HttpSession",
      "HttpSession",
      "HttpSession",
      "HttpSession"
    ],
    "ol": [
      "Identify all HttpSession objects that may be modified by multiple threads. Find all code that modifies HttpSession objects, which may be accessed by multiple threads. One approach is to search code for the HttpSession keyword and then trace each HttpSession object throughout the code.\n Use immutable objects as much as possible. Using immutable objects is a sound practice for avoiding concurrency issues and should be used as much as possible. The specifics of using immutable objects are different for different applications.\n Use class methods and local variables data handling. For each piece of code that modifies HttpSession objects, use \"thread-safe\" class methods and local variables if possible. \n Synchronize critical sections that must be executed as a single operation. For complex operations on HttpSession objects, make sure that critical sections are synchronized."
    ],
    "strong": [
      "Identify all HttpSession objects that may be modified by multiple threads.",
      "Use immutable objects as much as possible.",
      "Use class methods and local variables data handling.",
      "Synchronize critical sections that must be executed as a single operation."
    ],
    "a": [
      "http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html"
    ]
  },
  "links": [
    {
      "href": "http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html",
      "text": "http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> Java</li>\n</ul>\n<h2>What to Do</h2><p>Multiple threads within a servlet session may have access to the same <em>HttpSession</em> objects. Avoid using instance and static class variables and always consider thread safety during object initialization or modification.\n</p>\n<h2>Why</h2><p>Improper handling of <em>HttpSession</em> objects can lead to race conditions and concurrency issues.\n</p>\n<h2>How</h2><p>To ensure thread safety:\n</p><ol>\n<li> <strong>Identify all <em>HttpSession</em> objects that may be modified by multiple threads.</strong> Find all code that modifies <em>HttpSession</em> objects, which may be accessed by multiple threads. One approach is to search code for the <em>HttpSession</em> keyword and then trace each <em>HttpSession</em> object throughout the code.</li>\n<li> <strong>Use immutable objects as much as possible.</strong> Using immutable objects is a sound practice for avoiding concurrency issues and should be used as much as possible. The specifics of using immutable objects are different for different applications.</li>\n<li> <strong>Use class methods and local variables data handling.</strong> For each piece of code that modifies <em>HttpSession</em> objects, use \"thread-safe\" class methods and local variables if possible. </li>\n<li> <strong>Synchronize critical sections that must be executed as a single operation.</strong> For complex operations on <em>HttpSession</em> objects, make sure that critical sections are synchronized.</li>\n</ol>\n<h2>Problem Example</h2><p>A shopping cart has a Pay Now button that finalizes a purchase and charges the customerâ€™s credit card. An application that is not thread safe may allow for a user to double-click the button and charge the customer twice for the same transaction.\n</p>\n<h2>Solution Example</h2><p>Synchronized critical sections or immutable objects both can help prevent concurrency issues that might lead to simultaneous credit card transactions.  \n</p>\n<h2>Additional Resources</h2><ul><li> For more information about using immutable objects, see <a href=\"http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html\">http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html</a>\n&lt;/add:&gt;&lt;/replace&gt;</li></ul>"
}