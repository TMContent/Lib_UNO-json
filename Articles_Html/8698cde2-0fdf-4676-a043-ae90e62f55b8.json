{
  "id": "8698cde2-0fdf-4676-a043-ae90e62f55b8",
  "checksum": "0d16d61afa8af9e8deea3cb12252d461611bd679",
  "words": {
    "1": [
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "all": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "description": [
      "h1"
    ],
    "command": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "title"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "attacks": [
      "p",
      "p"
    ],
    "are": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "subset": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "through": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "control": [
      "p",
      "ul",
      "li"
    ],
    "information": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "into": [
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "data": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "stream": [
      "p"
    ],
    "attack": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "title"
    ],
    "tricks": [
      "p"
    ],
    "process": [
      "p",
      "ul",
      "li"
    ],
    "either": [
      "p"
    ],
    "executing": [
      "p"
    ],
    "code": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "or": [
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "calling": [
      "p"
    ],
    "external": [
      "p",
      "ul",
      "li"
    ],
    "processes": [
      "p"
    ],
    "attacker's": [
      "p"
    ],
    "choice": [
      "p"
    ],
    "impact": [
      "h1"
    ],
    "elevation": [
      "ul",
      "li"
    ],
    "privilege": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "can": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "allow": [
      "ul",
      "li",
      "p"
    ],
    "an": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "attacker": [
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "execute": [
      "ul",
      "li"
    ],
    "arbitrary": [
      "ul",
      "li",
      "p"
    ],
    "commands": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "and": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "vulnerabilities": [
      "h1"
    ],
    "failure": [
      "ul",
      "li"
    ],
    "validate": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "user": [
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "input": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "situations": [
      "ul",
      "li"
    ],
    "where": [
      "ul",
      "li"
    ],
    "mixed": [
      "ul",
      "li"
    ],
    "create": [
      "ul",
      "li"
    ],
    "opportunities": [
      "ul",
      "li"
    ],
    "for": [
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li"
    ],
    "being": [
      "ul",
      "li"
    ],
    "included": [
      "ul",
      "li"
    ],
    "in": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "by": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "validating": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "type": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "length": [
      "ul",
      "li"
    ],
    "range": [
      "ul",
      "li"
    ],
    "format": [
      "ul",
      "li"
    ],
    "use": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "whitelist": [
      "ul",
      "li"
    ],
    "approach": [
      "ul",
      "li"
    ],
    "acceptable": [
      "ul",
      "li"
    ],
    "reject": [
      "ul",
      "li"
    ],
    "everything": [
      "ul",
      "li"
    ],
    "else": [
      "ul",
      "li"
    ],
    "escape": [
      "ul",
      "li"
    ],
    "meta": [
      "ul",
      "li"
    ],
    "characters": [
      "ul",
      "li"
    ],
    "be": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "aware": [
      "ul",
      "li"
    ],
    "canonicalization": [
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "issues": [
      "ul",
      "li"
    ],
    "remember": [
      "ul",
      "li"
    ],
    "that": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "may": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "changed": [
      "ul",
      "li"
    ],
    "as": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "it": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "flows": [
      "ul",
      "li"
    ],
    "program": [
      "ul",
      "li"
    ],
    "so": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "multiple": [
      "ul",
      "li"
    ],
    "stages": [
      "ul",
      "li"
    ],
    "is": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "often": [
      "ul",
      "li"
    ],
    "appropriate\ndo": [
      "ul"
    ],
    "not": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "directly": [
      "ul",
      "li"
    ],
    "clever": [
      "ul",
      "li"
    ],
    "formatting": [
      "ul",
      "li"
    ],
    "treated": [
      "ul",
      "li"
    ],
    "its": [
      "ul",
      "li"
    ],
    "own": [
      "ul",
      "li"
    ],
    "separate": [
      "ul",
      "li"
    ],
    "instead": [
      "ul",
      "li"
    ],
    "therefore": [
      "ul",
      "li"
    ],
    "explicitly": [
      "ul",
      "li"
    ],
    "cannot": [
      "ul",
      "li"
    ],
    "interpreted": [
      "ul",
      "li"
    ],
    "even": [
      "ul",
      "li"
    ],
    "if": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "contains": [
      "ul",
      "li"
    ],
    "one\navoid": [
      "ul"
    ],
    "using": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "interpreters": [
      "ul",
      "li"
    ],
    "although": [
      "ul",
      "li"
    ],
    "always": [
      "ul",
      "li"
    ],
    "practical": [
      "ul",
      "li"
    ],
    "well": [
      "ul",
      "li"
    ],
    "maintained": [
      "ul",
      "li"
    ],
    "api": [
      "ul",
      "li"
    ],
    "will": [
      "ul",
      "li"
    ],
    "have": [
      "ul",
      "li",
      "p"
    ],
    "better": [
      "ul",
      "li"
    ],
    "results": [
      "ul",
      "li"
    ],
    "than": [
      "ul",
      "li",
      "p"
    ],
    "invoking": [
      "ul",
      "li"
    ],
    "interpreter": [
      "ul",
      "li"
    ],
    "appropriate": [
      "li"
    ],
    "do": [
      "li"
    ],
    "one": [
      "li"
    ],
    "avoid": [
      "li"
    ],
    "example": [
      "h1",
      "p"
    ],
    "following": [
      "p"
    ],
    "wrapper": [
      "p"
    ],
    "around": [
      "p"
    ],
    "unix": [
      "p"
    ],
    "cat": [
      "p",
      "pre"
    ],
    "which": [
      "p"
    ],
    "prints": [
      "p"
    ],
    "contents": [
      "p",
      "p"
    ],
    "file": [
      "p",
      "p"
    ],
    "standard": [
      "p",
      "p"
    ],
    "out": [
      "p"
    ],
    "also": [
      "p"
    ],
    "injectable": [
      "p"
    ],
    "#include": [
      "pre"
    ],
    "stdio.h>\n#include": [
      "pre"
    ],
    "unistd.h>\n\nint": [
      "pre"
    ],
    "mainint": [
      "pre"
    ],
    "argc": [
      "pre"
    ],
    "char": [
      "pre",
      "pre",
      "pre"
    ],
    "**argv": [
      "pre"
    ],
    "{": [
      "pre"
    ],
    "cat]": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre"
    ],
    "\"cat": [
      "pre"
    ],
    "\"\n\nchar": [
      "pre"
    ],
    "*command\n\nsize_t": [
      "pre"
    ],
    "commandlength\n\ncommandlength": [
      "pre"
    ],
    "strlencat)": [
      "pre"
    ],
    "+": [
      "pre",
      "pre"
    ],
    "strlenargv[1])": [
      "pre"
    ],
    "*": [
      "pre"
    ],
    "malloccommandlength);\n\nstrncpy(command,": [
      "pre"
    ],
    "commandlength;\n\nstrncat(command,": [
      "pre"
    ],
    "argv1],": [
      "pre"
    ],
    "commandlength": [
      "pre"
    ],
    "-": [
      "pre"
    ],
    "strlencat))": [
      "pre"
    ],
    ";": [
      "pre"
    ],
    "systemcommand);": [
      "pre"
    ],
    "return": [
      "pre"
    ],
    "0);\n}": [
      "pre"
    ],
    "used": [
      "p"
    ],
    "normally": [
      "p"
    ],
    "output": [
      "p"
    ],
    "simply": [
      "p",
      "p"
    ],
    "requested": [
      "p"
    ],
    "$": [
      "pre",
      "pre"
    ],
    "/catwrapper": [
      "pre",
      "pre"
    ],
    "storytxt\nwhen": [
      "pre"
    ],
    "last": [
      "pre",
      "pre"
    ],
    "we": [
      "pre",
      "p",
      "pre"
    ],
    "left": [
      "pre",
      "pre"
    ],
    "our": [
      "pre",
      "pre"
    ],
    "heroes..": [
      "pre"
    ],
    "however": [
      "p"
    ],
    "add": [
      "p"
    ],
    "semicolon": [
      "p"
    ],
    "another": [
      "p",
      "p"
    ],
    "end": [
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "line": [
      "p"
    ],
    "executed": [
      "p",
      "p",
      "p"
    ],
    "catwrapper": [
      "p",
      "pre",
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "p"
    ],
    "no": [
      "p"
    ],
    "complaint": [
      "p"
    ],
    "storytxt;": [
      "pre"
    ],
    "lswhen": [
      "pre"
    ],
    "heroes..\nstory.txt": [
      "pre"
    ],
    "had": [
      "p"
    ],
    "been": [
      "p"
    ],
    "set": [
      "p"
    ],
    "higher": [
      "p",
      "p"
    ],
    "level": [
      "p"
    ],
    "could": [
      "p",
      "p"
    ],
    "anonymously": [
      "p"
    ],
    "behavior": [
      "p"
    ],
    "seen": [
      "p"
    ],
    "xsl": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "style": [
      "p",
      "p",
      "p",
      "p"
    ],
    "sheet": [
      "p",
      "p",
      "p"
    ],
    "language": [
      "p"
    ],
    "xml": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "primary": [
      "p"
    ],
    "purpose": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "easy": [
      "p"
    ],
    "modular": [
      "p"
    ],
    "way": [
      "p"
    ],
    "transform": [
      "p"
    ],
    "documents": [
      "p",
      "p"
    ],
    "other": [
      "p"
    ],
    "such": [
      "p"
    ],
    "html": [
      "p"
    ],
    "particular": [
      "p"
    ],
    "different": [
      "p"
    ],
    "styles": [
      "p"
    ],
    "attached": [
      "p"
    ],
    "same": [
      "p"
    ],
    "sometimes": [
      "p"
    ],
    "supplied": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "extended": [
      "p"
    ],
    "functionality": [
      "p"
    ],
    "scripting": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "embedded": [
      "p"
    ],
    "sheets": [
      "p"
    ],
    "msxsl:script>": [
      "p"
    ],
    "tag": [
      "p"
    ],
    "has": [
      "p"
    ],
    "ability": [
      "p"
    ],
    "modify": [
      "p"
    ],
    "replace": [
      "p"
    ],
    "he": [
      "p"
    ],
    "then": [
      "p"
    ],
    "inject": [
      "p"
    ],
    "any": [
      "p"
    ],
    "system": [
      "p"
    ],
    "running": [
      "p"
    ],
    "application": [
      "p"
    ],
    "including": [
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "li"
    ],
    "on": [
      "ul",
      "li"
    ],
    "javascript": [
      "ul",
      "li"
    ],
    "eval": [
      "ul",
      "li"
    ],
    "function": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/eval.": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/eval": [
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "attackattack:": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul"
    ],
    "server-side": [
      "ul",
      "li",
      "a"
    ],
    "sql": [
      "ul",
      "li",
      "a"
    ],
    "xpath-xquery": [
      "ul",
      "li",
      "a"
    ],
    "client-side": [
      "ul",
      "li",
      "a"
    ],
    "validation": [
      "ul",
      "li",
      "a"
    ],
    "cross": [
      "ul",
      "li",
      "a"
    ],
    "site": [
      "ul",
      "li",
      "a"
    ],
    "ajax": [
      "ul",
      "li",
      "a"
    ],
    "ldap": [
      "ul",
      "li",
      "a"
    ],
    "man": [
      "ul",
      "li",
      "a"
    ],
    "middle": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Description",
      "Impact",
      "Vulnerabilities",
      "Countermeasures",
      "Example",
      "Additional Resources",
      "Related Items"
    ],
    "p": [
      "All applications.",
      "Command injection attacks are a subset of injection attacks. Through injection of control information into the data stream, a command injection attack tricks the process into either executing code or calling external processes of the attacker's choice.",
      "The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:",
      "Used normally, the output is simply the contents of the file requested:",
      "However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:",
      "If catWrapper had been set to have a higher privilege level than the standard user or could be executed anonymously, arbitrary commands could be executed with that higher privilege.",
      "Another example of this type of behavior can be seen with XSL, the style sheet language for XML. The primary purpose of XSL is to provide an easy and modular way to transform XML documents into other XML documents such as HTML. In particular, different XSL styles can be attached to the same XML and are sometimes supplied by the user. Microsoft extended the functionality of XSL to allow scripting code to be embedded in the style sheets with the <msxsl:script> tag. If an attacker has the ability to modify or replace the XSL style sheet in use, he can then inject any command into the system running the application simply by including it in the style sheet."
    ],
    "ul": [
      "Elevation of privilege: Command injection can allow an attacker to execute arbitrary commands and code.",
      "Failure to validate user input: Situations where control information and data are mixed create opportunities for command injection.",
      "Validate user input: Prevent commands from being included in data by validating input for type, length, range, and format. Use a whitelist approach to validate acceptable input, and reject everything else. Escape meta characters and be aware of canonicalization issues. Remember that data may be changed as it flows through the program, so validating at multiple stages is often appropriate.\nDo not use input data directly in commands: An attacker may use clever formatting so that input is treated as its own separate command instead of as data. Therefore, validate the input and explicitly type it as data so that it cannot be interpreted as a command even if it contains one.\nAvoid using command interpreters: Although not always practical, using a well maintained API will have better results than invoking commands through an interpreter or external process.",
      "For more information on the Javascript Eval function, see: http://en.wikipedia.org/wiki/Eval.",
      "Attack: Canonicalization Attack\nAttack: Server-Side Code Injection Attack\nAttack: SQL Injection Attack\nAttack: XML Injection Attack\nAttack: Xpath-XQuery Attack\nAttack: Client-side Validation Attack\nAttack: Cross Site Scripting Attack\nAttack: AJAX Injection Attack\nAttack: LDAP Injection Attack\nAttack: Man in the Middle Attack"
    ],
    "li": [
      "Elevation of privilege: Command injection can allow an attacker to execute arbitrary commands and code.",
      "Failure to validate user input: Situations where control information and data are mixed create opportunities for command injection.",
      "Validate user input: Prevent commands from being included in data by validating input for type, length, range, and format. Use a whitelist approach to validate acceptable input, and reject everything else. Escape meta characters and be aware of canonicalization issues. Remember that data may be changed as it flows through the program, so validating at multiple stages is often appropriate.",
      "Do not use input data directly in commands: An attacker may use clever formatting so that input is treated as its own separate command instead of as data. Therefore, validate the input and explicitly type it as data so that it cannot be interpreted as a command even if it contains one.",
      "Avoid using command interpreters: Although not always practical, using a well maintained API will have better results than invoking commands through an interpreter or external process.",
      "For more information on the Javascript Eval function, see: http://en.wikipedia.org/wiki/Eval.",
      "Attack: Canonicalization Attack",
      "Attack: Server-Side Code Injection Attack",
      "Attack: SQL Injection Attack",
      "Attack: XML Injection Attack",
      "Attack: Xpath-XQuery Attack",
      "Attack: Client-side Validation Attack",
      "Attack: Cross Site Scripting Attack",
      "Attack: AJAX Injection Attack",
      "Attack: LDAP Injection Attack",
      "Attack: Man in the Middle Attack"
    ],
    "pre": [
      "#include <stdio.h>\n#include <unistd.h>\n\nint main(int argc, char **argv) \n{  \nchar cat[] = \"cat \";\n\nchar *command;\n\nsize_t commandLength;\n\ncommandLength = strlen(cat) + strlen(argv[1]) + 1;  \n\ncommand = (char *) malloc(commandLength);\n\nstrncpy(command, cat, commandLength);\n\nstrncat(command, argv[1], (commandLength - strlen(cat)) ); \n\nsystem(command);  return (0);\n}",
      "$ ./catWrapper Story.txt\nWhen last we left our heroes...",
      "$ ./catWrapper Story.txt; ls\nWhen last we left our heroes...\nStory.txt \ncatWrapper"
    ],
    "a": [
      "http://en.wikipedia.org/wiki/Eval",
      "Attack: Canonicalization Attack",
      "Attack: Server-Side Code Injection Attack",
      "Attack: SQL Injection Attack",
      "Attack: XML Injection Attack",
      "Attack: Xpath-XQuery Attack",
      "Attack: Client-side Validation Attack",
      "Attack: Cross Site Scripting Attack",
      "Attack: AJAX Injection Attack",
      "Attack: LDAP Injection Attack",
      "Attack: Man in the Middle Attack"
    ]
  },
  "links": [
    {
      "href": "http://en.wikipedia.org/wiki/Eval",
      "text": "http://en.wikipedia.org/wiki/Eval"
    },
    {
      "href": "00d296c8-2c75-47ef-a659-5b4f25d5c73f",
      "text": "Attack: Canonicalization Attack"
    },
    {
      "href": "9d60faca-687b-4c69-91ba-f5712af0fd02",
      "text": "Attack: Server-Side Code Injection Attack"
    },
    {
      "href": "b1757bda-0a0d-48e7-b101-3c4088e41878",
      "text": "Attack: SQL Injection Attack"
    },
    {
      "href": "ae392dbb-fdb4-443f-9d17-78240b4acc95",
      "text": "Attack: XML Injection Attack"
    },
    {
      "href": "1508d763-03f1-4b43-bf8e-ad7cf8edebd7",
      "text": "Attack: Xpath-XQuery Attack"
    },
    {
      "href": "1408d3c3-7fc1-4ff0-910e-cdf0e191b669",
      "text": "Attack: Client-side Validation Attack"
    },
    {
      "href": "36ce61ac-adcc-45a9-9910-95d477142c8b",
      "text": "Attack: Cross Site Scripting Attack"
    },
    {
      "href": "e4a899ec-9301-4751-ae07-69a265336d8b",
      "text": "Attack: AJAX Injection Attack"
    },
    {
      "href": "61f0d74e-d9b6-4e27-9e12-da65baff83fd",
      "text": "Attack: LDAP Injection Attack"
    },
    {
      "href": "41ff6525-2cae-40a5-91e9-365d2d26feb9",
      "text": "Attack: Man in the Middle Attack"
    }
  ],
  "html": "<h1>Applies To</h1><p>All applications.\n</p><h1>Description</h1><p>Command injection attacks are a subset of injection attacks. Through injection of control information into the data stream, a command injection attack tricks the process into either executing code or calling external processes of the attacker's choice.\n</p><h1>Impact</h1><ul><li>Elevation of privilege: Command injection can allow an attacker to execute arbitrary commands and code.</li>\n</ul><h1>Vulnerabilities</h1><ul><li>Failure to validate user input: Situations where control information and data are mixed create opportunities for command injection.</li>\n</ul><h1>Countermeasures</h1><ul><li>Validate user input: Prevent commands from being included in data by validating input for type, length, range, and format. Use a whitelist approach to validate acceptable input, and reject everything else. Escape meta characters and be aware of canonicalization issues. Remember that data may be changed as it flows through the program, so validating at multiple stages is often appropriate.</li>\n<li>Do not use input data directly in commands: An attacker may use clever formatting so that input is treated as its own separate command instead of as data. Therefore, validate the input and explicitly type it as data so that it cannot be interpreted as a command even if it contains one.</li>\n<li>Avoid using command interpreters: Although not always practical, using a well maintained API will have better results than invoking commands through an interpreter or external process.</li>\n</ul><h1>Example</h1><p>The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:\n</p><pre>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char **argv) \n{  \nchar cat[] = \"cat \";\n\nchar *command;\n\nsize_t commandLength;\n\ncommandLength = strlen(cat) + strlen(argv[1]) + 1;  \n\ncommand = (char *) malloc(commandLength);\n\nstrncpy(command, cat, commandLength);\n\nstrncat(command, argv[1], (commandLength - strlen(cat)) ); \n\nsystem(command);  return (0);\n}\n\n</pre><p>\nUsed normally, the output is simply the contents of the file requested:\n</p><pre>$ ./catWrapper Story.txt\nWhen last we left our heroes...\n</pre><p>\nHowever, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:\n</p><pre>$ ./catWrapper Story.txt; ls\nWhen last we left our heroes...\nStory.txt \ncatWrapper\n</pre><p>\nIf catWrapper had been set to have a higher privilege level than the standard user or could be executed anonymously, arbitrary commands could be executed with that higher privilege.\n</p><p>\nAnother example of this type of behavior can be seen with XSL, the style sheet language for XML. The primary purpose of XSL is to provide an easy and modular way to transform XML documents into other XML documents such as HTML. In particular, different XSL styles can be attached to the same XML and are sometimes supplied by the user. Microsoft extended the functionality of XSL to allow scripting code to be embedded in the style sheets with the &lt;msxsl:script&gt; tag. If an attacker has the ability to modify or replace the XSL style sheet in use, he can then inject any command into the system running the application simply by including it in the style sheet.\n</p><h1>Additional Resources</h1><ul><li>For more information on the Javascript Eval function, see: <a href=\"http://en.wikipedia.org/wiki/Eval\">http://en.wikipedia.org/wiki/Eval</a>.</li>\n</ul>    <h1>Related Items</h1><ul><li><a href=\"00d296c8-2c75-47ef-a659-5b4f25d5c73f\">Attack: Canonicalization Attack</a></li>\n<li><a href=\"9d60faca-687b-4c69-91ba-f5712af0fd02\">Attack: Server-Side Code Injection Attack</a></li>\n<li><a href=\"b1757bda-0a0d-48e7-b101-3c4088e41878\">Attack: SQL Injection Attack</a></li>\n<li><a href=\"ae392dbb-fdb4-443f-9d17-78240b4acc95\">Attack: XML Injection Attack</a></li>\n<li><a href=\"1508d763-03f1-4b43-bf8e-ad7cf8edebd7\">Attack: Xpath-XQuery Attack</a></li>\n<li><a href=\"1408d3c3-7fc1-4ff0-910e-cdf0e191b669\">Attack: Client-side Validation Attack</a></li>\n<li><a href=\"36ce61ac-adcc-45a9-9910-95d477142c8b\">Attack: Cross Site Scripting Attack</a></li>\n<li><a href=\"e4a899ec-9301-4751-ae07-69a265336d8b\">Attack: AJAX Injection Attack</a></li>\n<li><a href=\"61f0d74e-d9b6-4e27-9e12-da65baff83fd\">Attack: LDAP Injection Attack</a></li>\n<li><a href=\"41ff6525-2cae-40a5-91e9-365d2d26feb9\">Attack: Man in the Middle Attack</a></li>\n</ul>\n\n"
}