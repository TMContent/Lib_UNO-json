{
  "id": "43a5d4f2-540b-42cc-b928-0da2e36ed8b2",
  "checksum": "93fe7641f572ed89b318f950c4dbdc697e32b7af",
  "words": {
    "35": [
      "ul",
      "li"
    ],
    "2008": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "title"
    ],
    "microsoft®": [
      "ul",
      "li"
    ],
    "windows": [
      "ul",
      "li"
    ],
    "communication": [
      "ul",
      "li"
    ],
    "foundation": [
      "ul",
      "li"
    ],
    "wcf)": [
      "ul",
      "li"
    ],
    "microsoft": [
      "ul",
      "li",
      "p"
    ],
    "visual": [
      "ul",
      "li"
    ],
    "studio®": [
      "ul",
      "li"
    ],
    "description": [
      "h1"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "fault": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "title"
    ],
    "contract": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "details": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "set": [
      "p",
      "p"
    ],
    "of": [
      "p",
      "p"
    ],
    "exceptions": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p"
    ],
    "may": [
      "p"
    ],
    "be": [
      "p"
    ],
    "reported": [
      "p"
    ],
    "caller": [
      "p"
    ],
    "you": [
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "specify": [
      "p"
    ],
    "possible": [
      "p",
      "p"
    ],
    "faults": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "occur": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "wcf": [
      "p",
      "p"
    ],
    "service": [
      "p",
      "p"
    ],
    "this": [
      "p"
    ],
    "prevents": [
      "p"
    ],
    "exposing": [
      "p"
    ],
    "exception": [
      "p",
      "p",
      "title"
    ],
    "beyond": [
      "p"
    ],
    "defined": [
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "clients": [
      "p",
      "p"
    ],
    "since": [
      "p"
    ],
    "lists": [
      "p"
    ],
    "type": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "errors": [
      "p",
      "p"
    ],
    "throw": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "pre"
    ],
    "it": [
      "p",
      "ol",
      "li"
    ],
    "also": [
      "p"
    ],
    "allows": [
      "p"
    ],
    "distinguish": [
      "p"
    ],
    "between": [
      "p"
    ],
    "contracted": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "other": [
      "p"
    ],
    "use": [
      "p"
    ],
    "following": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "shield": [
      "p",
      "title"
    ],
    "information": [
      "p",
      "ul",
      "li",
      "title"
    ],
    "with": [
      "p",
      "title"
    ],
    "contracts": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "define": [
      "ol",
      "li"
    ],
    "by": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "applying": [
      "ol",
      "li"
    ],
    "faultcontract": [
      "ol",
      "li"
    ],
    "attribute": [
      "ol",
      "li"
    ],
    "directly": [
      "ol",
      "li"
    ],
    "on": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "operation": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "specifying": [
      "ol",
      "li"
    ],
    "error": [
      "ol",
      "li"
    ],
    "detailing": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "method": [
      "ol",
      "li"
    ],
    "as": [
      "ol",
      "li"
    ],
    "shown": [
      "ol",
      "li"
    ],
    "below\r\n[servicecontract]interface": [
      "ol",
      "li"
    ],
    "icalculator{": [
      "ol",
      "ol",
      "li",
      "ol",
      "pre",
      "li",
      "ol",
      "pre"
    ],
    "operationcontract]": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "faultcontract(typeof(dividebyzeroexception))]": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "double": [
      "ol",
      "ol",
      "li",
      "ol",
      "pre",
      "li",
      "ol",
      "pre"
    ],
    "dividedouble": [
      "ol",
      "ol",
      "li",
      "ol",
      "pre",
      "li",
      "ol",
      "pre"
    ],
    "number1double": [
      "ol",
      "ol",
      "li",
      "ol",
      "pre",
      "li",
      "ol",
      "pre"
    ],
    "number2;}implement": [
      "ol"
    ],
    "divide": [
      "ol",
      "li"
    ],
    "which": [
      "ol",
      "li"
    ],
    "have": [
      "ol",
      "li"
    ],
    "propagated": [
      "ol",
      "li"
    ],
    "client": [
      "ol",
      "li"
    ],
    "throwing": [
      "ol",
      "li"
    ],
    "exactly": [
      "ol",
      "li"
    ],
    "same": [
      "ol",
      "li"
    ],
    "listed": [
      "ol",
      "li"
    ],
    "contract\r\nclass": [
      "ol",
      "li"
    ],
    "myservice": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "public": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "number2": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "{": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "new": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "faultexceptiondividebyzeroexception>(new": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "dividebyzeroexception));": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "}}": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "number2;}": [
      "li",
      "ol",
      "pre"
    ],
    "servicecontract]interface": [
      "ol",
      "pre"
    ],
    "implement": [
      "li"
    ],
    "class": [
      "ol",
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "for": [
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "“specifying": [
      "ul",
      "li"
    ],
    "handling": [
      "ul",
      "li"
    ],
    "services”": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/ms733721.aspx": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "how": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Description",
      "Additional Resources"
    ],
    "ul": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5 \r\nMicrosoft Visual Studio® 2008",
      "For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "li": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5",
      "Microsoft Visual Studio® 2008",
      "Define a Fault contract by applying the FaultContract attribute directly on a contract operation, and specifying the error detailing type to the method as shown below:\r\n[ServiceContract]interface ICalculator{   [OperationContract]   [FaultContract(typeof(DivideByZeroException))]   double Divide(double number1,double number2);}",
      "Implement the Divide operation which throw the fault and have it propagated to the client by throwing exactly the same detailing type listed in the fault contract.\r\nclass MyService : ICalculator{   public double Divide(double number1,double number2)   {      throw new FaultException<DivideByZeroException>(new DivideByZeroException());   }}",
      "For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "p": [
      "A fault contract details the set of exceptions that may be reported to the caller. You can specify the possible faults that can occur in you WCF service. This prevents exposing exception details beyond the defined set to your clients. Since a fault contract lists the type of errors that a WCF service can throw it also allows your clients to distinguish between contracted faults and other possible errors.",
      "Use the following steps to shield exception information with fault contracts.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Define a Fault contract by applying the FaultContract attribute directly on a contract operation, and specifying the error detailing type to the method as shown below:\r\n[ServiceContract]interface ICalculator{   [OperationContract]   [FaultContract(typeof(DivideByZeroException))]   double Divide(double number1,double number2);}Implement the Divide operation which throw the fault and have it propagated to the client by throwing exactly the same detailing type listed in the fault contract.\r\nclass MyService : ICalculator{   public double Divide(double number1,double number2)   {      throw new FaultException<DivideByZeroException>(new DivideByZeroException());   }}",
      "[ServiceContract]interface ICalculator{   [OperationContract]   [FaultContract(typeof(DivideByZeroException))]   double Divide(double number1,double number2);}",
      "class MyService : ICalculator{   public double Divide(double number1,double number2)   {      throw new FaultException<DivideByZeroException>(new DivideByZeroException());   }}"
    ],
    "pre": [
      "[ServiceContract]interface ICalculator{   [OperationContract]   [FaultContract(typeof(DivideByZeroException))]   double Divide(double number1,double number2);}",
      "class MyService : ICalculator{   public double Divide(double number1,double number2)   {      throw new FaultException<DivideByZeroException>(new DivideByZeroException());   }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn.microsoft.com/en-us/library/ms733721.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \r\n<li>Microsoft Visual Studio® 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>A fault contract details the set of exceptions that may be reported to the caller. You can specify the possible faults that can occur in you WCF service. This prevents exposing exception details beyond the defined set to your clients. Since a fault contract lists the type of errors that a WCF service can throw it also allows your clients to distinguish between contracted faults and other possible errors. </p>\r\n  <p>Use the following steps to shield exception information with fault contracts.</p>\r\n  <ol>\r\n    <li>Define a Fault contract by applying the FaultContract attribute directly on a contract operation, and specifying the error detailing type to the method as shown below:\r\n<ol><pre>[ServiceContract]<br />interface ICalculator<br />{<br />   [OperationContract]<br />   [FaultContract(typeof(DivideByZeroException))]<br />   double Divide(double number1,double number2);<br />}</pre></ol><li>Implement the Divide operation which throw the fault and have it propagated to the client by throwing exactly the same detailing type listed in the fault contract.\r\n<ol><pre>class MyService : ICalculator<br />{<br />   public double Divide(double number1,double number2)<br />   {<br />      throw new FaultException&lt;DivideByZeroException&gt;(new DivideByZeroException());<br />   }<br />}</pre></ol></li></li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at <a href=\"http://msdn.microsoft.com/en-us/library/ms733721.aspx\">http://msdn.microsoft.com/en-us/library/ms733721.aspx</a></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}