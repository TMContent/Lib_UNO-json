{
  "id": "6f4e927b-bd45-498b-95c4-78fd2c3287c1",
  "checksum": "68a4ec4a7cc7849d2845a6fb5428f48a0921cb77",
  "words": {
    "0": [
      "pre"
    ],
    "1": [
      "ul",
      "li",
      "h1",
      "p",
      "b"
    ],
    "2": [
      "ul",
      "li",
      "h1"
    ],
    "3": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "4": [
      "ul",
      "li",
      "h1"
    ],
    "5": [
      "p"
    ],
    "10": [
      "pre",
      "p"
    ],
    "20": [
      "p"
    ],
    "50": [
      "p",
      "ol",
      "li"
    ],
    "2500": [
      "pre"
    ],
    "4800": [
      "p",
      "pre"
    ],
    "5000": [
      "p"
    ],
    "5080": [
      "pre"
    ],
    "32767": [
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "42949673": [
      "p"
    ],
    "2147483647": [
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "j2ee": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "and": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "services": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "during": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "integer": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "b",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "overflow": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attack": [
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "exploits": [
      "p"
    ],
    "unchecked": [
      "p"
    ],
    "arithmetic": [
      "p"
    ],
    "condition": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "leads": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "try": [
      "p"
    ],
    "store": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "b",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "variable": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "larger": [
      "p"
    ],
    "than": [
      "p",
      "p"
    ],
    "maximum": [
      "p",
      "p",
      "p",
      "p",
      "table",
      "tbody",
      "tr",
      "td",
      "p",
      "b"
    ],
    "value": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "table",
      "tbody",
      "tr",
      "td",
      "p"
    ],
    "case": [
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "unsigned": [
      "p"
    ],
    "integers": [
      "p",
      "p",
      "p"
    ],
    "wraps": [
      "p",
      "p",
      "p"
    ],
    "up": [
      "p",
      "p"
    ],
    "small": [
      "p",
      "ol",
      "li"
    ],
    "signed": [
      "p",
      "p"
    ],
    "negative": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "both": [
      "p",
      "p"
    ],
    "cases": [
      "p",
      "p",
      "p",
      "p"
    ],
    "target": [
      "p"
    ],
    "holds": [
      "p"
    ],
    "incorrect": [
      "p",
      "p",
      "p"
    ],
    "java": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "b",
      "p",
      "title"
    ],
    "attackers": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p"
    ],
    "bugs": [
      "p",
      "p",
      "p",
      "p"
    ],
    "execute": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p"
    ],
    "logical": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "follow": [
      "p",
      "p"
    ],
    "these": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p",
      "p"
    ],
    "test": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "b",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "h1",
      "h1",
      "h1",
      "h1",
      "p"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1"
    ],
    "start": [
      "ul",
      "li",
      "h1"
    ],
    "testing": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "h1",
      "h1",
      "p",
      "p"
    ],
    "exploring": [
      "ul",
      "li",
      "h1"
    ],
    "additional": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "first": [
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "necessary": [
      "p",
      "p",
      "p",
      "p"
    ],
    "different": [
      "p",
      "p",
      "p"
    ],
    "although": [
      "p",
      "p"
    ],
    "commonly": [
      "p"
    ],
    "overflows": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "buffer": [
      "p"
    ],
    "overrun": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "denial-of-service": [
      "p"
    ],
    "written": [
      "p"
    ],
    "unmanaged": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "c/c++": [
      "p"
    ],
    "are": [
      "p",
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "not": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "environments": [
      "p"
    ],
    "exploit": [
      "p",
      "p"
    ],
    "conditions": [
      "p",
      "p"
    ],
    "alter": [
      "p"
    ],
    "logic": [
      "p",
      "p"
    ],
    "force": [
      "p"
    ],
    "into": [
      "p",
      "p"
    ],
    "executing": [
      "p",
      "p",
      "p"
    ],
    "path": [
      "p",
      "p",
      "p",
      "p"
    ],
    "benefits": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p"
    ],
    "occurs": [
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "chooses": [
      "p"
    ],
    "execution": [
      "p",
      "p"
    ],
    "based": [
      "p",
      "p",
      "p"
    ],
    "operation": [
      "p",
      "p",
      "p",
      "p"
    ],
    "where": [
      "p"
    ],
    "at": [
      "p"
    ],
    "least": [
      "p"
    ],
    "one": [
      "p",
      "p"
    ],
    "user-accessible": [
      "p"
    ],
    "who": [
      "p"
    ],
    "passes": [
      "p",
      "p"
    ],
    "large": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "enough": [
      "p"
    ],
    "might": [
      "p",
      "p"
    ],
    "used": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p"
    ],
    "determine": [
      "p"
    ],
    "its": [
      "p"
    ],
    "which": [
      "p"
    ],
    "executes": [
      "p"
    ],
    "unintended": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "consequences": [
      "p"
    ],
    "ranging": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "mild": [
      "p"
    ],
    "severe": [
      "p",
      "p"
    ],
    "example": [
      "p",
      "p"
    ],
    "may": [
      "p",
      "p",
      "p"
    ],
    "give": [
      "p"
    ],
    "special": [
      "p"
    ],
    "offer": [
      "p"
    ],
    "more": [
      "p",
      "p"
    ],
    "examples": [
      "p"
    ],
    "deposit": [
      "p",
      "p"
    ],
    "sum": [
      "p"
    ],
    "money": [
      "p"
    ],
    "bank": [
      "p",
      "p",
      "p"
    ],
    "account": [
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "allow": [
      "p"
    ],
    "bypass": [
      "p"
    ],
    "security": [
      "p"
    ],
    "check": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "following": [
      "p",
      "p"
    ],
    "calculates": [
      "p",
      "p"
    ],
    "customer": [
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "charge": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "url": [
      "p",
      "p",
      "p"
    ],
    "below": [
      "p",
      "p",
      "p"
    ],
    "http//example.com/example/calculatecharge?items=50": [
      "pre",
      "pre"
    ],
    "function": [
      "p"
    ],
    "amount": [
      "p"
    ],
    "withdraw": [
      "p"
    ],
    "customer’s": [
      "p"
    ],
    "protected": [
      "pre"
    ],
    "void": [
      "pre"
    ],
    "calculatecharge)\r\n{\r\nint": [
      "pre"
    ],
    "itemprice": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "50\r\nint": [
      "pre"
    ],
    "numberofitems": [
      "pre",
      "pre",
      "p",
      "em",
      "pre",
      "pre"
    ],
    "integerparseint(request.getparameter(\"items\"));\r\nint": [
      "pre"
    ],
    "balance": [
      "pre",
      "p",
      "p",
      "p",
      "em",
      "p",
      "pre",
      "pre"
    ],
    "0\r\n\r\nif": [
      "pre"
    ],
    "0\r\n{\r\nbalance": [
      "pre"
    ],
    "*": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "numberofitems\r\n}\r\nout.println(\"the": [
      "pre"
    ],
    "will": [
      "pre",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "be": [
      "pre",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "charged": [
      "pre",
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre"
    ],
    "+": [
      "pre",
      "pre"
    ],
    "balance;\r\n}": [
      "pre"
    ],
    "if": [
      "p",
      "pre",
      "p",
      "p"
    ],
    "client": [
      "p"
    ],
    "normal": [
      "p"
    ],
    "number": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "items": [
      "p",
      "p",
      "em"
    ],
    "less": [
      "p"
    ],
    "32-bit": [
      "p"
    ],
    "2147483647)": [
      "p"
    ],
    "correctly": [
      "p"
    ],
    "calculated": [
      "p",
      "p",
      "p"
    ],
    "input)\r\nthe": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "output)": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "however": [
      "p",
      "p"
    ],
    "parameter": [
      "p",
      "p",
      "p"
    ],
    "pass": [
      "p",
      "p",
      "p"
    ],
    "with": [
      "p"
    ],
    "goal": [
      "p"
    ],
    "overflowing": [
      "p"
    ],
    "exceeds": [
      "p"
    ],
    "http//example.com/example/calculatecharge?items=42949673": [
      "pre"
    ],
    "-2147483646": [
      "pre"
    ],
    "attempting": [
      "p"
    ],
    "make": [
      "p"
    ],
    "huge": [
      "p"
    ],
    "attacker’s": [
      "p"
    ],
    "next": [
      "p"
    ],
    "before": [
      "p"
    ],
    "practical": [
      "p"
    ],
    "what": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "protect": [
      "p",
      "p",
      "p"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "them": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "happen": [
      "p"
    ],
    "servlet": [
      "p",
      "p"
    ],
    "uses": [
      "p"
    ],
    "client-supplied": [
      "p",
      "p"
    ],
    "without": [
      "p"
    ],
    "checking": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "upper": [
      "p",
      "p"
    ],
    "boundaries": [
      "p"
    ],
    "instance": [
      "p",
      "p"
    ],
    "scenario": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "above": [
      "p",
      "p"
    ],
    "getting": [
      "p"
    ],
    "int": [
      "pre",
      "table",
      "tbody",
      "tr",
      "td",
      "pre"
    ],
    "checks": [
      "p"
    ],
    "but": [
      "p"
    ],
    "doesn’t": [
      "p"
    ],
    "boundary": [
      "p"
    ],
    "exceedingly": [
      "p",
      "p"
    ],
    "method": [
      "p"
    ],
    "preventing": [
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "values": [
      "p",
      "p",
      "b",
      "p"
    ],
    "reasonable": [
      "p"
    ],
    "could": [
      "p"
    ],
    "corrected": [
      "p"
    ],
    "like": [
      "p"
    ],
    "(numberofitems": [
      "pre"
    ],
    "&&": [
      "pre"
    ],
    "5000\r\n{\r\nint": [
      "pre"
    ],
    "numberofitems\r\n}": [
      "pre"
    ],
    "now": [
      "p"
    ],
    "you": [
      "p",
      "p"
    ],
    "well": [
      "p",
      "p"
    ],
    "continue": [
      "p"
    ],
    "observing": [
      "p",
      "p"
    ],
    "their": [
      "p"
    ],
    "behavior": [
      "p"
    ],
    "your": [
      "p"
    ],
    "identify": [
      "ol",
      "li"
    ],
    "takes": [
      "ol",
      "li",
      "p"
    ],
    "submit": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "reacts": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "see": [
      "ol",
      "li"
    ],
    "table": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "1.": [
      "ol",
      "li"
    ],
    "expected": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "results": [
      "p",
      "p"
    ],
    "after": [
      "p"
    ],
    "submitting": [
      "p"
    ],
    "data": [
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "type": [
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "short": [
      "table",
      "tbody",
      "tr",
      "td"
    ],
    "-": [
      "p",
      "b",
      "pre"
    ],
    "integer-related": [
      "p",
      "b"
    ],
    "types": [
      "p",
      "b"
    ],
    "final": [
      "p"
    ],
    "variations": [
      "p"
    ],
    "take": [
      "p"
    ],
    "multiply": [
      "p"
    ],
    "subtract": [
      "p"
    ],
    "accumulated": [
      "p"
    ],
    "consider": [
      "p"
    ],
    "points": [
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "5000\r\nint": [
      "pre"
    ],
    "penalized": [
      "pre",
      "p",
      "p",
      "p",
      "em"
    ],
    "integerparseint(request.getparameter(\"penalized\"));\r\nint": [
      "pre"
    ],
    "pointspenalized": [
      "pre"
    ],
    "penalized\r\nint": [
      "pre"
    ],
    "totalpoints": [
      "pre"
    ],
    "pointspenalized\r\nout.println(\"the": [
      "pre"
    ],
    "player's": [
      "pre",
      "pre",
      "pre"
    ],
    "total": [
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "totalpoints;": [
      "pre"
    ],
    "attempt": [
      "p"
    ],
    "change": [
      "p"
    ],
    "successful": [
      "p"
    ],
    "added": [
      "p"
    ],
    "instead": [
      "p"
    ],
    "subtracted": [
      "p"
    ],
    "subtracts": [
      "p"
    ],
    "times": [
      "p"
    ],
    "penalty": [
      "p"
    ],
    "player": [
      "p",
      "p"
    ],
    "has": [
      "p"
    ],
    "leaving": [
      "p"
    ],
    "http//example.com/example/calculatepoints?penalized=20": [
      "pre"
    ],
    "exploiting": [
      "p"
    ],
    "adding": [
      "p"
    ],
    "http//example.com/example/calculatepoints?penalized=214748364": [
      "pre"
    ],
    "conclusions": [
      "h1"
    ],
    "then": [
      "p"
    ],
    "must": [
      "p"
    ],
    "look": [
      "p"
    ],
    "numeric": [
      "p"
    ],
    "while": [
      "p"
    ],
    "using": [
      "p"
    ],
    "positive": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start Testing and Exploring",
      "Step 4: Execute Additional Testing",
      "Conclusions"
    ],
    "ul": [
      "J2EE applications and services",
      "Step 1: Understand attack scenarios \r\n    Step 2: Analyze causes and countermeasures \r\n    Step 3: Start testing and exploring \r\n    Step 4: Execute additional testing"
    ],
    "li": [
      "J2EE applications and services",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Execute additional testing",
      "Identify an input variable that takes an integer variable.",
      "Submit a small integer, such as 50.",
      "Check how the application reacts.",
      "Submit a large integer value (see Table 1).",
      "Check how the application reacts."
    ],
    "p": [
      "During an integer overflow attack, an attacker exploits an unchecked arithmetic condition that leads the application to try to store in an integer variable a result larger than the maximum integer value. In the case of unsigned integers, the value of the integer variable wraps up to a small integer value; in the case of signed integers, the value of the integer variable wraps up to a negative integer value. In both cases, the target integer variable holds an incorrect value. In Java, attackers can use integer overflow bugs to execute logical attacks on the application.",
      "Follow these steps to test for integer overflow bugs in Java:",
      "First, it is necessary to understand the different integer overflow attack scenarios in Java. Although attackers commonly use integer overflows to execute buffer overrun or denial-of-service attacks in applications written in unmanaged code such as C/C++. Although these attacks are not possible in J2EE environments, attackers can exploit integer overflow conditions to execute logical attacks on J2EE applications.",
      "In Java, attackers use integer overflow conditions to alter the logic of an application and force it into executing a logical path that benefits the attacker. This attack occurs when the application chooses an execution path based on the value of an integer operation, where at least one of the integers is user-accessible. An attacker who passes a large enough integer value might overflow the integer operation and store an incorrect integer value in the variable used by the application to determine its execution path.",
      "A logical attack in which the application executes an unintended path can lead to consequences ranging from mild to severe. For example, an application may give the attacker a special offer or, in more severe examples, may deposit an incorrect sum of money in a bank account or may allow the attacker to bypass a security check.",
      "The following code calculates a customer charge based on an integer provided in the URL below:",
      "The function below calculates the amount to withdraw from the customer’s bank account:",
      "If a client passes a normal number of items, such as 50, the balance is less than the maximum 32-bit signed integer (2147483647) and is correctly calculated:",
      "However, an attacker can use the items parameter to pass a large integer, with the goal of overflowing the balance variable. As a result, the balance calculated exceeds the maximum integer and wraps to a negative value:",
      "This can result in the application attempting to make a huge deposit into the attacker’s bank account.",
      "Next, before executing practical test cases, it is necessary in testing for integer overflows in Java code to understand what causes integer overflows in Java and how to protect against them.",
      "Integer overflows happen when a Java application or servlet uses a client-supplied value in an integer operation without checking the input against the upper boundaries of the operation. For instance, in the scenario shown above, the application calculated the balance by getting the value of numberOfItems from a URL parameter.",
      "The application checks the input against a negative value, but doesn’t check it against an upper boundary.  As a result, the attacker can pass an exceedingly large number, such as 42949673.",
      "One method of preventing integer overflows in Java is to check any input integer values against a reasonable maximum. For instance, the code above could be corrected like this:",
      "Now that you understand the attack scenarios for Java integer overflows as well as the causes and how to protect against them, it is necessary to continue by executing test cases and observing their behavior in your Java application or servlet.",
      "Follow these steps to test for integer overflows:",
      "Expected result: If the application is vulnerable to an integer overflow, the results of checking how the application reacts in steps 3 and 5 will be different; the application will execute a different logic after submitting a large integer.",
      "Table 1 - Maximum integer values for integer-related types in Java",
      "The final step in testing for integer overflows is to execute additional testing based on variations in the attack scenarios.",
      "An application might take a client-supplied integer and multiply it by a negative number or subtract it from an accumulated number. Consider the following code:",
      "An attacker can pass a large integer number in the penalized parameter in an attempt to change the total number of points penalized to a negative integer; if successful, the points penalized are added instead of subtracted. For example, the URL below subtracts 20 times 10 penalty points from the 5,000 points that the player has, leaving 4800 points:",
      "However, exploiting the integer overflow bugs results in adding more points to the player:",
      "Attackers exploit integer overflow bugs to execute logical attacks in Java applications. To test for them, it is first necessary to understand the attack scenarios as well what causes them, and how to protect against them. Then you must look for any input variable that takes a numeric value and execute test cases while observing how the application reacts, using both exceedingly large positive and negative values."
    ],
    "pre": [
      "http://example.com/example/calculateCharge?items=50",
      "protected void CalculateCharge()\r\n{\r\nint itemPrice = 50;\r\nint numberOfItems = Integer.parseInt(request.getParameter(\"items\"));\r\nint balance = 0;\r\n\r\nif (numberOfItems > 0)\r\n{\r\nbalance = itemPrice * numberOfItems;\r\n}\r\nout.println(\"The customer account will be charged \" + balance);\r\n}",
      "http://example.com/example/calculateCharge?items=50         (input)\r\nThe customer account will be charged 2500                   (output)",
      "http://example.com/example/calculateCharge?items=42949673   (input)\r\nThe customer account will be charged -2147483646            (output)",
      "int balance = itemPrice * numberOfItems;",
      "if ((numberOfItems > 0) && (numberOfItems < 5000)\r\n{\r\nint balance = itemPrice * numberOfItems;\r\n}",
      "int points = 5000;\r\nint penalized = Integer.parseInt(request.getParameter(\"penalized\"));\r\nint pointsPenalized = 10 * penalized;\r\nint totalPoints = points - pointsPenalized;\r\nout.println(\"The player's total points are: \" + totalPoints);",
      "http://example.com/example/calculatePoints?penalized=20           (input)\r\nThe player's total points are: 4800                               (output)",
      "http://example.com/example/calculatePoints?penalized=214748364    (input)\r\nThe player's total points are: 5080                               (output)"
    ],
    "em": [
      "items",
      "balance",
      "numberOfItems",
      "penalized"
    ],
    "ol": [
      "Identify an input variable that takes an integer variable. \r\n    Submit a small integer, such as 50. \r\n    Check how the application reacts. \r\n    Submit a large integer value (see Table 1). \r\n    Check how the application reacts."
    ],
    "table": [
      "Data type\r\n        \r\n        \r\n          Maximum value\r\n        \r\n      \r\n      \r\n        \r\n          int\r\n        \r\n        \r\n          2147483647\r\n        \r\n      \r\n      \r\n        \r\n          short\r\n        \r\n        \r\n          32767"
    ],
    "tbody": [
      "Data type\r\n        \r\n        \r\n          Maximum value\r\n        \r\n      \r\n      \r\n        \r\n          int\r\n        \r\n        \r\n          2147483647\r\n        \r\n      \r\n      \r\n        \r\n          short\r\n        \r\n        \r\n          32767"
    ],
    "tr": [
      "Data type\r\n        \r\n        \r\n          Maximum value",
      "int\r\n        \r\n        \r\n          2147483647",
      "short\r\n        \r\n        \r\n          32767"
    ],
    "td": [
      "Data type",
      "Maximum value",
      "int",
      "2147483647",
      "short",
      "32767"
    ],
    "b": [
      "Table 1 - Maximum integer values for integer-related types in Java"
    ],
    "br": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>J2EE applications and services</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>During an integer overflow attack, an attacker exploits an unchecked arithmetic condition that leads the application to try to store in an integer variable a result larger than the maximum integer value. In the case of unsigned integers, the value of the integer variable wraps up to a small integer value; in the case of signed integers, the value of the integer variable wraps up to a negative integer value. In both cases, the target integer variable holds an incorrect value. In Java, attackers can use integer overflow bugs to execute logical attacks on the application. </p>\r\n  <p>Follow these steps to test for integer overflow bugs in Java:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Start testing and exploring </li>\r\n    <li>Step 4: Execute additional testing</li>\r\n  </ul>\r\n  <h1>Step 1: Understand Attack Scenarios</h1>\r\n  <p>First, it is necessary to understand the different integer overflow attack scenarios in Java. Although attackers commonly use integer overflows to execute buffer overrun or denial-of-service attacks in applications written in unmanaged code such as C/C++. Although these attacks are not possible in J2EE environments, attackers can exploit integer overflow conditions to execute logical attacks on J2EE applications.</p>\r\n  <p>In Java, attackers use integer overflow conditions to alter the logic of an application and force it into executing a logical path that benefits the attacker. This attack occurs when the application chooses an execution path based on the value of an integer operation, where at least one of the integers is user-accessible. An attacker who passes a large enough integer value might overflow the integer operation and store an incorrect integer value in the variable used by the application to determine its execution path.</p>\r\n  <p>A logical attack in which the application executes an unintended path can lead to consequences ranging from mild to severe. For example, an application may give the attacker a special offer or, in more severe examples, may deposit an incorrect sum of money in a bank account or may allow the attacker to bypass a security check. </p>\r\n  <p>The following code calculates a customer charge based on an integer provided in the URL below:</p>\r\n  <pre>http://example.com/example/calculateCharge?items=50</pre>\r\n  <p>The function below calculates the amount to withdraw from the customer’s bank account:</p>\r\n  <pre>protected void CalculateCharge()\r\n{\r\nint itemPrice = 50;\r\nint numberOfItems = Integer.parseInt(request.getParameter(\"items\"));\r\nint balance = 0;\r\n\r\nif (numberOfItems &gt; 0)\r\n{\r\nbalance = itemPrice * numberOfItems;\r\n}\r\nout.println(\"The customer account will be charged \" + balance);\r\n}</pre>\r\n  <p>If a client passes a normal number of items, such as 50, the balance is less than the maximum 32-bit signed integer (2147483647) and is correctly calculated: </p>\r\n  <pre>http://example.com/example/calculateCharge?items=50         (input)\r\nThe customer account will be charged 2500                   (output)</pre>\r\n  <p>However, an attacker can use the <em>items</em> parameter to pass a large integer, with the goal of overflowing the <em>balance</em> variable. As a result, the balance calculated exceeds the maximum integer and wraps to a negative value: </p>\r\n  <pre>http://example.com/example/calculateCharge?items=42949673   (input)\r\nThe customer account will be charged -2147483646            (output)</pre>\r\n  <p>This can result in the application attempting to make a huge deposit into the attacker’s bank account.</p>\r\n  <h1>Step 2: Analyze causes and countermeasures</h1>\r\n  <p>Next, before executing practical test cases, it is necessary in testing for integer overflows in Java code to understand what causes integer overflows in Java and how to protect against them.</p>\r\n  <p>Integer overflows happen when a Java application or servlet uses a client-supplied value in an integer operation without checking the input against the upper boundaries of the operation. For instance, in the scenario shown above, the application calculated the balance by getting the value of <em>numberOfItems</em> from a URL parameter.</p>\r\n  <pre>int balance = itemPrice * numberOfItems; </pre>\r\n  <p>The application checks the input against a negative value, but doesn’t check it against an upper boundary.  As a result, the attacker can pass an exceedingly large number, such as 42949673. </p>\r\n  <p>One method of preventing integer overflows in Java is to check any input integer values against a reasonable maximum. For instance, the code above could be corrected like this:</p>\r\n  <pre>if ((numberOfItems &gt; 0) && (numberOfItems &lt; 5000)\r\n{\r\nint balance = itemPrice * numberOfItems;\r\n}</pre>\r\n  <h1>Step 3: Start Testing and Exploring</h1>\r\n  <p>Now that you understand the attack scenarios for Java integer overflows as well as the causes and how to protect against them, it is necessary to continue by executing test cases and observing their behavior in your Java application or servlet.</p>\r\n  <p>Follow these steps to test for integer overflows:</p>\r\n  <ol>\r\n    <li>Identify an input variable that takes an integer variable. </li>\r\n    <li>Submit a small integer, such as 50. </li>\r\n    <li>Check how the application reacts. </li>\r\n    <li>Submit a large integer value (see Table 1). </li>\r\n    <li>Check how the application reacts.</li>\r\n  </ol>\r\n  <p>Expected result: If the application is vulnerable to an integer overflow, the results of checking how the application reacts in steps 3 and 5 will be different; the application will execute a different logic after submitting a large integer. </p>\r\n  <table>\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          Data type\r\n        </td>\r\n        <td>\r\n          Maximum value\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td>\r\n          int\r\n        </td>\r\n        <td>\r\n          2147483647\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td>\r\n          short\r\n        </td>\r\n        <td>\r\n          32767\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <p>\r\n    <b>Table 1 - Maximum integer values for integer-related types in Java</b>\r\n  </p>\r\n  <h1>Step 4: Execute Additional Testing</h1>\r\n  <p>The final step in testing for integer overflows is to execute additional testing based on variations in the attack scenarios.</p>\r\n  <p>An application might take a client-supplied integer and multiply it by a negative number or subtract it from an accumulated number. Consider the following code:</p>\r\n  <pre>int points = 5000;\r\nint penalized = Integer.parseInt(request.getParameter(\"penalized\"));\r\nint pointsPenalized = 10 * penalized;\r\nint totalPoints = points - pointsPenalized;\r\nout.println(\"The player's total points are: \" + totalPoints); </pre>\r\n  <p>An attacker can pass a large integer number in the <em>penalized</em> parameter in an attempt to change the total number of points penalized to a negative integer; if successful, the points penalized are added instead of subtracted. For example, the URL below subtracts 20 times 10 penalty points from the 5,000 points that the player has, leaving 4800 points:</p>\r\n  <pre>http://example.com/example/calculatePoints?penalized=20           (input)\r\nThe player's total points are: 4800                               (output)</pre>\r\n  <p>However, exploiting the integer overflow bugs results in adding more points to the player:</p>\r\n  <pre>http://example.com/example/calculatePoints?penalized=214748364    (input)\r\nThe player's total points are: 5080                               (output)</pre>\r\n  <h1>Conclusions</h1>\r\n  <p>Attackers exploit integer overflow bugs to execute logical attacks in Java applications. To test for them, it is first necessary to understand the attack scenarios as well what causes them, and how to protect against them. Then you must look for any input variable that takes a numeric value and execute test cases while observing how the application reacts, using both exceedingly large positive and negative values. </p>\r\n  <br />"
}