{
  "id": "d32ce0ba-b7d9-43cd-94fd-657a3e2556e6",
  "checksum": "13d01bde0c5fc5a7b13750eee9d1841bf77b6504",
  "words": {
    "what": [
      "h2"
    ],
    "to": [
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "do": [
      "h2",
      "p"
    ],
    "process": [
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "queries": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "using": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "prepared": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "statements": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "parameterized": [
      "p",
      "title"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p"
    ],
    "stored": [
      "p"
    ],
    "procedures": [
      "p"
    ],
    "these": [
      "p",
      "p",
      "p"
    ],
    "features": [
      "p",
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "accept": [
      "p"
    ],
    "parameters": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "variables": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "support": [
      "p"
    ],
    "strong": [
      "p"
    ],
    "typing": [
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "dynamically": [
      "p"
    ],
    "construct": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "query": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "strings": [
      "p",
      "p"
    ],
    "within": [
      "p",
      "p"
    ],
    "\"exec\"": [
      "p"
    ],
    "similar": [
      "p"
    ],
    "functionality": [
      "p"
    ],
    "since": [
      "p",
      "p"
    ],
    "you": [
      "p"
    ],
    "may": [
      "p"
    ],
    "re-introduce": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "possibility": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "exec": [
      "em"
    ],
    "why": [
      "h1"
    ],
    "mitigate": [
      "p"
    ],
    "number": [
      "p"
    ],
    "one": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "database-facing": [
      "p"
    ],
    "web": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "powerful": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "language": [
      "p"
    ],
    "independent": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "depends": [
      "p"
    ],
    "on": [
      "p"
    ],
    "algorithm": [
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "generate": [
      "p"
    ],
    "passed": [
      "p"
    ],
    "database": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "affects": [
      "p"
    ],
    "engine": [
      "p",
      "p"
    ],
    "actual": [
      "p"
    ],
    "application": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "exploits": [
      "p"
    ],
    "creation": [
      "p"
    ],
    "string": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "which": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "embedded": [
      "p",
      "p"
    ],
    "manually": [
      "p"
    ],
    "with": [
      "p"
    ],
    "escape": [
      "p"
    ],
    "sequences": [
      "p"
    ],
    "such": [
      "p"
    ],
    "single": [
      "p"
    ],
    "quote": [
      "p",
      "p"
    ],
    "')": [
      "p"
    ],
    "double": [
      "p"
    ],
    "\")": [
      "p"
    ],
    "characters.": [
      "p"
    ],
    "method": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "inserts": [
      "p"
    ],
    "valid": [
      "p"
    ],
    "statement": [
      "p"
    ],
    "fragments": [
      "p"
    ],
    "part": [
      "p"
    ],
    "so": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "turn": [
      "p"
    ],
    "are": [
      "p"
    ],
    "that": [
      "p"
    ],
    "submitted": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "successful": [
      "p"
    ],
    "exploitation": [
      "p"
    ],
    "allows": [
      "p"
    ],
    "potentially": [
      "p"
    ],
    "compromise": [
      "p"
    ],
    "entire": [
      "p"
    ],
    "often": [
      "p"
    ],
    "underlying": [
      "p"
    ],
    "operating": [
      "p"
    ],
    "system": [
      "p"
    ],
    "offer": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p"
    ],
    "simple": [
      "p"
    ],
    "yet": [
      "p"
    ],
    "efficient": [
      "p"
    ],
    "mitigation": [
      "p"
    ],
    "automatically": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "user-input": [
      "p"
    ],
    "non-escaped": [
      "p"
    ],
    "form": [
      "p"
    ],
    "passing": [
      "p"
    ],
    "much": [
      "p"
    ],
    "like": [
      "p"
    ],
    "function": [
      "p"
    ],
    "call": [
      "p"
    ],
    "by": [
      "p",
      "p"
    ],
    "parameterizing": [
      "p"
    ],
    "type-enforcing": [
      "p"
    ],
    "them": [
      "p"
    ],
    "effectively": [
      "p"
    ],
    "filtered": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "type-safe": [
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "whenever": [
      "p"
    ],
    "need": [
      "p"
    ],
    "executed": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "title"
    ],
    "prevent": [
      "p"
    ],
    "follow": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "locate": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "throughout": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "each": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "after": [
      "ol",
      "li",
      "p"
    ],
    "locating": [
      "ol",
      "li",
      "p"
    ],
    "understand": [
      "ol",
      "li",
      "p"
    ],
    "format": [
      "ol",
      "li",
      "p"
    ],
    "type": [
      "ol",
      "li",
      "p"
    ],
    "parameter's": [
      "ol",
      "li",
      "p"
    ],
    "data": [
      "ol",
      "li",
      "p",
      "title"
    ],
    "different": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "programming": [
      "ol",
      "li",
      "p"
    ],
    "languages": [
      "ol",
      "li",
      "p"
    ],
    "please": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "refer": [
      "ol",
      "li",
      "p"
    ],
    "platform's": [
      "ol",
      "li",
      "p"
    ],
    "documentation": [
      "ol",
      "li",
      "p"
    ],
    "detailed": [
      "ol",
      "li",
      "p"
    ],
    "information": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "about": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "additional": [
      "h2"
    ],
    "resources": [
      "h2"
    ],
    "more": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//cwe.mitre.org/top25/index.html#cwe-89": [
      "ul",
      "li",
      "a"
    ],
    "apis": [
      "title"
    ],
    "access": [
      "title"
    ]
  },
  "tags": {
    "h2": [
      "What to Do",
      "Additional Resources"
    ],
    "p": [
      "Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using\r\n \"exec\" or similar functionality, since you may re-introduce the possibility of SQL injection.",
      "Prepared statements mitigate the number one risk for database-facing Web applications: SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database\r\n engine, not the actual application. It exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (') or double quote (\") characters). Using this method, an attacker inserts valid SQL statement\r\n fragments as part of user input so they, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating\r\n system.",
      "Prepared statements offer a simple yet efficient mitigation since they automatically contain user-input in a non-escaped form, passing user input to the application as parameters, much like a function call. By parameterizing input parameters and type-enforcing\r\n them, user input is effectively filtered.",
      "Type-safe SQL parameters should be used whenever SQL statements need to be executed by the database.",
      "To use prepared statements to prevent SQL injection, follow these steps:",
      "Identify SQL queries. Locate all SQL queries throughout your application.",
      "Identify the parameters in each SQL query. After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.",
      "Use prepared statements for SQL queries. Using prepared statements is different for different programming languages. Please, refer to your platform's documentation for detailed information about using prepared statements."
    ],
    "em": [
      "exec"
    ],
    "h1": [
      "Why",
      "When",
      "How"
    ],
    "ol": [
      "Identify SQL queries. Locate all SQL queries throughout your application.\r\n\r\n    \r\n    \r\n      \r\n        Identify the parameters in each SQL query. After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.\r\n    \r\n    \r\n      \r\n        Use prepared statements for SQL queries. Using prepared statements is different for different programming languages. Please, refer to your platform's documentation for detailed information about using prepared statements."
    ],
    "li": [
      "Identify SQL queries. Locate all SQL queries throughout your application.",
      "Identify the parameters in each SQL query. After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.",
      "Use prepared statements for SQL queries. Using prepared statements is different for different programming languages. Please, refer to your platform's documentation for detailed information about using prepared statements.",
      "For more information about SQL injection, please see \r\nhttp://cwe.mitre.org/top25/index.html#CWE-89"
    ],
    "strong": [
      "Identify SQL queries.",
      "Identify the parameters in each SQL query.",
      "Use prepared statements for SQL queries."
    ],
    "ul": [
      "For more information about SQL injection, please see \r\nhttp://cwe.mitre.org/top25/index.html#CWE-89"
    ],
    "a": [
      "http://cwe.mitre.org/top25/index.html#CWE-89"
    ]
  },
  "links": [
    {
      "href": "http://cwe.mitre.org/top25/index.html#CWE-89",
      "text": "\r\nhttp://cwe.mitre.org/top25/index.html#CWE-89"
    }
  ],
  "html": "<h2>What to Do</h2>\r\n  <p>Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using\r\n \"<em>exec</em>\" or similar functionality, since you may re-introduce the possibility of SQL injection.</p>\r\n  <h1>Why</h1>\r\n  <p>Prepared statements mitigate the number one risk for database-facing Web applications: SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database\r\n engine, not the actual application. It exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (') or double quote (\") characters). Using this method, an attacker inserts valid SQL statement\r\n fragments as part of user input so they, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating\r\n system. </p>\r\n  <p>Prepared statements offer a simple yet efficient mitigation since they automatically contain user-input in a non-escaped form, passing user input to the application as parameters, much like a function call. By parameterizing input parameters and type-enforcing\r\n them, user input is effectively filtered.</p>\r\n  <h1>When</h1>\r\n  <p>Type-safe SQL parameters should be used whenever SQL statements need to be executed by the database.</p>\r\n  <h1>How</h1>\r\n  <p>To use prepared statements to prevent SQL injection, follow these steps:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify SQL queries. </strong>Locate all SQL queries throughout your application.\r\n</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the parameters in each SQL query.</strong> After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use prepared statements for SQL queries.</strong> Using prepared statements is different for different programming languages. Please, refer to your platform's documentation for detailed information about using prepared statements.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Additional Resources</h2>\r\n  <ul>\r\n    <li>For more information about SQL injection, please see <a href=\"http://cwe.mitre.org/top25/index.html#CWE-89\">\r\nhttp://cwe.mitre.org/top25/index.html#CWE-89</a></li>\r\n  </ul>"
}