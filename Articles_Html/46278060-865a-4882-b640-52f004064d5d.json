{
  "id": "46278060-865a-4882-b640-52f004064d5d",
  "checksum": "666a1526ce2a90642e1f3a9209536edce2b1c249",
  "words": {
    "1": [
      "pre",
      "pre",
      "p"
    ],
    "2": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "applications": [
      "p"
    ],
    "written": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "any": [
      "p"
    ],
    "language": [
      "p",
      "ul",
      "li"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "does": [
      "p",
      "ul",
      "li"
    ],
    "not": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "automatic": [
      "p"
    ],
    "bounds": [
      "p",
      "ul",
      "li"
    ],
    "checking": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "description": [
      "h1"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "integer": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "title"
    ],
    "overflow": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "title"
    ],
    "occurs": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "incremented": [
      "p"
    ],
    "over": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "maximum": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "value": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "data": [
      "p",
      "li",
      "ul",
      "li"
    ],
    "type": [
      "p",
      "li"
    ],
    "can": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "hold": [
      "p",
      "p"
    ],
    "resulting": [
      "p",
      "ul",
      "li"
    ],
    "depends": [
      "p"
    ],
    "on": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "compiler": [
      "p"
    ],
    "use": [
      "p"
    ],
    "iso-c99": [
      "p"
    ],
    "defines": [
      "p"
    ],
    "result": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "be": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "assigned": [
      "p"
    ],
    "modulo": [
      "p"
    ],
    "one": [
      "p"
    ],
    "more": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "than": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "size": [
      "p",
      "ul",
      "li"
    ],
    "this": [
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "known": [
      "p"
    ],
    "as": [
      "p"
    ],
    "wrapping": [
      "p"
    ],
    "around": [
      "p",
      "p"
    ],
    "zero": [
      "p"
    ],
    "unlike": [
      "p"
    ],
    "buffer": [
      "p",
      "p",
      "ul",
      "li",
      "li"
    ],
    "overflows": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "no": [
      "p",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "other": [
      "p"
    ],
    "used": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "by": [
      "p"
    ],
    "affected": [
      "p"
    ],
    "however": [
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "easy": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "li"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "programmer": [
      "p"
    ],
    "assume": [
      "p"
    ],
    "increasing": [
      "p"
    ],
    "will": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "larger": [
      "p"
    ],
    "opposite": [
      "p"
    ],
    "happens": [
      "p"
    ],
    "unexpectedly": [
      "p"
    ],
    "program": [
      "p",
      "p",
      "p",
      "p",
      "li"
    ],
    "logic": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "altered": [
      "p"
    ],
    "important": [
      "p"
    ],
    "note": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "check": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "added": [
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "way": [
      "p"
    ],
    "knowing": [
      "p"
    ],
    "happened": [
      "p"
    ],
    "and": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "hence": [
      "p"
    ],
    "continue": [
      "p"
    ],
    "with": [
      "p",
      "ul",
      "li"
    ],
    "assumption": [
      "p"
    ],
    "correct": [
      "p"
    ],
    "particularly": [
      "p"
    ],
    "problem": [
      "p"
    ],
    "deciding": [
      "p"
    ],
    "how": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "much": [
      "p"
    ],
    "allocate": [
      "p"
    ],
    "another": [
      "p",
      "ul",
      "li"
    ],
    "variable": [
      "p"
    ],
    "common": [
      "p"
    ],
    "side": [
      "p"
    ],
    "effects": [
      "p"
    ],
    "are": [
      "p"
    ],
    "heap": [
      "p"
    ],
    "corruption": [
      "p",
      "ul",
      "li",
      "li"
    ],
    "causing": [
      "p"
    ],
    "crash": [
      "p",
      "li"
    ],
    "or": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "allowing": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "code": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "execution": [
      "p",
      "ul",
      "li"
    ],
    "impact": [
      "h1"
    ],
    "denial": [
      "ul",
      "li"
    ],
    "service": [
      "ul",
      "li"
    ],
    "erroneous": [
      "ul",
      "li"
    ],
    "unexpected": [
      "ul",
      "li"
    ],
    "values": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "cause": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "application": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "crash\ndata": [
      "ul"
    ],
    "if": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "file": [
      "ul",
      "li"
    ],
    "read": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "write": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "operation": [
      "ul",
      "li"
    ],
    "may": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "wrong": [
      "ul",
      "li"
    ],
    "place": [
      "ul",
      "li"
    ],
    "disk": [
      "ul",
      "li"
    ],
    "corruption\nremote": [
      "ul"
    ],
    "often": [
      "ul",
      "li"
    ],
    "remote": [
      "ul",
      "li",
      "li"
    ],
    "executed": [
      "ul",
      "li"
    ],
    "overflowed": [
      "ul",
      "li"
    ],
    "management": [
      "ul",
      "li"
    ],
    "indexing": [
      "ul",
      "li"
    ],
    "into": [
      "ul",
      "li"
    ],
    "vulnerabilities": [
      "h1"
    ],
    "improper": [
      "ul",
      "li"
    ],
    "arithmetic\nfailure": [
      "ul"
    ],
    "validate": [
      "ul",
      "li",
      "ul",
      "li",
      "li"
    ],
    "input\ninteger": [
      "ul"
    ],
    "calculations": [
      "ul",
      "li"
    ],
    "assignments": [
      "ul",
      "li"
    ],
    "determine": [
      "ul",
      "li"
    ],
    "buffer\ninsufficient": [
      "ul"
    ],
    "failure": [
      "ul",
      "li",
      "li"
    ],
    "consider": [
      "ul",
      "li"
    ],
    "sign\nprogram": [
      "ul"
    ],
    "makes": [
      "ul",
      "li"
    ],
    "assumptions": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "integers": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "arithmetic": [
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "input": [
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "insufficient": [
      "li"
    ],
    "sign": [
      "li"
    ],
    "countermeasures": [
      "h1"
    ],
    "always": [
      "ul",
      "li"
    ],
    "adding": [
      "ul",
      "li",
      "p"
    ],
    "two": [
      "ul",
      "li"
    ],
    "positive": [
      "ul",
      "li"
    ],
    "greater": [
      "ul",
      "li"
    ],
    "either": [
      "ul",
      "li"
    ],
    "operand": [
      "ul",
      "li"
    ],
    "take": [
      "ul",
      "li"
    ],
    "extra": [
      "ul",
      "li"
    ],
    "care": [
      "ul",
      "li"
    ],
    "performing": [
      "ul",
      "li"
    ],
    "operations": [
      "ul",
      "li"
    ],
    "near": [
      "ul",
      "li"
    ],
    "type\nusing": [
      "ul"
    ],
    "framework": [
      "ul",
      "li"
    ],
    "frameworks": [
      "ul",
      "li"
    ],
    "like": [
      "ul",
      "li"
    ],
    "net": [
      "ul",
      "li"
    ],
    "java": [
      "ul",
      "li"
    ],
    "set": [
      "ul",
      "li"
    ],
    "automatically": [
      "ul",
      "li"
    ],
    "underflows": [
      "ul",
      "li"
    ],
    "e.g.,": [
      "ul",
      "li"
    ],
    "checkforoverflowunderflow": [
      "ul",
      "li"
    ],
    "c#": [
      "ul",
      "li"
    ],
    "removeintegerchecks": [
      "ul",
      "li"
    ],
    "vbnet).\nvalidate": [
      "ul"
    ],
    "untrusted": [
      "ul",
      "li"
    ],
    "upper": [
      "ul",
      "li"
    ],
    "lower": [
      "ul",
      "li"
    ],
    "limitsverify": [
      "ul"
    ],
    "ensure": [
      "ul",
      "li"
    ],
    "all": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "operate": [
      "ul",
      "li"
    ],
    "appropriately": [
      "ul",
      "li"
    ],
    "accepted": [
      "ul",
      "li"
    ],
    "limits": [
      "ul",
      "li",
      "li"
    ],
    "cases": [
      "ul",
      "li"
    ],
    "using": [
      "li"
    ],
    "vbnet).": [
      "li"
    ],
    "verify": [
      "li"
    ],
    "example": [
      "h1"
    ],
    "segment": [
      "p"
    ],
    "below": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "small": [
      "p"
    ],
    "increment": [
      "p"
    ],
    "unsigned": [
      "pre",
      "p"
    ],
    "int": [
      "pre",
      "pre"
    ],
    "x": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "0xffffffffunsigned": [
      "pre"
    ],
    "y": [
      "pre",
      "pre",
      "pre",
      "p",
      "tt"
    ],
    "+": [
      "pre"
    ],
    "//": [
      "pre"
    ],
    "now": [
      "pre",
      "pre"
    ],
    "==": [
      "pre",
      "pre"
    ],
    "0x": [
      "pre"
    ],
    "0xffffffffy": [
      "pre"
    ],
    "x+2//": [
      "pre"
    ],
    "wrap": [
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "information": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "https//www.owasp.org/index.php/buffer_overflows#integer_overflow\nfor": [
      "ul"
    ],
    "defend": [
      "ul",
      "li"
    ],
    "against": [
      "ul",
      "li"
    ],
    "deadly": [
      "ul",
      "li"
    ],
    "attacks": [
      "ul",
      "li"
    ],
    "http//www.eweek.com/c/a/application-development/how-to-defend-against-deadly-integer-overflow-attacks/\nfor": [
      "ul"
    ],
    "look": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "safeint": [
      "ul",
      "li"
    ],
    "class": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/ms972819.aspx": [
      "ul",
      "li",
      "a"
    ],
    "https//www.owasp.org/index.php/buffer_overflows#integer_overflow": [
      "li",
      "a"
    ],
    "http//www.eweek.com/c/a/application-development/how-to-defend-against-deadly-integer-overflow-attacks/": [
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "attack": [
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "title"
    ],
    "underflow": [
      "ul",
      "li",
      "a"
    ],
    "attackattack:": [
      "ul"
    ],
    "client-side": [
      "ul",
      "li",
      "a"
    ],
    "validation": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Description",
      "Impact",
      "Vulnerabilities",
      "Countermeasures",
      "Example",
      "Additional Resources",
      "Related Items"
    ],
    "p": [
      "Applications written in any language that does not perform automatic bounds checking.",
      "An integer overflow occurs when an integer is incremented over the maximum value that the data type can hold. The resulting value depends on the compiler in use. ISO-C99 defines the result of an integer overflow to be the assigned value modulo one more than the maximum integer size. This is also known as wrapping around zero.",
      "Unlike buffer overflows, when an integer overflow occurs, no memory other than that used by the integer is affected. However, it is easy for a programmer to assume that increasing the value of an integer will result in a larger integer. When the opposite happens unexpectedly, the program logic is altered. It is important to note that unless a check is added, the program has no way of knowing that the integer overflow happened and hence will continue with the assumption that the integer has the correct value. This is particularly a problem when a program is deciding how much memory to allocate for another variable. Common side effects are heap corruption causing the program to crash, or a buffer overflow allowing arbitrary code execution.",
      "The code segment below shows how a small increment can cause an integer overflow:",
      "Adding 2 to the maximum value that the unsigned integer can hold will cause the y to wrap around to 1."
    ],
    "ul": [
      "Denial of service: Erroneous and unexpected integer values from an overflow can cause the application to crash.\nData corruption: If the result is used in a file read or write operation, the application may read or write from the wrong place in disk or memory, resulting in corruption.\nRemote code execution: Often, remote code may be executed if the overflowed integer is used for memory management or indexing into a buffer.",
      "Improper arithmetic.\nFailure to validate integer input.\nInteger calculations or assignments used to determine the size of a buffer.\nInsufficient bounds checking and failure to consider sign.\nProgram logic that makes assumptions about the value of integers.",
      "Arithmetic checking: Always check that the value of adding two positive integers is greater than either operand. Take extra care when performing arithmetic operations with values near the maximum of the data type.\nUsing a language or framework that does integer checking: Frameworks like .NET and Java can be set to automatically check for integer overflows and underflows (e.g., CheckForOverflowUnderflow in C#, RemoveIntegerChecks in VB.NET).\nValidate input: Validate the untrusted input for upper and lower limits\nVerify logic: Ensure that all integer logic will operate appropriately for the accepted limits, in all cases.",
      "For more information on Integer Overflows, see: https://www.owasp.org/index.php/Buffer_Overflows#Integer_Overflow\nFor more information on How to Defend Against Deadly Integer Overflow Attacks, see: http://www.eweek.com/c/a/Application-Development/How-to-Defend-Against-Deadly-Integer-Overflow-Attacks/\nFor more information on Another Look at the SafeInt Class, see: http://msdn.microsoft.com/en-us/library/ms972819.aspx",
      "Attack: Integer Underflow Attack\nAttack: Client-side Validation Attack"
    ],
    "li": [
      "Denial of service: Erroneous and unexpected integer values from an overflow can cause the application to crash.",
      "Data corruption: If the result is used in a file read or write operation, the application may read or write from the wrong place in disk or memory, resulting in corruption.",
      "Remote code execution: Often, remote code may be executed if the overflowed integer is used for memory management or indexing into a buffer.",
      "Improper arithmetic.",
      "Failure to validate integer input.",
      "Integer calculations or assignments used to determine the size of a buffer.",
      "Insufficient bounds checking and failure to consider sign.",
      "Program logic that makes assumptions about the value of integers.",
      "Arithmetic checking: Always check that the value of adding two positive integers is greater than either operand. Take extra care when performing arithmetic operations with values near the maximum of the data type.",
      "Using a language or framework that does integer checking: Frameworks like .NET and Java can be set to automatically check for integer overflows and underflows (e.g., CheckForOverflowUnderflow in C#, RemoveIntegerChecks in VB.NET).",
      "Validate input: Validate the untrusted input for upper and lower limits",
      "Verify logic: Ensure that all integer logic will operate appropriately for the accepted limits, in all cases.",
      "For more information on Integer Overflows, see: https://www.owasp.org/index.php/Buffer_Overflows#Integer_Overflow",
      "For more information on How to Defend Against Deadly Integer Overflow Attacks, see: http://www.eweek.com/c/a/Application-Development/How-to-Defend-Against-Deadly-Integer-Overflow-Attacks/",
      "For more information on Another Look at the SafeInt Class, see: http://msdn.microsoft.com/en-us/library/ms972819.aspx",
      "Attack: Integer Underflow Attack",
      "Attack: Client-side Validation Attack"
    ],
    "pre": [
      "unsigned int x = 0xFFFFFFFF;unsigned int y = x + 1; // now y == 0x = 0xFFFFFFFF;y = x+2;// now y == 1"
    ],
    "tt": [
      "y"
    ],
    "a": [
      "https://www.owasp.org/index.php/Buffer_Overflows#Integer_Overflow",
      "http://www.eweek.com/c/a/Application-Development/How-to-Defend-Against-Deadly-Integer-Overflow-Attacks/",
      "http://msdn.microsoft.com/en-us/library/ms972819.aspx",
      "Attack: Integer Underflow Attack",
      "Attack: Client-side Validation Attack"
    ]
  },
  "links": [
    {
      "href": "https://www.owasp.org/index.php/Buffer_Overflows#Integer_Overflow",
      "text": "https://www.owasp.org/index.php/Buffer_Overflows#Integer_Overflow"
    },
    {
      "href": "http://www.eweek.com/c/a/Application-Development/How-to-Defend-Against-Deadly-Integer-Overflow-Attacks/",
      "text": "http://www.eweek.com/c/a/Application-Development/How-to-Defend-Against-Deadly-Integer-Overflow-Attacks/"
    },
    {
      "href": "http://msdn.microsoft.com/en-us/library/ms972819.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/ms972819.aspx"
    },
    {
      "href": "ff04b61b-734c-4298-8c75-777bf5419cbf",
      "text": "Attack: Integer Underflow Attack"
    },
    {
      "href": "1408d3c3-7fc1-4ff0-910e-cdf0e191b669",
      "text": "Attack: Client-side Validation Attack"
    }
  ],
  "html": "<h1>Applies To</h1><p>Applications written in any language that does not perform automatic bounds checking.\n</p><h1>Description</h1><p>An integer overflow occurs when an integer is incremented over the maximum value that the data type can hold. The resulting value depends on the compiler in use. ISO-C99 defines the result of an integer overflow to be the assigned value modulo one more than the maximum integer size. This is also known as wrapping around zero.\n</p><p>\nUnlike buffer overflows, when an integer overflow occurs, no memory other than that used by the integer is affected. However, it is easy for a programmer to assume that increasing the value of an integer will result in a larger integer. When the opposite happens unexpectedly, the program logic is altered. It is important to note that unless a check is added, the program has no way of knowing that the integer overflow happened and hence will continue with the assumption that the integer has the correct value. This is particularly a problem when a program is deciding how much memory to allocate for another variable. Common side effects are heap corruption causing the program to crash, or a buffer overflow allowing arbitrary code execution.\n</p><h1>Impact</h1><ul><li>Denial of service: Erroneous and unexpected integer values from an overflow can cause the application to crash.</li>\n<li>Data corruption: If the result is used in a file read or write operation, the application may read or write from the wrong place in disk or memory, resulting in corruption.</li>\n<li>Remote code execution: Often, remote code may be executed if the overflowed integer is used for memory management or indexing into a buffer.</li>\n</ul><h1>Vulnerabilities</h1><ul><li>Improper arithmetic.</li>\n<li>Failure to validate integer input.</li>\n<li>Integer calculations or assignments used to determine the size of a buffer.</li>\n<li>Insufficient bounds checking and failure to consider sign.</li>\n<li>Program logic that makes assumptions about the value of integers.</li>\n</ul><h1>Countermeasures</h1><ul><li>Arithmetic checking: Always check that the value of adding two positive integers is greater than either operand. Take extra care when performing arithmetic operations with values near the maximum of the data type.</li>\n<li>Using a language or framework that does integer checking: Frameworks like .NET and Java can be set to automatically check for integer overflows and underflows (e.g., CheckForOverflowUnderflow in C#, RemoveIntegerChecks in VB.NET).</li>\n<li>Validate input: Validate the untrusted input for upper and lower limits</li>\n<li>Verify logic: Ensure that all integer logic will operate appropriately for the accepted limits, in all cases.</li>\n</ul><h1>Example</h1><p>The code segment below shows how a small increment can cause an integer overflow:\n</p><pre>unsigned int x = 0xFFFFFFFF;unsigned int y = x + 1; // now y == 0x = 0xFFFFFFFF;y = x+2;// now y == 1\n</pre><p>\nAdding 2 to the maximum value that the unsigned integer can hold will cause the <tt>y</tt> to wrap around to 1.\n</p><h1>Additional Resources</h1><ul><li>For more information on Integer Overflows, see: <a href=\"https://www.owasp.org/index.php/Buffer_Overflows#Integer_Overflow\">https://www.owasp.org/index.php/Buffer_Overflows#Integer_Overflow</a></li>\n<li>For more information on How to Defend Against Deadly Integer Overflow Attacks, see: <a href=\"http://www.eweek.com/c/a/Application-Development/How-to-Defend-Against-Deadly-Integer-Overflow-Attacks/\">http://www.eweek.com/c/a/Application-Development/How-to-Defend-Against-Deadly-Integer-Overflow-Attacks/</a></li>\n<li>For more information on Another Look at the SafeInt Class, see: <a href=\"http://msdn.microsoft.com/en-us/library/ms972819.aspx\">http://msdn.microsoft.com/en-us/library/ms972819.aspx</a></li>\n</ul><h1>Related Items</h1><ul><li><a href=\"ff04b61b-734c-4298-8c75-777bf5419cbf\">Attack: Integer Underflow Attack</a></li>\n<li><a href=\"1408d3c3-7fc1-4ff0-910e-cdf0e191b669\">Attack: Client-side Validation Attack</a></li>\n</ul>"
}