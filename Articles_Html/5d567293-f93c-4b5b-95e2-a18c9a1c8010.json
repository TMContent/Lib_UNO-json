{
  "id": "5d567293-f93c-4b5b-95e2-a18c9a1c8010",
  "checksum": "51b93374cba7bbb97ab9a4b6850a9b10a9cc7cce",
  "words": {
    "35": [
      "ul",
      "li"
    ],
    "2008": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "title"
    ],
    "microsoft®": [
      "ul",
      "li"
    ],
    "windows": [
      "ul",
      "li"
    ],
    "communication": [
      "ul",
      "li"
    ],
    "foundation": [
      "ul",
      "li"
    ],
    "wcf)": [
      "ul",
      "li"
    ],
    "microsoft": [
      "ul",
      "li",
      "p"
    ],
    "visual": [
      "ul",
      "li"
    ],
    "studio®": [
      "ul",
      "li"
    ],
    "description": [
      "h1"
    ],
    "use": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "global": [
      "p"
    ],
    "exception": [
      "p"
    ],
    "handler": [
      "p"
    ],
    "catch": [
      "p"
    ],
    "unhandled": [
      "p",
      "p",
      "title"
    ],
    "exceptions": [
      "p",
      "p",
      "title"
    ],
    "and": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "prevent": [
      "p"
    ],
    "them": [
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "being": [
      "p"
    ],
    "propagated": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "client": [
      "p"
    ],
    "you": [
      "p",
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "handle": [
      "p",
      "title"
    ],
    "in": [
      "p",
      "ul",
      "li",
      "title"
    ],
    "wcf": [
      "p",
      "pre"
    ],
    "service": [
      "p",
      "p",
      "p",
      "pre"
    ],
    "by": [
      "p",
      "p"
    ],
    "subscribing": [
      "p",
      "p"
    ],
    "faulted": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "event": [
      "p",
      "p",
      "p",
      "pre"
    ],
    "of": [
      "p",
      "p",
      "pre"
    ],
    "host": [
      "p"
    ],
    "object": [
      "p"
    ],
    "this": [
      "p"
    ],
    "determine": [
      "p"
    ],
    "cause": [
      "p"
    ],
    "failure": [
      "p"
    ],
    "then": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "necessary": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "abort": [
      "p"
    ],
    "or": [
      "p"
    ],
    "restart": [
      "p"
    ],
    "following": [
      "p"
    ],
    "code": [
      "p"
    ],
    "snippet": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "how": [
      "p",
      "title"
    ],
    "subscribe": [
      "p",
      "pre"
    ],
    "//": [
      "pre",
      "pre"
    ],
    "hosting": [
      "pre"
    ],
    "servicehost": [
      "pre"
    ],
    "customerservicehostcustomerservicehost": [
      "pre"
    ],
    "=": [
      "pre"
    ],
    "new": [
      "pre",
      "pre"
    ],
    "servicehost…);…//": [
      "pre"
    ],
    "customerservicehost": [
      "pre",
      "pre"
    ],
    "objectcustomerservicehostfaulted": [
      "pre"
    ],
    "+=": [
      "pre"
    ],
    "eventhandlerfaulthandler);…//": [
      "pre"
    ],
    "faulthandler": [
      "pre"
    ],
    "method": [
      "pre"
    ],
    "-": [
      "pre"
    ],
    "invoked": [
      "pre"
    ],
    "when": [
      "pre"
    ],
    "enters": [
      "pre"
    ],
    "statevoid": [
      "pre"
    ],
    "faulthandlerobject": [
      "pre"
    ],
    "sender": [
      "pre"
    ],
    "eventargs": [
      "pre"
    ],
    "e{": [
      "pre"
    ],
    "log": [
      "pre"
    ],
    "reasons": [
      "pre"
    ],
    "for": [
      "pre",
      "ul",
      "li"
    ],
    "fault…}": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "on": [
      "ul",
      "li"
    ],
    "fault": [
      "ul",
      "li"
    ],
    "contracts": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "“specifying": [
      "ul",
      "li"
    ],
    "handling": [
      "ul",
      "li"
    ],
    "faults": [
      "ul",
      "li"
    ],
    "services”": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/ms733721.aspx": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "downstream": [
      "title"
    ],
    "services": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Description",
      "Additional Resources"
    ],
    "ul": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5 \nMicrosoft Visual Studio® 2008",
      "For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "li": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5",
      "Microsoft Visual Studio® 2008",
      "For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "p": [
      "Use a global exception handler to catch unhandled exceptions and prevent them from being propagated to the client.",
      "You can handle the unhandled exceptions in a WCF service by subscribing to the Faulted event of a service host object. By subscribing to this event you can determine the cause of a failure, and then perform the necessary actions to abort or restart the service.",
      "The following code snippet shows how to subscribe to the Faulted event:",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "// hosting a WCF service ServiceHost customerServiceHost;customerServiceHost = new ServiceHost(…);…// Subscribe to the Faulted event of the customerServiceHost objectcustomerServiceHost.Faulted += new EventHandler(faultHandler);…// FaultHandler method - invoked when customerServiceHost enters the Faulted statevoid faultHandler(object sender, EventArgs e){     // log the reasons for the fault…}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn.microsoft.com/en-us/library/ms733721.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \n<li>Microsoft Visual Studio® 2008</li></li>\n  </ul>\n  <h1>Description</h1>\n  <p>Use a global exception handler to catch unhandled exceptions and prevent them from being propagated to the client.</p>\n  <p>You can handle the unhandled exceptions in a WCF service by subscribing to the Faulted event of a service host object. By subscribing to this event you can determine the cause of a failure, and then perform the necessary actions to abort or restart the service.</p>\n  <p>The following code snippet shows how to subscribe to the Faulted event:</p>\n  <pre>// hosting a WCF service <br />ServiceHost customerServiceHost;<br />customerServiceHost = new ServiceHost(…);<br />…<br />// Subscribe to the Faulted event of the customerServiceHost object<br />customerServiceHost.Faulted += new EventHandler(faultHandler);<br />…<br />// FaultHandler method - invoked when customerServiceHost enters the Faulted state<br />void faultHandler(object sender, EventArgs e)<br />{     // log the reasons for the fault…<br />}</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at <a href=\"http://msdn.microsoft.com/en-us/library/ms733721.aspx\">http://msdn.microsoft.com/en-us/library/ms733721.aspx</a></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}