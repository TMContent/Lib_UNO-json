{
  "id": "275b15cc-ef5c-4637-ae77-62d8d4d1d4e2",
  "checksum": "b8541fa0e473fe229415646ea00937b2a3e80e08",
  "words": {
    "35": [
      "ul",
      "li"
    ],
    "2008": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "title"
    ],
    "microsoft®": [
      "ul",
      "li"
    ],
    "windows": [
      "ul",
      "li"
    ],
    "communication": [
      "ul",
      "li"
    ],
    "foundation": [
      "ul",
      "li"
    ],
    "wcf)": [
      "ul",
      "li"
    ],
    "microsoft": [
      "ul",
      "li",
      "p"
    ],
    "visual": [
      "ul",
      "li"
    ],
    "studio®": [
      "ul",
      "li"
    ],
    "description": [
      "h1"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "pre"
    ],
    "following": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "show": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "title"
    ],
    "example": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "pre",
      "li"
    ],
    "how": [
      "p",
      "title"
    ],
    "throw": [
      "p",
      "ol",
      "li",
      "title"
    ],
    "exception": [
      "p",
      "ol",
      "li",
      "title",
      "title"
    ],
    "with": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "title",
      "title"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "title"
    ],
    "data": [
      "p",
      "title"
    ],
    "contract": [
      "p"
    ],
    "that": [
      "p"
    ],
    "has": [
      "p"
    ],
    "complex": [
      "p",
      "title"
    ],
    "type": [
      "p",
      "ol",
      "li"
    ],
    "define": [
      "ol",
      "li"
    ],
    "datacontract": [
      "ol",
      "li"
    ],
    "pass": [
      "ol",
      "li"
    ],
    "details": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "soap": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "faults": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "as": [
      "ol",
      "li"
    ],
    "exceptions": [
      "ol",
      "li"
    ],
    "from": [
      "ol",
      "li",
      "p"
    ],
    "service": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "back": [
      "ol",
      "li"
    ],
    "client\r[datacontract]public": [
      "ol",
      "li"
    ],
    "class": [
      "ol",
      "ol",
      "li",
      "ol",
      "pre",
      "li"
    ],
    "databasefault{datamember]public": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "string": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "pre",
      "pre",
      "pre"
    ],
    "dboperation[datamember]public": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "dbreasondatamember]public": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "dbmessage}use": [
      "ol"
    ],
    "faultcontract": [
      "ol",
      "li"
    ],
    "attribute": [
      "ol",
      "li"
    ],
    "in": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "pre",
      "ul",
      "li"
    ],
    "listcustomers": [
      "ol",
      "li"
    ],
    "method": [
      "ol",
      "li"
    ],
    "generate": [
      "ol",
      "li"
    ],
    "faults\r\n[servicecontract]public": [
      "ol",
      "li"
    ],
    "interface": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "icustomerservice{//": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "get": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "list": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "customersfaultcontract(typeof(databasefault))][operationcontract]list<string>": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "listcustomers);…}create": [
      "ol"
    ],
    "and": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "populate": [
      "ol",
      "li"
    ],
    "databasefault": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "pre"
    ],
    "object": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "implementation": [
      "ol",
      "li"
    ],
    "then": [
      "ol",
      "li"
    ],
    "faultexception": [
      "ol",
      "li"
    ],
    "details\r\ncatch(exception": [
      "ol",
      "li"
    ],
    "e{": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "df": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "pre",
      "pre"
    ],
    "databasefault);df.dboperation": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "\"executereader\"df.dbreason": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "\"exception": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "querying": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "northwind": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "database\";df.dbmessage": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "emessage;throw": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "faultexceptiondatabasefault>(df);}": [
      "ol",
      "li",
      "ol",
      "pre"
    ],
    "dbmessage}": [
      "li",
      "ol",
      "pre"
    ],
    "datacontract]public": [
      "ol",
      "pre"
    ],
    "use": [
      "li"
    ],
    "listcustomers);…}": [
      "li",
      "ol",
      "pre"
    ],
    "servicecontract]public": [
      "ol",
      "pre"
    ],
    "create": [
      "li"
    ],
    "catchexception": [
      "ol",
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "for": [
      "ul",
      "li"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "on": [
      "ul",
      "li"
    ],
    "fault": [
      "ul",
      "li",
      "title"
    ],
    "contracts": [
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "see": [
      "ul",
      "li"
    ],
    "“specifying": [
      "ul",
      "li"
    ],
    "handling": [
      "ul",
      "li"
    ],
    "services”": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/ms733721.aspx": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "types": [
      "title"
    ],
    "or": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Description",
      "Additional Resources"
    ],
    "ul": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5 \r\nMicrosoft Visual Studio® 2008",
      "For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "li": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5",
      "Microsoft Visual Studio® 2008",
      "Define the DataContract type to pass the details of SOAP faults as exceptions from a service back to a client\r\n[DataContract]public class DatabaseFault{[DataMember]public string DbOperation;[DataMember]public string DbReason[DataMember]public string DbMessage;}",
      "Use the FaultContract attribute in the ListCustomers method to generate SOAP faults.\r\n[ServiceContract]public interface ICustomerService{// Get the list of customers[FaultContract(typeof(DatabaseFault))][OperationContract]List<string> ListCustomers();…}",
      "Create and populate the DatabaseFault object with the details of the exception in the Service implementation class and then throw a FaultException object with the DatabaseFault object details.\r\ncatch(Exception e){    DatabaseFault df = new DatabaseFault();df.DbOperation = \"ExecuteReader\";df.DbReason = \"Exception in querying the Northwind database.\";df.DbMessage = e.Message;throw new FaultException<DatabaseFault>(df);}",
      "For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "p": [
      "The following steps show an example of how to throw an exception with a data contract that has a complex type.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Define the DataContract type to pass the details of SOAP faults as exceptions from a service back to a client\r\n[DataContract]public class DatabaseFault{[DataMember]public string DbOperation;[DataMember]public string DbReason[DataMember]public string DbMessage;}Use the FaultContract attribute in the ListCustomers method to generate SOAP faults.\r\n[ServiceContract]public interface ICustomerService{// Get the list of customers[FaultContract(typeof(DatabaseFault))][OperationContract]List<string> ListCustomers();…}Create and populate the DatabaseFault object with the details of the exception in the Service implementation class and then throw a FaultException object with the DatabaseFault object details.\r\ncatch(Exception e){    DatabaseFault df = new DatabaseFault();df.DbOperation = \"ExecuteReader\";df.DbReason = \"Exception in querying the Northwind database.\";df.DbMessage = e.Message;throw new FaultException<DatabaseFault>(df);}",
      "[DataContract]public class DatabaseFault{[DataMember]public string DbOperation;[DataMember]public string DbReason[DataMember]public string DbMessage;}",
      "[ServiceContract]public interface ICustomerService{// Get the list of customers[FaultContract(typeof(DatabaseFault))][OperationContract]List<string> ListCustomers();…}",
      "catch(Exception e){    DatabaseFault df = new DatabaseFault();df.DbOperation = \"ExecuteReader\";df.DbReason = \"Exception in querying the Northwind database.\";df.DbMessage = e.Message;throw new FaultException<DatabaseFault>(df);}"
    ],
    "pre": [
      "[DataContract]public class DatabaseFault{[DataMember]public string DbOperation;[DataMember]public string DbReason[DataMember]public string DbMessage;}",
      "[ServiceContract]public interface ICustomerService{// Get the list of customers[FaultContract(typeof(DatabaseFault))][OperationContract]List<string> ListCustomers();…}",
      "catch(Exception e){    DatabaseFault df = new DatabaseFault();df.DbOperation = \"ExecuteReader\";df.DbReason = \"Exception in querying the Northwind database.\";df.DbMessage = e.Message;throw new FaultException<DatabaseFault>(df);}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn.microsoft.com/en-us/library/ms733721.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/ms733721.aspx"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 \r\n<li>Microsoft Visual Studio® 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>The following steps show an example of how to throw an exception with a data contract that has a complex type.</p>\r\n  <ol>\r\n    <li>Define the DataContract type to pass the details of SOAP faults as exceptions from a service back to a client\r\n<ol><pre>[DataContract]<br />public class DatabaseFault<br />{<br />[DataMember]<br />public string DbOperation;<br />[DataMember]<br />public string DbReason<br />[DataMember]<br />public string DbMessage;<br />}</pre></ol><li>Use the FaultContract attribute in the ListCustomers method to generate SOAP faults.\r\n<ol><pre>[ServiceContract]<br />public interface ICustomerService<br />{<br />// Get the list of customers<br />[FaultContract(typeof(DatabaseFault))]<br />[OperationContract]<br />List&lt;string&gt; ListCustomers();<br />…<br />}</pre></ol><li>Create and populate the DatabaseFault object with the details of the exception in the Service implementation class and then throw a FaultException object with the DatabaseFault object details.\r\n<ol><pre>catch(Exception e)<br />{    DatabaseFault df = new DatabaseFault();<br />df.DbOperation = \"ExecuteReader\";<br />df.DbReason = \"Exception in querying the Northwind database.\";<br />df.DbMessage = e.Message;<br />throw new FaultException&lt;DatabaseFault&gt;(df);<br />}<br /></pre></ol></li></li></li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on Fault Contracts, see “Specifying and Handling Faults in Contracts and Services” at <a href=\"http://msdn.microsoft.com/en-us/library/ms733721.aspx\">http://msdn.microsoft.com/en-us/library/ms733721.aspx</a></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}