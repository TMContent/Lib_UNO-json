{
  "id": "ea25af24-8eca-45ad-9f41-94bad8880247",
  "checksum": "2cc2f08cd249cb4c4bd7ca88e66090b171ba1463",
  "words": {
    "30": [
      "ol",
      "li",
      "p"
    ],
    "60": [
      "ol",
      "li",
      "p"
    ],
    "90": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "written": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li"
    ],
    "servlets": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "jsp": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "force": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "users": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "renew": [
      "p",
      "p",
      "p",
      "p"
    ],
    "their": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "passwords": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "after": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p"
    ],
    "given": [
      "p"
    ],
    "period": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "time": [
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "forcing": [
      "p"
    ],
    "reduces": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "risk": [
      "p",
      "p"
    ],
    "valid": [
      "p",
      "p",
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "becoming": [
      "p"
    ],
    "exposed": [
      "p"
    ],
    "while": [
      "p"
    ],
    "this": [
      "p"
    ],
    "technique": [
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "prevent": [
      "p"
    ],
    "attackers": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "obtaining": [
      "p"
    ],
    "through": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p"
    ],
    "brute": [
      "p"
    ],
    "attack": [
      "p",
      "p"
    ],
    "dictionary": [
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "reduce": [
      "p"
    ],
    "business": [
      "p"
    ],
    "associated": [
      "p"
    ],
    "with": [
      "p"
    ],
    "any": [
      "p"
    ],
    "instances": [
      "p"
    ],
    "discovered": [
      "p"
    ],
    "leaked": [
      "p"
    ],
    "when": [
      "h1",
      "ol",
      "li",
      "p"
    ],
    "your": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "application": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "blockquote",
      "pre"
    ],
    "should": [
      "p"
    ],
    "always": [
      "p"
    ],
    "its": [
      "p",
      "p"
    ],
    "change": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "how": [
      "h1"
    ],
    "following": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p"
    ],
    "define": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "password": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "policy": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "establish": [
      "ol",
      "li",
      "p"
    ],
    "maximum": [
      "ol",
      "li",
      "p"
    ],
    "age": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "application's": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "h1",
      "h1"
    ],
    "require": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "must": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "every": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "days": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "pre",
      "p",
      "pre",
      "blockquote",
      "pre"
    ],
    "privileged": [
      "ol",
      "li",
      "p"
    ],
    "design": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "mechanism": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "track": [
      "ol",
      "li",
      "p"
    ],
    "prompt": [
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "pre",
      "p",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "expires": [
      "ol",
      "li",
      "p"
    ],
    "sql": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre"
    ],
    "transaction": [
      "ol",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "li",
      "p"
    ],
    "help": [
      "ol",
      "li",
      "p"
    ],
    "determine": [
      "ol",
      "li",
      "p"
    ],
    "whether": [
      "ol",
      "li",
      "p"
    ],
    "user's": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "expired": [
      "ol",
      "li",
      "p"
    ],
    "select": [
      "ol",
      "li",
      "pre"
    ],
    "*": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "passhistory": [
      "ol",
      "li",
      "pre"
    ],
    "where": [
      "ol",
      "li",
      "pre"
    ],
    "userid": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "{{username}}": [
      "ol",
      "li",
      "pre"
    ],
    "last_changed": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "current_timestamp": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "-": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "interval": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "'30'": [
      "ol",
      "li",
      "pre",
      "blockquote",
      "pre"
    ],
    "day;": [
      "ol",
      "li",
      "pre"
    ],
    "enforce": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "embed": [
      "ol",
      "li",
      "p"
    ],
    "into": [
      "ol",
      "li",
      "p"
    ],
    "authentication": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "routine": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "string": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "dbstatement": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "\"select": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "login_attempts": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "users\"": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "+": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "blockquote",
      "pre",
      "pre",
      "pre"
    ],
    "\"where": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "?": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "pass": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "?\";preparedstatement": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "st": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "dbconnectionpreparestatement(dbstatement);st.setstring(1,": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "user;st.setstring(2,": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "passdigest;resultset": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "rs": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "stexecutequery();if": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "rs.first()){": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "userisvalid": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "blockquote",
      "blockquote",
      "pre",
      "pre"
    ],
    "true": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "logincount": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "rsgetint(1);}else{": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "false}rs.close();if(userisvalid){": [
      "ol",
      "li",
      "pre",
      "pre",
      "blockquote",
      "pre"
    ],
    "checkpasswordmaturityuser);}": [
      "ol",
      "li",
      "pre"
    ],
    "note": [
      "p",
      "strong"
    ],
    "pci": [
      "p"
    ],
    "dss": [
      "p"
    ],
    "requirements": [
      "p"
    ],
    "state": [
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "renewed": [
      "p"
    ],
    "at": [
      "p"
    ],
    "most": [
      "p"
    ],
    "new": [
      "p",
      "blockquote",
      "pre"
    ],
    "cannot": [
      "p"
    ],
    "same": [
      "p"
    ],
    "as": [
      "p"
    ],
    "previous": [
      "p"
    ],
    "four": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "code": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p"
    ],
    "part": [
      "p",
      "p"
    ],
    "because": [
      "p",
      "p"
    ],
    "fails": [
      "p",
      "pre"
    ],
    "allows": [
      "p"
    ],
    "more": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "guess": [
      "p",
      "p"
    ],
    "//": [
      "pre",
      "blockquote",
      "pre"
    ],
    "check": [
      "pre"
    ],
    "password's": [
      "pre",
      "blockquote",
      "pre"
    ],
    "maturity}": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "forces": [
      "p"
    ],
    "there": [
      "p"
    ],
    "limited": [
      "p"
    ],
    "guessed": [
      "p"
    ],
    "checks": [
      "blockquote",
      "pre"
    ],
    "maturity": [
      "blockquote",
      "pre"
    ],
    "checkpasswordmaturityuser);}...private": [
      "blockquote",
      "pre"
    ],
    "void": [
      "blockquote",
      "pre"
    ],
    "checkpasswordmaturitystring": [
      "blockquote",
      "pre"
    ],
    "throws": [
      "blockquote",
      "pre"
    ],
    "usermustchangepasswordexception{": [
      "blockquote",
      "pre"
    ],
    "connection": [
      "blockquote",
      "pre"
    ],
    "dbconnection": [
      "blockquote",
      "pre"
    ],
    "myappgetdbconnection();": [
      "blockquote",
      "pre"
    ],
    "passhistory\"": [
      "blockquote",
      "pre"
    ],
    "and\"": [
      "blockquote",
      "pre"
    ],
    "\"": [
      "blockquote",
      "pre"
    ],
    "day;\";": [
      "blockquote",
      "pre"
    ],
    "preparedstatement": [
      "blockquote",
      "pre"
    ],
    "dbconnectionpreparestatement(dbstatement);": [
      "blockquote",
      "pre"
    ],
    "stsetstring(1,": [
      "blockquote",
      "pre"
    ],
    "user;": [
      "blockquote",
      "pre"
    ],
    "resultset": [
      "blockquote",
      "pre"
    ],
    "stexecutequery();": [
      "blockquote",
      "pre"
    ],
    "if": [
      "blockquote",
      "pre"
    ],
    "rs.first())": [
      "blockquote",
      "pre"
    ],
    "{": [
      "blockquote",
      "pre"
    ],
    "rsclose();": [
      "blockquote",
      "pre"
    ],
    "throw": [
      "blockquote",
      "pre"
    ],
    "usermustchangepasswordexception);": [
      "blockquote",
      "pre"
    ],
    "}": [
      "blockquote",
      "pre"
    ],
    "rsclose();}": [
      "blockquote",
      "pre"
    ],
    "renewal": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "ul": [
      "Applications written using Servlets or JSP."
    ],
    "li": [
      "Applications written using Servlets or JSP.",
      "Define a password change policy. Establish a maximum password age for your application's users. For example, require that users must change passwords every 60 days and privileged users must change passwords every 30 days.",
      "Design a password change mechanism. Track the password age and prompt the user to change their password when the password expires. For example, the following SQL transaction will help the application to determine whether a user's password has expired:\r\n      sql> select * from passHistory      where userid = {{username}} and            last_changed < (current_timestamp - interval '30' day);",
      "Enforce the password change policy. Embed the change of password mechanism into the authentication routine. Example:\r\n      String dbStatement = \"select login_attempts from users\"                   + \"where user = ? and pass = ?;\";PreparedStatement st = dbConnection.prepareStatement(dbStatement);st.setString(1, user);st.setString(2, passDigest);ResultSet rs = st.executeQuery();if (rs.first()){      userIsValid = true;      loginCount = rs.getInt(1);}else{      userIsValid = false;}rs.close();if(userIsValid){      checkPasswordMaturity(user);}"
    ],
    "p": [
      "Force users to renew their passwords after a given period of time.",
      "Forcing users to renew their passwords reduces the risk of valid credentials becoming exposed. While this technique can prevent attackers from obtaining the valid credentials through the use of a Credentials Brute Force Attack or a Credentials Dictionary Attack, it can also reduce the business risk associated with any instances of discovered or leaked valid credentials.",
      "Your application should always force its users to change their passwords.",
      "Use the following steps to force users to change their passwords:",
      "Define a password change policy. Establish a maximum password age for your application's users. For example, require that users must change passwords every 60 days and privileged users must change passwords every 30 days.",
      "Design a password change mechanism. Track the password age and prompt the user to change their password when the password expires. For example, the following SQL transaction will help the application to determine whether a user's password has expired:",
      "Enforce the password change policy. Embed the change of password mechanism into the authentication routine. Example:",
      "Note: PCI DSS requirements state that a user's password must be renewed at most every 90 days and that the new password cannot be the same as the previous four.",
      "The following code is part of the application's authentication routine. Because the application fails to force the user to renew their password, it allows more time for an attacker to guess the user's password.",
      "The following code is part of the application's authentication routine. Because the application forces its users to renew their passwords, there is limited time for an attacker to guess the user's password or to use a guessed password."
    ],
    "ol": [
      "Define a password change policy. Establish a maximum password age for your application's users. For example, require that users must change passwords every 60 days and privileged users must change passwords every 30 days.\r\n    \r\n    \r\n      \r\n        Design a password change mechanism. Track the password age and prompt the user to change their password when the password expires. For example, the following SQL transaction will help the application to determine whether a user's password has expired:\r\n      sql> select * from passHistory      where userid = {{username}} and            last_changed < (current_timestamp - interval '30' day);\r\n    \r\n    \r\n      \r\n        Enforce the password change policy. Embed the change of password mechanism into the authentication routine. Example:\r\n      String dbStatement = \"select login_attempts from users\"                   + \"where user = ? and pass = ?;\";PreparedStatement st = dbConnection.prepareStatement(dbStatement);st.setString(1, user);st.setString(2, passDigest);ResultSet rs = st.executeQuery();if (rs.first()){      userIsValid = true;      loginCount = rs.getInt(1);}else{      userIsValid = false;}rs.close();if(userIsValid){      checkPasswordMaturity(user);}"
    ],
    "strong": [
      "Define a password change policy.",
      "Design a password change mechanism.",
      "Enforce the password change policy.",
      "Note:"
    ],
    "pre": [
      "sql> select * from passHistory      where userid = {{username}} and            last_changed < (current_timestamp - interval '30' day);",
      "String dbStatement = \"select login_attempts from users\"                   + \"where user = ? and pass = ?;\";PreparedStatement st = dbConnection.prepareStatement(dbStatement);st.setString(1, user);st.setString(2, passDigest);ResultSet rs = st.executeQuery();if (rs.first()){      userIsValid = true;      loginCount = rs.getInt(1);}else{      userIsValid = false;}rs.close();if(userIsValid){      checkPasswordMaturity(user);}",
      "String dbStatement = \"select login_attempts from users\"                   + \"where user = ? and pass = ?;\";PreparedStatement st = dbConnection.prepareStatement(dbStatement);st.setString(1, user);st.setString(2, passDigest);ResultSet rs = st.executeQuery();if (rs.first()){      userIsValid = true;      loginCount = rs.getInt(1);}else{      userIsValid = false;}rs.close();if(userIsValid){       // The application fails to check the password's maturity}",
      "String dbStatement = \"select login_attempts from users\"                   + \"where user = ? and pass = ?;\";PreparedStatement st = dbConnection.prepareStatement(dbStatement);st.setString(1, user);st.setString(2, passDigest);ResultSet rs = st.executeQuery();if (rs.first()){      userIsValid = true;      loginCount = rs.getInt(1);}else{      userIsValid = false;}rs.close();if(userIsValid){      // The application checks the password's maturity      checkPasswordMaturity(user);}...private void checkPasswordMaturity(String user)      throws UserMustChangePasswordException{      Connection dbConnection = MyApp.getDBConnection();      String dbStatement = \"select * from passHistory\"                         + \"where userid = ? and\"                         + \" last_changed < (current_timestamp - interval '30' day);\";      PreparedStatement st = dbConnection.prepareStatement(dbStatement);      st.setString(1, user);      ResultSet rs = st.executeQuery();      if (rs.first())      {            rs.close();            throw new UserMustChangePasswordException();      }      rs.close();}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "blockquote": [
      "String dbStatement = \"select login_attempts from users\"                   + \"where user = ? and pass = ?;\";PreparedStatement st = dbConnection.prepareStatement(dbStatement);st.setString(1, user);st.setString(2, passDigest);ResultSet rs = st.executeQuery();if (rs.first()){      userIsValid = true;      loginCount = rs.getInt(1);}else{      userIsValid = false;}rs.close();if(userIsValid){      // The application checks the password's maturity      checkPasswordMaturity(user);}...private void checkPasswordMaturity(String user)      throws UserMustChangePasswordException{      Connection dbConnection = MyApp.getDBConnection();      String dbStatement = \"select * from passHistory\"                         + \"where userid = ? and\"                         + \" last_changed < (current_timestamp - interval '30' day);\";      PreparedStatement st = dbConnection.prepareStatement(dbStatement);      st.setString(1, user);      ResultSet rs = st.executeQuery();      if (rs.first())      {            rs.close();            throw new UserMustChangePasswordException();      }      rs.close();}"
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Force users to renew their passwords after a given period of time.</p>\r\n  <h1>Why</h1>\r\n  <p>Forcing users to renew their passwords reduces the risk of valid credentials becoming exposed. While this technique can prevent attackers from obtaining the valid credentials through the use of a Credentials Brute Force Attack or a Credentials Dictionary Attack, it can also reduce the business risk associated with any instances of discovered or leaked valid credentials.</p>\r\n  <h1>When</h1>\r\n  <p>Your application should always force its users to change their passwords.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following steps to force users to change their passwords:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Define a password change policy. </strong>Establish a maximum password age for your application's users. For example, require that users must change passwords every 60 days and privileged users must change passwords every 30 days.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Design a password change mechanism. </strong>Track the password age and prompt the user to change their password when the password expires. For example, the following SQL transaction will help the application to determine whether a user's password has expired:</p>\r\n      <pre>sql&gt; select * from passHistory<br />      where userid = {{username}} and<br />            last_changed &lt; (current_timestamp - interval '30' day);</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Enforce the password change policy. </strong>Embed the change of password mechanism into the authentication routine. Example:</p>\r\n      <pre>String dbStatement = \"select login_attempts from users\"<br />                   + \"where user = ? and pass = ?;\";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />{<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);}else<br />{<br />      userIsValid = false;<br />}<br /><br />rs.close();<br /><br />if(userIsValid)<br />{<br />      checkPasswordMaturity(user);<br />}</pre>\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    <strong>Note:</strong> PCI DSS requirements state that a user's password must be renewed at most every 90 days and that the new password cannot be the same as the previous four.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code is part of the application's authentication routine. Because the application fails to force the user to renew their password, it allows more time for an attacker to guess the user's password.</p>\r\n  <pre>String dbStatement = \"select login_attempts from users\"<br />                   + \"where user = ? and pass = ?;\";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />{<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);<br />}<br />else<br />{<br />      userIsValid = false;<br />}<br /><br />rs.close();<br /><br />if(userIsValid)<br />{<br />       // The application fails to check the password's maturity<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code is part of the application's authentication routine. Because the application forces its users to renew their passwords, there is limited time for an attacker to guess the user's password or to use a guessed password.</p>\r\n  <blockquote>\r\n    <pre>String dbStatement = \"select login_attempts from users\"<br />                   + \"where user = ? and pass = ?;\";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br />if (rs.first())<br />{<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);<br />}<br />else<br />{<br />      userIsValid = false;<br />}<br /><br />rs.close();<br /><br />if(userIsValid)<br />{<br />      // The application checks the password's maturity<br />      checkPasswordMaturity(user);<br />}<br /><br />...<br /><br />private void checkPasswordMaturity(String user)<br />      throws UserMustChangePasswordException<br />{<br />      Connection dbConnection = MyApp.getDBConnection();<br />      String dbStatement = \"select * from passHistory\"<br />                         + \"where userid = ? and\"<br />                         + \" last_changed &lt; (current_timestamp - interval '30' day);\";<br />      PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />      st.setString(1, user);<br />      ResultSet rs = st.executeQuery();<br />      if (rs.first())<br />      {<br />            rs.close();<br />            throw new UserMustChangePasswordException();<br />      }<br />      rs.close();<br />}</pre>\r\n  </blockquote>\r\n  <br />"
}