{
  "id": "18ac74df-602b-4a58-8998-52f638f3a045",
  "checksum": "6ad43fe17f83cbdcb90538b1a9ea99ee79fcd35e",
  "words": {
    "1": [
      "ul",
      "li",
      "a"
    ],
    "2": [
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "java": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "springmvc": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "summary": [
      "h1"
    ],
    "perform": [
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "title"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "title"
    ],
    "using": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "within": [
      "p",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "objectives": [
      "h1"
    ],
    "strong": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "powerful": [
      "p",
      "p"
    ],
    "control": [
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "prevent": [
      "p",
      "p",
      "p"
    ],
    "various": [
      "p"
    ],
    "security": [
      "p",
      "p",
      "p"
    ],
    "issues": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "article": [
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "describe": [
      "p"
    ],
    "how": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "a",
      "ul",
      "li",
      "a"
    ],
    "built-in": [
      "p"
    ],
    "mechanisms": [
      "p"
    ],
    "provided": [
      "p",
      "p"
    ],
    "by": [
      "p"
    ],
    "appropriate": [
      "p"
    ],
    "solution": [
      "h1"
    ],
    "example": [
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "spring": [
      "p",
      "p",
      "p",
      "p"
    ],
    "provides": [
      "p",
      "p"
    ],
    "validator": [
      "p",
      "p",
      "em",
      "p",
      "em",
      "pre",
      "p",
      "em"
    ],
    "mechanism": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "h1"
    ],
    "throughout": [
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "matter.": [
      "p"
    ],
    "additionally": [
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "binder": [
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "pre",
      "pre",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p"
    ],
    "strengthen": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "controls": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "commons": [
      "p"
    ],
    "looks": [
      "p"
    ],
    "very": [
      "p"
    ],
    "similar": [
      "p"
    ],
    "what": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "struts2": [
      "p"
    ],
    "but": [
      "p",
      "p",
      "p"
    ],
    "there": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "additional": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "integrate": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "part": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "core": [
      "p"
    ],
    "model": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p"
    ],
    "covered": [
      "p"
    ],
    "here": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "implement": [
      "p"
    ],
    "interface": [
      "p"
    ],
    "you'll": [
      "p"
    ],
    "need": [
      "p"
    ],
    "have": [
      "p",
      "p"
    ],
    "supports": [
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "a"
    ],
    "methods": [
      "p",
      "p"
    ],
    "implementation": [
      "p"
    ],
    "method": [
      "p",
      "p",
      "p",
      "p"
    ],
    "trivial": [
      "p"
    ],
    "shown": [
      "p",
      "p"
    ],
    "below": [
      "p",
      "p"
    ],
    "where": [
      "p"
    ],
    "content": [
      "p"
    ],
    "validations": [
      "p",
      "p",
      "p"
    ],
    "placed": [
      "p"
    ],
    "has": [
      "p"
    ],
    "helpfully": [
      "p"
    ],
    "validationutils": [
      "p",
      "em"
    ],
    "class": [
      "p",
      "pre"
    ],
    "which": [
      "p",
      "p"
    ],
    "contains": [
      "p"
    ],
    "many": [
      "p"
    ],
    "common": [
      "p"
    ],
    "might": [
      "p"
    ],
    "want": [
      "p"
    ],
    "support": [
      "p"
    ],
    "import": [
      "pre",
      "pre"
    ],
    "orgspringframework.validation.validator;...public": [
      "pre"
    ],
    "uservalidator": [
      "pre"
    ],
    "implements": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "@override": [
      "pre",
      "pre"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "boolean": [
      "pre"
    ],
    "supportsclass": [
      "pre"
    ],
    "aclass": [
      "pre"
    ],
    "return": [
      "pre"
    ],
    "userclass.isassignablefrom(aclass);": [
      "pre"
    ],
    "}": [
      "pre"
    ],
    "void": [
      "pre",
      "pre"
    ],
    "validateobject": [
      "pre"
    ],
    "target": [
      "pre"
    ],
    "errors": [
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "validationutilsrejectifemptyorwhitespace(errors,": [
      "pre",
      "pre"
    ],
    "\"firstname\"": [
      "pre"
    ],
    "\"first": [
      "pre"
    ],
    "name": [
      "pre",
      "pre"
    ],
    "can't": [
      "pre",
      "pre"
    ],
    "blank\";": [
      "pre",
      "pre"
    ],
    "\"lastname\"": [
      "pre",
      "pre"
    ],
    "\"last": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "order": [
      "p",
      "p"
    ],
    "tie": [
      "p"
    ],
    "together": [
      "p"
    ],
    "associated": [
      "p"
    ],
    "controller": [
      "p",
      "p",
      "p",
      "pre"
    ],
    "simply": [
      "p",
      "p"
    ],
    "update": [
      "p",
      "p"
    ],
    "configuration": [
      "p"
    ],
    "entry": [
      "p"
    ],
    "given": [
      "p"
    ],
    "bean": [
      "pre",
      "pre"
    ],
    "name=\"/user/create\"": [
      "pre"
    ],
    "class=\"comme.mycontroller\">": [
      "pre"
    ],
    "property": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "name=\"commandclass\"": [
      "pre"
    ],
    "value=\"...\"/>": [
      "pre",
      "pre",
      "pre"
    ],
    "name=\"formview\"": [
      "pre"
    ],
    "name=\"successview\"": [
      "pre"
    ],
    "name=\"validator\"": [
      "pre"
    ],
    "class=\"comme.uservalidator\"/>": [
      "pre"
    ],
    "/property></bean>": [
      "pre"
    ],
    "now": [
      "p"
    ],
    "place": [
      "p"
    ],
    "view": [
      "p"
    ],
    "ex.": [
      "p"
    ],
    "jsp": [
      "p"
    ],
    "display": [
      "p"
    ],
    "applicable": [
      "p"
    ],
    "form:errors": [
      "pre",
      "pre"
    ],
    "path=\"*class=\"error\"": [
      "pre"
    ],
    "/": [
      "pre",
      "pre"
    ],
    "able": [
      "p"
    ],
    "show": [
      "p",
      "p"
    ],
    "all": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "change": [
      "p"
    ],
    "path": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "field": [
      "p",
      "p"
    ],
    "specific": [
      "p"
    ],
    "path=\"firstname\"": [
      "pre"
    ],
    "cssclass=\"error\"": [
      "pre"
    ],
    "another": [
      "p"
    ],
    "important": [
      "p"
    ],
    "technology": [
      "p"
    ],
    "aware": [
      "p"
    ],
    "though": [
      "p"
    ],
    "doesn't": [
      "p"
    ],
    "specifically": [
      "p",
      "p"
    ],
    "fall": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "require": [
      "p"
    ],
    "or": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "fields": [
      "p",
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "being": [
      "p",
      "p"
    ],
    "bound": [
      "p"
    ],
    "parameter": [
      "p"
    ],
    "tampering": [
      "p",
      "p"
    ],
    "well": [
      "p",
      "p"
    ],
    "other": [
      "p"
    ],
    "//method": [
      "pre"
    ],
    "added": [
      "pre"
    ],
    "class@initbinderpublic": [
      "pre"
    ],
    "initbinderwebdatabinder": [
      "pre"
    ],
    "databinder": [
      "pre"
    ],
    "databindersetdisallowedfields(new": [
      "pre"
    ],
    "string]": [
      "pre",
      "pre",
      "pre"
    ],
    "{\"id\"};": [
      "pre"
    ],
    "databindersetrequiredfields(new": [
      "pre"
    ],
    "{\"firstname\"": [
      "pre",
      "pre"
    ],
    "\"lastname\"};": [
      "pre"
    ],
    "databindersetallowedfields(new": [
      "pre"
    ],
    "\"dob\"": [
      "pre"
    ],
    "\"address\"": [
      "pre"
    ],
    "\"phone\"};}": [
      "pre"
    ],
    "above": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "annotated": [
      "p"
    ],
    "@initbinder": [
      "p",
      "em"
    ],
    "restrict": [
      "p"
    ],
    "binding": [
      "p",
      "p"
    ],
    "called": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "simple": [
      "p"
    ],
    "setdisallowedfields": [
      "p",
      "em"
    ],
    "call": [
      "p"
    ],
    "prevents": [
      "p",
      "p"
    ],
    "user": [
      "p",
      "p"
    ],
    "\"id\"": [
      "p"
    ],
    "say": [
      "p"
    ],
    "hidden": [
      "p"
    ],
    "overwrite": [
      "p"
    ],
    "they": [
      "p"
    ],
    "do": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "access": [
      "p"
    ],
    "again": [
      "p"
    ],
    "while": [
      "p"
    ],
    "strictly": [
      "p"
    ],
    "does": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "function": [
      "p",
      "p"
    ],
    "valuable": [
      "p"
    ],
    "resource": [
      "p"
    ],
    "when": [
      "p"
    ],
    "securing": [
      "p"
    ],
    "id": [
      "em"
    ],
    "conclusion": [
      "p"
    ],
    "properly": [
      "p"
    ],
    "applied": [
      "p"
    ],
    "thoroughly": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "accomplishing": [
      "p"
    ],
    "task": [
      "p"
    ],
    "more": [
      "h1",
      "ul",
      "li"
    ],
    "information": [
      "h1",
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "struts": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "please": [
      "ul",
      "li"
    ],
    "http//struts.apache.org/2.x/docs/validation.html": [
      "ul",
      "li",
      "a"
    ],
    "guidelines": [
      "h1"
    ],
    "sources": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "length": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "range": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "format": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "type": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "passed": [
      "ul",
      "li",
      "a",
      "a"
    ],
    "database": [
      "ul",
      "li",
      "a",
      "a",
      "ul",
      "li",
      "a"
    ],
    "filter": [
      "ul",
      "li",
      "a"
    ],
    "user-supplied": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "filename": [
      "ul",
      "li",
      "a"
    ],
    "rely": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "client-side": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "validated": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "filenames": [
      "ul",
      "li",
      "a"
    ],
    "paths": [
      "ul",
      "li",
      "a"
    ],
    "code": [
      "h1",
      "ul",
      "li",
      "a"
    ],
    "examples": [
      "h1"
    ],
    "jsf": [
      "ul",
      "li",
      "a"
    ],
    "esapi": [
      "ul",
      "li",
      "a"
    ],
    "executor": [
      "ul",
      "li",
      "a"
    ],
    "testing": [
      "h1"
    ],
    "test": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "server-side": [
      "ul",
      "li",
      "a"
    ],
    "injection": [
      "ul",
      "li",
      "a"
    ],
    "manipulation": [
      "ul",
      "li",
      "a"
    ],
    "bugs": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "double": [
      "ul",
      "li",
      "a"
    ],
    "encoding": [
      "ul",
      "li",
      "a"
    ],
    "bypass": [
      "ul",
      "li",
      "a"
    ],
    "integer": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "overflows": [
      "ul",
      "li",
      "a"
    ],
    "underflow": [
      "ul",
      "li",
      "a"
    ],
    "deserialization": [
      "ul",
      "li",
      "a"
    ],
    "untrusted": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Objectives",
      "Solution Example",
      "More Information",
      "Input and Data Validation Guidelines",
      "Input and Data Validation Checklists",
      "Input and Data Validation Code Examples",
      "Input and Data Validation Testing"
    ],
    "ul": [
      "JAVA SpringMVC",
      "For more information about input validation in Struts 2, please http://struts.apache.org/2.x/docs/validation.html",
      "Validate Input from All Sources\r\n    \r\n    \r\n      Validate Input for Length, Range, Format, and Type\r\n    \r\n    \r\n      \r\n        Validate All Input Passed to the Database\r\n      \r\n    \r\n    \r\n      Filter All User-Supplied Filename and Path Input\r\n    \r\n    \r\n      Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated\r\n    \r\n    \r\n      Input Is Validated for Length, Range, Format and Type\r\n    \r\n    \r\n      All Database Input Is Validated\r\n    \r\n    \r\n      User-Supplied Filenames and Paths Are Validated\r\n    \r\n    \r\n      The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF\r\n    \r\n    \r\n      Input Validation Using SpringMVC\r\n    \r\n    \r\n      Input Validation Using Struts 1\r\n    \r\n    \r\n      Input Validation Using Struts 2\r\n    \r\n    \r\n      Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java\r\n    \r\n    \r\n      How to Test for Path Manipulation Bugs in Java\r\n    \r\n    \r\n      How to Test for Double Encoding Bugs in Java\r\n    \r\n    \r\n      How to Test for Client-side Validation Bypass Bugs in Java\r\n    \r\n    \r\n      How to Test for Integer Overflows in Java\r\n    \r\n    \r\n      How to Test for Integer Underflow Bugs in Java\r\n    \r\n    \r\n      How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "li": [
      "JAVA",
      "SpringMVC",
      "For more information about input validation in Struts 2, please http://struts.apache.org/2.x/docs/validation.html",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ],
    "p": [
      "Perform Input Validation Using SpringMVC Within an Application.",
      "Strong Input Validation Is a Powerful Control That Can Prevent Various Security Issues Within an Application. This Article Will Describe How to Use the Built-in Mechanisms Provided by SpringMVC to Perform Appropriate Input Validation.",
      "Spring Provides the Validator Mechanism to Perform Input Validation Within SpringMVC (and Throughout Spring for That Matter). Additionally, the Data Binder Mechanism Can Be Used to Strengthen Your Input Validation Controls. It Is Also Possible to Use the Commons Validator Mechanism for Spring Validation And It Looks Very Similar to What Is Used in Struts2, but There Are Additional Steps to Integrate with SpringMVC And It Is Not Part of the Core Model, And as Such It Is Not Covered Here.",
      "If You Implement the Validator Interface, You'll Need to Have the Supports And Validate Methods in Your Implementation. The Supports Method Is Trivial as Shown Below. The Validate Method Is Where the Content of Your Validations Are Placed. Spring Has Helpfully Provided the ValidationUtils Class Which Contains Many Common Validations You Might Want to Support. An Example Is Shown Below.",
      "In Order to Tie This Validation Together with the Associated Controller, You Simply Update the Configuration Entry for the Given Controller.",
      "Now That the Validations Are in Place, You Simply Update Your View (ex. JSP) to Display the Errors If Applicable.",
      "The Example Able Will Show All Errors, but You Can Change the Path to Show Field Specific Errors.",
      "Another important technology to be aware of, though it doesn't specifically fall within input validation, is the data binder mechanism in SpringMVC. You can use this mechanism to specifically allow, require or prevent certain fields from being bound in the controller. This is powerful in that it can prevent parameter tampering as well as other issues.",
      "The example above shows the use of a method annotated with @InitBinder being used to restrict the binding mechanism of SpringMVC. The methods called on the data binder are all simple, but for example, the setDisallowedFields method call prevents the user from binding the \"id\" field. This prevents a user from tampering with, say, hidden fields in order to overwrite data to which they do not have access. Again, while this is not strictly input validation, it does function as a security control on input and as such is a valuable resource when securing your SpringMVC application.",
      "In conclusion, input validation can function as a strong security control if used properly and applied thoroughly throughout the application. The SpringMVC framework provides the Validator mechanism as well as the data binder for accomplishing this task."
    ],
    "em": [
      "Validator",
      "Validator",
      "ValidationUtils",
      "@InitBinder",
      "setDisallowedFields",
      "id",
      "Validator"
    ],
    "pre": [
      "import Import Org.springframework.validation.Validator;...public Class UserValidator Implements Validator {  @Override  Public Boolean Supports(Class AClass) {    Return User.class.isAssignableFrom(aClass);  }",
      "@Override  Public Void Validate(Object Target, Errors Errors) {    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"firstName\", \"First Name Can't Be Blank\");    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"lastName\", \"Last Name Can't Be Blank\");  }}",
      "<bean Name=\"/user/create\" Class=\"com.me.MyController\">    <property Name=\"commandClass\" Value=\"....\"/>    <property Name=\"formView\" Value=\"....\"/>    <property Name=\"successView\" Value=\"....\"/>    <property Name=\"validator\">        <bean Class=\"com.me.UserValidator\"/>    </property></bean>",
      "<form:errors Path=\"*Class=\"error\" />",
      "<form:errors Path=\"firstName\" cssClass=\"error\" />",
      "//method added to controller class@InitBinderpublic void initBinder(WebDataBinder dataBinder) {  dataBinder.setDisallowedFields(new String[] {\"id\"});  dataBinder.setRequiredFields(new String[] {\"firstName\", \"lastName\"});  dataBinder.setAllowedFields(new String[] {\"firstName\", \"lastName\", \"dob\", \"address\", \"phone\"});}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://struts.apache.org/2.x/docs/validation.html",
      "Validate Input from All Sources",
      "Validate Input for Length, Range, Format, and Type",
      "Validate All Input Passed to the Database",
      "Validate All Input Passed to the Database",
      "Filter All User-Supplied Filename and Path Input",
      "Do Not Rely on Client-Side Validation",
      "Input from All Sources Is Validated",
      "Input Is Validated for Length, Range, Format and Type",
      "All Database Input Is Validated",
      "User-Supplied Filenames and Paths Are Validated",
      "The Application Does Not Rely on Client-Side Validation",
      "Input Validation Using JSF",
      "Input Validation Using SpringMVC",
      "Input Validation Using Struts 1",
      "Input Validation Using Struts 2",
      "Use ESAPI Executor",
      "How to Test for Server-Side Code Injection in Java",
      "How to Test for Path Manipulation Bugs in Java",
      "How to Test for Double Encoding Bugs in Java",
      "How to Test for Client-side Validation Bypass Bugs in Java",
      "How to Test for Integer Overflows in Java",
      "How to Test for Integer Underflow Bugs in Java",
      "How to Test for Deserialization of Untrusted Data Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "http://struts.apache.org/2.x/docs/validation.html",
      "text": "http://struts.apache.org/2.x/docs/validation.html"
    },
    {
      "href": "/article/b531d29c-86f7-4812-90ce-5f3f0f780aba",
      "text": "Validate Input from All Sources"
    },
    {
      "href": "/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d",
      "text": "Validate Input for Length, Range, Format, and Type"
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "\r\n        Validate All Input Passed to the Database\r\n      "
    },
    {
      "href": "/article/67060e7b-7145-4e84-b574-c07548f81d9f",
      "text": "Validate All Input Passed to the Database"
    },
    {
      "href": "/article/a5491c44-164b-4046-94d3-b575b9745e8b",
      "text": "Filter All User-Supplied Filename and Path Input"
    },
    {
      "href": "/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8",
      "text": "Do Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/7f8deb21-cd52-41be-80b4-8897612021dc",
      "text": "Input from All Sources Is Validated"
    },
    {
      "href": "/article/61869793-2c10-40c0-b82a-babcc0312697",
      "text": "Input Is Validated for Length, Range, Format and Type"
    },
    {
      "href": "/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0",
      "text": "All Database Input Is Validated"
    },
    {
      "href": "/article/17884af0-fc83-412a-b613-4def4a6f84ad",
      "text": "User-Supplied Filenames and Paths Are Validated"
    },
    {
      "href": "/article/b1803c35-9579-4a38-9a63-30202160ef25",
      "text": "The Application Does Not Rely on Client-Side Validation"
    },
    {
      "href": "/article/0f49430b-2abe-408f-b046-89fa739f5d53",
      "text": "Input Validation Using JSF"
    },
    {
      "href": "/article/18ac74df-602b-4a58-8998-52f638f3a045",
      "text": "Input Validation Using SpringMVC"
    },
    {
      "href": "/article/d124abb1-e230-43ef-8762-1caa0dbb89ca",
      "text": "Input Validation Using Struts 1"
    },
    {
      "href": "/article/2f917654-65a8-49c9-b000-c17f9765bf42",
      "text": "Input Validation Using Struts 2"
    },
    {
      "href": "/article/38342130-4e4b-47df-afd9-c7e8c86f77ee",
      "text": "Use ESAPI Executor"
    },
    {
      "href": "/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4",
      "text": "How to Test for Server-Side Code Injection in Java"
    },
    {
      "href": "/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0",
      "text": "How to Test for Path Manipulation Bugs in Java"
    },
    {
      "href": "/article/5c99da7b-b4eb-4315-b48c-ac2598c13144",
      "text": "How to Test for Double Encoding Bugs in Java"
    },
    {
      "href": "/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f",
      "text": "How to Test for Client-side Validation Bypass Bugs in Java"
    },
    {
      "href": "/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1",
      "text": "How to Test for Integer Overflows in Java"
    },
    {
      "href": "/article/ed20009a-59ef-415d-8e72-0ff3221a1346",
      "text": "How to Test for Integer Underflow Bugs in Java"
    },
    {
      "href": "/article/d7682043-0095-4700-97dd-01ce797c4ada",
      "text": "How to Test for Deserialization of Untrusted Data Bugs in Java"
    }
  ],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>JAVA <li>SpringMVC</li></li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>Perform Input Validation Using SpringMVC Within an Application.</p>\r\n  <h1>Objectives</h1>\r\n  <p>Strong Input Validation Is a Powerful Control That Can Prevent Various Security Issues Within an Application. This Article Will Describe How to Use the Built-in Mechanisms Provided by SpringMVC to Perform Appropriate Input Validation.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>Spring Provides the <em>Validator</em> Mechanism to Perform Input Validation Within SpringMVC (and Throughout Spring for That Matter). Additionally, the Data Binder Mechanism Can Be Used to Strengthen Your Input Validation Controls. It Is Also Possible to Use the Commons Validator Mechanism for Spring Validation And It Looks Very Similar to What Is Used in Struts2, but There Are Additional Steps to Integrate with SpringMVC And It Is Not Part of the Core Model, And as Such It Is Not Covered Here.</p>\r\n  <p>If You Implement the <em>Validator</em> Interface, You'll Need to Have the Supports And Validate Methods in Your Implementation. The Supports Method Is Trivial as Shown Below. The Validate Method Is Where the Content of Your Validations Are Placed. Spring Has Helpfully Provided the <em>ValidationUtils</em> Class Which Contains Many Common Validations You Might Want to Support. An Example Is Shown Below.</p>\r\n  <pre>import Import Org.springframework.validation.Validator;<br />...<br />public Class UserValidator Implements Validator &#123;<br />&nbsp; &#64;Override<br />&nbsp; Public Boolean Supports(Class AClass) &#123;<br />&nbsp;&nbsp;&nbsp; Return User.class.isAssignableFrom(aClass);<br />&nbsp; &#125;</pre>\r\n  <pre>&nbsp; &#64;Override<br />&nbsp; Public Void Validate(Object Target, Errors Errors) &#123;<br />&nbsp;&nbsp;&nbsp; ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"firstName\", \"First Name Can't Be Blank\");<br />&nbsp;&nbsp;&nbsp; ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"lastName\", \"Last Name Can't Be Blank\");<br />&nbsp; &#125;<br />&#125;</pre>\r\n  <p>In Order to Tie This Validation Together with the Associated Controller, You Simply Update the Configuration Entry for the Given Controller.</p>\r\n  <pre>&lt;bean Name=\"/user/create\" Class=\"com.me.MyController\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;property Name=\"commandClass\" Value=\"....\"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;property Name=\"formView\" Value=\"....\"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;property Name=\"successView\" Value=\"....\"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;property Name=\"validator\"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;bean Class=\"com.me.UserValidator\"/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/property&gt;<br />&lt;/bean&gt;</pre>\r\n  <p>Now That the Validations Are in Place, You Simply Update Your View (ex. JSP) to Display the Errors If Applicable.</p>\r\n  <pre>&lt;form:errors Path=\"&#42;Class=\"error\" /&gt;</pre>\r\n  <p>The Example Able Will Show All Errors, but You Can Change the Path to Show Field Specific Errors. </p>\r\n  <pre>&lt;form:errors Path=\"firstName\" cssClass=\"error\" /&gt;</pre>\r\n  <p>Another important technology to be aware of, though it doesn't specifically fall within input validation, is the data binder mechanism in SpringMVC. You can use this mechanism to specifically allow, require or prevent certain fields from being bound in the controller. This is powerful in that it can prevent parameter tampering as well as other issues. </p>\r\n  <pre>//method added to controller class<br />&#64;InitBinder<br />public void initBinder(WebDataBinder dataBinder) &#123;<br />&nbsp; dataBinder.setDisallowedFields(new String&#91;&#93; &#123;\"id\"&#125;);<br />&nbsp; dataBinder.setRequiredFields(new String&#91;&#93; &#123;\"firstName\", \"lastName\"&#125;);<br />&nbsp; dataBinder.setAllowedFields(new String&#91;&#93; &#123;\"firstName\", \"lastName\", \"dob\", \"address\", \"phone\"&#125;);<br />&#125;</pre>\r\n  <p>The example above shows the use of a method annotated with <em>&#64;InitBinder</em> being used to restrict the binding mechanism of SpringMVC. The methods called on the data binder are all simple, but for example, the <em>setDisallowedFields</em> method call prevents the user from binding the \"<em>id</em>\" field. This prevents a user from tampering with, say, hidden fields in order to overwrite data to which they do not have access. Again, while this is not strictly input validation, it does function as a security control on input and as such is a valuable resource when securing your SpringMVC application.</p>\r\n  <p>In conclusion, input validation can function as a strong security control if used properly and applied thoroughly throughout the application. The SpringMVC framework provides the <em>Validator</em> mechanism as well as the data binder for accomplishing this task. </p>\r\n  <h1>More Information</h1>\r\n  <ul>\r\n    <li>For more information about input validation in Struts 2, please <a href=\"http://struts.apache.org/2.x/docs/validation.html\">http://struts.apache.org/2.x/docs/validation.html</a></li>\r\n  </ul>\r\n  <h1>Input and Data Validation Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/b531d29c-86f7-4812-90ce-5f3f0f780aba\">Validate Input from All Sources</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c98695c5-cf02-44a1-96bf-1f8046b8ad9d\">Validate Input for Length, Range, Format, and Type</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">\r\n        <a href=\"/article/67060e7b-7145-4e84-b574-c07548f81d9f\">Validate All Input Passed to the Database</a>\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/a5491c44-164b-4046-94d3-b575b9745e8b\">Filter All User-Supplied Filename and Path Input</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/9f21442f-2aee-4573-8be6-a5b51d9c89b8\">Do Not Rely on Client-Side Validation</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/7f8deb21-cd52-41be-80b4-8897612021dc\">Input from All Sources Is Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/61869793-2c10-40c0-b82a-babcc0312697\">Input Is Validated for Length, Range, Format and Type</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/42f4b565-14f7-42f4-8c5a-0f78f357e4c0\">All Database Input Is Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/17884af0-fc83-412a-b613-4def4a6f84ad\">User-Supplied Filenames and Paths Are Validated</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/b1803c35-9579-4a38-9a63-30202160ef25\">The Application Does Not Rely on Client-Side Validation</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Code Examples</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/0f49430b-2abe-408f-b046-89fa739f5d53\">Input Validation Using JSF</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/18ac74df-602b-4a58-8998-52f638f3a045\">Input Validation Using SpringMVC</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d124abb1-e230-43ef-8762-1caa0dbb89ca\">Input Validation Using Struts 1</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/2f917654-65a8-49c9-b000-c17f9765bf42\">Input Validation Using Struts 2</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/38342130-4e4b-47df-afd9-c7e8c86f77ee\">Use ESAPI Executor</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Input and Data Validation Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/fd3ecaaa-cb7c-43a2-a91a-f19862f736d4\">How to Test for Server-Side Code Injection in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/c00b9149-1290-4c9e-bcd0-392a9c5a6fb0\">How to Test for Path Manipulation Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/5c99da7b-b4eb-4315-b48c-ac2598c13144\">How to Test for Double Encoding Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/fc95c5e5-667a-4e66-b1cf-f7d0529c4c2f\">How to Test for Client-side Validation Bypass Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/6f4e927b-bd45-498b-95c4-78fd2c3287c1\">How to Test for Integer Overflows in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/ed20009a-59ef-415d-8e72-0ff3221a1346\">How to Test for Integer Underflow Bugs in Java</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/d7682043-0095-4700-97dd-01ce797c4ada\">How to Test for Deserialization of Untrusted Data Bugs in Java</a>\r\n    </li>\r\n  </ul>"
}