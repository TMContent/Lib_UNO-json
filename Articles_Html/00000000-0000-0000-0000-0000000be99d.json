{
  "id": "00000000-0000-0000-0000-0000000be99d",
  "checksum": "187a7c7944c202571cb91e416ec62c697d39d649",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "h2",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "html5": [
      "ul",
      "li"
    ],
    "what": [
      "h2"
    ],
    "check": [
      "h2",
      "h2"
    ],
    "for": [
      "h2",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "verify": [
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "urls": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "passed": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "xmlhttprequestopen": [
      "p",
      "em",
      "p",
      "em",
      "p",
      "em",
      "ol",
      "em",
      "em",
      "em",
      "em",
      "li",
      "strong",
      "em",
      "em",
      "em",
      "ol",
      "em",
      "em",
      "em",
      "em",
      "em",
      "li",
      "em",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "validated": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "title"
    ],
    "ensure": [
      "p"
    ],
    "they": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li"
    ],
    "be": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre"
    ],
    "trusted": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "why": [
      "h2"
    ],
    "validating": [
      "p"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "function": [
      "p",
      "pre",
      "p",
      "p"
    ],
    "prevents": [
      "p",
      "p"
    ],
    "remote": [
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "attackers": [
      "p"
    ],
    "from": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "controlling": [
      "p"
    ],
    "your": [
      "p"
    ],
    "request": [
      "p",
      "p"
    ],
    "how": [
      "h2",
      "h2"
    ],
    "identify": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "pages": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "use": [
      "ol",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong"
    ],
    "xmlhttprequestopen.": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li"
    ],
    "search": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "application": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "calls": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "create": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong"
    ],
    "a": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre"
    ],
    "spreadsheet": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "list": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "uses": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p",
      "p"
    ],
    "define": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "p"
    ],
    "web": [
      "ol",
      "li",
      "strong",
      "ol",
      "li",
      "strong"
    ],
    "sites": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "considered": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "trustworthy": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "data": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "sources": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "by": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "each": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "piece": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "regex": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "site": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "in": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "xmlhttprequestopen,": [
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "make": [
      "ol",
      "li"
    ],
    "sure": [
      "ol",
      "li"
    ],
    "url": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "pre"
    ],
    "it": [
      "ol",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "first": [
      "ol",
      "li"
    ],
    "match": [
      "ol",
      "li"
    ],
    "corresponding": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "urls)": [
      "ol",
      "li"
    ],
    "fix": [
      "h2"
    ],
    "validate": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "xmlhttprequestopen:": [
      "p"
    ],
    "anchors": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "javascript": [
      "ol",
      "li"
    ],
    "an": [
      "ol",
      "li"
    ],
    "invisible": [
      "ol",
      "li"
    ],
    "dom": [
      "ol",
      "li"
    ],
    "object": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "used": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "assign": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "href": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "vaues": [
      "ol",
      "li",
      "strong"
    ],
    "anchor": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "created": [
      "ol",
      "li"
    ],
    "previous": [
      "ol",
      "li"
    ],
    "step": [
      "ol",
      "li"
    ],
    "needs": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "as": [
      "ol",
      "li"
    ],
    "value": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "method": [
      "ol",
      "li"
    ],
    "hostname": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "em",
      "em",
      "em"
    ],
    "property": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "objects": [
      "ol",
      "li"
    ],
    "assigned": [
      "ol",
      "li"
    ],
    "them": [
      "ol",
      "li"
    ],
    "contains": [
      "ol",
      "li"
    ],
    "against": [
      "ol",
      "li"
    ],
    "validateurlurl)": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "var": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "documentcreateelement('a'),": [
      "pre",
      "pre"
    ],
    "isvalid": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "false": [
      "pre",
      "pre"
    ],
    "anchorhref": [
      "pre",
      "pre"
    ],
    "alertanchor.hostname)": [
      "pre"
    ],
    "if/^www\\.mywebsite\\.com$/.test(anchor.hostname))": [
      "pre"
    ],
    "true": [
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre"
    ],
    "null": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "isvalid\n}": [
      "pre"
    ],
    "problem": [
      "h2"
    ],
    "example": [
      "h2",
      "h2"
    ],
    "mywebsite": [
      "p",
      "p",
      "p"
    ],
    "variable": [
      "p",
      "p",
      "p",
      "p"
    ],
    "within": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "pre",
      "p",
      "pre"
    ],
    "changes": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "another": [
      "p",
      "p"
    ],
    "server": [
      "p",
      "p"
    ],
    "which": [
      "p",
      "p",
      "p"
    ],
    "causes": [
      "p",
      "p"
    ],
    "security": [
      "p",
      "p",
      "p"
    ],
    "threat": [
      "p",
      "p",
      "p"
    ],
    "/**": [
      "pre",
      "pre"
    ],
    "http://mywebsite.com>:\n*/\n<html>\n<head>\n<script>\nvar": [
      "pre",
      "pre"
    ],
    "xhreq": [
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre"
    ],
    "xmlhttprequest);\nvar": [
      "pre",
      "pre"
    ],
    "xhrurl": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"http//www.mywebsite.com/filename.html\";\nxhreq.open(\"get\",": [
      "pre"
    ],
    "false;\nxhreq.send(null);\ndocument.getelementbyid(‘response’).innerhtml": [
      "pre"
    ],
    "xhreqresponsetext;\n</script>\n</head>\n\n<body>\n<div": [
      "pre"
    ],
    "id=”response”</div>\n</body>\n</html>\n\n/*\n*": [
      "pre",
      "pre"
    ],
    "console:\n*/\nxhrurl": [
      "pre",
      "pre"
    ],
    "“http//www.maliciouswebsite.com/filename.html”;": [
      "pre",
      "pre"
    ],
    "solution": [
      "h2"
    ],
    "however": [
      "p"
    ],
    "validates": [
      "p"
    ],
    "if": [
      "p"
    ],
    "coming": [
      "p"
    ],
    "same": [
      "p"
    ],
    "domain": [
      "p"
    ],
    "before": [
      "p"
    ],
    "making": [
      "p"
    ],
    "\"http//www.mywebsite.com/filename.html\";//would": [
      "pre"
    ],
    "normally": [
      "pre"
    ],
    "controllable": [
      "pre"
    ],
    "valuefunction": [
      "pre"
    ],
    "alertanchor.host)": [
      "pre"
    ],
    "if/^www\\.mywebsite\\.com([:]\\d+)?$/.test(anchor.host))": [
      "pre"
    ],
    "isvalid\n}\nif(validateurl('http://www.mywebsite.com'))": [
      "pre"
    ],
    "xhreqopen(\"get\",": [
      "pre"
    ],
    "false;": [
      "pre"
    ],
    "xhreqsend(null);": [
      "pre"
    ],
    "documentgetelementbyid(‘response’).innerhtml": [
      "pre"
    ],
    "xhreqresponsetext;\n}\n</script>\n</head>\n\n<body>\n<div": [
      "pre"
    ],
    "additional": [
      "h2"
    ],
    "resources": [
      "h2"
    ],
    "more": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "information": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "about": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "xmlhttprequest": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "https//developer.mozilla.org/en-us/docs/web/api/xmlhttprequest.": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx": [
      "ul",
      "li",
      "a"
    ],
    "https//developer.mozilla.org/en-us/docs/web/api/xmlhttprequest": [
      "a"
    ],
    "cors": [
      "h2",
      "h2"
    ],
    "guidelines": [
      "h2"
    ],
    "allow": [
      "ul",
      "li",
      "a"
    ],
    "only": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "domains": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "access-control-allow-origin": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "header": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklist": [
      "h2"
    ],
    "items": [
      "h2"
    ],
    "allowed": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Additional Resources",
      "CORS Guidelines",
      "CORS Checklist Items"
    ],
    "ul": [
      "HTML5",
      "For more information about XMLHttpRequest, see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest.\n For more information about XMLHttpRequest.Open, see http://msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx",
      "Allow Only Trusted Domains in the Access-Control-Allow-Origin Header\n Validate URLs Passed to XMLHttpRequest.open",
      "Only Trusted Domains Are Allowed in the Access-Control-Allow-Origin Header\n URLs Passed to XMLHttpRequest.open Are Validated"
    ],
    "li": [
      "HTML5",
      "Identify all pages that use XMLHttpRequest.open. Search the application code for calls to XMLHttpRequest.open. Create a spreadsheet to list all code that uses XMLHttpRequest.open.",
      "Define trusted web sites. Create a spreadsheet to list the sites that are considered trustworthy data sources by each piece of code that calls XMLHttpRequest.open. Define a RegEx for each trusted site in the spreadsheet.",
      "Verify that URLs passed to XMLHttpRequest.open are validated. For each piece of code that uses XMLHttpRequest.open, make sure that the URL passed to it is validated first to match the corresponding trusted URL(s) in the spreadsheet of trusted sites.",
      "Identify all pages that use XMLHttpRequest.open. Search application code for calls to XMLHttpRequest.open. Create a spreadsheet to list all code that uses XMLHttpRequest.open.",
      "Define trusted web sites. Create a spreadsheet to list the sites that are considered trustworthy data sources by each piece of code that calls XMLHttpRequest.open. Define a RegEx for each trusted site in the spreadsheet.",
      "Create anchors. For each piece of code that calls XMLHttpRequest.open, use JavaScript to create an invisible DOM object that can be used to validate URLs.",
      "Assign href vaues to anchors. For each anchor created in the previous step, assign the URL that needs to be validated as the href value to the anchor object. The URL that needs to be validated is the URL that is passed to the XMLHttpRequest.open method.",
      "Use the hostname property to validate URLs. Use the hostname property of the anchor objects to validate the URLs assigned to them. The hostname property contains the hostname of the URL. Validate the hostname of the URLs against the corresponding RegEx in the spreadsheet of trusted sites.",
      "For more information about XMLHttpRequest, see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest.",
      "For more information about XMLHttpRequest.Open, see http://msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx",
      "Allow Only Trusted Domains in the Access-Control-Allow-Origin Header",
      "Validate URLs Passed to XMLHttpRequest.open",
      "Only Trusted Domains Are Allowed in the Access-Control-Allow-Origin Header",
      "URLs Passed to XMLHttpRequest.open Are Validated"
    ],
    "p": [
      "Verify that URLs passed to XMLHttpRequest.open are validated to ensure that they can be trusted.",
      "Validating URLs passed to the XMLHttpRequest.open function prevents remote attackers from controlling your request.",
      "To verify that URLs passed to XMLHttpRequest.open are validated:",
      "To validate URLs passed to XMLHttpRequest.open:",
      "",
      "MyWebsite uses a variable to define the URL to be used within the XMLHttpRequest.open function. A remote attacker changes the value of this variable to another server, which causes a security threat.",
      "",
      "MyWebsite uses a variable to define the URL to be used within the XMLHttpRequest.open function. A remote attacker changes the value of this variable to another server, which causes a security threat. However, MyWebsite validates the URL to verify if it is coming from the same domain before making the request, which prevents a security threat.",
      ""
    ],
    "em": [
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "XMLHttpRequest.open",
      "hostname",
      "hostname",
      "hostname"
    ],
    "ol": [
      "Identify all pages that use XMLHttpRequest.open. Search the application code for calls to XMLHttpRequest.open. Create a spreadsheet to list all code that uses XMLHttpRequest.open.\n Define trusted web sites. Create a spreadsheet to list the sites that are considered trustworthy data sources by each piece of code that calls XMLHttpRequest.open. Define a RegEx for each trusted site in the spreadsheet. \n Verify that URLs passed to XMLHttpRequest.open are validated. For each piece of code that uses XMLHttpRequest.open, make sure that the URL passed to it is validated first to match the corresponding trusted URL(s) in the spreadsheet of trusted sites.",
      "Identify all pages that use XMLHttpRequest.open. Search application code for calls to XMLHttpRequest.open. Create a spreadsheet to list all code that uses XMLHttpRequest.open.\n Define trusted web sites. Create a spreadsheet to list the sites that are considered trustworthy data sources by each piece of code that calls XMLHttpRequest.open. Define a RegEx for each trusted site in the spreadsheet. \n Create anchors. For each piece of code that calls XMLHttpRequest.open, use JavaScript to create an invisible DOM object that can be used to validate URLs.\n Assign href vaues to anchors. For each anchor created in the previous step, assign the URL that needs to be validated as the href value to the anchor object. The URL that needs to be validated is the URL that is passed to the XMLHttpRequest.open method.\n Use the hostname property to validate URLs. Use the hostname property of the anchor objects to validate the URLs assigned to them. The hostname property contains the hostname of the URL. Validate the hostname of the URLs against the corresponding RegEx in the spreadsheet of trusted sites."
    ],
    "strong": [
      "Identify all pages that use XMLHttpRequest.open.",
      "Define trusted web sites.",
      "Verify that URLs passed to XMLHttpRequest.open are validated.",
      "Identify all pages that use XMLHttpRequest.open.",
      "Define trusted web sites.",
      "Create anchors.",
      "Assign href vaues to anchors.",
      "Use the hostname property to validate URLs."
    ],
    "pre": [
      "function validateURL(url) {\n  var anchor = document.createElement('a'),\n      isValid = false;\n  anchor.href = url;\n  alert(anchor.hostname)\n  if(/^www\\.mywebsite\\.com$/.test(anchor.hostname)) {\n    isValid = true;\n  }\n  anchor = null;\n  return isValid;\n}",
      "/*\n* <http://mywebsite.com>:\n*/\n<html>\n<head>\n<script>\nvar xhReq = new XMLHttpRequest();\nvar xhrUrl = \"http://www.mywebsite.com/filename.html\";\nxhReq.open(\"GET\", xhrUrl, false);\nxhReq.send(null);\ndocument.getElementById(‘response’).innerHTML = xhReq.responseText;\n</script>\n</head>\n\n<body>\n<div id=”response”></div>\n</body>\n</html>\n\n/*\n* <remote attacker from console>:\n*/\nxhrUrl = “http://www.maliciouswebsite.com/filename.html”;",
      "/*\n* <http://mywebsite.com>:\n*/\n<html>\n<head>\n<script>\nvar xhReq = new XMLHttpRequest();\nvar xhrUrl = \"http://www.mywebsite.com/filename.html\";//would normally be a controllable value\nfunction validateURL(url) {\n  var anchor = document.createElement('a'),\n      isValid = false;\n  anchor.href = url;\n  alert(anchor.host)\n  if(/^www\\.mywebsite\\.com([:]\\d+)?$/.test(anchor.host)) {\n    isValid = true;\n  }\n  anchor = null;\n  return isValid;\n}\nif(validateURL('http://www.mywebsite.com')) {\n    xhReq.open(\"GET\", xhrUrl, false);\n    xhReq.send(null);\n    document.getElementById(‘response’).innerHTML = xhReq.responseText;\n}\n</script>\n</head>\n\n<body>\n<div id=”response”></div>\n</body>\n</html>\n\n/*\n* <remote attacker from console>:\n*/\nxhrUrl = “http://www.maliciouswebsite.com/filename.html”;"
    ],
    "br": [
      "",
      "",
      "",
      ""
    ],
    "a": [
      "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",
      "http://msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx",
      "Allow Only Trusted Domains in the Access-Control-Allow-Origin Header",
      "Validate URLs Passed to XMLHttpRequest.open",
      "Only Trusted Domains Are Allowed in the Access-Control-Allow-Origin Header",
      "URLs Passed to XMLHttpRequest.open Are Validated"
    ]
  },
  "links": [
    {
      "href": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",
      "text": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"
    },
    {
      "href": "http://msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx"
    },
    {
      "href": "00000000-0000-0000-0000-000000690310",
      "text": "Allow Only Trusted Domains in the Access-Control-Allow-Origin Header"
    },
    {
      "href": "00000000-0000-0000-0000-0000000a3746",
      "text": "Validate URLs Passed to XMLHttpRequest.open"
    },
    {
      "href": "00000000-0000-0000-0000-00000095ebe9",
      "text": "Only Trusted Domains Are Allowed in the Access-Control-Allow-Origin Header"
    },
    {
      "href": "00000000-0000-0000-0000-0000000be99d",
      "text": "URLs Passed to XMLHttpRequest.open Are Validated"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> HTML5</li>\n</ul><h2>What to Check For</h2><p>Verify that URLs passed to <em>XMLHttpRequest.open</em> are validated to ensure that they can be trusted.\n</p><h2>Why</h2><p>Validating URLs passed to the <em>XMLHttpRequest.open</em> function prevents remote attackers from controlling your request.\n</p><h2>How to Check</h2><p>To verify that URLs passed to <em>XMLHttpRequest.open</em> are validated:\n</p><ol>\n<li> <strong>Identify all pages that use <em>XMLHttpRequest.open</em>.</strong> Search the application code for calls to <em>XMLHttpRequest.open</em>. Create a spreadsheet to list all code that uses <em>XMLHttpRequest.open</em>.</li>\n<li> <strong>Define trusted web sites.</strong> Create a spreadsheet to list the sites that are considered trustworthy data sources by each piece of code that calls <em>XMLHttpRequest.open</em>. Define a RegEx for each trusted site in the spreadsheet. </li>\n<li> <strong>Verify that URLs passed to <em>XMLHttpRequest.open</em> are validated.</strong> For each piece of code that uses <em>XMLHttpRequest.open</em>, make sure that the URL passed to it is validated first to match the corresponding trusted URL(s) in the spreadsheet of trusted sites.</li>\n</ol><h2>How to Fix</h2><p>To validate URLs passed to <em>XMLHttpRequest.open</em>:\n</p><ol>\n<li> <strong>Identify all pages that use <em>XMLHttpRequest.open</em>.</strong> Search application code for calls to <em>XMLHttpRequest.open</em>. Create a spreadsheet to list all code that uses <em>XMLHttpRequest.open</em>.</li>\n<li> <strong>Define trusted web sites.</strong> Create a spreadsheet to list the sites that are considered trustworthy data sources by each piece of code that calls <em>XMLHttpRequest.open</em>. Define a RegEx for each trusted site in the spreadsheet. </li>\n<li> <strong>Create anchors.</strong> For each piece of code that calls <em>XMLHttpRequest.open</em>, use JavaScript to create an invisible DOM object that can be used to validate URLs.</li>\n<li> <strong>Assign href vaues to anchors.</strong> For each anchor created in the previous step, assign the URL that needs to be validated as the href value to the anchor object. The URL that needs to be validated is the URL that is passed to the <em>XMLHttpRequest.open</em> method.</li>\n<li> <strong>Use the <em>hostname</em> property to validate URLs.</strong> Use the <em>hostname</em> property of the anchor objects to validate the URLs assigned to them. The <em>hostname</em> property contains the hostname of the URL. Validate the hostname of the URLs against the corresponding RegEx in the spreadsheet of trusted sites. </li>\n</ol><pre>function validateURL(url) {\n  var anchor = document.createElement('a'),\n      isValid = false;\n  anchor.href = url;\n  alert(anchor.hostname)\n  if(/^www\\.mywebsite\\.com$/.test(anchor.hostname)) {\n    isValid = true;\n  }\n  anchor = null;\n  return isValid;\n}\n</pre><p>\n<br></p><h2>Problem Example</h2><p>MyWebsite uses a variable to define the URL to be used within the XMLHttpRequest.open function. A remote attacker changes the value of this variable to another server, which causes a security threat.\n</p><pre>/*\n* &lt;http://mywebsite.com&gt;:\n*/\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nvar xhReq = new XMLHttpRequest();\nvar xhrUrl = \"http://www.mywebsite.com/filename.html\";\nxhReq.open(\"GET\", xhrUrl, false);\nxhReq.send(null);\ndocument.getElementById(‘response’).innerHTML = xhReq.responseText;\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div id=”response”&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n/*\n* &lt;remote attacker from console&gt;:\n*/\nxhrUrl = “http://www.maliciouswebsite.com/filename.html”;\n\n</pre><p>\n<br>\n</p><h2>Solution Example</h2><p>MyWebsite uses a variable to define the URL to be used within the XMLHttpRequest.open function. A remote attacker changes the value of this variable to another server, which causes a security threat. However, MyWebsite validates the URL to verify if it is coming from the same domain before making the request, which prevents a security threat.\n</p><pre>/*\n* &lt;http://mywebsite.com&gt;:\n*/\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nvar xhReq = new XMLHttpRequest();\nvar xhrUrl = \"http://www.mywebsite.com/filename.html\";//would normally be a controllable value\nfunction validateURL(url) {\n  var anchor = document.createElement('a'),\n      isValid = false;\n  anchor.href = url;\n  alert(anchor.host)\n  if(/^www\\.mywebsite\\.com([:]\\d+)?$/.test(anchor.host)) {\n    isValid = true;\n  }\n  anchor = null;\n  return isValid;\n}\nif(validateURL('http://www.mywebsite.com')) {\n    xhReq.open(\"GET\", xhrUrl, false);\n    xhReq.send(null);\n    document.getElementById(‘response’).innerHTML = xhReq.responseText;\n}\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div id=”response”&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n/*\n* &lt;remote attacker from console&gt;:\n*/\nxhrUrl = “http://www.maliciouswebsite.com/filename.html”;\n\n</pre><p><br>\n</p><h2>Additional Resources</h2><ul><li> For more information about XMLHttpRequest, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest</a>.</li>\n<li> For more information about XMLHttpRequest.Open, see <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx\">http://msdn.microsoft.com/en-us/library/windows/desktop/ms757849%28v=vs.85%29.aspx</a>\n<br></li>\n</ul><h2>CORS Guidelines</h2><ul><li> <a href=\"00000000-0000-0000-0000-000000690310\">Allow Only Trusted Domains in the Access-Control-Allow-Origin Header</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000000a3746\">Validate URLs Passed to XMLHttpRequest.open</a></li>\n</ul><h2>CORS Checklist Items</h2><ul><li> <a href=\"00000000-0000-0000-0000-00000095ebe9\">Only Trusted Domains Are Allowed in the Access-Control-Allow-Origin Header</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000000be99d\">URLs Passed to XMLHttpRequest.open Are Validated</a></li>\n</ul>"
}