{
  "id": "35bde9da-b8f2-4f8d-9a3f-48a3ededed4b",
  "checksum": "8695bd615e6c1b01d87e6c48fffc6cb5146e95cf",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "written": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "title"
    ],
    "servlets": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "jsp": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "consider": [
      "p",
      "p",
      "title"
    ],
    "java": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "authentication": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "authorization": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "title"
    ],
    "services": [
      "p"
    ],
    "for": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "part": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "pre",
      "li",
      "p",
      "p"
    ],
    "java's": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "security": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "model": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "jaas": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "title"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "proven": [
      "p"
    ],
    "work": [
      "p"
    ],
    "with": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "stand-alone": [
      "p",
      "p"
    ],
    "web-based": [
      "p",
      "p"
    ],
    "fully": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "integrated": [
      "p",
      "p"
    ],
    "into": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "platform": [
      "p",
      "p"
    ],
    "requires": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "minimal": [
      "p"
    ],
    "overhead": [
      "p"
    ],
    "when": [
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "deploying": [
      "p"
    ],
    "within": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "uses": [
      "p"
    ],
    "access": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "control": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "authorizes": [
      "p"
    ],
    "its": [
      "p",
      "p"
    ],
    "users": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "determine": [
      "p"
    ],
    "which": [
      "p",
      "p"
    ],
    "roles": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "gain": [
      "p"
    ],
    "resources": [
      "p",
      "p",
      "p",
      "p"
    ],
    "then": [
      "p"
    ],
    "rather": [
      "p"
    ],
    "than": [
      "p"
    ],
    "devoting": [
      "p"
    ],
    "creating": [
      "p"
    ],
    "own": [
      "p"
    ],
    "design": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "authorize": [
      "p"
    ],
    "create": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "a": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "policy": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "p",
      "li",
      "p",
      "strong"
    ],
    "stores": [
      "ol",
      "li",
      "p"
    ],
    "rights": [
      "ol",
      "li",
      "p"
    ],
    "associated": [
      "ol",
      "li",
      "p"
    ],
    "different": [
      "ol",
      "li",
      "p"
    ],
    "types": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "loaded": [
      "ol",
      "li",
      "p"
    ],
    "virtual": [
      "ol",
      "li",
      "p"
    ],
    "machine": [
      "ol",
      "li",
      "p"
    ],
    "jvm)": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "-djavasecurity.auth.policy": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "flag": [
      "ol",
      "li",
      "p"
    ],
    "loading": [
      "ol",
      "li",
      "p"
    ],
    "jvm": [
      "ol",
      "li",
      "p"
    ],
    "instance": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "hosts": [
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "li",
      "p"
    ],
    "created": [
      "ol",
      "li",
      "p"
    ],
    "typical": [
      "ol",
      "li",
      "p"
    ],
    "text": [
      "ol",
      "li",
      "p"
    ],
    "editor": [
      "ol",
      "li",
      "p"
    ],
    "tool": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "an": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "h1",
      "h1"
    ],
    "file": [
      "ol",
      "li",
      "p"
    ],
    "looks": [
      "ol",
      "li",
      "p"
    ],
    "like": [
      "ol",
      "li",
      "p"
    ],
    "grant": [
      "ol",
      "li",
      "pre"
    ],
    "principal": [
      "ol",
      "li",
      "pre"
    ],
    "applicationauth.usertoken": [
      "ol",
      "li",
      "pre"
    ],
    "\"joe\"{": [
      "ol",
      "li",
      "pre"
    ],
    "permission": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "pre"
    ],
    "javasecurity.securitypermission": [
      "ol",
      "li",
      "pre"
    ],
    "\"accessapp\"};to": [
      "ol",
      "li"
    ],
    "provide": [
      "ol",
      "li"
    ],
    "extra": [
      "ol",
      "li"
    ],
    "flexibility": [
      "ol",
      "li"
    ],
    "in": [
      "ol",
      "li"
    ],
    "managing": [
      "ol",
      "li"
    ],
    "controls": [
      "ol",
      "li"
    ],
    "allows": [
      "ol",
      "li"
    ],
    "append": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "additional": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "permissions": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "current jaas": [
      "ol",
      "li"
    ],
    "well": [
      "ol",
      "li"
    ],
    "modify": [
      "ol",
      "li"
    ],
    "during": [
      "ol",
      "li"
    ],
    "runtime": [
      "ol",
      "li"
    ],
    "appending": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "strong",
      "p"
    ],
    "permissions the": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "component": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "is responsible": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "modifying": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "getpolicy": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "granted": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "application's": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "given": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "usercodesigner[]": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "csign": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "pre"
    ],
    "nullcodesource": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "csource": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "pre",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "pre"
    ],
    "codesourcenull,": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "csign;principal[]": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "principals": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "principal1];principals[0]": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "applicationauth.usertoken(\"joe\");protectiondomain": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "pdomain": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "protectiondomaincsource,": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "null": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "principals;java.security.policy": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "javasecurity.policy.getpolicy();permissioncollection": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "permcollect": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "policygetpermissions(pdomain);securitypermission": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "secperm": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "securitypermission\"modifyuser\");permcollect.add(secperm);amending": [
      "ol",
      "li",
      "ul"
    ],
    "the jaas": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "amend": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "policy the": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "responsible": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "setpolicy": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "examplejava.security.policy": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "applicationpolicy);//": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "add": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "appropriate": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "permissionsjavasecurity.policy.setpolicy(policy);note": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "applicationpolicy": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "em"
    ],
    "class": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "pre"
    ],
    "custom": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "implementation": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "abstract": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "implement": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "privilegedexceptionaction": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "em",
      "li",
      "pre"
    ],
    "invokes": [
      "ol",
      "li",
      "p"
    ],
    "process": [
      "ol",
      "li",
      "p"
    ],
    "manager": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "verifies": [
      "ol",
      "li",
      "p"
    ],
    "whether": [
      "ol",
      "li",
      "p"
    ],
    "current": [
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "ol",
      "ol",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "allowed": [
      "ol",
      "li",
      "p"
    ],
    "perform": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "desired": [
      "ol",
      "li",
      "p"
    ],
    "task": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "import": [
      "ol",
      "li",
      "pre"
    ],
    "javasecurity.*;import": [
      "ol",
      "li",
      "pre"
    ],
    "javaxsecurity.auth.*;public": [
      "ol",
      "li",
      "pre"
    ],
    "final": [
      "ol",
      "li",
      "pre"
    ],
    "authexception": [
      "ol",
      "li",
      "pre"
    ],
    "implements": [
      "ol",
      "li",
      "pre"
    ],
    "privilegedexceptionaction{": [
      "ol",
      "li",
      "pre"
    ],
    "private": [
      "ol",
      "li",
      "pre"
    ],
    "string": [
      "ol",
      "li",
      "pre"
    ],
    "name": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "public": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "authexceptionstring": [
      "ol",
      "li",
      "pre"
    ],
    "{": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "ol",
      "li",
      "pre"
    ],
    "set": [
      "ol",
      "li",
      "pre"
    ],
    "requested": [
      "ol",
      "li",
      "pre"
    ],
    "action": [
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "thisname": [
      "ol",
      "li",
      "pre"
    ],
    "}": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "object": [
      "ol",
      "li",
      "pre"
    ],
    "run)": [
      "ol",
      "li",
      "pre"
    ],
    "perm": [
      "ol",
      "li",
      "pre"
    ],
    "securitypermissionname);": [
      "ol",
      "li",
      "pre"
    ],
    "securitymanager": [
      "ol",
      "li",
      "pre"
    ],
    "secman": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "systemgetsecuritymanager();": [
      "ol",
      "li",
      "pre"
    ],
    "ifsecman": [
      "ol",
      "li",
      "pre"
    ],
    "==": [
      "ol",
      "li",
      "pre"
    ],
    "securitymanager);": [
      "ol",
      "li",
      "pre"
    ],
    "secmancheckpermission(perm);": [
      "ol",
      "li",
      "pre"
    ],
    "return": [
      "ol",
      "li",
      "pre"
    ],
    "}}": [
      "ol",
      "li",
      "pre"
    ],
    "enforce": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "because": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "entity-oriented": [
      "ol",
      "li",
      "p"
    ],
    "impersonation": [
      "ol",
      "li",
      "p"
    ],
    "performing": [
      "ol",
      "li",
      "p"
    ],
    "such": [
      "ol",
      "li",
      "p"
    ],
    "impersonates": [
      "ol",
      "li",
      "p"
    ],
    "trying": [
      "ol",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p"
    ],
    "sufficient": [
      "ol",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "li",
      "p"
    ],
    "throw": [
      "ol",
      "li",
      "p"
    ],
    "exception": [
      "ol",
      "li",
      "p"
    ],
    "authexception\"nameofaction\");subject.doasprivileged(subject,": [
      "ol",
      "li",
      "pre"
    ],
    "null;": [
      "ol",
      "li",
      "pre"
    ],
    "\"accessapp\"};": [
      "pre"
    ],
    "securitypermission\"modifyuser\");permcollect.add(secperm);": [
      "li",
      "pre"
    ],
    "codesigner]": [
      "pre"
    ],
    "amending": [
      "li",
      "p",
      "strong"
    ],
    "javasecurity.policy": [
      "pre"
    ],
    "permissionsjavasecurity.policy.setpolicy(policy);": [
      "pre"
    ],
    "note": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "myapp": [
      "p",
      "p",
      "p"
    ],
    "multi-user": [
      "p",
      "p"
    ],
    "financial": [
      "p",
      "p"
    ],
    "developers": [
      "p",
      "p",
      "p"
    ],
    "designed": [
      "p"
    ],
    "mechanisms": [
      "p"
    ],
    "in-house": [
      "p"
    ],
    "investing": [
      "p"
    ],
    "lot": [
      "p"
    ],
    "designing": [
      "p"
    ],
    "developing": [
      "p"
    ],
    "testing": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "reliable": [
      "p"
    ],
    "complement": [
      "p"
    ],
    "products": [
      "p"
    ],
    "solution": [
      "h1"
    ],
    "use": [
      "p"
    ],
    "mechanism": [
      "p"
    ],
    "invest": [
      "p"
    ],
    "more": [
      "p"
    ],
    "actual": [
      "p"
    ],
    "while": [
      "p"
    ],
    "still": [
      "p"
    ],
    "meeting": [
      "p"
    ],
    "requirements": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "ul": [
      "Applications written using Servlets or JSP.",
      "Appending to the JAAS policy: To append additional permissions, the application component that is responsible for modifying the policy must have a getPolicy permission granted within the application's security policy. Example of appending additional permissions to a given user:CodeSigner[] csign = null;CodeSource csource = new CodeSource(null, csign);Principal[] principals = new Principal[1];principals[0] = new application.auth.UserToken(\"joe\");ProtectionDomain pDomain = new ProtectionDomain(csource, null, null, principals);java.security.Policy policy = java.security.Policy.getPolicy();PermissionCollection permCollect = policy.getPermissions(pDomain);SecurityPermission secPerm = new SecurityPermission(\"ModifyUser\");permCollect.add(secPerm);Amending the JAAS policy: To amend the policy, the application component responsible for modifying the policy must have a setPolicy permission granted within the application's security policy. Example:java.security.Policy policy = new ApplicationPolicy();// Add the appropriate permissionsjava.security.Policy.setPolicy(policy);Note that the ApplicationPolicy class is a custom implementation of Java's abstract Policy class."
    ],
    "li": [
      "Applications written using Servlets or JSP.",
      "Create a JAAS policy. The JAAS policy stores the rights associated with the different types of users. It is loaded into the Java Virtual Machine (JVM) by using the -Djava.security.auth.policy flag when loading the JVM instance that hosts your application. The JAAS policy can be created using a typical text editor or the Java Policy Tool. An example policy file looks like:\r\n      grant Principal application.auth.UserToken \"joe\"{   permission java.security.SecurityPermission \"AccessApp\";};To provide extra flexibility in managing access controls, JAAS allows an application to append additional permissions to the current JAAS policy as well as to fully modify the JAAS policy during runtime.\r\n      Appending to the JAAS policy: To append additional permissions, the application component that is responsible for modifying the policy must have a getPolicy permission granted within the application's security policy. Example of appending additional permissions to a given user:CodeSigner[] csign = null;CodeSource csource = new CodeSource(null, csign);Principal[] principals = new Principal[1];principals[0] = new application.auth.UserToken(\"joe\");ProtectionDomain pDomain = new ProtectionDomain(csource, null, null, principals);java.security.Policy policy = java.security.Policy.getPolicy();PermissionCollection permCollect = policy.getPermissions(pDomain);SecurityPermission secPerm = new SecurityPermission(\"ModifyUser\");permCollect.add(secPerm);Amending the JAAS policy: To amend the policy, the application component responsible for modifying the policy must have a setPolicy permission granted within the application's security policy. Example:java.security.Policy policy = new ApplicationPolicy();// Add the appropriate permissionsjava.security.Policy.setPolicy(policy);Note that the ApplicationPolicy class is a custom implementation of Java's abstract Policy class.",
      "Appending to the JAAS policy: To append additional permissions, the application component that is responsible for modifying the policy must have a getPolicy permission granted within the application's security policy. Example of appending additional permissions to a given user:CodeSigner[] csign = null;CodeSource csource = new CodeSource(null, csign);Principal[] principals = new Principal[1];principals[0] = new application.auth.UserToken(\"joe\");ProtectionDomain pDomain = new ProtectionDomain(csource, null, null, principals);java.security.Policy policy = java.security.Policy.getPolicy();PermissionCollection permCollect = policy.getPermissions(pDomain);SecurityPermission secPerm = new SecurityPermission(\"ModifyUser\");permCollect.add(secPerm);",
      "Amending the JAAS policy: To amend the policy, the application component responsible for modifying the policy must have a setPolicy permission granted within the application's security policy. Example:java.security.Policy policy = new ApplicationPolicy();// Add the appropriate permissionsjava.security.Policy.setPolicy(policy);Note that the ApplicationPolicy class is a custom implementation of Java's abstract Policy class.",
      "Implement the PrivilegedExceptionAction. The PrivilegedExceptionAction invokes the authorization process. Using the Java Security Manager, the application verifies whether the current user is allowed to perform the desired task. Example:\r\n      import java.security.*;import javax.security.auth.*;public final class AuthException implements PrivilegedExceptionAction{      private String name;      public AuthException(String name)      {            // Set the name of the requested action            this.name = name;      }       public Object run()      {            Permission perm = new SecurityPermission(name);            SecurityManager secMan = System.getSecurityManager();            if(secMan == null)            {                  secMan = new SecurityManager();            }            secMan.checkPermission(perm);            return null;      }}",
      "Enforce the JAAS policy. Because JAAS is an entity-oriented model, it requires the impersonation of users when performing authorization. As such, the application impersonates the user when trying to perform a given task. If the user does not have sufficient permissions, the Java Security Manager will throw a security exception. Example:\r\n      PrivilegedExceptionAction action = new AuthException(\"NameOfAction\");Subject.doAsPrivileged(subject, action, null);"
    ],
    "p": [
      "Consider using Java Authentication and Authorization Services for authorization.",
      "As part of Java's security model, JAAS is proven to work with stand-alone and web-based applications. JAAS is fully integrated into the Java platform and requires minimal overhead when deploying within stand-alone and web-based applications.",
      "If your application uses access control and authorizes its users to determine which roles can gain access to which resources, then consider using JAAS rather than devoting resources to creating your own design.",
      "To authorize using JAAS:",
      "Create a JAAS policy. The JAAS policy stores the rights associated with the different types of users. It is loaded into the Java Virtual Machine (JVM) by using the -Djava.security.auth.policy flag when loading the JVM instance that hosts your application. The JAAS policy can be created using a typical text editor or the Java Policy Tool. An example policy file looks like:",
      "Appending to the JAAS policy: To append additional permissions, the application component that is responsible for modifying the policy must have a getPolicy permission granted within the application's security policy.",
      "Example of appending additional permissions to a given user:",
      "Amending the JAAS policy: To amend the policy, the application component responsible for modifying the policy must have a setPolicy permission granted within the application's security policy. Example:",
      "Note that the ApplicationPolicy class is a custom implementation of Java's abstract Policy class.",
      "Implement the PrivilegedExceptionAction. The PrivilegedExceptionAction invokes the authorization process. Using the Java Security Manager, the application verifies whether the current user is allowed to perform the desired task. Example:",
      "Enforce the JAAS policy. Because JAAS is an entity-oriented model, it requires the impersonation of users when performing authorization. As such, the application impersonates the user when trying to perform a given task. If the user does not have sufficient permissions, the Java Security Manager will throw a security exception. Example:",
      "MyApp is a multi-user financial tool. The application's developers have designed the application's access control mechanisms in-house, investing a lot of resources into designing, developing and testing a secure and reliable access control for MyApp and its complement products.",
      "MyApp is a multi-user financial tool. The application's developers use JAAS as the application's access control mechanism. Because JAAS is fully integrated into the Java platform, the developers can invest more resources into the actual application while still meeting the application's access control requirements."
    ],
    "ol": [
      "Create a JAAS policy. The JAAS policy stores the rights associated with the different types of users. It is loaded into the Java Virtual Machine (JVM) by using the -Djava.security.auth.policy flag when loading the JVM instance that hosts your application. The JAAS policy can be created using a typical text editor or the Java Policy Tool. An example policy file looks like:\r\n      grant Principal application.auth.UserToken \"joe\"{   permission java.security.SecurityPermission \"AccessApp\";};To provide extra flexibility in managing access controls, JAAS allows an application to append additional permissions to the current JAAS policy as well as to fully modify the JAAS policy during runtime.\r\n      Appending to the JAAS policy: To append additional permissions, the application component that is responsible for modifying the policy must have a getPolicy permission granted within the application's security policy. Example of appending additional permissions to a given user:CodeSigner[] csign = null;CodeSource csource = new CodeSource(null, csign);Principal[] principals = new Principal[1];principals[0] = new application.auth.UserToken(\"joe\");ProtectionDomain pDomain = new ProtectionDomain(csource, null, null, principals);java.security.Policy policy = java.security.Policy.getPolicy();PermissionCollection permCollect = policy.getPermissions(pDomain);SecurityPermission secPerm = new SecurityPermission(\"ModifyUser\");permCollect.add(secPerm);Amending the JAAS policy: To amend the policy, the application component responsible for modifying the policy must have a setPolicy permission granted within the application's security policy. Example:java.security.Policy policy = new ApplicationPolicy();// Add the appropriate permissionsjava.security.Policy.setPolicy(policy);Note that the ApplicationPolicy class is a custom implementation of Java's abstract Policy class.\r\n    \r\n      \r\n        Implement the PrivilegedExceptionAction. The PrivilegedExceptionAction invokes the authorization process. Using the Java Security Manager, the application verifies whether the current user is allowed to perform the desired task. Example:\r\n      import java.security.*;import javax.security.auth.*;public final class AuthException implements PrivilegedExceptionAction{      private String name;      public AuthException(String name)      {            // Set the name of the requested action            this.name = name;      }       public Object run()      {            Permission perm = new SecurityPermission(name);            SecurityManager secMan = System.getSecurityManager();            if(secMan == null)            {                  secMan = new SecurityManager();            }            secMan.checkPermission(perm);            return null;      }}\r\n    \r\n    \r\n      \r\n        Enforce the JAAS policy. Because JAAS is an entity-oriented model, it requires the impersonation of users when performing authorization. As such, the application impersonates the user when trying to perform a given task. If the user does not have sufficient permissions, the Java Security Manager will throw a security exception. Example:\r\n      PrivilegedExceptionAction action = new AuthException(\"NameOfAction\");Subject.doAsPrivileged(subject, action, null);"
    ],
    "strong": [
      "Create a JAAS policy.",
      "Appending to the JAAS policy:",
      "Amending the JAAS policy:",
      "Implement the PrivilegedExceptionAction.",
      "Enforce the JAAS policy."
    ],
    "em": [
      "-Djava.security.auth.policy",
      "getPolicy",
      "setPolicy",
      "ApplicationPolicy",
      "PrivilegedExceptionAction"
    ],
    "pre": [
      "grant Principal application.auth.UserToken \"joe\"{   permission java.security.SecurityPermission \"AccessApp\";};",
      "CodeSigner[] csign = null;CodeSource csource = new CodeSource(null, csign);Principal[] principals = new Principal[1];principals[0] = new application.auth.UserToken(\"joe\");ProtectionDomain pDomain = new ProtectionDomain(csource, null, null, principals);java.security.Policy policy = java.security.Policy.getPolicy();PermissionCollection permCollect = policy.getPermissions(pDomain);SecurityPermission secPerm = new SecurityPermission(\"ModifyUser\");permCollect.add(secPerm);",
      "java.security.Policy policy = new ApplicationPolicy();// Add the appropriate permissionsjava.security.Policy.setPolicy(policy);",
      "import java.security.*;import javax.security.auth.*;public final class AuthException implements PrivilegedExceptionAction{      private String name;      public AuthException(String name)      {            // Set the name of the requested action            this.name = name;      }       public Object run()      {            Permission perm = new SecurityPermission(name);            SecurityManager secMan = System.getSecurityManager();            if(secMan == null)            {                  secMan = new SecurityManager();            }            secMan.checkPermission(perm);            return null;      }}",
      "PrivilegedExceptionAction action = new AuthException(\"NameOfAction\");Subject.doAsPrivileged(subject, action, null);"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Consider using Java Authentication and Authorization Services for authorization.</p>\r\n  <h1>Why</h1>\r\n  <p>As part of Java's security model, JAAS is proven to work with stand-alone and web-based applications. JAAS is fully integrated into the Java platform and requires minimal overhead when deploying within stand-alone and web-based applications.</p>\r\n  <h1>When</h1>\r\n  <p>If your application uses access control and authorizes its users to determine which roles can gain access to which resources, then consider using JAAS rather than devoting resources to creating your own design.</p>\r\n  <h1>How</h1>\r\n  <p>To authorize using JAAS:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Create a JAAS policy. </strong>The JAAS policy stores the rights associated with the different types of users. It is loaded into the Java Virtual Machine (JVM) by using the <em>-Djava.security.auth.policy</em> flag when loading the JVM instance that hosts your application. The JAAS policy can be created using a typical text editor or the Java Policy Tool. An example policy file looks like:</p>\r\n      <pre>grant Principal application.auth.UserToken \"joe\"<br />{<br />   permission java.security.SecurityPermission \"AccessApp\";<br />};</pre>To provide extra flexibility in managing access controls, JAAS allows an application to append additional permissions to the current&nbsp;JAAS policy as well as to fully modify the JAAS policy during runtime.\r\n      <ul><li><p><strong>Appending to the JAAS policy:</strong> To append additional permissions,&nbsp;the application component that is&nbsp;responsible for modifying the policy must have a <em>getPolicy</em> permission granted within the application's security policy. <br /></p><p>Example of appending additional permissions to a given user:</p><pre>CodeSigner[] csign = null;<br />CodeSource csource = new CodeSource(null, csign);<br />Principal[] principals = new Principal[1];<br />principals[0] = new application.auth.UserToken(\"joe\");<br />ProtectionDomain pDomain = new ProtectionDomain(csource, null, null, principals);<br />java.security.Policy policy = java.security.Policy.getPolicy();<br />PermissionCollection permCollect = policy.getPermissions(pDomain);<br />SecurityPermission secPerm = new SecurityPermission(\"ModifyUser\");<br />permCollect.add(secPerm);</pre></li><li><p><strong>Amending the&nbsp;JAAS policy:</strong> To amend the policy,&nbsp;the application component responsible for modifying the policy must have a <em>setPolicy</em> permission granted within the application's security policy. Example:</p><pre>java.security.Policy policy = new ApplicationPolicy();<br /><br />// Add the appropriate permissions<br /><br />java.security.Policy.setPolicy(policy);</pre><p>Note that the <em>ApplicationPolicy</em> class is a custom implementation of Java's abstract Policy class.</p></li></ul></li>\r\n    <li>\r\n      <p>\r\n        <strong>Implement the PrivilegedExceptionAction. </strong>The <em>PrivilegedExceptionAction</em> invokes the authorization process. Using the Java Security Manager, the application verifies whether the current user is allowed to perform the desired task. Example:</p>\r\n      <pre>import java.security.*;<br />import javax.security.auth.*;<br />public final class AuthException implements PrivilegedExceptionAction<br />{<br />      private String name;<br />      public AuthException(String name)<br />      {<br />            // Set the name of the requested action<br />            this.name = name;<br />      }<br />       public Object run()<br />      {<br />            Permission perm = new SecurityPermission(name);<br />            SecurityManager secMan = System.getSecurityManager();<br />            if(secMan == null)<br />            {<br />                  secMan = new SecurityManager();<br />            }<br />            secMan.checkPermission(perm);<br />            return null;<br />      }<br />}</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Enforce the JAAS policy. </strong>Because JAAS is an entity-oriented model, it requires the impersonation of users when performing authorization. As such, the application impersonates the user when trying to perform a given task. If the user does not have sufficient permissions, the Java Security Manager will throw a security exception. Example:</p>\r\n      <pre>PrivilegedExceptionAction action = new AuthException(\"NameOfAction\");<br />Subject.doAsPrivileged(subject, action, null);</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>MyApp is a multi-user financial tool. The application's developers have designed the application's access control mechanisms in-house, investing a lot of resources into designing, developing and testing a secure and reliable access control for MyApp and its complement products.</p>\r\n  <h1>Solution Example</h1>\r\n  <p>MyApp is a multi-user financial tool. The application's developers use JAAS as the application's access control mechanism. Because JAAS is fully integrated into the Java platform, the developers can invest more resources into the actual application while still meeting the application's access control requirements.</p>\r\n  <br />"
}