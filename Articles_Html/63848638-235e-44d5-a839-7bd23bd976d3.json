{
  "id": "63848638-235e-44d5-a839-7bd23bd976d3",
  "checksum": "34245d5c47d26d448024eefec2801d3e9d299ee5",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "p",
      "p",
      "p"
    ],
    "try": [
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "absolute": [
      "p",
      "p",
      "title"
    ],
    "file": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "title"
    ],
    "paths": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "ul",
      "li",
      "title"
    ],
    "where": [
      "p",
      "p",
      "title"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "not": [
      "p",
      "p"
    ],
    "trust": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p"
    ],
    "environment": [
      "p",
      "p"
    ],
    "variable": [
      "p",
      "p"
    ],
    "construct": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "path": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "cannot": [
      "p",
      "p"
    ],
    "guarantee": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "value": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "accepting": [
      "p",
      "p"
    ],
    "names": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "or": [
      "p",
      "p",
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "users": [
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attackers": [
      "p",
      "p"
    ],
    "coercing": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "h2"
    ],
    "into": [
      "p",
      "p"
    ],
    "accessing": [
      "p",
      "p"
    ],
    "arbitrary": [
      "p",
      "p"
    ],
    "files": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "resources": [
      "p",
      "p"
    ],
    "when": [
      "h1"
    ],
    "should": [
      "p"
    ],
    "always": [
      "p"
    ],
    "avoid": [
      "p",
      "p"
    ],
    "instead": [
      "p"
    ],
    "strive": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "if": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "has": [
      "p"
    ],
    "accept": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "input": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "url": [
      "p"
    ],
    "need": [
      "p"
    ],
    "validate": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p"
    ],
    "correct": [
      "p"
    ],
    "format": [
      "p"
    ],
    "it": [
      "p"
    ],
    "points": [
      "p"
    ],
    "valid": [
      "p"
    ],
    "location": [
      "p"
    ],
    "within": [
      "p"
    ],
    "context": [
      "p"
    ],
    "failure": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p"
    ],
    "persuading": [
      "p"
    ],
    "validating": [
      "h2"
    ],
    "prevent": [
      "p",
      "h2",
      "p"
    ],
    "malicious": [
      "p"
    ],
    "user": [
      "p",
      "p"
    ],
    "manipulating": [
      "p"
    ],
    "code's": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "writing": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p"
    ],
    "accepts": [
      "p",
      "p"
    ],
    "user-supplied": [
      "p"
    ],
    "for": [
      "p",
      "p"
    ],
    "example": [
      "p",
      "p"
    ],
    "must": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "as": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "full": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "name": [
      "ul",
      "li"
    ],
    "by": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "using": [
      "ul",
      "ul",
      "li",
      "li",
      "h2"
    ],
    "systemio.path.getfilename.": [
      "ul",
      "li"
    ],
    "systemio.path.getfullpath.": [
      "ul",
      "li"
    ],
    "systemio.path.getfilename": [
      "b"
    ],
    "systemio.path.getfullpath": [
      "b"
    ],
    "mappath": [
      "h2",
      "p",
      "b"
    ],
    "cross": [
      "h2"
    ],
    "mapping": [
      "h2",
      "p",
      "pre",
      "p"
    ],
    "map": [
      "p"
    ],
    "supplied": [
      "p"
    ],
    "virtual": [
      "p",
      "p",
      "p"
    ],
    "physical": [
      "p",
      "p"
    ],
    "on": [
      "p"
    ],
    "server": [
      "p",
      "p",
      "p"
    ],
    "overload": [
      "p"
    ],
    "requestmappath": [
      "p",
      "b"
    ],
    "bool": [
      "p",
      "b"
    ],
    "parameter": [
      "p",
      "p"
    ],
    "so": [
      "p"
    ],
    "cross-application": [
      "p",
      "pre",
      "p"
    ],
    "following": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "technique": [
      "p"
    ],
    "try{": [
      "pre"
    ],
    "string": [
      "pre"
    ],
    "mappedpath": [
      "pre"
    ],
    "=": [
      "pre"
    ],
    "requestmappath(": [
      "pre"
    ],
    "inputpathtext,": [
      "pre"
    ],
    "requestapplicationpath,": [
      "pre"
    ],
    "false;}catch": [
      "pre"
    ],
    "httpexception){": [
      "pre"
    ],
    "//": [
      "pre"
    ],
    "attempted}": [
      "pre"
    ],
    "final": [
      "p"
    ],
    "false": [
      "p",
      "b"
    ],
    "prevents": [
      "p"
    ],
    "means": [
      "p"
    ],
    "successfully": [
      "p"
    ],
    "supply": [
      "p"
    ],
    "contains": [
      "p"
    ],
    "\".\"": [
      "p",
      "b"
    ],
    "traverse": [
      "p"
    ],
    "outside": [
      "p"
    ],
    "application's": [
      "p"
    ],
    "directory": [
      "p"
    ],
    "hierarchy": [
      "p"
    ],
    "any": [
      "p"
    ],
    "attempt": [
      "p"
    ],
    "results": [
      "p"
    ],
    "exception": [
      "p"
    ],
    "type": [
      "p"
    ],
    "httpexception": [
      "p",
      "b",
      "p",
      "b"
    ],
    "controls": [
      "p"
    ],
    "controlmappathsecure": [
      "p",
      "p",
      "p",
      "b",
      "b",
      "b"
    ],
    "method": [
      "p"
    ],
    "retrieve": [
      "p"
    ],
    "which": [
      "p"
    ],
    "mapped": [
      "p",
      "p"
    ],
    "uses": [
      "p"
    ],
    "access": [
      "p"
    ],
    "security": [
      "p"
    ],
    "throws": [
      "p"
    ],
    "control": [
      "p"
    ],
    "does": [
      "p"
    ],
    "have": [
      "p"
    ],
    "permissions": [
      "p"
    ],
    "read": [
      "p"
    ],
    "resulting": [
      "p"
    ],
    "more": [
      "p"
    ],
    "information": [
      "p"
    ],
    "see": [
      "p"
    ],
    "net": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "sdk": [
      "p"
    ],
    "documentation": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      ""
    ],
    "p": [
      "Try to use absolute file paths where you can. Do not trust an environment variable to construct a file path.",
      "You cannot guarantee the value of the environment variable. Also accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources.",
      "You should always try and avoid accepting file paths, instead strive to use absolute paths where possible.",
      "If your application has to accept input file names, file paths, or URL paths, you need to validate that the path is in the correct format and that it points to a valid location within the context of your application. Failure to do this can result in attackers persuading your application into accessing arbitrary files and resources.",
      "To prevent a malicious user manipulating your code's file operations, avoid writing code that accepts user-supplied file or path input. For example:",
      "If you use MapPath to map a supplied virtual path to a physical path on the server, use the overload of Request.MapPath that accepts a bool parameter so that you can prevent cross-application mapping. The following code example shows this technique.",
      "The final false parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type HttpException.",
      "If you use server controls, you can use the Control.MapPathSecure method to retrieve the physical path to which the virtual path is mapped. Control.MapPathSecure uses code access security and throws an HttpException if the server control does not have permissions to read the resulting mapped file. For more information, see Control.MapPathSecure in the .NET Framework SDK documentation.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "h2": [
      "Validating File Paths",
      "Using MapPath to Prevent Cross Application Mapping"
    ],
    "ul": [
      "If you must accept file names as input, use the full name of the file by using System.IO.Path.GetFileName. If you must accept file paths as input, use the full file path by using System.IO.Path.GetFullPath."
    ],
    "li": [
      "If you must accept file names as input, use the full name of the file by using System.IO.Path.GetFileName.",
      "If you must accept file paths as input, use the full file path by using System.IO.Path.GetFullPath."
    ],
    "b": [
      "System.IO.Path.GetFileName",
      "System.IO.Path.GetFullPath",
      "MapPath",
      "Request.MapPath",
      "bool",
      "false",
      "\"..\"",
      "HttpException",
      "Control.MapPathSecure",
      "Control.MapPathSecure",
      "HttpException",
      "Control.MapPathSecure"
    ],
    "pre": [
      "try{  string mappedPath = Request.MapPath( inputPath.Text,                                        Request.ApplicationPath, false);}catch (HttpException){  // Cross-application mapping attempted}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\r\n  <p>Try to use absolute file paths where you can. Do not trust an environment variable to construct a file path. </p>\r\n  <h1>Why</h1>\r\n  <p>You cannot guarantee the value of the environment variable. Also accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources.</p>\r\n  <h1>When</h1>\r\n  <p>You should always try and avoid accepting file paths, instead strive to use absolute paths where possible.</p>\r\n  <h1>How</h1>\r\n  <p>If your application has to accept input file names, file paths, or URL paths, you need to validate that the path is in the correct format and that it points to a valid location within the context of your application. Failure to do this can result in attackers persuading your application into accessing arbitrary files and resources. </p>\r\n  <h2>Validating File Paths</h2>\r\n  <p>To prevent a malicious user manipulating your code's file operations, avoid writing code that accepts user-supplied file or path input. For example: </p>\r\n  <ul>\r\n    <li>If you must accept file names as input, use the full name of the file by using <b>System.IO.Path.GetFileName</b>. <li>If you must accept file paths as input, use the full file path by using <b>System.IO.Path.GetFullPath</b>.</li></li>\r\n  </ul>\r\n  <h2>Using MapPath to Prevent Cross Application Mapping</h2>\r\n  <p>If you use <b>MapPath</b> to map a supplied virtual path to a physical path on the server, use the overload of <b>Request.MapPath</b> that accepts a <b>bool</b> parameter so that you can prevent cross-application mapping. The following code example shows this technique.</p>\r\n  <pre>try<br />&#123;<br />&nbsp; string mappedPath = Request.MapPath( inputPath.Text, <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Request.ApplicationPath, false);<br />&#125;<br />catch (HttpException)<br />&#123;<br />&nbsp; // Cross-application mapping attempted<br />&#125;  </pre>\r\n  <p>The final <b>false</b> parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains <b>\"..\"</b> to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <b>HttpException</b>.</p>\r\n  <p>If you use server controls, you can use the <b>Control.MapPathSecure</b> method to retrieve the physical path to which the virtual path is mapped. <b>Control.MapPathSecure</b> uses code access security and throws an <b>HttpException</b> if the server control does not have permissions to read the resulting mapped file. For more information, see <b>Control.MapPathSecure</b> in the .NET Framework SDK documentation.</p>\r\n  <h1>&nbsp;</h1>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}