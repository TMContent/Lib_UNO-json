{
  "id": "8cdac89d-5f52-49fd-aea3-1d14d460a8c3",
  "checksum": "9189ce3de18da65129007c8d99b5865fc571b0c5",
  "words": {
    "212": [
      "p",
      "a"
    ],
    "312": [
      "p",
      "a"
    ],
    "description": [
      "h1"
    ],
    "missing": [
      "p",
      "p",
      "p",
      "title"
    ],
    "check": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "h1",
      "p",
      "title"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "null": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "necessarily": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "itself": [
      "p",
      "p",
      "em"
    ],
    "but": [
      "p",
      "p"
    ],
    "likely": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "result": [
      "p",
      "p",
      "p"
    ],
    "pointer": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "dereference": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "occur": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "application": [
      "p",
      "p",
      "p",
      "h1",
      "p"
    ],
    "attempts": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p"
    ],
    "pointer/object": [
      "p",
      "p"
    ],
    "reference": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "value": [
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p"
    ],
    "valid": [
      "p",
      "p",
      "em"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "a",
      "h2",
      "p",
      "p",
      "a"
    ],
    "checks": [
      "p"
    ],
    "pointers/object": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "references": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "p",
      "em"
    ],
    "before": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "using": [
      "p",
      "p"
    ],
    "them": [
      "p",
      "p"
    ],
    "won't": [
      "p"
    ],
    "automated": [
      "p"
    ],
    "scanners": [
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "easily": [
      "p"
    ],
    "detect": [
      "p",
      "p",
      "p"
    ],
    "whether": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "em"
    ],
    "checked": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "being": [
      "p",
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "point": [
      "p"
    ],
    "out": [
      "p"
    ],
    "potential": [
      "p"
    ],
    "trouble": [
      "p"
    ],
    "areas": [
      "p"
    ],
    "developers": [
      "p"
    ],
    "issues": [
      "p",
      "p",
      "p"
    ],
    "affect": [
      "p"
    ],
    "all": [
      "p"
    ],
    "applications": [
      "p",
      "p"
    ],
    "impact": [
      "h1"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "crash": [
      "p",
      "p"
    ],
    "sometimes": [
      "p"
    ],
    "results": [
      "p"
    ],
    "execution": [
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "arbitrary": [
      "p",
      "p",
      "p"
    ],
    "requires": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "hijack": [
      "p"
    ],
    "exception": [
      "p",
      "p"
    ],
    "handler": [
      "p"
    ],
    "called": [
      "p"
    ],
    "occurs": [
      "p"
    ],
    "exact": [
      "p"
    ],
    "mechanism": [
      "p"
    ],
    "doing": [
      "p"
    ],
    "so": [
      "p"
    ],
    "depends": [
      "p"
    ],
    "on": [
      "p",
      "p"
    ],
    "different": [
      "p"
    ],
    "platforms": [
      "p",
      "p"
    ],
    "only": [
      "p",
      "p"
    ],
    "possible": [
      "p"
    ],
    "some": [
      "p"
    ],
    "both": [
      "p"
    ],
    "managed": [
      "p",
      "p"
    ],
    "unmanaged": [
      "p",
      "p"
    ],
    "languages": [
      "p",
      "p",
      "p"
    ],
    "subject": [
      "p"
    ],
    "dereferences": [
      "p"
    ],
    "affects": [
      "p"
    ],
    "written": [
      "p"
    ],
    "either": [
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "throw": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p"
    ],
    "error": [
      "p",
      "p"
    ],
    "message": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "usually": [
      "p"
    ],
    "passed": [
      "p"
    ],
    "argument": [
      "p"
    ],
    "function": [
      "p",
      "p",
      "p"
    ],
    "-": [
      "p"
    ],
    "such": [
      "p"
    ],
    "situations": [
      "p"
    ],
    "best": [
      "p"
    ],
    "these": [
      "p",
      "p",
      "p"
    ],
    "right": [
      "p",
      "p"
    ],
    "very": [
      "p"
    ],
    "beginning": [
      "p",
      "p"
    ],
    "return": [
      "p"
    ],
    "detected": [
      "p"
    ],
    "dereferencing": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "in-parameter": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "adequate": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "definitions": [
      "p"
    ],
    "pointers": [
      "ul",
      "li",
      "a"
    ],
    "computer": [
      "h1",
      "p"
    ],
    "based": [
      "h1",
      "p"
    ],
    "training": [
      "h1",
      "p"
    ],
    "links": [
      "h1"
    ],
    "following": [
      "p"
    ],
    "courses": [
      "p"
    ],
    "more": [
      "p"
    ],
    "background": [
      "p"
    ],
    "information": [
      "p",
      "p"
    ],
    "about": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p"
    ],
    "type": [
      "p"
    ],
    "creating": [
      "h2",
      "p",
      "a",
      "h2",
      "p",
      "a"
    ],
    "secure": [
      "h2",
      "p",
      "a",
      "h2",
      "p",
      "p",
      "a"
    ],
    "â€“": [
      "h2",
      "p",
      "a"
    ],
    "c/c++": [
      "h2",
      "p",
      "a",
      "h2",
      "p",
      "a"
    ],
    "foundations": [
      "h2",
      "p",
      "a"
    ],
    "course": [
      "p",
      "p",
      "p",
      "em"
    ],
    "provide": [
      "p"
    ],
    "overview": [
      "p"
    ],
    "threat": [
      "p",
      "p"
    ],
    "modeling": [
      "p"
    ],
    "process": [
      "p"
    ],
    "describe": [
      "p"
    ],
    "ways": [
      "p"
    ],
    "collect": [
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "build": [
      "p"
    ],
    "activity-matrix": [
      "p"
    ],
    "profile": [
      "p"
    ],
    "analyze": [
      "p"
    ],
    "risks": [
      "p"
    ],
    "also": [
      "p"
    ],
    "teach": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "nine": [
      "p"
    ],
    "defensive": [
      "p"
    ],
    "coding": [
      "p",
      "p"
    ],
    "principles": [
      "p",
      "p"
    ],
    "how": [
      "p"
    ],
    "common": [
      "p",
      "p",
      "p"
    ],
    "security": [
      "p",
      "p",
      "p"
    ],
    "cod": [
      "p",
      "a",
      "p",
      "a"
    ],
    "learn": [
      "p",
      "p"
    ],
    "errors": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "effectively": [
      "p"
    ],
    "remediate": [
      "p"
    ],
    "most": [
      "p"
    ],
    "tools": [
      "p"
    ],
    "early": [
      "p"
    ],
    "project": [
      "p"
    ],
    "lifestyle": [
      "p"
    ],
    "login": [
      "p",
      "p",
      "em",
      "em"
    ],
    "credentials": [
      "p",
      "p",
      "em",
      "em"
    ],
    "enrollment": [
      "p",
      "em"
    ],
    "required": [
      "p",
      "em"
    ],
    "access": [
      "p",
      "em"
    ],
    "team": [
      "p",
      "em"
    ],
    "professor": [
      "p",
      "em"
    ],
    "content": [
      "p",
      "em"
    ],
    "need": [
      "p",
      "em"
    ],
    "please": [
      "p",
      "em"
    ],
    "contact": [
      "p",
      "em"
    ],
    "support@securityinnovationcom": [
      "p",
      "em"
    ],
    "help": [
      "p",
      "em"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Computer Based Training Links"
    ],
    "p": [
      "Missing check against null is not necessarily a vulnerability in itself, but is likely to result in null pointer dereference vulnerabilities. Null pointer dereference vulnerabilities occur when the application attempts to use a pointer/object reference that has a null value as if it has a valid value. If application code checks pointers/object references for null before using them, null pointer dereference vulnerabilities won't occur.",
      "Automated code scanners can easily detect whether pointers/object references are checked for null before being used and can point out potential trouble areas to the developers.",
      "Missing check against null issues affect all applications.",
      "If a pointer is not checked for null before being used, the application will crash. Sometimes, null pointer dereference results in execution of arbitrary code. Execution of arbitrary code requires the attacker to hijack the exception handler that is called when a null pointer dereference occurs; the exact mechanism for doing so depends on different platforms, and is only possible on some platforms.",
      "Both managed and unmanaged languages are subject to null pointer dereferences, but arbitrary code execution as a result of it affects only unmanaged languages. Applications written in managed languages will either crash or throw an error message as a result of null pointer dereference.",
      "To prevent missing check against null issues, check pointers/object references for null before using them. Usually, a pointer/object reference is passed as an argument to a function - in such situations, it is best to check these pointers/object references for null right in the very beginning of the function and throw an exception or return an error code if a null value is detected.",
      "To check for adequate protection against these issues, make sure that pointers/object references are checked for null in the beginning of function definitions.",
      "Use the following Computer Based Training courses for more background information about this type of vulnerabilities.",
      "This course will provide an overview of the threat modeling process and describe the ways to collect information for your application, build the activity-matrix and threat profile, and analyze risks.  It will also teach you the nine defensive coding principles and how to use these principles to prevent common security vulnerabilities.",
      "COD 212 Creating Secure Code â€“ C/C++ Foundations",
      "In this course, you will learn to detect common coding errors that lead to vulnerabilities. You will learn to effectively remediate the most common security vulnerabilities, and use the right tools to secure your code and detect security vulnerabilities early in the project lifestyle.",
      "COD 312 Creating Secure C/C++ Code",
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ],
    "ul": [
      "Check for Null Before Dereferencing an In-Parameter Pointer",
      "In-parameter Pointers Are Checked for Null Before Dereferencing"
    ],
    "li": [
      "Check for Null Before Dereferencing an In-Parameter Pointer",
      "In-parameter Pointers Are Checked for Null Before Dereferencing"
    ],
    "a": [
      "Check for Null Before Dereferencing an In-Parameter Pointer",
      "In-parameter Pointers Are Checked for Null Before Dereferencing",
      "COD 212 Creating Secure Code â€“ C/C++ Foundations",
      "COD 312 Creating Secure C/C++ Code"
    ],
    "h2": [
      "Creating Secure Code â€“ C/C++ Foundations",
      "Creating Secure C/C++ Code"
    ],
    "em": [
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ]
  },
  "links": [
    {
      "href": "bc36816b-a414-4c4a-90d1-68c34df9856a",
      "text": "Check for Null Before Dereferencing an In-Parameter Pointer"
    },
    {
      "href": "2a74b6b3-39db-4613-97e3-5a951e948fd3",
      "text": "In-parameter Pointers Are Checked for Null Before Dereferencing"
    },
    {
      "href": "https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127613",
      "text": "COD 212 Creating Secure Code â€“ C/C++ Foundations"
    },
    {
      "href": "https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127609",
      "text": "COD 312 Creating Secure C/C++ Code"
    }
  ],
  "html": "<h1>Description</h1><p>Missing check against null is not necessarily a vulnerability in itself, but is likely to result in null pointer dereference vulnerabilities. Null pointer dereference vulnerabilities occur when the application attempts to use a pointer/object reference that has a null value as if it has a valid value. If application code checks pointers/object references for null before using them, null pointer dereference vulnerabilities won't occur. \n</p><p>\nAutomated code scanners can easily detect whether pointers/object references are checked for null before being used and can point out potential trouble areas to the developers. \n</p><p>\nMissing check against null issues affect all applications.\n</p><h1>Impact</h1><p>If a pointer is not checked for null before being used, the application will crash. Sometimes, null pointer dereference results in execution of arbitrary code. Execution of arbitrary code requires the attacker to hijack the exception handler that is called when a null pointer dereference occurs; the exact mechanism for doing so depends on different platforms, and is only possible on some platforms. \n</p><p>\nBoth managed and unmanaged languages are subject to null pointer dereferences, but arbitrary code execution as a result of it affects only unmanaged languages. Applications written in managed languages will either crash or throw an error message as a result of null pointer dereference.\n</p><h1>Countermeasures</h1><p>To prevent missing check against null issues, check pointers/object references for null before using them. Usually, a pointer/object reference is passed as an argument to a function - in such situations, it is best to check these pointers/object references for null right in the very beginning of the function and throw an exception or return an error code if a null value is detected. \n</p><ul>\n<li> <a href=\"bc36816b-a414-4c4a-90d1-68c34df9856a\">Check for Null Before Dereferencing an In-Parameter Pointer</a></li>\n</ul><h1>Application Check</h1><p>To check for adequate protection against these issues, make sure that pointers/object references are checked for null in the beginning of function definitions.\n</p><ul>\n<li> <a href=\"2a74b6b3-39db-4613-97e3-5a951e948fd3\">In-parameter Pointers Are Checked for Null Before Dereferencing</a></li>\n</ul><h1>Computer Based Training Links</h1><p>Use the following Computer Based Training courses for more background information about this type of vulnerabilities.\n</p><h2>Creating Secure Code â€“ C/C++ Foundations</h2><p>This course will provide an overview of the threat modeling process and describe the ways to collect information for your application, build the activity-matrix and threat profile, and analyze risks.  It will also teach you the nine defensive coding principles and how to use these principles to prevent common security vulnerabilities.\n</p><p>\n<a href=\"https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127613\">COD 212 Creating Secure Code â€“ C/C++ Foundations</a>\n</p><h2>Creating Secure C/C++ Code</h2><p>In this course, you will learn to detect common coding errors that lead to vulnerabilities. You will learn to effectively remediate the most common security vulnerabilities, and use the right tools to secure your code and detect security vulnerabilities early in the project lifestyle.\n</p><p>\n<a href=\"https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127609\">COD 312 Creating Secure C/C++ Code</a>\n</p><p>\n<em>Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.</em></p>"
}