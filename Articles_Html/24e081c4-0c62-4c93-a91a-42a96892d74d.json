{
  "id": "24e081c4-0c62-4c93-a91a-42a96892d74d",
  "checksum": "0237e4f7ba2d5d4b03cb0673602df1cb9f433796",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1"
    ],
    "use": [
      "p",
      "title"
    ],
    "role": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title",
      "title"
    ],
    "caching": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "store": [
      "p",
      "p",
      "p",
      "title"
    ],
    "lookups": [
      "p",
      "p",
      "title"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "too": [
      "p",
      "p",
      "p",
      "title"
    ],
    "costly": [
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "performance": [
      "p",
      "p",
      "p",
      "p"
    ],
    "overhead": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "lookup": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p"
    ],
    "great": [
      "p"
    ],
    "perhaps": [
      "p"
    ],
    "because": [
      "p"
    ],
    "slow": [
      "p"
    ],
    "data": [
      "p",
      "p",
      "p"
    ],
    "access": [
      "p"
    ],
    "or": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p"
    ],
    "large": [
      "p"
    ],
    "number": [
      "p"
    ],
    "roles": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "offers": [
      "p"
    ],
    "way": [
      "p"
    ],
    "improve": [
      "p"
    ],
    "cookies": [
      "p"
    ],
    "properly": [
      "p"
    ],
    "protected": [
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "change": [
      "p"
    ],
    "does": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "directly": [
      "p"
    ],
    "weaken": [
      "p"
    ],
    "system": [
      "p"
    ],
    "security": [
      "p"
    ],
    "although": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p"
    ],
    "increase": [
      "p"
    ],
    "application's": [
      "p"
    ],
    "attack": [
      "p",
      "p"
    ],
    "surface": [
      "p",
      "p"
    ],
    "when": [
      "h1",
      "p",
      "p"
    ],
    "applications": [
      "p"
    ],
    "which": [
      "p"
    ],
    "running": [
      "p"
    ],
    "into": [
      "p"
    ],
    "problems": [
      "p"
    ],
    "related": [
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "consider": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "increases": [
      "p"
    ],
    "application": [
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "requires": [
      "p"
    ],
    "some": [
      "p"
    ],
    "care": [
      "p"
    ],
    "ensure": [
      "p"
    ],
    "that": [
      "p"
    ],
    "vulnerabilities": [
      "p"
    ],
    "introduced": [
      "p"
    ],
    "only": [
      "p",
      "p"
    ],
    "be": [
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "needed": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "enable": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "cookie": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "by": [
      "p"
    ],
    "setting": [
      "p"
    ],
    "cacherolesincookie": [
      "p",
      "b"
    ],
    "attribute": [
      "p"
    ],
    "true": [
      "p",
      "b"
    ],
    "webconfig": [
      "p"
    ],
    "file": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "here": [
      "p"
    ],
    "rolemanager": [
      "pre"
    ],
    "enabled=\"true\"": [
      "pre"
    ],
    "cacherolesincookie=\"true\"": [
      "pre"
    ],
    "..": [
      "pre"
    ],
    "</rolemanager>": [
      "pre"
    ],
    "checks": [
      "p"
    ],
    "performed": [
      "p"
    ],
    "checked": [
      "p"
    ],
    "before": [
      "p"
    ],
    "calling": [
      "p"
    ],
    "provider": [
      "p"
    ],
    "check": [
      "p"
    ],
    "list": [
      "p"
    ],
    "within": [
      "p"
    ],
    "source": [
      "p",
      "p"
    ],
    "improves": [
      "p"
    ],
    "dynamically": [
      "p"
    ],
    "updated": [
      "p"
    ],
    "cache": [
      "p"
    ],
    "most": [
      "p",
      "p",
      "p"
    ],
    "recently": [
      "p",
      "p",
      "p"
    ],
    "validated": [
      "p"
    ],
    "names": [
      "p"
    ],
    "information": [
      "p",
      "p",
      "p"
    ],
    "for": [
      "p"
    ],
    "user": [
      "p"
    ],
    "long": [
      "p"
    ],
    "aspnet": [
      "p"
    ],
    "stores": [
      "p"
    ],
    "then": [
      "p"
    ],
    "looks": [
      "p"
    ],
    "up": [
      "p",
      "p"
    ],
    "additional": [
      "p"
    ],
    "required": [
      "p"
    ],
    "referred": [
      "p"
    ],
    "end": [
      "p"
    ],
    "being": [
      "p"
    ],
    "cached": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "p": [
      "Use role caching if role store lookups are too costly.",
      "If the performance overhead of role lookup is too great, perhaps because of slow data access or a large number of roles, role caching offers a way to improve performance.  If role cookies are properly protected, this change does not directly weaken system security, although it does increase the application's attack surface.",
      "Applications which are running into performance problems related to role store lookups should consider role caching.  As it increases the attack surface of the application and requires some care to ensure that vulnerabilities are not introduced, it should only be used when needed.",
      "Enable role caching in the roles cookie by setting the cacheRolesInCookie attribute to true in the Web.config file as shown here.",
      "When role checks are performed, the roles cookie is checked before calling the role provider to check the list of roles within the data source. This improves performance.  The cookie is dynamically updated to cache the most recently validated role names.  If the role information for a user is too long to store in a cookie, ASP.NET stores only the most recently used role information in the cookie and then it looks up additional role information in the data source as required.  The most recently referred to roles end up being cached in the cookie.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "cacheRolesInCookie",
      "true"
    ],
    "pre": [
      "<roleManager enabled=\"true\"             \tcacheRolesInCookie=\"true\"      ... ></roleManager>"
    ],
    "br": [
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\r\n  <p>Use role caching if role store lookups are too costly. </p>\r\n  <h1>Why</h1>\r\n  <p>If the performance overhead of role lookup is too great, perhaps because of slow data access or a large number of roles, role caching offers a way to improve performance.&nbsp; If role cookies are properly protected, this change does not directly weaken system security, although it does increase the application's attack surface. </p>\r\n  <h1>When</h1>\r\n  <p>Applications which are running into performance problems related to role store lookups should consider role caching.&nbsp; As it increases the attack surface of the application and requires some care to ensure that vulnerabilities are not introduced, it should only be used when needed. </p>\r\n  <h1>How</h1>\r\n  <p>Enable role caching in the roles cookie by setting the <b>cacheRolesInCookie</b> attribute to <b>true</b> in the Web.config file as shown here. </p>\r\n  <pre>&lt;roleManager enabled=\"true\"             <br />&#9;cacheRolesInCookie=\"true\"      ... &gt;<br />&lt;/roleManager&gt;</pre>\r\n  <p>When role checks are performed, the roles cookie is checked before calling the role provider to check the list of roles within the data source. This improves performance.&nbsp; The cookie is dynamically updated to cache the most recently validated role names.&nbsp; If the role information for a user is too long to store in a cookie, ASP.NET stores only the most recently used role information in the cookie and then it looks up additional role information in the data source as required.&nbsp; The most recently referred to roles end up being cached in the cookie. </p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}