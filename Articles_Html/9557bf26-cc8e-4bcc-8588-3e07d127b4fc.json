{
  "id": "9557bf26-cc8e-4bcc-8588-3e07d127b4fc",
  "checksum": "17c705a886b81b489bcefa1d0dc2ffed76cef8a2",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "p",
      "ul",
      "li",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "title"
    ],
    "structured": [
      "p",
      "p",
      "p",
      "title"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "handling": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "catch": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "conditions": [
      "p",
      "p"
    ],
    "not": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "rely": [
      "p"
    ],
    "on": [
      "p"
    ],
    "function": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "return": [
      "p",
      "p",
      "p"
    ],
    "codes": [
      "p",
      "p"
    ],
    "perform": [
      "p"
    ],
    "error": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "why": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "classic": [
      "p"
    ],
    "approach": [
      "p",
      "p",
      "p"
    ],
    "for": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "was": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "functions": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "order": [
      "p"
    ],
    "evaluate": [
      "p"
    ],
    "success": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "failure": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "p",
      "p",
      "p",
      "p"
    ],
    "certain": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "however": [
      "p"
    ],
    "with": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "nontrivial": [
      "p"
    ],
    "call": [
      "p",
      "p",
      "p"
    ],
    "hierarchy": [
      "p",
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "clutters": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "significantly": [
      "p"
    ],
    "every": [
      "p",
      "p"
    ],
    "must": [
      "p",
      "p"
    ],
    "check": [
      "p",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "makes": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "take": [
      "p"
    ],
    "care": [
      "p"
    ],
    "errors": [
      "p",
      "p"
    ],
    "most": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "merely": [
      "p"
    ],
    "pass": [
      "p"
    ],
    "any": [
      "p"
    ],
    "back": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "up": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "its": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "caller": [
      "p"
    ],
    "complex": [
      "p"
    ],
    "aspnet": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "may": [
      "p"
    ],
    "have": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "several": [
      "p"
    ],
    "hundred": [
      "p"
    ],
    "internal": [
      "p"
    ],
    "many": [
      "p"
    ],
    "levels": [
      "p"
    ],
    "deep": [
      "p"
    ],
    "so": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "difficult": [
      "p"
    ],
    "maintain": [
      "p"
    ],
    "using": [
      "p"
    ],
    "simplifies": [
      "p"
    ],
    "de-clutters": [
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "which": [
      "p"
    ],
    "improves": [
      "p"
    ],
    "robustness": [
      "p"
    ],
    "avoids": [
      "p"
    ],
    "leaving": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "inconsistent": [
      "p"
    ],
    "state": [
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "provides": [
      "p"
    ],
    "more": [
      "p"
    ],
    "information": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "regarding": [
      "p"
    ],
    "encountered": [
      "p"
    ],
    "minimizes": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "disclosure": [
      "p"
    ],
    "when": [
      "h1",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "exceptions": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "whenever": [
      "p"
    ],
    "erroneous": [
      "p"
    ],
    "exceptional": [
      "p"
    ],
    "can": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "raised": [
      "p"
    ],
    "given": [
      "p"
    ],
    "program": [
      "p"
    ],
    "reasonable": [
      "p"
    ],
    "expect": [
      "p"
    ],
    "if": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "capable": [
      "p"
    ],
    "raising": [
      "p"
    ],
    "eventually": [
      "p"
    ],
    "all": [
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "handled!": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "handlers": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "should": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "as": [
      "p",
      "p"
    ],
    "specific": [
      "p"
    ],
    "relevant": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "multiple": [
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "are": [
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "anticipated": [
      "p"
    ],
    "try/catch": [
      "p",
      "p"
    ],
    "block": [
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "clauses": [
      "p"
    ],
    "satisfy": [
      "p"
    ],
    "each": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "type": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p"
    ],
    "consider": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "strategies": [
      "p"
    ],
    "constructing": [
      "p"
    ],
    "your": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "application's": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "location": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "very": [
      "ul",
      "li",
      "p"
    ],
    "important": [
      "ul",
      "li",
      "p"
    ],
    "recover": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "properly": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "without": [
      "ul",
      "li",
      "p"
    ],
    "damaging": [
      "ul",
      "li",
      "p"
    ],
    "other": [
      "ul",
      "li",
      "p"
    ],
    "parts": [
      "ul",
      "li",
      "p"
    ],
    "placing": [
      "ul",
      "li",
      "p"
    ],
    "handler": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "closer": [
      "ul",
      "li",
      "p"
    ],
    "source": [
      "ul",
      "li",
      "p"
    ],
    "allows": [
      "ul",
      "li",
      "p"
    ],
    "better": [
      "ul",
      "li",
      "p"
    ],
    "current": [
      "ul",
      "li",
      "p"
    ],
    "operation": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "appropriate": [
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "resources": [
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "purpose": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "carefully": [
      "ul",
      "li",
      "p"
    ],
    "choose": [
      "ul",
      "li",
      "p"
    ],
    "although": [
      "ul",
      "li",
      "p"
    ],
    "developers": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "commonly": [
      "ul",
      "li",
      "p"
    ],
    "wrap": [
      "ul",
      "li",
      "p"
    ],
    "after": [
      "ul",
      "li",
      "p"
    ],
    "their": [
      "ul",
      "li",
      "p"
    ],
    "has": [
      "ul",
      "li",
      "p"
    ],
    "failed": [
      "ul",
      "li",
      "p"
    ],
    "provide": [
      "ul",
      "li",
      "p"
    ],
    "mechanism": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "recovering": [
      "ul",
      "li",
      "p"
    ],
    "allocated": [
      "ul",
      "li",
      "p"
    ],
    "safely": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "disposing": [
      "ul",
      "li",
      "p"
    ],
    "them": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "keep": [
      "ul",
      "li",
      "p"
    ],
    "track": [
      "ul",
      "li",
      "p"
    ],
    "associated": [
      "ul",
      "li",
      "p"
    ],
    "handle": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "accordingly": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "thrown": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "instance": [
      "ul",
      "li",
      "p"
    ],
    "throws": [
      "ul",
      "li",
      "p"
    ],
    "sqlexception": [
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "verify": [
      "ul",
      "li",
      "p"
    ],
    "database": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "pre",
      "p",
      "p",
      "pre"
    ],
    "components": [
      "ul",
      "li",
      "p"
    ],
    "into": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "safe": [
      "ul",
      "li",
      "p"
    ],
    "handles": [
      "ul",
      "li",
      "p"
    ],
    "sensitive": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "data": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "ensure": [
      "ul",
      "li",
      "p"
    ],
    "instances": [
      "ul",
      "li",
      "p"
    ],
    "inside": [
      "ul",
      "li",
      "p"
    ],
    "been": [
      "ul",
      "li",
      "p"
    ],
    "disposed": [
      "ul",
      "li",
      "p"
    ],
    "because": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "common": [
      "ul",
      "li",
      "p"
    ],
    "practice": [
      "ul",
      "li",
      "p"
    ],
    "log": [
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "help": [
      "ul",
      "li",
      "p"
    ],
    "troubleshoot": [
      "ul",
      "li",
      "p"
    ],
    "problem": [
      "ul",
      "li",
      "p",
      "h1"
    ],
    "make": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "sure": [
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "contain": [
      "ul",
      "li",
      "p"
    ],
    "could": [
      "ul",
      "li",
      "p"
    ],
    "compromise": [
      "ul",
      "li",
      "p"
    ],
    "users": [
      "ul",
      "li",
      "p"
    ],
    "assets": [
      "ul",
      "li",
      "p"
    ],
    "logged": [
      "ul",
      "li",
      "p"
    ],
    "always": [
      "ul",
      "li",
      "p"
    ],
    "best": [
      "ul",
      "li",
      "p"
    ],
    "fit": [
      "ul",
      "li",
      "p"
    ],
    "efforts": [
      "ul",
      "li",
      "p"
    ],
    "normal": [
      "ul",
      "li",
      "p"
    ],
    "upon": [
      "ul",
      "li",
      "p"
    ],
    "encountering": [
      "ul",
      "li",
      "p"
    ],
    "expected": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "throw": [
      "ul",
      "li",
      "p"
    ],
    "types": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "handled": [
      "ul",
      "li",
      "p"
    ],
    "example": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "h1",
      "h1"
    ],
    "securityexception": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre"
    ],
    "then": [
      "ul",
      "li",
      "p"
    ],
    "there": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "try{": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "execute": [
      "ul",
      "li",
      "pre"
    ],
    "sql": [
      "ul",
      "li",
      "pre"
    ],
    "statement}catch": [
      "ul",
      "li",
      "pre"
    ],
    "sqlex{": [
      "ul",
      "li",
      "pre"
    ],
    "add": [
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "eg.:": [
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "connectivity": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "restore": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "lost": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "connections": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "event}catch": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "secex{": [
      "ul",
      "li",
      "pre"
    ],
    "notify": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "user": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "insufficient": [
      "ul",
      "li",
      "pre"
    ],
    "privileges": [
      "ul",
      "li",
      "pre"
    ],
    "event}": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "note": [
      "ul",
      "li",
      "p",
      "strong"
    ],
    "above": [
      "ul",
      "li",
      "p"
    ],
    "assumes": [
      "ul",
      "li",
      "p"
    ],
    "global": [
      "ul",
      "li",
      "p"
    ],
    "placed": [
      "ul",
      "li",
      "p"
    ],
    "at": [
      "ul",
      "li",
      "p"
    ],
    "root": [
      "ul",
      "li",
      "p"
    ],
    "execution": [
      "ul",
      "li",
      "p"
    ],
    "shows": [
      "p",
      "p"
    ],
    "component": [
      "p",
      "p"
    ],
    "queries": [
      "p",
      "p"
    ],
    "backend": [
      "p",
      "p"
    ],
    "assigned": [
      "p",
      "p"
    ],
    "single": [
      "p"
    ],
    "systemexception": [
      "p"
    ],
    "entire": [
      "p"
    ],
    "cannot": [
      "p",
      "pre",
      "pre"
    ],
    "respond": [
      "p"
    ],
    "adequately": [
      "p"
    ],
    "..": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "command": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre"
    ],
    "sqlcommandquery,": [
      "pre",
      "pre"
    ],
    "connection;": [
      "pre",
      "pre"
    ],
    "result": [
      "pre",
      "pre"
    ],
    "commandexecutereader();}catch": [
      "pre",
      "pre"
    ],
    "e{": [
      "pre",
      "pre"
    ],
    "request": [
      "pre",
      "pre"
    ],
    "completed": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "therefore": [
      "p"
    ],
    "allowing": [
      "p"
    ],
    "se{": [
      "pre"
    ],
    "//eg.:": [
      "pre"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "Use structured exception handling to catch exception conditions. Do not rely on function return codes to perform error handling.",
      "The classic approach for error handling was to use the codes that functions return in order to evaluate the success or failure of certain operations. However, with a nontrivial function call hierarchy, this approach clutters the code significantly. Every function must check the return code of every function call it makes and take care of errors. In most cases, the function will merely pass any errors back up to its caller. Complex ASP.NET applications may have several hundred internal functions and a call hierarchy many levels deep, so this approach is difficult to maintain. Using structured exception handling simplifies and de-clutters the application code, which improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure.",
      "Use structured exceptions whenever erroneous or exceptional conditions can be raised in a given program. It is reasonable to expect that if a function is capable of raising an exception, it eventually will. All exceptions must be handled!",
      "Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the try/catch block should have multiple catch clauses to satisfy each type of exception. Consider the following strategies when constructing your application's exception handlers:",
      "Location of handlers. The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.",
      "Purpose of handlers. Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. For instance, if your code throws a SQLException, verify that your application's database components are back into a safe state. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.",
      "Exception data. Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged.",
      "Type of handlers. Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly. For example, if a SQLException and SecurityException are expected, then there should be an exception handler for each type of exception:",
      "Note: The example above assumes that there is a global exception handling mechanism placed at the root of the code execution.",
      "The following code shows a component that queries the application's backend database. Because the developers have assigned a single exception of type System.Exception to the entire try/catch block, the application cannot respond adequately when an exception is thrown.",
      "The following code shows a component that queries the application's backend database. The developers have assigned a catch block to each of the appropriate types of exceptions; therefore allowing the application to handle all thrown exceptions accordingly.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ul": [
      "Location of handlers. The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.\n    \n    \n      \n        Purpose of handlers. Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. For instance, if your code throws a SQLException, verify that your application's database components are back into a safe state. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.\n    \n    \n      \n        Exception data. Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged. \n    \n    \n      \n        Type of handlers. Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly. For example, if a SQLException and SecurityException are expected, then there should be an exception handler for each type of exception: \n      try{    // Execute SQL statement}catch (SqlException sqlEx){    // Add appropriate exception handling    // E.g.: Check database connectivity and restore lost connections     // Log the event}catch (SecurityException secEx){    // Add appropriate exception handling    // E.g.: Notify the user of insufficient privileges     // Log the event}\n      \n        Note: The example above assumes that there is a global exception handling mechanism placed at the root of the code execution."
    ],
    "li": [
      "Location of handlers. The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.",
      "Purpose of handlers. Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. For instance, if your code throws a SQLException, verify that your application's database components are back into a safe state. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.",
      "Exception data. Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged.",
      "Type of handlers. Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly. For example, if a SQLException and SecurityException are expected, then there should be an exception handler for each type of exception: \n      try{    // Execute SQL statement}catch (SqlException sqlEx){    // Add appropriate exception handling    // E.g.: Check database connectivity and restore lost connections     // Log the event}catch (SecurityException secEx){    // Add appropriate exception handling    // E.g.: Notify the user of insufficient privileges     // Log the event}\n      \n        Note: The example above assumes that there is a global exception handling mechanism placed at the root of the code execution."
    ],
    "strong": [
      "Location of handlers.",
      "Purpose of handlers.",
      "Exception data.",
      "Type of handlers.",
      "Note:"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "pre": [
      "try{    // Execute SQL statement}catch (SqlException sqlEx){    // Add appropriate exception handling    // E.g.: Check database connectivity and restore lost connections     // Log the event}catch (SecurityException secEx){    // Add appropriate exception handling    // E.g.: Notify the user of insufficient privileges     // Log the event}",
      "try{    ...    command = new SqlCommand(query, connection);    ...    result = command.ExecuteReader();}catch (Exception e){    // Add appropriate exception handling    // E.g.: Notify the user that the request cannot be completed    // Log the event}",
      "try{    ...     command = new SqlCommand(query, connection);     ...     result = command.ExecuteReader();}catch (SqlException se){    // Add appropriate exception handling     // E.g.: Check database connectivity and restore lost connections     // Log the event}catch (Exception e){    // Add appropriate exception handling     //E.g.: Notify the user that the request cannot be completed     // Log the event}"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\n  <p>Use structured exception handling to catch exception conditions. Do not rely on function return codes to perform error handling.</p>\n  <h1>Why</h1>\n  <p>The classic approach for error handling was to use the codes that functions return in order to evaluate the success or failure of certain operations. However, with a nontrivial function call hierarchy, this approach clutters the code significantly. Every function must check the return code of every function call it makes and take care of errors. In most cases, the function will merely pass any errors back up to its caller. Complex ASP.NET applications may have several hundred internal functions and a call hierarchy many levels deep, so this approach is difficult to maintain. Using structured exception handling simplifies and de-clutters the application code, which improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure. </p>\n  <h1>When</h1>\n  <p>Use structured exceptions whenever erroneous or exceptional conditions can be raised in a given program. It is reasonable to expect that if a function is capable of raising an exception, it eventually will. All exceptions must be handled!</p>\n  <h1>How</h1>\n  <p>Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the try/catch block should have multiple catch clauses to satisfy each type of exception. Consider the following strategies when constructing your application's exception handlers:</p>\n  <ul>\n    <li>\n      <p>\n        <strong>Location of handlers.</strong> The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Purpose of handlers.</strong> Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. For instance, if your code throws a SQLException, verify that your application's database components are back into a safe state. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Exception data.</strong> Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged. <br /></p>\n    </li>\n    <li>\n      <p>\n        <strong>Type of handlers.</strong> Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly. For example, if a SQLException and SecurityException are expected, then there should be an exception handler for each type of exception: </p>\n      <pre>try<br />{<br />    // Execute SQL statement<br />}<br />catch (SqlException sqlEx)<br />{<br />    // Add appropriate exception handling<br />    // E.g.: Check database connectivity and restore lost connections<br />     // Log the event<br />}<br />catch (SecurityException secEx)<br />{<br />    // Add appropriate exception handling<br />    // E.g.: Notify the user of insufficient privileges <br />    // Log the event<br />}</pre>\n      <p>\n        <strong>Note:</strong> The example above assumes that there is a global exception handling mechanism placed at the root of the code execution. <br /></p>\n    </li>\n  </ul>\n  <h1>Problem Example</h1>\n  <p>The following code shows a component that queries the application's backend database. Because the developers have assigned a single exception of type System.Exception to the entire try/catch block, the application cannot respond adequately when an exception is thrown.</p>\n  <pre>try<br />{<br />    ...<br />    command = new SqlCommand(query, connection);<br />    ...<br />    result = command.ExecuteReader();<br />}<br />catch (Exception e)<br />{<br />    // Add appropriate exception handling<br />    // E.g.: Notify the user that the request cannot be completed<br />    // Log the event<br />}</pre>\n  <h1>Solution Example</h1>\n  <p>The following code shows a component that queries the application's backend database. The developers have assigned a catch block to each of the appropriate types of exceptions; therefore allowing the application to handle all thrown exceptions accordingly.</p>\n  <pre>try<br />{<br />    ...     command = new SqlCommand(query, connection);<br />     ...     result = command.ExecuteReader();<br />}<br />catch (SqlException se)<br />{    // Add appropriate exception handling<br />     // E.g.: Check database connectivity and restore lost connections<br />     // Log the event<br />}<br />catch (Exception e)<br />{    // Add appropriate exception handling<br />     //E.g.: Notify the user that the request cannot be completed<br />     // Log the event<br />}</pre>\n  <br />\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}