{
  "id": "41b5df05-32be-44df-93b6-f3cb4117f676",
  "checksum": "3f83e8962acfca479ead121889a40a36307bd2d8",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "title"
    ],
    "c++": [
      "ul",
      "li",
      "p"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "use": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "std:lock_guard": [
      "p",
      "p",
      "p"
    ],
    "class": [
      "p"
    ],
    "template": [
      "p"
    ],
    "assure": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "mutexes": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "title"
    ],
    "are": [
      "p"
    ],
    "released": [
      "p"
    ],
    "automatically": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "using": [
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "makes": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p"
    ],
    "simpler": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "deadlocks": [
      "p",
      "title"
    ],
    "because": [
      "p"
    ],
    "unlocks": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "automaticaly": [
      "p"
    ],
    "when": [
      "p",
      "h1",
      "p",
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "function": [
      "p"
    ],
    "exits": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "multi-threaded": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "actions": [
      "p"
    ],
    "locks": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "with": [
      "p",
      "p",
      "title"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "unsafe": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "search": [
      "ol",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "manually": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "calling": [
      "ol",
      "li",
      "p"
    ],
    "lock)": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "unlock)": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "functions": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "add": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "declaring": [
      "ol",
      "li",
      "p"
    ],
    "them": [
      "ol",
      "li",
      "p"
    ],
    "manner": [
      "ol",
      "li",
      "p"
    ],
    "such": [
      "ol",
      "li",
      "p"
    ],
    "as": [
      "ol",
      "li",
      "p"
    ],
    "const": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "std:lock_guard<std::mutex>(mutex);": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "remove": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "old": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "calls": [
      "ol",
      "li",
      "p"
    ],
    "from": [
      "ol",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "lock": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "is": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "now": [
      "ol",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "used": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "solution": [
      "h1"
    ],
    "example": [
      "h1",
      "p"
    ],
    "mutex": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "notice": [
      "p"
    ],
    "nothing": [
      "p"
    ],
    "else": [
      "p"
    ],
    "necessary": [
      "p"
    ],
    "concurrency": [
      "p"
    ],
    "yes": [
      "p"
    ],
    "really": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "static": [
      "pre"
    ],
    "std:mutex": [
      "pre"
    ],
    "void": [
      "pre"
    ],
    "function){": [
      "pre"
    ],
    "//do": [
      "pre"
    ],
    "stuff}": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "\"con02-cpp": [
      "ul",
      "li"
    ],
    "classes": [
      "ul",
      "li"
    ],
    "management\"": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "https//www.securecoding.cert.org/confluence/display/cplusplus/con02-cpp.+use+lock+classes+for+mutex+management": [
      "ul",
      "li",
      "a"
    ],
    "avoid": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Solution Example",
      "Additional Resources"
    ],
    "ul": [
      "C++",
      "For more information about using locks, please see \"CON02-CPP. Use lock classes for mutex management\" at https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management"
    ],
    "li": [
      "C++",
      "Identify unsafe code. Search for code that manually locks and unlocks mutexes by calling lock() and unlock() functions.",
      "Add locks. Add locks to functions that manually lock() and unlock() mutexes by declaring them in a manner such as const std::lock_guard<std::mutex>(mutex);",
      "Remove old code. Remove calls to lock() and unlock() from the functions where a lock is now being used.",
      "For more information about using locks, please see \"CON02-CPP. Use lock classes for mutex management\" at https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management"
    ],
    "p": [
      "Use the std::lock_guard C++ class template to assure that mutexes are released automatically.",
      "Using std::lock_guard makes it simpler to prevent deadlocks, because it unlocks mutexes automaticaly when a function exits.",
      "Use std::lock_guard when using mutexes in multi-threaded applications.",
      "Perform the following actions to use locks with mutexes:",
      "Identify unsafe code. Search for code that manually locks and unlocks mutexes by calling lock() and unlock() functions.",
      "Add locks. Add locks to functions that manually lock() and unlock() mutexes by declaring them in a manner such as const std::lock_guard<std::mutex>(mutex);",
      "Remove old code. Remove calls to lock() and unlock() from the functions where a lock is now being used.",
      "In the following example, a lock is being used with the mutex. Notice that nothing else is necessary to assure concurrency when using a lock. Yes, it really is that simple."
    ],
    "ol": [
      "Identify unsafe code. Search for code that manually locks and unlocks mutexes by calling lock() and unlock() functions.\r\n      \r\n        \r\n          Add locks. Add locks to functions that manually lock() and unlock() mutexes by declaring them in a manner such as const std::lock_guard<std::mutex>(mutex);\r\n        \r\n          \r\n            Remove old code. Remove calls to lock() and unlock() from the functions where a lock is now being used."
    ],
    "strong": [
      "Identify unsafe code.",
      "Add locks.",
      "Remove old code."
    ],
    "pre": [
      "static std::mutex mutex;",
      "void function(){",
      "const std::lock_guard<std::mutex>(mutex);",
      "//do stuff}"
    ],
    "br": [
      ""
    ],
    "a": [
      "https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management"
    ]
  },
  "links": [
    {
      "href": "https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management",
      "text": "https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use the std::lock_guard C&#43;&#43; class template to assure that mutexes are released automatically.</p>\r\n  <h1>Why</h1>\r\n  <p>Using std::lock_guard makes it simpler to prevent deadlocks, because it unlocks mutexes automaticaly when a function exits.</p>\r\n  <h1>When</h1>\r\n  <p>Use std::lock_guard when using mutexes in multi-threaded applications.</p>\r\n  <h1>How</h1>\r\n  <p>Perform the following actions to use locks with mutexes:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify unsafe code.</strong> Search for code that manually locks and unlocks mutexes by calling lock() and unlock() functions.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Add locks.</strong> Add locks to functions that manually lock() and unlock() mutexes by declaring them in a manner such as const std::lock_guard&lt;std::mutex&gt;(mutex);</p>\r\n        <li>\r\n          <p>\r\n            <strong>Remove old code.</strong> Remove calls to lock() and unlock() from the functions where a lock is now being used.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Solution Example</h1>\r\n  <p>In the following example, a lock is being used with the mutex. Notice that nothing else is necessary to assure concurrency when using a lock. Yes, it really is that simple.</p>\r\n  <pre>static std::mutex mutex;</pre>\r\n  <pre>void function()&#123;</pre>\r\n  <pre>   const std::lock_guard&lt;std::mutex&gt;(mutex);</pre>\r\n  <pre>   //do stuff<br />&#125;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about using locks, please see \"CON02-CPP. Use lock classes for mutex management\" at <a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.&#43;Use&#43;lock&#43;classes&#43;for&#43;mutex&#43;management\">https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.&#43;Use&#43;lock&#43;classes&#43;for&#43;mutex&#43;management</a></li>\r\n  </ul>"
}