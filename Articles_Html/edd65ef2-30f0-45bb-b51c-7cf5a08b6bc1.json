{
  "id": "edd65ef2-30f0-45bb-b51c-7cf5a08b6bc1",
  "checksum": "8c42425b212d2c2b32b9f4a34619b0912c653e1e",
  "words": {
    "description": [
      "h1"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "double-free": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerability": [
      "p",
      "p",
      "p"
    ],
    "occurs": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attempts": [
      "p",
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "release": [
      "p",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p"
    ],
    "allocated": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "but": [
      "p"
    ],
    "has": [
      "p",
      "p",
      "p",
      "p"
    ],
    "already": [
      "p",
      "p"
    ],
    "been": [
      "p",
      "p"
    ],
    "released": [
      "p",
      "p"
    ],
    "attempting": [
      "p"
    ],
    "corrupts": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p"
    ],
    "structures": [
      "p"
    ],
    "by": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p"
    ],
    "might": [
      "p"
    ],
    "result": [
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "condition": [
      "p",
      "p",
      "p"
    ],
    "allows": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "write": [
      "p",
      "p",
      "p",
      "p"
    ],
    "arbitrary": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "into": [
      "p"
    ],
    "application's": [
      "p"
    ],
    "space": [
      "p"
    ],
    "essentially": [
      "p"
    ],
    "resulting": [
      "p"
    ],
    "buffer": [
      "p",
      "p",
      "p"
    ],
    "overflow": [
      "p",
      "p",
      "p"
    ],
    "which": [
      "p"
    ],
    "may": [
      "p"
    ],
    "turn": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "execution": [
      "p",
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "occur": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "same": [
      "p"
    ],
    "two": [
      "p"
    ],
    "different": [
      "p"
    ],
    "objects": [
      "p",
      "p",
      "p"
    ],
    "afterwards": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "one": [
      "p",
      "p",
      "p"
    ],
    "these": [
      "p"
    ],
    "if": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "more": [
      "p",
      "p"
    ],
    "than": [
      "p"
    ],
    "smaller": [
      "p"
    ],
    "exploitation": [
      "p",
      "p",
      "p"
    ],
    "don't": [
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "crashing": [
      "p"
    ],
    "producing": [
      "p"
    ],
    "denial": [
      "p",
      "p"
    ],
    "service": [
      "p",
      "p",
      "p"
    ],
    "issues": [
      "p"
    ],
    "affect": [
      "p"
    ],
    "applications": [
      "p",
      "p"
    ],
    "written": [
      "p",
      "p"
    ],
    "native": [
      "p"
    ],
    "impact": [
      "h1"
    ],
    "results": [
      "p"
    ],
    "either": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p"
    ],
    "clearly": [
      "p"
    ],
    "lot": [
      "p"
    ],
    "dangerous": [
      "p"
    ],
    "desirable": [
      "p"
    ],
    "attackers": [
      "p"
    ],
    "multiple": [
      "p"
    ],
    "vectors": [
      "p"
    ],
    "are": [
      "p",
      "p"
    ],
    "possible": [
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p"
    ],
    "depending": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p"
    ],
    "attack": [
      "p",
      "p"
    ],
    "surface": [
      "p"
    ],
    "affected": [
      "p"
    ],
    "common": [
      "p"
    ],
    "scenario": [
      "p",
      "p"
    ],
    "client-side": [
      "p"
    ],
    "web-browser": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "where": [
      "p",
      "p"
    ],
    "exploit": [
      "p",
      "p",
      "p"
    ],
    "uploaded": [
      "p"
    ],
    "web": [
      "p",
      "p"
    ],
    "page": [
      "p",
      "p"
    ],
    "part": [
      "p",
      "p"
    ],
    "content": [
      "p"
    ],
    "victim": [
      "p"
    ],
    "visits": [
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "p"
    ],
    "browser": [
      "p",
      "p"
    ],
    "loads": [
      "p"
    ],
    "processes": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "directly": [
      "p",
      "p"
    ],
    "via": [
      "p"
    ],
    "installed": [
      "p"
    ],
    "plug-ins": [
      "p"
    ],
    "vulnerable": [
      "p",
      "p"
    ],
    "plug-in": [
      "p"
    ],
    "then": [
      "p"
    ],
    "executes": [
      "p"
    ],
    "attacker's": [
      "p",
      "p",
      "p"
    ],
    "shell-code": [
      "p",
      "p",
      "p",
      "p"
    ],
    "refers": [
      "p"
    ],
    "small": [
      "p"
    ],
    "amount": [
      "p"
    ],
    "highly": [
      "p"
    ],
    "optimized": [
      "p"
    ],
    "term": [
      "p",
      "p"
    ],
    "stems": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p"
    ],
    "fact": [
      "p"
    ],
    "such": [
      "p",
      "p",
      "p"
    ],
    "would": [
      "p"
    ],
    "usually": [
      "p",
      "p",
      "p"
    ],
    "spawn": [
      "p",
      "p"
    ],
    "system": [
      "p",
      "p",
      "p"
    ],
    "command": [
      "p"
    ],
    "line": [
      "p"
    ],
    "shells": [
      "p"
    ],
    "use": [
      "p"
    ],
    "now": [
      "p"
    ],
    "means": [
      "p",
      "p"
    ],
    "any": [
      "p"
    ],
    "payload": [
      "p"
    ],
    "included": [
      "p"
    ],
    "an": [
      "p"
    ],
    "exploit)": [
      "p"
    ],
    "vector": [
      "p",
      "p"
    ],
    "downloads": [
      "p"
    ],
    "software": [
      "p"
    ],
    "internet": [
      "p"
    ],
    "installs": [
      "p"
    ],
    "typically": [
      "p"
    ],
    "adding": [
      "p"
    ],
    "compromised": [
      "p",
      "p",
      "p",
      "p"
    ],
    "botnet": [
      "p"
    ],
    "another": [
      "p"
    ],
    "remote": [
      "p",
      "p"
    ],
    "server-side": [
      "p"
    ],
    "executed": [
      "p"
    ],
    "against": [
      "p",
      "p"
    ],
    "network": [
      "p",
      "p"
    ],
    "with": [
      "p"
    ],
    "goal": [
      "p"
    ],
    "gaining": [
      "p"
    ],
    "access": [
      "p",
      "p"
    ],
    "server": [
      "p"
    ],
    "actually": [
      "p"
    ],
    "shell": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "bind": [
      "p"
    ],
    "port": [
      "p",
      "p",
      "p",
      "p"
    ],
    "connect": [
      "p"
    ],
    "binding": [
      "p"
    ],
    "opening": [
      "p"
    ],
    "sending": [
      "p"
    ],
    "command-line": [
      "p",
      "p"
    ],
    "makes": [
      "p"
    ],
    "easy": [
      "p"
    ],
    "send": [
      "p"
    ],
    "commands": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "system)": [
      "p"
    ],
    "output": [
      "p"
    ],
    "piped": [
      "p"
    ],
    "back": [
      "p"
    ],
    "so": [
      "p"
    ],
    "gets": [
      "p"
    ],
    "interactive": [
      "p"
    ],
    "privileges": [
      "p"
    ],
    "spawned": [
      "p"
    ],
    "those": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "p"
    ],
    "way": [
      "p",
      "p"
    ],
    "provides": [
      "p",
      "p"
    ],
    "guarantee": [
      "p",
      "p"
    ],
    "freed": [
      "p",
      "p"
    ],
    "only": [
      "p",
      "p"
    ],
    "once": [
      "p",
      "p"
    ],
    "check": [
      "h1",
      "p"
    ],
    "adequate": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "specific": [
      "h1"
    ],
    "technologies": [
      "h1"
    ],
    "c++": [
      "ul",
      "li",
      "a"
    ],
    "double": [
      "ul",
      "li",
      "a",
      "title"
    ],
    "free": [
      "ul",
      "li",
      "a",
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Specific Technologies"
    ],
    "p": [
      "A double-free vulnerability occurs when application code attempts to release memory that used to be allocated but has already been released. Attempting to release memory that has already been released corrupts the data structures used by the application. This might result in a condition that allows the attacker to write arbitrary data into the application's memory space, essentially resulting in a buffer overflow, which may in turn lead to execution of arbitrary code.",
      "For a buffer overflow to occur as a result of a double-free vulnerability, the same memory has to be allocated for two different objects afterwards, and the attacker has to be able to write to one of these objects. If the attacker is able to write more data than is allocated for the smaller of the objects, a buffer overflow occurs. Exploitation attempts that don't result in arbitrary code execution will result in the application crashing, producing a denial of service condition.",
      "Double-free issues affect applications written in native code.",
      "A double-free vulnerability results in either a denial of service condition or execution of arbitrary code. Execution of arbitrary code is clearly a lot more dangerous and desirable for attackers.",
      "Multiple exploitation vectors are possible for double-free vulnerabilities, depending on the attack surface of the affected application. One common scenario is client-side web-browser attacks, where exploit code is uploaded to a web page as a part of the content. When the victim visits the malicious web page, the browser loads the exploit code and processes it either directly or via one of the installed plug-ins or applications. The vulnerable application or plug-in then executes the attacker's shell-code. (Shell-code refers to a small amount of highly optimized malicious code. The term stems from the fact that such code would usually spawn system command line shells for the attacker's use. This term now means any malicious payload that is included as a part of an exploit.) Browser vector shell-code usually downloads malicious software from the Internet and installs it, typically adding the compromised system to the attacker's botnet.",
      "Another attack vector is remote server-side exploitation, where the exploit is executed against a vulnerable remote network service with the goal of gaining access to the server. In this scenario, the shell-code will usually actually spawn a shell and bind it on a port for the attacker to connect to. (Binding a shell on a port means opening a network port and sending data from it directly to a command-line shell. This makes it easy for the attacker to send commands to execute on the compromised system.) The output from the shell is piped back to the port, so the attacker gets interactive command-line access to the compromised system. The privileges of the spawned shell are those of the compromised application.",
      "To prevent double-free vulnerabilities, write code in such a way that provides a guarantee that allocated memory is freed only once.",
      "To check for adequate protection against double-free vulnerabilities, verify that code is written in such a way that provides a guarantee that allocated memory is freed only once."
    ],
    "ul": [
      "C++ Double Free"
    ],
    "li": [
      "C++ Double Free"
    ],
    "a": [
      "C++ Double Free"
    ]
  },
  "links": [
    {
      "href": "a749782c-1f6b-4020-aea3-77046fabf428",
      "text": "C++ Double Free"
    }
  ],
  "html": "<h1>Description</h1><p>A double-free vulnerability occurs when application code attempts to release memory that used to be allocated but has already been released. Attempting to release memory that has already been released corrupts the data structures used by the application. This might result in a condition that allows the attacker to write arbitrary data into the application's memory space, essentially resulting in a buffer overflow, which may in turn lead to execution of arbitrary code. \n</p><p>\nFor a buffer overflow to occur as a result of a double-free vulnerability, the same memory has to be allocated for two different objects afterwards, and the attacker has to be able to write to one of these objects. If the attacker is able to write more data than is allocated for the smaller of the objects, a buffer overflow occurs. Exploitation attempts that don't result in arbitrary code execution will result in the application crashing, producing a denial of service condition. \n</p><p>\nDouble-free issues affect applications written in native code.\n</p><h1>Impact</h1><p>A double-free vulnerability results in either a denial of service condition or execution of arbitrary code. Execution of arbitrary code is clearly a lot more dangerous and desirable for attackers. \n</p><p>\nMultiple exploitation vectors are possible for double-free vulnerabilities, depending on the attack surface of the affected application. One common scenario is client-side web-browser attacks, where exploit code is uploaded to a web page as a part of the content. When the victim visits the malicious web page, the browser loads the exploit code and processes it either directly or via one of the installed plug-ins or applications. The vulnerable application or plug-in then executes the attacker's shell-code. (Shell-code refers to a small amount of highly optimized malicious code. The term stems from the fact that such code would usually spawn system command line shells for the attacker's use. This term now means any malicious payload that is included as a part of an exploit.) Browser vector shell-code usually downloads malicious software from the Internet and installs it, typically adding the compromised system to the attacker's botnet. \n</p><p>\nAnother attack vector is remote server-side exploitation, where the exploit is executed against a vulnerable remote network service with the goal of gaining access to the server. In this scenario, the shell-code will usually actually spawn a shell and bind it on a port for the attacker to connect to. (Binding a shell on a port means opening a network port and sending data from it directly to a command-line shell. This makes it easy for the attacker to send commands to execute on the compromised system.) The output from the shell is piped back to the port, so the attacker gets interactive command-line access to the compromised system. The privileges of the spawned shell are those of the compromised application.\n</p><h1>Countermeasures</h1><p>To prevent double-free vulnerabilities, write code in such a way that provides a guarantee that allocated memory is freed only once.\n</p><h1>Application Check</h1><p>To check for adequate protection against double-free vulnerabilities, verify that code is written in such a way that provides a guarantee that allocated memory is freed only once.\n</p><h1>Specific Technologies</h1><ul><li> <a href=\"a749782c-1f6b-4020-aea3-77046fabf428\">C++ Double Free</a></li>\n</ul>"
}