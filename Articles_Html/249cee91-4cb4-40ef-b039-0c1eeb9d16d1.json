{
  "id": "249cee91-4cb4-40ef-b039-0c1eeb9d16d1",
  "checksum": "3e5aa7461f9443415c90300d9aea7df407e2ed79",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "blockquote",
      "p"
    ],
    "consider": [
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "pre"
    ],
    "the": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "blockquote",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "systemsecurity.securestring": [
      "p",
      "b"
    ],
    "type": [
      "p",
      "p",
      "p"
    ],
    "help": [
      "p",
      "ul",
      "li"
    ],
    "protect": [
      "p"
    ],
    "secrets": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "securestring": [
      "p",
      "b",
      "p",
      "b",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "p",
      "b",
      "b",
      "b",
      "b",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "b",
      "b",
      "b",
      "b",
      "h2",
      "p",
      "p",
      "b",
      "b",
      "title"
    ],
    "objects": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "blockquote",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "pre",
      "title"
    ],
    "dpapi": [
      "p"
    ],
    "encryption": [
      "p"
    ],
    "store": [
      "p"
    ],
    "data": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "pre"
    ],
    "an": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "encrypted": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "format": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "blockquote",
      "p"
    ],
    "only": [
      "p"
    ],
    "decrypted": [
      "p"
    ],
    "when": [
      "p",
      "h1",
      "p",
      "p",
      "p"
    ],
    "accessed": [
      "p"
    ],
    "why": [
      "h1"
    ],
    "although": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "blockquote",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "have": [
      "p",
      "blockquote",
      "p",
      "p"
    ],
    "decrypt": [
      "p"
    ],
    "it": [
      "p",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p"
    ],
    "instead": [
      "p",
      "blockquote",
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "systemstring": [
      "p",
      "b",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "b",
      "b",
      "b",
      "p",
      "title"
    ],
    "gain": [
      "p"
    ],
    "a": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "blockquote",
      "blockquote",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p"
    ],
    "number": [
      "p",
      "ul",
      "li",
      "blockquote",
      "blockquote",
      "p",
      "p"
    ],
    "benefits": [
      "p"
    ],
    "minimize": [
      "ul",
      "li"
    ],
    "copies": [
      "ul",
      "li"
    ],
    "secret": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "held": [
      "ul",
      "li"
    ],
    "which": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "reduces": [
      "ul",
      "li"
    ],
    "attack": [
      "ul",
      "li"
    ],
    "surface": [
      "ul",
      "li"
    ],
    "reduce": [
      "ul",
      "li"
    ],
    "amount": [
      "ul",
      "li"
    ],
    "time": [
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "that": [
      "ul",
      "ul",
      "li",
      "li",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "pre"
    ],
    "is": [
      "ul",
      "li",
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "pre"
    ],
    "visible": [
      "ul",
      "li"
    ],
    "attacker": [
      "ul",
      "li"
    ],
    "who": [
      "ul",
      "li"
    ],
    "has": [
      "ul",
      "li",
      "p"
    ],
    "access": [
      "ul",
      "li"
    ],
    "either": [
      "ul",
      "li"
    ],
    "your": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "process": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "address": [
      "ul",
      "li"
    ],
    "space": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "page": [
      "ul",
      "li",
      "blockquote",
      "p"
    ],
    "file": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "increase": [
      "ul",
      "li"
    ],
    "likelihood": [
      "ul",
      "li"
    ],
    "version": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "rather": [
      "ul",
      "li",
      "title"
    ],
    "than": [
      "ul",
      "li",
      "title"
    ],
    "clear": [
      "ul",
      "li",
      "pre"
    ],
    "text": [
      "ul",
      "li",
      "pre"
    ],
    "will": [
      "ul",
      "li"
    ],
    "end": [
      "ul",
      "li"
    ],
    "up": [
      "ul",
      "li"
    ],
    "dump": [
      "ul",
      "li"
    ],
    "if": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "crashes": [
      "ul",
      "li"
    ],
    "note&nbsp&nbsp;&nbsp;unfortunately,": [
      "blockquote",
      "p"
    ],
    "many": [
      "blockquote",
      "p"
    ],
    "scenarios": [
      "blockquote",
      "p"
    ],
    "forced": [
      "blockquote",
      "p"
    ],
    "convert": [
      "blockquote",
      "p",
      "p"
    ],
    "before": [
      "blockquote",
      "p"
    ],
    "can": [
      "blockquote",
      "blockquote",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "for": [
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "example": [
      "blockquote",
      "blockquote",
      "p",
      "p",
      "p"
    ],
    "few": [
      "blockquote",
      "p"
    ],
    "net": [
      "blockquote",
      "p"
    ],
    "framework": [
      "blockquote",
      "p"
    ],
    "api": [
      "blockquote",
      "p"
    ],
    "methods": [
      "blockquote",
      "p",
      "p"
    ],
    "currently": [
      "blockquote",
      "p"
    ],
    "provide": [
      "blockquote",
      "p",
      "p"
    ],
    "overloads": [
      "blockquote",
      "blockquote",
      "p",
      "p"
    ],
    "support": [
      "blockquote",
      "p"
    ],
    "less": [
      "blockquote",
      "p"
    ],
    "appropriate": [
      "blockquote",
      "p"
    ],
    "aspnet": [
      "blockquote",
      "p"
    ],
    "applications": [
      "blockquote",
      "p"
    ],
    "unlikely": [
      "blockquote",
      "p"
    ],
    "take": [
      "blockquote",
      "p"
    ],
    "credit": [
      "blockquote",
      "p"
    ],
    "card": [
      "blockquote",
      "p"
    ],
    "from": [
      "blockquote",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "p",
      "p"
    ],
    "web": [
      "blockquote",
      "p"
    ],
    "without": [
      "blockquote",
      "p",
      "p"
    ],
    "at": [
      "blockquote",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "some": [
      "blockquote",
      "p"
    ],
    "point": [
      "blockquote",
      "p"
    ],
    "passing": [
      "blockquote",
      "p"
    ],
    "through": [
      "blockquote",
      "p"
    ],
    "because": [
      "blockquote",
      "p"
    ],
    "most": [
      "blockquote",
      "p"
    ],
    "form-related": [
      "blockquote",
      "p"
    ],
    "apis": [
      "blockquote",
      "p"
    ],
    "not": [
      "blockquote",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "function": [
      "blockquote",
      "p"
    ],
    "permit": [
      "blockquote",
      "p"
    ],
    "systemstring.": [
      "blockquote",
      "p"
    ],
    "note": [
      "b"
    ],
    "storing": [
      "p"
    ],
    "sensitive": [
      "p",
      "p"
    ],
    "information": [
      "p",
      "ul",
      "li"
    ],
    "recommended": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "reasons": [
      "p"
    ],
    "pinned": [
      "ul",
      "li"
    ],
    "means": [
      "ul",
      "li"
    ],
    "garbage": [
      "ul",
      "li"
    ],
    "collector": [
      "ul",
      "li"
    ],
    "move": [
      "ul",
      "li"
    ],
    "around": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "leave": [
      "ul",
      "li"
    ],
    "indeterminate": [
      "ul",
      "li"
    ],
    "amounts": [
      "ul",
      "li"
    ],
    "therefore": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "be": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "read": [
      "ul",
      "li"
    ],
    "swap": [
      "ul",
      "li"
    ],
    "immutable": [
      "ul",
      "li"
    ],
    "there": [
      "ul",
      "li"
    ],
    "no": [
      "ul",
      "li"
    ],
    "effective": [
      "ul",
      "li"
    ],
    "way": [
      "ul",
      "li",
      "p"
    ],
    "clearing": [
      "ul",
      "li"
    ],
    "after": [
      "ul",
      "li"
    ],
    "modification": [
      "ul",
      "li"
    ],
    "leaves": [
      "ul",
      "li"
    ],
    "both": [
      "ul",
      "li"
    ],
    "old": [
      "ul",
      "li"
    ],
    "copy": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "new": [
      "ul",
      "li",
      "pre"
    ],
    "working": [
      "p"
    ],
    "with": [
      "p",
      "p"
    ],
    "how": [
      "h1",
      "p"
    ],
    "creating": [
      "h2"
    ],
    "create": [
      "p",
      "p"
    ],
    "supplying": [
      "p",
      "p"
    ],
    "pointer": [
      "p"
    ],
    "character": [
      "p",
      "p",
      "p",
      "p"
    ],
    "array": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "length": [
      "p"
    ],
    "constructed": [
      "p",
      "p",
      "p"
    ],
    "this": [
      "p"
    ],
    "takes": [
      "p"
    ],
    "should": [
      "p",
      "p"
    ],
    "replace": [
      "p"
    ],
    "source": [
      "p"
    ],
    "zeros": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "soon": [
      "p"
    ],
    "also": [
      "p"
    ],
    "existing": [
      "p"
    ],
    "copied": [
      "p"
    ],
    "one": [
      "p",
      "p"
    ],
    "code": [
      "p"
    ],
    "sample": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "appendchar": [
      "p",
      "b"
    ],
    "method": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "string": [
      "p",
      "p"
    ],
    "systemsecurity;...securestring": [
      "pre"
    ],
    "securepassword": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre"
    ],
    "securestring);": [
      "pre"
    ],
    "consolewriteline(\"enter": [
      "pre"
    ],
    "password...\");": [
      "pre"
    ],
    "while": [
      "pre"
    ],
    "true)": [
      "pre"
    ],
    "&#123&nbsp;": [
      "pre"
    ],
    "consolekeyinfo": [
      "pre"
    ],
    "conkeyinfo": [
      "pre"
    ],
    "consolereadkey(true);&nbsp;": [
      "pre"
    ],
    "conkeyinfo.key": [
      "pre",
      "pre",
      "pre"
    ],
    "==": [
      "pre",
      "pre",
      "pre"
    ],
    "consolekeyenter)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "break&nbsp;": [
      "pre"
    ],
    "else": [
      "pre",
      "pre"
    ],
    "consolekeyescape)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "return&nbsp;": [
      "pre"
    ],
    "consolekeybackspace)&nbsp;": [
      "pre"
    ],
    "&#123&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "securepassword.length": [
      "pre"
    ],
    "&#33=": [
      "pre"
    ],
    "0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "securepasswordremoveat(securepassword.length": [
      "pre"
    ],
    "-": [
      "pre"
    ],
    "1;&nbsp;": [
      "pre"
    ],
    "&#125&nbsp;": [
      "pre",
      "pre"
    ],
    "else&nbsp&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "securepasswordappendchar(conkeyinfo.keychar);&#125;console.writeline(securepassword.length.tostring());": [
      "pre"
    ],
    "retrieving": [
      "h2"
    ],
    "retrieve": [
      "p"
    ],
    "marshaller": [
      "p"
    ],
    "marshal": [
      "p",
      "b"
    ],
    "class": [
      "p"
    ],
    "been": [
      "p"
    ],
    "extended": [
      "p"
    ],
    "into": [
      "p"
    ],
    "bstr": [
      "p",
      "b",
      "pre",
      "pre"
    ],
    "raw": [
      "p"
    ],
    "block": [
      "p"
    ],
    "ansi": [
      "p"
    ],
    "unicode": [
      "p"
    ],
    "finished": [
      "p"
    ],
    "unprotected": [
      "p"
    ],
    "erase": [
      "p"
    ],
    "calling": [
      "p"
    ],
    "marshalzerofreebstr,": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "marshalzerofreebstr": [
      "b"
    ],
    "systemsecurity;using": [
      "pre"
    ],
    "systemruntime.interopservices;...void": [
      "pre"
    ],
    "usesecretdatasecurestring": [
      "pre"
    ],
    "secret&#123;&nbsp;": [
      "pre"
    ],
    "intptr": [
      "pre"
    ],
    "marshalsecurestringtobstr(secret);&nbsp;": [
      "pre"
    ],
    "try&nbsp": [
      "pre"
    ],
    "&#123&nbsp;&nbsp;&nbsp;": [
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre"
    ],
    "here&nbsp": [
      "pre"
    ],
    "finally&nbsp": [
      "pre"
    ],
    "make": [
      "pre"
    ],
    "sure": [
      "pre"
    ],
    "zeroed": [
      "pre"
    ],
    "out&nbsp&nbsp;&nbsp;": [
      "pre"
    ],
    "marshalzerofreebstr(bstr);&nbsp;": [
      "pre"
    ],
    "&#125&#125;": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "\"making": [
      "ul",
      "li"
    ],
    "strings": [
      "ul",
      "li"
    ],
    "secure\"": [
      "ul",
      "li"
    ],
    "http//blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ],
    "where": [
      "title"
    ],
    "possible": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Additional Resources"
    ],
    "p": [
      "Consider using the System.Security.SecureString type to help protect secrets in memory. SecureString objects use DPAPI encryption to store data in an encrypted format in memory. They are only decrypted when they are accessed.",
      "Although you have to decrypt the data to use it, by using SecureString instead of System.String you gain a number of benefits:",
      "Note&nbsp;&nbsp;&nbsp;Unfortunately, in many scenarios you are forced to convert the SecureString to a System.String before you can use it. For example, few .NET Framework API methods currently provide overloads that support SecureString. Use of SecureString is less appropriate in ASP.NET applications. For example, It is unlikely you can take a credit card number from a Web page without the number at some point passing through a System.String because most of the form-related APIs do not have function overloads that permit use of SecureString instead of System.String.",
      "Using System.String for storing sensitive information is not recommended for the following reasons:",
      "When working with sensitive data in memory.",
      "You can create a SecureString by supplying a pointer to a character array and supplying the length of that array. When constructed this way, the SecureString type takes a copy of your array. You should replace your source array with zeros as soon as the SecureString is constructed. A SecureString can also be constructed without an existing character array, and data can be copied one character at a time. The following code sample shows how to use the AppendChar method to create a secure string one character at a time.",
      "You retrieve data from a SecureString by using the marshaller. The Marshal class has been extended to provide methods that convert a SecureString into a BSTR data type or a raw block of ANSI or Unicode memory. When you have finished using the unprotected string, you should erase that copy by calling Marshal.ZeroFreeBSTR, as shown in the following example.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "System.Security.SecureString",
      "SecureString",
      "SecureString",
      "System.String",
      "Note",
      "SecureString",
      "System.String",
      "SecureString",
      "SecureString",
      "System.String",
      "SecureString",
      "System.String",
      "SecureString",
      "SecureString",
      "SecureString",
      "SecureString",
      "AppendChar",
      "SecureString",
      "Marshal",
      "SecureString",
      "BSTR",
      "Marshal.ZeroFreeBSTR",
      ""
    ],
    "ul": [
      "You help to minimize the number of copies of the secret held in memory, which reduces the attack surface. You reduce the amount of time that the secret is visible to an attacker who has access either to your process memory address space or to the page file. You increase the likelihood that an encrypted version of the secret rather than a clear text version will end up in a dump file if your process crashes.",
      "It is not pinned, which means that the garbage collector can move it around and leave the data in memory for indeterminate amounts of time. It is not encrypted; therefore, the data can be read from process memory or from the swap file. It is immutable; therefore, there is no effective way of clearing the data after use. Modification leaves both the old copy and a new copy in memory.",
      "For more information see \"Making Strings more Secure\" at http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx"
    ],
    "li": [
      "You help to minimize the number of copies of the secret held in memory, which reduces the attack surface.",
      "You reduce the amount of time that the secret is visible to an attacker who has access either to your process memory address space or to the page file.",
      "You increase the likelihood that an encrypted version of the secret rather than a clear text version will end up in a dump file if your process crashes.",
      "It is not pinned, which means that the garbage collector can move it around and leave the data in memory for indeterminate amounts of time.",
      "It is not encrypted; therefore, the data can be read from process memory or from the swap file.",
      "It is immutable; therefore, there is no effective way of clearing the data after use. Modification leaves both the old copy and a new copy in memory.",
      "For more information see \"Making Strings more Secure\" at http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx"
    ],
    "blockquote": [
      "Note&nbsp;&nbsp;&nbsp;Unfortunately, in many scenarios you are forced to convert the SecureString to a System.String before you can use it. For example, few .NET Framework API methods currently provide overloads that support SecureString. Use of SecureString is less appropriate in ASP.NET applications. For example, It is unlikely you can take a credit card number from a Web page without the number at some point passing through a System.String because most of the form-related APIs do not have function overloads that permit use of SecureString instead of System.String."
    ],
    "h2": [
      "Creating a SecureString",
      "Retrieving Data from a SecureString"
    ],
    "pre": [
      "using System.Security;...SecureString securePassword = new SecureString(); Console.WriteLine(\"Enter Password....\"); while (true) &#123;&nbsp; ConsoleKeyInfo conKeyInfo = Console.ReadKey(true);&nbsp; if (conKeyInfo.Key == ConsoleKey.Enter)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;&nbsp; else if (conKeyInfo.Key == ConsoleKey.Escape)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;&nbsp; else if (conKeyInfo.Key == ConsoleKey.Backspace)&nbsp; &#123;&nbsp;&nbsp;&nbsp;&nbsp; if (securePassword.Length &#33;= 0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; securePassword.RemoveAt(securePassword.Length - 1);&nbsp; &#125;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp; securePassword.AppendChar(conKeyInfo.KeyChar);&#125;Console.WriteLine(securePassword.Length.ToString());",
      "using System.Security;using System.Runtime.InteropServices;...void UseSecretData(SecureString secret)&#123;&nbsp; IntPtr bstr = Marshal.SecureStringToBSTR(secret);&nbsp; try&nbsp; &#123;&nbsp;&nbsp;&nbsp; // Use the bstr here&nbsp; &#125;&nbsp; finally&nbsp; &#123;&nbsp;&nbsp;&nbsp; // Make sure that the clear text data is zeroed out&nbsp;&nbsp;&nbsp; Marshal.ZeroFreeBSTR(bstr);&nbsp; &#125;&#125;"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx",
      "text": "http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx"
    }
  ],
  "html": "<h1>What to Do</h1>\n  <p>Consider using the <b>System.Security.SecureString</b> type to help protect secrets in memory. <b>SecureString</b> objects use DPAPI encryption to store data in an encrypted format in memory. They are only decrypted when they are accessed.</p>\n  <h1>Why</h1>\n  <p>Although you have to decrypt the data to use it, by using <b>SecureString</b> instead of <b>System.String</b> you gain a number of benefits: </p>\n  <ul>\n    <li>You help to minimize the number of copies of the secret held in memory, which reduces the attack surface. <li>You reduce the amount of time that the secret is visible to an attacker who has access either to your process memory address space or to the page file. <li>You increase the likelihood that an encrypted version of the secret rather than a clear text version will end up in a dump file if your process crashes.</li></li></li>\n  </ul>\n  <blockquote>\n    <p>\n      <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;Unfortunately, in many scenarios you are forced to convert the <b>SecureString</b> to a <b>System.String</b> before you can use it. For example, few .NET Framework API methods currently provide overloads that support <b>SecureString</b>. Use of <b>SecureString</b> is less appropriate in ASP.NET applications. For example, It is unlikely you can take a credit card number from a Web page without the number at some point passing through a <b>System.String</b> because most of the form-related APIs do not have function overloads that permit use of <b>SecureString</b> instead of <b>System.String</b>.</p>\n  </blockquote>\n  <p>Using System.String for storing sensitive information is not recommended for the following reasons: </p>\n  <ul>\n    <li>It is not pinned, which means that the garbage collector can move it around and leave the data in memory for indeterminate amounts of time. <li>It is not encrypted; therefore, the data can be read from process memory or from the swap file. <li>It is immutable; therefore, there is no effective way of clearing the data after use. Modification leaves both the old copy and a new copy in memory. </li></li></li>\n  </ul>\n  <h1>When</h1>\n  <p>When working with sensitive data in memory.</p>\n  <h1>How</h1>\n  <h2>Creating a SecureString</h2>\n  <p>You can create a <b>SecureString</b> by supplying a pointer to a character array and supplying the length of that array. When constructed this way, the <b>SecureString</b> type takes a copy of your array. You should replace your source array with zeros as soon as the <b>SecureString</b> is constructed. A <b>SecureString</b> can also be constructed without an existing character array, and data can be copied one character at a time. The following code sample shows how to use the <b>AppendChar</b> method to create a secure string one character at a time.</p>\n  <pre>using System.Security;<br />...<br />SecureString securePassword = new SecureString(); <br />Console.WriteLine(\"Enter Password....\"); <br />while (true) <br />&amp;#123;<br />&amp;nbsp; ConsoleKeyInfo conKeyInfo = Console.ReadKey(true);<br />&amp;nbsp; if (conKeyInfo.Key == ConsoleKey.Enter)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;<br />&amp;nbsp; else if (conKeyInfo.Key == ConsoleKey.Escape)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;<br />&amp;nbsp; else if (conKeyInfo.Key == ConsoleKey.Backspace)<br />&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (securePassword.Length &amp;#33;= 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; securePassword.RemoveAt(securePassword.Length - 1);<br />&amp;nbsp; &amp;#125;<br />&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; securePassword.AppendChar(conKeyInfo.KeyChar);<br />&amp;#125;<br />Console.WriteLine(securePassword.Length.ToString());  </pre>\n  <h2>Retrieving Data from a SecureString</h2>\n  <p>You retrieve data from a <b>SecureString</b> by using the marshaller. The <b>Marshal</b> class has been extended to provide methods that convert a <b>SecureString</b> into a <b>BSTR</b> data type or a raw block of ANSI or Unicode memory. When you have finished using the unprotected string, you should erase that copy by calling <b>Marshal.ZeroFreeBSTR</b>, as shown in the following example.<b></b></p>\n  <pre>using System.Security;<br />using System.Runtime.InteropServices;<br />...<br />void UseSecretData(SecureString secret)<br />&amp;#123;<br />&amp;nbsp; IntPtr bstr = Marshal.SecureStringToBSTR(secret);<br />&amp;nbsp; try<br />&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Use the bstr here<br />&amp;nbsp; &amp;#125;<br />&amp;nbsp; finally<br />&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Make sure that the clear text data is zeroed out<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Marshal.ZeroFreeBSTR(bstr);<br />&amp;nbsp; &amp;#125;<br />&amp;#125;</pre>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>For more information see \"Making Strings more Secure\" at <a href=\"http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx\">http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx</a></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}