{
  "id": "b3f89eab-a533-4ca0-851e-8c4233e1b1e4",
  "checksum": "29e33f9580e9c00a4fb4dd0f3d2848c96a0e04e1",
  "words": {
    "description": [
      "h1"
    ],
    "isolate": [
      "p",
      "p",
      "title"
    ],
    "all": [
      "p"
    ],
    "unmanaged": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "api": [
      "p"
    ],
    "calls": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "wrapper": [
      "p"
    ],
    "assembly": [
      "p",
      "p"
    ],
    "this": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "easier": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "review": [
      "p",
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "enables": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "easily": [
      "p"
    ],
    "determine": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "set": [
      "p"
    ],
    "of": [
      "p",
      "p"
    ],
    "apis": [
      "p",
      "p",
      "title"
    ],
    "on": [
      "p"
    ],
    "which": [
      "p",
      "p"
    ],
    "application": [
      "p"
    ],
    "depends": [
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "permission": [
      "p",
      "p",
      "p"
    ],
    "single": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "naming": [
      "p"
    ],
    "conventions": [
      "p"
    ],
    "keep": [
      "p"
    ],
    "native": [
      "p",
      "p",
      "i"
    ],
    "risks": [
      "p"
    ],
    "mind": [
      "p"
    ],
    "when": [
      "p"
    ],
    "develop": [
      "p"
    ],
    "categorize": [
      "p"
    ],
    "prefix": [
      "p"
    ],
    "indicate": [
      "p"
    ],
    "types": [
      "p"
    ],
    "encapsulate": [
      "p"
    ],
    "word": [
      "p",
      "p",
      "p"
    ],
    "safe": [
      "p",
      "p",
      "i",
      "p"
    ],
    "identify": [
      "p",
      "p",
      "p"
    ],
    "poses": [
      "p"
    ],
    "no": [
      "p",
      "p"
    ],
    "possible": [
      "p"
    ],
    "security": [
      "p",
      "p",
      "p",
      "p"
    ],
    "threat": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "harmless": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "malicious": [
      "p"
    ],
    "or": [
      "p"
    ],
    "otherwise": [
      "p"
    ],
    "call": [
      "p"
    ],
    "annotate": [
      "p"
    ],
    "classes": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p"
    ],
    "suppressunmanagedcodesecurity": [
      "p",
      "b",
      "p",
      "b"
    ],
    "attribute": [
      "p",
      "p"
    ],
    "turns": [
      "p"
    ],
    "off": [
      "p"
    ],
    "code-access": [
      "p"
    ],
    "permission's": [
      "p"
    ],
    "demand": [
      "p",
      "p",
      "p"
    ],
    "full": [
      "p",
      "p",
      "p"
    ],
    "trust": [
      "p"
    ],
    "suppressunmanagedcodesecurity]class": [
      "pre",
      "pre"
    ],
    "safenativemethods": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre"
    ],
    "dllimport\"user32\")]": [
      "pre"
    ],
    "internal": [
      "pre",
      "pre",
      "pre"
    ],
    "static": [
      "pre",
      "pre",
      "pre"
    ],
    "extern": [
      "pre",
      "pre",
      "pre"
    ],
    "void": [
      "pre",
      "pre",
      "pre"
    ],
    "messageboxstring": [
      "pre"
    ],
    "text;}": [
      "pre"
    ],
    "potentially": [
      "p",
      "p"
    ],
    "unsafe": [
      "p",
      "p",
      "p",
      "i"
    ],
    "but": [
      "p"
    ],
    "protected": [
      "p"
    ],
    "stack-walking": [
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "are": [
      "p"
    ],
    "implicitly": [
      "p"
    ],
    "made": [
      "p"
    ],
    "by": [
      "p"
    ],
    "interop": [
      "p"
    ],
    "layer": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "they": [
      "p"
    ],
    "have": [
      "p"
    ],
    "been": [
      "p"
    ],
    "suppressed": [
      "p",
      "p"
    ],
    "class": [
      "pre"
    ],
    "nativemethods": [
      "pre"
    ],
    "dllimport(\"user32\")]": [
      "pre",
      "pre"
    ],
    "formatdrivestring": [
      "pre"
    ],
    "driveletter;}": [
      "pre"
    ],
    "has": [
      "p"
    ],
    "declaratively": [
      "p"
    ],
    "caller": [
      "p"
    ],
    "methods": [
      "p"
    ],
    "must": [
      "p"
    ],
    "do": [
      "p"
    ],
    "ensure": [
      "p"
    ],
    "usage": [
      "p"
    ],
    "because": [
      "p"
    ],
    "stack": [
      "p"
    ],
    "walk": [
      "p"
    ],
    "performed": [
      "p"
    ],
    "unsafenativemethods": [
      "pre"
    ],
    "createfilestring": [
      "pre"
    ],
    "filename;}": [
      "pre"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "how": [
      "title"
    ],
    "name": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Description"
    ],
    "p": [
      "Isolate all unmanaged API calls in a wrapper assembly. This makes it easier to review your code that calls unmanaged code, and it enables you to easily determine the set of unmanaged APIs on which your application depends. You can also isolate the unmanaged code permission to a single assembly.",
      "Use naming conventions to keep native code risks in mind when you develop and review code. Categorize your unmanaged code and use a prefix to indicate the types that you use to encapsulate the unmanaged APIs.",
      "Use the word Safe to identify code that poses no possible security threat and is harmless for any code, malicious or otherwise, to call. You can annotate safe classes with the SuppressUnmanagedCodeSecurity attribute, which turns off the code-access security permission's demand for full trust.",
      "Use the word Native to identify unmanaged code that is potentially unsafe but is protected with a full stack-walking demand for the unmanaged code permission. These are implicitly made by the interop layer unless they have been suppressed with the SuppressUnmanagedCodeSecurity attribute.",
      "Use the word Unsafe to identify unmanaged code that is potentially unsafe and that has the security demand for the unmanaged code permission declaratively suppressed. Any caller of these methods must do a full security review to ensure that the usage is safe because no stack walk is performed.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "i": [
      "Safe",
      "Native",
      "Unsafe"
    ],
    "b": [
      "SuppressUnmanagedCodeSecurity",
      "SuppressUnmanagedCodeSecurity"
    ],
    "pre": [
      "[SuppressUnmanagedCodeSecurity]class SafeNativeMethods {    DllImport(\"user32\")]    internal static extern void MessageBox(string text);}",
      "class NativeMethods {    [DllImport(\"user32\")]    internal static extern void FormatDrive(string driveLetter);}",
      "[SuppressUnmanagedCodeSecurity]class UnsafeNativeMethods {    [DllImport(\"user32\")]    internal static extern void CreateFile(string fileName);}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Description</h1>\r\n  <p>Isolate all unmanaged API calls in a wrapper assembly. This makes it easier to review your code that calls unmanaged code, and it enables you to easily determine the set of unmanaged APIs on which your application depends. You can also isolate the unmanaged code permission to a single assembly. </p>\r\n  <p>Use naming conventions to keep native code risks in mind when you develop and review code. Categorize your unmanaged code and use a prefix to indicate the types that you use to encapsulate the unmanaged APIs. </p>\r\n  <p>Use the word <i>Safe </i>to identify code that poses no possible security threat and is harmless for any code, malicious or otherwise, to call. You can annotate safe classes with the <b>SuppressUnmanagedCodeSecurity</b> attribute, which turns off the code-access security permission's demand for full trust. </p>\r\n  <pre>&#91;SuppressUnmanagedCodeSecurity&#93;class SafeNativeMethods <br />&#123;<br />    DllImport(\"user32\")&#93;<br />    internal static extern void MessageBox(string text);&#125;  </pre>\r\n  <p>Use the word <i>Native</i> to identify unmanaged code that is potentially unsafe but is protected with a full stack-walking demand for the unmanaged code permission. These are implicitly made by the interop layer unless they have been suppressed with the <b>SuppressUnmanagedCodeSecurity</b> attribute. </p>\r\n  <pre>class NativeMethods &#123;<br />    &#91;DllImport(\"user32\")&#93;<br />    internal static extern void FormatDrive(string driveLetter);&#125;  </pre>\r\n  <p>Use the word <i>Unsafe</i> to identify unmanaged code that is potentially unsafe and that has the security demand for the unmanaged code permission declaratively suppressed. Any caller of these methods must do a full security review to ensure that the usage is safe because no stack walk is performed. </p>\r\n  <pre>&#91;SuppressUnmanagedCodeSecurity&#93;class UnsafeNativeMethods &#123;<br />    &#91;DllImport(\"user32\")&#93;<br />    internal static extern void CreateFile(string fileName);&#125;</pre>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}