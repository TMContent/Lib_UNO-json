{
  "id": "07732230-8869-45d1-b65c-278142d32f31",
  "checksum": "ab2cd9bb68ff233b95461ea7cadd3aa083fe0d4a",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "p",
      "h1",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "verify": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "all": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "functions": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "copy": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "data": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li"
    ],
    "between": [
      "p"
    ],
    "strings": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "or": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "arrays": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "boundaries": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "destination": [
      "p"
    ],
    "buffers": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "prevent": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "buffer": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "overflows": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "copying": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "more": [
      "p",
      "ul",
      "li"
    ],
    "than": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "can": [
      "p"
    ],
    "fit": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "results": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "overflow": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "how": [
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "perform": [
      "p",
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "actions": [
      "p"
    ],
    "assure": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "size": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "checked": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "title"
    ],
    "during": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "title"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "list": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "components": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "modules": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "libraries": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "do": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "most": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "amount": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "handling": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "usually": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "there": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "exists": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "some": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "heavy": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "manipulating": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "copies": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "many": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "constructs": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "various": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "memory": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "calculated": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "correctly": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "watch": [
      "ol",
      "li",
      "p"
    ],
    "out": [
      "ol",
      "li",
      "p"
    ],
    "using": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "sizeof)": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "pointers": [
      "ol",
      "li",
      "p"
    ],
    "when": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "an": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "array": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "passed": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "as": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "parameter": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "pointer": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "returns": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "sure": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "accounts": [
      "ol",
      "li",
      "p"
    ],
    "trailing": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "null": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "stored": [
      "ol",
      "li",
      "p"
    ],
    "null-terminated": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "string": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "errors": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "allocation": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "handled": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "might": [
      "ol",
      "li",
      "p"
    ],
    "fail": [
      "ol",
      "li",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "account": [
      "ol",
      "li",
      "p"
    ],
    "possibility": [
      "ol",
      "li",
      "p"
    ],
    "bounds": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "only": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "fits": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "into": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li"
    ],
    "be": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "sufficient": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "allocated": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "been": [
      "ol",
      "li",
      "p"
    ],
    "but": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "extra": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "security": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "good": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "idea": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "write": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "checks": [
      "ol",
      "li",
      "p"
    ],
    "while": [
      "ol",
      "li",
      "p"
    ],
    "doesn't": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "truncated": [
      "ol",
      "li",
      "p"
    ],
    "- code": [
      "ol",
      "li",
      "p"
    ],
    "terminate": [
      "ol",
      "li",
      "p"
    ],
    "once": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "full": [
      "ol",
      "li",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "steps": [
      "p"
    ],
    "your": [
      "p"
    ],
    "allocates": [
      "p"
    ],
    "enough": [
      "p"
    ],
    "space": [
      "p"
    ],
    "calculate": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "used": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "by": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "being": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "copied": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "li"
    ],
    "set": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "maximum": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "limit": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "valid": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "include": [
      "ol",
      "li",
      "p"
    ],
    "calculating": [
      "ol",
      "li",
      "p"
    ],
    "count": [
      "ol",
      "li",
      "p"
    ],
    "uses": [
      "ol",
      "li",
      "p"
    ],
    "elements": [
      "ol",
      "li",
      "p"
    ],
    "careful": [
      "ol",
      "li",
      "p"
    ],
    "because": [
      "ol",
      "li",
      "p"
    ],
    "containing": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "beforehand": [
      "ol",
      "li",
      "p"
    ],
    "ideally": [
      "ol",
      "li",
      "p"
    ],
    "same": [
      "ol",
      "li",
      "p"
    ],
    "scope": [
      "ol",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "structure": [
      "ol",
      "li",
      "p"
    ],
    "declared": [
      "ol",
      "li",
      "p"
    ],
    "argument": [
      "ol",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "li",
      "p"
    ],
    "allocate": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "needed": [
      "ol",
      "li",
      "p"
    ],
    "determined": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "li",
      "p"
    ],
    "use": [
      "ol",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "li",
      "p"
    ],
    "always": [
      "ol",
      "li",
      "p"
    ],
    "case": [
      "ol",
      "li",
      "p"
    ],
    "way": [
      "ol",
      "li",
      "p"
    ],
    "truncates": [
      "ol",
      "li",
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "verifying": [
      "ul",
      "li"
    ],
    "sufficiently": [
      "ul",
      "li"
    ],
    "large": [
      "ul",
      "li"
    ],
    "storage": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "\"arr33-c": [
      "ul",
      "li"
    ],
    "guarantee": [
      "ul",
      "li"
    ],
    "made": [
      "ul",
      "li"
    ],
    "size\"": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "https//www.securecoding.cert.org/confluence/display/seccode/arr33-c.+guarantee+that+copies+are+made+into+storage+of+sufficient+size": [
      "ul",
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "get": [
      "ul",
      "li",
      "a"
    ],
    "test": [
      "ul",
      "li",
      "a"
    ],
    "vulnerabilities": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Additional Resources",
      "Related Items"
    ],
    "ul": [
      "C++",
      "For more information about verifying that data is copied to sufficiently large storage, please see \"ARR33-C. Guarantee that copies are made into storage of sufficient size\" at https://www.securecoding.cert.org/confluence/display/seccode/ARR33-C.+Guarantee+that+copies+are+made+into+storage+of+sufficient+size",
      "Get the Size of an Array Correctly\r\n      \r\n        How to Test for Buffer Overflow Vulnerabilities"
    ],
    "li": [
      "C++",
      "Identify all functions that copy data to strings or arrays. List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.",
      "Verify that memory size is calculated correctly. Watch out for using sizeof() on pointers. When an array is passed as a parameter, it is passed as a pointer, and sizeof() returns the size of a pointer, not the array. Make sure that code accounts for the trailing null if data is stored in a null-terminated string.",
      "Verify that errors during memory allocation are handled. Memory allocation might fail, so the copying function should account for that possibility.",
      "Verify that bounds are checked during copying. Only copy the amount of data that fits into the buffer. There should be sufficient memory allocated if the size of data has been calculated correctly, but for extra security it is a good idea to write code that checks buffer bounds while copying to prevent buffer overflows. Data that doesn't fit into the buffer should be truncated - code that copies data should terminate once the buffer is full.",
      "Identify all functions that copy data to strings or arrays. List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.",
      "Calculate the amount of memory that is used by data being copied or set a maximum size limit for valid data. Make sure to include a trailing null if a null-terminated string is being copied. When calculating the size of data, count the amount of memory it uses, not the amount of elements in the array. Be careful when using the sizeof() function, because it returns the size of a pointer when an array containing data is passed as a parameter to the function. The memory size of data should be calculated beforehand, ideally in the same scope in which the data structure containing data is declared, and passed as an argument to the function that does the copying.",
      "Allocate memory for the buffer. Once the amount of memory needed to fit all the data is determined, allocate an array or a string of a sufficient size. Write code to handle possible memory allocation errors.",
      "Check bounds when copying. Use the size of the allocated array or string when copying to assure that only the amount of data that fits into the array is copied. This should always be the case if the amount of memory to allocate is calculated correctly, but for extra security it is a good idea to write code in a way that truncates data if it doesn't fit into the buffer.",
      "For more information about verifying that data is copied to sufficiently large storage, please see \"ARR33-C. Guarantee that copies are made into storage of sufficient size\" at https://www.securecoding.cert.org/confluence/display/seccode/ARR33-C.+Guarantee+that+copies+are+made+into+storage+of+sufficient+size",
      "Get the Size of an Array Correctly",
      "How to Test for Buffer Overflow Vulnerabilities"
    ],
    "p": [
      "Verify that all functions that copy data between strings or arrays check boundaries of the destination buffers to prevent buffer overflows.",
      "Copying more data than a buffer can fit results in a buffer overflow.",
      "Perform the following actions to assure that buffer size is checked during copying:",
      "Identify all functions that copy data to strings or arrays. List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.",
      "Verify that memory size is calculated correctly. Watch out for using sizeof() on pointers. When an array is passed as a parameter, it is passed as a pointer, and sizeof() returns the size of a pointer, not the array. Make sure that code accounts for the trailing null if data is stored in a null-terminated string.",
      "Verify that errors during memory allocation are handled. Memory allocation might fail, so the copying function should account for that possibility.",
      "Verify that bounds are checked during copying. Only copy the amount of data that fits into the buffer. There should be sufficient memory allocated if the size of data has been calculated correctly, but for extra security it is a good idea to write code that checks buffer bounds while copying to prevent buffer overflows. Data that doesn't fit into the buffer should be truncated - code that copies data should terminate once the buffer is full.",
      "Perform the following steps to assure that your code allocates enough buffer space when copying data to prevent buffer overflows:",
      "Identify all functions that copy data to strings or arrays. List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.",
      "Calculate the amount of memory that is used by data being copied or set a maximum size limit for valid data. Make sure to include a trailing null if a null-terminated string is being copied. When calculating the size of data, count the amount of memory it uses, not the amount of elements in the array. Be careful when using the sizeof() function, because it returns the size of a pointer when an array containing data is passed as a parameter to the function. The memory size of data should be calculated beforehand, ideally in the same scope in which the data structure containing data is declared, and passed as an argument to the function that does the copying.",
      "Allocate memory for the buffer. Once the amount of memory needed to fit all the data is determined, allocate an array or a string of a sufficient size. Write code to handle possible memory allocation errors.",
      "Check bounds when copying. Use the size of the allocated array or string when copying to assure that only the amount of data that fits into the array is copied. This should always be the case if the amount of memory to allocate is calculated correctly, but for extra security it is a good idea to write code in a way that truncates data if it doesn't fit into the buffer."
    ],
    "ol": [
      "Identify all functions that copy data to strings or arrays. List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.\r\n      \r\n        \r\n          Verify that memory size is calculated correctly. Watch out for using sizeof() on pointers. When an array is passed as a parameter, it is passed as a pointer, and sizeof() returns the size of a pointer, not the array. Make sure that code accounts for the trailing null if data is stored in a null-terminated string.\r\n        \r\n          \r\n            Verify that errors during memory allocation are handled. Memory allocation might fail, so the copying function should account for that possibility.\r\n          \r\n            \r\n              Verify that bounds are checked during copying. Only copy the amount of data that fits into the buffer. There should be sufficient memory allocated if the size of data has been calculated correctly, but for extra security it is a good idea to write code that checks buffer bounds while copying to prevent buffer overflows. Data that doesn't fit into the buffer should be truncated - code that copies data should terminate once the buffer is full.",
      "Identify all functions that copy data to strings or arrays. List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.\r\n      \r\n        \r\n          Calculate the amount of memory that is used by data being copied or set a maximum size limit for valid data. Make sure to include a trailing null if a null-terminated string is being copied. When calculating the size of data, count the amount of memory it uses, not the amount of elements in the array. Be careful when using the sizeof() function, because it returns the size of a pointer when an array containing data is passed as a parameter to the function. The memory size of data should be calculated beforehand, ideally in the same scope in which the data structure containing data is declared, and passed as an argument to the function that does the copying.\r\n        \r\n          \r\n            Allocate memory for the buffer. Once the amount of memory needed to fit all the data is determined, allocate an array or a string of a sufficient size. Write code to handle possible memory allocation errors.\r\n          \r\n            \r\n              Check bounds when copying. Use the size of the allocated array or string when copying to assure that only the amount of data that fits into the array is copied. This should always be the case if the amount of memory to allocate is calculated correctly, but for extra security it is a good idea to write code in a way that truncates data if it doesn't fit into the buffer."
    ],
    "strong": [
      "Identify all functions that copy data to strings or arrays.",
      "Verify that memory size is calculated correctly.",
      "Verify that errors during memory allocation are handled.",
      "Verify that bounds are checked during copying.",
      "Identify all functions that copy data to strings or arrays.",
      "Calculate the amount of memory that is used by data being copied or set a maximum size limit for valid data.",
      "Allocate memory for the buffer.",
      "Check bounds when copying."
    ],
    "a": [
      "https://www.securecoding.cert.org/confluence/display/seccode/ARR33-C.+Guarantee+that+copies+are+made+into+storage+of+sufficient+size",
      "Get the Size of an Array Correctly",
      "How to Test for Buffer Overflow Vulnerabilities"
    ]
  },
  "links": [
    {
      "href": "https://www.securecoding.cert.org/confluence/display/seccode/ARR33-C.+Guarantee+that+copies+are+made+into+storage+of+sufficient+size",
      "text": "https://www.securecoding.cert.org/confluence/display/seccode/ARR33-C.+Guarantee+that+copies+are+made+into+storage+of+sufficient+size"
    },
    {
      "href": "/article/54ee5a30-738f-4ca6-a1eb-ab6e58152f7b",
      "text": "Get the Size of an Array Correctly"
    },
    {
      "href": "/article/bf5f6cb5-4a28-496f-9023-9e521e7dac6d",
      "text": "How to Test for Buffer Overflow Vulnerabilities"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that all functions that copy data between strings or arrays check boundaries of the destination buffers to prevent buffer overflows.</p>\r\n  <h1>Why</h1>\r\n  <p>Copying more data than a buffer can fit results in a buffer overflow.</p>\r\n  <h1>How to Check</h1>\r\n  <p>Perform the following actions to assure that buffer size is checked during copying:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all functions that copy data to strings or arrays.</strong> List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Verify that memory size is calculated correctly.</strong> Watch out for using sizeof() on pointers. When an array is passed as a parameter, it is passed as a pointer, and sizeof() returns the size of a pointer, not the array. Make sure that code accounts for the trailing null if data is stored in a null-terminated string.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Verify that errors during memory allocation are handled.</strong> Memory allocation might fail, so the copying function should account for that possibility.</p>\r\n          <li>\r\n            <p>\r\n              <strong>Verify that bounds are checked during copying.</strong> Only copy the amount of data that fits into the buffer. There should be sufficient memory allocated if the size of data has been calculated correctly, but for extra security it is a good idea to write code that checks buffer bounds while copying to prevent buffer overflows. Data that doesn't fit into the buffer should be truncated -&nbsp;code that copies data should terminate once the buffer is full.</p>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Perform the following steps to assure that your code allocates enough buffer space when copying data to prevent buffer overflows:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all functions that copy data to strings or arrays.</strong> List the components, modules, and libraries that do the most amount of data handling. Usually there exists some code heavy on manipulating data that copies many buffers or constructs various strings.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Calculate the amount of memory that is used by data being copied or set a maximum size limit for valid data.</strong> Make sure to include a trailing null if a null-terminated string is being copied. When calculating the size of data, count the amount of memory it uses, not the amount of elements in the array. Be careful when using the sizeof() function, because it returns the size of a pointer when an array containing data is passed as a parameter to the function. The memory size of data should be calculated beforehand, ideally in the same scope in which the data structure containing data is declared, and passed as an argument to the function that does the copying.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Allocate memory for the buffer.</strong> Once the amount of memory needed to fit all the data is determined, allocate an array or a string of a sufficient size. Write code to handle possible memory allocation errors.</p>\r\n          <li>\r\n            <p>\r\n              <strong>Check bounds when copying.</strong> Use the size of the allocated array or string when copying to assure that only the amount of data that fits into the array is copied. This should always be the case if the amount of memory to allocate is calculated correctly, but for extra security it is a good idea to write code in a way that truncates data if it doesn't fit into the buffer.</p>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about verifying that data is copied to sufficiently large storage, please see \"ARR33-C. Guarantee that copies are made into storage of sufficient size\" at <a href=\"https://www.securecoding.cert.org/confluence/display/seccode/ARR33-C.&#43;Guarantee&#43;that&#43;copies&#43;are&#43;made&#43;into&#43;storage&#43;of&#43;sufficient&#43;size\">https://www.securecoding.cert.org/confluence/display/seccode/ARR33-C.&#43;Guarantee&#43;that&#43;copies&#43;are&#43;made&#43;into&#43;storage&#43;of&#43;sufficient&#43;size</a></li>\r\n  </ul>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/54ee5a30-738f-4ca6-a1eb-ab6e58152f7b\">Get the Size of an Array Correctly</a>\r\n      <li>\r\n        <a href=\"/article/bf5f6cb5-4a28-496f-9023-9e521e7dac6d\">How to Test for Buffer Overflow Vulnerabilities</a>\r\n      </li>\r\n    </li>\r\n  </ul>"
}