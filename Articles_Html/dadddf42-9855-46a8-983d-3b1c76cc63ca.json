{
  "id": "dadddf42-9855-46a8-983d-3b1c76cc63ca",
  "checksum": "6418b68ff7d9916cde5a6f80255fe3040051bee0",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "h1",
      "p",
      "p"
    ],
    "check": [
      "h1",
      "p",
      "p"
    ],
    "for": [
      "h1",
      "p"
    ],
    "ensure": [
      "p"
    ],
    "that": [
      "p"
    ],
    "multithreaded": [
      "p",
      "p",
      "title"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "does": [
      "p",
      "title"
    ],
    "not": [
      "p",
      "title"
    ],
    "cache": [
      "p",
      "title"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "results": [
      "p",
      "p",
      "title"
    ],
    "of": [
      "p",
      "p",
      "title"
    ],
    "security": [
      "p",
      "p",
      "p",
      "title"
    ],
    "checks": [
      "p",
      "title"
    ],
    "as": [
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p"
    ],
    "how": [
      "h1"
    ],
    "fix": [
      "h1"
    ],
    "if": [
      "p",
      "div",
      "pre",
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "caches": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p"
    ],
    "perhaps": [
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "static": [
      "p"
    ],
    "variable": [
      "p"
    ],
    "potentially": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "following": [
      "p"
    ],
    "example": [
      "p"
    ],
    "public": [
      "div",
      "pre"
    ],
    "void": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "accesssecureresource){": [
      "div",
      "pre"
    ],
    "callerok": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "=": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "performsecuritydemand);": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "openandworkwithresource);": [
      "div",
      "pre"
    ],
    "false}private": [
      "div",
      "pre"
    ],
    "openandworkwithresource){": [
      "div",
      "pre"
    ],
    "callerok)": [
      "div",
      "pre"
    ],
    "performtrustedoperation);": [
      "div",
      "div",
      "pre",
      "pre"
    ],
    "else": [
      "div",
      "pre"
    ],
    "{": [
      "div",
      "pre"
    ],
    "}}": [
      "div",
      "pre"
    ],
    "has": [
      "p"
    ],
    "other": [
      "p"
    ],
    "paths": [
      "p"
    ],
    "openandworkwithresource": [
      "p",
      "b"
    ],
    "and": [
      "p"
    ],
    "separate": [
      "p"
    ],
    "thread": [
      "p",
      "p",
      "p"
    ],
    "calls": [
      "p"
    ],
    "method": [
      "p"
    ],
    "on": [
      "p"
    ],
    "same": [
      "p"
    ],
    "object": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "second": [
      "p"
    ],
    "omit": [
      "p"
    ],
    "demand": [
      "p"
    ],
    "because": [
      "p"
    ],
    "encounters": [
      "p"
    ],
    "callerok=true": [
      "p",
      "b"
    ],
    "set": [
      "p"
    ],
    "by": [
      "p"
    ],
    "another": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "How to Fix"
    ],
    "p": [
      "Check to ensure that multithreaded code does not cache the results of security checks as it is vulnerable.",
      "",
      "If your multithreaded code caches the results of a security check, perhaps in a static variable, the code is potentially vulnerable, as shown in the following example.",
      "If your code has other paths to OpenAndWorkWithResource, and a separate thread calls the method on the same object, it is possible for the second thread to omit the security demand because it encounters callerOK=true, set by another thread.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "div": [
      "public void AccessSecureResource(){  callerOK = PerformSecurityDemand();  OpenAndWorkWithResource();  callerOK = false;}private void OpenAndWorkWithResource(){  if (callerOK)    PerformTrustedOperation();  else  {    PerformSecurityDemand();    PerformTrustedOperation();  }}"
    ],
    "pre": [
      "public void AccessSecureResource(){  callerOK = PerformSecurityDemand();  OpenAndWorkWithResource();  callerOK = false;}private void OpenAndWorkWithResource(){  if (callerOK)    PerformTrustedOperation();  else  {    PerformSecurityDemand();    PerformTrustedOperation();  }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "b": [
      "OpenAndWorkWithResource",
      "callerOK=true"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Check For</h1>\r\n  <p>Check to ensure that multithreaded code does not cache the results of security checks as it is vulnerable.</p>\r\n  <p />\r\n  <h1>How to Fix</h1>\r\n  <p>If your multithreaded code caches the results of a security check, perhaps in a static variable, the code is potentially vulnerable, as shown in the following example.</p>\r\n  <div>\r\n    <pre>public void AccessSecureResource()&#123;<br />  callerOK = PerformSecurityDemand();<br />  OpenAndWorkWithResource();<br />  callerOK = false;<br />&#125;<br />private void OpenAndWorkWithResource()&#123;<br />  if (callerOK)<br />    PerformTrustedOperation();<br />  else<br />  &#123;<br />    PerformSecurityDemand();<br />    PerformTrustedOperation();<br />  &#125;<br />&#125;</pre>\r\n  </div>\r\n  <p>If your code has other paths to <b>OpenAndWorkWithResource</b>, and a separate thread calls the method on the same object, it is possible for the second thread to omit the security demand because it encounters <b>callerOK=true</b>, set by another thread.</p>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}