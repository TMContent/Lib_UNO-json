{
  "id": "00000000-0000-0000-0000-0000005ae4db",
  "checksum": "a0947f38ed1bfe555afa70d08c1e07403801e2c7",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "java": [
      "ul",
      "li"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2"
    ],
    "url-encode": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "title"
    ],
    "any": [
      "p"
    ],
    "user": [
      "p",
      "p"
    ],
    "supplied": [
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "title"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "is": [
      "p",
      "p",
      "p"
    ],
    "sent": [
      "p"
    ],
    "back": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "title"
    ],
    "http": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "title"
    ],
    "response": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "title"
    ],
    "header": [
      "p",
      "p"
    ],
    "why": [
      "h2"
    ],
    "if": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p"
    ],
    "accepts": [
      "p"
    ],
    "input": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "includes": [
      "p",
      "ol",
      "li"
    ],
    "such": [
      "p"
    ],
    "headers": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "title"
    ],
    "will": [
      "p"
    ],
    "be": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "splitting": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "are": [
      "p"
    ],
    "url-encoded": [
      "p"
    ],
    "or": [
      "p"
    ],
    "sanitized": [
      "p"
    ],
    "attackers": [
      "p",
      "p"
    ],
    "can": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "a": [
      "p",
      "p"
    ],
    "cross": [
      "p"
    ],
    "site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "by": [
      "p",
      "p"
    ],
    "forcing": [
      "p"
    ],
    "your": [
      "p",
      "ol",
      "li"
    ],
    "send": [
      "p"
    ],
    "carriage": [
      "p"
    ],
    "return": [
      "p"
    ],
    "cr)": [
      "p"
    ],
    "line": [
      "p"
    ],
    "feed": [
      "p"
    ],
    "lf)": [
      "p"
    ],
    "followed": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "content": [
      "p",
      "p"
    ],
    "users": [
      "p"
    ],
    "browser": [
      "p",
      "p"
    ],
    "because": [
      "p"
    ],
    "crlf": [
      "p",
      "p",
      "p"
    ],
    "separator": [
      "p"
    ],
    "separates": [
      "p"
    ],
    "from": [
      "p"
    ],
    "body": [
      "p"
    ],
    "sees": [
      "p"
    ],
    "as": [
      "p"
    ],
    "legitimate": [
      "p"
    ],
    "how": [
      "h2"
    ],
    "identify": [
      "ol",
      "li",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "included": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "search": [
      "ol",
      "li"
    ],
    "code": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "for": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "calls": [
      "ol",
      "li"
    ],
    "httpservletresponseaddheader": [
      "ol",
      "li",
      "em"
    ],
    "httpservletresponseaddcookie": [
      "ol",
      "li",
      "em"
    ],
    "find": [
      "ol",
      "li"
    ],
    "adds": [
      "ol",
      "li"
    ],
    "validate": [
      "ol",
      "li",
      "strong"
    ],
    "use": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "positive": [
      "ol",
      "li"
    ],
    "validation": [
      "ol",
      "li"
    ],
    "routines": [
      "ol",
      "li"
    ],
    "check": [
      "ol",
      "li"
    ],
    "gets": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "javanet.urlencoder": [
      "ol",
      "li",
      "em"
    ],
    "class": [
      "ol",
      "li"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "How"
    ],
    "ul": [
      "Java"
    ],
    "li": [
      "Java",
      "Identify all data included in HTTP response headers. Search your code for calls to  HttpServletResponse.AddHeader and for HttpServletResponse.AddCookie to find all code that adds data to HTTP response headers.",
      "Validate all data included in HTTP response headers. Use positive validation routines to check all data that gets included in HTTP response headers.",
      "URL-encode all data included in HTTP response headers. Use java.net.URLEncoder class to URL-encode data that gets includes in HTTP response headers."
    ],
    "p": [
      "URL-encode any user supplied data that is sent back in HTTP response header.",
      "If the application accepts user input and includes such input in HTTP response headers the application will be vulnerable to response splitting vulnerability unless headers are URL-encoded or data is sanitized. Attackers can execute a cross site scripting attack by forcing your application to send carriage return (CR) and line feed (LF) followed by malicious content to the users browser. Because CRLF is a response header separator and CRLF CRLF separates headers from the body, the browser sees attackers content as legitimate.",
      "To URL-encode data in HTTP Response headers:"
    ],
    "ol": [
      "Identify all data included in HTTP response headers. Search your code for calls to  HttpServletResponse.AddHeader and for HttpServletResponse.AddCookie to find all code that adds data to HTTP response headers.\n Validate all data included in HTTP response headers. Use positive validation routines to check all data that gets included in HTTP response headers.\n URL-encode all data included in HTTP response headers. Use java.net.URLEncoder class to URL-encode data that gets includes in HTTP response headers."
    ],
    "strong": [
      "Identify all data included in HTTP response headers.",
      "Validate all data included in HTTP response headers.",
      "URL-encode all data included in HTTP response headers."
    ],
    "em": [
      "HttpServletResponse.AddHeader",
      "HttpServletResponse.AddCookie",
      "java.net.URLEncoder"
    ]
  },
  "links": [],
  "html": "<h2>Applies To</h2><ul><li> Java</li>\n</ul><h2>What to Do</h2><p>URL-encode any user supplied data that is sent back in HTTP response header.\n</p><h2>Why</h2><p>If the application accepts user input and includes such input in HTTP response headers the application will be vulnerable to response splitting vulnerability unless headers are URL-encoded or data is sanitized. Attackers can execute a cross site scripting attack by forcing your application to send carriage return (CR) and line feed (LF) followed by malicious content to the users browser. Because CRLF is a response header separator and CRLF CRLF separates headers from the body, the browser sees attackers content as legitimate. \n</p><h2>How</h2><p>To URL-encode data in HTTP Response headers:\n</p><ol>\n<li> <strong>Identify all data included in HTTP response headers.</strong> Search your code for calls to <em> HttpServletResponse.AddHeader</em> and for <em>HttpServletResponse.AddCookie</em> to find all code that adds data to HTTP response headers.</li>\n<li> <strong>Validate all data included in HTTP response headers.</strong> Use positive validation routines to check all data that gets included in HTTP response headers.</li>\n<li> <strong>URL-encode all data included in HTTP response headers.</strong> Use <em>java.net.URLEncoder</em> class to URL-encode data that gets includes in HTTP response headers.</li>\n</ol>"
}