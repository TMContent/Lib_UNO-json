{
  "id": "34a6f455-b670-4c86-8e6f-1b4b67ab2cb2",
  "checksum": "9e2e3e2706a88da63b7d5a0a20d5b276c8ec35cf",
  "words": {
    "description": [
      "h1"
    ],
    "use": [
      "p",
      "p",
      "p",
      "blockquote",
      "title"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "hashing": [
      "p",
      "p",
      "blockquote",
      "title"
    ],
    "algorithm": [
      "p",
      "p"
    ],
    "such": [
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "pre",
      "p"
    ],
    "sha256": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "pre"
    ],
    "md5": [
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "pre",
      "p",
      "p",
      "blockquote",
      "p",
      "p",
      "p",
      "blockquote",
      "blockquote"
    ],
    "need": [
      "p",
      "pre"
    ],
    "principal": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "blockquote",
      "p",
      "blockquote",
      "title"
    ],
    "prove": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "pre",
      "blockquote"
    ],
    "knows": [
      "p",
      "p"
    ],
    "secret": [
      "p"
    ],
    "that": [
      "p",
      "p"
    ],
    "shares": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "blockquote"
    ],
    "the": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "blockquote",
      "blockquote"
    ],
    "following": [
      "p",
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "example": [
      "p",
      "pre",
      "p"
    ],
    "shows": [
      "p"
    ],
    "how": [
      "p",
      "title"
    ],
    "hash": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "pre",
      "p"
    ],
    "using": [
      "pre",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "systemsecurity.cryptography;...//": [
      "pre"
    ],
    "create": [
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "instance": [
      "pre"
    ],
    "of": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "crypto": [
      "pre"
    ],
    "service": [
      "pre",
      "pre"
    ],
    "providerhashalgorithm": [
      "pre"
    ],
    "hashalg": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sha256cryptoserviceprovider);": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "convert": [
      "pre"
    ],
    "an": [
      "pre",
      "pre"
    ],
    "array": [
      "pre",
      "pre"
    ],
    "bytesbyte[]": [
      "pre",
      "pre"
    ],
    "bytvalue": [
      "pre"
    ],
    "systemtext.encoding.utf8.getbytes(stringdatatohash);//": [
      "pre"
    ],
    "compute": [
      "pre",
      "p"
    ],
    "this": [
      "pre"
    ],
    "returns": [
      "pre"
    ],
    "bythash": [
      "pre"
    ],
    "hashalgcomputehash(bytvalue);//": [
      "pre"
    ],
    "optionally": [
      "pre"
    ],
    "represent": [
      "pre"
    ],
    "value": [
      "pre",
      "pre",
      "p",
      "p",
      "blockquote",
      "p",
      "p"
    ],
    "base64-encoded": [
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre"
    ],
    "for": [
      "pre",
      "p",
      "p",
      "p"
    ],
    "if": [
      "pre",
      "p"
    ],
    "display": [
      "pre"
    ],
    "transmit": [
      "pre"
    ],
    "over": [
      "pre"
    ],
    "networkstring": [
      "pre"
    ],
    "base64": [
      "pre",
      "pre"
    ],
    "converttobase64string(bythash);": [
      "pre"
    ],
    "have": [
      "p"
    ],
    "computed": [
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "stored": [
      "p",
      "p"
    ],
    "password": [
      "p",
      "p",
      "p",
      "blockquote",
      "p",
      "blockquote"
    ],
    "example,": [
      "p"
    ],
    "can": [
      "p",
      "p",
      "blockquote"
    ],
    "check": [
      "p"
    ],
    "caller": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "blockquote"
    ],
    "prompting": [
      "p"
    ],
    "supplied": [
      "p"
    ],
    "recalculate": [
      "p"
    ],
    "then": [
      "p"
    ],
    "comparing": [
      "p"
    ],
    "result": [
      "p"
    ],
    "note   password": [
      "blockquote"
    ],
    "enables": [
      "blockquote"
    ],
    "verify—but": [
      "blockquote"
    ],
    "not": [
      "blockquote"
    ],
    "retrieve—a": [
      "blockquote"
    ],
    "note": [
      "b",
      "b"
    ],
    "hashes": [
      "p",
      "blockquote"
    ],
    "store": [
      "p",
      "blockquote"
    ],
    "passwords": [
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "database": [
      "p"
    ],
    "should": [
      "p"
    ],
    "combine": [
      "p"
    ],
    "random": [
      "p",
      "pre",
      "pre"
    ],
    "salt": [
      "p",
      "p",
      "blockquote"
    ],
    "before": [
      "p"
    ],
    "computing": [
      "p"
    ],
    "rngcryptoserviceprovider": [
      "p",
      "b",
      "pre"
    ],
    "class": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "systemsecurity.cryptography;...private": [
      "pre"
    ],
    "static": [
      "pre"
    ],
    "createsaltint": [
      "pre"
    ],
    "size{": [
      "pre"
    ],
    "generate": [
      "pre"
    ],
    "cryptographic": [
      "pre",
      "pre"
    ],
    "number": [
      "pre",
      "pre"
    ],
    "provider": [
      "pre",
      "blockquote",
      "blockquote"
    ],
    "rng": [
      "pre"
    ],
    "rngcryptoserviceprovider);": [
      "pre"
    ],
    "byte]": [
      "pre"
    ],
    "buff": [
      "pre"
    ],
    "bytesize];": [
      "pre"
    ],
    "rnggetbytes(buff);": [
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "representation": [
      "pre"
    ],
    "converttobase64string(buff);}": [
      "pre"
    ],
    "note   if": [
      "blockquote"
    ],
    "aspnet": [
      "blockquote"
    ],
    "sql": [
      "blockquote"
    ],
    "server": [
      "blockquote"
    ],
    "membership": [
      "blockquote"
    ],
    "configure": [
      "blockquote"
    ],
    "added": [
      "blockquote"
    ],
    "setting": [
      "blockquote"
    ],
    "passwordformat=\"hashed\"": [
      "blockquote",
      "b"
    ],
    "on": [
      "blockquote"
    ],
    "configuration": [
      "blockquote"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Description"
    ],
    "p": [
      "Use a hashing algorithm, such as SHA256 or MD5, when you need a principal to prove it knows a secret that it shares with you. The following code example shows how to use a hashing algorithm, such as SHA256, to hash data.",
      "When you have computed and stored a hash value for a password (for example), you can check that a caller knows the password by prompting for the password, using the supplied data to recalculate the hash value, and then comparing the result to the stored hash.",
      "If you use hashes to store passwords in a database, you should combine the password with a random salt value before computing the hash. You can compute the salt value by using the RNGCryptoServiceProvider class, as shown in the following code example.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "using System.Security.Cryptography;...// Create a new instance of the hash crypto service provider.HashAlgorithm hashAlg = new SHA256CryptoServiceProvider(); // Convert the data to hash to an array of Bytes.byte[] bytValue = System.Text.Encoding.UTF8.GetBytes(stringDataToHash);// Compute the Hash. This returns an array of Bytes.byte[] bytHash = hashAlg.ComputeHash(bytValue);// Optionally, represent the hash value as a base64-encoded string, // For example, if you need to display the value or transmit it over a network.string base64 = Convert.ToBase64String(bytHash);",
      "using System.Security.Cryptography;...private static string CreateSalt(int size){    // Generate a cryptographic random number using the cryptographic     // service provider    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();    byte[] buff = new byte[size];    rng.GetBytes(buff);    // Return a Base64 string representation of the random number    return Convert.ToBase64String(buff);}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "blockquote": [
      "Note   Password hashing enables you to verify—but not retrieve—a password value.",
      "Note   If you use the ASP.NET SQL Server membership provider, you can configure it to store password hashes with added salt by setting passwordFormat=\"Hashed\" on the provider configuration."
    ],
    "b": [
      "Note",
      "RNGCryptoServiceProvider",
      "Note",
      "passwordFormat=\"Hashed\""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Description</h1>\r\n  <p>Use a hashing algorithm, such as SHA256 or MD5, when you need a principal to prove it knows a secret that it shares with you. The following code example shows how to use a hashing algorithm, such as SHA256, to hash data. </p>\r\n  <pre>using System.Security.Cryptography;...<br />// Create a new instance of the hash crypto service provider.<br />HashAlgorithm hashAlg = new SHA256CryptoServiceProvider(); <br />// Convert the data to hash to an array of Bytes.<br />byte&#91;&#93; bytValue = System.Text.Encoding.UTF8.GetBytes(stringDataToHash);<br />// Compute the Hash. This returns an array of Bytes.<br />byte&#91;&#93; bytHash = hashAlg.ComputeHash(bytValue);<br />// Optionally, represent the hash value as a base64-encoded string, <br />// For example, if you need to display the value or transmit it over a network.<br />string base64 = Convert.ToBase64String(bytHash);  </pre>\r\n  <p>When you have computed and stored a hash value for a password (for example), you can check that a caller knows the password by prompting for the password, using the supplied data to recalculate the hash value, and then comparing the result to the stored hash. </p>\r\n  <blockquote>\r\n    <b>Note</b>&nbsp;&nbsp;&nbsp;Password hashing enables you to verify&#8212;but not retrieve&#8212;a password value.</blockquote>\r\n  <p>If you use hashes to store passwords in a database, you should combine the password with a random salt value before computing the hash. You can compute the salt value by using the <b>RNGCryptoServiceProvider</b> class, as shown in the following code example. </p>\r\n  <pre>using System.Security.Cryptography;...<br />private static string CreateSalt(int size)&#123;<br />    // Generate a cryptographic random number using the cryptographic <br />    // service provider<br />    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();<br />    byte&#91;&#93; buff = new byte&#91;size&#93;;<br />    rng.GetBytes(buff);<br />    // Return a Base64 string representation of the random number<br />    return Convert.ToBase64String(buff);<br />&#125;  </pre>\r\n  <blockquote>\r\n    <b>Note</b>&nbsp;&nbsp;&nbsp;If you use the ASP.NET SQL Server membership provider, you can configure it to store password hashes with added salt by setting <b>passwordFormat=\"Hashed\"</b> on the provider configuration.&nbsp;</blockquote>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}