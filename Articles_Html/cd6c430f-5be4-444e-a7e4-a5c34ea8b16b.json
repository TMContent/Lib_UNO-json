{
  "id": "cd6c430f-5be4-444e-a7e4-a5c34ea8b16b",
  "checksum": "00850c75b9da5a6a8a596afc915f77b2db53bd0d",
  "words": {
    "1": [
      "ul",
      "li",
      "h1"
    ],
    "2": [
      "ul",
      "li",
      "h1"
    ],
    "3": [
      "ul",
      "li",
      "h1"
    ],
    "4": [
      "ul",
      "li",
      "h1"
    ],
    "10": [
      "p",
      "font"
    ],
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "aspnet": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "applications": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p"
    ],
    "must": [
      "p",
      "p",
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p"
    ],
    "client": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "check": [
      "p",
      "p",
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "i",
      "p",
      "i",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p"
    ],
    "bugs": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "cross-site": [
      "p",
      "p"
    ],
    "scripting": [
      "p",
      "p"
    ],
    "many": [
      "p",
      "p"
    ],
    "rely": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "client-side": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "scripts": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "h2",
      "p"
    ],
    "sent": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "i",
      "p",
      "i",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "along": [
      "p"
    ],
    "with": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "font",
      "ol",
      "li",
      "p",
      "p"
    ],
    "pages": [
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p"
    ],
    "these": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "proper": [
      "p",
      "p",
      "p",
      "p"
    ],
    "format": [
      "p",
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "entered": [
      "p"
    ],
    "into": [
      "p",
      "p",
      "p",
      "p"
    ],
    "forms": [
      "p",
      "p"
    ],
    "at": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "p",
      "p"
    ],
    "page": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "i",
      "p",
      "i",
      "p",
      "font",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "submitted": [
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "thus": [
      "p"
    ],
    "avoiding": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h2",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h2",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "round": [
      "p"
    ],
    "trip": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "checks": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p"
    ],
    "email": [
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "ol",
      "li"
    ],
    "addresses": [
      "p"
    ],
    "phone": [
      "p"
    ],
    "numbers": [
      "p"
    ],
    "zip": [
      "p"
    ],
    "codes during": [
      "p"
    ],
    "script": [
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "bypass": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "attack": [
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "modifies": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p"
    ],
    "annuls": [
      "p",
      "ol",
      "li"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "malicious": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "order": [
      "p",
      "p",
      "p",
      "p"
    ],
    "successfully": [
      "p"
    ],
    "submit": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "execute": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "h1",
      "p"
    ],
    "an": [
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "recommended": [
      "p"
    ],
    "you": [
      "p",
      "p"
    ],
    "follow": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p",
      "p"
    ],
    "test": [
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "title"
    ],
    "aspnet:": [
      "p"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "h1",
      "h1",
      "p",
      "h1",
      "p",
      "h1",
      "p"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1"
    ],
    "start": [
      "ul",
      "li",
      "h1"
    ],
    "testing": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "exploring": [
      "ul",
      "li",
      "h1"
    ],
    "additional": [
      "ul",
      "li",
      "h1",
      "p",
      "h2"
    ],
    "first": [
      "p"
    ],
    "necessary": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "p",
      "title"
    ],
    "attackers": [
      "p",
      "p",
      "p"
    ],
    "exploit": [
      "p"
    ],
    "bugs two": [
      "p"
    ],
    "common": [
      "p"
    ],
    "ways": [
      "p"
    ],
    "bypassing": [
      "p",
      "p"
    ],
    "disabling": [
      "ul",
      "li",
      "h2",
      "ol",
      "li",
      "h2",
      "p",
      "p"
    ],
    "prior": [
      "ul",
      "li",
      "h2"
    ],
    "submitting": [
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "h2",
      "p",
      "p",
      "p"
    ],
    "request": [
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "h2",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "modifying": [
      "ul",
      "li",
      "h2",
      "p"
    ],
    "validated": [
      "ul",
      "li",
      "h2"
    ],
    "after": [
      "ul",
      "li",
      "h2"
    ],
    "by": [
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "ol",
      "li",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "using": [
      "ul",
      "li",
      "h2",
      "h2",
      "p"
    ],
    "http": [
      "ul",
      "li",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "h2",
      "p"
    ],
    "proxy": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "i",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h2",
      "ol",
      "ol",
      "ol",
      "li",
      "em",
      "li",
      "em",
      "li",
      "em",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scenario": [
      "p",
      "p"
    ],
    "disable": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "setting": [
      "p"
    ],
    "his": [
      "p",
      "ol",
      "li"
    ],
    "browser": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "h2",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "options": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "javascript": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "making": [
      "p",
      "p"
    ],
    "actual": [
      "p"
    ],
    "doing": [
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "any": [
      "p"
    ],
    "sequence": [
      "p"
    ],
    "characters": [
      "p"
    ],
    "detail": [
      "p",
      "p"
    ],
    "requests": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "containing": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "fields": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "form": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "sends": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "receives": [
      "ol",
      "li"
    ],
    "enters": [
      "ol",
      "li",
      "p",
      "ol",
      "li"
    ],
    "submits": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "note": [
      "p",
      "p",
      "p"
    ],
    "however": [
      "p"
    ],
    "including": [
      "p"
    ],
    "ajax-based": [
      "p"
    ],
    "capabilities": [
      "p"
    ],
    "so": [
      "p",
      "p"
    ],
    "might": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "unable": [
      "p"
    ],
    "disabled": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "font",
      "p",
      "font",
      "p",
      "p",
      "p"
    ],
    "case": [
      "p"
    ],
    "needs": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "doesn’t": [
      "p"
    ],
    "modify": [
      "p",
      "ol",
      "li"
    ],
    "but": [
      "p"
    ],
    "proxies": [
      "p",
      "ol",
      "li"
    ],
    "through": [
      "p",
      "ol",
      "li"
    ],
    "packet-intercepting": [
      "p"
    ],
    "burp": [
      "p",
      "i",
      "ol",
      "ol",
      "ol",
      "li",
      "em",
      "li",
      "em",
      "li",
      "em"
    ],
    "webscarab": [
      "p",
      "i"
    ],
    "then": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "well-formed": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "target": [
      "p"
    ],
    "intercept": [
      "p",
      "em",
      "em"
    ],
    "change": [
      "p"
    ],
    "string": [
      "p"
    ],
    "enables": [
      "ol",
      "li",
      "p"
    ],
    "packet": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "interception": [
      "ol",
      "li"
    ],
    "allowed)": [
      "ol",
      "li"
    ],
    "since": [
      "ol",
      "li",
      "p"
    ],
    "valid": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "makes": [
      "ol",
      "li"
    ],
    "which": [
      "ol",
      "li"
    ],
    "intercepted": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "replaces": [
      "ol",
      "li"
    ],
    "forwards": [
      "ol",
      "li"
    ],
    "second": [
      "p"
    ],
    "what": [
      "p"
    ],
    "them": [
      "p",
      "p",
      "p"
    ],
    "avoid": [
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "exists": [
      "p"
    ],
    "because": [
      "p"
    ],
    "only": [
      "p",
      "p",
      "p"
    ],
    "security-specific": [
      "p"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "code": [
      "p",
      "p",
      "i",
      "p",
      "i",
      "p",
      "p",
      "p"
    ],
    "reduce": [
      "p"
    ],
    "number": [
      "p"
    ],
    "round-trips": [
      "p"
    ],
    "between": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "address": [
      "p",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "p",
      "font",
      "ol",
      "li"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "clicks": [
      "p",
      "p"
    ],
    "button": [
      "p",
      "p"
    ],
    "button1": [
      "p",
      "i"
    ],
    "asp": [
      "p"
    ],
    "invokes": [
      "p",
      "p"
    ],
    "validateform),which": [
      "p"
    ],
    "email-address": [
      "p"
    ],
    "validateform)": [
      "i",
      "p",
      "i"
    ],
    "partial": [
      "p",
      "i"
    ],
    "c#": [
      "p",
      "i",
      "p"
    ],
    "protected": [
      "p",
      "font",
      "p",
      "font"
    ],
    "void": [
      "p",
      "font",
      "p",
      "font"
    ],
    "page_loadobject": [
      "p",
      "font"
    ],
    "sender": [
      "p",
      "font",
      "p",
      "font"
    ],
    "eventargs": [
      "p",
      "font",
      "p",
      "font"
    ],
    "e{": [
      "p",
      "font",
      "p",
      "font"
    ],
    "button1attributes.add(\"onclick\",": [
      "p",
      "font"
    ],
    "\"return": [
      "p",
      "font"
    ],
    "validateformdocument.forms[0]['txbusername'].value);\");": [
      "p",
      "font"
    ],
    "..": [
      "p",
      "font"
    ],
    "aspx": [
      "p",
      "i"
    ],
    "%@": [
      "p",
      "font"
    ],
    "language=\"c#\"": [
      "p",
      "font"
    ],
    "autoeventwireup=\"true\"": [
      "p",
      "font"
    ],
    "codefile=\"loginaspx.cs\"": [
      "p",
      "font"
    ],
    "inherits=\"login\"": [
      "p",
      "font"
    ],
    "%<!doctype": [
      "p",
      "font"
    ],
    "html": [
      "p",
      "font"
    ],
    "public": [
      "p",
      "font"
    ],
    "\"-//w3c//dtd": [
      "p",
      "font"
    ],
    "xhtml": [
      "p",
      "font"
    ],
    "transitional//en\"": [
      "p",
      "font"
    ],
    "\"http//www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd\"><html": [
      "p",
      "font"
    ],
    "xmlns=\"http//www.w3.org/1999/xhtml\"><head": [
      "p",
      "font"
    ],
    "runat=\"server\"": [
      "p",
      "p",
      "p",
      "font",
      "font",
      "font"
    ],
    "title>untitled": [
      "p",
      "font"
    ],
    "page/title><script>function": [
      "p",
      "font"
    ],
    "validateformemailstr){ //": [
      "p",
      "font"
    ],
    "e-mail": [
      "p",
      "font"
    ],
    "valid var": [
      "p",
      "font"
    ],
    "emailpat": [
      "p",
      "font"
    ],
    "=": [
      "p",
      "p",
      "font",
      "font",
      "p",
      "font"
    ],
    "\"^a-za-z0-9._%+-]+@[a-za-z0-9.-]+\\\\.[a-za-z]{2,4}$\"; var": [
      "p",
      "font"
    ],
    "matcharray": [
      "p",
      "p",
      "font",
      "font"
    ],
    "emailstrmatch(emailpat); if": [
      "p",
      "font"
    ],
    "==": [
      "p",
      "font"
    ],
    "null": [
      "p",
      "font"
    ],
    "{": [
      "p",
      "font",
      "p",
      "font",
      "p",
      "font"
    ],
    "alert\"incorrect": [
      "p",
      "font"
    ],
    "format\";": [
      "p",
      "font",
      "p",
      "font"
    ],
    "return": [
      "p",
      "font",
      "p",
      "p",
      "font",
      "font",
      "p",
      "font"
    ],
    "false } document.forms[0].submit();}</script></head><body": [
      "p",
      "font"
    ],
    "style=\"font-weight": [
      "p",
      "font"
    ],
    "700\"": [
      "p",
      "font"
    ],
    "id=\"form1\"": [
      "p",
      "font"
    ],
    "div>": [
      "p",
      "font"
    ],
    "username": [
      "p",
      "font"
    ],
    "asp:textbox": [
      "p",
      "p",
      "font",
      "font"
    ],
    "id=\"txbusername\"": [
      "p",
      "font"
    ],
    "runat=\"server\"</asp:textbox><br/>": [
      "p",
      "p",
      "font",
      "font"
    ],
    "password": [
      "p",
      "font"
    ],
    "id=\"txbpassword\"": [
      "p",
      "font"
    ],
    "textmode=\"password\"": [
      "p",
      "font"
    ],
    "/div>": [
      "p",
      "font"
    ],
    "asp:button": [
      "p",
      "font"
    ],
    "id=\"button1\"": [
      "p",
      "font"
    ],
    "onclick=\"button1_click\"": [
      "p",
      "font"
    ],
    "text=\"login\"": [
      "p",
      "font"
    ],
    "width=\"195px\"": [
      "p",
      "font"
    ],
    "/": [
      "p",
      "font"
    ],
    "/form></body></html>": [
      "p",
      "font"
    ],
    "page_load": [
      "p",
      "i"
    ],
    "sets": [
      "p"
    ],
    "up": [
      "p"
    ],
    "function": [
      "p",
      "p"
    ],
    "executes": [
      "p"
    ],
    "alerting": [
      "p"
    ],
    "incorrect": [
      "p"
    ],
    "developer": [
      "p"
    ],
    "avoids": [
      "p"
    ],
    "round-trip": [
      "p"
    ],
    "formats": [
      "p"
    ],
    "problem": [
      "p"
    ],
    "arises": [
      "p"
    ],
    "developers": [
      "p",
      "p",
      "p",
      "p"
    ],
    "kind": [
      "p",
      "p"
    ],
    "protecting": [
      "p"
    ],
    "security": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p"
    ],
    "command": [
      "p"
    ],
    "similar": [
      "p"
    ],
    "involve": [
      "p"
    ],
    "ill-intended": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "application attackers": [
      "p"
    ],
    "trivially": [
      "p"
    ],
    "one": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "above": [
      "p",
      "p"
    ],
    "protect": [
      "p",
      "p",
      "p"
    ],
    "perform": [
      "p",
      "p"
    ],
    "server-side": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "private": [
      "p",
      "font"
    ],
    "bool": [
      "p",
      "font"
    ],
    "isvalidemailstring": [
      "p",
      "font"
    ],
    "emailstr{": [
      "p",
      "font"
    ],
    "regex": [
      "p",
      "font"
    ],
    "validemail": [
      "p",
      "font"
    ],
    "new": [
      "p",
      "font"
    ],
    "regex\"^[a-za-z0-9._%+-]+@[a-za-z0-9.-]+\\\\.[a-za-z]{2,4}$\");": [
      "p",
      "font"
    ],
    "!validemail.ismatch(emailstr))": [
      "p",
      "font"
    ],
    "false": [
      "p",
      "font"
    ],
    "}": [
      "p",
      "font",
      "p",
      "font"
    ],
    "true}": [
      "p",
      "font"
    ],
    "button1_clickobject": [
      "p",
      "font"
    ],
    "!isvalidemail(txbusername.text))": [
      "p",
      "font"
    ],
    "responsewrite(\"incorrect": [
      "p",
      "font"
    ],
    "//": [
      "p",
      "font"
    ],
    "continue": [
      "p",
      "font"
    ],
    "authentication": [
      "p",
      "font",
      "p"
    ],
    "process..}": [
      "p",
      "font"
    ],
    "validating": [
      "p"
    ],
    "inside": [
      "p"
    ],
    "button1_clickwhich": [
      "p"
    ],
    "runs": [
      "p"
    ],
    "starts": [
      "p"
    ],
    "checking": [
      "p"
    ],
    "correct": [
      "p"
    ],
    "stops": [
      "p"
    ],
    "process": [
      "p"
    ],
    "not": [
      "p",
      "p"
    ],
    "button1_click": [
      "i"
    ],
    "fully": [
      "p"
    ],
    "leverage": [
      "p"
    ],
    "routines": [
      "p",
      "p"
    ],
    "built": [
      "p"
    ],
    "controls": [
      "p"
    ],
    "run": [
      "p"
    ],
    "both": [
      "p"
    ],
    "according": [
      "p"
    ],
    "msdn “validation": [
      "p"
    ],
    "performed": [
      "p",
      "p"
    ],
    "even": [
      "p"
    ],
    "was": [
      "p"
    ],
    "already": [
      "p"
    ],
    "determine": [
      "p"
    ],
    "status": [
      "p"
    ],
    "provides": [
      "p"
    ],
    "users": [
      "p"
    ],
    "validation”": [
      "p"
    ],
    "next": [
      "p"
    ],
    "discovering": [
      "p"
    ],
    "basic": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "from": [
      "p",
      "p"
    ],
    "attacker’s": [
      "p"
    ],
    "perspective": [
      "p"
    ],
    "discover": [
      "p"
    ],
    "your": [
      "p"
    ],
    "internet": [
      "h2",
      "p"
    ],
    "open": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "navigate": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "click": [
      "ol",
      "li"
    ],
    "ok": [
      "ol",
      "li"
    ],
    "expected": [
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "performs": [
      "p",
      "p"
    ],
    "rejects": [
      "p",
      "p"
    ],
    "intercepting": [
      "h2"
    ],
    "download": [
      "ol",
      "li"
    ],
    "suite": [
      "ol",
      "li",
      "em"
    ],
    "http://portswigger.net/suite/).": [
      "ol",
      "li"
    ],
    "proxy-intercept": [
      "ol",
      "li"
    ],
    "tab": [
      "ol",
      "li"
    ],
    "set": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "“intercept": [
      "ol",
      "li"
    ],
    "on”": [
      "ol",
      "li"
    ],
    "connection": [
      "ol",
      "li"
    ],
    "fill": [
      "ol",
      "li"
    ],
    "allowed": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "values": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "changing": [
      "ol",
      "li"
    ],
    "malformed": [
      "ol",
      "li",
      "p"
    ],
    "ones": [
      "ol",
      "li"
    ],
    "forward": [
      "ol",
      "li"
    ],
    "final": [
      "p"
    ],
    "where": [
      "p"
    ],
    "ajax": [
      "h2",
      "p",
      "p",
      "p"
    ],
    "high": [
      "h2"
    ],
    "risk": [
      "h2"
    ],
    "asynchronous": [
      "p"
    ],
    "xml": [
      "p"
    ],
    "heavily": [
      "p"
    ],
    "impossible": [
      "p"
    ],
    "bug": [
      "p"
    ],
    "will": [
      "p"
    ],
    "stop": [
      "p"
    ],
    "therefore": [
      "p"
    ],
    "here": [
      "p"
    ],
    "consider": [
      "h2"
    ],
    "frameworks": [
      "h2",
      "p"
    ],
    "integrate": [
      "p"
    ],
    "other": [
      "p"
    ],
    "flash/flex": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "its": [
      "p"
    ],
    "own": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "flash": [
      "p",
      "p"
    ],
    "parameters": [
      "p"
    ],
    "validators": [
      "p"
    ],
    "flex": [
      "p"
    ],
    "their": [
      "p"
    ],
    "fail": [
      "p"
    ],
    "do": [
      "p"
    ],
    "conclusions": [
      "h1"
    ],
    "allow": [
      "p"
    ],
    "input-related": [
      "p"
    ],
    "xss": [
      "p"
    ],
    "injection applications": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "they": [
      "p"
    ],
    "instead": [
      "p"
    ],
    "implementing": [
      "p"
    ],
    "done": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "nature": [
      "p"
    ],
    "under": [
      "p"
    ],
    "traditional,": [
      "p"
    ],
    "etc.": [
      "p"
    ],
    "vulnerabilities": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Start Testing and Exploring",
      "Step 4: Execute Additional Testing",
      "Conclusions"
    ],
    "ul": [
      "ASP.NET 4.0",
      "Step 1: Understand attack scenarios \r\n    Step 2: Analyze causes and countermeasures \r\n    Step 3: Start testing and exploring \r\n    Step 4: Execute additional testing",
      "Disabling a client-side script prior to submitting a request \r\n    Modifying validated data after submitting a request by using an HTTP proxy"
    ],
    "li": [
      "ASP.NET 4.0",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Execute additional testing",
      "Disabling a client-side script prior to submitting a request",
      "Modifying validated data after submitting a request by using an HTTP proxy",
      "The attacker requests a web page containing input fields, such as a web form. The application sends a web page with a client-side input validation script.",
      "The attacker receives the web page and annuls the client-side validation by disabling JavaScript in the browser.",
      "The attacker enters malicious data in the input fields and submits the web form.",
      "The attacker requests a web page containing input fields, such as a web form. The application sends the web page with a client-side input validation script.",
      "The attacker proxies his browser through HTTP proxy and enables HTTP packet interception.",
      "The attacker enters well-formed (allowed) data in the input fields and then submits the web form. Since the input is valid, the web page makes a request to the application, which is intercepted by the HTTP proxy.",
      "In the HTTP proxy, the attacker replaces the well-formed data with malicious data and then forwards the packet to the application.",
      "Open a browser and navigate to a web page containing a client-side validation script.",
      "Open browser Options and navigate to security options.",
      "Disable JavaScript and then click OK.",
      "Submit ill-intended data in the web form.",
      "Open a browser and navigate to a web page containing a client-side validation script.",
      "Download and execute Burp suite (http://portswigger.net/suite/).",
      "In the Proxy->Intercept tab, set proxy to “intercept is on”.",
      "In the browser, set connection options to use Burp proxy.",
      "Fill in the web page with allowed values, such as a valid email address.",
      "Submit the web page.",
      "In Burp proxy, modify the intercepted request by changing the allowed values to malformed ones. Forward the request."
    ],
    "p": [
      "Web applications must validate client input to check for injection bugs such as SQL injection and cross-site scripting. Many web applications rely on client-side scripts that are sent to the client along with web pages. The application uses these scripts to check for proper format of data entered into web forms at the client, before the page is submitted to the server, thus avoiding a round trip for simple format checks such as email addresses, phone numbers, and ZIP codes. During a client-side script validation bypass attack, the attacker modifies or annuls a client-side script that checks against malicious input in order to successfully submit the input and execute an attack on the application.",
      "It is recommended that you follow these steps to test for client-side validation bypass bugs in ASP.NET:",
      "First, it is necessary to understand how attackers exploit client-side validation bypass bugs. Two common ways of bypassing client-side scripts are:",
      "",
      "In this scenario, the attacker disable the client-side script by setting his browser options to disable JavaScript before making the actual request to the application server. By doing this, the attacker can submit any sequence of characters to the application.",
      "In detail:",
      "Note, however, that many applications, including AJAX-based applications, rely on JavaScript capabilities, so the attacker might be unable to submit the form with JavaScript disabled. If this is the case, the attacker needs to execute the following attack.",
      "In this scenario, the attacker doesn’t modify or disable the client-side script but proxies the browser through an HTTP packet-intercepting proxy such as Burp proxy or WebScarab. Then, the attacker enters well-formed input data into the target input fields and submits the request. The attacker then uses the proxy to intercept the request and change the well-formed input into a malicious string.",
      "In detail:",
      "The second step in testing for client-side validation bypass bugs is to analyze what causes them and how to avoid them.",
      "This vulnerability exists because applications rely on client-side checks only for security-specific checks. ASP.NET applications might use client-side JavaScript code to reduce the number of round-trips between the client and the server.  For instance, the following page checks if an email address is valid before submitting a web form. When a client clicks on the submit button Button1, the following ASP page invokes validateForm(),which checks for a valid email-address before submitting the form:",
      "Partial Code for the C# page",
      "protected void Page_Load(object sender, EventArgs e){  Button1.Attributes.Add(\"onClick\",    \"return validateForm(document.forms[0]['txbUserName'].value);\");  ...",
      "Code for the ASPX page",
      "<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"login.aspx.cs\" Inherits=\"login\" %><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head runat=\"server\">  <title>Untitled Page</title><script>function validateForm(emailStr){ // checks if the e-mail address is valid var emailPat = \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\"; var matchArray = emailStr.match(emailPat); if (matchArray == null) {   alert(\"Incorrect email address format\");   return false; } document.forms[0].submit();}</script></head><body style=\"font-weight: 700\">  <form id=\"form1\" runat=\"server\">  <div>    Username:    <asp:TextBox ID=\"txbUserName\" runat=\"server\"></asp:TextBox><br/>    Password:    <asp:TextBox ID=\"txbPassword\" TextMode=\"Password\" runat=\"server\"></asp:TextBox><br/>  </div>  <asp:Button ID=\"Button1\" runat=\"server\" onclick=\"Button1_Click\" Text=\"Login\" Width=\"195px\" />  </form></body></html>",
      "Note how the C# code in Page_Load sets up the client-side validation. When the client submits the form, the JavaScript function validateForm() executes, alerting the client if the email address is in incorrect format. By doing this, the developer avoids a round-trip to the server to check for valid email address formats.",
      "A problem arises when developers rely on this kind of check for protecting against application security attacks such as SQL injection, cross-site scripting, command injection, and similar attacks that involve attackers submitting ill-intended input to the application. Attackers can trivially bypass client-side checks such as the one shown above in order to attack the application.",
      "To protect against client-side bypass bugs, ASP.NET applications must perform proper validation at the server-side:",
      "private bool isValidEmail(string emailStr){  Regex validEmail = new Regex(\"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\");  if (!validEmail.IsMatch(emailStr))  {   return false;  }  return true;}",
      "protected void Button1_Click(object sender, EventArgs e){  if (!isValidEmail(txbUserName.Text))  {    Response.Write(\"Incorrect email address format\");    return;  }  // continue with authentication process...}",
      "Note that the code above invokes the validating email function inside Button1_Click,which runs at the server when the client clicks the form button. The request starts by checking if the email is in the correct format and stops the authentication process if it is not.",
      "To fully protect against client-side bypass bugs, ASP.NET developers must leverage validation routines built into ASP.NET controls, since these routines run both at the client-side and server-side to protect against bypass attacks. According to MSDN: “Validation is performed on the server even if it was already performed on the client. This enables you to determine validation status in server code and provides security against users bypassing client-side validation.”",
      "The next step in discovering client-side validation bypass bugs is to execute basic test cases from an attacker’s perspective in order to discover them in your application.",
      "Follow these steps to test for client-side validation bypass by disabling JavaScript:",
      "Expected result: The application performs proper server-side validation and rejects the ill-intended data.",
      "Follow these steps to bypass client-side validation by modifying web page:",
      "Expected result: The application performs proper server-side validation and rejects the ill-intended data.",
      "The final step in testing for client-side validation bugs is to understand additional scenarios where testing is necessary.",
      "AJAX (Asynchronous JavaScript and XML) applications rely heavily on client-side scripts. Understand that it is impossible to disable JavaScript when testing for this bug in AJAX applications, as this will stop the browser from making requests; therefore, the use of a proxy is a must here.",
      "Web developers might integrate ASP.NET applications with other Internet frameworks such as Flash/Flex. This kind of framework might provide its own client-side forms with data validation options. Make sure to test Flash parameters for this vulnerability, as developers might rely on web form validators such as Flex to validate their input at the client-side only and fail to do so at the server-side.",
      "Client-side validation bypass bugs allow attackers to submit malformed data that is not expected by the application in order to execute input-related attacks such as XSS and SQL injection. Applications are vulnerable when they rely on client-side scripts only to perform security checks instead of implementing these checks on the server. Testing can be done by disabling JavaScript or using an HTTP proxy, depending on the nature of the application under test (traditional, AJAX, Flash, etc)."
    ],
    "b": [
      ""
    ],
    "i": [
      "",
      "Burp proxy",
      "WebScarab",
      "Button1",
      "validateForm()",
      "",
      "Partial Code for the C# page",
      "Code for the ASPX page",
      "Page_Load",
      "validateForm()",
      "Button1_Click",
      ""
    ],
    "h2": [
      "Disabling Client-side Script Prior to Submitting a Request",
      "Modifying Validated Data after Submitting a Request by Using an HTTP Proxy",
      "Test by Disabling JavaScript in Internet Browser",
      "Test by Intercepting HTTP Request using a proxy",
      "AJAX Applications are at High Risk",
      "Consider Additional Frameworks"
    ],
    "ol": [
      "The attacker requests a web page containing input fields, such as a web form. The application sends a web page with a client-side input validation script. \r\n    The attacker receives the web page and annuls the client-side validation by disabling JavaScript in the browser. \r\n    The attacker enters malicious data in the input fields and submits the web form.",
      "The attacker requests a web page containing input fields, such as a web form. The application sends the web page with a client-side input validation script. \r\n    The attacker proxies his browser through HTTP proxy and enables HTTP packet interception. \r\n    The attacker enters well-formed (allowed) data in the input fields and then submits the web form. Since the input is valid, the web page makes a request to the application, which is intercepted by the HTTP proxy. \r\n    In the HTTP proxy, the attacker replaces the well-formed data with malicious data and then forwards the packet to the application.",
      "Open a browser and navigate to a web page containing a client-side validation script. \r\n    Open browser Options and navigate to security options. \r\n    Disable JavaScript and then click OK. \r\n    Submit ill-intended data in the web form.",
      "Open a browser and navigate to a web page containing a client-side validation script. \r\n    Download and execute Burp suite (http://portswigger.net/suite/). \r\n    In the Proxy->Intercept tab, set proxy to “intercept is on”. \r\n    In the browser, set connection options to use Burp proxy. \r\n    Fill in the web page with allowed values, such as a valid email address. \r\n    Submit the web page. \r\n    In Burp proxy, modify the intercepted request by changing the allowed values to malformed ones. Forward the request."
    ],
    "font": [
      "protected void Page_Load(object sender, EventArgs e){  Button1.Attributes.Add(\"onClick\",    \"return validateForm(document.forms[0]['txbUserName'].value);\");  ...",
      "<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"login.aspx.cs\" Inherits=\"login\" %><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head runat=\"server\">  <title>Untitled Page</title><script>function validateForm(emailStr){ // checks if the e-mail address is valid var emailPat = \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\"; var matchArray = emailStr.match(emailPat); if (matchArray == null) {   alert(\"Incorrect email address format\");   return false; } document.forms[0].submit();}</script></head><body style=\"font-weight: 700\">  <form id=\"form1\" runat=\"server\">  <div>    Username:    <asp:TextBox ID=\"txbUserName\" runat=\"server\"></asp:TextBox><br/>    Password:    <asp:TextBox ID=\"txbPassword\" TextMode=\"Password\" runat=\"server\"></asp:TextBox><br/>  </div>  <asp:Button ID=\"Button1\" runat=\"server\" onclick=\"Button1_Click\" Text=\"Login\" Width=\"195px\" />  </form></body></html>",
      "private bool isValidEmail(string emailStr){  Regex validEmail = new Regex(\"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\");  if (!validEmail.IsMatch(emailStr))  {   return false;  }  return true;}",
      "protected void Button1_Click(object sender, EventArgs e){  if (!isValidEmail(txbUserName.Text))  {    Response.Write(\"Incorrect email address format\");    return;  }  // continue with authentication process...}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "em": [
      "Burp suite",
      "Proxy",
      "Intercept",
      "intercept is on",
      "Burp proxy",
      "Burp proxy"
    ]
  },
  "links": [],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>Web applications must validate client input to check for injection bugs such as SQL injection and cross-site scripting. Many web applications rely on client-side scripts that are sent to the client along with web pages. The application uses these scripts to check for proper format of data entered into web forms at the client, before the page is submitted to the server, thus avoiding a round trip for simple format checks such as email addresses, phone numbers, and ZIP codes.&nbsp;During a client-side script validation bypass attack, the attacker modifies or annuls a client-side script that checks against malicious input in order to successfully submit the input and execute an attack on the application.</p>\r\n  <p>It is recommended that you follow these steps to test for client-side validation bypass bugs in ASP.NET:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Start testing and exploring </li>\r\n    <li>Step 4: Execute additional testing&nbsp;</li>\r\n  </ul>\r\n  <h1>Step 1: Understand attack scenarios</h1>\r\n  <p>First, it is necessary to understand how attackers exploit client-side validation bypass bugs.&nbsp;Two common ways of bypassing client-side scripts are:</p>\r\n  <ul>\r\n    <li>Disabling a client-side script prior to submitting a request </li>\r\n    <li>Modifying validated data after submitting a request by using an HTTP proxy</li>\r\n  </ul>\r\n  <p>\r\n    <b>\r\n      <i>\r\n      </i>\r\n    </b>\r\n  </p>\r\n  <h2>\r\n    Disabling Client-side Script Prior to Submitting a Request\r\n  </h2>\r\n  <p>In this scenario, the attacker disable the client-side script by setting his browser options to disable JavaScript before making the actual request to the application server. By doing this, the attacker can submit any sequence of characters to the application.</p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The attacker requests a web page containing input fields, such as a web form. The application sends a web page with a client-side input validation script. </li>\r\n    <li>The attacker receives the web page and annuls the client-side validation by disabling JavaScript in the browser. </li>\r\n    <li>The attacker enters malicious data in the input fields and submits the web form.</li>\r\n  </ol>\r\n  <p>Note, however, that many applications, including AJAX-based applications, rely on JavaScript capabilities, so the attacker might be unable to submit the form with JavaScript disabled. If this is the case, the attacker needs to execute the following attack.</p>\r\n  <h2>\r\n    Modifying Validated Data after Submitting a Request by Using an HTTP Proxy\r\n  </h2>\r\n  <p>In this scenario, the attacker doesn’t modify or disable the client-side script but proxies the browser through an HTTP packet-intercepting proxy such as <i>Burp proxy </i>or <i>WebScarab</i>. Then, the attacker enters well-formed input data into the target input fields and submits the request. The attacker then uses the proxy to intercept the request and change the well-formed input into a malicious string.</p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The attacker requests a web page containing input fields, such as a web form. The application sends the web page with a client-side input validation script. </li>\r\n    <li>The attacker proxies his browser through HTTP proxy and enables HTTP packet interception. </li>\r\n    <li>The attacker enters well-formed (allowed) data in the input fields and then submits the web form. Since the input is valid, the web page makes a request to the application, which is intercepted by the HTTP proxy. </li>\r\n    <li>In the HTTP proxy, the attacker replaces the well-formed data with malicious data and then forwards the packet to the application.&nbsp;</li>\r\n  </ol>\r\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\r\n  <p>The second step in testing for client-side validation bypass bugs is to analyze what causes them and how to avoid them.</p>\r\n  <p>This vulnerability exists because applications rely on client-side checks only for security-specific checks. ASP.NET applications might use client-side JavaScript code to reduce the number of round-trips between the client and the server.&nbsp; For instance, the following page checks if an email address is valid before submitting a web form. When a client clicks on the submit button <i>Button1</i>, the following ASP page invokes <i>validateForm()</i>,<i></i>which checks for a valid email-address before submitting the form:</p>\r\n  <p>\r\n    <i>Partial Code for the C# page</i>\r\n  </p>\r\n  <p>\r\n    <font face=\"'Courier New'\">protected void Page_Load(object sender, EventArgs e)<br />{<br />&nbsp; Button1.Attributes.Add(\"onClick\",<br />&nbsp; &nbsp; \"return validateForm(document.forms[0]['txbUserName'].value);\");<br />&nbsp; ...&nbsp;</font>\r\n  </p>\r\n  <p>\r\n    <i>Code for the ASPX page</i>&nbsp;</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"login.aspx.cs\" Inherits=\"login\" %&gt;<br /><br />&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;<br /><br />&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;<br />&lt;head runat=\"server\"&gt;<br />&nbsp; &lt;title&gt;Untitled Page&lt;/title&gt;<br />&lt;script&gt;<br /><br />function validateForm(emailStr)<br />{<br />&nbsp;// checks if the e-mail address is valid<br />&nbsp;var emailPat = \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\";<br />&nbsp;var matchArray = emailStr.match(emailPat);<br />&nbsp;if (matchArray == null) {<br />&nbsp; &nbsp;alert(\"Incorrect email address format\");<br />&nbsp; &nbsp;return false;<br />&nbsp;}<br />&nbsp;document.forms[0].submit();<br />}<br />&lt;/script&gt;<br />&lt;/head&gt;<br />&lt;body style=\"font-weight: 700\"&gt;<br />&nbsp; &lt;form id=\"form1\" runat=\"server\"&gt;<br />&nbsp; &lt;div&gt;<br />&nbsp; &nbsp; Username:<br />&nbsp; &nbsp; &lt;asp:TextBox ID=\"txbUserName\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;&lt;br/&gt;<br />&nbsp; &nbsp; Password:<br />&nbsp; &nbsp; &lt;asp:TextBox ID=\"txbPassword\" TextMode=\"Password\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;&lt;br/&gt;<br />&nbsp; &lt;/div&gt;<br />&nbsp; &lt;asp:Button ID=\"Button1\" runat=\"server\" onclick=\"Button1_Click\" Text=\"Login\" Width=\"195px\" /&gt;<br />&nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</font>\r\n  </p>\r\n  <p>Note how the C# code in <i>Page_Load </i>sets up the client-side validation. When the client submits the form, the JavaScript function <i>validateForm()</i> executes, alerting the client if the email address is in incorrect format. By doing this, the developer avoids a round-trip to the server to check for valid email address formats.</p>\r\n  <p>A problem arises when developers rely on this kind of check for protecting against application security attacks such as SQL injection, cross-site scripting, command injection, and similar attacks that involve attackers submitting ill-intended input to the application.&nbsp;Attackers can trivially bypass client-side checks such as the one shown above in order to attack the application.</p>\r\n  <p>To protect against client-side bypass bugs, ASP.NET applications must perform proper validation at the server-side:</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">private bool isValidEmail(string emailStr)<br />{<br />&nbsp; Regex validEmail = new Regex(\"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\");<br />&nbsp; if (!validEmail.IsMatch(emailStr))<br />&nbsp; {<br />&nbsp; &nbsp;return false;<br />&nbsp; }<br />&nbsp; return true;<br />}</font>\r\n  </p>\r\n  <p>\r\n    <font face=\"'Courier New'\">protected void Button1_Click(object sender, EventArgs e)<br />{<br />&nbsp; if (!isValidEmail(txbUserName.Text))<br />&nbsp; {<br />&nbsp; &nbsp; Response.Write(\"Incorrect email address format\");<br />&nbsp; &nbsp; return;<br />&nbsp; }<br />&nbsp; // continue with authentication process...<br />}</font>\r\n  </p>\r\n  <p>Note that the code above invokes the validating email function inside <i>Button1_Click</i>,<i></i>which runs at the server when the client clicks the form button. The request starts by checking if the email is in the correct format and stops the authentication process if it is not.</p>\r\n  <p>To fully protect against client-side bypass bugs, ASP.NET developers must leverage validation routines built into ASP.NET controls, since these routines run both at the client-side and server-side to protect against bypass attacks. According to MSDN:&nbsp;“Validation is performed on the server even if it was already performed on the client. This enables you to determine validation status in server code and provides security against users bypassing client-side validation.”&nbsp;</p>\r\n  <h1>Step 3: Start Testing and Exploring</h1>\r\n  <p>The next step in discovering client-side validation bypass bugs is to execute basic test cases from an attacker’s perspective in order to discover them in your application.</p>\r\n  <h2>\r\n    Test by Disabling JavaScript in Internet Browser\r\n  </h2>\r\n  <p>Follow these steps to test for client-side validation bypass by disabling JavaScript:</p>\r\n  <ol>\r\n    <li>Open a browser and navigate to a web page containing a client-side validation script. </li>\r\n    <li>Open browser Options and navigate to security options. </li>\r\n    <li>Disable JavaScript and then click OK. </li>\r\n    <li>Submit ill-intended data in the web form. </li>\r\n  </ol>\r\n  <p>Expected result: The application performs proper server-side validation and rejects the ill-intended data.</p>\r\n  <h2>\r\n    Test by Intercepting HTTP Request using a proxy\r\n  </h2>\r\n  <p>Follow these steps to bypass client-side validation by modifying web page:</p>\r\n  <ol>\r\n    <li>Open a browser and navigate to a web page containing a client-side validation script. </li>\r\n    <li>Download and execute <em>Burp suite</em> (http://portswigger.net/suite/). </li>\r\n    <li>In the <em>Proxy</em>-&gt;<em>Intercept</em> tab, set proxy to “<em>intercept is on</em>”. </li>\r\n    <li>In the browser, set connection options to use <em>Burp proxy</em>. </li>\r\n    <li>Fill in the web page with allowed values, such as a valid email address. </li>\r\n    <li>Submit the web page. </li>\r\n    <li>In <em>Burp proxy</em>, modify the intercepted request by changing the allowed values to malformed ones. Forward the request.</li>\r\n  </ol>\r\n  <p>Expected result: The application performs proper server-side validation and rejects the ill-intended data.&nbsp;</p>\r\n  <h1>Step 4: Execute Additional Testing</h1>\r\n  <p>The final step in testing for client-side validation bugs is to understand additional scenarios where testing is necessary.</p>\r\n  <h2>\r\n    AJAX Applications are at High Risk\r\n  </h2>\r\n  <p>AJAX (Asynchronous JavaScript and XML) applications rely heavily on client-side scripts. Understand that it is impossible to disable JavaScript when testing for this bug in AJAX applications, as this will stop the browser from making requests; therefore, the use of a proxy is a must here. </p>\r\n  <h2>\r\n    Consider Additional Frameworks\r\n  </h2>\r\n  <p>Web developers might integrate ASP.NET applications with other Internet frameworks such as Flash/Flex. This kind of framework might provide its own client-side forms with data validation options. Make sure to test Flash parameters for this vulnerability, as developers might rely on web form validators such as Flex to validate their input at the client-side only and fail to do so at the server-side.&nbsp;</p>\r\n  <h1>Conclusions</h1>\r\n  <p>Client-side validation bypass bugs allow attackers to submit malformed data that is not expected by the application in order to execute input-related attacks such as XSS and SQL injection.&nbsp;Applications are vulnerable when they rely on client-side scripts only to perform security checks instead of implementing these checks on the server. Testing can be done by disabling JavaScript or using an HTTP proxy, depending on the nature of the application under test (traditional, AJAX, Flash, etc).&nbsp;</p>"
}