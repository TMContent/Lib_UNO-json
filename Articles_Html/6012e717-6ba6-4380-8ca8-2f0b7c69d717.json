{
  "id": "6012e717-6ba6-4380-8ca8-2f0b7c69d717",
  "checksum": "f7346f8c2cc0d375d2900eda4f09eac8c530642e",
  "words": {
    "1": [
      "ul",
      "li",
      "a"
    ],
    "2": [
      "ul",
      "li",
      "a"
    ],
    "10": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "15": [
      "p"
    ],
    "20": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "written": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "servlets": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "jsp": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1",
      "ol",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "protect": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "confidentiality": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "session": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "span",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "span",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "h1",
      "ul",
      "li",
      "a",
      "title"
    ],
    "cookies": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "span",
      "span",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "why": [
      "h1"
    ],
    "are": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "used": [
      "p",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "by": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "an": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span",
      "pre",
      "pre"
    ],
    "identify": [
      "p"
    ],
    "associated": [
      "p",
      "p",
      "p"
    ],
    "with": [
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "li",
      "p",
      "span"
    ],
    "particular": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "pre"
    ],
    "protecting": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "li",
      "p",
      "span"
    ],
    "help": [
      "p"
    ],
    "prevent": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "attacker": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "from": [
      "p",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "hijacking": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "li",
      "p",
      "span"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "span"
    ],
    "legitimate": [
      "p"
    ],
    "when": [
      "h1",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "li",
      "p",
      "span",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "if": [
      "p"
    ],
    "your": [
      "p",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "uses": [
      "p"
    ],
    "maintain": [
      "p"
    ],
    "user's": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "state": [
      "p",
      "p"
    ],
    "then": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "span",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "this": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "li",
      "p",
      "span",
      "li",
      "p"
    ],
    "guideline": [
      "p"
    ],
    "cookie": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "span",
      "ul",
      "li",
      "a"
    ],
    "how": [
      "h1",
      "ul",
      "li",
      "a"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p"
    ],
    "secure": [
      "p",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "em",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "not": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "allow": [
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "users": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "choose": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "their": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "own": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "identifiers": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "strong"
    ],
    "java": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h1",
      "h1",
      "h1",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "automatically": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "assigns": [
      "ol",
      "li",
      "p"
    ],
    "random": [
      "ol",
      "li",
      "p"
    ],
    "ids": [
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "its": [
      "ol",
      "li",
      "p"
    ],
    "sessions": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "span",
      "span",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "minimizes": [
      "ol",
      "li",
      "p"
    ],
    "risk": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "another": [
      "ol",
      "li",
      "p"
    ],
    "same": [
      "ol",
      "li",
      "p"
    ],
    "id": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "in": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "li",
      "p",
      "span",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "invoke": [
      "ol",
      "li",
      "p"
    ],
    "httpservletrequestgetsession:": [
      "ol",
      "li",
      "p"
    ],
    "httpsession": [
      "ol",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "requestgetsession();": [
      "ol",
      "li",
      "pre"
    ],
    "invalidate": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "identifier": [
      "ol",
      "li",
      "strong"
    ],
    "on": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p",
      "li",
      "p",
      "span",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "login": [
      "ol",
      "li",
      "strong"
    ],
    "well": [
      "ol",
      "li",
      "strong"
    ],
    "logout": [
      "ol",
      "li",
      "strong",
      "p",
      "pre",
      "p",
      "pre"
    ],
    "ensure": [
      "ol",
      "li",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "reused": [
      "ol",
      "li",
      "strong"
    ],
    "is": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span",
      "span",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "portion": [
      "ol",
      "li"
    ],
    "approach": [
      "ol",
      "li"
    ],
    "necessary": [
      "ol",
      "li"
    ],
    "httpsessioninvalidate": [
      "ol",
      "ol",
      "li",
      "li",
      "em",
      "p",
      "li",
      "p",
      "li",
      "p",
      "em"
    ],
    "accomplish": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "after": [
      "ol",
      "li"
    ],
    "has": [
      "ol",
      "li"
    ],
    "been": [
      "ol",
      "li"
    ],
    "invalidated": [
      "ol",
      "li",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "call": [
      "ol",
      "li"
    ],
    "below": [
      "ol",
      "li"
    ],
    "will": [
      "ol",
      "li"
    ],
    "generate": [
      "ol",
      "li"
    ],
    "new": [
      "ol",
      "li"
    ],
    "identifierhttpsession": [
      "ol",
      "li"
    ],
    "requestgetsession(true);time-out": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "li",
      "p",
      "span",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "expiration": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "time": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "for": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "li",
      "p",
      "span",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a"
    ],
    "helps": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "minimize": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "threat": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "giving": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "smaller": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "window": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "opportunity": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "depending": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "appropriate": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "timeout": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "be": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "li",
      "p",
      "span",
      "p"
    ],
    "anywhere": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "minutes": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span",
      "p"
    ],
    "setting": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "should": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span",
      "p",
      "pre"
    ],
    "expire": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "done": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "through": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "httpsessionsetmaxinactiveinterval": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span",
      "em"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span",
      "p",
      "p",
      "p",
      "p",
      "h1"
    ],
    "via": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "session-timeout": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span",
      "em"
    ],
    "configuration": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "webxml": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "li",
      "p",
      "span"
    ],
    "fileallow": [
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "terminate": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "allowing": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "reduces": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "hijacked": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "thisensure": [
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "sent": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "span"
    ],
    "over": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "span",
      "span"
    ],
    "encrypted": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "channels": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "span"
    ],
    "mark": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "ssl": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "span",
      "span",
      "span"
    ],
    "cookiesetsecure": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "em"
    ],
    "require": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "p"
    ],
    "sending": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "span",
      "span"
    ],
    "out": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "given": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "it": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "ul",
      "li"
    ],
    "recommended": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "avoid": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "unencrypted": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "made": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "ul",
      "li",
      "a"
    ],
    "much": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "easier": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "servletrequestissecure": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "em"
    ],
    "verify": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "whether": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "there": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "cookie-secure": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "em"
    ],
    "attribute": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "that": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span",
      "p",
      "p"
    ],
    "sessiond": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "span"
    ],
    "file": [
      "ol",
      "li",
      "p",
      "li",
      "p",
      "span",
      "li",
      "p",
      "span"
    ],
    "httpservletrequestgetsession": [
      "em"
    ],
    "requestgetsession(true);": [
      "pre"
    ],
    "time-out": [
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "note": [
      "p",
      "strong"
    ],
    "pci": [
      "p"
    ],
    "dss": [
      "p"
    ],
    "requirements": [
      "p"
    ],
    "idle": [
      "p"
    ],
    "locked": [
      "p"
    ],
    "password": [
      "p"
    ],
    "unlock": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1"
    ],
    "shows": [
      "p",
      "p"
    ],
    "function": [
      "p",
      "p"
    ],
    "loginmodule": [
      "p",
      "em",
      "p",
      "em"
    ],
    "relying": [
      "p",
      "p"
    ],
    "jaas": [
      "p",
      "p"
    ],
    "authentication": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "removes": [
      "p",
      "p"
    ],
    "all": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "tokens": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "current": [
      "p",
      "p"
    ],
    "but": [
      "p"
    ],
    "fails": [
      "p"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "boolean": [
      "pre",
      "pre"
    ],
    "logout)": [
      "pre",
      "pre"
    ],
    "throws": [
      "pre",
      "pre"
    ],
    "loginexception{": [
      "pre",
      "pre"
    ],
    "subjectgetprincipals().remove(usertoken);": [
      "pre",
      "pre"
    ],
    "clearcredentials);": [
      "pre",
      "pre"
    ],
    "usertoken": [
      "pre",
      "pre"
    ],
    "null": [
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "have": [
      "pre"
    ],
    "here": [
      "pre"
    ],
    "log": [
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "event": [
      "pre",
      "pre"
    ],
    "consult": [
      "pre",
      "pre"
    ],
    "logging": [
      "pre",
      "pre",
      "pre"
    ],
    "section": [
      "pre",
      "pre"
    ],
    "more": [
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "details": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "true}": [
      "pre",
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "invalidates": [
      "p",
      "pre"
    ],
    "commongetcurrentsession();": [
      "pre"
    ],
    "sessioninvalidate();": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "information": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "http": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "see": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "documentation": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "interface": [
      "ul",
      "li",
      "a"
    ],
    "sdk": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "class": [
      "ul",
      "li",
      "a"
    ],
    "learn": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "about": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "parameter": [
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "manipulation": [
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "ways": [
      "ul",
      "li"
    ],
    "prediction": [
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "attacks": [
      "ul",
      "li"
    ],
    "credential": [
      "ul",
      "li",
      "a"
    ],
    "management": [
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "h1"
    ],
    "guidelines": [
      "h1"
    ],
    "offered": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "framework": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "domain": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "path": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "values": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "httponly": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "flags": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "sensitive": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "change": [
      "ul",
      "li",
      "a"
    ],
    "during": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "make": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "inactive": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "include": [
      "ul",
      "li",
      "a"
    ],
    "unique": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "requests": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "security": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "decisions": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "based": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "client-accessible": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "parameters": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "protected": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "strict": [
      "ul",
      "li",
      "a"
    ],
    "changed": [
      "ul",
      "li",
      "a"
    ],
    "included": [
      "ul",
      "li",
      "a"
    ],
    "examples": [
      "h1"
    ],
    "add": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "esapi": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "server": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "faces": [
      "ul",
      "li",
      "a"
    ],
    "jsf)": [
      "ul",
      "li",
      "a"
    ],
    "plain": [
      "ul",
      "li",
      "a"
    ],
    "pages": [
      "ul",
      "li",
      "a"
    ],
    "jsp)": [
      "ul",
      "li",
      "a"
    ],
    "cross-site": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "request": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "forgery": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "csrf)": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "prevention": [
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "springmvc": [
      "ul",
      "li",
      "a"
    ],
    "struts": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "httputilities": [
      "ul",
      "li",
      "a"
    ],
    "testing": [
      "h1"
    ],
    "test": [
      "ul",
      "li",
      "a"
    ],
    "bugs": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "Additional Resources",
      "Java Session Management Guidelines",
      "Java Session Management Checklists",
      "Java Session Management Code Examples",
      "Java Session Management Testing"
    ],
    "ul": [
      "Applications written using Servlets or JSP.",
      "For more information on HTTP sessions, see: Documentation for Interface HttpSession in Java SDK. For more information on HTTP cookies, see: Documentation for Class Cookie in Java SDK. To learn more about parameter manipulation and ways to prevent it, see: Parameter Manipulation. To learn more about session prediction attacks, see: Credential and Session Prediction.",
      "Use Session Management Offered by the Framework\r\n      \r\n        Protect Session IDs\r\n        \r\n          Protect Session Cookies\r\n          \r\n            Set the Domain and Path Values of Session Cookies\r\n            \r\n              Set the Secure and HTTPOnly Flags on All Sensitive Cookies\r\n              \r\n                Change Session IDs During Authentication\r\n                \r\n                  Invalidate Sessions when Users Log Out\r\n                  \r\n                    Make Inactive Sessions Time-out\r\n                    \r\n                      Include Unique Tokens in HTTP Requests\r\n                      \r\n                        Do Not Make Security Decisions Based on Client-Accessible Parameters",
      "Session Management Offered by the Framework Is Used\r\n      \r\n        Session IDs Are Protected\r\n        \r\n          Session Cookies are Protected\r\n          \r\n            The Domain and Path Values of Session Cookies Are Strict\r\n            \r\n              The Secure and HTTPOnly Flags Are Set on All Sensitive Cookies\r\n              \r\n                Session IDs Are Changed During Authentication\r\n                \r\n                  Sessions Are Invalidated When Users Log Out\r\n                  \r\n                    Inactive Sessions Time-out\r\n                    \r\n                      Unique Tokens Are Included in HTTP Requests\r\n                      \r\n                        Security Decisions are Not Made Based on Client-Accessible Parameters",
      "Add Unique Tokens to HTTP Requests Using ESAPI\r\n    \r\n    \r\n      Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)\r\n    \r\n    \r\n      Add Unique Tokens to HTTP Requests Using Plain Java Server Pages (JSP)\r\n    \r\n    \r\n      Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC\r\n    \r\n    \r\n      Cross-Site Request Forgery (CSRF) Prevention Using Struts 1\r\n    \r\n    \r\n      Cross-Site Request Forgery (CSRF) Prevention Using Struts 2\r\n    \r\n    \r\n      Use ESAPI HTTPUtilities",
      "How to Test for Session Prediction Bugs in Java"
    ],
    "li": [
      "Applications written using Servlets or JSP.",
      "Do not allow users to choose their own session identifiers. Java automatically assigns random IDs to its sessions which minimizes the risk of an attacker hijacking another user's session by using the same session ID. To use sessions in Java, invoke HttpServletRequest.getSession:\r\n      HttpSession session = request.getSession();",
      "Invalidate the session identifier on login (as well as logout) to ensure session identifiers are not reused. This is a portion of the approach necessary to prevent session hijacking. Use HttpSession.invalidate to accomplish this. After the session has been invalidated, the call below will generate a new session identifier.HttpSession session = request.getSession(true);Time-out sessions. Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through HttpSession.setMaxInactiveInterval in code, or via the session-timeout configuration in the web.xml file.Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use HttpSession.invalidate to accomplish this.Ensure cookies are sent over encrypted channels. Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file.",
      "Time-out sessions. Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through HttpSession.setMaxInactiveInterval in code, or via the session-timeout configuration in the web.xml file.Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use HttpSession.invalidate to accomplish this.Ensure cookies are sent over encrypted channels. Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file.",
      "Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use HttpSession.invalidate to accomplish this.",
      "Ensure cookies are sent over encrypted channels. Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file.",
      "For more information on HTTP sessions, see: Documentation for Interface HttpSession in Java SDK.",
      "For more information on HTTP cookies, see: Documentation for Class Cookie in Java SDK.",
      "To learn more about parameter manipulation and ways to prevent it, see: Parameter Manipulation.",
      "To learn more about session prediction attacks, see: Credential and Session Prediction.",
      "Use Session Management Offered by the Framework",
      "Protect Session IDs",
      "Protect Session Cookies",
      "Set the Domain and Path Values of Session Cookies",
      "Set the Secure and HTTPOnly Flags on All Sensitive Cookies",
      "Change Session IDs During Authentication",
      "Invalidate Sessions when Users Log Out",
      "Make Inactive Sessions Time-out",
      "Include Unique Tokens in HTTP Requests",
      "Do Not Make Security Decisions Based on Client-Accessible Parameters",
      "Session Management Offered by the Framework Is Used",
      "Session IDs Are Protected",
      "Session Cookies are Protected",
      "The Domain and Path Values of Session Cookies Are Strict",
      "The Secure and HTTPOnly Flags Are Set on All Sensitive Cookies",
      "Session IDs Are Changed During Authentication",
      "Sessions Are Invalidated When Users Log Out",
      "Inactive Sessions Time-out",
      "Unique Tokens Are Included in HTTP Requests",
      "Security Decisions are Not Made Based on Client-Accessible Parameters",
      "Add Unique Tokens to HTTP Requests Using ESAPI",
      "Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)",
      "Add Unique Tokens to HTTP Requests Using Plain Java Server Pages (JSP)",
      "Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC",
      "Cross-Site Request Forgery (CSRF) Prevention Using Struts 1",
      "Cross-Site Request Forgery (CSRF) Prevention Using Struts 2",
      "Use ESAPI HTTPUtilities",
      "How to Test for Session Prediction Bugs in Java"
    ],
    "p": [
      "Protect the confidentiality of session cookies.",
      "Session cookies are used by an application to identify the session associated with a particular user. Protecting session cookies can help prevent an attacker from hijacking the session and using the application as a legitimate user.",
      "If your application uses cookies to maintain a user's session state, then use this guideline to protect the cookie.",
      "Use the following steps to secure session cookies:",
      "Do not allow users to choose their own session identifiers. Java automatically assigns random IDs to its sessions which minimizes the risk of an attacker hijacking another user's session by using the same session ID. To use sessions in Java, invoke HttpServletRequest.getSession:",
      "HttpSession session = request.getSession(true);Time-out sessions. Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through HttpSession.setMaxInactiveInterval in code, or via the session-timeout configuration in the web.xml file.Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use HttpSession.invalidate to accomplish this.Ensure cookies are sent over encrypted channels. Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file.",
      "Time-out sessions. Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through HttpSession.setMaxInactiveInterval in code, or via the session-timeout configuration in the web.xml file.Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use HttpSession.invalidate to accomplish this.Ensure cookies are sent over encrypted channels. Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file.",
      "",
      "Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use HttpSession.invalidate to accomplish this.",
      "Ensure cookies are sent over encrypted channels. Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file.",
      "",
      "Note: PCI DSS requirements state that sessions that are idle for 15 minutes should be locked automatically and require the user's password to unlock.",
      "The following code shows the logout function of the LoginModule used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session but fails to invalidate the session.",
      "The following code shows the logout function of the LoginModule used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session and invalidates the session."
    ],
    "ol": [
      "Do not allow users to choose their own session identifiers. Java automatically assigns random IDs to its sessions which minimizes the risk of an attacker hijacking another user's session by using the same session ID. To use sessions in Java, invoke HttpServletRequest.getSession:\r\n      HttpSession session = request.getSession();\r\n      \r\n        Invalidate the session identifier on login (as well as logout) to ensure session identifiers are not reused. This is a portion of the approach necessary to prevent session hijacking. Use HttpSession.invalidate to accomplish this. After the session has been invalidated, the call below will generate a new session identifier.HttpSession session = request.getSession(true);Time-out sessions. Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through HttpSession.setMaxInactiveInterval in code, or via the session-timeout configuration in the web.xml file.Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use HttpSession.invalidate to accomplish this.Ensure cookies are sent over encrypted channels. Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file."
    ],
    "strong": [
      "Do not allow users to choose their own session identifiers.",
      "Invalidate the session identifier on login (as well as logout) to ensure session identifiers are not reused.",
      "Time-out sessions.",
      "Allow users to terminate their sessions.",
      "Ensure cookies are sent over encrypted channels.",
      "Note:"
    ],
    "em": [
      "HttpServletRequest.getSession",
      "HttpSession.invalidate",
      "HttpSession.setMaxInactiveInterval",
      "session-timeout",
      "HttpSession.invalidate",
      "Secure",
      "Cookie.setSecure",
      "ServletRequest.isSecure",
      "cookie-secure",
      "LoginModule",
      "LoginModule"
    ],
    "pre": [
      "HttpSession session = request.getSession();",
      "HttpSession session = request.getSession(true);",
      "public boolean logout() throws LoginException{      subject.getPrincipals().remove(userToken);      clearCredentials();      userToken = null;      // The application should have invalidated the session here.      // Log the logout event. Consult the Logging section for more details      return true;}",
      "public boolean logout() throws LoginException{      subject.getPrincipals().remove(userToken);      clearCredentials();      userToken = null;      // The application invalidates the session when      // the user is logging out      HttpSession session = common.getCurrentSession();      session.invalidate();      // Log the logout event. Consult the Logging section for more details      return true;}"
    ],
    "span": [
      "Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through HttpSession.setMaxInactiveInterval in code, or via the session-timeout configuration in the web.xml file.",
      "Mark cookies sent over SSL as Secure. Use Cookie.setSecure to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use ServletRequest.isSecure to verify whether SSL is being used. There is a cookie-secure attribute that can be set for the sessiond id cookie in the web.xml file."
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "Interface HttpSession",
      "Class Cookie",
      "Parameter Manipulation",
      "Credential and Session Prediction",
      "Use Session Management Offered by the Framework",
      "Protect Session IDs",
      "Protect Session Cookies",
      "Set the Domain and Path Values of Session Cookies",
      "Set the Secure and HTTPOnly Flags on All Sensitive Cookies",
      "Change Session IDs During Authentication",
      "Invalidate Sessions when Users Log Out",
      "Make Inactive Sessions Time-out",
      "Include Unique Tokens in HTTP Requests",
      "Do Not Make Security Decisions Based on Client-Accessible Parameters",
      "Session Management Offered by the Framework Is Used",
      "Session IDs Are Protected",
      "Session Cookies are Protected",
      "The Domain and Path Values of Session Cookies Are Strict",
      "The Secure and HTTPOnly Flags Are Set on All Sensitive Cookies",
      "Session IDs Are Changed During Authentication",
      "Sessions Are Invalidated When Users Log Out",
      "Inactive Sessions Time-out",
      "Unique Tokens Are Included in HTTP Requests",
      "Security Decisions are Not Made Based on Client-Accessible Parameters",
      "Add Unique Tokens to HTTP Requests Using ESAPI",
      "Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)",
      "Add Unique Tokens to HTTP Requests Using Plain Java Server Pages (JSP)",
      "Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC",
      "Cross-Site Request Forgery (CSRF) Prevention Using Struts 1",
      "Cross-Site Request Forgery (CSRF) Prevention Using Struts 2",
      "Use ESAPI HTTPUtilities",
      "How to Test for Session Prediction Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "http://download.oracle.com/javaee/1.3/api/javax/servlet/http/HttpSession.html",
      "text": "Interface HttpSession"
    },
    {
      "href": "http://download.oracle.com/javaee/1.3/api/javax/servlet/http/Cookie.html",
      "text": "Class Cookie"
    },
    {
      "href": "http://www.cgisecurity.com/owasp/html/ch11s04.html",
      "text": "Parameter Manipulation"
    },
    {
      "href": "http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml",
      "text": "Credential and Session Prediction"
    },
    {
      "href": "/article/42276b64-f51d-4b89-8c33-0ffd9b098890",
      "text": "Use Session Management Offered by the Framework"
    },
    {
      "href": "/article/2aa12bed-347a-43c6-a419-48ffd5bc3f5a",
      "text": "Protect Session IDs"
    },
    {
      "href": "/article/6012e717-6ba6-4380-8ca8-2f0b7c69d717",
      "text": "Protect Session Cookies"
    },
    {
      "href": "/article/7a517ad5-8640-4bc7-9e84-ccc313a71901",
      "text": "Set the Domain and Path Values of Session Cookies"
    },
    {
      "href": "/article/9b7e6e63-c37c-403b-a2f5-60b1e1abbb0b",
      "text": "Set the Secure and HTTPOnly Flags on All Sensitive Cookies"
    },
    {
      "href": "/article/6c470029-5c62-4394-99a9-8990bc48b0a8",
      "text": "Change Session IDs During Authentication"
    },
    {
      "href": "/article/a223c2d8-ab42-47fb-81a2-86ad677a5632",
      "text": "Invalidate Sessions when Users Log Out"
    },
    {
      "href": "/article/acfe1a16-3f00-4383-ada4-bebafc98a836",
      "text": "Make Inactive Sessions Time-out"
    },
    {
      "href": "/article/61b8ebc8-3ba5-4e75-aea8-94d6d3b3177e",
      "text": "Include Unique Tokens in HTTP Requests"
    },
    {
      "href": "/article/9df0b518-f832-4a7c-9857-0517638c47db",
      "text": "Do Not Make Security Decisions Based on Client-Accessible Parameters"
    },
    {
      "href": "/article/3f2660b3-a935-4b4e-85ff-27ae28683f5b",
      "text": "Session Management Offered by the Framework Is Used"
    },
    {
      "href": "/article/1de62774-3392-4da7-9bae-065fb15b4a2b",
      "text": "Session IDs Are Protected"
    },
    {
      "href": "/article/59132a30-2bae-45e9-9d85-8de26441be29",
      "text": "Session Cookies are Protected"
    },
    {
      "href": "/article/500d61f2-c9fa-4b1e-91f5-0a589c0fe00b",
      "text": "The Domain and Path Values of Session Cookies Are Strict"
    },
    {
      "href": "/article/d8922a46-a943-4ae0-b8af-b88eb01d6997",
      "text": "The Secure and HTTPOnly Flags Are Set on All Sensitive Cookies"
    },
    {
      "href": "/article/58df5418-8c03-4121-83e0-bc68247c5d7b",
      "text": "Session IDs Are Changed During Authentication"
    },
    {
      "href": "/article/0e40c446-c740-42a9-a4d2-72c9d05e55ac",
      "text": "Sessions Are Invalidated When Users Log Out"
    },
    {
      "href": "/article/c486eeb2-f64f-480b-9823-48bd7d21047d",
      "text": "Inactive Sessions Time-out"
    },
    {
      "href": "/article/0463ae25-dc35-45e7-8b24-9b1f8ddb6af0",
      "text": "Unique Tokens Are Included in HTTP Requests"
    },
    {
      "href": "/article/4436e342-64d9-4b1b-ae9b-3e00696053fb",
      "text": "Security Decisions are Not Made Based on Client-Accessible Parameters"
    },
    {
      "href": "/article/7d647e95-e47f-42e3-bb84-fd0dd727245c",
      "text": "Add Unique Tokens to HTTP Requests Using ESAPI"
    },
    {
      "href": "/article/25e3943b-a651-42c5-9e19-76077de05e90",
      "text": "Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)"
    },
    {
      "href": "/article/986c7161-0a76-430a-8d0e-80d4615ab5db",
      "text": "Add Unique Tokens to HTTP Requests Using Plain Java Server Pages (JSP)"
    },
    {
      "href": "/article/bf931bed-21c0-4b89-9cb2-9274d8c796a6",
      "text": "Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC"
    },
    {
      "href": "/article/63deed1a-6df4-4e04-9f61-898f190e1fe1",
      "text": "Cross-Site Request Forgery (CSRF) Prevention Using Struts 1"
    },
    {
      "href": "/article/a9c2c121-614c-4a3f-9b7c-f2cf57d6aa0b",
      "text": "Cross-Site Request Forgery (CSRF) Prevention Using Struts 2"
    },
    {
      "href": "/article/4d7ee521-8680-481e-a40b-3afb04c2616d",
      "text": "Use ESAPI HTTPUtilities"
    },
    {
      "href": "/article/40771780-be59-4d4c-b283-5ec3cc286357",
      "text": "How to Test for Session Prediction Bugs in Java"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Applications written using Servlets or JSP.</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Protect the confidentiality of session cookies.</p>\r\n  <h1>Why</h1>\r\n  <p>Session cookies are used by an application to identify the session associated with a particular user. Protecting session cookies can help prevent an attacker from hijacking the session and using the application as a legitimate user.</p>\r\n  <h1>When</h1>\r\n  <p>If your application uses cookies to maintain a user's session state, then use this guideline to protect the cookie.</p>\r\n  <h1>How</h1>\r\n  <p>Use the following steps to secure session cookies:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Do not allow users to choose their own session identifiers. </strong>Java automatically assigns random IDs to its sessions which minimizes the risk of an attacker hijacking another user's session by using the same session ID. To use sessions in Java, invoke <em>HttpServletRequest.getSession</em>:</p>\r\n      <pre>HttpSession session = request.getSession();</pre>\r\n      <li>\r\n        <strong>Invalidate the session identifier on login (as well as logout) to ensure session identifiers are not reused.</strong> This is a portion of the approach necessary to prevent session hijacking. Use <em>HttpSession.invalidate</em> to accomplish this. After the session has been invalidated, the call below will generate a new session identifier.<p /><pre>HttpSession session = request.getSession(true);</pre><li><p /><strong>Time-out sessions. </strong><span>Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through <em>HttpSession.setMaxInactiveInterval</em> in code, or via the <em>session-timeout</em> configuration in the web.xml file.<p /></span><li><p><strong>Allow users to terminate their sessions. </strong>Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use <em>HttpSession.invalidate</em> to accomplish this.</p><li><p /><strong>Ensure cookies are sent over encrypted channels. </strong><span>Mark cookies sent over SSL as <em>Secure</em>. Use <em>Cookie.setSecure</em> to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use <em>ServletRequest.isSecure</em> to verify whether SSL is being used. There is a <em>cookie-secure</em> attribute that can be set for the sessiond id cookie in the web.xml file.<p /></span></li></li></li></li>\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    <strong>Note:</strong> PCI DSS requirements state that sessions that are idle for 15 minutes should be locked automatically and require the user's password to unlock.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code shows the logout function of the <em>LoginModule</em> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session but fails to invalidate the session. </p>\r\n  <pre>public boolean logout() throws LoginException&#123;<br />      subject.getPrincipals().remove(userToken);<br /><br />      clearCredentials();<br />      userToken = null;<br /><br />      // The application should have invalidated the session here.<br /><br />      // Log the logout event. Consult the Logging section for more details<br /><br />      return true;<br />&#125;</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code shows the logout function of the <em>LoginModule</em> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session and invalidates the session.</p>\r\n  <pre>public boolean logout() throws LoginException&#123;<br />      subject.getPrincipals().remove(userToken);<br /><br />      clearCredentials();<br />      userToken = null;<br /><br />      // The application invalidates the session when<br />      // the user is logging out<br />      HttpSession session = common.getCurrentSession();<br />      session.invalidate();<br /><br />      // Log the logout event. Consult the Logging section for more details<br /><br />      return true;<br />&#125;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on HTTP sessions, see: Documentation for <a href=\"http://download.oracle.com/javaee/1.3/api/javax/servlet/http/HttpSession.html\">Interface HttpSession</a> in Java SDK. <li>For more information on HTTP cookies, see: Documentation for <a href=\"http://download.oracle.com/javaee/1.3/api/javax/servlet/http/Cookie.html\">Class Cookie</a> in Java SDK. <li>To learn more about parameter manipulation and ways to prevent it, see: <a href=\"http://www.cgisecurity.com/owasp/html/ch11s04.html\">Parameter Manipulation</a>. <li>To learn more about session prediction attacks, see: <a href=\"http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml\">Credential and Session Prediction</a>.</li></li></li></li>\r\n  </ul>\r\n  <h1>Java Session Management Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/42276b64-f51d-4b89-8c33-0ffd9b098890\">Use Session Management Offered by the Framework</a>\r\n      <li>\r\n        <a href=\"/article/2aa12bed-347a-43c6-a419-48ffd5bc3f5a\">Protect Session IDs</a>\r\n        <li>\r\n          <a href=\"/article/6012e717-6ba6-4380-8ca8-2f0b7c69d717\">Protect Session Cookies</a>\r\n          <li>\r\n            <a href=\"/article/7a517ad5-8640-4bc7-9e84-ccc313a71901\">Set the Domain and Path Values of Session Cookies</a>\r\n            <li>\r\n              <a href=\"/article/9b7e6e63-c37c-403b-a2f5-60b1e1abbb0b\">Set the Secure and HTTPOnly Flags on All Sensitive Cookies</a>\r\n              <li>\r\n                <a href=\"/article/6c470029-5c62-4394-99a9-8990bc48b0a8\">Change Session IDs During Authentication</a>\r\n                <li>\r\n                  <a href=\"/article/a223c2d8-ab42-47fb-81a2-86ad677a5632\">Invalidate Sessions when Users Log Out</a>\r\n                  <li>\r\n                    <a href=\"/article/acfe1a16-3f00-4383-ada4-bebafc98a836\">Make Inactive Sessions Time-out</a>\r\n                    <li>\r\n                      <a href=\"/article/61b8ebc8-3ba5-4e75-aea8-94d6d3b3177e\">Include Unique Tokens in HTTP Requests</a>\r\n                      <li>\r\n                        <a href=\"/article/9df0b518-f832-4a7c-9857-0517638c47db\">Do Not Make Security Decisions Based on Client-Accessible Parameters</a>\r\n                      </li>\r\n                    </li>\r\n                  </li>\r\n                </li>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Session Management Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/3f2660b3-a935-4b4e-85ff-27ae28683f5b\">Session Management Offered by the Framework Is Used</a>\r\n      <li>\r\n        <a href=\"/article/1de62774-3392-4da7-9bae-065fb15b4a2b\">Session IDs Are Protected</a>\r\n        <li>\r\n          <a href=\"/article/59132a30-2bae-45e9-9d85-8de26441be29\">Session Cookies are Protected</a>\r\n          <li>\r\n            <a href=\"/article/500d61f2-c9fa-4b1e-91f5-0a589c0fe00b\">The Domain and Path Values of Session Cookies Are Strict</a>\r\n            <li>\r\n              <a href=\"/article/d8922a46-a943-4ae0-b8af-b88eb01d6997\">The Secure and HTTPOnly Flags Are Set on All Sensitive Cookies</a>\r\n              <li>\r\n                <a href=\"/article/58df5418-8c03-4121-83e0-bc68247c5d7b\">Session IDs Are Changed During Authentication</a>\r\n                <li>\r\n                  <a href=\"/article/0e40c446-c740-42a9-a4d2-72c9d05e55ac\">Sessions Are Invalidated When Users Log Out</a>\r\n                  <li>\r\n                    <a href=\"/article/c486eeb2-f64f-480b-9823-48bd7d21047d\">Inactive Sessions Time-out</a>\r\n                    <li>\r\n                      <a href=\"/article/0463ae25-dc35-45e7-8b24-9b1f8ddb6af0\">Unique Tokens Are Included in HTTP Requests</a>\r\n                      <li>\r\n                        <a href=\"/article/4436e342-64d9-4b1b-ae9b-3e00696053fb\">Security Decisions are Not Made Based on Client-Accessible Parameters</a>\r\n                      </li>\r\n                    </li>\r\n                  </li>\r\n                </li>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Session Management Code Examples</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/7d647e95-e47f-42e3-bb84-fd0dd727245c\">Add Unique Tokens to HTTP Requests Using ESAPI</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/25e3943b-a651-42c5-9e19-76077de05e90\">Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/986c7161-0a76-430a-8d0e-80d4615ab5db\">Add Unique Tokens to HTTP Requests Using Plain Java Server Pages (JSP)</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/bf931bed-21c0-4b89-9cb2-9274d8c796a6\">Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/63deed1a-6df4-4e04-9f61-898f190e1fe1\">Cross-Site Request Forgery (CSRF) Prevention Using Struts 1</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/a9c2c121-614c-4a3f-9b7c-f2cf57d6aa0b\">Cross-Site Request Forgery (CSRF) Prevention Using Struts 2</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/4d7ee521-8680-481e-a40b-3afb04c2616d\">Use ESAPI HTTPUtilities</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Session Management Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/40771780-be59-4d4c-b283-5ec3cc286357\">How to Test for Session Prediction Bugs in Java</a>\r\n    </li>\r\n  </ul>"
}