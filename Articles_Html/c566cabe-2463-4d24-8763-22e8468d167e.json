{
  "id": "c566cabe-2463-4d24-8763-22e8468d167e",
  "checksum": "8d48b24c28294fbd007eedd35b3c0ddb94cb3ace",
  "words": {
    "6": [
      "ol",
      "li",
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p"
    ],
    "applications": [
      "ul",
      "li"
    ],
    "written": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "servlets": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li"
    ],
    "jsp": [
      "ul",
      "li"
    ],
    "what": [
      "h1",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "do": [
      "h1"
    ],
    "validate": [
      "p",
      "p",
      "p",
      "title"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "title"
    ],
    "processing": [
      "p",
      "p",
      "title"
    ],
    "them": [
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "failure": [
      "p"
    ],
    "could": [
      "p"
    ],
    "cause": [
      "p"
    ],
    "improper": [
      "p"
    ],
    "authentication": [
      "p"
    ],
    "this": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "allow": [
      "p"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p"
    ],
    "authenticate": [
      "p"
    ],
    "as": [
      "p"
    ],
    "another": [
      "p"
    ],
    "without": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "need": [
      "p"
    ],
    "steal": [
      "p"
    ],
    "when": [
      "h1",
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "your": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "accepts": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "processes": [
      "p"
    ],
    "then": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "following": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "validating": [
      "p"
    ],
    "establish": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "username": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "requirements": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "determine": [
      "ol",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "acceptable": [
      "ol",
      "li",
      "p"
    ],
    "character": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "li",
      "p"
    ],
    "length": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "allowed": [
      "ol",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "p"
    ],
    "a": [
      "ol",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "instance": [
      "ol",
      "li",
      "p"
    ],
    "require": [
      "ol",
      "li",
      "p"
    ],
    "usernames": [
      "ol",
      "li",
      "p",
      "title"
    ],
    "at": [
      "ol",
      "li",
      "p"
    ],
    "least six": [
      "ol",
      "li",
      "p"
    ],
    "characters": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "long": [
      "ol",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "contain": [
      "ol",
      "li",
      "p"
    ],
    "alpha-numeric": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "whitelist": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "validation": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "whitelisting": [
      "ol",
      "li",
      "p"
    ],
    "involves": [
      "ol",
      "li",
      "p"
    ],
    "establishment": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "li",
      "p"
    ],
    "good": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "once": [
      "ol",
      "li",
      "p"
    ],
    "defined": [
      "ol",
      "li",
      "p"
    ],
    "compare": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "li",
      "p"
    ],
    "against": [
      "ol",
      "li",
      "p"
    ],
    "established": [
      "ol",
      "li",
      "p"
    ],
    "does": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "li",
      "p"
    ],
    "resemble": [
      "ol",
      "li",
      "p"
    ],
    "discard": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p"
    ],
    "technique": [
      "ol",
      "li",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "p"
    ],
    "regular": [
      "ol",
      "li",
      "p"
    ],
    "expressions": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "p"
    ],
    "public": [
      "ol",
      "li",
      "pre"
    ],
    "boolean": [
      "ol",
      "li",
      "pre"
    ],
    "validateusernamestring": [
      "ol",
      "li",
      "pre"
    ],
    "input{": [
      "ol",
      "li",
      "pre"
    ],
    "string": [
      "ol",
      "li",
      "pre"
    ],
    "goodpattern": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"\\\\w|\\\\d)+\";": [
      "ol",
      "li",
      "pre"
    ],
    "int": [
      "ol",
      "li",
      "pre"
    ],
    "goodlength": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "ifinput.length()": [
      "ol",
      "li",
      "pre"
    ],
    "{": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "return": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "false": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "}": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "pattern": [
      "ol",
      "li",
      "pre"
    ],
    "p": [
      "ol",
      "li",
      "pre"
    ],
    "patterncompile(goodpattern);": [
      "ol",
      "li",
      "pre"
    ],
    "matcher": [
      "ol",
      "li",
      "pre"
    ],
    "m": [
      "ol",
      "li",
      "pre"
    ],
    "pmatcher(input);": [
      "ol",
      "li",
      "pre"
    ],
    "if!m.matches())": [
      "ol",
      "li",
      "pre"
    ],
    "true}": [
      "ol",
      "li",
      "pre"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "ul": [
      "Applications written using Servlets or JSP."
    ],
    "li": [
      "Applications written using Servlets or JSP.",
      "Establish username requirements. Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least six characters long and must contain alpha-numeric characters only.",
      "Use whitelist validation. Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:\n      public boolean validateUsername(String input){      String goodPattern = \"(\\\\w|\\\\d)+\";      int goodLength = 6;      if(input.length() < goodLength)      {            return false;      }      Pattern p = Pattern.compile(goodPattern);      Matcher m = p.matcher(input);      if(!m.matches())      {            return false;      }      return true;}"
    ],
    "p": [
      "Validate user credentials before processing them.",
      "Failure to validate user credentials could cause improper authentication. This can allow an attacker to authenticate as another user without the need to steal credentials.",
      "If your application accepts and processes user credentials, then validate the credentials before processing them.",
      "Use the following steps when validating user credentials:",
      "Establish username requirements. Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least six characters long and must contain alpha-numeric characters only.",
      "Use whitelist validation. Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:"
    ],
    "ol": [
      "Establish username requirements. Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least six characters long and must contain alpha-numeric characters only.\n    \n    \n      \n        Use whitelist validation. Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:\n      public boolean validateUsername(String input){      String goodPattern = \"(\\\\w|\\\\d)+\";      int goodLength = 6;      if(input.length() < goodLength)      {            return false;      }      Pattern p = Pattern.compile(goodPattern);      Matcher m = p.matcher(input);      if(!m.matches())      {            return false;      }      return true;}"
    ],
    "strong": [
      "Establish username requirements.",
      "Use whitelist validation."
    ],
    "pre": [
      "public boolean validateUsername(String input){      String goodPattern = \"(\\\\w|\\\\d)+\";      int goodLength = 6;      if(input.length() < goodLength)      {            return false;      }      Pattern p = Pattern.compile(goodPattern);      Matcher m = p.matcher(input);      if(!m.matches())      {            return false;      }      return true;}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>Applications written using Servlets or JSP.</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Validate user credentials before processing them.</p>\n  <h1>Why</h1>\n  <p>Failure to validate user credentials could cause improper authentication. This can allow an attacker to authenticate as another user without the need to steal credentials.</p>\n  <h1>When</h1>\n  <p>If your application accepts and processes user credentials, then validate the credentials before processing them.</p>\n  <h1>How</h1>\n  <p>Use the following steps when validating user credentials:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Establish username requirements. </strong>Determine what is the acceptable character set and length that should be allowed within a username. For instance, require that usernames should be at least&nbsp;six characters long and must contain alpha-numeric characters only.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Use whitelist validation. </strong>Whitelisting involves the establishment of what is good input for your application. Once good input is defined, compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:</p>\n      <pre>public boolean validateUsername(String input)<br />{<br />      String goodPattern = \"(\\\\w|\\\\d)+\";<br />      int goodLength = 6;<br />      if(input.length() &lt; goodLength)<br />      {<br />            return false;<br />      }<br />      Pattern p = Pattern.compile(goodPattern);<br />      Matcher m = p.matcher(input);<br /><br />      if(!m.matches())<br />      {<br />            return false;<br />      }<br /><br /><br />      return true;<br />}</pre>\n    </li>\n  </ol>\n  <br />"
}