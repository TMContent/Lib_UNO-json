{
  "id": "2f6f114a-7be0-4f92-8a45-23a6029dbcf1",
  "checksum": "a83866eaa9943477d573a1407cefd528f213d57f",
  "words": {
    "0": [
      "ol",
      "li",
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "validate": [
      "p"
    ],
    "data": [
      "p",
      "p"
    ],
    "values": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "before": [
      "p",
      "p"
    ],
    "assigning": [
      "p"
    ],
    "them": [
      "p"
    ],
    "unsigned": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "integer-type": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "variables": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "when": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "integer": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "operation": [
      "p",
      "p"
    ],
    "exceeds": [
      "p"
    ],
    "maximum": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "minimum": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "allowed": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "type": [
      "p"
    ],
    "stored": [
      "p"
    ],
    "value": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "will": [
      "p"
    ],
    "be": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "different": [
      "p"
    ],
    "than": [
      "p"
    ],
    "expected": [
      "p"
    ],
    "if": [
      "p"
    ],
    "this": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "used": [
      "p"
    ],
    "contol": [
      "p"
    ],
    "program": [
      "p"
    ],
    "flow": [
      "p"
    ],
    "array": [
      "p"
    ],
    "indexing": [
      "p"
    ],
    "memory": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "code": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "execution": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "may": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "actions": [
      "p"
    ],
    "assure": [
      "p"
    ],
    "validated": [
      "p"
    ],
    "being": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "assigned": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "li",
      "p"
    ],
    "assigns": [
      "ol",
      "li",
      "p"
    ],
    "existing": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p"
    ],
    "a": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "good": [
      "ol",
      "li",
      "p"
    ],
    "idea": [
      "ol",
      "li",
      "p"
    ],
    "prioritize": [
      "ol",
      "li",
      "p"
    ],
    "components": [
      "ol",
      "li",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "most": [
      "ol",
      "li",
      "p"
    ],
    "critical": [
      "ol",
      "li",
      "p"
    ],
    "elements": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "checked": [
      "ol",
      "li",
      "p"
    ],
    "first": [
      "ol",
      "li",
      "p"
    ],
    "add": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "range": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "checks": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "use": [
      "ol",
      "li",
      "p"
    ],
    "platform-defined": [
      "ol",
      "li",
      "p"
    ],
    "constants": [
      "ol",
      "li",
      "p"
    ],
    "check": [
      "ol",
      "li",
      "p"
    ],
    "valid": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "defined": [
      "ol",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "li",
      "p"
    ],
    "limitsh.": [
      "ol",
      "li",
      "p"
    ],
    "integers": [
      "ol",
      "li",
      "p",
      "title"
    ],
    "course": [
      "ol",
      "li",
      "p"
    ],
    "list": [
      "ol",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "li",
      "p"
    ],
    "uint_maxulong_maxushrt_maxuchar_max": [
      "ol",
      "li",
      "ul"
    ],
    "uint_max": [
      "li"
    ],
    "ulong_max": [
      "li"
    ],
    "ushrt_max": [
      "li"
    ],
    "uchar_max": [
      "li"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "protect": [
      "ul",
      "li",
      "a"
    ],
    "against": [
      "ul",
      "li",
      "a"
    ],
    "overflows": [
      "ul",
      "li",
      "a"
    ],
    "prevent": [
      "title"
    ],
    "from": [
      "title"
    ],
    "wrapping": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "How",
      "Related Items"
    ],
    "ul": [
      "C++",
      "UINT_MAXULONG_MAXUSHRT_MAXUCHAR_MAX",
      "Protect Against Integer Overflows"
    ],
    "li": [
      "C++",
      "Identify code. Identify all code that assigns values to unsigned integer-type variables. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first.",
      "Add range checks. Use platform-defined constants to check that values being assigned to integer-type variables are valid. Minimum and maximum values for integer-type variables are defined in limits.h. The minimum valid value for unsigned integers is of course 0. The following is a list of common maximum and minimum values for unsigned integer-type variables: \r\n        \r\n          UINT_MAXULONG_MAXUSHRT_MAXUCHAR_MAX",
      "UINT_MAX",
      "ULONG_MAX",
      "USHRT_MAX",
      "UCHAR_MAX",
      "Protect Against Integer Overflows"
    ],
    "p": [
      "Validate data values before assigning them to unsigned integer-type variables.",
      "When the result of an unsigned integer operation exceeds the maximum or the minimum values allowed for that integer type, the stored value of that operation will be different than expected. If this value is used to contol program flow, for array indexing, or memory operations, an arbitrary code execution vulnerability may result.",
      "Perform the following actions to assure that data is validated before being assigned to unsigned integer-type variables:",
      "Identify code. Identify all code that assigns values to unsigned integer-type variables. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first.",
      "Add range checks. Use platform-defined constants to check that values being assigned to integer-type variables are valid. Minimum and maximum values for integer-type variables are defined in limits.h. The minimum valid value for unsigned integers is of course 0. The following is a list of common maximum and minimum values for unsigned integer-type variables:"
    ],
    "ol": [
      "Identify code. Identify all code that assigns values to unsigned integer-type variables. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first. \r\n      \r\n        \r\n          Add range checks. Use platform-defined constants to check that values being assigned to integer-type variables are valid. Minimum and maximum values for integer-type variables are defined in limits.h. The minimum valid value for unsigned integers is of course 0. The following is a list of common maximum and minimum values for unsigned integer-type variables: \r\n        \r\n          UINT_MAXULONG_MAXUSHRT_MAXUCHAR_MAX"
    ],
    "strong": [
      "Identify code.",
      "Add range checks."
    ],
    "a": [
      "Protect Against Integer Overflows"
    ]
  },
  "links": [
    {
      "href": "/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345",
      "text": "Protect Against Integer Overflows"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Validate data values before assigning them to unsigned integer-type variables.</p>\r\n  <h1>Why</h1>\r\n  <p>When the result of an unsigned integer operation exceeds the maximum or the minimum values allowed for that integer type, the stored value of that operation will be different than expected. If this value is used to contol program flow, for array indexing, or memory operations, an arbitrary code execution vulnerability may result.</p>\r\n  <h1>How</h1>\r\n  <p>Perform the following actions to assure that data is validated before being assigned to unsigned integer-type variables:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify code.</strong> Identify all code that assigns values to unsigned integer-type variables. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first. </p>\r\n      <li>\r\n        <p>\r\n          <strong>Add range checks. </strong>Use platform-defined constants to check that values being assigned to integer-type variables are valid. Minimum and maximum values for integer-type variables are defined in limits.h. The minimum valid value for unsigned integers is of course 0. The following is a list of common maximum and minimum values for unsigned integer-type variables: </p>\r\n        <ul>\r\n          <li>UINT_MAX<li>ULONG_MAX<li>USHRT_MAX<li>UCHAR_MAX</li></li></li></li>\r\n        </ul>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345\">Protect Against Integer Overflows</a>\r\n    </li>\r\n  </ul>"
}