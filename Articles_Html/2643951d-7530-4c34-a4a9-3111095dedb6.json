{
  "id": "2643951d-7530-4c34-a4a9-3111095dedb6",
  "checksum": "30c177d7f924e62530a1c9bafaa79e508db301e1",
  "words": {
    "0": [
      "ol",
      "li",
      "pre"
    ],
    "10": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "pre",
      "ul",
      "li"
    ],
    "45": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "90": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "pre",
      "h1",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "scala": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li"
    ],
    "play": [
      "p"
    ],
    "framework": [
      "p"
    ],
    "21.0+": [
      "p"
    ],
    "what": [
      "h1",
      "p"
    ],
    "check": [
      "h1",
      "h1",
      "ol",
      "li",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "ensure": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre"
    ],
    "enforces": [
      "p",
      "p"
    ],
    "strong": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "passwords": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "why": [
      "h1"
    ],
    "enforcing": [
      "p",
      "p"
    ],
    "minimizes": [
      "p"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "risk": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "a credentials": [
      "p"
    ],
    "dictionary": [
      "p"
    ],
    "attack or": [
      "p"
    ],
    "guessing": [
      "p"
    ],
    "another": [
      "p"
    ],
    "user's": [
      "p"
    ],
    "password": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "management": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "routines locate": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "routines": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "inside": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "responsible": [
      "ol",
      "li",
      "p"
    ],
    "managing": [
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "potential": [
      "ol",
      "li",
      "p"
    ],
    "areas": [
      "ol",
      "li",
      "p"
    ],
    "examine": [
      "ol",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "modifying": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li"
    ],
    "accounts": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li"
    ],
    "creating": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li"
    ],
    "new": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "users": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "changing": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "review": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "pre"
    ],
    "policy verify": [
      "ol",
      "li",
      "p"
    ],
    "provides": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "a": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "policy": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "addresses": [
      "ol",
      "li",
      "p"
    ],
    "following": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "considerations": [
      "ol",
      "li",
      "p"
    ],
    "define": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "length": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "requirements": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "ol",
      "strong",
      "li",
      "strong"
    ],
    "example": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "require": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "must": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p"
    ],
    "at": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "least": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "characters": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "long": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "input": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "regarding": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "instance": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "contain": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "letters": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "numbers": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "special": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "organization": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "has": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p"
    ],
    "restrictions": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "passwords verify": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "that the": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "adopts": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "these": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "not": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "match": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "user's six": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "previous": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "expiration": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "password's": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "lifetime": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "will": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "expire": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "after": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "days": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "extra": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "requirements enumerate extra": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "such": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "as a": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "trivial": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "easily": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "guessed": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "verify": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "enforced ensure": [
      "ol",
      "li",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "p"
    ],
    "execute": [
      "ol",
      "li",
      "p"
    ],
    "implementation": [
      "ol",
      "li",
      "p"
    ],
    "before": [
      "ol",
      "li",
      "p"
    ],
    "executing": [
      "ol",
      "li",
      "p"
    ],
    "their": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "own": [
      "ol",
      "li",
      "p"
    ],
    "functionality": [
      "ol",
      "li",
      "p"
    ],
    "def": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "adduserusername:string,pass:string": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "action{": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "implicit": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "request": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "//": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "exists": [
      "ol",
      "li",
      "pre"
    ],
    "in": [
      "ol",
      "li",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "database": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "verifies": [
      "ol",
      "li",
      "pre"
    ],
    "given": [
      "ol",
      "li",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "meets": [
      "ol",
      "li",
      "pre"
    ],
    "!goodpassword(pass))": [
      "ol",
      "li",
      "pre"
    ],
    "{": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "string": [
      "ol",
      "li",
      "pre"
    ],
    "errmsg": [
      "ol",
      "li",
      "pre"
    ],
    "\"user's": [
      "ol",
      "li",
      "pre"
    ],
    "does": [
      "ol",
      "li",
      "pre"
    ],
    "meet\"": [
      "ol",
      "li",
      "pre"
    ],
    "+": [
      "ol",
      "li",
      "pre"
    ],
    "\"": [
      "ol",
      "li",
      "pre"
    ],
    "requirements\"": [
      "ol",
      "li",
      "pre"
    ],
    "okhtml.message.main(errmsg))": [
      "ol",
      "li",
      "pre"
    ],
    "}": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "add": [
      "ol",
      "li",
      "pre"
    ],
    "..\n}": [
      "ol",
      "li",
      "pre"
    ],
    "goodpasswordpass:string": [
      "ol",
      "li",
      "pre"
    ],
    "boolean": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "alpha": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "false": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "num": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "sp": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "pass.length": [
      "ol",
      "li",
      "pre"
    ],
    "return": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "int": [
      "ol",
      "li",
      "pre"
    ],
    "i": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "passlength;": [
      "ol",
      "li",
      "pre"
    ],
    "i++": [
      "ol",
      "li",
      "pre"
    ],
    "!alpha": [
      "ol",
      "li",
      "pre"
    ],
    "&&": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "characterisletter(pass[i]))": [
      "ol",
      "li",
      "pre"
    ],
    "true": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "!num": [
      "ol",
      "li",
      "pre"
    ],
    "characterisdigit(pass[i]))": [
      "ol",
      "li",
      "pre"
    ],
    "!sp": [
      "ol",
      "li",
      "pre"
    ],
    "pass[i]": [
      "ol",
      "li",
      "pre"
    ],
    "==": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "'!'": [
      "ol",
      "li",
      "pre"
    ],
    "||": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "passi]": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "'@'": [
      "ol",
      "li",
      "pre"
    ],
    "'#'": [
      "ol",
      "li",
      "pre"
    ],
    "'$'": [
      "ol",
      "li",
      "pre"
    ],
    "'%'": [
      "ol",
      "li",
      "pre"
    ],
    "'^')": [
      "ol",
      "li",
      "pre"
    ],
    "&": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "sp\n}": [
      "ol",
      "li",
      "pre"
    ],
    "enforced": [
      "strong",
      "ol",
      "li",
      "title"
    ],
    "note pci": [
      "p"
    ],
    "dss": [
      "p"
    ],
    "state": [
      "p"
    ],
    "should": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li"
    ],
    "seven": [
      "p"
    ],
    "have": [
      "p"
    ],
    "both": [
      "p"
    ],
    "and should": [
      "p"
    ],
    "no": [
      "p"
    ],
    "more": [
      "p"
    ],
    "than": [
      "p"
    ],
    "note": [
      "strong"
    ],
    "fix": [
      "h1"
    ],
    "constitutes": [
      "p"
    ],
    "varies": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "however": [
      "p"
    ],
    "there": [
      "p"
    ],
    "minimum": [
      "p",
      "p"
    ],
    "character": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "sets": [
      "p"
    ],
    "it": [
      "ul",
      "li"
    ],
    "steps": [
      "p"
    ],
    "required": [
      "p"
    ],
    "requirements pick": [
      "ol",
      "li",
      "p"
    ],
    "schema": [
      "ol",
      "li",
      "p"
    ],
    "follow": [
      "ol",
      "li",
      "p"
    ],
    "them": [
      "ol",
      "li",
      "p"
    ],
    "certain": [
      "ol",
      "li",
      "p"
    ],
    "patterns": [
      "ol",
      "li",
      "p"
    ],
    "e.g.": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "10+": [
      "ol",
      "li",
      "p"
    ],
    "large": [
      "ol",
      "li",
      "p"
    ],
    "alpha-numeric": [
      "ol",
      "li",
      "p"
    ],
    "values.": [
      "ol",
      "li",
      "p"
    ],
    "enforce": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "requirements the": [
      "ol",
      "li"
    ],
    "while": [
      "ol",
      "li"
    ],
    "lifetime determine": [
      "ol",
      "li",
      "p"
    ],
    "force": [
      "ol",
      "li",
      "p"
    ],
    "update": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p"
    ],
    "interval": [
      "ol",
      "li",
      "p"
    ],
    "different": [
      "ol",
      "li",
      "p"
    ],
    "old": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "comparing": [
      "ol",
      "li",
      "p"
    ],
    "produced": [
      "ol",
      "li",
      "p"
    ],
    "hashes": [
      "ol",
      "li",
      "p"
    ],
    "additionally": [
      "ol",
      "li",
      "p"
    ],
    "might": [
      "ol",
      "li",
      "p"
    ],
    "asked": [
      "ol",
      "li",
      "p"
    ],
    "use": [
      "ol",
      "li",
      "p"
    ],
    "previously": [
      "ol",
      "li",
      "p"
    ],
    "used": [
      "ol",
      "li",
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix"
    ],
    "p": [
      "Scala and Play Framework 2.1.0+",
      "Ensure that your application enforces strong passwords.",
      "Enforcing strong passwords minimizes the risk of a Credentials Dictionary Attack or guessing another user's password.",
      "To ensure that your application enforces strong passwords:",
      "Identify password management routines. Locate all routines inside your application that are responsible for managing user passwords. Potential areas to examine within your application include:",
      "Review your application's password policy. Verify that your application provides a password policy. Ensure that the password policy addresses the following considerations that define a strong password:",
      "Verify that the password policy is enforced. Ensure that your application has implemented the password policy. Verify that all password management routines execute your application's implementation of the password policy before executing their own functionality. Example:",
      "Note: PCI DSS requirements state that passwords should be at least seven characters long, have both letters and numbers and should expire after no more than 90 days.",
      "",
      "What constitutes a strong password varies from organization to organization. However, there are minimum requirements for length and input character sets. Minimum requirements for a strong password are:",
      "The following steps are required for enforcing strong passwords:",
      "Define password requirements. Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).",
      "Enforce password lifetime. Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords.",
      ""
    ],
    "br": [
      ""
    ],
    "ol": [
      "Identify password management routines. Locate all routines inside your application that are responsible for managing user passwords. Potential areas to examine within your application include:\n      \n        Modifying accounts\n        Creating new users\n        Changing passwords\n      \n    \n    \n      \n        Review your application's password policy. Verify that your application provides a password policy. Ensure that the password policy addresses the following considerations that define a strong password:\n      \n        \n          Length: The policy provides length requirements for passwords. For example, require that a password must be at least 10 characters long.\n        \n          Input Set: The policy provides requirements regarding the input set of passwords. For instance, a password must contain letters, numbers and special characters. If your organization has special restrictions for passwords, verify that the policy adopts these requirements. For example, require that a password must not match the user's six previous passwords.\n        \n          Expiration: The policy provides requirements for a password's lifetime. For example, require that a password will expire after 45 days. \n        \n          Extra Requirements: Enumerate extra policy requirements for passwords, such as a password must not be trivial and easily guessed.\n      \n    \n    \n      \n        Verify that the password policy is enforced. Ensure that your application has implemented the password policy. Verify that all password management routines execute your application's implementation of the password policy before executing their own functionality. Example:\n      def addUser(username:String,pass:String ) = Action{ implicit request =>      \n      // Check if user exists in the user database\n      // The application verifies that the given\n      // password meets the password requirements\n      if (!goodPassword(pass))\n      {\n            String errMsg = \"User's password does not meet\"\n                           + \" the password requirements\";\n            Ok(html.message.main(errMsg))\n      }\n\n      // Add user to the application's user database\n      ...\n}\n\n\n  def goodPassword(pass:String ) = Action{ implicit request =>  \n{\n      boolean alpha = false;\n      boolean num = false;\n      boolean sp = false;\n\n      if (pass.length < 10)\n      {\n            return false;\n      }\n\n      for (int i = 0; i < pass.length; i++)\n      {\n            if (!alpha && Character.isLetter(pass[i]))\n            {\n                  alpha = true;\n            }\n\n            if (!num && Character.isDigit(pass[i]))\n            {\n                  num = true;\n            }\n\n            if (!sp && (pass[i] == '!' ||\n                  pass[i] == '@' || pass[i] == '#' ||\n                  pass[i] == '$' || pass[i] == '%' ||\n                  pass[i] == '^'))\n            {\n                  sp = true;\n            }\n      }\n\n      return (alpha & num) & sp;\n}",
      "Define password requirements. Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).\n    \n    \n      Enforce password requirements. The password requirements should be enforced while creating and modifying accounts.\n    \n      \n        Enforce password lifetime. Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords."
    ],
    "li": [
      "Identify password management routines. Locate all routines inside your application that are responsible for managing user passwords. Potential areas to examine within your application include:\n      \n        Modifying accounts\n        Creating new users\n        Changing passwords",
      "Modifying accounts",
      "Creating new users",
      "Changing passwords",
      "Review your application's password policy. Verify that your application provides a password policy. Ensure that the password policy addresses the following considerations that define a strong password:\n      \n        \n          Length: The policy provides length requirements for passwords. For example, require that a password must be at least 10 characters long.\n        \n          Input Set: The policy provides requirements regarding the input set of passwords. For instance, a password must contain letters, numbers and special characters. If your organization has special restrictions for passwords, verify that the policy adopts these requirements. For example, require that a password must not match the user's six previous passwords.\n        \n          Expiration: The policy provides requirements for a password's lifetime. For example, require that a password will expire after 45 days. \n        \n          Extra Requirements: Enumerate extra policy requirements for passwords, such as a password must not be trivial and easily guessed.",
      "Length: The policy provides length requirements for passwords. For example, require that a password must be at least 10 characters long.",
      "Input Set: The policy provides requirements regarding the input set of passwords. For instance, a password must contain letters, numbers and special characters. If your organization has special restrictions for passwords, verify that the policy adopts these requirements. For example, require that a password must not match the user's six previous passwords.",
      "Expiration: The policy provides requirements for a password's lifetime. For example, require that a password will expire after 45 days.",
      "Extra Requirements: Enumerate extra policy requirements for passwords, such as a password must not be trivial and easily guessed.",
      "Verify that the password policy is enforced. Ensure that your application has implemented the password policy. Verify that all password management routines execute your application's implementation of the password policy before executing their own functionality. Example:\n      def addUser(username:String,pass:String ) = Action{ implicit request =>      \n      // Check if user exists in the user database\n      // The application verifies that the given\n      // password meets the password requirements\n      if (!goodPassword(pass))\n      {\n            String errMsg = \"User's password does not meet\"\n                           + \" the password requirements\";\n            Ok(html.message.main(errMsg))\n      }\n\n      // Add user to the application's user database\n      ...\n}\n\n\n  def goodPassword(pass:String ) = Action{ implicit request =>  \n{\n      boolean alpha = false;\n      boolean num = false;\n      boolean sp = false;\n\n      if (pass.length < 10)\n      {\n            return false;\n      }\n\n      for (int i = 0; i < pass.length; i++)\n      {\n            if (!alpha && Character.isLetter(pass[i]))\n            {\n                  alpha = true;\n            }\n\n            if (!num && Character.isDigit(pass[i]))\n            {\n                  num = true;\n            }\n\n            if (!sp && (pass[i] == '!' ||\n                  pass[i] == '@' || pass[i] == '#' ||\n                  pass[i] == '$' || pass[i] == '%' ||\n                  pass[i] == '^'))\n            {\n                  sp = true;\n            }\n      }\n\n      return (alpha & num) & sp;\n}",
      "The password must be at least 10 characters long.",
      "It must contain letters, numbers, and special characters.",
      "Define password requirements. Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).",
      "Enforce password requirements. The password requirements should be enforced while creating and modifying accounts.",
      "Enforce password lifetime. Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords."
    ],
    "strong": [
      "Identify password management routines.",
      "Review your application's password policy.",
      "Length",
      "Input Set",
      "Expiration",
      "Extra Requirements",
      "Verify that the password policy is enforced.",
      "Note:",
      "Define password requirements.",
      "Enforce password requirements.",
      "Enforce password lifetime."
    ],
    "ul": [
      "Modifying accounts\n        Creating new users\n        Changing passwords",
      "Length: The policy provides length requirements for passwords. For example, require that a password must be at least 10 characters long.\n        \n          Input Set: The policy provides requirements regarding the input set of passwords. For instance, a password must contain letters, numbers and special characters. If your organization has special restrictions for passwords, verify that the policy adopts these requirements. For example, require that a password must not match the user's six previous passwords.\n        \n          Expiration: The policy provides requirements for a password's lifetime. For example, require that a password will expire after 45 days. \n        \n          Extra Requirements: Enumerate extra policy requirements for passwords, such as a password must not be trivial and easily guessed.",
      "The password must be at least 10 characters long.\n    It must contain letters, numbers, and special characters."
    ],
    "pre": [
      "def addUser(username:String,pass:String ) = Action{ implicit request =>      \n      // Check if user exists in the user database\n      // The application verifies that the given\n      // password meets the password requirements\n      if (!goodPassword(pass))\n      {\n            String errMsg = \"User's password does not meet\"\n                           + \" the password requirements\";\n            Ok(html.message.main(errMsg))\n      }\n\n      // Add user to the application's user database\n      ...\n}\n\n\n  def goodPassword(pass:String ) = Action{ implicit request =>  \n{\n      boolean alpha = false;\n      boolean num = false;\n      boolean sp = false;\n\n      if (pass.length < 10)\n      {\n            return false;\n      }\n\n      for (int i = 0; i < pass.length; i++)\n      {\n            if (!alpha && Character.isLetter(pass[i]))\n            {\n                  alpha = true;\n            }\n\n            if (!num && Character.isDigit(pass[i]))\n            {\n                  num = true;\n            }\n\n            if (!sp && (pass[i] == '!' ||\n                  pass[i] == '@' || pass[i] == '#' ||\n                  pass[i] == '$' || pass[i] == '%' ||\n                  pass[i] == '^'))\n            {\n                  sp = true;\n            }\n      }\n\n      return (alpha & num) & sp;\n}"
    ]
  },
  "links": [],
  "html": "<h1>Applies To</h1>\n  <p>Scala and Play Framework 2.1.0+<br /></p>\n  <h1>What to Check For</h1>\n  <p>Ensure that your application enforces strong passwords.</p>\n  <h1>Why</h1>\n  <p>Enforcing strong passwords minimizes the risk of a&nbsp;Credentials Dictionary Attack&nbsp;or guessing another user's password.</p>\n  <h1>How to Check</h1>\n  <p>To ensure that your application enforces strong passwords:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify password management routines.&nbsp;</strong>Locate all routines inside your application that are responsible for managing user passwords. Potential areas to examine within your application include:</p>\n      <ul>\n        <li>Modifying accounts</li>\n        <li>Creating new users</li>\n        <li>Changing passwords</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Review your application's password policy.&nbsp;</strong>Verify that your application provides a password policy. Ensure that the password policy addresses the following considerations that define a strong password:</p>\n      <ul>\n        <li>\n          <strong>Length</strong>: The policy provides length requirements for passwords. For example, require that a password must be at least 10 characters long.</li>\n        <li>\n          <strong>Input Set</strong>: The policy provides requirements regarding the input set of passwords. For instance, a password must contain letters, numbers and special characters. If your organization has special restrictions for passwords,&nbsp;verify that&nbsp;the policy adopts these requirements. For example, require that a password must not match the user's&nbsp;six previous passwords.</li>\n        <li>\n          <strong>Expiration</strong>: The policy provides requirements for a password's lifetime. For example, require that a password will expire after 45 days.&nbsp;</li>\n        <li>\n          <strong>Extra Requirements</strong>:&nbsp;Enumerate&nbsp;extra policy requirements for passwords, such as&nbsp;a password must not be trivial and easily guessed.</li>\n      </ul>\n    </li>\n    <li>\n      <p>\n        <strong>Verify that the password policy is enforced.&nbsp;</strong>Ensure that your application has implemented the password policy. Verify that all password management routines execute your application's implementation of the password policy before executing their own functionality. Example:</p>\n      <pre>def addUser(username:String,pass:String ) = Action{ implicit request =&gt;      \n      // Check if user exists in the user database\n      // The application verifies that the given\n      // password meets the password requirements\n      if (!goodPassword(pass))\n      {\n            String errMsg = \"User's password does not meet\"\n                           + \" the password requirements\";\n            Ok(html.message.main(errMsg))\n      }\n\n      // Add user to the application's user database\n      ...\n}\n\n\n  def goodPassword(pass:String ) = Action{ implicit request =&gt;  \n{\n      boolean alpha = false;\n      boolean num = false;\n      boolean sp = false;\n\n      if (pass.length &lt; 10)\n      {\n            return false;\n      }\n\n      for (int i = 0; i &lt; pass.length; i++)\n      {\n            if (!alpha && Character.isLetter(pass[i]))\n            {\n                  alpha = true;\n            }\n\n            if (!num && Character.isDigit(pass[i]))\n            {\n                  num = true;\n            }\n\n            if (!sp && (pass[i] == '!' ||\n                  pass[i] == '@' || pass[i] == '#' ||\n                  pass[i] == '$' || pass[i] == '%' ||\n                  pass[i] == '^'))\n            {\n                  sp = true;\n            }\n      }\n\n      return (alpha & num) & sp;\n}</pre>\n    </li>\n  </ol>\n  <p>\n    <strong>Note:</strong>&nbsp;PCI DSS requirements state that passwords should be at least seven characters long, have both letters and numbers and&nbsp;should expire after no more than 90 days.</p>\n  <h1>How to Fix</h1>\n  <p />\n  <p>What constitutes a strong password varies from organization to organization. However, there are minimum requirements for length and input character sets. Minimum requirements for a strong password are:</p>\n  <ul>\n    <li>The password must be at least 10 characters long.</li>\n    <li>It must contain letters, numbers, and special characters.</li>\n  </ul>\n  <p>The following steps are required for enforcing strong passwords:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Define password requirements.&nbsp;</strong>Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).</p>\n    </li>\n    <li>\n      <strong>Enforce password requirements.&nbsp;</strong>The password requirements should be enforced while creating and modifying accounts.</li>\n    <li>\n      <p>\n        <strong>Enforce password lifetime.&nbsp;</strong>Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes. Additionally users might be asked to not use previously used passwords.&nbsp;</p>\n    </li>\n  </ol>\n  <p />"
}