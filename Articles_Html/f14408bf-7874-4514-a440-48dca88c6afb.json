{
  "id": "f14408bf-7874-4514-a440-48dca88c6afb",
  "checksum": "82df464d466b2ace65f6a099aaa94d23e6e42eb1",
  "words": {
    "2": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "3": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "4": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "5": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "8": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "9": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "31": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "40": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "300": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "c++": [
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "use": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "regular": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "expressions": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "validate": [
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "why": [
      "h1"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "good": [
      "p"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "strategy": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "constrain": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "known": [
      "p",
      "p"
    ],
    "valid": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "p"
    ],
    "values": [
      "p",
      "p",
      "p",
      "p"
    ],
    "reject": [
      "p"
    ],
    "bad": [
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "sanitize": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "passes": [
      "p"
    ],
    "rejecting": [
      "p"
    ],
    "not": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "be": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "relied": [
      "p"
    ],
    "on": [
      "p"
    ],
    "because": [
      "p"
    ],
    "there": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "are": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "too": [
      "p"
    ],
    "many": [
      "p"
    ],
    "possible": [
      "p",
      "p"
    ],
    "however": [
      "p"
    ],
    "it": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "filter": [
      "p"
    ],
    "out": [
      "p"
    ],
    "at": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "least": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "some": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "constraining": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "done": [
      "p"
    ],
    "effectively": [
      "p"
    ],
    "using": [
      "p",
      "p"
    ],
    "when": [
      "h1"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "first": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "step": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "expression": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "library": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "does": [
      "ol",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "built-in": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "functionality": [
      "ol",
      "li",
      "p"
    ],
    "boostregex": [
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "recommended": [
      "ol",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "li"
    ],
    "with": [
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "application": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "uses": [
      "ol",
      "li",
      "p"
    ],
    "managed": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "net": [
      "ol",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "nice": [
      "ol",
      "li",
      "p"
    ],
    "api": [
      "ol",
      "li",
      "p"
    ],
    "systemtext.regularexpressions.": [
      "ol",
      "li",
      "p"
    ],
    "determine": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "patterns": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p"
    ],
    "types": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "follows": [
      "ol",
      "li",
      "p"
    ],
    "obvious": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "such": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "social": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "security": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "or": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "credit": [
      "ol",
      "li",
      "p"
    ],
    "card": [
      "ol",
      "li",
      "p"
    ],
    "numbers": [
      "ol",
      "li",
      "p"
    ],
    "other": [
      "ol",
      "li",
      "p"
    ],
    "may": [
      "ol",
      "li",
      "p"
    ],
    "less": [
      "ol",
      "li",
      "p"
    ],
    "file": [
      "ol",
      "li",
      "p"
    ],
    "names": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "write": [
      "ol",
      "li",
      "p"
    ],
    "describe": [
      "ol",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "listed": [
      "ol",
      "li",
      "p"
    ],
    "below": [
      "ol",
      "li",
      "p"
    ],
    "name^a-za-z''-'\\s]{1,40}$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "name": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "allows": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "up": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "uppercase": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "lowercase": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "characters": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "few": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "special": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "modify": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "list": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "number^\\d{3}-\\d{2}-\\d{4}$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "format": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "type": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "length": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "supplied": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "field": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "consist": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "numeric": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "followed": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "dash": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "then": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "phone": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "number^01]?[-": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[-": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "]?\\d{3}[-": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "]?\\d{4}$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "us.": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "number": [
      "ol",
      "li",
      "ul",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "optionally": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "enclosed": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "parentheses": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "e-mail^[0-9a-za-z]([-.\\w]*[0-9a-za-z])*@([0-9a-za-z][-\\w]*[0-9a-za-z]\\.)+[a-za-z]{2,9})$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "an": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "e-mail": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "address": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "url^ht|f)tp(s?)\\:\\/\\/[0-9a-za-z]([-.\\w]*[0-9a-za-z])*(:(0-9)*)*(\\/?)([a-za-z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "url": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "zip": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "code^\\d{5}-\\d{4}|\\d{5}|\\d{9})$|^([a-za-z]\\d[a-za-z]": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "\\da-za-z]\\d)$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "password?!^[0-9]*$)(?!^[a-za-z]*$)^([a-za-z0-9]{8,40})$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "strong": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "password": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "between": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "contain": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "one": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "digit": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "alphabetic": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "character": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "non-": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "negative": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "strong",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "integer^\\d+$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "contains": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "integer": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "greater": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "zero": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "currency": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "negative^\\d+(\\.\\d\\d)?$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "positive": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "amount": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "decimal": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "point": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "requires": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "after": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "but": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "negative^(-)?\\d+(\\.\\d\\d)?$validates": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "written": [
      "ol",
      "li",
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "information": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "about": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "\"boostregex\"": [
      "ul",
      "li"
    ],
    "http//www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.htmlfor": [
      "ul"
    ],
    "please see": [
      "ul",
      "li"
    ],
    "tutorial": [
      "ul",
      "li"
    ],
    "http//www.regular-expressions.info/tutorial.html.": [
      "ul",
      "li"
    ],
    "http//www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html": [
      "li",
      "a"
    ],
    "http//www.regular-expressions.info/tutorial.html": [
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "all": [
      "ul",
      "li",
      "a"
    ],
    "centralize": [
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Additional Resources",
      "Related Items"
    ],
    "ul": [
      "C++",
      "Name^[a-zA-Z''-'\\s]{1,40}$Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.\r\n            \r\n              \r\n                Social Security Number^\\d{3}-\\d{2}-\\d{4}$Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.\r\n              \r\n                \r\n                  Phone Number^[01]?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. \r\n                \r\n                  \r\n                    E-mail^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$Validates an e-mail address.\r\n                  \r\n                    \r\n                      URL^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?$Validates a URL \r\n                    \r\n                      \r\n                        ZIP Code^(\\d{5}-\\d{4}|\\d{5}|\\d{9})$|^([a-zA-Z]\\d[a-zA-Z] \\d[a-zA-Z]\\d)$Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.\r\n                      \r\n                        \r\n                          Password(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,40})$Validates a strong password. It must be between 8 and 40 characters, contain at least one digit and one alphabetic character, and must not contain special characters.\r\n                        \r\n                          \r\n                            Non- negative integer^\\d+$Validates that the field contains an integer greater than zero.\r\n                          \r\n                            \r\n                              Currency (non- negative)^\\d+(\\.\\d\\d)?$Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.\r\n                            \r\n                              \r\n                                Currency (positive or negative)^(-)?\\d+(\\.\\d\\d)?$Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.",
      "For more information about the Boost.Regex library, please see \"Boost.Regex\" at http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.htmlFor more information about regular expressions, please see the regular expression tutorial at http://www.regular-expressions.info/tutorial.html.",
      "Validate All Input\r\n      \r\n        Centralize Input Validation"
    ],
    "li": [
      "C++",
      "Use a regular expression library. C++ does not have built-in regular expression functionality. The Boost.Regex library is recommended for regular expressions with C++. If your application uses managed code, .NET has a nice regular expressions API built-in as System.Text.RegularExpressions.",
      "Determine valid input patterns. Identify the types of valid input for your input application. For example, some input follows obvious patterns, such as social security or credit card numbers. Other types of input may have less obvious patterns, such as file names. Write regular expressions that describe valid input for your application. Some common regular expressions are listed below:\r\n        \r\n          \r\n            \r\n              Name^[a-zA-Z''-'\\s]{1,40}$Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.\r\n            \r\n              \r\n                Social Security Number^\\d{3}-\\d{2}-\\d{4}$Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.\r\n              \r\n                \r\n                  Phone Number^[01]?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. \r\n                \r\n                  \r\n                    E-mail^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$Validates an e-mail address.\r\n                  \r\n                    \r\n                      URL^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?$Validates a URL \r\n                    \r\n                      \r\n                        ZIP Code^(\\d{5}-\\d{4}|\\d{5}|\\d{9})$|^([a-zA-Z]\\d[a-zA-Z] \\d[a-zA-Z]\\d)$Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.\r\n                      \r\n                        \r\n                          Password(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,40})$Validates a strong password. It must be between 8 and 40 characters, contain at least one digit and one alphabetic character, and must not contain special characters.\r\n                        \r\n                          \r\n                            Non- negative integer^\\d+$Validates that the field contains an integer greater than zero.\r\n                          \r\n                            \r\n                              Currency (non- negative)^\\d+(\\.\\d\\d)?$Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.\r\n                            \r\n                              \r\n                                Currency (positive or negative)^(-)?\\d+(\\.\\d\\d)?$Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.",
      "Name^[a-zA-Z''-'\\s]{1,40}$Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.",
      "Social Security Number^\\d{3}-\\d{2}-\\d{4}$Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.",
      "Phone Number^[01]?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters.",
      "E-mail^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$Validates an e-mail address.",
      "URL^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?$Validates a URL",
      "ZIP Code^(\\d{5}-\\d{4}|\\d{5}|\\d{9})$|^([a-zA-Z]\\d[a-zA-Z] \\d[a-zA-Z]\\d)$Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.",
      "Password(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,40})$Validates a strong password. It must be between 8 and 40 characters, contain at least one digit and one alphabetic character, and must not contain special characters.",
      "Non- negative integer^\\d+$Validates that the field contains an integer greater than zero.",
      "Currency (non- negative)^\\d+(\\.\\d\\d)?$Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.",
      "Currency (positive or negative)^(-)?\\d+(\\.\\d\\d)?$Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.",
      "Use regular expressions to constrain input. Use the regular expressions you have written to constrain input as the first step of your input validation strategy.",
      "For more information about the Boost.Regex library, please see \"Boost.Regex\" at http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html",
      "For more information about regular expressions, please see the regular expression tutorial at http://www.regular-expressions.info/tutorial.html.",
      "Validate All Input",
      "Centralize Input Validation"
    ],
    "p": [
      "Use regular expressions to validate input.",
      "A good input validation strategy is to constrain input to known valid values, reject known bad values and to sanitize the input that passes validation. Rejecting bad values is not to be relied on, because there are too many possible bad values. However, it is possible to filter out at least some bad input. Constraining input can be done effectively using regular expressions.",
      "Constrain input as the first step of input validation.",
      "Perform the following actions to constrain input using regular expressions:",
      "Use a regular expression library. C++ does not have built-in regular expression functionality. The Boost.Regex library is recommended for regular expressions with C++. If your application uses managed code, .NET has a nice regular expressions API built-in as System.Text.RegularExpressions.",
      "Determine valid input patterns. Identify the types of valid input for your input application. For example, some input follows obvious patterns, such as social security or credit card numbers. Other types of input may have less obvious patterns, such as file names. Write regular expressions that describe valid input for your application. Some common regular expressions are listed below:",
      "Name^[a-zA-Z''-'\\s]{1,40}$Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.",
      "Social Security Number^\\d{3}-\\d{2}-\\d{4}$Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.",
      "Phone Number^[01]?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters.",
      "E-mail^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$Validates an e-mail address.",
      "URL^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?$Validates a URL",
      "ZIP Code^(\\d{5}-\\d{4}|\\d{5}|\\d{9})$|^([a-zA-Z]\\d[a-zA-Z] \\d[a-zA-Z]\\d)$Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.",
      "Password(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,40})$Validates a strong password. It must be between 8 and 40 characters, contain at least one digit and one alphabetic character, and must not contain special characters.",
      "Non- negative integer^\\d+$Validates that the field contains an integer greater than zero.",
      "Currency (non- negative)^\\d+(\\.\\d\\d)?$Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.",
      "Currency (positive or negative)^(-)?\\d+(\\.\\d\\d)?$Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.",
      "Use regular expressions to constrain input. Use the regular expressions you have written to constrain input as the first step of your input validation strategy.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Use a regular expression library. C++ does not have built-in regular expression functionality. The Boost.Regex library is recommended for regular expressions with C++. If your application uses managed code, .NET has a nice regular expressions API built-in as System.Text.RegularExpressions.\r\n      \r\n        \r\n          Determine valid input patterns. Identify the types of valid input for your input application. For example, some input follows obvious patterns, such as social security or credit card numbers. Other types of input may have less obvious patterns, such as file names. Write regular expressions that describe valid input for your application. Some common regular expressions are listed below:\r\n        \r\n          \r\n            \r\n              Name^[a-zA-Z''-'\\s]{1,40}$Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.\r\n            \r\n              \r\n                Social Security Number^\\d{3}-\\d{2}-\\d{4}$Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.\r\n              \r\n                \r\n                  Phone Number^[01]?[- .]?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})[- .]?\\d{3}[- .]?\\d{4}$Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. \r\n                \r\n                  \r\n                    E-mail^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$Validates an e-mail address.\r\n                  \r\n                    \r\n                      URL^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&%\\$#_]*)?$Validates a URL \r\n                    \r\n                      \r\n                        ZIP Code^(\\d{5}-\\d{4}|\\d{5}|\\d{9})$|^([a-zA-Z]\\d[a-zA-Z] \\d[a-zA-Z]\\d)$Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.\r\n                      \r\n                        \r\n                          Password(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,40})$Validates a strong password. It must be between 8 and 40 characters, contain at least one digit and one alphabetic character, and must not contain special characters.\r\n                        \r\n                          \r\n                            Non- negative integer^\\d+$Validates that the field contains an integer greater than zero.\r\n                          \r\n                            \r\n                              Currency (non- negative)^\\d+(\\.\\d\\d)?$Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.\r\n                            \r\n                              \r\n                                Currency (positive or negative)^(-)?\\d+(\\.\\d\\d)?$Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.\r\n                            \r\n                          \r\n                        \r\n                      \r\n                    \r\n                  \r\n                \r\n              \r\n            \r\n          \r\n        \r\n        \r\n          \r\n            Use regular expressions to constrain input. Use the regular expressions you have written to constrain input as the first step of your input validation strategy."
    ],
    "strong": [
      "Use a regular expression library.",
      "Determine valid input patterns.",
      "Name",
      "Social Security Number",
      "Phone Number",
      "E-mail",
      "URL",
      "ZIP Code",
      "Password",
      "Non- negative integer",
      "Currency (non- negative)",
      "Currency (positive or negative)",
      "Use regular expressions to constrain input."
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html",
      "http://www.regular-expressions.info/tutorial.html",
      "Validate All Input",
      "Centralize Input Validation"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html",
      "text": "http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html"
    },
    {
      "href": "http://www.regular-expressions.info/tutorial.html",
      "text": "http://www.regular-expressions.info/tutorial.html"
    },
    {
      "href": "/article/3de41277-0cc1-4ebc-8dd7-e96d161aa0ef",
      "text": "Validate All Input"
    },
    {
      "href": "/article/cc81757b-6da5-4463-92f9-d27f680ad6c7",
      "text": "Centralize Input Validation"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Use regular expressions to validate input.</p>\r\n  <h1>Why</h1>\r\n  <p>A good input validation strategy is to constrain input to known valid values, reject known bad values and to sanitize the input that passes validation. Rejecting bad values is not to be relied on, because there are too many possible bad values. However, it is possible to filter out at least some bad input. Constraining input can be done effectively using regular expressions.</p>\r\n  <h1>When</h1>\r\n  <p>Constrain input as the first step of input validation.</p>\r\n  <h1>How</h1>\r\n  <p>Perform the following actions to constrain input using regular expressions:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Use a regular expression library.</strong> C&#43;&#43; does not have built-in regular expression functionality. The Boost.Regex library is recommended for regular expressions with C&#43;&#43;. If your application uses managed code, .NET has a nice regular expressions API built-in as System.Text.RegularExpressions.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Determine valid input patterns.</strong> Identify the types of valid input for your input application. For example, some input follows obvious patterns, such as social security or credit card numbers. Other types of input may have less obvious patterns, such as file names. Write regular expressions that describe valid input for your application. Some common regular expressions are listed below:</p>\r\n        <ul>\r\n          <li>\r\n            <p>\r\n              <strong>Name<br /></strong>&#94;&#91;a-zA-Z''-'\\s&#93;&#123;1,40&#125;&#36;<br />Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.</p>\r\n            <li>\r\n              <p>\r\n                <strong>Social Security Number<br /></strong>&#94;\\d&#123;3&#125;-\\d&#123;2&#125;-\\d&#123;4&#125;&#36;<br />Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.</p>\r\n              <li>\r\n                <p>\r\n                  <strong>Phone Number<br /></strong>&#94;&#91;01&#93;?&#91;- .&#93;?(\\(&#91;2-9&#93;\\d&#123;2&#125;\\)&#124;&#91;2-9&#93;\\d&#123;2&#125;)&#91;- .&#93;?\\d&#123;3&#125;&#91;- .&#93;?\\d&#123;4&#125;&#36;<br />Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. </p>\r\n                <li>\r\n                  <p>\r\n                    <strong>E-mail<br /></strong>&#94;(&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;&#64;(&#91;0-9a-zA-Z&#93;&#91;-\\w&#93;&#42;&#91;0-9a-zA-Z&#93;\\.)&#43;&#91;a-zA-Z&#93;&#123;2,9&#125;)&#36;<br />Validates an e-mail address.</p>\r\n                  <li>\r\n                    <p>\r\n                      <strong>URL<br /></strong>&#94;(ht&#124;f)tp(s?)\\:\\/\\/&#91;0-9a-zA-Z&#93;(&#91;-.\\w&#93;&#42;&#91;0-9a-zA-Z&#93;)&#42;(:(0-9)&#42;)&#42;(\\/?)(&#91;a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\&#43;&&#37;\\&#36;#_&#93;&#42;)?&#36;<br />Validates a URL </p>\r\n                    <li>\r\n                      <p>\r\n                        <strong>ZIP Code<br /></strong>&#94;(\\d&#123;5&#125;-\\d&#123;4&#125;&#124;\\d&#123;5&#125;&#124;\\d&#123;9&#125;)&#36;&#124;&#94;(&#91;a-zA-Z&#93;\\d&#91;a-zA-Z&#93; \\d&#91;a-zA-Z&#93;\\d)&#36;<br />Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.</p>\r\n                      <li>\r\n                        <p>\r\n                          <strong>Password<br /></strong>(?&#33;&#94;&#91;0-9&#93;&#42;&#36;)(?&#33;&#94;&#91;a-zA-Z&#93;&#42;&#36;)&#94;(&#91;a-zA-Z0-9&#93;&#123;8,40&#125;)&#36;<br />Validates a strong password. It must be between 8 and 40 characters, contain at least one digit and one alphabetic character, and must not contain special characters.</p>\r\n                        <li>\r\n                          <p>\r\n                            <strong>Non- negative integer<br /></strong>&#94;\\d&#43;&#36;<br />Validates that the field contains an integer greater than zero.</p>\r\n                          <li>\r\n                            <p>\r\n                              <strong>Currency (non- negative)<br /></strong>&#94;\\d&#43;(\\.\\d\\d)?&#36;<br />Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.</p>\r\n                            <li>\r\n                              <p>\r\n                                <strong>Currency (positive or negative)<br /></strong>&#94;(-)?\\d&#43;(\\.\\d\\d)?&#36;<br />Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.</p>\r\n                            </li>\r\n                          </li>\r\n                        </li>\r\n                      </li>\r\n                    </li>\r\n                  </li>\r\n                </li>\r\n              </li>\r\n            </li>\r\n          </li>\r\n        </ul>\r\n        <li>\r\n          <p>\r\n            <strong>Use regular expressions to constrain input.</strong> Use the regular expressions you have written to constrain input as the first step of your input validation strategy.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information about the Boost.Regex library, please see \"Boost.Regex\" at <a href=\"http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html\">http://www.boost.org/doc/libs/1_36_0/libs/regex/doc/html/index.html</a><li>For more information about regular expressions, please&nbsp;see the regular expression tutorial at <a href=\"http://www.regular-expressions.info/tutorial.html\">http://www.regular-expressions.info/tutorial.html</a>.</li></li>\r\n  </ul>\r\n  <h1>Related Items</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/3de41277-0cc1-4ebc-8dd7-e96d161aa0ef\">Validate All Input</a>\r\n      <li>\r\n        <a href=\"/article/cc81757b-6da5-4463-92f9-d27f680ad6c7\">Centralize Input Validation</a>\r\n      </li>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}