{
  "id": "46e1b223-0aa6-4007-a3da-eb767ea3b62c",
  "checksum": "7a15125df5ec29b3525c17f03a78a9190b396c93",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "li",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "php": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "what": [
      "h2"
    ],
    "check": [
      "h2",
      "h2"
    ],
    "for": [
      "h2",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "use": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "title"
    ],
    "cryptographically": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p"
    ],
    "strong": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p",
      "ul",
      "li",
      "title"
    ],
    "pseudo-random": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "number": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "generator": [
      "p",
      "p"
    ],
    "prng)": [
      "p"
    ],
    "cryptography": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "why": [
      "h2"
    ],
    "most": [
      "p"
    ],
    "common": [
      "p"
    ],
    "encryption": [
      "p"
    ],
    "algorithms": [
      "p",
      "p"
    ],
    "rely": [
      "p"
    ],
    "on": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "ul",
      "li"
    ],
    "difficult": [
      "p"
    ],
    "predict": [
      "p",
      "p"
    ],
    "random": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "numbers": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "be": [
      "p",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "title"
    ],
    "properly": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "li"
    ],
    "level": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li"
    ],
    "difficulty": [
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "enumerate": [
      "p"
    ],
    "output": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "title"
    ],
    "called": [
      "p"
    ],
    "its": [
      "p"
    ],
    "entropy": [
      "p",
      "p",
      "p"
    ],
    "prngs": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "li"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "ol",
      "li"
    ],
    "software": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li"
    ],
    "produce": [
      "p"
    ],
    "considered": [
      "p"
    ],
    "have": [
      "p",
      "p"
    ],
    "sufficient": [
      "p"
    ],
    "suitable": [
      "p"
    ],
    "in": [
      "p",
      "ul",
      "li"
    ],
    "using": [
      "p",
      "ul",
      "li"
    ],
    "low": [
      "p"
    ],
    "likely": [
      "p"
    ],
    "make": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "resulting": [
      "p"
    ],
    "cryptographic": [
      "p"
    ],
    "solution": [
      "p",
      "p"
    ],
    "easier": [
      "p"
    ],
    "break": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "thus": [
      "p"
    ],
    "compromise": [
      "p"
    ],
    "data": [
      "p",
      "ol",
      "li"
    ],
    "authentication": [
      "p"
    ],
    "mechanism": [
      "p"
    ],
    "how": [
      "h2",
      "h2"
    ],
    "verify": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "find": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li"
    ],
    "uses": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li"
    ],
    "review": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "spreadsheet": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "your": [
      "ol",
      "li"
    ],
    "/dev/urandom": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "unix/linux": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "platforms": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "capicom": [
      "ol",
      "li"
    ],
    "getrandom)": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li"
    ],
    "function": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li"
    ],
    "windows": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "ul",
      "li"
    ],
    "fix": [
      "h2"
    ],
    "update": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "each": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "piece": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "this": [
      "ol",
      "li"
    ],
    "open": [
      "ol",
      "li"
    ],
    "as": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "file": [
      "ol",
      "li"
    ],
    "read": [
      "ol",
      "li"
    ],
    "required": [
      "ol",
      "li"
    ],
    "amount": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "bytes": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "os": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "prng": [
      "ol",
      "li",
      "strong",
      "title"
    ],
    "apis": [
      "ol",
      "li"
    ],
    "call": [
      "ol",
      "li"
    ],
    "from": [
      "ol",
      "li"
    ],
    "capicomutilities.1": [
      "ol",
      "li"
    ],
    "library": [
      "ol",
      "li"
    ],
    "follows": [
      "ol",
      "li"
    ],
    "$capi_library": [
      "ol",
      "li",
      "em"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "li",
      "em",
      "em"
    ],
    "new": [
      "ol",
      "li",
      "em"
    ],
    "com'capicom.utilities.1');": [
      "ol",
      "li",
      "em"
    ],
    "$randomdata": [
      "ol",
      "li",
      "em"
    ],
    "$capi_library-getrandom(32,0);": [
      "ol",
      "li",
      "em"
    ],
    "where": [
      "ol",
      "li"
    ],
    "first": [
      "ol",
      "li"
    ],
    "parameter": [
      "ol",
      "li"
    ],
    "needed": [
      "ol",
      "li"
    ],
    "additional": [
      "h2"
    ],
    "sources": [
      "h2"
    ],
    "example": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "http//www.php.net/manual/en/function.mt-rand.php#83655": [
      "ul",
      "li",
      "a"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/aa388176%28vs.85%29.aspx": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Additional Sources"
    ],
    "ul": [
      "PHP",
      "For a code example of using strong PRNGs in PHP, see http://www.php.net/manual/en/function.mt-rand.php#83655\n For more information about the GetRandom() function on Windows, see http://msdn.microsoft.com/en-us/library/aa388176%28VS.85%29.aspx"
    ],
    "li": [
      "PHP",
      "Find code that uses PRNGs. Review all code that uses cryptography to find code that uses pseudo-random numbers. Make a spreadsheet of all the code that uses pseudo-random numbers for cryptography.",
      "Verify that cryptographically strong PRNGs are used. Verify that your code uses /dev/urandom for PRNGs on Unix/Linux platforms and the CAPICOM GetRandom() function on Windows.",
      "Find code that uses PRNGs. Review all code that uses cryptography to find code that uses pseudo-random numbers. Make a spreadsheet of all the code that uses pseudo-random numbers for cryptography.",
      "Use /dev/urandom on Unix/Linux. On Unix/Linux platforms, update all code that uses PRNGs for cryptography to use /dev/urandom. Update each piece of this code to open /dev/urandom as a file and read the required amount of bytes to use as the pseudo-random number.",
      "Use the OS PRNG on Windows. On Windows platforms, update all code that uses PRNGs for cryptography to use OS APIs. Update each piece of code to call the GetRandom() function from the CAPICOM.Utilities.1 library, as follows:  $CAPI_LIBRARY = new COM('CAPICOM.Utilities.1'); $randomdata = $CAPI_LIBRARY->GetRandom(32,0);  where the first parameter to the GetRandom() function is the amount of bytes of random data that are needed.",
      "For a code example of using strong PRNGs in PHP, see http://www.php.net/manual/en/function.mt-rand.php#83655",
      "For more information about the GetRandom() function on Windows, see http://msdn.microsoft.com/en-us/library/aa388176%28VS.85%29.aspx"
    ],
    "p": [
      "Use a cryptographically strong pseudo-random number generator (PRNG) for cryptography.",
      "Most common encryption algorithms rely on difficult to predict random numbers to be used properly. The level of difficulty to predict or enumerate the output of a random number generator is called its entropy. Cryptographically strong PRNGs are software algorithms that produce pseudo-random numbers considered to have sufficient entropy to be suitable for use in cryptography. Using PRNGs that have low entropy is likely to make the resulting cryptographic solution easier to break and thus compromise the data or the authentication mechanism that the solution is used for.",
      "To verify that cryptographically strong PRNGs are used for cryptography:",
      "To use cryptographically strong PRNGs:"
    ],
    "ol": [
      "Find code that uses PRNGs. Review all code that uses cryptography to find code that uses pseudo-random numbers. Make a spreadsheet of all the code that uses pseudo-random numbers for cryptography. \n Verify that cryptographically strong PRNGs are used. Verify that your code uses /dev/urandom for PRNGs on Unix/Linux platforms and the CAPICOM GetRandom() function on Windows.",
      "Find code that uses PRNGs. Review all code that uses cryptography to find code that uses pseudo-random numbers. Make a spreadsheet of all the code that uses pseudo-random numbers for cryptography. \n Use /dev/urandom on Unix/Linux. On Unix/Linux platforms, update all code that uses PRNGs for cryptography to use /dev/urandom. Update each piece of this code to open /dev/urandom as a file and read the required amount of bytes to use as the pseudo-random number.\n Use the OS PRNG on Windows. On Windows platforms, update all code that uses PRNGs for cryptography to use OS APIs. Update each piece of code to call the GetRandom() function from the CAPICOM.Utilities.1 library, as follows:  $CAPI_LIBRARY = new COM('CAPICOM.Utilities.1'); $randomdata = $CAPI_LIBRARY->GetRandom(32,0);  where the first parameter to the GetRandom() function is the amount of bytes of random data that are needed."
    ],
    "strong": [
      "Find code that uses PRNGs.",
      "Verify that cryptographically strong PRNGs are used.",
      "Find code that uses PRNGs.",
      "Use /dev/urandom on Unix/Linux.",
      "Use the OS PRNG on Windows."
    ],
    "em": [
      "$CAPI_LIBRARY = new COM('CAPICOM.Utilities.1'); $randomdata = $CAPI_LIBRARY->GetRandom(32,0);"
    ],
    "a": [
      "http://www.php.net/manual/en/function.mt-rand.php#83655",
      "http://msdn.microsoft.com/en-us/library/aa388176%28VS.85%29.aspx"
    ]
  },
  "links": [
    {
      "href": "http://www.php.net/manual/en/function.mt-rand.php#83655",
      "text": "http://www.php.net/manual/en/function.mt-rand.php#83655"
    },
    {
      "href": "http://msdn.microsoft.com/en-us/library/aa388176%28VS.85%29.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/aa388176%28VS.85%29.aspx"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> PHP</li>\n</ul><h2>What to Check For</h2><p>Use a cryptographically strong pseudo-random number generator (PRNG) for cryptography.\n</p><h2>Why</h2><p>Most common encryption algorithms rely on difficult to predict random numbers to be used properly. The level of difficulty to predict or enumerate the output of a random number generator is called its entropy. Cryptographically strong PRNGs are software algorithms that produce pseudo-random numbers considered to have sufficient entropy to be suitable for use in cryptography. Using PRNGs that have low entropy is likely to make the resulting cryptographic solution easier to break and thus compromise the data or the authentication mechanism that the solution is used for.\n</p><h2>How to Check</h2><p>To verify that cryptographically strong PRNGs are used for cryptography:\n</p><ol>\n<li> <strong>Find code that uses PRNGs.</strong> Review all code that uses cryptography to find code that uses pseudo-random numbers. Make a spreadsheet of all the code that uses pseudo-random numbers for cryptography. </li>\n<li> <strong>Verify that cryptographically strong PRNGs are used.</strong> Verify that your code uses /dev/urandom for PRNGs on Unix/Linux platforms and the CAPICOM GetRandom() function on Windows.</li>\n</ol>\n<h2>How to Fix</h2><p>To use cryptographically strong PRNGs:\n</p><ol>\n<li> <strong>Find code that uses PRNGs.</strong> Review all code that uses cryptography to find code that uses pseudo-random numbers. Make a spreadsheet of all the code that uses pseudo-random numbers for cryptography. </li>\n<li> <strong>Use /dev/urandom on Unix/Linux.</strong> On Unix/Linux platforms, update all code that uses PRNGs for cryptography to use /dev/urandom. Update each piece of this code to open /dev/urandom as a file and read the required amount of bytes to use as the pseudo-random number.</li>\n<li> <strong>Use the OS PRNG on Windows.</strong> On Windows platforms, update all code that uses PRNGs for cryptography to use OS APIs. Update each piece of code to call the GetRandom() function from the CAPICOM.Utilities.1 library, as follows: <em> $CAPI_LIBRARY = new COM('CAPICOM.Utilities.1'); $randomdata = $CAPI_LIBRARY-&gt;GetRandom(32,0); </em> where the first parameter to the GetRandom() function is the amount of bytes of random data that are needed.</li>\n</ol>\n<h2>Additional Sources</h2><ul><li> For a code example of using strong PRNGs in PHP, see <a href=\"http://www.php.net/manual/en/function.mt-rand.php#83655\">http://www.php.net/manual/en/function.mt-rand.php#83655</a></li>\n<li> For more information about the GetRandom() function on Windows, see <a href=\"http://msdn.microsoft.com/en-us/library/aa388176%28VS.85%29.aspx\">http://msdn.microsoft.com/en-us/library/aa388176%28VS.85%29.aspx</a></li>\n</ul>"
}