{
  "id": "af63282b-16a5-4319-82d4-d5110475db2b",
  "checksum": "1c4491b1028733352a3f4486086bb8ddfbd64f5f",
  "words": {
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "aspnet": [
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "what": [
      "h1",
      "p",
      "ol",
      "li",
      "p"
    ],
    "check": [
      "h1",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "for": [
      "h1",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "ensure": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "title"
    ],
    "does": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "pre",
      "p",
      "title"
    ],
    "not": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "pre",
      "li",
      "p",
      "p",
      "title"
    ],
    "rely": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "solely": [
      "p",
      "p"
    ],
    "upon": [
      "p",
      "p"
    ],
    "request": [
      "p",
      "p",
      "p",
      "title"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "title"
    ],
    "protect": [
      "p"
    ],
    "against": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "malicious": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "why": [
      "h1"
    ],
    "will": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "catch": [
      "p"
    ],
    "some": [
      "p"
    ],
    "attacks": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "however": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "provides": [
      "p"
    ],
    "only": [
      "p",
      "p",
      "title"
    ],
    "basic": [
      "p"
    ],
    "do": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "on": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "title"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "extra": [
      "p"
    ],
    "precautionary": [
      "p"
    ],
    "measure": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "addition": [
      "p"
    ],
    "own": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "em"
    ],
    "can": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "define": [
      "p"
    ],
    "represents": [
      "p"
    ],
    "good": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "how": [
      "h1",
      "h1",
      "ol",
      "li",
      "p"
    ],
    "this": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "problem": [
      "p"
    ],
    "must": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "determine": [
      "p"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "relying": [
      "p"
    ],
    "provide": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "data": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "following": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "steps": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "find": [
      "ol",
      "li",
      "p",
      "strong",
      "em"
    ],
    "all": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "sources": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "during": [
      "ol",
      "li",
      "p"
    ],
    "design": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "time": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "potential": [
      "ol",
      "li",
      "p"
    ],
    "scour": [
      "ol",
      "li",
      "p"
    ],
    "source": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "discover": [
      "ol",
      "li",
      "p"
    ],
    "may": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "em"
    ],
    "have": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "been": [
      "ol",
      "li",
      "p"
    ],
    "missed": [
      "ol",
      "li",
      "p"
    ],
    "compile": [
      "ol",
      "li",
      "p"
    ],
    "a": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "list": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "routines": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "each": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "routine": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "associated": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "with": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "it ideally": [
      "ol",
      "li",
      "p"
    ],
    "occur": [
      "ol",
      "li",
      "p"
    ],
    "soon": [
      "ol",
      "li",
      "p"
    ],
    "after": [
      "ol",
      "li",
      "p"
    ],
    "reaches": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "shared": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "better": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "p"
    ],
    "many": [
      "ol",
      "li",
      "p"
    ],
    "spread": [
      "ol",
      "li",
      "p"
    ],
    "throughout": [
      "ol",
      "li",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "consolidation": [
      "ol",
      "li",
      "p"
    ],
    "aid": [
      "ol",
      "li",
      "p"
    ],
    "testing": [
      "ol",
      "li",
      "p"
    ],
    "reduce": [
      "ol",
      "li",
      "p"
    ],
    "chance": [
      "ol",
      "li",
      "p"
    ],
    "one-off": [
      "ol",
      "li",
      "p"
    ],
    "bugs": [
      "ol",
      "li",
      "p"
    ],
    "flag": [
      "ol",
      "li",
      "p"
    ],
    "fixing": [
      "ol",
      "li",
      "p"
    ],
    "quality": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "routines should": [
      "ol",
      "li",
      "p"
    ],
    "length": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "range": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "format": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "type": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "a"
    ],
    "first for": [
      "ol",
      "li",
      "p"
    ],
    "known": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "valid": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "safe": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "then": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "dangerous": [
      "ol",
      "li",
      "p"
    ],
    "filtering": [
      "ol",
      "li",
      "p"
    ],
    "out": [
      "ol",
      "li",
      "p"
    ],
    "because it": [
      "ol",
      "li",
      "p"
    ],
    "too": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "easy": [
      "ol",
      "li",
      "p"
    ],
    "miss": [
      "ol",
      "li",
      "p"
    ],
    "something": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "client-side": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "alone": [
      "ol",
      "li",
      "p"
    ],
    "be": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "easily": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "bypassed": [
      "ol",
      "li",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "validate": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p"
    ],
    "validated": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "server": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "security": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "checks": [
      "ol",
      "li",
      "p"
    ],
    "while": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "useful": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "user": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "experience": [
      "ol",
      "li",
      "p"
    ],
    "reasons": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "client": [
      "ol",
      "li",
      "p"
    ],
    "side": [
      "ol",
      "li",
      "p"
    ],
    "especially": [
      "ol",
      "li",
      "p"
    ],
    "things": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "like": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "web": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "applications": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "high": [
      "ol",
      "li",
      "p"
    ],
    "round-trip": [
      "ol",
      "li",
      "p"
    ],
    "latencies": [
      "ol",
      "li",
      "p"
    ],
    "sufficient": [
      "ol",
      "li",
      "p"
    ],
    "guarantees": [
      "ol",
      "li",
      "p"
    ],
    "circumvented": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "attacker": [
      "ol",
      "li",
      "p"
    ],
    "constrain": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "validating": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "form": [
      "ol",
      "li",
      "p"
    ],
    "obtain": [
      "ol",
      "li",
      "p"
    ],
    "through": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "controls": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "validator": [
      "ol",
      "li",
      "p"
    ],
    "such": [
      "ol",
      "li",
      "p"
    ],
    "regularexpressionvalidator": [
      "ol",
      "li",
      "p"
    ],
    "rangevalidator": [
      "ol",
      "li",
      "p"
    ],
    "customvalidator": [
      "ol",
      "li",
      "p"
    ],
    "under": [
      "ol",
      "li",
      "p"
    ],
    "control": [
      "ol",
      "li",
      "p"
    ],
    "system": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "but": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "coming": [
      "ol",
      "li",
      "p"
    ],
    "directly": [
      "ol",
      "li",
      "p"
    ],
    "users": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "receive": [
      "ol",
      "li",
      "p"
    ],
    "most": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "attention": [
      "ol",
      "li",
      "p"
    ],
    "accept": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "various": [
      "ol",
      "li",
      "p"
    ],
    "including": [
      "ol",
      "li",
      "p"
    ],
    "html": [
      "ol",
      "li",
      "p"
    ],
    "query": [
      "ol",
      "li",
      "p"
    ],
    "strings": [
      "ol",
      "li",
      "p"
    ],
    "cookies": [
      "ol",
      "li",
      "p"
    ],
    "these": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "em"
    ],
    "help": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "prevent": [
      "ol",
      "li",
      "p"
    ],
    "injection": [
      "ol",
      "li",
      "p"
    ],
    "regular": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "li",
      "p"
    ],
    "expressions": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "general": [
      "ol",
      "li",
      "p"
    ],
    "least": [
      "ol",
      "li",
      "p"
    ],
    "permissive": [
      "ol",
      "li",
      "p"
    ],
    "expression": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "expect": [
      "ol",
      "li",
      "p"
    ],
    "field": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "know": [
      "ol",
      "li",
      "p"
    ],
    "certain": [
      "ol",
      "li",
      "p"
    ],
    "internal": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "structure": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "there": [
      "ol",
      "li",
      "p"
    ],
    "standard": [
      "ol",
      "li",
      "p"
    ],
    "formats": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "which": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "enter": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "converted": [
      "ol",
      "li",
      "p"
    ],
    "single": [
      "ol",
      "li",
      "p"
    ],
    "so the": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "p"
    ],
    "shows": [
      "ol",
      "li",
      "p"
    ],
    "regex": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "class": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "using": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p"
    ],
    "systemtext.regularexpressions;//": [
      "ol",
      "li",
      "pre"
    ],
    "instance": [
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p",
      "li",
      "p"
    ],
    "methodregex": [
      "ol",
      "li",
      "pre"
    ],
    "reg": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "li",
      "pre"
    ],
    "new": [
      "ol",
      "li",
      "pre"
    ],
    "regex@\"^[a-za-z'.\\s]{1,40}$\");response.write(reg.ismatch(request.querystring[\"name\"]));//": [
      "ol",
      "li",
      "pre"
    ],
    "static": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "p"
    ],
    "methodif": [
      "ol",
      "li",
      "pre"
    ],
    "!regex.ismatch(request.querystring[\"name\"],@\"^[a-za-z'.\\s]{1,40}$\")){": [
      "ol",
      "li",
      "pre"
    ],
    "//": [
      "ol",
      "li",
      "pre"
    ],
    "name": [
      "ol",
      "li",
      "pre"
    ],
    "match": [
      "ol",
      "li",
      "pre"
    ],
    "expression}": [
      "ol",
      "li",
      "pre"
    ],
    "cannot": [
      "ol",
      "li",
      "p"
    ],
    "cache": [
      "ol",
      "li",
      "p"
    ],
    "frequent": [
      "ol",
      "li",
      "p"
    ],
    "ismatch": [
      "ol",
      "li",
      "p"
    ],
    "method": [
      "ol",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "performance": [
      "ol",
      "li",
      "p"
    ],
    "avoid": [
      "ol",
      "li",
      "p"
    ],
    "unnecessary": [
      "ol",
      "li",
      "p"
    ],
    "object": [
      "ol",
      "li",
      "p"
    ],
    "creation": [
      "ol",
      "li",
      "p"
    ],
    "numeric": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "fields": [
      "ol",
      "li",
      "p"
    ],
    "ranges": [
      "ol",
      "li",
      "p"
    ],
    "converting": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "li",
      "p"
    ],
    "integer": [
      "ol",
      "li",
      "p"
    ],
    "or": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "double": [
      "ol",
      "li",
      "p"
    ],
    "ensuring": [
      "ol",
      "li",
      "p"
    ],
    "conversion": [
      "ol",
      "li",
      "p"
    ],
    "was": [
      "ol",
      "li",
      "p"
    ],
    "performing": [
      "ol",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "checksum": [
      "ol",
      "li",
      "p"
    ],
    "credit": [
      "ol",
      "li",
      "p"
    ],
    "card": [
      "ol",
      "li",
      "p"
    ],
    "number": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "address": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "fairly": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "rich": [
      "ol",
      "li",
      "p"
    ],
    "more": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "understands": [
      "ol",
      "li",
      "p"
    ],
    "you'll": [
      "ol",
      "li",
      "p"
    ],
    "able": [
      "ol",
      "li",
      "p"
    ],
    "information": [
      "ol",
      "li",
      "p"
    ],
    "phone": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "numbers": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "string": [
      "ol",
      "li",
      "p"
    ],
    "ten": [
      "ol",
      "li",
      "p"
    ],
    "digits": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "variable": [
      "ol",
      "li",
      "p"
    ],
    "beginning": [
      "ol",
      "li",
      "p"
    ],
    "character": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "'+'": [
      "ol",
      "li",
      "p"
    ],
    "international": [
      "ol",
      "li",
      "p"
    ],
    "allowed": [
      "ol",
      "li",
      "p"
    ],
    "needed": [
      "ol",
      "li",
      "p"
    ],
    "country": [
      "ol",
      "li",
      "p"
    ],
    "determined": [
      "ol",
      "li",
      "p"
    ],
    "exact": [
      "ol",
      "li",
      "p"
    ],
    "looked": [
      "ol",
      "li",
      "p"
    ],
    "up": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "written": [
      "ol",
      "li",
      "p"
    ],
    "several": [
      "ol",
      "li",
      "p"
    ],
    "different": [
      "ol",
      "li",
      "p"
    ],
    "ways": [
      "ol",
      "li",
      "p"
    ],
    "canonical": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "representation": [
      "ol",
      "li",
      "p"
    ],
    "created": [
      "ol",
      "li",
      "p"
    ],
    "stripping": [
      "ol",
      "li",
      "p"
    ],
    "non-numeric": [
      "ol",
      "li",
      "p"
    ],
    "characters": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "before": [
      "ol",
      "li",
      "p"
    ],
    "save": [
      "ol",
      "li",
      "p"
    ],
    "frustration": [
      "ol",
      "li",
      "p"
    ],
    "they": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "into": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "site": [
      "ol",
      "li",
      "p"
    ],
    "street": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "addresses": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "require": [
      "ol",
      "li",
      "p"
    ],
    "little": [
      "ol",
      "li",
      "p"
    ],
    "bit": [
      "ol",
      "li",
      "p"
    ],
    "care": [
      "ol",
      "li",
      "p"
    ],
    "taken": [
      "ol",
      "li",
      "p"
    ],
    "divided": [
      "ol",
      "li",
      "p"
    ],
    "city": [
      "ol",
      "li",
      "p"
    ],
    "etc,": [
      "ol",
      "li",
      "p"
    ],
    "seperate": [
      "ol",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "li",
      "p"
    ],
    "defined--city": [
      "ol",
      "li",
      "p"
    ],
    "names": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "don't": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "need": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "straightforward": [
      "ol",
      "li",
      "p"
    ],
    "one": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "cases": [
      "ol",
      "li",
      "p"
    ],
    "\"'\"": [
      "ol",
      "li",
      "p"
    ],
    "thus": [
      "ol",
      "li",
      "p"
    ],
    "handled": [
      "ol",
      "li",
      "p"
    ],
    "appropriately": [
      "ol",
      "li",
      "p"
    ],
    "at": [
      "ol",
      "li",
      "p"
    ],
    "database": [
      "ol",
      "li",
      "p"
    ],
    "level": [
      "ol",
      "li",
      "p"
    ],
    "also": [
      "ol",
      "li",
      "p"
    ],
    "forget": [
      "ol",
      "li",
      "p"
    ],
    "allow": [
      "ol",
      "li",
      "p"
    ],
    "accented": [
      "ol",
      "li",
      "p"
    ],
    "depending": [
      "ol",
      "li",
      "p"
    ],
    "current": [
      "ol",
      "li",
      "p"
    ],
    "page": [
      "ol",
      "li",
      "p"
    ],
    "reference": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "refers": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "other": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "go": [
      "ol",
      "li",
      "p"
    ],
    "final": [
      "ol",
      "li",
      "p"
    ],
    "step": [
      "ol",
      "li",
      "p"
    ],
    "namely": [
      "ol",
      "li",
      "p"
    ],
    "looking": [
      "ol",
      "li",
      "p"
    ],
    "insure": [
      "ol",
      "li",
      "p"
    ],
    "postal": [
      "ol",
      "li",
      "p"
    ],
    "codes": [
      "ol",
      "li",
      "p"
    ],
    "correctness": [
      "ol",
      "li",
      "p"
    ],
    "aspects": [
      "ol",
      "li",
      "p"
    ],
    "cross-checked": [
      "ol",
      "li",
      "p"
    ],
    "order": [
      "ol",
      "li",
      "p"
    ],
    "management": [
      "ol",
      "li",
      "p"
    ],
    "item": [
      "ol",
      "li",
      "p"
    ],
    "ids": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "checked": [
      "ol",
      "li",
      "p"
    ],
    "note": [
      "p",
      "strong"
    ],
    "remove": [
      "p"
    ],
    "output": [
      "p"
    ],
    "parametrize": [
      "p"
    ],
    "queries": [
      "p"
    ],
    "otherwise": [
      "p"
    ],
    "handle": [
      "p"
    ],
    "carefully": [
      "p"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "additional": [
      "em"
    ],
    "articles": [
      "em"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "What to Check For",
      "Why",
      "How To Check",
      "How To Fix",
      "Related Items",
      "",
      ""
    ],
    "ul": [
      "ASP.NET 4.0",
      "Validate Input from All Sources for Type, Length, Format, and Range"
    ],
    "li": [
      "ASP.NET 4.0",
      "Find all sources of input in your application. During design time identify all of the potential sources of input to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps.",
      "Identify validation routines. Each input source should have a data validation routine associated with it. Ideally the validation will occur as soon after the input reaches your application as possible. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.",
      "Ensure quality of validation routines. Validation routines should check for length, range, format, and type. Validation should check first for known valid and safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data because it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed.",
      "Identify data to validate. Input must be validated on the server for security checks.  While it can be useful for user experience reasons to check the input on the client side, especially on things like web applications with high round-trip latencies, this client-side validation is not sufficient to provide security guarantees, as it can be circumvented by the attacker. Check for known good data and constrain input by validating it for type, length, format, and range. For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input. All input not under control of the system should be validated, but input coming directly from users must be validated and should receive the most attention. Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks.",
      "Use regular expressions. Use regular expressions to help validate input. In general, validate your input against the least permissive expression possible that will accept all the input you expect for that field. If you know that the field will have certain internal structure, check for it. If there is a range of standard formats which your users may enter data in, but these formats are easily converted to a single internal format, do so. The following example shows how to use the Regex class. \r\n      using System.Text.RegularExpressions;// Instance method:Regex reg = new Regex(@\"^[a-zA-Z'.\\s]{1,40}$\");Response.Write(reg.IsMatch(Request.QueryString[\"Name\"]));// Static method:if (!Regex.IsMatch(Request.QueryString[\"Name\"],@\"^[a-zA-Z'.\\s]{1,40}$\")){   // Name does not match expression}\r\n      If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation.",
      "Validate numeric data. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class, and you can validate numeric ranges by converting the input value to an integer or double, ensuring the conversion was valid, and then performing a range check. If your input has an internal checksum, like a credit card number, check that too.",
      "Validate address data. Address data has a fairly rich internal structure; the more of this structure your validation routine understands, the better you'll be able to validate the information. Phone numbers can be validated as a string of ten digits, or a variable number of digits beginning with the character '+' if international numbers are allowed. If needed, the country code can be determined and the exact number format looked up. While phone numbers are written several different ways, a canonical representation can be created by stripping all non-numeric characters before validation, something which will save your users time and frustration as they enter data into your site. Street addresses require a little bit more care; if the input is taken in divided into street, city, etc., each field can have a seperate safe character set defined--city names don't need numbers, for instance. Names are fairly straightforward, but are one of the cases where the \"'\" character is valid input, and thus they must be handled appropriately (as all input should be) at the database level. Also, don't forget to allow accented characters in names and addresses, depending on your current code page.",
      "Validate reference data. Data that refers to other things can go through one final step of validation, namely looking up what it refers to insure that the reference is valid. For instance, postal codes can be validated against a canonical list to ensure correctness, and other aspects of the street address cross-checked with that. In an order management system, item IDs can be checked against a list of valid IDs.",
      "Validate Input from All Sources for Type, Length, Format, and Range"
    ],
    "p": [
      "Ensure that your application does not rely solely upon ASP.NET request validation to protect against malicious input.",
      "Request validation will catch some attacks; however, it provides only basic input validation. Do not rely on it. Use it as an extra precautionary measure in addition to your own input validation. Only you can define what represents good input for your application.",
      "To check for this problem, you must determine if your application is relying solely upon request validation to provide input and data validation. Use the following steps:",
      "Find all sources of input in your application. During design time identify all of the potential sources of input to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps.",
      "Identify validation routines. Each input source should have a data validation routine associated with it. Ideally the validation will occur as soon after the input reaches your application as possible. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.",
      "",
      "Ensure quality of validation routines. Validation routines should check for length, range, format, and type. Validation should check first for known valid and safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data because it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed.",
      "",
      "Perform the following actions to validate input from all sources:",
      "Identify data to validate. Input must be validated on the server for security checks.  While it can be useful for user experience reasons to check the input on the client side, especially on things like web applications with high round-trip latencies, this client-side validation is not sufficient to provide security guarantees, as it can be circumvented by the attacker. Check for known good data and constrain input by validating it for type, length, format, and range. For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input. All input not under control of the system should be validated, but input coming directly from users must be validated and should receive the most attention. Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks.",
      "Use regular expressions. Use regular expressions to help validate input. In general, validate your input against the least permissive expression possible that will accept all the input you expect for that field. If you know that the field will have certain internal structure, check for it. If there is a range of standard formats which your users may enter data in, but these formats are easily converted to a single internal format, do so. The following example shows how to use the Regex class.",
      "If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation.",
      "Validate numeric data. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class, and you can validate numeric ranges by converting the input value to an integer or double, ensuring the conversion was valid, and then performing a range check. If your input has an internal checksum, like a credit card number, check that too.",
      "Validate address data. Address data has a fairly rich internal structure; the more of this structure your validation routine understands, the better you'll be able to validate the information. Phone numbers can be validated as a string of ten digits, or a variable number of digits beginning with the character '+' if international numbers are allowed. If needed, the country code can be determined and the exact number format looked up. While phone numbers are written several different ways, a canonical representation can be created by stripping all non-numeric characters before validation, something which will save your users time and frustration as they enter data into your site. Street addresses require a little bit more care; if the input is taken in divided into street, city, etc., each field can have a seperate safe character set defined--city names don't need numbers, for instance. Names are fairly straightforward, but are one of the cases where the \"'\" character is valid input, and thus they must be handled appropriately (as all input should be) at the database level. Also, don't forget to allow accented characters in names and addresses, depending on your current code page.",
      "Validate reference data. Data that refers to other things can go through one final step of validation, namely looking up what it refers to insure that the reference is valid. For instance, postal codes can be validated against a canonical list to ensure correctness, and other aspects of the street address cross-checked with that. In an order management system, item IDs can be checked against a list of valid IDs.",
      "Note: Validating input does not remove the need to format output, parametrize queries, or otherwise handle user input carefully.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "Find all sources of input in your application. During design time identify all of the potential sources of input to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps. \r\n    \r\n    \r\n      \r\n        Identify validation routines. Each input source should have a data validation routine associated with it. Ideally the validation will occur as soon after the input reaches your application as possible. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.\r\n      \r\n    \r\n    \r\n      \r\n        Ensure quality of validation routines. Validation routines should check for length, range, format, and type. Validation should check first for known valid and safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data because it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed.",
      "Identify data to validate. Input must be validated on the server for security checks.  While it can be useful for user experience reasons to check the input on the client side, especially on things like web applications with high round-trip latencies, this client-side validation is not sufficient to provide security guarantees, as it can be circumvented by the attacker. Check for known good data and constrain input by validating it for type, length, format, and range. For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input. All input not under control of the system should be validated, but input coming directly from users must be validated and should receive the most attention. Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks. \r\n    \r\n    \r\n      \r\n        Use regular expressions. Use regular expressions to help validate input. In general, validate your input against the least permissive expression possible that will accept all the input you expect for that field. If you know that the field will have certain internal structure, check for it. If there is a range of standard formats which your users may enter data in, but these formats are easily converted to a single internal format, do so. The following example shows how to use the Regex class. \r\n      using System.Text.RegularExpressions;// Instance method:Regex reg = new Regex(@\"^[a-zA-Z'.\\s]{1,40}$\");Response.Write(reg.IsMatch(Request.QueryString[\"Name\"]));// Static method:if (!Regex.IsMatch(Request.QueryString[\"Name\"],@\"^[a-zA-Z'.\\s]{1,40}$\")){   // Name does not match expression}\r\n      If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation. \r\n    \r\n    \r\n      \r\n        Validate numeric data. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class, and you can validate numeric ranges by converting the input value to an integer or double, ensuring the conversion was valid, and then performing a range check. If your input has an internal checksum, like a credit card number, check that too.\r\n    \r\n    \r\n      \r\n        Validate address data. Address data has a fairly rich internal structure; the more of this structure your validation routine understands, the better you'll be able to validate the information. Phone numbers can be validated as a string of ten digits, or a variable number of digits beginning with the character '+' if international numbers are allowed. If needed, the country code can be determined and the exact number format looked up. While phone numbers are written several different ways, a canonical representation can be created by stripping all non-numeric characters before validation, something which will save your users time and frustration as they enter data into your site. Street addresses require a little bit more care; if the input is taken in divided into street, city, etc., each field can have a seperate safe character set defined--city names don't need numbers, for instance. Names are fairly straightforward, but are one of the cases where the \"'\" character is valid input, and thus they must be handled appropriately (as all input should be) at the database level. Also, don't forget to allow accented characters in names and addresses, depending on your current code page.\r\n    \r\n    \r\n      \r\n        Validate reference data. Data that refers to other things can go through one final step of validation, namely looking up what it refers to insure that the reference is valid. For instance, postal codes can be validated against a canonical list to ensure correctness, and other aspects of the street address cross-checked with that. In an order management system, item IDs can be checked against a list of valid IDs."
    ],
    "strong": [
      "Find all sources of input in your application.",
      "Identify validation routines.",
      "Ensure quality of validation routines.",
      "Identify data to validate.",
      "Use regular expressions.",
      "Validate numeric data.",
      "Validate address data.",
      "Validate reference data.",
      "Note:"
    ],
    "pre": [
      "using System.Text.RegularExpressions;// Instance method:Regex reg = new Regex(@\"^[a-zA-Z'.\\s]{1,40}$\");Response.Write(reg.IsMatch(Request.QueryString[\"Name\"]));// Static method:if (!Regex.IsMatch(Request.QueryString[\"Name\"],@\"^[a-zA-Z'.\\s]{1,40}$\")){   // Name does not match expression}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "em": [
      "You may find these additional articles useful"
    ],
    "a": [
      "Validate Input from All Sources for Type, Length, Format, and Range"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "/article/d71b059a-6695-4a02-9c58-30a9e594fca8",
      "text": "Validate Input from All Sources for Type, Length, Format, and Range"
    }
  ],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Ensure that your application does not rely solely upon ASP.NET request validation to protect against malicious input.</p>\r\n  <h1>Why</h1>\r\n  <p>Request validation will catch some attacks; however, it provides only basic input validation. Do not rely on it. Use it as an extra precautionary measure in addition to your own input validation. Only you can define what represents good input for your application. </p>\r\n  <h1>How To Check</h1>\r\n  <p>To check for this problem, you must determine if your application is relying solely upon request validation to provide input and data validation. Use the following steps:&nbsp;</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Find all sources of input in your application.</strong> During design time identify all of the potential sources of input to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Identify validation routines.</strong> Each input source should have a data validation routine associated with it.&nbsp;Ideally the validation will occur as soon after the input reaches your application as possible. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.</p>\r\n      <p />\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure quality of validation routines.</strong> Validation routines&nbsp;should check for length, range, format, and type. Validation should check first&nbsp;for known valid and safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data because&nbsp;it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed.</p>\r\n      <p />\r\n    </li>\r\n  </ol>\r\n  <h1>How To Fix</h1>\r\n  <p>Perform the following actions to validate input from all sources:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify data to validate.</strong> Input must be validated on the server for security checks.&nbsp; While it can be useful for user experience reasons to check the input on the client side, especially on things like web applications with high round-trip latencies, this client-side validation is not sufficient to provide security guarantees, as it can be circumvented by the attacker. Check for known good data and constrain input by validating it for type, length, format, and range. For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input. All input not under control of the system should be validated, but input coming directly from users must be validated and should receive the most attention. Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use regular expressions.</strong> Use regular expressions to help validate input. In general, validate your input against the least permissive expression possible that will accept all the input you expect for that field. If you know that the field will have certain internal structure, check for it. If there is a range of standard formats which your users may enter data in, but these formats are easily converted to a single internal format, do so.&nbsp;The following example shows how to use the Regex class. </p>\r\n      <pre>using System.Text.RegularExpressions;<br />// Instance method:<br />Regex reg = new Regex(@\"^[a-zA-Z'.\\s]{1,40}$\");<br />Response.Write(reg.IsMatch(Request.QueryString[\"Name\"]));<br />// Static method:<br />if (!Regex.IsMatch(Request.QueryString[\"Name\"],@\"^[a-zA-Z'.\\s]{1,40}$\"))<br />{<br />&nbsp;&nbsp; // Name does not match expression<br />}</pre>\r\n      <p>If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation. </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Validate numeric data.</strong> Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class, and you can validate numeric ranges by converting the input value to an integer or double, ensuring the conversion was valid, and then performing a range check. If your input has an internal checksum, like a credit card number, check that too.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Validate address data.</strong> Address data has a fairly rich internal structure; the more of this structure your validation routine understands, the better you'll be able to validate the information. Phone numbers can be validated as a string of ten digits, or a variable number of digits beginning with the character '+' if international numbers are allowed. If needed, the country code can be determined and the exact number format looked up. While phone numbers are written several different ways, a canonical representation can be created by stripping all non-numeric characters before validation, something which will save your users time and frustration as they enter data into your site. Street addresses require a little bit more care; if the input is taken in divided into street, city, etc., each field can have a seperate safe character set defined--city names don't need numbers, for instance. Names are fairly straightforward, but are one of the cases where the \"'\" character is valid input, and thus they must be handled appropriately (as all input should be) at the database level. Also, don't forget to allow accented characters in names and addresses, depending on your current code page.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Validate reference data.</strong> Data that refers to other things can go through one final step of validation, namely looking up what it refers to insure that the reference is valid. For instance, postal codes can be validated against a canonical list to ensure correctness, and other aspects of the street address cross-checked with that. In an order management system, item IDs can be checked against a list of valid IDs.</p>\r\n    </li>\r\n  </ol>\r\n  <p>\r\n    <strong>Note:</strong> Validating input does not remove the need to format output, parametrize queries, or otherwise handle user input carefully.</p>\r\n  <h1>Related Items</h1>\r\n  <em>You may find these additional articles useful</em>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/d71b059a-6695-4a02-9c58-30a9e594fca8\">Validate Input from All Sources for Type, Length, Format, and Range</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\r\n  <h1>\r\n  </h1>\r\n  <h1>\r\n  </h1>"
}