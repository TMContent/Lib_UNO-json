{
  "id": "c57d013b-a931-430a-8f06-a16c3eb338e5",
  "checksum": "dfdb3d19782aa23c8e46976bf523c6c3ce4e8c4b",
  "words": {
    "0": [
      "ul",
      "li"
    ],
    "2": [
      "p"
    ],
    "3": [
      "p"
    ],
    "1000": [
      "ul",
      "li"
    ],
    "description": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "preferred": [
      "p",
      "p",
      "p"
    ],
    "approach": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "validating": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h3",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h3",
      "p",
      "h3",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "constrain": [
      "p",
      "ul",
      "li",
      "h3",
      "p",
      "title"
    ],
    "what": [
      "p",
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "allow": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "beginning": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "much": [
      "p"
    ],
    "easier": [
      "p"
    ],
    "validate": [
      "p",
      "p",
      "ul",
      "li",
      "h3",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "h3",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "for": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "h3",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "known": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h3",
      "ul",
      "li"
    ],
    "valid": [
      "p",
      "p",
      "p",
      "p"
    ],
    "types": [
      "p"
    ],
    "patterns": [
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "h3",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "ranges": [
      "p"
    ],
    "than": [
      "p",
      "p",
      "p",
      "p"
    ],
    "by": [
      "p",
      "p"
    ],
    "looking": [
      "p"
    ],
    "bad": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "h3",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "characters": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "design": [
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "know": [
      "p"
    ],
    "expects": [
      "p"
    ],
    "range": [
      "p",
      "ul",
      "li",
      "p",
      "h3",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "generally": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "more": [
      "p",
      "p",
      "p"
    ],
    "finite": [
      "p",
      "p"
    ],
    "set": [
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "potentially": [
      "p",
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "however": [
      "p",
      "p",
      "p"
    ],
    "defense": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h3",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "depth": [
      "p"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "also": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "want": [
      "p"
    ],
    "reject": [
      "p",
      "ul",
      "li",
      "p",
      "h3",
      "p",
      "ul",
      "li",
      "title"
    ],
    "then": [
      "p"
    ],
    "sanitize": [
      "p",
      "ul",
      "li",
      "h3",
      "p",
      "title"
    ],
    "create": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "effective": [
      "p",
      "p"
    ],
    "validation": [
      "p",
      "p",
      "p"
    ],
    "strategy": [
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "aware": [
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "approaches": [
      "p",
      "p"
    ],
    "their": [
      "p",
      "p",
      "p"
    ],
    "tradeoffs": [
      "p"
    ],
    "type": [
      "ul",
      "li",
      "p",
      "h3",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "length": [
      "ul",
      "li",
      "p",
      "h3",
      "p",
      "ul",
      "li"
    ],
    "format": [
      "ul",
      "li",
      "p",
      "h3",
      "p"
    ],
    "constraining": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "about": [
      "p",
      "p"
    ],
    "allowing": [
      "p"
    ],
    "good": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "define": [
      "p",
      "p"
    ],
    "filter": [
      "p"
    ],
    "acceptable": [
      "p",
      "p",
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "p"
    ],
    "fields": [
      "p",
      "p",
      "p",
      "p"
    ],
    "enforce": [
      "p"
    ],
    "everything": [
      "p"
    ],
    "else": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "involve": [
      "p"
    ],
    "setting": [
      "p"
    ],
    "character": [
      "p"
    ],
    "sets": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p"
    ],
    "server": [
      "p"
    ],
    "so": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "establish": [
      "p"
    ],
    "canonical": [
      "p"
    ],
    "form": [
      "p",
      "ul",
      "li"
    ],
    "localized": [
      "p"
    ],
    "way": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "strong": [
      "p",
      "p"
    ],
    "checking": [
      "p",
      "p",
      "p"
    ],
    "wherever": [
      "p"
    ],
    "possible": [
      "p"
    ],
    "such": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "classes": [
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "manipulate": [
      "p"
    ],
    "process": [
      "p"
    ],
    "access": [
      "p",
      "p"
    ],
    "routines": [
      "p"
    ],
    "example": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "parameterized": [
      "p"
    ],
    "stored": [
      "p"
    ],
    "procedures": [
      "p"
    ],
    "benefit": [
      "p"
    ],
    "length-check": [
      "p"
    ],
    "string": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "check": [
      "p",
      "p",
      "p"
    ],
    "appropriate": [
      "p",
      "ul",
      "li"
    ],
    "where": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "applicable": [
      "p"
    ],
    "zip": [
      "p"
    ],
    "codes": [
      "p"
    ],
    "personal": [
      "p"
    ],
    "identification": [
      "p"
    ],
    "numbers": [
      "p"
    ],
    "have": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "well": [
      "p",
      "ul",
      "li"
    ],
    "defined": [
      "p"
    ],
    "formats": [
      "p"
    ],
    "validated": [
      "p"
    ],
    "regular": [
      "p"
    ],
    "expressions": [
      "p"
    ],
    "thorough": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "only": [
      "p"
    ],
    "programming": [
      "p"
    ],
    "practice": [
      "p",
      "h3",
      "p"
    ],
    "makes": [
      "p"
    ],
    "difficult": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "exploit": [
      "p"
    ],
    "code": [
      "p"
    ],
    "get": [
      "p"
    ],
    "through": [
      "p"
    ],
    "but": [
      "p",
      "p"
    ],
    "make": [
      "p",
      "p"
    ],
    "executing": [
      "p"
    ],
    "his": [
      "p"
    ],
    "favorite": [
      "p",
      "p"
    ],
    "attack": [
      "p"
    ],
    "deny": [
      "p",
      "p"
    ],
    "\"bad\"": [
      "p"
    ],
    "--": [
      "p"
    ],
    "do": [
      "p",
      "p"
    ],
    "rely": [
      "p"
    ],
    "completely": [
      "p"
    ],
    "less": [
      "p"
    ],
    "\"allow\"": [
      "p",
      "p",
      "p"
    ],
    "described": [
      "p",
      "ul",
      "li"
    ],
    "earlier": [
      "p",
      "ul",
      "li"
    ],
    "best": [
      "p"
    ],
    "combination": [
      "p"
    ],
    "assumes": [
      "p"
    ],
    "knows": [
      "p"
    ],
    "all": [
      "p",
      "ul",
      "li"
    ],
    "variations": [
      "p"
    ],
    "remember": [
      "p"
    ],
    "there": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "multiple": [
      "p"
    ],
    "ways": [
      "p"
    ],
    "represent": [
      "p"
    ],
    "another": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "reason": [
      "p"
    ],
    "why": [
      "p"
    ],
    "\"deny\"": [
      "p"
    ],
    "useful": [
      "p"
    ],
    "applications": [
      "p",
      "p",
      "p"
    ],
    "already": [
      "p"
    ],
    "deployed": [
      "p"
    ],
    "cannot": [
      "p",
      "p"
    ],
    "afford": [
      "p"
    ],
    "significant": [
      "p"
    ],
    "changes": [
      "p"
    ],
    "robust": [
      "p"
    ],
    "because": [
      "p",
      "p"
    ],
    "identify": [
      "p"
    ],
    "common": [
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "attacks": [
      "p"
    ],
    "remain": [
      "p"
    ],
    "constant": [
      "p",
      "p"
    ],
    "remains": [
      "p"
    ],
    "while": [
      "p",
      "p"
    ],
    "change": [
      "p"
    ],
    "over": [
      "p"
    ],
    "time": [
      "p"
    ],
    "sanitizing": [
      "p",
      "p",
      "p"
    ],
    "making": [
      "p"
    ],
    "safe": [
      "p",
      "p",
      "p"
    ],
    "helpful": [
      "p"
    ],
    "allowed": [
      "p",
      "ul",
      "li"
    ],
    "guarantee": [
      "p"
    ],
    "includes": [
      "p"
    ],
    "anything": [
      "p"
    ],
    "stripping": [
      "p"
    ],
    "null": [
      "p"
    ],
    "end": [
      "p"
    ],
    "user-supplied": [
      "p"
    ],
    "escaping": [
      "p"
    ],
    "out": [
      "p",
      "p"
    ],
    "values": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "treated": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "literals": [
      "p"
    ],
    "web": [
      "p",
      "p"
    ],
    "url": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "encoding": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p"
    ],
    "html": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "wrap": [
      "p"
    ],
    "treat": [
      "p"
    ],
    "literal": [
      "p"
    ],
    "text": [
      "p",
      "p"
    ],
    "rather": [
      "p"
    ],
    "executable": [
      "p"
    ],
    "script": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "htmlencode": [
      "p"
    ],
    "methods": [
      "p",
      "p"
    ],
    "escape": [
      "p"
    ],
    "urlencode": [
      "p"
    ],
    "encode": [
      "p",
      "p"
    ],
    "request": [
      "p"
    ],
    "below": [
      "p"
    ],
    "some": [
      "p",
      "p"
    ],
    "examples": [
      "p"
    ],
    "1validating": [
      "p"
    ],
    "last": [
      "ul",
      "li",
      "strong"
    ],
    "name": [
      "ul",
      "li",
      "strong"
    ],
    "field": [
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "p"
    ],
    "case": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "might": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "ascii": [
      "ul",
      "li"
    ],
    "a-z": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "hyphens": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "curly": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "apostrophes": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "no": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "significance": [
      "ul",
      "li"
    ],
    "sql": [
      "ul",
      "li"
    ],
    "handle": [
      "ul",
      "li"
    ],
    "names": [
      "ul",
      "li"
    ],
    "o'dell": [
      "ul",
      "li"
    ],
    "would": [
      "ul",
      "li"
    ],
    "limit": [
      "ul",
      "li"
    ],
    "longest": [
      "ul",
      "li"
    ],
    "expected": [
      "ul",
      "li"
    ],
    "value": [
      "ul",
      "li",
      "p"
    ],
    "quantity": [
      "ul",
      "li",
      "strong"
    ],
    "works": [
      "ul",
      "li"
    ],
    "simple": [
      "ul",
      "li"
    ],
    "restriction": [
      "ul",
      "li"
    ],
    "need": [
      "ul",
      "li",
      "p"
    ],
    "positive": [
      "ul",
      "li"
    ],
    "integer": [
      "ul",
      "li"
    ],
    "between": [
      "ul",
      "li"
    ],
    "free-text": [
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "comment": [
      "ul",
      "li"
    ],
    "discussion": [
      "ul",
      "li"
    ],
    "board": [
      "ul",
      "li"
    ],
    "letters": [
      "ul",
      "li"
    ],
    "spaces": [
      "ul",
      "li"
    ],
    "commas": [
      "ul",
      "li"
    ],
    "does": [
      "ul",
      "li",
      "p"
    ],
    "include": [
      "ul",
      "li",
      "p"
    ],
    "less-than": [
      "ul",
      "li"
    ],
    "greater-than": [
      "ul",
      "li"
    ],
    "signs": [
      "ul",
      "li"
    ],
    "brackets": [
      "ul",
      "li"
    ],
    "braces": [
      "ul",
      "li"
    ],
    "users": [
      "p"
    ],
    "mark": [
      "p"
    ],
    "up": [
      "p"
    ],
    "bold": [
      "p"
    ],
    "\"b>\",": [
      "p"
    ],
    "italic": [
      "p"
    ],
    "\"i>\",": [
      "p"
    ],
    "even": [
      "p"
    ],
    "link": [
      "p"
    ],
    "should": [
      "p"
    ],
    "ideal": [
      "p"
    ],
    "scenario": [
      "p"
    ],
    "checks": [
      "p"
    ],
    "each": [
      "p"
    ],
    "entry": [
      "p"
    ],
    "point": [
      "p"
    ],
    "if": [
      "p"
    ],
    "existing": [
      "p"
    ],
    "user": [
      "p",
      "ul",
      "li"
    ],
    "stopgap": [
      "p"
    ],
    "mitigate": [
      "p"
    ],
    "risk": [
      "p"
    ],
    "until": [
      "p"
    ],
    "improve": [
      "p"
    ],
    "application's": [
      "p"
    ],
    "neither": [
      "p"
    ],
    "ensures": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "dependent": [
      "p"
    ],
    "comes": [
      "p"
    ],
    "how": [
      "p"
    ],
    "today": [
      "p"
    ],
    "quick": [
      "p"
    ],
    "fixes": [
      "p"
    ],
    "short-term": [
      "p"
    ],
    "security": [
      "p"
    ],
    "improvement": [
      "p"
    ],
    "html-encoding": [
      "ul",
      "li"
    ],
    "url-encoding": [
      "ul",
      "li"
    ],
    "writing": [
      "ul",
      "li"
    ],
    "back": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "client": [
      "ul",
      "li"
    ],
    "assumption": [
      "ul",
      "li"
    ],
    "output": [
      "ul",
      "li"
    ],
    "written": [
      "ul",
      "li"
    ],
    "protected": [
      "ul",
      "li"
    ],
    "sanitization": [
      "ul",
      "li"
    ],
    "action": [
      "ul",
      "li"
    ],
    "rejecting": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "configurable": [
      "ul",
      "li"
    ],
    "problem": [
      "ul",
      "li"
    ],
    "with": [
      "ul",
      "li"
    ],
    "matter": [
      "ul",
      "li"
    ],
    "context": [
      "ul",
      "li"
    ]
  },
  "tags": {
    "h1": [
      "Description"
    ],
    "br": [
      "",
      "",
      "",
      ""
    ],
    "p": [
      "The preferred approach to validating input is to constrain what you allow from the beginning. It is much easier to validate data for known valid types, patterns, and ranges than it is to validate data by looking for known bad characters. When you design your application, you know what your application expects. The range of valid data is generally a more finite set than potentially malicious input. However, for defense in depth, you may also want to reject known bad input and then sanitize the input.",
      "To create an effective input validation strategy, be aware of the following approaches and their tradeoffs:",
      "Constraining input is about allowing good data. This is the preferred approach. Define a filter of acceptable input by using type, length, format, and range. Define what is acceptable input for your application fields and enforce it. Reject everything else as bad data.",
      "Constraining input may involve setting character sets on the server so that you can establish the canonical form of the input in a localized way.",
      "Use strong type checking on input data wherever possible, such as in the classes used to manipulate and process the input data and in data access routines. For example, use parameterized stored procedures for data access to benefit from strong type checking of input fields.",
      "Length-check string fields, and check for appropriate format where applicable. For example, ZIP codes, personal identification numbers, and so on have well defined formats that can be validated using regular expressions. Thorough checking is not only good programming practice; it makes it more difficult for an attacker to exploit your code. The attacker may get through your type check, but the length check may make executing his favorite attack more difficult.",
      "Deny \"bad\" data -- but do not rely completely on this approach. This approach is generally less effective than the \"allow\" approach described earlier, and it is best used in combination. To deny bad data assumes your application knows all the variations of malicious input. Remember that there are multiple ways to represent characters. This is another reason why \"allow\" is the preferred approach.",
      "The \"deny\" approach is useful for applications that are already deployed and when you cannot afford to make significant changes. However, it is not as robust as the \"allow\" approach because bad data, such as patterns that can be used to identify common attacks, do not remain constant. Valid data remains constant while the range of bad data may change over time.",
      "Sanitizing is about making potentially malicious data safe. Sanitizing can be helpful when the range of input that is allowed cannot guarantee that the input is safe. This includes anything from stripping a null from the end of a user-supplied string to escaping out values so they are treated as literals.",
      "Another common example of sanitizing input in Web applications is using URL encoding or HTML encoding to wrap data and treat it as literal text rather than executable script. HtmlEncode methods escape out HTML characters, and UrlEncode methods encode a URL so that it is a valid URL request.",
      "Below are some examples of when to constrain, reject, and sanitize input.",
      "1.Validating input in common input fields:",
      "2. Some applications might allow users to mark up their text using a finite set of script characters, such as bold \"<b>\", italic \"<i>\", or even include a link to their favorite URL. In the case of a URL, your validation should encode the value so that it is not treated as a URL.",
      "3. In an ideal scenario, an application checks for acceptable input for each field or entry point. However, if you have an existing Web application that does not validate user input, you need a stopgap approach to mitigate risk until you can improve your application's input validation strategy. While neither of the following approaches ensures safe handling of input, because that is dependent on where the input comes from and how it is used in your application, they are in practice today as quick fixes for short-term security improvement:"
    ],
    "ul": [
      "Constrain input.\n    Validate data for type, length, format, and range.\n    Reject known bad input.\n    Sanitize input.",
      "Last Name field. This is a good example where constraining input is appropriate. In this case, you might allow string data in the range ASCII A-Z and a-z, and also hyphens and curly apostrophes (curly apostrophes have no significance to SQL) to handle names such as O'Dell. You would also limit the length to your longest expected value.\n    \n      Quantity field. This is another case where constraining input works well. In this example, you might use a simple type and range restriction. For example, the input data may need to be a positive integer between 0 and 1000.\n    \n      Free-text field. An example of a free-text field is a comment field on a discussion board. In this case, you might allow letters and spaces, and also common characters such as apostrophes, commas, and hyphens. The allowed set does not include less-than and greater-than signs, brackets, and braces.",
      "HTML-encoding and URL-encoding user input when writing back to the client: In this case, the assumption is that no input is treated as HTML and all output is written back in a protected form. This is sanitization in action.\n    Rejecting malicious script characters: This is a case of rejecting known bad input. In this case, a configurable set of malicious characters is used to reject the input. As described earlier, the problem with this approach is that bad data is a matter of context."
    ],
    "li": [
      "Constrain input.",
      "Validate data for type, length, format, and range.",
      "Reject known bad input.",
      "Sanitize input.",
      "Last Name field. This is a good example where constraining input is appropriate. In this case, you might allow string data in the range ASCII A-Z and a-z, and also hyphens and curly apostrophes (curly apostrophes have no significance to SQL) to handle names such as O'Dell. You would also limit the length to your longest expected value.",
      "Quantity field. This is another case where constraining input works well. In this example, you might use a simple type and range restriction. For example, the input data may need to be a positive integer between 0 and 1000.",
      "Free-text field. An example of a free-text field is a comment field on a discussion board. In this case, you might allow letters and spaces, and also common characters such as apostrophes, commas, and hyphens. The allowed set does not include less-than and greater-than signs, brackets, and braces.",
      "HTML-encoding and URL-encoding user input when writing back to the client: In this case, the assumption is that no input is treated as HTML and all output is written back in a protected form. This is sanitization in action.",
      "Rejecting malicious script characters: This is a case of rejecting known bad input. In this case, a configurable set of malicious characters is used to reject the input. As described earlier, the problem with this approach is that bad data is a matter of context."
    ],
    "h3": [
      "Constrain Input",
      "Validate Data for Type, Length, Format, and Range",
      "Reject Known Bad Input",
      "Sanitize Input",
      "In Practice"
    ],
    "strong": [
      "Last Name field",
      "Quantity field",
      "Free-text field"
    ]
  },
  "links": [],
  "html": "<h1>\n    <br class=\"Apple-interchange-newline\" />Description</h1>\n  <p>The preferred approach to validating input is to constrain what you allow from the beginning. It is much easier to validate data for known valid types, patterns, and ranges than it is to validate data by looking for known bad characters. When you design your application, you know what your application expects. The range of valid data is generally a more finite set than potentially malicious input. However, for defense in depth, you may also want to reject known bad input and then sanitize the input.</p>\n  <p>To create an effective input validation strategy, be aware of the following approaches and their tradeoffs:</p>\n  <ul>\n    <li>Constrain input.</li>\n    <li>Validate data for type, length, format, and range.</li>\n    <li>Reject known bad input.</li>\n    <li>Sanitize input.</li>\n  </ul>\n  <h3>Constrain Input</h3>\n  <p>Constraining input is about allowing good data. This is the preferred approach. Define a filter of acceptable input by using type, length, format, and range. Define what is acceptable input for your application fields and enforce it. Reject everything else as bad data.</p>\n  <p>Constraining input may involve setting character sets on the server so that you can establish the canonical form of the input in a localized way.</p>\n  <h3>Validate Data for Type, Length, Format, and Range</h3>\n  <p>Use strong type checking on input data wherever possible, such as in the classes used to manipulate and process the input data and in data access routines. For example, use parameterized stored procedures for data access to benefit from strong type checking of input fields.</p>\n  <p>Length-check string fields, and check for appropriate format where applicable. For example, ZIP codes, personal identification numbers, and so on have well defined formats that can be validated using regular expressions. Thorough checking is not only good programming practice; it makes it more difficult for an attacker to exploit your code. The attacker may get through your type check, but the length check may make executing his favorite attack more difficult.</p>\n  <h3>Reject Known Bad Input</h3>\n  <p>Deny \"bad\" data -- but do not rely completely on this approach. This approach is generally less effective than the \"allow\" approach described earlier, and it is best used in combination. To deny bad data assumes your application knows all the variations of malicious input. Remember that there are multiple ways to represent characters. This is another reason why \"allow\" is the preferred approach.</p>\n  <p>The \"deny\" approach is useful for applications that are already deployed and when you cannot afford to make significant changes. However, it is not as robust as the \"allow\" approach because bad data, such as patterns that can be used to identify common attacks, do not remain constant. Valid data remains constant while the range of bad data may change over time.</p>\n  <h3>Sanitize Input</h3>\n  <p>Sanitizing is about making potentially malicious data safe. Sanitizing can be helpful when the range of input that is allowed cannot guarantee that the input is safe. This includes anything from stripping a null from the end of a user-supplied string to escaping out values so they are treated as literals.</p>\n  <p>Another common example of sanitizing input in Web applications is using URL encoding or HTML encoding to wrap data and treat it as literal text rather than executable script. HtmlEncode methods escape out HTML characters, and UrlEncode methods encode a URL so that it is a valid URL request.</p>\n  <h3>In Practice <br /></h3>\n  <p>\n    Below are some examples of when to constrain, reject, and sanitize input.<br /></p>\n  <p>1.Validating input in common input fields:<br /></p>\n  <ul>\n    <li>\n      <strong>Last Name field</strong>. This is a good example where constraining input is appropriate. In this case, you might allow string data in the range ASCII A-Z and a-z, and also hyphens and curly apostrophes (curly apostrophes have no significance to SQL) to handle names such as O'Dell. You would also limit the length to your longest expected value.</li>\n    <li>\n      <strong>Quantity field</strong>. This is another case where constraining input works well. In this example, you might use a simple type and range restriction. For example, the input data may need to be a positive integer between 0 and 1000.</li>\n    <li>\n      <strong>Free-text field</strong>. An example of a free-text field is a comment field on a discussion board. In this case, you might allow letters and spaces, and also common characters such as apostrophes, commas, and hyphens. The allowed set does not include less-than and greater-than signs, brackets, and braces.</li>\n  </ul>\n  <p>\n    2. Some applications might allow users to mark up their text using a finite set of script characters, such as bold \"&lt;b&gt;\", italic \"&lt;i&gt;\", or even include a link to their favorite URL. In the case of a URL, your validation should encode the value so that it is not treated as a URL.</p>\n  <p>\n    3. In an ideal scenario, an application checks for acceptable input for each field or entry point. However, if you have an existing Web application that does not validate user input, you need a stopgap approach to mitigate risk until you can improve your application's input validation strategy. While neither of the following approaches ensures safe handling of input, because that is dependent on where the input comes from and how it is used in your application, they are in practice today as quick fixes for short-term security improvement:</p>\n  <ul>\n    <li>HTML-encoding and URL-encoding user input when writing back to the client: In this case, the assumption is that no input is treated as HTML and all output is written back in a protected form. This is sanitization in action.</li>\n    <li>Rejecting malicious script characters: This is a case of rejecting known bad input. In this case, a configurable set of malicious characters is used to reject the input. As described earlier, the problem with this approach is that bad data is a matter of context.</li>\n  </ul>"
}