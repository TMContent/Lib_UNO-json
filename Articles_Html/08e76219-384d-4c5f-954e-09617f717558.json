{
  "id": "08e76219-384d-4c5f-954e-09617f717558",
  "checksum": "d9c86fb4a1bc211844a0787bbca0d88373dc5f21",
  "words": {
    "2": [
      "ol",
      "li",
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a"
    ],
    "java": [
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "h1",
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "verify": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "secure": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "encryption": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "key": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "storage": [
      "p",
      "p",
      "p",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "ul",
      "li",
      "a",
      "h1",
      "h1",
      "title"
    ],
    "location": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "used": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "why": [
      "h1"
    ],
    "when": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "faced": [
      "p"
    ],
    "with": [
      "p"
    ],
    "intruders": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "most": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "aspect": [
      "p"
    ],
    "management": [
      "p"
    ],
    "because": [
      "p"
    ],
    "keys": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong"
    ],
    "are": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "generate": [
      "p"
    ],
    "protects": [
      "p"
    ],
    "sensitive": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "data": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "themselves": [
      "p"
    ],
    "become": [
      "p"
    ],
    "needs": [
      "p"
    ],
    "be": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "ul",
      "li"
    ],
    "protected": [
      "p"
    ],
    "how": [
      "h1",
      "h1",
      "ul",
      "li",
      "a"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "need": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "store": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "stores": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "application": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "utilizes": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "crypto": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "java's": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "keystore": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "em",
      "em",
      "em",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "em",
      "pre",
      "pre"
    ],
    "class": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "search": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "h1"
    ],
    "\"keystore\"": [
      "ol",
      "li",
      "p"
    ],
    "whether": [
      "ol",
      "li",
      "p"
    ],
    "appropriate": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "permissions": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "set": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "on": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "li",
      "pre"
    ],
    "directory": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "strong"
    ],
    "find": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "located": [
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "web-accessible": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "strong": [
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "and": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "administrators": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "can": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "access": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p"
    ],
    "hard-coded": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "into": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "strong"
    ],
    "review": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "sure": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "unloaded": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "from": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "strong"
    ],
    "memory": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "strong"
    ],
    "after": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "their": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "use": [
      "ol",
      "li",
      "p",
      "strong",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "handles": [
      "ol",
      "li",
      "p"
    ],
    "securely": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "removed": [
      "ol",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "li",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "considering": [
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "h1"
    ],
    "keygenerator": [
      "ol",
      "li",
      "pre"
    ],
    "kgen": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "keygeneratorgetinstance(\"aes\");kgen.init(256);secretkey": [
      "ol",
      "li",
      "pre"
    ],
    "skey": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre"
    ],
    "kgengeneratekey();byte[]": [
      "ol",
      "li",
      "pre"
    ],
    "rawkey": [
      "ol",
      "li",
      "pre"
    ],
    "skeygetencoded();secretkeyspec": [
      "ol",
      "li",
      "pre"
    ],
    "skeyspec": [
      "ol",
      "li",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "pre"
    ],
    "secretkeyspecrawkey,": [
      "ol",
      "li",
      "pre"
    ],
    "\"aes\";": [
      "ol",
      "li",
      "pre"
    ],
    "offers": [
      "ol",
      "li",
      "p"
    ],
    "functionality": [
      "ol",
      "li",
      "p"
    ],
    "as": [
      "ol",
      "li",
      "p"
    ],
    "part": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "ul",
      "li"
    ],
    "runtime": [
      "ol",
      "li",
      "p"
    ],
    "environment": [
      "ol",
      "li",
      "p"
    ],
    "requires": [
      "ol",
      "li",
      "p"
    ],
    "master": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "password": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre"
    ],
    "retrieving": [
      "ol",
      "li",
      "p"
    ],
    "contents": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li"
    ],
    "given": [
      "ol",
      "li",
      "p"
    ],
    "at": [
      "ol",
      "li",
      "p"
    ],
    "starting": [
      "ol",
      "li",
      "p"
    ],
    "time": [
      "ol",
      "li",
      "p"
    ],
    "keytool": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "utility": [
      "ol",
      "li",
      "p"
    ],
    "create": [
      "ol",
      "li",
      "p"
    ],
    "manage": [
      "ol",
      "li",
      "p"
    ],
    "inside": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li"
    ],
    "accessing": [
      "ol",
      "li",
      "p"
    ],
    "string": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "keystorename": [
      "ol",
      "li",
      "pre"
    ],
    "myappgetkeystorename();char[]": [
      "ol",
      "li",
      "pre"
    ],
    "keystorepass": [
      "ol",
      "li",
      "pre"
    ],
    "myappgetkeystorepass();keystore": [
      "ol",
      "li",
      "pre"
    ],
    "keystoregetinstance(keystore.getdefaulttype());fileinputstream": [
      "ol",
      "li",
      "pre"
    ],
    "keystorefile": [
      "ol",
      "li",
      "pre"
    ],
    "fileinputstreamkeystorename);keystore.load(keystorefile,": [
      "ol",
      "li",
      "pre"
    ],
    "keystorepass;keystorefile.close();final": [
      "ol",
      "li",
      "pre"
    ],
    "keyname": [
      "ol",
      "li",
      "pre"
    ],
    "\"myappencryptionkey\"//": [
      "ol",
      "li",
      "pre"
    ],
    "note": [
      "ol",
      "li",
      "pre"
    ],
    "although": [
      "ol",
      "li",
      "pre"
    ],
    "uses": [
      "ol",
      "li",
      "pre"
    ],
    "same": [
      "ol",
      "li",
      "pre"
    ],
    "storing": [
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "ul",
      "li"
    ],
    "keystore//": [
      "ol",
      "li",
      "pre"
    ],
    "disk": [
      "ol",
      "li",
      "pre"
    ],
    "adding": [
      "ol",
      "li",
      "pre"
    ],
    "passwords": [
      "ol",
      "li",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "different//": [
      "ol",
      "li",
      "pre"
    ],
    "one": [
      "ol",
      "li",
      "pre"
    ],
    "anothersecretkey": [
      "ol",
      "li",
      "pre"
    ],
    "secretkey)keystore.getkey(keyname,": [
      "ol",
      "li",
      "pre"
    ],
    "keystorepass;": [
      "ol",
      "li",
      "pre"
    ],
    "protect": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "choose": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "dedicate": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "application's": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "files": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "this": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "limits": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "scope": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "users who": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "potentially": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "compromise": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "apply": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "filesystem": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "such": [
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "accessed": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "by": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "its": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "avoid": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "common": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "mistakes": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "do": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "hard-code": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "in": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "a"
    ],
    "hard-coding": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "source": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "hoping": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "an": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "attacker": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "will": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "reverse": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "engineer": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "security": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "through": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "obscurity": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "determined": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "usually": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "way": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "defeat": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "mechanism": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "place": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "configuration": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "strong"
    ],
    "obfuscating": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "placing": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "them": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "unload": [
      "ol",
      "li",
      "ul",
      "li",
      "strong"
    ],
    "leaving": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "final": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "allows": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "operating": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "system": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "page": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "onto": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "hard": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "drive": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "obtain": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "system's": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "file": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "cryptographic": [
      "h1",
      "h1",
      "h1",
      "h1"
    ],
    "guidelines": [
      "h1"
    ],
    "plaintext": [
      "ul",
      "li",
      "a"
    ],
    "symmetric": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "asymmetric": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklists": [
      "h1"
    ],
    "stored": [
      "ul",
      "li",
      "a"
    ],
    "encrypted": [
      "ul",
      "li",
      "a"
    ],
    "esapi": [
      "ul",
      "li",
      "a"
    ],
    "randomizer": [
      "ul",
      "li",
      "a"
    ],
    "testing": [
      "h1"
    ],
    "test": [
      "ul",
      "li",
      "a"
    ],
    "local": [
      "ul",
      "li",
      "a"
    ],
    "machine": [
      "ul",
      "li",
      "a"
    ],
    "credential": [
      "ul",
      "li",
      "a"
    ],
    "theft": [
      "ul",
      "li",
      "a"
    ],
    "bugs": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Java Cryptographic Storage Guidelines",
      "Java Cryptographic Storage Checklists",
      "Java Cryptographic Storage Code Example",
      "Java Cryptographic Storage Testing"
    ],
    "ul": [
      "Java",
      "Choose a key store directory: Dedicate a directory for storing your application's key store files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory. \r\n        \r\n          Set appropriate permissions: Apply filesystem permissions such that the key store files can be only accessed by your application and its administrators.",
      "Do not hard-code keys in the application: Hard-coding the encryption keys into the source code, hoping that an attacker will not reverse engineer the application, is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. \r\n        \r\n          Do not place keys into configuration files: Obfuscating the encryption keys and placing them into configuration files is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. \r\n        \r\n          Unload keys from memory after their use: Leaving the encryption keys in memory after their final use allows the operating system to page them from memory and onto the hard drive. A determined attacker will usually find a way to obtain the encryption keys from the operating system's page file.",
      "Store Passwords Securely\r\n    \r\n    \r\n      Do Not Store Plaintext Sensitive Data\r\n    \r\n    \r\n      Use Strong Symmetric Encryption\r\n    \r\n    \r\n      Use Strong Asymmetric Encryption\r\n    \r\n    \r\n      Use a Secure Key Storage Location",
      "Passwords Are Stored Securely\r\n    \r\n    \r\n      Sensitive Data Is Encrypted\r\n    \r\n    \r\n      Strong Symmetric Encryption Is Used\r\n    \r\n    \r\n      Strong Asymmetric Encryption Is Used\r\n    \r\n    \r\n      A Secure Key Storage Location Is Used",
      "Use ESAPI Randomizer",
      "How to Test for Local Machine Credential Theft Bugs in Java"
    ],
    "li": [
      "Java",
      "Identify the need for a key store. Key stores should be used when your application utilizes crypto keys.",
      "Verify that Java's KeyStore class is used. Search application code for \"KeyStore\" to identify whether the KeyStore class is used.",
      "Verify that appropriate permissions are set on the key store directory. Find the directory where the keystore is located. Verify that the keystore directory is not web-accessible. Verify that strong permissions are set on the keystore directory, so that only the application and the administrators can access it.",
      "Verify that keys are not hard-coded into the application. Review application code to make sure encryption keys are not hard-coded into the application.",
      "Verify that keys are unloaded from memory after their use. Review code that handles encryption keys to make sure that keys are securely removed from memory after being used.",
      "Identify the need for a key store. Key stores should be used when your application utilizes crypto keys. Example:\r\n      KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");kgen.init(256);SecretKey skey = kgen.generateKey();byte[] rawKey = skey.getEncoded();SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");",
      "Use Java's KeyStore class. Java offers a key store functionality as part of the Java Runtime Environment. The Java key store requires a master password for retrieving the contents of the key store. The master password should be given to the application at starting time. Use the KeyTool utility to create and manage the keys inside the key store. Example of accessing the key store:\r\n      String keyStoreName = MyApp.getKeyStoreName();char[] keyStorePass = MyApp.getKeyStorePass();KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());FileInputStream keyStoreFile = new FileInputStream(keyStoreName);keyStore.load(keyStoreFile, keyStorePass);keyStoreFile.close();final String keyName = \"MyAppEncryptionKey\";// Note: Although the example uses the same password for storing the KeyStore// on disk and adding keys to the KeyStore, the 2 passwords can be different// from one anotherSecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);",
      "Protect the key store.\r\n      \r\n      \r\n        \r\n          Choose a key store directory: Dedicate a directory for storing your application's key store files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory. \r\n        \r\n          Set appropriate permissions: Apply filesystem permissions such that the key store files can be only accessed by your application and its administrators.",
      "Choose a key store directory: Dedicate a directory for storing your application's key store files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory.",
      "Set appropriate permissions: Apply filesystem permissions such that the key store files can be only accessed by your application and its administrators.",
      "Avoid common mistakes.\r\n      \r\n      \r\n        \r\n          Do not hard-code keys in the application: Hard-coding the encryption keys into the source code, hoping that an attacker will not reverse engineer the application, is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. \r\n        \r\n          Do not place keys into configuration files: Obfuscating the encryption keys and placing them into configuration files is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. \r\n        \r\n          Unload keys from memory after their use: Leaving the encryption keys in memory after their final use allows the operating system to page them from memory and onto the hard drive. A determined attacker will usually find a way to obtain the encryption keys from the operating system's page file.",
      "Do not hard-code keys in the application: Hard-coding the encryption keys into the source code, hoping that an attacker will not reverse engineer the application, is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism.",
      "Do not place keys into configuration files: Obfuscating the encryption keys and placing them into configuration files is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism.",
      "Unload keys from memory after their use: Leaving the encryption keys in memory after their final use allows the operating system to page them from memory and onto the hard drive. A determined attacker will usually find a way to obtain the encryption keys from the operating system's page file.",
      "Store Passwords Securely",
      "Do Not Store Plaintext Sensitive Data",
      "Use Strong Symmetric Encryption",
      "Use Strong Asymmetric Encryption",
      "Use a Secure Key Storage Location",
      "Passwords Are Stored Securely",
      "Sensitive Data Is Encrypted",
      "Strong Symmetric Encryption Is Used",
      "Strong Asymmetric Encryption Is Used",
      "A Secure Key Storage Location Is Used",
      "Use ESAPI Randomizer",
      "How to Test for Local Machine Credential Theft Bugs in Java"
    ],
    "p": [
      "Verify that a secure encryption key storage location is used.",
      "When faced with encryption, intruders attack the most vulnerable aspect: key management. Because keys are used to generate the encryption that protects sensitive data, the keys themselves become sensitive data that needs to be protected.",
      "To verify that a secure key storage location is used:",
      "Identify the need for a key store. Key stores should be used when your application utilizes crypto keys.",
      "Verify that Java's KeyStore class is used. Search application code for \"KeyStore\" to identify whether the KeyStore class is used.",
      "Verify that appropriate permissions are set on the key store directory. Find the directory where the keystore is located. Verify that the keystore directory is not web-accessible. Verify that strong permissions are set on the keystore directory, so that only the application and the administrators can access it.",
      "Verify that keys are not hard-coded into the application. Review application code to make sure encryption keys are not hard-coded into the application.",
      "Verify that keys are unloaded from memory after their use. Review code that handles encryption keys to make sure that keys are securely removed from memory after being used.",
      "When considering a key storage location:",
      "Identify the need for a key store. Key stores should be used when your application utilizes crypto keys. Example:",
      "Use Java's KeyStore class. Java offers a key store functionality as part of the Java Runtime Environment. The Java key store requires a master password for retrieving the contents of the key store. The master password should be given to the application at starting time. Use the KeyTool utility to create and manage the keys inside the key store. Example of accessing the key store:",
      "Protect the key store.",
      "Avoid common mistakes."
    ],
    "ol": [
      "Identify the need for a key store. Key stores should be used when your application utilizes crypto keys.\r\n    \r\n    \r\n      \r\n        Verify that Java's KeyStore class is used. Search application code for \"KeyStore\" to identify whether the KeyStore class is used.\r\n    \r\n    \r\n      \r\n        Verify that appropriate permissions are set on the key store directory. Find the directory where the keystore is located. Verify that the keystore directory is not web-accessible. Verify that strong permissions are set on the keystore directory, so that only the application and the administrators can access it.\r\n    \r\n    \r\n      \r\n        Verify that keys are not hard-coded into the application. Review application code to make sure encryption keys are not hard-coded into the application.\r\n    \r\n    \r\n      \r\n        Verify that keys are unloaded from memory after their use. Review code that handles encryption keys to make sure that keys are securely removed from memory after being used.",
      "Identify the need for a key store. Key stores should be used when your application utilizes crypto keys. Example:\r\n      KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");kgen.init(256);SecretKey skey = kgen.generateKey();byte[] rawKey = skey.getEncoded();SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");\r\n    \r\n    \r\n      \r\n        Use Java's KeyStore class. Java offers a key store functionality as part of the Java Runtime Environment. The Java key store requires a master password for retrieving the contents of the key store. The master password should be given to the application at starting time. Use the KeyTool utility to create and manage the keys inside the key store. Example of accessing the key store:\r\n      String keyStoreName = MyApp.getKeyStoreName();char[] keyStorePass = MyApp.getKeyStorePass();KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());FileInputStream keyStoreFile = new FileInputStream(keyStoreName);keyStore.load(keyStoreFile, keyStorePass);keyStoreFile.close();final String keyName = \"MyAppEncryptionKey\";// Note: Although the example uses the same password for storing the KeyStore// on disk and adding keys to the KeyStore, the 2 passwords can be different// from one anotherSecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);\r\n    \r\n    \r\n      \r\n        Protect the key store.\r\n      \r\n      \r\n        \r\n          Choose a key store directory: Dedicate a directory for storing your application's key store files. Make sure the directory is not web-accessible. This limits the scope of users who can potentially compromise the contents inside the directory. \r\n        \r\n          Set appropriate permissions: Apply filesystem permissions such that the key store files can be only accessed by your application and its administrators.\r\n      \r\n    \r\n    \r\n      \r\n        Avoid common mistakes.\r\n      \r\n      \r\n        \r\n          Do not hard-code keys in the application: Hard-coding the encryption keys into the source code, hoping that an attacker will not reverse engineer the application, is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. \r\n        \r\n          Do not place keys into configuration files: Obfuscating the encryption keys and placing them into configuration files is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. \r\n        \r\n          Unload keys from memory after their use: Leaving the encryption keys in memory after their final use allows the operating system to page them from memory and onto the hard drive. A determined attacker will usually find a way to obtain the encryption keys from the operating system's page file."
    ],
    "strong": [
      "Identify the need for a key store.",
      "Verify that Java's KeyStore class is used.",
      "Verify that appropriate permissions are set on the key store directory.",
      "Verify that keys are not hard-coded into the application.",
      "Verify that keys are unloaded from memory after their use.",
      "Identify the need for a key store.",
      "Use Java's KeyStore class.",
      "Protect the key store.",
      "Choose a key store directory",
      "Set appropriate permissions",
      "Avoid common mistakes.",
      "Do not hard-code keys in the application",
      "Do not place keys into configuration files",
      "Unload keys from memory after their use"
    ],
    "em": [
      "KeyStore",
      "KeyStore",
      "KeyStore",
      "KeyStore",
      "KeyTool"
    ],
    "pre": [
      "KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");kgen.init(256);SecretKey skey = kgen.generateKey();byte[] rawKey = skey.getEncoded();SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");",
      "String keyStoreName = MyApp.getKeyStoreName();char[] keyStorePass = MyApp.getKeyStorePass();KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());FileInputStream keyStoreFile = new FileInputStream(keyStoreName);keyStore.load(keyStoreFile, keyStorePass);keyStoreFile.close();final String keyName = \"MyAppEncryptionKey\";// Note: Although the example uses the same password for storing the KeyStore// on disk and adding keys to the KeyStore, the 2 passwords can be different// from one anotherSecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "Store Passwords Securely",
      "Do Not Store Plaintext Sensitive Data",
      "Use Strong Symmetric Encryption",
      "Use Strong Asymmetric Encryption",
      "Use a Secure Key Storage Location",
      "Passwords Are Stored Securely",
      "Sensitive Data Is Encrypted",
      "Strong Symmetric Encryption Is Used",
      "Strong Asymmetric Encryption Is Used",
      "A Secure Key Storage Location Is Used",
      "Use ESAPI Randomizer",
      "How to Test for Local Machine Credential Theft Bugs in Java"
    ]
  },
  "links": [
    {
      "href": "/article/6e0918c1-90db-46d5-9f0e-8a98ddbcd7d5",
      "text": "Store Passwords Securely"
    },
    {
      "href": "/article/b38a70c0-a014-4262-b3d6-69d6d4f0fe46",
      "text": "Do Not Store Plaintext Sensitive Data"
    },
    {
      "href": "/article/66df6465-5476-4b55-90c8-ffbd7d556205",
      "text": "Use Strong Symmetric Encryption"
    },
    {
      "href": "/article/f5cdd292-6f61-4584-b014-fc5134a3f9bc",
      "text": "Use Strong Asymmetric Encryption"
    },
    {
      "href": "/article/1057099e-dd79-4f41-8b7e-36f00f1343e4",
      "text": "Use a Secure Key Storage Location"
    },
    {
      "href": "/article/d74fe6bf-387f-4ff1-9edb-d0275eedffc0",
      "text": "Passwords Are Stored Securely"
    },
    {
      "href": "/article/97bb3ed8-df73-478e-a310-d96b79678aef",
      "text": "Sensitive Data Is Encrypted"
    },
    {
      "href": "/article/23019ede-9f30-4709-997d-586475a2e626",
      "text": "Strong Symmetric Encryption Is Used"
    },
    {
      "href": "/article/14a46517-6c86-498e-8429-1cb5ca3ce7c1",
      "text": "Strong Asymmetric Encryption Is Used"
    },
    {
      "href": "/article/08e76219-384d-4c5f-954e-09617f717558",
      "text": "A Secure Key Storage Location Is Used"
    },
    {
      "href": "/article/11e7466f-001b-4c8d-b282-a3c12aa0588c",
      "text": "Use ESAPI Randomizer"
    },
    {
      "href": "/article/6d36aa09-5b7f-4967-b3c7-661b860846e2",
      "text": "How to Test for Local Machine Credential Theft Bugs in Java"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Java</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Verify that a secure encryption key storage location is used.</p>\r\n  <h1>Why</h1>\r\n  <p>When faced with encryption, intruders attack the most vulnerable aspect: key management. Because keys are used to generate the encryption that protects sensitive data, the keys themselves become sensitive data that needs to be protected.</p>\r\n  <h1>How to Check</h1>\r\n  <p>To verify that a secure key storage location is used:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the need for a key store. </strong>Key stores should be used when your application utilizes crypto keys.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that Java's <em>KeyStore</em> class is used.</strong> Search application code for \"<em>KeyStore</em>\" to identify whether the <em>KeyStore</em> class is used.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that appropriate permissions are set on the key store directory.</strong> Find the directory where the keystore is located. Verify that the keystore directory is not web-accessible. Verify that strong permissions are set on the keystore directory, so that only the application and the administrators can access it.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that keys are not hard-coded into the application.</strong> Review application code to make sure encryption keys are not hard-coded into the application.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that keys are unloaded from memory after their use.</strong> Review code that handles encryption keys to make sure that keys are securely removed from memory after being used.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>When considering a key storage location:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify the need for a key store. </strong>Key stores should be used when your application utilizes crypto keys. Example:</p>\r\n      <pre>KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");<br />kgen.init(256);SecretKey skey = kgen.generateKey();<br />byte[] rawKey = skey.getEncoded();<br /><br />SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use Java's <em>KeyStore</em> class. </strong>Java offers a key store functionality as part of the Java Runtime Environment. The Java key store requires a master password for retrieving the contents of the key store. The master password should be given to the application at starting time. Use the <em>KeyTool</em> utility to create and manage the keys inside the key store. Example of accessing the key store:</p>\r\n      <pre>String keyStoreName = MyApp.getKeyStoreName();<br />char[] keyStorePass = MyApp.getKeyStorePass();<br />KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());<br />FileInputStream keyStoreFile = new FileInputStream(keyStoreName);<br />keyStore.load(keyStoreFile, keyStorePass);<br />keyStoreFile.close();<br /><br />final String keyName = \"MyAppEncryptionKey\";<br />// Note: Although the example uses the same password for storing the KeyStore<br />// on disk and adding keys to the KeyStore, the 2 passwords can be different<br />// from one another<br />SecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Protect the key store.</strong>\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          <strong>Choose a key store directory</strong>: Dedicate a directory for storing your application's key store files. Make sure the directory is not web-accessible. This limits the scope of users&nbsp;who can potentially compromise the contents inside the directory. </li>\r\n        <li>\r\n          <strong>Set appropriate permissions</strong>: Apply filesystem permissions such that the key store files can be only accessed by your application and its administrators.</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Avoid common mistakes.</strong>\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          <strong>Do not hard-code keys in the application</strong>: Hard-coding the encryption keys into the source code, hoping that an attacker will not reverse engineer the application, is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. </li>\r\n        <li>\r\n          <strong>Do not place keys into configuration files</strong>: Obfuscating the encryption keys and placing them into configuration files is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. </li>\r\n        <li>\r\n          <strong>Unload keys from memory after their use</strong>: Leaving the encryption keys in memory after their final use allows the operating system to page them from memory and onto the hard drive. A determined attacker will usually find a way to obtain the encryption keys from the operating system's page file.</li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <h1>Java Cryptographic Storage Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/6e0918c1-90db-46d5-9f0e-8a98ddbcd7d5\">Store Passwords Securely</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/b38a70c0-a014-4262-b3d6-69d6d4f0fe46\">Do Not Store Plaintext Sensitive Data</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/66df6465-5476-4b55-90c8-ffbd7d556205\">Use Strong Symmetric Encryption</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/f5cdd292-6f61-4584-b014-fc5134a3f9bc\">Use Strong Asymmetric Encryption</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/1057099e-dd79-4f41-8b7e-36f00f1343e4\">Use a Secure Key Storage Location</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Cryptographic Storage Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/d74fe6bf-387f-4ff1-9edb-d0275eedffc0\">Passwords Are Stored Securely</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/97bb3ed8-df73-478e-a310-d96b79678aef\">Sensitive Data Is Encrypted</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/23019ede-9f30-4709-997d-586475a2e626\">Strong Symmetric Encryption Is Used</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/14a46517-6c86-498e-8429-1cb5ca3ce7c1\">Strong Asymmetric Encryption Is Used</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/08e76219-384d-4c5f-954e-09617f717558\">A Secure Key Storage Location Is Used</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Cryptographic Storage Code Example</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/11e7466f-001b-4c8d-b282-a3c12aa0588c\">Use ESAPI Randomizer</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Cryptographic Storage Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/6d36aa09-5b7f-4967-b3c7-661b860846e2\">How to Test for Local Machine Credential Theft Bugs in Java</a>\r\n    </li>\r\n  </ul>"
}