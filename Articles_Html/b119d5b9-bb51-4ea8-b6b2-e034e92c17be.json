{
  "id": "b119d5b9-bb51-4ea8-b6b2-e034e92c17be",
  "checksum": "aeac883665683d3c672c6fe543028440ea51f909",
  "words": {
    "0": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "255": [
      "p",
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "pre"
    ],
    "be": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "careful": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "when": [
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "manipulating": [
      "p",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p"
    ],
    "either": [
      "p"
    ],
    "through": [
      "p"
    ],
    "copying": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "array": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "p"
    ],
    "manipulation": [
      "p"
    ],
    "so": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "pre",
      "pre"
    ],
    "being": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "placed": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "p"
    ],
    "buffer": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "title"
    ],
    "does": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "not": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ul",
      "li"
    ],
    "overwrite": [
      "p"
    ],
    "bounds": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "why": [
      "h1"
    ],
    "overruns": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "used": [
      "p"
    ],
    "by": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "an": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "modify": [
      "p"
    ],
    "contents": [
      "p"
    ],
    "stack": [
      "p"
    ],
    "heap": [
      "p"
    ],
    "under": [
      "p",
      "p"
    ],
    "right": [
      "p"
    ],
    "conditions": [
      "p"
    ],
    "this": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "allow": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "full": [
      "p"
    ],
    "privileges": [
      "p"
    ],
    "currently": [
      "p"
    ],
    "running": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "user": [
      "p"
    ],
    "context": [
      "p"
    ],
    "whenever": [
      "p",
      "p"
    ],
    "using": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "apis": [
      "p"
    ],
    "manipulate": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "make": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "sure": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "rules": [
      "p"
    ],
    "followed": [
      "p"
    ],
    "check": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "size": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "into": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "length": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "against": [
      "ol",
      "li",
      "p",
      "title"
    ],
    "passed": [
      "ol",
      "li",
      "p"
    ],
    "ensure": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "there": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "is": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "enough": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li"
    ],
    "room": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "append": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "carefully": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "appending": [
      "ol",
      "li",
      "p"
    ],
    "target": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "p"
    ],
    "contain": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "copied": [
      "ol",
      "li",
      "p"
    ],
    "indices": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "modifying": [
      "ol",
      "li",
      "p"
    ],
    "index": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "p"
    ],
    "allocation": [
      "ol",
      "li",
      "p"
    ],
    "off": [
      "ol",
      "li",
      "p"
    ],
    "one": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "errors": [
      "ol",
      "li",
      "p"
    ],
    "arrays": [
      "ol",
      "li",
      "p"
    ],
    "since": [
      "ol",
      "li",
      "p"
    ],
    "based": [
      "ol",
      "li",
      "p"
    ],
    "indexing": [
      "ol",
      "li",
      "p"
    ],
    "means": [
      "ol",
      "li",
      "p"
    ],
    "largest": [
      "ol",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "li",
      "p"
    ],
    "less": [
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "allocated": [
      "ol",
      "li",
      "p"
    ],
    "pass": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "maximum": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "as": [
      "ol",
      "li",
      "p",
      "strong",
      "ul",
      "li"
    ],
    "parameter": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "if": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "pre"
    ],
    "you": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "copies": [
      "ol",
      "li",
      "p"
    ],
    "variable-length": [
      "ol",
      "li",
      "p"
    ],
    "uses": [
      "ol",
      "li",
      "p"
    ],
    "properly": [
      "ol",
      "li",
      "p"
    ],
    "correct": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "li",
      "p"
    ],
    "about": [
      "ol",
      "li",
      "p"
    ],
    "confusing": [
      "ol",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "p"
    ],
    "source": [
      "ol",
      "li",
      "p"
    ],
    "truncate": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "necessary": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "see": [
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "h1"
    ],
    "truncates": [
      "ol",
      "li",
      "p"
    ],
    "instead": [
      "ol",
      "li",
      "p"
    ],
    "expanding": [
      "ol",
      "li",
      "p"
    ],
    "fit": [
      "ol",
      "li",
      "p"
    ],
    "it": [
      "ol",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "expansion": [
      "ol",
      "li",
      "p"
    ],
    "may": [
      "ol",
      "li",
      "p"
    ],
    "just": [
      "ol",
      "li",
      "p"
    ],
    "move": [
      "ol",
      "li",
      "p"
    ],
    "downstream": [
      "ol",
      "li",
      "p"
    ],
    "rely": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p"
    ],
    "another": [
      "ol",
      "li",
      "p"
    ],
    "layer": [
      "ol",
      "li",
      "p"
    ],
    "tier": [
      "ol",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "li",
      "p",
      "ul",
      "li",
      "pre"
    ],
    "truncation": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "h1",
      "p",
      "p",
      "h1"
    ],
    "application": [
      "p"
    ],
    "should": [
      "p"
    ],
    "similar": [
      "p"
    ],
    "public": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "void": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "processinput){ char[]": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre"
    ],
    "char255];": [
      "pre"
    ],
    "getdatadata);}": [
      "pre"
    ],
    "getdatachar[]": [
      "pre",
      "pre"
    ],
    "buffer{int": [
      "pre"
    ],
    "ch": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "0fixed": [
      "pre"
    ],
    "char*": [
      "pre",
      "pre"
    ],
    "pbuf": [
      "pre",
      "pre"
    ],
    "buffer{": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre"
    ],
    "systemconsole.read();": [
      "pre",
      "pre"
    ],
    "*pbuf++)": [
      "pre",
      "pre"
    ],
    "char)ch;": [
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre"
    ],
    "whilech": [
      "pre"
    ],
    "!=": [
      "pre"
    ],
    "'\\n';}}": [
      "pre"
    ],
    "overflow": [
      "p"
    ],
    "occurs": [
      "p"
    ],
    "single": [
      "p"
    ],
    "line": [
      "p"
    ],
    "more": [
      "p"
    ],
    "characters": [
      "p",
      "ul",
      "li"
    ],
    "long": [
      "p"
    ],
    "two": [
      "p"
    ],
    "problems": [
      "p"
    ],
    "processinput": [
      "ul",
      "li",
      "b"
    ],
    "allocates": [
      "ul",
      "li"
    ],
    "only": [
      "ul",
      "li"
    ],
    "space": [
      "ul",
      "li"
    ],
    "getdata": [
      "ul",
      "li",
      "b",
      "strong"
    ],
    "fills": [
      "ul",
      "li"
    ],
    "solution": [
      "h1"
    ],
    "getdata function": [
      "p"
    ],
    "checks": [
      "p"
    ],
    "before": [
      "p"
    ],
    "filling": [
      "p"
    ],
    "processinput){": [
      "pre"
    ],
    "char]": [
      "pre"
    ],
    "chararray_size];": [
      "pre"
    ],
    "getdatadata,": [
      "pre"
    ],
    "array_size;}": [
      "pre"
    ],
    "int": [
      "pre",
      "pre"
    ],
    "buffersize{int": [
      "pre"
    ],
    "0bool": [
      "pre"
    ],
    "done": [
      "pre",
      "pre"
    ],
    "falsefixed": [
      "pre"
    ],
    "i": [
      "pre",
      "pre"
    ],
    "buffersize": [
      "pre"
    ],
    "&&": [
      "pre"
    ],
    "!done": [
      "pre"
    ],
    "i++": [
      "pre"
    ],
    "'\\n'": [
      "pre"
    ],
    "==": [
      "pre"
    ],
    "true": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "protect": [
      "title"
    ],
    "overflows": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example"
    ],
    "p": [
      "Be careful when manipulating memory, either through memory copying or array manipulation, so that the data being placed in a buffer does not overwrite the bounds of that buffer.",
      "Buffer overruns are a vulnerability that can be used by an attacker to modify the contents of the stack or the heap. Under the right conditions this vulnerability can allow an attacker to execute arbitrary code under the full privileges of the currently running code and user context.",
      "Whenever manipulating memory or using APIs that manipulate memory.",
      "Make sure that the following rules are followed:",
      "Check buffer size. When copying data into a buffer, check the length of the buffer against the length of data being passed in, to ensure there is enough room.",
      "Append to buffer carefully. When appending data into a buffer, ensure that the target buffer has enough room to contain the copied data.",
      "Check array indices. When modifying the data in an array, ensure that the array index is within the bounds of the array allocation. Be careful of off by one errors in arrays since 0 based array indexing means that the largest array index will be one less than the allocated size.",
      "Pass maximum length as a parameter. If you are using a function that copies variable-length data into a buffer and uses a maximum length parameter properly, be sure to pass the correct value into this parameter. Be careful about confusing target length with source length.",
      "Truncate data if necessary. If you see a problem, make sure the code truncates the data instead of expanding the buffer to fit it. Buffer expansion may just move the problem downstream. Make sure that the code does not rely on another layer or tier for data truncation.",
      "The application should not contain code similar to the following example.",
      "In this code example, an overflow occurs whenever a single line is more than 255 characters long. There are two problems in this code:",
      "In the following code, the GetData function checks the size of the array before filling it."
    ],
    "ol": [
      "Check buffer size. When copying data into a buffer, check the length of the buffer against the length of data being passed in, to ensure there is enough room. \n      \n        \n          Append to buffer carefully. When appending data into a buffer, ensure that the target buffer has enough room to contain the copied data. \n        \n          \n            Check array indices. When modifying the data in an array, ensure that the array index is within the bounds of the array allocation. Be careful of off by one errors in arrays since 0 based array indexing means that the largest array index will be one less than the allocated size. \n          \n            \n              Pass maximum length as a parameter. If you are using a function that copies variable-length data into a buffer and uses a maximum length parameter properly, be sure to pass the correct value into this parameter. Be careful about confusing target length with source length. \n            \n              \n                Truncate data if necessary. If you see a problem, make sure the code truncates the data instead of expanding the buffer to fit it. Buffer expansion may just move the problem downstream. Make sure that the code does not rely on another layer or tier for data truncation."
    ],
    "li": [
      "Check buffer size. When copying data into a buffer, check the length of the buffer against the length of data being passed in, to ensure there is enough room.",
      "Append to buffer carefully. When appending data into a buffer, ensure that the target buffer has enough room to contain the copied data.",
      "Check array indices. When modifying the data in an array, ensure that the array index is within the bounds of the array allocation. Be careful of off by one errors in arrays since 0 based array indexing means that the largest array index will be one less than the allocated size.",
      "Pass maximum length as a parameter. If you are using a function that copies variable-length data into a buffer and uses a maximum length parameter properly, be sure to pass the correct value into this parameter. Be careful about confusing target length with source length.",
      "Truncate data if necessary. If you see a problem, make sure the code truncates the data instead of expanding the buffer to fit it. Buffer expansion may just move the problem downstream. Make sure that the code does not rely on another layer or tier for data truncation.",
      "The ProcessInput function allocates only enough space for 255 characters.",
      "The GetData function does not check the size of the array as it fills it."
    ],
    "strong": [
      "Check buffer size.",
      "Append to buffer carefully.",
      "Check array indices.",
      "Pass maximum length as a parameter.",
      "Truncate data if necessary.",
      "GetData"
    ],
    "pre": [
      "public void ProcessInput(){ char[] data = new char[255];   GetData(data);}",
      "public void GetData(char[] buffer){int ch = 0;fixed (char* pBuf = buffer){  do  {    ch = System.Console.Read();    *(pBuf++) = (char)ch;  } while(ch != '\\n');}}",
      "public void ProcessInput(){ char[] data = new char[ARRAY_SIZE];   GetData(data, ARRAY_SIZE);}",
      "public void GetData(char[] buffer, int bufferSize){int ch = 0;bool done = false;fixed (char* pBuf = buffer){  for (int i = 0; i < bufferSize && !done; i++)  {    ch = System.Console.Read();    *(pBuf++) = (char)ch;    if ('\\n' == ch)    { \tdone = true;    }  } }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "ul": [
      "The ProcessInput function allocates only enough space for 255 characters. The GetData function does not check the size of the array as it fills it."
    ],
    "b": [
      "ProcessInput",
      "GetData"
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\n  <p>Be careful when manipulating memory, either through memory copying or array manipulation, so that the data being placed in a buffer does not overwrite the bounds of that buffer.</p>\n  <h1>Why</h1>\n  <p>Buffer overruns are a vulnerability that can be used by an attacker to modify the contents of the stack or the heap. Under the right conditions this vulnerability can allow an attacker to execute arbitrary code under the full privileges of the currently running code and user context.</p>\n  <h1>When</h1>\n  <p>Whenever manipulating memory or using APIs that manipulate memory.</p>\n  <h1>How</h1>\n  <p>Make sure that the following rules are followed: </p>\n  <ol>\n    <li>\n      <p>\n        <strong>Check buffer size. </strong>When copying data into a buffer, check the length of the buffer against the length of data being passed in, to ensure there is enough room. </p>\n      <li>\n        <p>\n          <strong>Append to buffer carefully. </strong>When appending data into a buffer, ensure that the target buffer has enough room to contain the copied data. </p>\n        <li>\n          <p>\n            <strong>Check array indices. </strong>When modifying the data in an array, ensure that the array index is within the bounds of the array allocation. Be careful of off by one errors in arrays since 0 based array indexing means that the largest array index will be one less than the allocated size. </p>\n          <li>\n            <p>\n              <strong>Pass maximum length as a parameter. </strong>If you are using a function that copies variable-length data into a buffer and uses a maximum length parameter properly, be sure to pass the correct value into this parameter. Be careful about confusing target length with source length. </p>\n            <li>\n              <p>\n                <strong>Truncate data if necessary.</strong> If you see a problem, make sure the code truncates the data instead of expanding the buffer to fit it. Buffer expansion may just move the problem downstream. Make sure that the code does not rely on another layer or tier for data truncation. </p>\n            </li>\n          </li>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>The application should not contain code similar to the following example. </p>\n  <pre>public void ProcessInput()<br />&#123;<br />&nbsp;char&#91;&#93; data = new char&#91;255&#93;;&nbsp; <br />&nbsp;GetData(data);<br />&#125;</pre>\n  <pre>public void GetData(char&#91;&#93; buffer)<br />&#123;<br />int ch = 0;<br />fixed (char&#42; pBuf = buffer)<br />&#123;<br />&nbsp; do<br />&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp; ch = System.Console.Read();<br />&nbsp;&nbsp;&nbsp; &#42;(pBuf&#43;&#43;) = (char)ch;<br />&nbsp; &#125; while(ch &#33;= '\\n');<br />&#125;<br />&#125; </pre>\n  <p>In this code example, an overflow occurs whenever a single line is more than 255 characters long. There are two problems in this code: </p>\n  <ul>\n    <li>The <b>ProcessInput</b> function allocates only enough space for 255 characters. <li>The <b>GetData</b> function does not check the size of the array as it fills it. </li></li>\n  </ul>\n  <h1>Solution Example</h1>\n  <p>In the following code, the <strong>GetData</strong>&nbsp;function checks the size of the array before filling it.</p>\n  <pre>public void ProcessInput()<br />&#123;<br /><br /> char&#91;&#93; data = new char&#91;ARRAY_SIZE&#93;;&nbsp; <br />&nbsp;GetData(data, ARRAY_SIZE);<br />&#125;</pre>\n  <pre>public void GetData(char&#91;&#93; buffer, int bufferSize)<br />&#123;<br />int ch = 0;<br />bool done = false;<br />fixed (char&#42; pBuf = buffer)<br />&#123;<br />&nbsp; for (int i = 0; i &lt; bufferSize && &#33;done; i&#43;&#43;)<br />&nbsp; &#123;<br />&nbsp;&nbsp;&nbsp; ch = System.Console.Read();<br />&nbsp;&nbsp;&nbsp; &#42;(pBuf&#43;&#43;) = (char)ch;<br />    if ('\\n' == ch)<br />    &#123;<br /> &#9;done = true;<br />    &#125;<br />&nbsp; &#125; <br />&#125;<br />&#125; </pre>"
}