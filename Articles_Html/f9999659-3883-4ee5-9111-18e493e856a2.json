{
  "id": "f9999659-3883-4ee5-9111-18e493e856a2",
  "checksum": "a0145de2aba25bf137cd41c9b06aa7b7d7257564",
  "words": {
    "0": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "5": [
      "pre",
      "pre"
    ],
    "64": [
      "ul",
      "li"
    ],
    "192": [
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "c#": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "this": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "code": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "is": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "demonstrate": [
      "p",
      "pre"
    ],
    "proper": [
      "p",
      "pre",
      "pre"
    ],
    "use": [
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "a": [
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "title",
      "title"
    ],
    "symmetric": [
      "p"
    ],
    "block": [
      "p",
      "ul",
      "li",
      "title"
    ],
    "cipher": [
      "p",
      "pre",
      "ul",
      "li",
      "title"
    ],
    "decrypt": [
      "p",
      "pre",
      "pre",
      "title"
    ],
    "strings": [
      "p"
    ],
    "text": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "within": [
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "an": [
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "application": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "sample": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "demonstrates": [
      "p",
      "p",
      "p"
    ],
    "triple": [
      "p"
    ],
    "des": [
      "p"
    ],
    "which": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "should": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "primarily": [
      "p"
    ],
    "be": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "used": [
      "p",
      "ul",
      "li"
    ],
    "for": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "backwards": [
      "p",
      "ul",
      "li"
    ],
    "compatibility": [
      "p",
      "ul",
      "li"
    ],
    "with": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "other": [
      "p",
      "ul",
      "li"
    ],
    "applications": [
      "p",
      "ul",
      "li"
    ],
    "and": [
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "replaced": [
      "p"
    ],
    "aes": [
      "p",
      "ul",
      "li"
    ],
    "in": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "ul",
      "li",
      "p",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "newer": [
      "p"
    ],
    "implementations": [
      "p",
      "ul",
      "li"
    ],
    "objectives": [
      "h1"
    ],
    "provide": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "confidentiality": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "data": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "transmitted": [
      "ul",
      "li"
    ],
    "over": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "insecure": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "untrusted": [
      "ul",
      "li"
    ],
    "communication": [
      "ul",
      "li"
    ],
    "channels": [
      "ul",
      "li"
    ],
    "storage": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "until": [
      "ul",
      "li"
    ],
    "it": [
      "ul",
      "li"
    ],
    "needed": [
      "ul",
      "li"
    ],
    "by": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "user": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "scenarios": [
      "h1"
    ],
    "developer": [
      "ul",
      "li"
    ],
    "desires": [
      "ul",
      "li"
    ],
    "transit": [
      "ul",
      "li"
    ],
    "3des": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "title"
    ],
    "only": [
      "ul",
      "li"
    ],
    "require": [
      "ul",
      "li"
    ],
    "interaction": [
      "ul",
      "li"
    ],
    "that": [
      "ul",
      "li"
    ],
    "do": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "not": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "implement": [
      "ul",
      "li"
    ],
    "new": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "nist": [
      "ul",
      "li"
    ],
    "encryption": [
      "ul",
      "li",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "standard": [
      "ul",
      "li"
    ],
    "solution": [
      "h1",
      "pre"
    ],
    "example": [
      "h1",
      "h1",
      "p",
      "pre"
    ],
    "public": [
      "pre",
      "pre"
    ],
    "static": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "decryptstringstring": [
      "pre"
    ],
    "ciphertext": [
      "pre"
    ],
    "byte&#91&#93;": [
      "pre",
      "pre"
    ],
    "skey": [
      "pre",
      "pre"
    ],
    "siv&#123;": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "default": [
      "pre"
    ],
    "key": [
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "size": [
      "pre"
    ],
    "under": [
      "pre"
    ],
    "net": [
      "pre"
    ],
    "framework": [
      "pre"
    ],
    "168).": [
      "pre"
    ],
    "following": [
      "pre",
      "p",
      "p",
      "p"
    ],
    "call": [
      "pre",
      "ul",
      "li"
    ],
    "will": [
      "pre"
    ],
    "create": [
      "pre",
      "pre"
    ],
    "crypto": [
      "pre",
      "pre",
      "pre"
    ],
    "provider": [
      "pre"
    ],
    "random": [
      "pre",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "initialization": [
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "vector": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "mode": [
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "defaults": [
      "pre"
    ],
    "cbc": [
      "pre",
      "ul",
      "li"
    ],
    "ensuring": [
      "pre"
    ],
    "chaining": [
      "pre"
    ],
    "mitigate": [
      "pre"
    ],
    "repetition": [
      "pre"
    ],
    "blocks": [
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "tripledescryptoserviceprovider": [
      "pre",
      "pre",
      "pre"
    ],
    "tdes": [
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "tripledescryptoserviceprovider)tripledescryptoserviceprovider.create();": [
      "pre",
      "pre",
      "pre"
    ],
    "//set": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "secret": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "algorithm": [
      "pre",
      "pre"
    ],
    "tdeskey": [
      "pre",
      "pre"
    ],
    "tdesiv": [
      "pre",
      "pre"
    ],
    "siv": [
      "pre"
    ],
    "//create": [
      "pre",
      "pre"
    ],
    "memorystream": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "we'll": [
      "pre",
      "pre"
    ],
    "our": [
      "pre",
      "pre",
      "pre"
    ],
    "input": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ms": [
      "pre",
      "pre"
    ],
    "memorystream);": [
      "pre",
      "pre"
    ],
    "cryptostream": [
      "pre",
      "pre"
    ],
    "ecs": [
      "pre",
      "pre"
    ],
    "cryptostreamms,": [
      "pre",
      "pre"
    ],
    "tdescreatedecryptor(),": [
      "pre",
      "pre"
    ],
    "cryptostreammodewrite);": [
      "pre",
      "pre"
    ],
    "//because": [
      "pre",
      "pre"
    ],
    "passed": [
      "pre",
      "pre"
    ],
    "as": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "base64": [
      "pre",
      "pre"
    ],
    "encoded": [
      "pre",
      "pre"
    ],
    "value": [
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "we": [
      "pre",
      "pre"
    ],
    "decode": [
      "pre",
      "pre"
    ],
    "prior": [
      "pre",
      "pre"
    ],
    "writing": [
      "pre",
      "pre"
    ],
    "//the": [
      "pre",
      "pre"
    ],
    "decryptor": [
      "pre",
      "pre"
    ],
    "stream": [
      "pre",
      "pre"
    ],
    "ecswrite(convert.frombase64string(ciphertext),": [
      "pre",
      "pre"
    ],
    "convertfrombase64string(ciphertext).length);": [
      "pre",
      "pre"
    ],
    "ecsclose();": [
      "pre",
      "pre"
    ],
    "return": [
      "pre",
      "pre"
    ],
    "asciiencodingascii.getstring(ms.toarray());&#125;": [
      "pre",
      "pre"
    ],
    "problem": [
      "h1",
      "pre"
    ],
    "implementation": [
      "p",
      "ul",
      "li"
    ],
    "decryption": [
      "p"
    ],
    "routine": [
      "p"
    ],
    "containing": [
      "p"
    ],
    "several": [
      "p"
    ],
    "common": [
      "p"
    ],
    "secure": [
      "p",
      "pre"
    ],
    "coding": [
      "p"
    ],
    "issues": [
      "p"
    ],
    "problematicdecryptstringstring": [
      "pre"
    ],
    "ciphertext&#123;": [
      "pre"
    ],
    "asciiencodingascii.getbytes(\"asamplekeyweusetoencrypt\");": [
      "pre"
    ],
    "//we": [
      "pre"
    ],
    "don't": [
      "pre"
    ],
    "iv": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "because": [
      "pre",
      "pre"
    ],
    "book": [
      "pre",
      "pre"
    ],
    "doesn't": [
      "pre"
    ],
    "show": [
      "pre"
    ],
    "us": [
      "pre"
    ],
    "using": [
      "pre",
      "ul",
      "li",
      "pre",
      "pre",
      "title"
    ],
    "//more": [
      "pre"
    ],
    "chained": [
      "pre",
      "ul",
      "li"
    ],
    "mode&#33": [
      "pre"
    ],
    "asciiencodingascii.getbytes(\"sampleiv\");": [
      "pre"
    ],
    "unchained": [
      "pre"
    ],
    "says": [
      "pre"
    ],
    "so&#33)": [
      "pre"
    ],
    "tdesmode": [
      "pre"
    ],
    "ciphermodeecb;": [
      "pre"
    ],
    "cleartext": [
      "ul",
      "li"
    ],
    "can": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "extracted": [
      "ul",
      "li"
    ],
    "any": [
      "ul",
      "li",
      "p"
    ],
    "access": [
      "ul",
      "li"
    ],
    "source": [
      "ul",
      "li"
    ],
    "compiled": [
      "ul",
      "li"
    ],
    "weak": [
      "ul",
      "li"
    ],
    "non-random)": [
      "ul",
      "li"
    ],
    "brute-forced": [
      "ul",
      "li"
    ],
    "dictionary": [
      "ul",
      "li"
    ],
    "attack": [
      "ul",
      "li"
    ],
    "ecb),": [
      "ul",
      "li"
    ],
    "performs": [
      "ul",
      "li"
    ],
    "each": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre"
    ],
    "bits": [
      "ul",
      "li"
    ],
    "independently": [
      "ul",
      "li"
    ],
    "no": [
      "ul",
      "li"
    ],
    "feedback": [
      "ul",
      "li"
    ],
    "into": [
      "ul",
      "li"
    ],
    "subsequent": [
      "ul",
      "li"
    ],
    "modes": [
      "ul",
      "li",
      "pre"
    ],
    "attacker": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "rearrange": [
      "ul",
      "li"
    ],
    "replace": [
      "ul",
      "li"
    ],
    "previous": [
      "ul",
      "li"
    ],
    "they": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "observe": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "ecb": [
      "ul",
      "li"
    ],
    "does": [
      "ul",
      "li"
    ],
    "utilize": [
      "ul",
      "li"
    ],
    "yielding": [
      "ul",
      "li"
    ],
    "same": [
      "ul",
      "li"
    ],
    "encrypted": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "plaintext": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "thus": [
      "ul",
      "li"
    ],
    "patterns": [
      "ul",
      "li",
      "p"
    ],
    "perform": [
      "ul",
      "li"
    ],
    "known": [
      "ul",
      "li"
    ],
    "attacks": [
      "ul",
      "li"
    ],
    "note:": [
      "ul",
      "li"
    ],
    "vectors": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "need": [
      "ul",
      "li"
    ],
    "remain": [
      "ul",
      "li"
    ],
    "however": [
      "ul",
      "li"
    ],
    "test": [
      "h1",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "case": [
      "h1",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "classes": [
      "p"
    ],
    "must": [
      "p"
    ],
    "included": [
      "p"
    ],
    "project": [
      "p"
    ],
    "making": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "above": [
      "p"
    ],
    "systemusing": [
      "pre"
    ],
    "systemtext;using": [
      "pre"
    ],
    "systemio;using": [
      "pre"
    ],
    "systemsecurity.cryptography;": [
      "pre"
    ],
    "decryptstring": [
      "p"
    ],
    "function": [
      "p"
    ],
    "void": [
      "pre"
    ],
    "mainstring&#91;&#93;": [
      "pre"
    ],
    "args&#123;": [
      "pre"
    ],
    "enc": [
      "pre",
      "pre",
      "pre"
    ],
    "p2": [
      "pre",
      "pre",
      "pre"
    ],
    "probenc": [
      "pre",
      "pre",
      "pre"
    ],
    "probp2": [
      "pre",
      "pre",
      "pre"
    ],
    "null": [
      "pre"
    ],
    "routines": [
      "pre"
    ],
    "p1": [
      "pre"
    ],
    "\"the": [
      "pre"
    ],
    "quick": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "brown": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "fox": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "jumped": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "lazy": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "dog\"": [
      "pre"
    ],
    "run": [
      "pre",
      "pre"
    ],
    "multiple": [
      "pre"
    ],
    "times": [
      "pre"
    ],
    "different": [
      "pre"
    ],
    "/": [
      "pre"
    ],
    "iteration": [
      "pre"
    ],
    "when": [
      "pre"
    ],
    "consoleout.writeline(\"solution": [
      "pre"
    ],
    "cases": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "-": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "notice": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "varied": [
      "pre",
      "pre"
    ],
    "output": [
      "pre",
      "pre"
    ],
    "input\";": [
      "pre"
    ],
    "consoleout.writeline(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");": [
      "pre"
    ],
    "int": [
      "pre",
      "pre"
    ],
    "i": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "i&#43&#43;)": [
      "pre",
      "pre"
    ],
    "&#123": [
      "pre",
      "pre",
      "pre"
    ],
    "tdesgenerateiv();": [
      "pre"
    ],
    "encryptstringp1,": [
      "pre"
    ],
    "tdeskey,": [
      "pre",
      "pre"
    ],
    "tdesiv);": [
      "pre",
      "pre"
    ],
    "consolewriteline(\"encrypted": [
      "pre",
      "pre"
    ],
    "#&#1230&#125;:": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "&#43": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "i;": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "decryptstringenc,": [
      "pre"
    ],
    "consolewriteline(\"plaintext": [
      "pre",
      "pre"
    ],
    "if": [
      "pre"
    ],
    "&#33;p1.equals(p2))": [
      "pre"
    ],
    "consoleerror.writeline(\"decryption": [
      "pre"
    ],
    "failed\";": [
      "pre"
    ],
    "&#125": [
      "pre",
      "pre"
    ],
    "now": [
      "pre"
    ],
    "out": [
      "pre"
    ],
    "consoleout.writeline(\"problem": [
      "pre"
    ],
    "repetitive": [
      "pre",
      "pre"
    ],
    "value\";": [
      "pre"
    ],
    "consoleout.writeline(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");": [
      "pre"
    ],
    "problematicencryptstringp1);": [
      "pre"
    ],
    "problematicdecryptstringprobenc);": [
      "pre"
    ],
    "&#125&#125;": [
      "pre"
    ],
    "keys": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "are": [
      "ul",
      "li"
    ],
    "chosen": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "during": [
      "ul",
      "li"
    ],
    "tripledescryptoserviceprovidercreate().": [
      "ul",
      "li"
    ],
    "real-world": [
      "ul",
      "li"
    ],
    "retrieved": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li",
      "p"
    ],
    "protection": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "api": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "refer": [
      "ul",
      "li"
    ],
    "demonstrating": [
      "ul",
      "li"
    ],
    "expected": [
      "h1"
    ],
    "result": [
      "h1"
    ],
    "input-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-encrypted": [
      "pre"
    ],
    "#0": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "f9n80d72ac1od2b9a8yux/66ukaquzqlvqiv0a5xmtqded6hoky5wfmcqtxoa0khplaintext": [
      "pre"
    ],
    "dogencrypted": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "#1": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "jlosmkmyw7twxgnnkinw/jczzjiwm1k9deyafbbmfo9iommfcg9s0x917bm0mbggplaintext": [
      "pre"
    ],
    "#2": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "zprbqwz8ntponas&#434tjkgec88ntgj5estizwuh4h9sqkkzdxxj4qm6y9yeuggh8cplaintext": [
      "pre"
    ],
    "#3": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "4sspsatxebobucrtbdchq7slurzknszijpcmtg0pumthnpmi93mrbrqgfvozbjekplaintext": [
      "pre"
    ],
    "#4": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sxkz3vdjp6szw/iwznph1vgr&#43reyozcsntvj6pnw75yqd7xb/ww&#43;3&#43;3xet4q7pf&#43;plaintext": [
      "pre"
    ],
    "dogproblem": [
      "pre"
    ],
    "value-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-encrypted": [
      "pre"
    ],
    "z&#430n6rlmz2flwasqldkyihaxesirax&#43;68xe2cwzchqh2cye1zjjogfmstnnxoivoplaintext": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "dog": [
      "pre"
    ],
    "more": [
      "h1"
    ],
    "information": [
      "h1"
    ],
    "assumes": [
      "ul",
      "li"
    ],
    "dataprotection": [
      "ul",
      "li"
    ],
    "implemented": [
      "ul",
      "li"
    ],
    "securely": [
      "ul",
      "li"
    ],
    "store": [
      "ul",
      "li"
    ],
    "retrieve": [
      "ul",
      "li"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ],
    "via": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Objectives",
      "Scenarios",
      "Solution Example",
      "Problem Example",
      "Test Case",
      "Expected Result",
      "More Information"
    ],
    "ul": [
      "C#",
      "To provide confidentiality of data which is transmitted over insecure or untrusted communication channels. To provide confidentiality of data in storage until it is needed by a user or application",
      "Application developer desires confidentiality for data in storage or in transit. 3DES should only be used in implementations which require backwards compatibility for interaction with applications that do not implement the new NIST encryption standard, AES.",
      "Cleartext encryption key can be extracted by any user with access to the source code or compiled code Use of a weak encryption (non-random) key, which can be brute-forced using a dictionary attack Insecure cipher mode (ECB), performs encryption of each block 64 bits independently with no feedback into subsequent blocks as CBC and other chained modes do. An attacker can rearrange or replace blocks with previous blocks they observe. ECB mode does not utilize an initialization vector, yielding the same encrypted value for each plaintext value. An attacker can thus observe patterns in the encrypted blocks and perform known plaintext attacks (Note: Initialization vectors need not remain secret however they should be random for each encrypted value of the plaintext)",
      "In this test case 3DES encryption keys and initialization vectors are chosen at random during the call to TripleDESCryptoServiceProvider.Create(). In a real-world implementation Key and IV should be retrieved from the Data Protection API within application code please refer to code sample demonstrating use of Data Protection API.",
      "The test case assumes use of the DataProtection API implemented within the user code to securely store and retrieve encryption keys."
    ],
    "li": [
      "C#",
      "To provide confidentiality of data which is transmitted over insecure or untrusted communication channels.",
      "To provide confidentiality of data in storage until it is needed by a user or application",
      "Application developer desires confidentiality for data in storage or in transit.",
      "3DES should only be used in implementations which require backwards compatibility for interaction with applications that do not implement the new NIST encryption standard, AES.",
      "Cleartext encryption key can be extracted by any user with access to the source code or compiled code",
      "Use of a weak encryption (non-random) key, which can be brute-forced using a dictionary attack",
      "Insecure cipher mode (ECB), performs encryption of each block 64 bits independently with no feedback into subsequent blocks as CBC and other chained modes do. An attacker can rearrange or replace blocks with previous blocks they observe.",
      "ECB mode does not utilize an initialization vector, yielding the same encrypted value for each plaintext value. An attacker can thus observe patterns in the encrypted blocks and perform known plaintext attacks (Note: Initialization vectors need not remain secret however they should be random for each encrypted value of the plaintext)",
      "In this test case 3DES encryption keys and initialization vectors are chosen at random during the call to TripleDESCryptoServiceProvider.Create().",
      "In a real-world implementation Key and IV should be retrieved from the Data Protection API within application code please refer to code sample demonstrating use of Data Protection API.",
      "The test case assumes use of the DataProtection API implemented within the user code to securely store and retrieve encryption keys."
    ],
    "p": [
      "The purpose of this code is to demonstrate the proper use of a symmetric block cipher to decrypt strings of text within an application. This code sample demonstrates the use of Triple DES, which should primarily be used for backwards compatibility with other applications and replaced with AES in newer implementations of code.",
      "The following example demonstrates an implementation of a Decryption routine containing several common secure coding issues.",
      "The following classes must be included in any project making use of the sample code provided above:",
      "The following test case demonstrates the use of the DecryptString function",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "public static string DecryptString(string ciphertext, byte&#91;&#93; sKey, byte&#91;&#93; sIV)&#123;    // The default 3DES key size under the .NET framework is 192 (168).  The following    // call will create a 3DES crypto provider and create a random initialization    // vector and key. The crypto mode defaults to CBC ensuring the proper chaining     // of data to mitigate repetition of cipher text blocks.    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();    //Set secret key For 3DES algorithm.    tdes.Key = sKey;    //Set initialization vector.    tdes.IV = sIV;    //Create a memorystream to which we'll decrypt our input string    MemoryStream ms = new MemoryStream();    CryptoStream ecs = new CryptoStream(ms, tdes.CreateDecryptor(), CryptoStreamMode.Write);    //Because the input string is passed in as a Base64 encoded value we decode prior writing to     //the decryptor stream.    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);    ecs.Close();    return ASCIIEncoding.ASCII.GetString(ms.ToArray());&#125;",
      "public static string ProblematicDecryptString(string ciphertext)&#123;    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();    //Set secret key For 3DES algorithm.    tdes.Key = ASCIIEncoding.ASCII.GetBytes(\"ASAMPLEKEYWEUSETOENCRYPT\");    //We don't use an IV because the book doesn't show us an example using a     //more secure, chained mode&#33;    // tdes.IV = ASCIIEncoding.ASCII.GetBytes(\"SAMPLEIV\");    //Set encryption mode to an unchained value (because the book says so&#33;)    tdes.Mode = CipherMode.ECB;    //Create a memorystream to which we'll decrypt our input string    MemoryStream ms = new MemoryStream();    CryptoStream ecs = new CryptoStream(ms, tdes.CreateDecryptor(), CryptoStreamMode.Write);    //Because the input string is passed in as a Base64 encoded value we decode prior writing to     //the decryptor stream.    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);    ecs.Close();    return ASCIIEncoding.ASCII.GetString(ms.ToArray());&#125;",
      "using System;using System.Text;using System.IO;using System.Security.Cryptography;",
      "static void Main(string&#91;&#93; args)&#123;    string enc, p2, probenc, probp2 = null;    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();    // Test case for string encryption routines    string p1 = \"the quick brown fox jumped over the lazy dog\";    // Run our test case multiple times to demonstrate different IV / encrypted text for each    // iteration in when using proper crypto modes.    Console.Out.WriteLine(\"Solution test cases - notice varied output for static input\");    Console.Out.WriteLine(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");    for (int i = 0; i < 5; i&#43;&#43;)    &#123;        tdes.GenerateIV();        enc = EncryptString(p1, tdes.Key, tdes.IV);        Console.WriteLine(\"Encrypted text #&#123;0&#125;: \" &#43; enc, i);        p2 = DecryptString(enc, tdes.Key, tdes.IV);        Console.WriteLine(\"Plaintext #&#123;0&#125;: \" &#43; p2, i);        if (&#33;p1.Equals(p2))        &#123;            Console.Error.WriteLine(\"Decryption failed\");        &#125;    &#125;    // Now run out problem test cases    Console.Out.WriteLine(\"Problem test cases - notice repetitive encrypted value\");    Console.Out.WriteLine(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");    for (int i = 0; i < 5; i&#43;&#43;)    &#123;        probenc = ProblematicEncryptString(p1);        probp2 = ProblematicDecryptString(probenc);        Console.WriteLine(\"Encrypted text #&#123;0&#125;: \" &#43; probenc, i);        Console.WriteLine(\"Plaintext #&#123;0&#125;: \" &#43; probp2, i);    &#125;&#125;",
      "Solution test cases - notice varied output for static input-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-Encrypted text #0: f9n80d72AC1oD2b9a8yux/66UKaquzQLvQIV0A5xmtqded6hOKY5WFmcqtXOa0KHPlaintext #0: the quick brown fox jumped over the lazy dogEncrypted text #1: jloSmkMYW7TWXgnNKiNw/JCzzjIwm1K9DeyaFBbMfO9IOMMFcg9s0x917Bm0mBggPlaintext #1: the quick brown fox jumped over the lazy dogEncrypted text #2: zpRBQWz8ntpONAS&#43;4tJKgEC88ntgj5esTizWUH4h9sQKkZDxxJ4qM6Y9yEugGH8cPlaintext #2: the quick brown fox jumped over the lazy dogEncrypted text #3: 4ssPSATxEbOBucRtbDcHq7SLurzknsZijpcMTg0puMthnPmI93mrbRQgfvOzbJEkPlaintext #3: the quick brown fox jumped over the lazy dogEncrypted text #4: sxKZ3VDJP6SZw/IwznpH1VgR&#43;rEYozcsntVJ6pnw75YqD7xb/WW&#43;3&#43;3xeT4Q7Pf&#43;Plaintext #4: the quick brown fox jumped over the lazy dogProblem test cases - notice repetitive encrypted value-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-Encrypted text #0: z&#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVOPlaintext #0: the quick brown fox jumped over the lazy dogEncrypted text #1: z&#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVOPlaintext #1: the quick brown fox jumped over the lazy dogEncrypted text #2: z&#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVOPlaintext #2: the quick brown fox jumped over the lazy dogEncrypted text #3: z&#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVOPlaintext #3: the quick brown fox jumped over the lazy dogEncrypted text #4: z&#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVOPlaintext #4: the quick brown fox jumped over the lazy dog"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C#</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>The purpose of this code is to demonstrate the proper use of a symmetric block cipher to decrypt strings of text within an application. This code sample demonstrates the use of Triple DES, which should primarily be used for backwards compatibility with other applications and replaced with AES in newer implementations of code.</p>\n  <h1>Objectives</h1>\n  <ul>\n    <li>To provide confidentiality of data which is transmitted over insecure or untrusted communication channels. <li>To provide confidentiality of data in storage until it is needed by a user or application</li></li>\n  </ul>\n  <h1>Scenarios</h1>\n  <ul>\n    <li>Application developer desires confidentiality for data in storage or in transit. <li>3DES should only be used in implementations which require backwards compatibility for interaction with applications that do not implement the new NIST encryption standard, AES.</li></li>\n  </ul>\n  <h1>Solution Example</h1>\n  <pre>public static string DecryptString(string ciphertext, byte&amp;#91;&amp;#93; sKey, byte&amp;#91;&amp;#93; sIV)&amp;#123;<br />    // The default 3DES key size under the .NET framework is 192 (168).  The following<br />    // call will create a 3DES crypto provider and create a random initialization<br />    // vector and key. The crypto mode defaults to CBC ensuring the proper chaining<br />     // of data to mitigate repetition of cipher text blocks.<br />    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();<br />    //Set secret key For 3DES algorithm.<br />    tdes.Key = sKey;<br />    //Set initialization vector.<br />    tdes.IV = sIV;<br />    //Create a memorystream to which we'll decrypt our input string<br />    MemoryStream ms = new MemoryStream();<br />    CryptoStream ecs = new CryptoStream(ms, tdes.CreateDecryptor(), CryptoStreamMode.Write);<br />    //Because the input string is passed in as a Base64 encoded value we decode prior writing to<br />     //the decryptor stream.<br />    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);<br />    ecs.Close();<br />    return ASCIIEncoding.ASCII.GetString(ms.ToArray());<br />&amp;#125;</pre>\n  <h1>Problem Example</h1>\n  <p>The following example demonstrates an implementation of a Decryption routine containing several common secure coding issues.</p>\n  <pre>public static string ProblematicDecryptString(string ciphertext)<br />&amp;#123;<br />    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();<br />    //Set secret key For 3DES algorithm.<br />    tdes.Key = ASCIIEncoding.ASCII.GetBytes(\"ASAMPLEKEYWEUSETOENCRYPT\");<br />    //We don't use an IV because the book doesn't show us an example using a<br />     //more secure, chained mode&amp;#33;<br />    // tdes.IV = ASCIIEncoding.ASCII.GetBytes(\"SAMPLEIV\");<br />    //Set encryption mode to an unchained value (because the book says so&amp;#33;)<br />    tdes.Mode = CipherMode.ECB;<br />    //Create a memorystream to which we'll decrypt our input string<br />    MemoryStream ms = new MemoryStream();<br />    CryptoStream ecs = new CryptoStream(ms, tdes.CreateDecryptor(), CryptoStreamMode.Write);<br />    //Because the input string is passed in as a Base64 encoded value we decode prior writing to<br />     //the decryptor stream.<br />    ecs.Write(Convert.FromBase64String(ciphertext), 0, Convert.FromBase64String(ciphertext).Length);<br />    ecs.Close();    return ASCIIEncoding.ASCII.GetString(ms.ToArray());<br />&amp;#125;</pre>\n  <ul>\n    <li>Cleartext encryption key can be extracted by any user with access to the source code or compiled code <li>Use of a weak encryption (non-random) key, which can be brute-forced using a dictionary attack <li>Insecure cipher mode (ECB), performs encryption of each block 64 bits independently with no feedback into subsequent blocks as CBC and other chained modes do. An attacker can rearrange or replace blocks with previous blocks they observe. <li>ECB mode does not utilize an initialization vector, yielding the same encrypted value for each plaintext value. An attacker can thus observe patterns in the encrypted blocks and perform known plaintext attacks (Note: Initialization vectors need not remain secret however they should be random for each encrypted value of the plaintext)</li></li></li></li>\n  </ul>\n  <h1>Test Case</h1>\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\n  <pre>using System;<br />using System.Text;<br />using System.IO;<br />using System.Security.Cryptography;</pre>\n  <p>The following test case demonstrates the use of the DecryptString function</p>\n  <pre>static void Main(string&amp;#91;&amp;#93; args)<br />&amp;#123;<br />    string enc, p2, probenc, probp2 = null;<br />    TripleDESCryptoServiceProvider tdes = (TripleDESCryptoServiceProvider)TripleDESCryptoServiceProvider.Create();<br />    // Test case for string encryption routines<br />    string p1 = \"the quick brown fox jumped over the lazy dog\";<br />    // Run our test case multiple times to demonstrate different IV / encrypted text for each<br />    // iteration in when using proper crypto modes.<br />    Console.Out.WriteLine(\"Solution test cases - notice varied output for static input\");<br />    Console.Out.WriteLine(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");<br />    for (int i = 0; i &lt; 5; i&amp;#43;&amp;#43;)<br />    &amp;#123;<br />        tdes.GenerateIV();<br />        enc = EncryptString(p1, tdes.Key, tdes.IV);<br />        Console.WriteLine(\"Encrypted text #&amp;#123;0&amp;#125;: \" &amp;#43; enc, i);<br />        p2 = DecryptString(enc, tdes.Key, tdes.IV);<br />        Console.WriteLine(\"Plaintext #&amp;#123;0&amp;#125;: \" &amp;#43; p2, i);<br />        if (&amp;#33;p1.Equals(p2))<br />        &amp;#123;<br />            Console.Error.WriteLine(\"Decryption failed\");<br />        &amp;#125;<br />    &amp;#125;<br />    // Now run out problem test cases<br />    Console.Out.WriteLine(\"Problem test cases - notice repetitive encrypted value\");<br />    Console.Out.WriteLine(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\");<br />    for (int i = 0; i &lt; 5; i&amp;#43;&amp;#43;)<br />    &amp;#123;<br />        probenc = ProblematicEncryptString(p1);<br />        probp2 = ProblematicDecryptString(probenc);<br />        Console.WriteLine(\"Encrypted text #&amp;#123;0&amp;#125;: \" &amp;#43; probenc, i);<br />        Console.WriteLine(\"Plaintext #&amp;#123;0&amp;#125;: \" &amp;#43; probp2, i);<br />    &amp;#125;<br />&amp;#125;</pre>\n  <ul>\n    <li>In this test case 3DES encryption keys and initialization vectors are chosen at random during the call to TripleDESCryptoServiceProvider.Create(). <li>In a real-world implementation Key and IV should be retrieved from the Data Protection API within application code please refer to code sample demonstrating use of Data Protection API.</li></li>\n  </ul>\n  <h1>Expected Result</h1>\n  <pre>Solution test cases - notice varied output for static input-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<br />Encrypted text #0: f9n80d72AC1oD2b9a8yux/66UKaquzQLvQIV0A5xmtqded6hOKY5WFmcqtXOa0KH<br />Plaintext #0: the quick brown fox jumped over the lazy dog<br />Encrypted text #1: jloSmkMYW7TWXgnNKiNw/JCzzjIwm1K9DeyaFBbMfO9IOMMFcg9s0x917Bm0mBgg<br />Plaintext #1: the quick brown fox jumped over the lazy dog<br />Encrypted text #2: zpRBQWz8ntpONAS&amp;#43;4tJKgEC88ntgj5esTizWUH4h9sQKkZDxxJ4qM6Y9yEugGH8c<br />Plaintext #2: the quick brown fox jumped over the lazy dog<br />Encrypted text #3: 4ssPSATxEbOBucRtbDcHq7SLurzknsZijpcMTg0puMthnPmI93mrbRQgfvOzbJEk<br />Plaintext #3: the quick brown fox jumped over the lazy dog<br />Encrypted text #4: sxKZ3VDJP6SZw/IwznpH1VgR&amp;#43;rEYozcsntVJ6pnw75YqD7xb/WW&amp;#43;3&amp;#43;3xeT4Q7Pf&amp;#43;<br />Plaintext #4: the quick brown fox jumped over the lazy dog<br />Problem test cases - notice repetitive encrypted value-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<br />Encrypted text #0: z&amp;#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&amp;#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #0: the quick brown fox jumped over the lazy dog<br />Encrypted text #1: z&amp;#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&amp;#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #1: the quick brown fox jumped over the lazy dog<br />Encrypted text #2: z&amp;#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&amp;#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #2: the quick brown fox jumped over the lazy dog<br />Encrypted text #3: z&amp;#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&amp;#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #3: the quick brown fox jumped over the lazy dog<br />Encrypted text #4: z&amp;#43;0N6RlMZ2FLwaSQLDkyIHaxEsirAX&amp;#43;68xE2cwZcHqh2CyE1zjjoGfMSTnnxOIVO<br />Plaintext #4: the quick brown fox jumped over the lazy dog</pre>\n  <h1>More Information</h1>\n  <ul>\n    <li>The test case assumes use of the DataProtection API implemented within the user code to securely store and retrieve encryption keys.</li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}