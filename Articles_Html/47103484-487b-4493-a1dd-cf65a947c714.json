{
  "id": "47103484-487b-4493-a1dd-cf65a947c714",
  "checksum": "dea1df1d7ddc6366c843a7ed4787684846a15f48",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "applications": [
      "p"
    ],
    "which": [
      "p"
    ],
    "provide": [
      "p"
    ],
    "authentication": [
      "p"
    ],
    "description": [
      "h1"
    ],
    "attackers": [
      "p"
    ],
    "can": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "reverse": [
      "p"
    ],
    "weak": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "passwords": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "by": [
      "p",
      "ul",
      "li"
    ],
    "generating": [
      "p"
    ],
    "large": [
      "p",
      "p"
    ],
    "tables": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "hashed": [
      "p",
      "p",
      "p"
    ],
    "values": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "called": [
      "p"
    ],
    "\"rainbow": [
      "p"
    ],
    "tables\"": [
      "p"
    ],
    "map": [
      "p"
    ],
    "plaintext": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "table",
      "tr",
      "td",
      "tt"
    ],
    "value": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "so": [
      "p",
      "ul",
      "li"
    ],
    "that": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "when": [
      "p"
    ],
    "hacker": [
      "p"
    ],
    "discovers": [
      "p"
    ],
    "table": [
      "p",
      "p",
      "p",
      "p"
    ],
    "usernames": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "simple": [
      "p"
    ],
    "lookup": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "necessary": [
      "p"
    ],
    "discover": [
      "p"
    ],
    "password": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "tr",
      "td",
      "tt",
      "tr",
      "td",
      "tt",
      "title"
    ],
    "rainbow": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "very": [
      "p",
      "p"
    ],
    "expensive": [
      "p"
    ],
    "create": [
      "p",
      "li"
    ],
    "often": [
      "p"
    ],
    "taking": [
      "p"
    ],
    "weeks": [
      "p"
    ],
    "or": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "months": [
      "p"
    ],
    "generate": [
      "p"
    ],
    "consuming": [
      "p"
    ],
    "amounts": [
      "p"
    ],
    "hard": [
      "p"
    ],
    "drive": [
      "p"
    ],
    "space": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "li"
    ],
    "this": [
      "p",
      "ul",
      "li"
    ],
    "reason": [
      "p"
    ],
    "usually": [
      "p"
    ],
    "not": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "generated": [
      "p",
      "p",
      "p"
    ],
    "each": [
      "p",
      "p"
    ],
    "attack": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "li",
      "a",
      "a",
      "title"
    ],
    "but": [
      "p"
    ],
    "once": [
      "p"
    ],
    "reused": [
      "p"
    ],
    "multiple": [
      "p"
    ],
    "times": [
      "p"
    ],
    "impact": [
      "h1"
    ],
    "credential": [
      "ul",
      "li"
    ],
    "compromise\ninformation": [
      "ul"
    ],
    "disclosure": [
      "ul",
      "li"
    ],
    "compromise": [
      "li"
    ],
    "information": [
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "vulnerabilities": [
      "h1"
    ],
    "hashing": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "algorithm": [
      "ul",
      "li",
      "li",
      "p"
    ],
    "many": [
      "ul",
      "li"
    ],
    "algorithms": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "have": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "been": [
      "ul",
      "li"
    ],
    "cracked": [
      "ul",
      "li"
    ],
    "allowing": [
      "ul",
      "li"
    ],
    "be": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "recovered": [
      "ul",
      "li"
    ],
    "easily": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "proven": [
      "ul",
      "li"
    ],
    "secure": [
      "ul",
      "li"
    ],
    "reversed": [
      "ul",
      "li"
    ],
    "even": [
      "ul",
      "li"
    ],
    "if": [
      "ul",
      "li"
    ],
    "attacker": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "does": [
      "ul",
      "li"
    ],
    "original": [
      "ul",
      "li"
    ],
    "source": [
      "ul",
      "li"
    ],
    "therefore": [
      "ul",
      "li"
    ],
    "one": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "should": [
      "ul",
      "li"
    ],
    "never": [
      "ul",
      "li"
    ],
    "attempt": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "write": [
      "ul",
      "li"
    ],
    "one's": [
      "ul",
      "li"
    ],
    "own": [
      "ul",
      "li"
    ],
    "algorithm\nlack": [
      "ul"
    ],
    "salt": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li"
    ],
    "random": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "added": [
      "ul",
      "li"
    ],
    "ensure": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "previously": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "calculated": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "cannot": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "used": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "lack": [
      "li"
    ],
    "countermeasures": [
      "h1"
    ],
    "use": [
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "strong": [
      "ul",
      "li"
    ],
    "research": [
      "ul",
      "li"
    ],
    "current": [
      "ul",
      "li"
    ],
    "best": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "practice": [
      "ul",
      "li",
      "li"
    ],
    "currently": [
      "ul",
      "li"
    ],
    "sha256": [
      "ul",
      "li"
    ],
    "practice\nencrypt": [
      "ul"
    ],
    "with": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "adds": [
      "ul",
      "li"
    ],
    "must": [
      "ul",
      "li"
    ],
    "stored": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "verify": [
      "ul",
      "li"
    ],
    "challenge": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "password\nuse": [
      "ul"
    ],
    "only": [
      "ul",
      "li"
    ],
    "one-way": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li"
    ],
    "way": [
      "ul",
      "li"
    ],
    "will": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "proper": [
      "ul",
      "li"
    ],
    "hash": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "table",
      "tr",
      "td",
      "tt",
      "ul",
      "li"
    ],
    "compare": [
      "ul",
      "li"
    ],
    "minimize": [
      "ul",
      "li"
    ],
    "amount": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "time": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "in": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "memory\ncreate": [
      "ul"
    ],
    "policy": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "determine": [
      "ul",
      "li"
    ],
    "level": [
      "ul",
      "li"
    ],
    "passphrase": [
      "ul",
      "li"
    ],
    "strength": [
      "ul",
      "li"
    ],
    "required": [
      "ul",
      "li"
    ],
    "your": [
      "ul",
      "li"
    ],
    "application": [
      "ul",
      "li"
    ],
    "state": [
      "ul",
      "li"
    ],
    "it": [
      "ul",
      "li"
    ],
    "system": [
      "ul",
      "li"
    ],
    "enforces": [
      "ul",
      "li"
    ],
    "automatically": [
      "ul",
      "li"
    ],
    "prevent": [
      "ul",
      "li"
    ],
    "users": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "accidentally": [
      "ul",
      "li"
    ],
    "intentionally": [
      "ul",
      "li"
    ],
    "choosing": [
      "ul",
      "li"
    ],
    "passwords\nrequire": [
      "ul"
    ],
    "regular": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "changes": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "reduce": [
      "ul",
      "li"
    ],
    "an": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "account": [
      "ul",
      "li"
    ],
    "potentially": [
      "ul",
      "li"
    ],
    "exposed": [
      "ul",
      "li"
    ],
    "give": [
      "ul",
      "li"
    ],
    "less": [
      "ul",
      "li"
    ],
    "crack": [
      "ul",
      "li"
    ],
    "encrypt": [
      "li"
    ],
    "memory": [
      "li"
    ],
    "require": [
      "li"
    ],
    "example": [
      "h1"
    ],
    "could": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "popular": [
      "p"
    ],
    "dictionary": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "possible": [
      "p"
    ],
    "subset": [
      "p"
    ],
    "characters": [
      "p"
    ],
    "hashes": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "length": [
      "p"
    ],
    "also": [
      "p"
    ],
    "has": [
      "p"
    ],
    "sha,": [
      "p"
    ],
    "md5": [
      "p"
    ],
    "md4": [
      "p"
    ],
    "etc)": [
      "p"
    ],
    "sample": [
      "p"
    ],
    "may": [
      "p"
    ],
    "look": [
      "p"
    ],
    "something": [
      "p"
    ],
    "like": [
      "p"
    ],
    "following": [
      "p"
    ],
    "sha1": [
      "table",
      "tr",
      "td",
      "tt"
    ],
    "test": [
      "table",
      "tr",
      "td",
      "tt"
    ],
    "640ab2bae07bedc4c163f679a746f7ab7fb5d1fademo": [
      "table"
    ],
    "e52c854d5631eec7468ba4727b4c77eb745f2965password": [
      "table"
    ],
    "8be3c943b1609fffbfc51aad666d0a04adf83c9dpassword": [
      "table"
    ],
    "5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8admin": [
      "table"
    ],
    "4e7afebcfbae000b22c7c85e5560f89a2a0280b4": [
      "table",
      "tr",
      "td",
      "tt"
    ],
    "640ab2bae07bedc4c163f679a746f7ab7fb5d1fa": [
      "tr",
      "td",
      "tt"
    ],
    "demo": [
      "tr",
      "td",
      "tt"
    ],
    "e52c854d5631eec7468ba4727b4c77eb745f2965": [
      "tr",
      "td",
      "tt"
    ],
    "8be3c943b1609fffbfc51aad666d0a04adf83c9d": [
      "tr",
      "td",
      "tt"
    ],
    "5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8": [
      "tr",
      "td",
      "tt"
    ],
    "admin": [
      "tr",
      "td",
      "tt"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "on": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "function": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "http//en.wikipedia.org/wiki/hash_function\nfor": [
      "ul"
    ],
    "cryptographic": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/salt_%28cryptography%29": [
      "ul",
      "li",
      "a"
    ],
    "http//en.wikipedia.org/wiki/hash_function": [
      "li",
      "a"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "credentials": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "brute": [
      "ul",
      "li",
      "a"
    ],
    "force": [
      "ul",
      "li",
      "a"
    ],
    "attackattack:": [
      "ul",
      "ul"
    ],
    "statistical": [
      "ul",
      "li",
      "a"
    ],
    "analysis": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Description",
      "Impact",
      "Vulnerabilities",
      "Countermeasures",
      "Example",
      "Additional Resources",
      "Related Items"
    ],
    "p": [
      "All applications which provide authentication.",
      "Attackers can reverse weak passwords by generating large tables of hashed values. The tables, called \"rainbow tables,\" map the plaintext value to a hashed value so that, when the hacker discovers a table of usernames and hashed passwords, a simple lookup is all that is necessary to discover the plaintext password. Rainbow tables are very expensive to create, often taking weeks or months to generate and consuming very large amounts of hard drive space. For this reason rainbow tables are usually not generated for each attack, but generated once and reused multiple times.",
      "A rainbow table could contain all the popular passwords from a dictionary, all the possible passwords from a subset of characters or all hashes for a certain password length. The rainbow table also has to be generated for each hashing algorithm (SHA, MD5, MD4, etc.) A sample of a rainbow table may look something like the following:"
    ],
    "ul": [
      "Credential compromise.\nInformation disclosure.",
      "Weak hashing algorithm: Many hashing algorithms have been cracked, allowing for passwords to be recovered easily. Hashing algorithms that are not proven secure can be easily reversed, even if the attacker does not have the original source. Therefore one should never attempt to write one's own hashing algorithm.\nLack of salt: A random value can be added to the plaintext of the passwords to ensure that previously calculated rainbow tables cannot be used.",
      "Use strong hashing algorithms: Research the current best practice for hashing algorithms, currently SHA256 is best practice.\nEncrypt the plaintext passwords with salt: Salt adds a random value to the password so previously calculated rainbow tables cannot be used. The salt must be stored to verify the challenge password.\nUse only one-way hashing algorithms: Using one way hashing algorithms will ensure proper use of the hash. Hash the challenge password and compare the calculated hash with the stored hash. This will minimize the amount of time the plaintext password is stored in memory.\nCreate a password policy: Determine the level of password or passphrase strength required by your application and state it in policy. Ensure that the system enforces the policy automatically, to prevent users from accidentally or intentionally choosing weak passwords.\nRequire regular password changes: Regular password changes will reduce the amount of time that an account with a potentially weak password is exposed, and will give an attacker less time to attempt to crack the password.",
      "For more information on Hash Function, see: http://en.wikipedia.org/wiki/Hash_function\nFor more information on Cryptographic Salt, see: http://en.wikipedia.org/wiki/Salt_%28cryptography%29",
      "Attack: Credentials Brute Force Attack\nAttack: Credentials Dictionary Attack\nAttack: Statistical Analysis Attack"
    ],
    "li": [
      "Credential compromise.",
      "Information disclosure.",
      "Weak hashing algorithm: Many hashing algorithms have been cracked, allowing for passwords to be recovered easily. Hashing algorithms that are not proven secure can be easily reversed, even if the attacker does not have the original source. Therefore one should never attempt to write one's own hashing algorithm.",
      "Lack of salt: A random value can be added to the plaintext of the passwords to ensure that previously calculated rainbow tables cannot be used.",
      "Use strong hashing algorithms: Research the current best practice for hashing algorithms, currently SHA256 is best practice.",
      "Encrypt the plaintext passwords with salt: Salt adds a random value to the password so previously calculated rainbow tables cannot be used. The salt must be stored to verify the challenge password.",
      "Use only one-way hashing algorithms: Using one way hashing algorithms will ensure proper use of the hash. Hash the challenge password and compare the calculated hash with the stored hash. This will minimize the amount of time the plaintext password is stored in memory.",
      "Create a password policy: Determine the level of password or passphrase strength required by your application and state it in policy. Ensure that the system enforces the policy automatically, to prevent users from accidentally or intentionally choosing weak passwords.",
      "Require regular password changes: Regular password changes will reduce the amount of time that an account with a potentially weak password is exposed, and will give an attacker less time to attempt to crack the password.",
      "For more information on Hash Function, see: http://en.wikipedia.org/wiki/Hash_function",
      "For more information on Cryptographic Salt, see: http://en.wikipedia.org/wiki/Salt_%28cryptography%29",
      "Attack: Credentials Brute Force Attack",
      "Attack: Credentials Dictionary Attack",
      "Attack: Statistical Analysis Attack"
    ],
    "table": [
      "Plaintext SHA1 Hash                          Test 640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FADemo E52C854D5631EEC7468BA4727B4C77EB745F2965Password 8BE3C943B1609FFFBFC51AAD666D0A04ADF83C9Dpassword 5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8Admin 4E7AFEBCFBAE000B22C7C85E5560F89A2A0280B4"
    ],
    "tr": [
      "Plaintext SHA1 Hash",
      "Test 640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FA",
      "Demo E52C854D5631EEC7468BA4727B4C77EB745F2965",
      "Password 8BE3C943B1609FFFBFC51AAD666D0A04ADF83C9D",
      "password 5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8",
      "Admin 4E7AFEBCFBAE000B22C7C85E5560F89A2A0280B4"
    ],
    "td": [
      "Plaintext",
      "SHA1 Hash",
      "Test",
      "640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FA",
      "Demo",
      "E52C854D5631EEC7468BA4727B4C77EB745F2965",
      "Password",
      "8BE3C943B1609FFFBFC51AAD666D0A04ADF83C9D",
      "password",
      "5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8",
      "Admin",
      "4E7AFEBCFBAE000B22C7C85E5560F89A2A0280B4"
    ],
    "tt": [
      "Plaintext",
      "SHA1 Hash",
      "Test",
      "640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FA",
      "Demo",
      "E52C854D5631EEC7468BA4727B4C77EB745F2965",
      "Password",
      "8BE3C943B1609FFFBFC51AAD666D0A04ADF83C9D",
      "password",
      "5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8",
      "Admin",
      "4E7AFEBCFBAE000B22C7C85E5560F89A2A0280B4"
    ],
    "a": [
      "http://en.wikipedia.org/wiki/Hash_function",
      "http://en.wikipedia.org/wiki/Salt_%28cryptography%29",
      "Attack: Credentials Brute Force Attack",
      "Attack: Credentials Dictionary Attack",
      "Attack: Statistical Analysis Attack"
    ]
  },
  "links": [
    {
      "href": "http://en.wikipedia.org/wiki/Hash_function",
      "text": "http://en.wikipedia.org/wiki/Hash_function"
    },
    {
      "href": "http://en.wikipedia.org/wiki/Salt_%28cryptography%29",
      "text": "http://en.wikipedia.org/wiki/Salt_%28cryptography%29"
    },
    {
      "href": "e3ffdced-ef7e-45c7-bbbb-a7e71052053c",
      "text": "Attack: Credentials Brute Force Attack"
    },
    {
      "href": "d00e43b2-f820-4668-8174-07045c4874be",
      "text": "Attack: Credentials Dictionary Attack"
    },
    {
      "href": "331bfa1d-94c7-485b-8d8f-b8bab3e679e4",
      "text": "Attack: Statistical Analysis Attack"
    }
  ],
  "html": "<h1>Applies To</h1><p>All applications which provide authentication.\n</p><h1>Description</h1><p>Attackers can reverse weak passwords by generating large tables of hashed values. The tables, called \"rainbow tables,\" map the plaintext value to a hashed value so that, when the hacker discovers a table of usernames and hashed passwords, a simple lookup is all that is necessary to discover the plaintext password. Rainbow tables are very expensive to create, often taking weeks or months to generate and consuming very large amounts of hard drive space. For this reason rainbow tables are usually not generated for each attack, but generated once and reused multiple times.\n</p><h1>Impact</h1><ul><li>Credential compromise.</li>\n<li>Information disclosure.</li>\n</ul><h1>Vulnerabilities</h1><ul><li>Weak hashing algorithm: Many hashing algorithms have been cracked, allowing for passwords to be recovered easily. Hashing algorithms that are not proven secure can be easily reversed, even if the attacker does not have the original source. Therefore one should never attempt to write one's own hashing algorithm.</li>\n<li>Lack of salt: A random value can be added to the plaintext of the passwords to ensure that previously calculated rainbow tables cannot be used.</li>\n</ul><h1>Countermeasures</h1><ul><li>Use strong hashing algorithms: Research the current best practice for hashing algorithms, currently SHA256 is best practice.</li>\n<li>Encrypt the plaintext passwords with salt: Salt adds a random value to the password so previously calculated rainbow tables cannot be used. The salt must be stored to verify the challenge password.</li>\n<li>Use only one-way hashing algorithms: Using one way hashing algorithms will ensure proper use of the hash. Hash the challenge password and compare the calculated hash with the stored hash. This will minimize the amount of time the plaintext password is stored in memory.</li>\n<li>Create a password policy: Determine the level of password or passphrase strength required by your application and state it in policy. Ensure that the system enforces the policy automatically, to prevent users from accidentally or intentionally choosing weak passwords.</li>\n<li>Require regular password changes: Regular password changes will reduce the amount of time that an account with a potentially weak password is exposed, and will give an attacker less time to attempt to crack the password.</li>\n</ul><h1>Example</h1><p>A rainbow table could contain all the popular passwords from a dictionary, all the possible passwords from a subset of characters or all hashes for a certain password length. The rainbow table also has to be generated for each hashing algorithm (SHA, MD5, MD4, etc.) A sample of a rainbow table may look something like the following:\n</p><table><tr><td><tt>Plaintext</tt> </td><td><tt>SHA1 Hash</tt>                          </td></tr><tr><td><tt>Test</tt> </td><td><tt>640AB2BAE07BEDC4C163F679A746F7AB7FB5D1FA</tt></td></tr><tr><td><tt>Demo</tt> </td><td><tt>E52C854D5631EEC7468BA4727B4C77EB745F2965</tt></td></tr><tr><td><tt>Password</tt> </td><td><tt>8BE3C943B1609FFFBFC51AAD666D0A04ADF83C9D</tt></td></tr><tr><td><tt>password</tt> </td><td><tt>5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8</tt></td></tr><tr><td><tt>Admin</tt> </td><td><tt>4E7AFEBCFBAE000B22C7C85E5560F89A2A0280B4</tt></td></tr></table><h1>Additional Resources</h1><ul><li>For more information on Hash Function, see: <a href=\"http://en.wikipedia.org/wiki/Hash_function\">http://en.wikipedia.org/wiki/Hash_function</a></li>\n<li>For more information on Cryptographic Salt, see: <a href=\"http://en.wikipedia.org/wiki/Salt_%28cryptography%29\">http://en.wikipedia.org/wiki/Salt_%28cryptography%29</a></li>\n</ul><h1>Related Items</h1><ul><li><a href=\"e3ffdced-ef7e-45c7-bbbb-a7e71052053c\">Attack: Credentials Brute Force Attack</a></li>\n<li><a href=\"d00e43b2-f820-4668-8174-07045c4874be\">Attack: Credentials Dictionary Attack</a></li>\n<li><a href=\"331bfa1d-94c7-485b-8d8f-b8bab3e679e4\">Attack: Statistical Analysis Attack</a></li>\n</ul>"
}