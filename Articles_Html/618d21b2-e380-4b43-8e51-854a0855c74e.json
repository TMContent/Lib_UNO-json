{
  "id": "618d21b2-e380-4b43-8e51-854a0855c74e",
  "checksum": "a78581e5b538e057c14cd3a5f63b606607c0c671",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "check": [
      "h1",
      "h1",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "for": [
      "h1",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "p"
    ],
    "verify": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "does": [
      "p"
    ],
    "not": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "store": [
      "p",
      "pre"
    ],
    "user": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "credentials": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "when": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "impersonating": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "p",
      "p",
      "a"
    ],
    "users": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p"
    ],
    "ensure": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "logonuser": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "api": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "called": [
      "p"
    ],
    "only": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "if": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a",
      "title"
    ],
    "are": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "a",
      "p"
    ],
    "asked": [
      "p"
    ],
    "their": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "otherwise": [
      "p"
    ],
    "uses": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "identity>": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "element": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "webconfig": [
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "or": [
      "p"
    ],
    "kerberos": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "impersonate": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "li",
      "p",
      "p"
    ],
    "identity": [
      "strong",
      "ol",
      "ol",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "why": [
      "h1"
    ],
    "using": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "forces": [
      "p"
    ],
    "handle": [
      "p"
    ],
    "windows": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "authentication": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "ul",
      "li",
      "p"
    ],
    "although": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "acceptable": [
      "p"
    ],
    "way": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "improper": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "could": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "p"
    ],
    "breach": [
      "p"
    ],
    "company's": [
      "p"
    ],
    "it": [
      "p",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "infrastructure": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "impersonates": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "review": [
      "ol",
      "li",
      "p"
    ],
    "application's": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "locate": [
      "ol",
      "li",
      "p"
    ],
    "places": [
      "ol",
      "li",
      "p"
    ],
    "perform": [
      "ol",
      "li",
      "p"
    ],
    "impersonation": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "common": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "ways": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p"
    ],
    "inside": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "use": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "a"
    ],
    "windowsidentityimpersonate": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "p"
    ],
    "method": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "used": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "title"
    ],
    "each": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "instance": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p"
    ],
    "examine": [
      "ol",
      "li",
      "p"
    ],
    "adopted": [
      "ol",
      "li",
      "p"
    ],
    "keep": [
      "ol",
      "li",
      "p"
    ],
    "mind": [
      "ol",
      "li",
      "p"
    ],
    "following": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "permanent": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "needs": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "permanently": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "attribute": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "set": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "true": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "impersonate=\"true\"": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "/": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "example": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "h1"
    ],
    "following will": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "allow": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "aspnet": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "iis": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "executing": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "mode=\"windows\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "/<identity": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "can": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "also allow": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "specific": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "username=\"registryhklm\\software\\myapp\\identity\\aspnet_setreg,username\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "password=\"registryhklm\\software\\myapp\\identity\\aspnet_setreg,password\"": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "temporary": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "strong"
    ],
    "temporarily": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "windowsimpersonationcontext": [
      "ol",
      "li",
      "ul",
      "li",
      "blockquote",
      "pre",
      "pre"
    ],
    "ctx": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "blockquote",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "blockquote",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "li",
      "pre",
      "pre",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "winidentityimpersonate();": [
      "ol",
      "li",
      "ul",
      "li",
      "blockquote",
      "pre",
      "pre"
    ],
    "obtain": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "windowsidentity": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "object": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "through": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "one": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "methods": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "automatically": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "provide": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "winid": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "windowsidentity)httpcontext.current.user.identity;": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "active": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "directory": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "create": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "based": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "valid": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "upn": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "winidentity": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "new": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "windowsidentity\"username@domainname\");": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "asks": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "its": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "security": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "token": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "pre"
    ],
    "returns": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "intptr": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "tokenbool": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "resultresult": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "logonuser\"user\",": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"domain\"": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "\"pass\"": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "logontypesbatch,": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "logonprovidersdefault,": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "out": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "token;if": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "result){": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "windowsidentitytoken);": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "closehandletoken);": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "..}": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "mistakes": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "as": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "close": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "li",
      "p"
    ],
    "requires": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "as little": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "code as": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "has": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "finally": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "block": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "associated": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "with": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "always": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "terminated": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "windowsidentityusername@domainname);windowsimpersonationcontext": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "winidentityimpersonate();try{": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "//": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "do": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "pre",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "work}catchexception": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "ex{": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "stop": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "ctxundo();}finally{": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "ctxundo();}": [
      "ol",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "exceptions": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "a"
    ],
    "propagated": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "a"
    ],
    "while": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "a"
    ],
    "checklist": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "get": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "username@domainname": [
      "a"
    ],
    "problem": [
      "h1"
    ],
    "myapp": [
      "p",
      "p",
      "p",
      "p"
    ],
    "hr": [
      "p"
    ],
    "at": [
      "p"
    ],
    "mycorp": [
      "p"
    ],
    "mycorp's": [
      "p",
      "p"
    ],
    "network": [
      "p"
    ],
    "operated": [
      "p"
    ],
    "performs": [
      "p"
    ],
    "certificate-based": [
      "p"
    ],
    "single": [
      "p"
    ],
    "sign-on": [
      "p"
    ],
    "operates": [
      "p"
    ],
    "under": [
      "p"
    ],
    "local": [
      "p"
    ],
    "system": [
      "p"
    ],
    "account": [
      "p"
    ],
    "however": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "such": [
      "p"
    ],
    "file": [
      "p",
      "pre"
    ],
    "uploads": [
      "p"
    ],
    "performed": [
      "p"
    ],
    "users'": [
      "p",
      "p"
    ],
    "accounts": [
      "p"
    ],
    "stores": [
      "p"
    ],
    "into": [
      "p"
    ],
    "own": [
      "p"
    ],
    "credential": [
      "p",
      "p"
    ],
    "repository": [
      "p",
      "p"
    ],
    "attacker": [
      "p"
    ],
    "compromises": [
      "p"
    ],
    "httpclientcertificate": [
      "pre"
    ],
    "cert": [
      "pre"
    ],
    "httpcontextcurrent.request.clientcertificate;if": [
      "pre"
    ],
    "cert.ispresent){": [
      "pre"
    ],
    "bool": [
      "pre"
    ],
    "result": [
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "cn": [
      "pre"
    ],
    "certget(\"subject": [
      "pre"
    ],
    "cn\";": [
      "pre"
    ],
    "username": [
      "pre"
    ],
    "myappgetusername(cn);": [
      "pre"
    ],
    "password": [
      "pre",
      "pre"
    ],
    "myappgetpassword(username);": [
      "pre"
    ],
    "domain": [
      "pre",
      "pre"
    ],
    "\"ntdomain\"": [
      "pre"
    ],
    "logonuserusername,": [
      "pre"
    ],
    "token;": [
      "pre"
    ],
    "result)": [
      "pre"
    ],
    "{": [
      "pre"
    ],
    "uploaded": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "related": [
      "h1"
    ],
    "guideline": [
      "h1",
      "ul",
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "Problem Example",
      "Related Guideline"
    ],
    "p": [
      "Verify that your application does not store user credentials when impersonating users. Ensure that LogonUser API is called only if the users are asked for their credentials. Otherwise, ensure that your application uses the <identity> element in web.config or Kerberos to impersonate users.",
      "Using the LogonUser API forces your application to handle Windows authentication credentials. Although LogonUser is an acceptable way of impersonating an user, improper handling of Windows credentials could lead to a breach in your company's IT infrastructure.",
      "Identify all code that impersonates users. Review your application's code base and locate all places that perform impersonation. Common ways to identify impersonation include:",
      "Verify the impersonation method that is used. For each impersonation instance, examine the adopted impersonation method. Keep in mind the following ways of impersonating users:",
      "Permanent: If your application needs to permanently impersonate users, verify that the impersonate attribute inside the <identity> element is set to true:",
      "For example, if your application uses Windows authentication, the following will allow ASP.NET to impersonate the IIS user when executing your application's code:",
      "The <identity> element can also allow your application to impersonate a specific user. Example:",
      "Temporary: If your application needs to temporarily impersonate users, verify that it uses the WindowsIdentity.Impersonate method.",
      "Your application can obtain a WindowsIdentity object through one of the following methods:",
      "IIS: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:",
      "Kerberos: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:",
      "LogonUser: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:",
      "Check for common mistakes.",
      "Ensure that your application impersonates users as close as possible to the code that requires impersonation.",
      "Ensure that your application impersonates its users for as little code as possible and verify that each impersonation instance has a finally block associated with it to ensure that impersonation is always terminated:",
      "Using the Exceptions are Not Propagated while Impersonating checklist, verify that exceptions do not get propagated while your application is impersonating a user.",
      "MyApp is the HR application at MyCorp. Although MyCorp's IT network is operated using an Active Directory, MyApp performs a certificate-based single sign-on. MyApp operates under the ASP.NET local system account. However, certain actions, such as file uploads, are performed using the users' Windows accounts. To do this, the application stores the users' credentials into its own credential repository and uses LogonUser to impersonate its users. An attacker compromises MyApp credential repository and valid users in MyCorp's Active Directory.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "strong": [
      "identity",
      "Identify all code that impersonates users.",
      "identity",
      "WindowsIdentity.Impersonate",
      "Verify the impersonation method that is used.",
      "Permanent",
      "impersonate",
      "true",
      "Temporary",
      "IIS",
      "Kerberos",
      "LogonUser",
      "Check for common mistakes."
    ],
    "ol": [
      "Identify all code that impersonates users. Review your application's code base and locate all places that perform impersonation. Common ways to identify impersonation include:\n      \n        <identity> element inside your application's web.config Use of the WindowsIdentity.Impersonate method \n      \n      \n        \n          Verify the impersonation method that is used. For each impersonation instance, examine the adopted impersonation method. Keep in mind the following ways of impersonating users:\n        \n          \n            \n              Permanent: If your application needs to permanently impersonate users, verify that the impersonate attribute inside the <identity> element is set to true:\n            <identity impersonate=\"true\" />\n            For example, if your application uses Windows authentication, the following will allow ASP.NET to impersonate the IIS user when executing your application's code:\n            <authentication mode=\"Windows\" /><identity impersonate=\"true\" />\n            The <identity> element can also allow your application to impersonate a specific user. Example:\n            <identity impersonate=\"true\" userName=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,userName\" password=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,password\" />\n            \n              \n                Temporary: If your application needs to temporarily impersonate users, verify that it uses the WindowsIdentity.Impersonate method.\n              \n                WindowsImpersonationContext ctx = winIdentity.Impersonate();\n              \n              Your application can obtain a WindowsIdentity object through one of the following methods:\n              \n                \n                  \n                    IIS: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:\n                  WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;\n                  \n                    \n                      Kerberos: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:\n                    WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");\n                    \n                      \n                        LogonUser: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:\n                      IntPtr token;bool result;result = LogonUser(\"user\", \"domain\", \"pass\", LogonTypes.Batch, LogonProviders.Default, out token);if (result){    WindowsIdentity winIdentity = new WindowsIdentity(token);    CloseHandle(token);    ...}\n                    \n                  \n                \n              \n            \n          \n        \n        \n          \n            Check for common mistakes.\n          \n          \n            \n              Ensure that your application impersonates users as close as possible to the code that requires impersonation.\n              \n                Ensure that your application impersonates its users for as little code as possible and verify that each impersonation instance has a finally block associated with it to ensure that impersonation is always terminated:\n                WindowsIdentity winIdentity = new WindowsIdentity(username@domainName);WindowsImpersonationContext ctx = winIdentity.Impersonate();try{  // Do work}catch(Exception ex){  // Stop impersonating  ctx.Undo();}finally{  // Stop impersonating  ctx.Undo();}\n                \n                  Using the Exceptions are Not Propagated while Impersonating checklist, verify that exceptions do not get propagated while your application is impersonating a user."
    ],
    "li": [
      "Identify all code that impersonates users. Review your application's code base and locate all places that perform impersonation. Common ways to identify impersonation include:\n      \n        <identity> element inside your application's web.config Use of the WindowsIdentity.Impersonate method",
      "<identity> element inside your application's web.config",
      "Use of the WindowsIdentity.Impersonate method",
      "Verify the impersonation method that is used. For each impersonation instance, examine the adopted impersonation method. Keep in mind the following ways of impersonating users:\n        \n          \n            \n              Permanent: If your application needs to permanently impersonate users, verify that the impersonate attribute inside the <identity> element is set to true:\n            <identity impersonate=\"true\" />\n            For example, if your application uses Windows authentication, the following will allow ASP.NET to impersonate the IIS user when executing your application's code:\n            <authentication mode=\"Windows\" /><identity impersonate=\"true\" />\n            The <identity> element can also allow your application to impersonate a specific user. Example:\n            <identity impersonate=\"true\" userName=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,userName\" password=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,password\" />\n            \n              \n                Temporary: If your application needs to temporarily impersonate users, verify that it uses the WindowsIdentity.Impersonate method.\n              \n                WindowsImpersonationContext ctx = winIdentity.Impersonate();\n              \n              Your application can obtain a WindowsIdentity object through one of the following methods:\n              \n                \n                  \n                    IIS: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:\n                  WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;\n                  \n                    \n                      Kerberos: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:\n                    WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");\n                    \n                      \n                        LogonUser: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:\n                      IntPtr token;bool result;result = LogonUser(\"user\", \"domain\", \"pass\", LogonTypes.Batch, LogonProviders.Default, out token);if (result){    WindowsIdentity winIdentity = new WindowsIdentity(token);    CloseHandle(token);    ...}",
      "Permanent: If your application needs to permanently impersonate users, verify that the impersonate attribute inside the <identity> element is set to true:\n            <identity impersonate=\"true\" />\n            For example, if your application uses Windows authentication, the following will allow ASP.NET to impersonate the IIS user when executing your application's code:\n            <authentication mode=\"Windows\" /><identity impersonate=\"true\" />\n            The <identity> element can also allow your application to impersonate a specific user. Example:\n            <identity impersonate=\"true\" userName=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,userName\" password=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,password\" />",
      "Temporary: If your application needs to temporarily impersonate users, verify that it uses the WindowsIdentity.Impersonate method.\n              \n                WindowsImpersonationContext ctx = winIdentity.Impersonate();\n              \n              Your application can obtain a WindowsIdentity object through one of the following methods:\n              \n                \n                  \n                    IIS: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:\n                  WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;\n                  \n                    \n                      Kerberos: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:\n                    WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");\n                    \n                      \n                        LogonUser: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:\n                      IntPtr token;bool result;result = LogonUser(\"user\", \"domain\", \"pass\", LogonTypes.Batch, LogonProviders.Default, out token);if (result){    WindowsIdentity winIdentity = new WindowsIdentity(token);    CloseHandle(token);    ...}",
      "IIS: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:\n                  WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;",
      "Kerberos: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:\n                    WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");",
      "LogonUser: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:\n                      IntPtr token;bool result;result = LogonUser(\"user\", \"domain\", \"pass\", LogonTypes.Batch, LogonProviders.Default, out token);if (result){    WindowsIdentity winIdentity = new WindowsIdentity(token);    CloseHandle(token);    ...}",
      "Check for common mistakes.\n          \n          \n            \n              Ensure that your application impersonates users as close as possible to the code that requires impersonation.\n              \n                Ensure that your application impersonates its users for as little code as possible and verify that each impersonation instance has a finally block associated with it to ensure that impersonation is always terminated:\n                WindowsIdentity winIdentity = new WindowsIdentity(username@domainName);WindowsImpersonationContext ctx = winIdentity.Impersonate();try{  // Do work}catch(Exception ex){  // Stop impersonating  ctx.Undo();}finally{  // Stop impersonating  ctx.Undo();}\n                \n                  Using the Exceptions are Not Propagated while Impersonating checklist, verify that exceptions do not get propagated while your application is impersonating a user.",
      "Ensure that your application impersonates users as close as possible to the code that requires impersonation.",
      "Ensure that your application impersonates its users for as little code as possible and verify that each impersonation instance has a finally block associated with it to ensure that impersonation is always terminated:\n                WindowsIdentity winIdentity = new WindowsIdentity(username@domainName);WindowsImpersonationContext ctx = winIdentity.Impersonate();try{  // Do work}catch(Exception ex){  // Stop impersonating  ctx.Undo();}finally{  // Stop impersonating  ctx.Undo();}",
      "Using the Exceptions are Not Propagated while Impersonating checklist, verify that exceptions do not get propagated while your application is impersonating a user.",
      "Guideline: Do Not Use the LogonUser API"
    ],
    "ul": [
      "<identity> element inside your application's web.config Use of the WindowsIdentity.Impersonate method",
      "Permanent: If your application needs to permanently impersonate users, verify that the impersonate attribute inside the <identity> element is set to true:\n            <identity impersonate=\"true\" />\n            For example, if your application uses Windows authentication, the following will allow ASP.NET to impersonate the IIS user when executing your application's code:\n            <authentication mode=\"Windows\" /><identity impersonate=\"true\" />\n            The <identity> element can also allow your application to impersonate a specific user. Example:\n            <identity impersonate=\"true\" userName=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,userName\" password=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,password\" />\n            \n              \n                Temporary: If your application needs to temporarily impersonate users, verify that it uses the WindowsIdentity.Impersonate method.\n              \n                WindowsImpersonationContext ctx = winIdentity.Impersonate();\n              \n              Your application can obtain a WindowsIdentity object through one of the following methods:\n              \n                \n                  \n                    IIS: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:\n                  WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;\n                  \n                    \n                      Kerberos: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:\n                    WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");\n                    \n                      \n                        LogonUser: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:\n                      IntPtr token;bool result;result = LogonUser(\"user\", \"domain\", \"pass\", LogonTypes.Batch, LogonProviders.Default, out token);if (result){    WindowsIdentity winIdentity = new WindowsIdentity(token);    CloseHandle(token);    ...}",
      "IIS: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:\n                  WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;\n                  \n                    \n                      Kerberos: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:\n                    WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");\n                    \n                      \n                        LogonUser: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:\n                      IntPtr token;bool result;result = LogonUser(\"user\", \"domain\", \"pass\", LogonTypes.Batch, LogonProviders.Default, out token);if (result){    WindowsIdentity winIdentity = new WindowsIdentity(token);    CloseHandle(token);    ...}",
      "Ensure that your application impersonates users as close as possible to the code that requires impersonation.\n              \n                Ensure that your application impersonates its users for as little code as possible and verify that each impersonation instance has a finally block associated with it to ensure that impersonation is always terminated:\n                WindowsIdentity winIdentity = new WindowsIdentity(username@domainName);WindowsImpersonationContext ctx = winIdentity.Impersonate();try{  // Do work}catch(Exception ex){  // Stop impersonating  ctx.Undo();}finally{  // Stop impersonating  ctx.Undo();}\n                \n                  Using the Exceptions are Not Propagated while Impersonating checklist, verify that exceptions do not get propagated while your application is impersonating a user.",
      "Guideline: Do Not Use the LogonUser API"
    ],
    "pre": [
      "<identity impersonate=\"true\" />",
      "<authentication mode=\"Windows\" /><identity impersonate=\"true\" />",
      "<identity impersonate=\"true\" userName=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,userName\" password=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,password\" />",
      "WindowsImpersonationContext ctx = winIdentity.Impersonate();",
      "WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;",
      "WindowsIdentity winIdentity = new WindowsIdentity(\"username@domainName\");",
      "IntPtr token;bool result;result = LogonUser(\"user\", \"domain\", \"pass\", LogonTypes.Batch, LogonProviders.Default, out token);if (result){    WindowsIdentity winIdentity = new WindowsIdentity(token);    CloseHandle(token);    ...}",
      "WindowsIdentity winIdentity = new WindowsIdentity(username@domainName);WindowsImpersonationContext ctx = winIdentity.Impersonate();try{  // Do work}catch(Exception ex){  // Stop impersonating  ctx.Undo();}finally{  // Stop impersonating  ctx.Undo();}",
      "HttpClientCertificate cert = HttpContext.Current.Request.ClientCertificate;if (cert.IsPresent){    IntPtr token;    bool result;    string cn = cert.Get(\"SUBJECT CN\");    string username = MyApp.GetUsername(cn);    string password = MyApp.GetPassword(username);    string domain = \"NTDOMAIN\";    result = LogonUser(username, domain, password, LogonTypes.Batch, LogonProviders.Default, out token);    if (result)    {        WindowsIdentity winIdentity = new WindowsIdentity(token);        CloseHandle(token);        WindowsImpersonationContext ctx = winIdentity.Impersonate();        // Store the uploaded file    }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "blockquote": [
      "WindowsImpersonationContext ctx = winIdentity.Impersonate();"
    ],
    "a": [
      "username@domainName",
      "Exceptions are Not Propagated while Impersonating",
      "Guideline: Do Not Use the LogonUser API"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "mailto:username@domainName",
      "text": "username@domainName"
    },
    {
      "href": "/article/f28f80e5-814a-4e3b-9475-9cbb1da901b4",
      "text": "Exceptions are Not Propagated while Impersonating"
    },
    {
      "href": "/article/97dfd32f-deb6-4016-b3ff-24147a959521",
      "text": "Guideline: Do Not Use the LogonUser API "
    }
  ],
  "html": "<h1>What to Check For</h1>\n  <p>Verify that your application does not store user credentials when impersonating users. Ensure that LogonUser API is called only if the users are asked for their credentials. Otherwise, ensure that your application uses the &lt;<strong>identity</strong>&gt; element in web.config or Kerberos to impersonate users.</p>\n  <h1>Why</h1>\n  <p>Using the LogonUser API forces your application to handle Windows authentication credentials. Although LogonUser is an acceptable way of impersonating an user, improper handling of Windows credentials could lead to a breach in your company's IT infrastructure.</p>\n  <h1>How to Check</h1>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify all code that impersonates users. </strong>Review your application's code base and locate all places that perform impersonation. Common ways to identify impersonation include:</p>\n      <ul>\n        <li>&lt;<strong>identity</strong>&gt; element inside your application's web.config <li>Use of the <strong>WindowsIdentity.Impersonate</strong> method </li></li>\n      </ul>\n      <li>\n        <p>\n          <strong>Verify the impersonation method that is used. </strong>For each impersonation instance, examine the adopted impersonation method. Keep in mind the following ways of impersonating users:</p>\n        <ul>\n          <li>\n            <p>\n              <strong>Permanent</strong>: If your application needs to permanently impersonate users, verify that the <strong>impersonate</strong> attribute inside the &lt;identity&gt; element is set to <strong>true</strong>:</p>\n            <pre>&lt;identity impersonate=\"true\" /&gt;</pre>\n            <p>For example, if your application uses Windows authentication, the following&nbsp;will allow ASP.NET to impersonate the IIS user when executing your application's code:</p>\n            <pre>&lt;authentication mode=\"Windows\" /&gt;<br />&lt;identity impersonate=\"true\" /&gt;</pre>\n            <p>The &lt;identity&gt; element can also&nbsp;allow your application to impersonate a specific user. Example:</p>\n            <pre>&lt;identity impersonate=\"true\"<br /> userName=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,userName\"<br /> password=\"registry:HKLM\\Software\\MyApp\\Identity\\ASPNET_SETREG,password\" /&gt;</pre>\n            <li>\n              <p>\n                <strong>Temporary</strong>: If your application needs to temporarily impersonate users, verify that it uses the WindowsIdentity.Impersonate method.</p>\n              <blockquote>\n                <pre>WindowsImpersonationContext ctx = winIdentity.Impersonate();</pre>\n              </blockquote>\n              <p>Your application can obtain a WindowsIdentity object through one of the following methods:</p>\n              <ul>\n                <li>\n                  <p>\n                    <strong>IIS</strong>: If your application uses Windows authentication, IIS will automatically provide the WindowsIdentity object. Example:</p>\n                  <pre>WindowsIdentity winId = (WindowsIdentity)HttpContext.Current.User.Identity;</pre>\n                  <li>\n                    <p>\n                      <strong>Kerberos</strong>: If your application uses an Active Directory, your code can create a WindowsIdentity object based on a valid UPN. Example:</p>\n                    <pre>WindowsIdentity winIdentity = new WindowsIdentity(\"username&#64;domainName\");</pre>\n                    <li>\n                      <p>\n                        <strong>LogonUser</strong>: If your application asks its users for their credentials, your code can create a WindowsIdentity object based on the security token that LogonUser returns. Ensure that this method is used if and only if your application asks the users for their credentials. Example:</p>\n                      <pre>IntPtr token;bool result;<br />result = LogonUser(\"user\", \"domain\", \"pass\",<br /> LogonTypes.Batch, LogonProviders.Default, out token);<br />if (result)<br />&#123;<br />    WindowsIdentity winIdentity = new WindowsIdentity(token);<br />    CloseHandle(token);<br />    ...<br />&#125;</pre>\n                    </li>\n                  </li>\n                </li>\n              </ul>\n            </li>\n          </li>\n        </ul>\n        <li>\n          <p>\n            <strong>Check for common mistakes.</strong>\n          </p>\n          <ul>\n            <li>\n              <p>Ensure that your application impersonates users as close as possible to the code that requires impersonation.</p>\n              <li>\n                <p>Ensure that your application impersonates its users for as&nbsp;little code&nbsp;as possible and verify that each impersonation instance has a finally block associated with it to ensure that impersonation is always terminated:</p>\n                <pre>WindowsIdentity winIdentity = new WindowsIdentity(<a href=\"mailto:username&#64;domainName\">username&#64;domainName</a>);<br />WindowsImpersonationContext ctx = winIdentity.Impersonate();<br />try<br />&#123;<br />  // Do work<br />&#125;<br />catch(Exception ex)<br />&#123;<br />  // Stop impersonating<br />  ctx.Undo();<br />&#125;<br />finally<br />&#123;<br />  // Stop impersonating<br />  ctx.Undo();<br />&#125;</pre>\n                <li>\n                  <p>Using the <a href=\"/article/f28f80e5-814a-4e3b-9475-9cbb1da901b4\">Exceptions are Not Propagated while Impersonating</a> checklist, verify that exceptions do not get propagated while your application is impersonating a user.</p>\n                </li>\n              </li>\n            </li>\n          </ul>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Problem Example</h1>\n  <p>MyApp is the HR application at MyCorp. Although MyCorp's IT network is operated using an Active Directory, MyApp performs a certificate-based single sign-on. MyApp operates under the ASP.NET local system account. However, certain actions, such as file uploads, are performed using the users' Windows accounts. To do this, the application stores the users' credentials into its own credential repository and uses LogonUser to impersonate its users. An attacker compromises MyApp credential repository and valid users in MyCorp's Active Directory.</p>\n  <pre>HttpClientCertificate cert = HttpContext.Current.Request.ClientCertificate;<br />if (cert.IsPresent)<br />&#123;<br />    IntPtr token;<br />    bool result;<br />    string cn = cert.Get(\"SUBJECT CN\");<br />    string username = MyApp.GetUsername(cn);<br />    string password = MyApp.GetPassword(username);<br />    string domain = \"NTDOMAIN\";<br />    result = LogonUser(username, domain, password, LogonTypes.Batch, LogonProviders.Default, out token);<br />    if (result)<br />    &#123;<br />        WindowsIdentity winIdentity = new WindowsIdentity(token);<br />        CloseHandle(token);<br />        WindowsImpersonationContext ctx = winIdentity.Impersonate();<br />        // Store the uploaded file<br />    &#125;<br />&#125;</pre>\n  <h1>Related Guideline</h1>\n  <ul>\n    <li>\n      <a href=\"/article/97dfd32f-deb6-4016-b3ff-24147a959521\">Guideline: Do Not Use the LogonUser API&nbsp;</a>\n    </li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}