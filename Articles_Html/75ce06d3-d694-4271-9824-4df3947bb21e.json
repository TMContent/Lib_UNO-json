{
  "id": "75ce06d3-d694-4271-9824-4df3947bb21e",
  "checksum": "6391fda6b70a13890da3c94a14930e8bc1c4ad8a",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "ol",
      "li",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "write": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "in": [
      "p",
      "p"
    ],
    "such": [
      "p"
    ],
    "a": [
      "p"
    ],
    "way": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "only": [
      "p",
      "p",
      "title"
    ],
    "dynamically": [
      "p",
      "p",
      "p",
      "title"
    ],
    "allocated": [
      "p",
      "p",
      "p",
      "title"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "explicitly": [
      "p"
    ],
    "deallocated": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "why": [
      "h1"
    ],
    "deleting": [
      "p"
    ],
    "objects": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "were": [
      "p"
    ],
    "not": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "may": [
      "p"
    ],
    "result": [
      "p"
    ],
    "an": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "if": [
      "p"
    ],
    "later": [
      "p"
    ],
    "reused": [
      "p"
    ],
    "by": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "calling": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "the": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "new": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "operator": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "how": [
      "h1"
    ],
    "perform": [
      "p"
    ],
    "following": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "assure": [
      "p"
    ],
    "freed": [
      "p"
    ],
    "search": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "deallocation": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "review": [
      "ol",
      "li",
      "p"
    ],
    "find": [
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "places": [
      "ol",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "delete": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "or": [
      "ol",
      "li",
      "p"
    ],
    "free)": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "calls": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "deleted": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "declarations": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "remove": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "unnecessary": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "operators": [
      "ol",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "li",
      "p"
    ],
    "which": [
      "ol",
      "li",
      "p"
    ],
    "created": [
      "ol",
      "li",
      "p"
    ],
    "free": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "How"
    ],
    "ul": [
      "C++"
    ],
    "li": [
      "C++",
      "Search for deallocation code. Review code to find all places where memory is being deallocated by the delete operator or free() function calls.",
      "Identify objects being deleted. Search for the declarations of the objects that are being deleted.",
      "Remove unnecessary deallocation code. Remove all delete operators and free() function calls that delete objects, which are not created by calling the new operator."
    ],
    "p": [
      "Write code in such a way that only dynamically allocated memory is explicitly deallocated.",
      "Deleting objects that were not allocated dynamically may result in an arbitrary code execution vulnerability if that memory is later reused by calling the new operator.",
      "Perform the following actions to assure that only dynamically allocated memory is freed:",
      "Search for deallocation code. Review code to find all places where memory is being deallocated by the delete operator or free() function calls.",
      "Identify objects being deleted. Search for the declarations of the objects that are being deleted.",
      "Remove unnecessary deallocation code. Remove all delete operators and free() function calls that delete objects, which are not created by calling the new operator."
    ],
    "ol": [
      "Search for deallocation code. Review code to find all places where memory is being deallocated by the delete operator or free() function calls.\r\n      \r\n        \r\n          Identify objects being deleted. Search for the declarations of the objects that are being deleted.\r\n        \r\n          \r\n            Remove unnecessary deallocation code. Remove all delete operators and free() function calls that delete objects, which are not created by calling the new operator."
    ],
    "strong": [
      "Search for deallocation code.",
      "Identify objects being deleted.",
      "Remove unnecessary deallocation code."
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>C&#43;&#43;</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Write code in such a way that only dynamically allocated memory is explicitly deallocated.</p>\r\n  <h1>Why</h1>\r\n  <p>Deleting objects that were not allocated dynamically may result in an arbitrary code execution vulnerability if that memory is later reused by calling the new operator.</p>\r\n  <h1>How</h1>\r\n  <p>Perform the following actions to assure that only dynamically allocated memory is freed:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Search for deallocation code.</strong> Review code to find all places where memory is being deallocated by the delete operator or free() function calls.</p>\r\n      <li>\r\n        <p>\r\n          <strong>Identify objects being deleted.</strong> Search for the declarations of the objects that are being deleted.</p>\r\n        <li>\r\n          <p>\r\n            <strong>Remove unnecessary deallocation code.</strong> Remove all delete operators and free() function calls that delete objects, which are not created by calling the new operator.</p>\r\n        </li>\r\n      </li>\r\n    </li>\r\n  </ol>"
}