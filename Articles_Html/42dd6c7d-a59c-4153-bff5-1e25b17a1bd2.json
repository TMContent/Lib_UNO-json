{
  "id": "42dd6c7d-a59c-4153-bff5-1e25b17a1bd2",
  "checksum": "a6f63f9b1117805c7f6ccd379f8f7d56e76f8392",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "h1",
      "h1"
    ],
    "c++": [
      "p"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1"
    ],
    "verify": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "delete": [
      "p",
      "p",
      "p",
      "p"
    ],
    "operator": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "title"
    ],
    "only": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "called": [
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p"
    ],
    "pointers": [
      "p",
      "p"
    ],
    "returned": [
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p"
    ],
    "new": [
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "deleting": [
      "p"
    ],
    "objects": [
      "p",
      "p"
    ],
    "were": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p"
    ],
    "allocated": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "dynamically": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "may": [
      "p"
    ],
    "result": [
      "p"
    ],
    "in": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p"
    ],
    "execution": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "if": [
      "p"
    ],
    "memory": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "later": [
      "p"
    ],
    "reused": [
      "p"
    ],
    "calling": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "identify": [
      "p",
      "p"
    ],
    "uses": [
      "p",
      "p"
    ],
    "are": [
      "p",
      "p"
    ],
    "fix": [
      "h1"
    ],
    "object": [
      "p"
    ],
    "was": [
      "p"
    ],
    "remove": [
      "p"
    ],
    "this": [
      "p"
    ],
    "-": [
      "p"
    ],
    "let": [
      "p"
    ],
    "compiler": [
      "p"
    ],
    "handle": [
      "p"
    ],
    "of": [
      "p"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "free": [
      "ul",
      "li",
      "a"
    ],
    "freed": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Related Items"
    ],
    "p": [
      "C++",
      "Verify that the delete operator is only called on pointers returned by the new operator.",
      "Deleting objects that were not allocated dynamically may result in an arbitrary code execution vulnerability if that memory is later reused by calling the new operator.",
      "Identify code that uses the delete operator. Verify that the delete operator is only called on pointers that are returned by the new operator.",
      "Identify code that uses the delete operator on an object that was not dynamically allocated. Remove this code - let the compiler handle memory of the objects that are not dynamically allocated."
    ],
    "ul": [
      "Free Only Dynamically Allocated Memory"
    ],
    "li": [
      "Free Only Dynamically Allocated Memory"
    ],
    "a": [
      "Free Only Dynamically Allocated Memory"
    ]
  },
  "links": [
    {
      "href": "/article/75ce06d3-d694-4271-9824-4df3947bb21e",
      "text": "Free Only Dynamically Allocated Memory"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <p>C&#43;&#43;</p>\n  <h1>What to Check For</h1>\n  <p>Verify that the delete operator is only called on pointers returned by the new operator.</p>\n  <h1>Why</h1>\n  <p>Deleting objects that were not allocated dynamically may result in an arbitrary code execution vulnerability if that memory is later reused by calling the new operator.</p>\n  <h1>How to Check</h1>\n  <p>Identify code that uses the delete operator. Verify that the delete operator is only called on pointers that are returned by the new operator.</p>\n  <h1>How to Fix</h1>\n  <p>Identify code that uses the delete operator on an object that was not dynamically allocated. Remove this code - let the compiler handle memory of the objects that are not dynamically allocated.</p>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/75ce06d3-d694-4271-9824-4df3947bb21e\">Free Only Dynamically Allocated Memory</a>\n    </li>\n  </ul>"
}