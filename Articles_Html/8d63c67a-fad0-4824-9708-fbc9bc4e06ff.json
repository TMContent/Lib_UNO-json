{
  "id": "8d63c67a-fad0-4824-9708-fbc9bc4e06ff",
  "checksum": "19a50889cde8b9b40fa2ca5071ad2b5a0f7be7d3",
  "words": {
    "3": [
      "pre"
    ],
    "35": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "2008": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "title"
    ],
    "microsoft®": [
      "ul",
      "li"
    ],
    "windows": [
      "ul",
      "li",
      "title"
    ],
    "communication": [
      "ul",
      "li"
    ],
    "foundation": [
      "ul",
      "li"
    ],
    "wcf)": [
      "ul",
      "li"
    ],
    "microsoft": [
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "visual": [
      "ul",
      "li"
    ],
    "studio®": [
      "ul",
      "li"
    ],
    "description": [
      "h1"
    ],
    "you": [
      "p",
      "p"
    ],
    "can": [
      "p"
    ],
    "use": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "win32": [
      "p"
    ],
    "logonuser)": [
      "p",
      "strong"
    ],
    "api": [
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "via": [
      "p"
    ],
    "p/invoke": [
      "p"
    ],
    "create": [
      "p"
    ],
    "impersonation": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "tokens": [
      "p"
    ],
    "only": [
      "p"
    ],
    "when": [
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "wcf": [
      "p",
      "p"
    ],
    "service": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "p"
    ],
    "not": [
      "p"
    ],
    "trusted": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "ul",
      "li",
      "li",
      "li"
    ],
    "delegation": [
      "p",
      "ul",
      "li"
    ],
    "because": [
      "p"
    ],
    "this": [
      "p"
    ],
    "option": [
      "p"
    ],
    "forces": [
      "p"
    ],
    "store": [
      "p"
    ],
    "user": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "name": [
      "p"
    ],
    "and": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "title"
    ],
    "passwords": [
      "p"
    ],
    "on": [
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "following": [
      "p"
    ],
    "code": [
      "p",
      "pre"
    ],
    "example": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "how": [
      "p",
      "title"
    ],
    "logonuser": [
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "title"
    ],
    "used": [
      "p"
    ],
    "using": [
      "pre",
      "pre",
      "title"
    ],
    "systemruntime.interopservices;…//": [
      "pre"
    ],
    "declare": [
      "pre",
      "pre"
    ],
    "logon": [
      "pre",
      "pre"
    ],
    "types": [
      "pre"
    ],
    "as": [
      "pre",
      "pre"
    ],
    "constantsconst": [
      "pre",
      "pre"
    ],
    "long": [
      "pre",
      "pre"
    ],
    "logon32_logon_network": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "providers": [
      "pre"
    ],
    "logon32_provider_default": [
      "pre"
    ],
    "0[dllimport(\"advapi32.dll\",entrypoint": [
      "pre"
    ],
    "\"logonuser\"]private": [
      "pre"
    ],
    "static": [
      "pre",
      "pre"
    ],
    "extern": [
      "pre",
      "pre"
    ],
    "bool": [
      "pre",
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "lpszusername": [
      "pre"
    ],
    "lpszdomain": [
      "pre"
    ],
    "lpszpassword": [
      "pre"
    ],
    "int": [
      "pre",
      "pre",
      "pre"
    ],
    "dwlogontype": [
      "pre"
    ],
    "dwlogonprovider": [
      "pre"
    ],
    "ref": [
      "pre",
      "pre"
    ],
    "intptr": [
      "pre",
      "pre"
    ],
    "phtoken;[dllimport(\"kernel32.dll\",": [
      "pre"
    ],
    "charset=charsetauto)]public": [
      "pre"
    ],
    "closehandleintptr": [
      "pre"
    ],
    "handle;": [
      "pre"
    ],
    "private": [
      "pre"
    ],
    "void": [
      "pre"
    ],
    "impersonateandusestring": [
      "pre"
    ],
    "username": [
      "pre"
    ],
    "password": [
      "pre"
    ],
    "domain{": [
      "pre"
    ],
    "token": [
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre"
    ],
    "intptr0);": [
      "pre"
    ],
    "intptrzero;": [
      "pre"
    ],
    "call": [
      "pre"
    ],
    "obtain": [
      "pre"
    ],
    "a": [
      "pre"
    ],
    "handle": [
      "pre"
    ],
    "an": [
      "pre"
    ],
    "access": [
      "pre"
    ],
    "returnvalue": [
      "pre",
      "pre"
    ],
    "logonuserusername,": [
      "pre"
    ],
    "domainpassword,": [
      "pre"
    ],
    "int)logon32_logon_network,": [
      "pre"
    ],
    "int)logon32_provider_default,": [
      "pre"
    ],
    "token;": [
      "pre"
    ],
    "if": [
      "pre"
    ],
    "false": [
      "pre"
    ],
    "==": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre"
    ],
    "ret": [
      "pre"
    ],
    "marshalgetlastwin32error();": [
      "pre"
    ],
    "strerr": [
      "pre"
    ],
    "stringformat(\"logonuser": [
      "pre"
    ],
    "failed": [
      "pre"
    ],
    "with": [
      "pre",
      "ul",
      "li"
    ],
    "error": [
      "pre"
    ],
    "{0}\"": [
      "pre"
    ],
    "ret;": [
      "pre"
    ],
    "throw": [
      "pre"
    ],
    "applicationexceptionstrerr,": [
      "pre"
    ],
    "null;": [
      "pre"
    ],
    "}": [
      "pre",
      "pre"
    ],
    "windowsidentity": [
      "pre"
    ],
    "newid": [
      "pre"
    ],
    "windowsidentitytoken);": [
      "pre"
    ],
    "windowsimpersonationcontext": [
      "pre"
    ],
    "impersonateduser": [
      "pre"
    ],
    "newidimpersonate();": [
      "pre"
    ],
    "try": [
      "pre"
    ],
    "do": [
      "pre"
    ],
    "operations": [
      "pre"
    ],
    "original": [
      "pre"
    ],
    "security": [
      "pre"
    ],
    "context": [
      "pre"
    ],
    "finally": [
      "pre"
    ],
    "stop": [
      "pre"
    ],
    "impersonating": [
      "pre"
    ],
    "impersonateduserundo();": [
      "pre"
    ],
    "closehandletoken);": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "information": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "see": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "“how": [
      "ul",
      "li"
    ],
    "validate": [
      "ul",
      "li"
    ],
    "credentials": [
      "ul",
      "li"
    ],
    "operating": [
      "ul",
      "li"
    ],
    "systems”": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "http//support.microsoft.com/kb/q180548/for": [
      "ul"
    ],
    "“delegation": [
      "ul",
      "li"
    ],
    "wcf”": [
      "ul",
      "li"
    ],
    "http//msdn2.microsoft.com/en-us/library/ms730088.aspxfor": [
      "ul"
    ],
    "q&a": [
      "ul",
      "li"
    ],
    "impersonation/delegation": [
      "ul",
      "li"
    ],
    "section": [
      "ul",
      "li"
    ],
    "of": [
      "ul",
      "li"
    ],
    "“wcf": [
      "ul",
      "li"
    ],
    "questions": [
      "ul",
      "li"
    ],
    "answers“": [
      "ul",
      "li"
    ],
    "http//www.codeplex.com/wcfsecurityguideguideguideguide/wiki/view.aspx?title=questions%20and%20answers&referringtitle=home": [
      "ul",
      "li",
      "a"
    ],
    "http//support.microsoft.com/kb/q180548/": [
      "li",
      "a"
    ],
    "http//msdn2.microsoft.com/en-us/library/ms730088.aspx": [
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "impersonate": [
      "title"
    ],
    "delegate": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Description",
      "Additional Resources"
    ],
    "ul": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5 Microsoft Visual Studio® 2008",
      "For more information on the LogonUser API, see “How to validate user credentials on Microsoft operating systems” at http://support.microsoft.com/kb/q180548/For more information, see “Delegation and Impersonation with WCF” at http://msdn2.microsoft.com/en-us/library/ms730088.aspxFor impersonation and delegation Q&A, see the Impersonation/Delegation section of “WCF 3.5 Questions and Answers“ at http://www.codeplex.com/WCFSecurityGuideGuideGuideGuide/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home"
    ],
    "li": [
      "Microsoft® Windows Communication Foundation (WCF) 3.5",
      "Microsoft Visual Studio® 2008",
      "For more information on the LogonUser API, see “How to validate user credentials on Microsoft operating systems” at http://support.microsoft.com/kb/q180548/",
      "For more information, see “Delegation and Impersonation with WCF” at http://msdn2.microsoft.com/en-us/library/ms730088.aspx",
      "For impersonation and delegation Q&A, see the Impersonation/Delegation section of “WCF 3.5 Questions and Answers“ at http://www.codeplex.com/WCFSecurityGuideGuideGuideGuide/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home"
    ],
    "p": [
      "You can use the Win32 LogonUser() API (via P/Invoke) to create impersonation tokens, only when your WCF Service is not trusted for delegation, because this option forces you to store user name and passwords on your WCF Service.",
      "The following code example shows how the LogonUser API is used for impersonation:",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "strong": [
      "LogonUser()"
    ],
    "pre": [
      "using System.Runtime.InteropServices;…// Declare the logon types as constantsconst long LOGON32_LOGON_NETWORK = 3;",
      "// Declare the logon providers as constantsconst long LOGON32_PROVIDER_DEFAULT = 0;[DllImport(\"advapi32.dll\",EntryPoint = \"LogonUser\")]private static extern bool LogonUser(           string lpszUsername,           string lpszDomain,           string lpszPassword,           int dwLogonType,           int dwLogonProvider,           ref IntPtr phToken);[DllImport(\"kernel32.dll\", CharSet=CharSet.Auto)]public extern static bool CloseHandle(IntPtr handle);",
      "private void ImpersonateAndUse(string Username,                                        string Password,                                        string Domain){  IntPtr token = new IntPtr(0);  token = IntPtr.Zero;  // Call LogonUser to obtain a handle to an access token.  bool returnValue = LogonUser(Username, Domain,Password,                                 (int)LOGON32_LOGON_NETWORK,                                 (int)LOGON32_PROVIDER_DEFAULT,                                 ref token);  if (false == returnValue)  {     int ret = Marshal.GetLastWin32Error();     string strErr = String.Format(\"LogonUser failed with error code : {0}\", ret);     throw new ApplicationException(strErr, null);  }  WindowsIdentity newId = new WindowsIdentity(token);  WindowsImpersonationContext impersonatedUser = newId.Impersonate();  try  {     // do the operations using original user security context  }  finally  {     // stop impersonating     impersonatedUser.Undo();     CloseHandle(token);  }}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://support.microsoft.com/kb/q180548/",
      "http://msdn2.microsoft.com/en-us/library/ms730088.aspx",
      "http://www.codeplex.com/WCFSecurityGuideGuideGuideGuide/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://support.microsoft.com/kb/q180548/",
      "text": "http://support.microsoft.com/kb/q180548/"
    },
    {
      "href": "http://msdn2.microsoft.com/en-us/library/ms730088.aspx",
      "text": "http://msdn2.microsoft.com/en-us/library/ms730088.aspx"
    },
    {
      "href": "http://www.codeplex.com/WCFSecurityGuideGuideGuideGuide/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home",
      "text": "http://www.codeplex.com/WCFSecurityGuideGuideGuideGuide/Wiki/View.aspx?title=Questions%20and%20Answers&referringTitle=Home"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>\r\n  </ul>\r\n  <h1>Description</h1>\r\n  <p>You can use the Win32 <strong>LogonUser()</strong> API (via P/Invoke) to create impersonation tokens, only when your WCF Service is not trusted for delegation, because this option forces you to store user name and passwords on your WCF Service.</p>\r\n  <p>The following code example shows how the LogonUser API is used for impersonation:</p>\r\n  <pre>using System.Runtime.InteropServices;<br />&#8230;<br />// Declare the logon types as constants<br />const long LOGON32_LOGON_NETWORK = 3;</pre>\r\n  <pre>// Declare the logon providers as constants<br />const long LOGON32_PROVIDER_DEFAULT = 0;<br /><br />&#91;DllImport(\"advapi32.dll\",EntryPoint = \"LogonUser\")&#93;<br />private static extern bool LogonUser(<br />           string lpszUsername,<br />           string lpszDomain,<br />           string lpszPassword,<br />           int dwLogonType,<br />           int dwLogonProvider,<br />           ref IntPtr phToken);<br />&#91;DllImport(\"kernel32.dll\", CharSet=CharSet.Auto)&#93;<br />public extern static bool CloseHandle(IntPtr handle);</pre>\r\n  <pre>private void ImpersonateAndUse(string Username,<br />                                        string Password,<br />                                        string Domain)<br />&#123;<br />  IntPtr token = new IntPtr(0);<br />  token = IntPtr.Zero;<br />  // Call LogonUser to obtain a handle to an access token.<br />  bool returnValue = LogonUser(Username, Domain,Password,<br />                                 (int)LOGON32_LOGON_NETWORK,<br />                                 (int)LOGON32_PROVIDER_DEFAULT,<br />                                 ref token);<br />  if (false == returnValue)<br />  &#123;<br />     int ret = Marshal.GetLastWin32Error();<br />     string strErr = String.Format(\"LogonUser failed with error code : &#123;0&#125;\", ret);<br />     throw new ApplicationException(strErr, null);<br />  &#125;<br />  WindowsIdentity newId = new WindowsIdentity(token);<br />  WindowsImpersonationContext impersonatedUser = newId.Impersonate();<br />  try<br />  &#123;<br />     // do the operations using original user security context<br />  &#125;<br />  finally<br />  &#123;<br />     // stop impersonating<br />     impersonatedUser.Undo();<br />     CloseHandle(token);<br />  &#125;<br />&#125;</pre>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information on the LogonUser API, see &#8220;How to validate user credentials on Microsoft operating systems&#8221; at <a href=\"http://support.microsoft.com/kb/q180548/\">http://support.microsoft.com/kb/q180548/</a><li>For more information, see &#8220;Delegation and Impersonation with WCF&#8221; at <a href=\"http://msdn2.microsoft.com/en-us/library/ms730088.aspx\">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><li>For impersonation and delegation Q&A, see the Impersonation/Delegation section of &#8220;WCF 3.5 Questions and Answers&#8220; at <a href=\"http://www.codeplex.com/WCFSecurityGuideGuideGuideGuide/Wiki/View.aspx?title=Questions&#37;20and&#37;20Answers&referringTitle=Home\">http://www.codeplex.com/WCFSecurityGuideGuideGuideGuide/Wiki/View.aspx?title=Questions&#37;20and&#37;20Answers&referringTitle=Home</a></li></li></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}