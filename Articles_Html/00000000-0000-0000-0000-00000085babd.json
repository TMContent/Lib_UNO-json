{
  "id": "00000000-0000-0000-0000-00000085babd",
  "checksum": "8c31f5cf4c82ba54daf26b32abd3d9783a322ffc",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "strong",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a"
    ],
    "html5": [
      "ul",
      "li",
      "p"
    ],
    "and": [
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "javascript": [
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "strong"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2",
      "ol",
      "li",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "in": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "your": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "li",
      "a",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "a",
      "title",
      "title"
    ],
    "origin": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "attribute": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "of": [
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "event": [
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "message": [
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "origin’s": [
      "p"
    ],
    "value": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "matches": [
      "p"
    ],
    "fully": [
      "p"
    ],
    "qualified": [
      "p"
    ],
    "domain": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "name": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "fqdn)": [
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "expect": [
      "p"
    ],
    "fqdn": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "contains": [
      "p",
      "p"
    ],
    "server": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "including": [
      "p"
    ],
    "top-level": [
      "p"
    ],
    "fqdns": [
      "p",
      "p"
    ],
    "uniquely": [
      "p"
    ],
    "identify": [
      "p"
    ],
    "full": [
      "p",
      "p"
    ],
    "included": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "url": [
      "p",
      "p"
    ],
    "why": [
      "h2"
    ],
    "validating": [
      "p"
    ],
    "eliminates": [
      "p"
    ],
    "false": [
      "p",
      "p"
    ],
    "positives": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "may": [
      "p"
    ],
    "occur": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "ol",
      "li",
      "tt",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "pre",
      "p",
      "pre",
      "p",
      "p",
      "pre",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "only": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "part": [
      "p",
      "p"
    ],
    "for": [
      "p",
      "p"
    ],
    "example": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "p",
      "p",
      "h2",
      "p"
    ],
    "merely": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "begins": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "or": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "p"
    ],
    "http//www.example.com,": [
      "p"
    ],
    "an": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "intruder": [
      "p"
    ],
    "could": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "p"
    ],
    "such": [
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "http//www.example.com.hackers.net": [
      "p",
      "tt"
    ],
    "achieve": [
      "p"
    ],
    "positive": [
      "p"
    ],
    "match": [
      "p",
      "ol",
      "li"
    ],
    "inject": [
      "p"
    ],
    "harmful": [
      "p"
    ],
    "values": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "http//www.example.com": [
      "tt"
    ],
    "when": [
      "h2"
    ],
    "whenever": [
      "p"
    ],
    "handlers": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "web": [
      "p",
      "h2",
      "h2"
    ],
    "messaging": [
      "p",
      "h2",
      "h2"
    ],
    "against": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "how": [
      "h2"
    ],
    "one": [
      "p"
    ],
    "more": [
      "p"
    ],
    "ensure": [
      "p",
      "p"
    ],
    "is": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "acceptable": [
      "p"
    ],
    "create": [
      "ol",
      "li",
      "strong"
    ],
    "white": [
      "ol",
      "li",
      "strong"
    ],
    "list": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "servers)": [
      "ol",
      "li",
      "strong"
    ],
    "allowed": [
      "ol",
      "li",
      "strong"
    ],
    "send": [
      "ol",
      "li",
      "strong",
      "p"
    ],
    "messages": [
      "ol",
      "li",
      "strong",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "client": [
      "ol",
      "li",
      "strong"
    ],
    "limit": [
      "ol",
      "li"
    ],
    "servers": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "are": [
      "ol",
      "li",
      "ul",
      "li",
      "a"
    ],
    "required": [
      "ol",
      "li"
    ],
    "today": [
      "ol",
      "li"
    ],
    "avoid": [
      "ol",
      "li"
    ],
    "adding": [
      "ol",
      "li"
    ],
    "unnecessary": [
      "ol",
      "li"
    ],
    "domains": [
      "ol",
      "li"
    ],
    "“just": [
      "ol",
      "li"
    ],
    "case”": [
      "ol",
      "li"
    ],
    "single": [
      "ol",
      "li",
      "strong"
    ],
    "===": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "tt",
      "tt",
      "tt",
      "tt",
      "pre"
    ],
    "operator": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p"
    ],
    "test": [
      "ol",
      "li",
      "strong"
    ],
    "equality": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p"
    ],
    "tests": [
      "ol",
      "li"
    ],
    "between": [
      "ol",
      "li"
    ],
    "expected": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "actual": [
      "ol",
      "li"
    ],
    "while": [
      "ol",
      "li"
    ],
    "==": [
      "ol",
      "li",
      "tt"
    ],
    "will": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "also": [
      "ol",
      "li"
    ],
    "work": [
      "ol",
      "li"
    ],
    "skips": [
      "ol",
      "li"
    ],
    "type": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "conversion": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "therefore": [
      "ol",
      "li"
    ],
    "faster": [
      "ol",
      "li"
    ],
    "since": [
      "ol",
      "li"
    ],
    "property": [
      "ol",
      "li"
    ],
    "be": [
      "ol",
      "li"
    ],
    "string": [
      "ol",
      "li",
      "p"
    ],
    "unnecessary)": [
      "ol",
      "li"
    ],
    "below": [
      "ol",
      "li"
    ],
    "compares": [
      "ol",
      "li"
    ],
    "event.origin": [
      "ol",
      "li",
      "tt",
      "pre"
    ],
    "'http//www.example.com')": [
      "ol",
      "li",
      "pre"
    ],
    "{": [
      "ol",
      "li",
      "em",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "processing": [
      "ol",
      "li"
    ],
    "here": [
      "ol",
      "li",
      "pre"
    ],
    "because": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "from": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "pre"
    ],
    "domain}": [
      "ol",
      "li"
    ],
    "several": [
      "ol",
      "li",
      "strong"
    ],
    "names": [
      "ol",
      "li",
      "strong"
    ],
    "ports": [
      "ol",
      "li",
      "strong"
    ],
    "regular": [
      "ol",
      "li",
      "strong",
      "p"
    ],
    "expression": [
      "ol",
      "li",
      "strong"
    ],
    "following": [
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "either": [
      "ol",
      "li"
    ],
    "http": [
      "ol",
      "li"
    ],
    "https": [
      "ol",
      "li"
    ],
    "'http//www.example.com'": [
      "tt"
    ],
    "windowaddeventlistener('message',": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "messagehandler": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "false;\nfunction": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "messagehandlerevent)": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "var": [
      "pre",
      "pre",
      "pre"
    ],
    "re": [
      "pre",
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre"
    ],
    "regexp\"^https?://www.example.com$\");": [
      "pre"
    ],
    "re.test(event.origin))": [
      "pre",
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "data": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "then": [
      "pre",
      "pre",
      "pre"
    ],
    "process…": [
      "pre",
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "else": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "not": [
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "who": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "expect..": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "}}": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "problem": [
      "h2"
    ],
    "demonstrates": [
      "p"
    ],
    "handler": [
      "p"
    ],
    "does": [
      "p"
    ],
    "something": [
      "pre"
    ],
    "process": [
      "pre"
    ],
    "message}": [
      "pre"
    ],
    "validates": [
      "p",
      "p"
    ],
    "but": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p"
    ],
    "rather": [
      "p"
    ],
    "than": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "accepting": [
      "p"
    ],
    "regexp\"www.example.com\");": [
      "pre"
    ],
    "wwwexample.com": [
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "appear": [
      "p"
    ],
    "anywhere": [
      "p"
    ],
    "http//www.example.com.hacker.net": [
      "p",
      "a"
    ],
    "this": [
      "p",
      "p"
    ],
    "solution": [
      "h2"
    ],
    "correct": [
      "p"
    ],
    "situation": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "false;\n\nfunction": [
      "pre"
    ],
    "using": [
      "p"
    ],
    "expressions": [
      "p"
    ],
    "include": [
      "p"
    ],
    "terminator": [
      "p"
    ],
    "complete": [
      "p",
      "p"
    ],
    "doesn’t": [
      "p"
    ],
    "have": [
      "p"
    ],
    "any": [
      "p"
    ],
    "other": [
      "p"
    ],
    "characters": [
      "p"
    ],
    "after": [
      "p"
    ],
    "regexp\"https://www.example.com[/:]?$\");": [
      "pre"
    ],
    "allows": [
      "p"
    ],
    "followed": [
      "p"
    ],
    "by": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "proper": [
      "p"
    ],
    "character": [
      "p",
      "p"
    ],
    "--": [
      "p",
      "p"
    ],
    "forward": [
      "p"
    ],
    "slash": [
      "p"
    ],
    "/)": [
      "p"
    ],
    "path": [
      "p"
    ],
    "trailing": [
      "p"
    ],
    "colon": [
      "p"
    ],
    ":)": [
      "p"
    ],
    "port": [
      "p"
    ],
    "number": [
      "p"
    ],
    "which": [
      "p"
    ],
    "signifies": [
      "p"
    ],
    "guidelines": [
      "h2"
    ],
    "evaluate": [
      "ul",
      "li",
      "a"
    ],
    "elementtextcontent": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "assign": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "dom": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "elements": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "explicitly": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "state": [
      "ul",
      "li",
      "a"
    ],
    "postmessage": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "received": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklist": [
      "h2"
    ],
    "items": [
      "h2"
    ],
    "evaluated": [
      "ul",
      "li",
      "a"
    ],
    "used": [
      "ul",
      "li",
      "a"
    ],
    "stated": [
      "ul",
      "li",
      "a"
    ],
    "validated": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "checked": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "Web Messaging Guidelines",
      "Web Messaging Checklist Items"
    ],
    "ul": [
      "HTML5 and JavaScript.",
      "Do Not Evaluate Messages as Code\n Use element.textContent to Assign Values to DOM Elements\n Explicitly State the Expected Origin with postMessage\n Validate Data Received by Event Handlers\n Validate the Origin Attribute Against the FQDN\n Check The Origin Attribute of Messages",
      "Messages Are Not Evaluated as Code\n Element.textContent Is Used to Assign Values to DOM Elements\n Expected Origin Is Explicitly Stated with postMessage\n Data Received by Event Handlers Is Validated\n The Origin Attribute Is Validated Against the FQDN\n The Origin Attribute of Messages Is Checked"
    ],
    "li": [
      "HTML5 and JavaScript.",
      "Create a white list of the server(s) allowed to send messages to the client. Limit the list to only the servers that are required today. Avoid adding unnecessary servers or domains “just in case”.",
      "To validate the origin against a single server, use the JavaScript === operator to test equality. The === operator tests equality between the expected server name and the actual server name. (While the == operator will also work, the === operator skips the type conversion and is therefore faster. Since the origin property is expected to be a string, type conversion is unnecessary.) The example below compares an origin to an expected value: \nif (event.origin === 'http://www.example.com') \n{ do processing here because the origin is from an expected domain}",
      "To validate the origin against several server names or ports, use a regular expression. The following example will match the FQDN from either HTTP or HTTPS:",
      "Do Not Evaluate Messages as Code",
      "Use element.textContent to Assign Values to DOM Elements",
      "Explicitly State the Expected Origin with postMessage",
      "Validate Data Received by Event Handlers",
      "Validate the Origin Attribute Against the FQDN",
      "Check The Origin Attribute of Messages",
      "Messages Are Not Evaluated as Code",
      "Element.textContent Is Used to Assign Values to DOM Elements",
      "Expected Origin Is Explicitly Stated with postMessage",
      "Data Received by Event Handlers Is Validated",
      "The Origin Attribute Is Validated Against the FQDN",
      "The Origin Attribute of Messages Is Checked"
    ],
    "p": [
      "In your JavaScript code, check the origin attribute of the event message to make sure the origin’s value matches the fully qualified domain name (FQDN) you expect. The FQDN contains the server and domain name, including the top-level domain. FQDNs uniquely identify the full server name included in a URL.",
      "Validating the full FQDN eliminates the false positives that may occur if you validate only part of the domain name. For example, if you merely verify that the origin begins with or contains http://www.example.com, an intruder could use a malicious origin such as http://www.example.com.hackers.net to achieve a false positive match, and to inject malicious code or harmful values.",
      "Whenever you use message handlers with HTML5 Web Messaging, validate the origin attribute against the FQDN.",
      "To validate the origin against one or more FQDNs to ensure that the origin is acceptable:",
      "",
      "The following example demonstrates an event handler that does not validate the origin of the message:",
      "The following example validates the origin, but, because it validates only part of the domain name rather than the FQDN, it is vulnerable to accepting messages from a malicious origin:",
      "Because the value www.example.com can appear anywhere in the string, a malicious FQDN such as http://www.example.com.hacker.net can send messages to this code.",
      "To correct the situation, the following uses the equality operator to validate the FQDN:",
      "To validate the origin using regular expressions, include a terminator to ensure that the FQDN is complete and doesn’t have any other characters after it. For example:",
      "This allows only the FQDN followed by a proper URL character -- such as a forward slash (/) if a path character is trailing, or a colon (:) if a port number is included -- which signifies that the FQDN is complete."
    ],
    "tt": [
      "http://www.example.com",
      "http://www.example.com.hackers.net",
      "===",
      "===",
      "==",
      "===",
      "if (event.origin ===",
      "'http://www.example.com'"
    ],
    "ol": [
      "Create a white list of the server(s) allowed to send messages to the client. Limit the list to only the servers that are required today. Avoid adding unnecessary servers or domains “just in case”.\n To validate the origin against a single server, use the JavaScript === operator to test equality. The === operator tests equality between the expected server name and the actual server name. (While the == operator will also work, the === operator skips the type conversion and is therefore faster. Since the origin property is expected to be a string, type conversion is unnecessary.) The example below compares an origin to an expected value: \nif (event.origin === 'http://www.example.com') \n{ do processing here because the origin is from an expected domain}\n To validate the origin against several server names or ports, use a regular expression. The following example will match the FQDN from either HTTP or HTTPS:"
    ],
    "strong": [
      "Create a white list of the server(s) allowed to send messages to the client.",
      "To validate the origin against a single server, use the JavaScript === operator to test equality.",
      "To validate the origin against several server names or ports, use a regular expression."
    ],
    "br": [
      "",
      ""
    ],
    "em": [
      "{",
      ""
    ],
    "pre": [
      "window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n\n  var re = new RegExp(\"^https?://www.example.com$\");\n\n  if (re.test(event.origin)) {\n   // validate the message as data, then process…\n  } else {\n    // the event is not from who you expect...\n  }\n}",
      "window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n    // do something here to process the message\n}",
      "window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n\n  var re = new RegExp(\"www.example.com\");\n\n  if (re.test(event.origin)) {\n   // validate the message as data, then process…\n  } else {\n    // the event is not from who you expect...\n  }\n}",
      "window.addEventListener('message', messageHandler, false);\n\nfunction messageHandler(event) {\n\n  if (event.origin === 'http://www.example.com') {\n    \n  } else {\n    // the event is not from who you expect...\n  }\n}",
      "window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n\n  var re = new RegExp(\"https://www.example.com[/:]?$\");\n\n  if (re.test(event.origin)) {\n   // validate the message as data, then process…\n  } else {\n    // the event is not from who you expect...\n  }\n}"
    ],
    "a": [
      "http://www.example.com.hacker.net",
      "Do Not Evaluate Messages as Code",
      "Use element.textContent to Assign Values to DOM Elements",
      "Explicitly State the Expected Origin with postMessage",
      "Validate Data Received by Event Handlers",
      "Validate the Origin Attribute Against the FQDN",
      "Check The Origin Attribute of Messages",
      "Messages Are Not Evaluated as Code",
      "Element.textContent Is Used to Assign Values to DOM Elements",
      "Expected Origin Is Explicitly Stated with postMessage",
      "Data Received by Event Handlers Is Validated",
      "The Origin Attribute Is Validated Against the FQDN",
      "The Origin Attribute of Messages Is Checked"
    ]
  },
  "links": [
    {
      "href": "http://www.example.com.hacker.net",
      "text": "http://www.example.com.hacker.net"
    },
    {
      "href": "00000000-0000-0000-0000-00000012aada",
      "text": "Do Not Evaluate Messages as Code"
    },
    {
      "href": "00000000-0000-0000-0000-00000010eb47",
      "text": "Use element.textContent to Assign Values to DOM Elements"
    },
    {
      "href": "00000000-0000-0000-0000-00000076ad87",
      "text": "Explicitly State the Expected Origin with postMessage"
    },
    {
      "href": "00000000-0000-0000-0000-0000006ab8ac",
      "text": "Validate Data Received by Event Handlers"
    },
    {
      "href": "00000000-0000-0000-0000-00000085babd",
      "text": "Validate the Origin Attribute Against the FQDN"
    },
    {
      "href": "00000000-0000-0000-0000-000000763637",
      "text": "Check The Origin Attribute of Messages"
    },
    {
      "href": "00000000-0000-0000-0000-0000008e9b8f",
      "text": "Messages Are Not Evaluated as Code"
    },
    {
      "href": "00000000-0000-0000-0000-00000060fefb",
      "text": "Element.textContent Is Used to Assign Values to DOM Elements"
    },
    {
      "href": "00000000-0000-0000-0000-0000004a4216",
      "text": "Expected Origin Is Explicitly Stated with postMessage"
    },
    {
      "href": "967c9b95-2319-4741-a6fd-1b4bcdf3b636",
      "text": "Data Received by Event Handlers Is Validated"
    },
    {
      "href": "16628f7f-e17a-4bd1-838a-011736bf0995",
      "text": "The Origin Attribute Is Validated Against the FQDN"
    },
    {
      "href": "f103974e-3a42-4837-b04b-7da7e87c41ec",
      "text": "The Origin Attribute of Messages Is Checked"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> HTML5 and JavaScript.</li>\n</ul><h2>What to Do</h2><p>In your JavaScript code, check the origin attribute of the event message to make sure the origin’s value matches the fully qualified domain name (FQDN) you expect. The FQDN contains the server and domain name, including the top-level domain. FQDNs uniquely identify the full server name included in a URL.\n</p><h2>Why</h2><p>Validating the full FQDN eliminates the false positives that may occur if you validate only part of the domain name. For example, if you merely verify that the origin begins with or contains <tt>http://www.example.com</tt>, an intruder could use a malicious origin such as <tt>http://www.example.com.hackers.net</tt> to achieve a false positive match, and to inject malicious code or harmful values. \n</p><h2>When</h2><p>Whenever you use message handlers with HTML5 Web Messaging, validate the origin attribute against the FQDN. \n</p><h2>How</h2><p>To validate the origin against one or more FQDNs to ensure that the origin is acceptable:\n</p><ol>\n<li> <strong>Create a white list of the server(s) allowed to send messages to the client.</strong> Limit the list to only the servers that are required today. Avoid adding unnecessary servers or domains “just in case”.</li>\n<li> <strong>To validate the origin against a single server, use the JavaScript <tt>===</tt> operator to test equality.</strong> The <tt>===</tt> operator tests equality between the expected server name and the actual server name. (While the <tt>==</tt> operator will also work, the <tt>===</tt> operator skips the type conversion and is therefore faster. Since the origin property is expected to be a string, type conversion is unnecessary.) The example below compares an origin to an expected value: <br>\n<tt>if (event.origin ===</tt> <tt>'http://www.example.com'</tt>) \n<em>{</em> do processing here because the origin is from an expected domain}<em></em></li>\n<li> <strong>To validate the origin against several server names or ports, use a regular expression.</strong> The following example will match the FQDN from either HTTP or HTTPS:</li>\n</ol><pre>window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n\n  var re = new RegExp(\"^https?://www.example.com$\");\n\n  if (re.test(event.origin)) {\n   // validate the message as data, then process…\n  } else {\n    // the event is not from who you expect...\n  }\n}\n</pre><p><br></p><h2>Problem Example</h2><p>The following example demonstrates an event handler that does not validate the origin of the message:\n</p><pre>window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n    // do something here to process the message\n}\n</pre><p>\nThe following example validates the origin, but, because it validates only part of the domain name rather than the FQDN, it is vulnerable to accepting messages from a malicious origin:\n</p><pre>window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n\n  var re = new RegExp(\"www.example.com\");\n\n  if (re.test(event.origin)) {\n   // validate the message as data, then process…\n  } else {\n    // the event is not from who you expect...\n  }\n}\n</pre><p>\nBecause the value www.example.com can appear anywhere in the string, a malicious FQDN such as <a href=\"http://www.example.com.hacker.net\">http://www.example.com.hacker.net</a> can send messages to this code.\n</p><h2>Solution Example</h2><p>To correct the situation, the following uses the equality operator to validate the FQDN:\n</p><pre>window.addEventListener('message', messageHandler, false);\n\nfunction messageHandler(event) {\n\n  if (event.origin === 'http://www.example.com') {\n    \n  } else {\n    // the event is not from who you expect...\n  }\n}\n</pre><p>\nTo validate the origin using regular expressions, include a terminator to ensure that the FQDN is complete and doesn’t have any other characters after it. For example:\n</p><pre>window.addEventListener('message', messageHandler, false);\nfunction messageHandler(event) {\n\n  var re = new RegExp(\"https://www.example.com[/:]?$\");\n\n  if (re.test(event.origin)) {\n   // validate the message as data, then process…\n  } else {\n    // the event is not from who you expect...\n  }\n}\n</pre><p>\nThis allows only the FQDN followed by a proper URL character -- such as a forward slash (/) if a path character is trailing, or a colon (:) if a port number is included -- which signifies that the FQDN is complete.\n</p>\n<h2>Web Messaging Guidelines</h2><ul><li> <a href=\"00000000-0000-0000-0000-00000012aada\">Do Not Evaluate Messages as Code</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000010eb47\">Use element.textContent to Assign Values to DOM Elements</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000076ad87\">Explicitly State the Expected Origin with postMessage</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000006ab8ac\">Validate Data Received by Event Handlers</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000085babd\">Validate the Origin Attribute Against the FQDN</a></li>\n<li> <a href=\"00000000-0000-0000-0000-000000763637\">Check The Origin Attribute of Messages</a></li>\n</ul><h2>Web Messaging Checklist Items</h2><ul><li> <a href=\"00000000-0000-0000-0000-0000008e9b8f\">Messages Are Not Evaluated as Code</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000060fefb\">Element.textContent Is Used to Assign Values to DOM Elements</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000004a4216\">Expected Origin Is Explicitly Stated with postMessage</a></li>\n<li> <a href=\"967c9b95-2319-4741-a6fd-1b4bcdf3b636\">Data Received by Event Handlers Is Validated</a></li>\n<li> <a href=\"16628f7f-e17a-4bd1-838a-011736bf0995\">The Origin Attribute Is Validated Against the FQDN</a></li>\n<li> <a href=\"f103974e-3a42-4837-b04b-7da7e87c41ec\">The Origin Attribute of Messages Is Checked</a></li>\n</ul>"
}