{
  "id": "fd83e67c-62b8-4cc3-a365-4491dd4a2ef6",
  "checksum": "e434638429c7d93f4a75346b848aec59fc4c6cc4",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "php": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "do": [
      "h1"
    ],
    "enforce": [
      "p",
      "p",
      "title"
    ],
    "strong": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "password": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "title"
    ],
    "requirements": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "why": [
      "h1"
    ],
    "requiring": [
      "p"
    ],
    "passwords": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "prevents": [
      "p"
    ],
    "weak": [
      "p"
    ],
    "from": [
      "p"
    ],
    "being": [
      "p"
    ],
    "used": [
      "p"
    ],
    "using": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "application": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "more": [
      "p"
    ],
    "resilient": [
      "p"
    ],
    "guessing": [
      "p"
    ],
    "attacks": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "determine": [
      "ol",
      "li",
      "p"
    ],
    "whether": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "needs": [
      "ol",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "li",
      "p"
    ],
    "a": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "customizable": [
      "ol",
      "li",
      "p"
    ],
    "complexity": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "policy": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "or": [
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "it's": [
      "ol",
      "li",
      "p"
    ],
    "okay": [
      "ol",
      "li",
      "p"
    ],
    "hard-code": [
      "ol",
      "li",
      "p"
    ],
    "define": [
      "ol",
      "li",
      "p"
    ],
    "secure": [
      "ol",
      "li",
      "p"
    ],
    "defaults": [
      "ol",
      "li",
      "p"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "options": [
      "ol",
      "li",
      "p"
    ],
    "changing": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "review": [
      "ol",
      "li",
      "p"
    ],
    "find": [
      "ol",
      "li",
      "p"
    ],
    "that": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "is": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "pre",
      "pre",
      "p"
    ],
    "responsible": [
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "optional)": [
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "let": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "enter": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "twice": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "li",
      "p"
    ],
    "practice": [
      "ol",
      "li",
      "p"
    ],
    "allow": [
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "sure": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "enters": [
      "ol",
      "li",
      "p"
    ],
    "new": [
      "ol",
      "li",
      "p"
    ],
    "correctly": [
      "ol",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "important": [
      "ol",
      "li",
      "p"
    ],
    "because": [
      "ol",
      "li",
      "p"
    ],
    "fields": [
      "ol",
      "li",
      "p"
    ],
    "are": [
      "ol",
      "li",
      "p"
    ],
    "typically": [
      "ol",
      "li",
      "p"
    ],
    "masked": [
      "ol",
      "li",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "cannot": [
      "ol",
      "li",
      "p"
    ],
    "see": [
      "ol",
      "li",
      "p"
    ],
    "his": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "input": [
      "ol",
      "li",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "an": [
      "ol",
      "li",
      "p"
    ],
    "unintended": [
      "ol",
      "li",
      "p"
    ],
    "one": [
      "ol",
      "li",
      "p"
    ],
    "may": [
      "ol",
      "li",
      "p"
    ],
    "leave": [
      "ol",
      "li",
      "p"
    ],
    "locked": [
      "ol",
      "li",
      "p"
    ],
    "out": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "li",
      "p"
    ],
    "account": [
      "ol",
      "li",
      "p"
    ],
    "implemented": [
      "ol",
      "li",
      "p"
    ],
    "in": [
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "li",
      "p"
    ],
    "validate": [
      "ol",
      "li",
      "p"
    ],
    "two": [
      "ol",
      "li",
      "p"
    ],
    "entered": [
      "ol",
      "li",
      "p"
    ],
    "they": [
      "ol",
      "li",
      "p"
    ],
    "match": [
      "ol",
      "li",
      "p"
    ],
    "check": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "length": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "add": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "function": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "minimum": [
      "ol",
      "li",
      "p"
    ],
    "maximum": [
      "ol",
      "li",
      "p"
    ],
    "limits": [
      "ol",
      "li",
      "p"
    ],
    "defined": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "ifstrlen($password)": [
      "ol",
      "li",
      "pre",
      "p"
    ],
    "8{ //password": [
      "ol",
      "li",
      "pre"
    ],
    "too": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p"
    ],
    "short}ifstrlen($password)": [
      "ol",
      "li",
      "pre"
    ],
    "20{ //password": [
      "ol",
      "li",
      "pre",
      "p"
    ],
    "long}": [
      "ol",
      "li",
      "pre",
      "p"
    ],
    "numbers": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "if!preg_match(\"#[0-9]+#\",": [
      "ol",
      "li",
      "pre"
    ],
    "$password){ //password": [
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre"
    ],
    "does": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre"
    ],
    "not": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre"
    ],
    "contain": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "pre",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre"
    ],
    "numbers}": [
      "ol",
      "li",
      "pre"
    ],
    "lower-case": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "pre"
    ],
    "letters": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "if!preg_match(\"#[a-z]+#\",": [
      "ol",
      "ol",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre"
    ],
    "letters}": [
      "ol",
      "ol",
      "li",
      "p",
      "pre",
      "li",
      "p",
      "pre"
    ],
    "capital": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "pre"
    ],
    "$password)": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "{ //password": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "symbols": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "requires": [
      "ol",
      "li",
      "p"
    ],
    "if!preg_match(\"#\\w+#\",": [
      "ol",
      "li",
      "p",
      "pre"
    ],
    "symbols}": [
      "ol",
      "li",
      "p",
      "pre"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "How"
    ],
    "ul": [
      "PHP"
    ],
    "li": [
      "PHP",
      "Identify application requirements. Determine whether your application needs to have a customizable password complexity policy or if it's okay to hard-code password complexity requirements. Define secure defaults for password complexity options.",
      "Identify password changing code. Review your application to find code that is responsible for changing user passwords.",
      "(Optional) Let the user enter the password twice. It is a common practice to allow the user to enter the password twice to make sure that the user enters the new password correctly. This is important because the password fields are typically masked, so the user cannot see his input, and changing the password to an unintended one may leave the user locked out of his account. If this is implemented in your application, the password changing code should validate the two entered passwords to make sure they match.",
      "Check password length. Add code to the password changing function to check the password length for minimum and maximum limits defined by policy. For example:\n      if(strlen($password) < 8){ //password is too short}if(strlen($password) > 20){ //password is too long}",
      "Check the password for numbers. Add code to the password changing function to check the password for numbers. For example:\n      if(!preg_match(\"#[0-9]+#\", $password)){ //password does not contain numbers}",
      "Check the password for lower-case letters. Add code to the password changing function to check the password for lower-case letters. For example: if(!preg_match(\"#[a-z]+#\", $password)){ //password does not contain lower-case letters}",
      "Check the password for capital letters. Add code to the password changing function to check the password for capital letters. For example: if(!preg_match(\"#[A-Z]+#\", $password)) { //password does not contain capital letters}",
      "(Optional) Check the password for symbols. If your application requires it, add code to the password changing function to check the password for symbols. For example: if(!preg_match(\"#\\W+#\", $password)){ //password does not contain symbols}"
    ],
    "p": [
      "Enforce strong password requirements.",
      "Requiring strong passwords prevents weak passwords from being used. Using strong passwords makes the application more resilient to password guessing attacks.",
      "To enforce strong password requirements:",
      "Identify application requirements. Determine whether your application needs to have a customizable password complexity policy or if it's okay to hard-code password complexity requirements. Define secure defaults for password complexity options.",
      "Identify password changing code. Review your application to find code that is responsible for changing user passwords.",
      "(Optional) Let the user enter the password twice. It is a common practice to allow the user to enter the password twice to make sure that the user enters the new password correctly. This is important because the password fields are typically masked, so the user cannot see his input, and changing the password to an unintended one may leave the user locked out of his account. If this is implemented in your application, the password changing code should validate the two entered passwords to make sure they match.",
      "Check password length. Add code to the password changing function to check the password length for minimum and maximum limits defined by policy. For example:",
      "",
      "if(strlen($password) > 20){ //password is too long}",
      "Check the password for numbers. Add code to the password changing function to check the password for numbers. For example:",
      "Check the password for lower-case letters. Add code to the password changing function to check the password for lower-case letters. For example:",
      "if(!preg_match(\"#[a-z]+#\", $password)){ //password does not contain lower-case letters}",
      "Check the password for capital letters. Add code to the password changing function to check the password for capital letters. For example:",
      "if(!preg_match(\"#[A-Z]+#\", $password)) { //password does not contain capital letters}",
      "(Optional) Check the password for symbols. If your application requires it, add code to the password changing function to check the password for symbols. For example:",
      "if(!preg_match(\"#\\W+#\", $password)){ //password does not contain symbols}"
    ],
    "ol": [
      "Identify application requirements. Determine whether your application needs to have a customizable password complexity policy or if it's okay to hard-code password complexity requirements. Define secure defaults for password complexity options.\n    \n    \n      \n        Identify password changing code. Review your application to find code that is responsible for changing user passwords.\n    \n    \n      \n        (Optional) Let the user enter the password twice. It is a common practice to allow the user to enter the password twice to make sure that the user enters the new password correctly. This is important because the password fields are typically masked, so the user cannot see his input, and changing the password to an unintended one may leave the user locked out of his account. If this is implemented in your application, the password changing code should validate the two entered passwords to make sure they match.\n    \n    \n      \n        Check password length. Add code to the password changing function to check the password length for minimum and maximum limits defined by policy. For example:\n      if(strlen($password) < 8){ //password is too short}if(strlen($password) > 20){ //password is too long}\n    \n    \n      \n        Check the password for numbers. Add code to the password changing function to check the password for numbers. For example:\n      if(!preg_match(\"#[0-9]+#\", $password)){ //password does not contain numbers}\n    \n    \n      \n      Check the password for lower-case letters. Add code to the password changing function to check the password for lower-case letters. For example: if(!preg_match(\"#[a-z]+#\", $password)){ //password does not contain lower-case letters}\n    \n      \n      Check the password for capital letters. Add code to the password changing function to check the password for capital letters. For example: if(!preg_match(\"#[A-Z]+#\", $password)) { //password does not contain capital letters}\n    \n      \n      (Optional) Check the password for symbols. If your application requires it, add code to the password changing function to check the password for symbols. For example: if(!preg_match(\"#\\W+#\", $password)){ //password does not contain symbols}"
    ],
    "strong": [
      "Identify application requirements.",
      "Identify password changing code.",
      "(Optional) Let the user enter the password twice.",
      "Check password length.",
      "Check the password for numbers.",
      "Check the password for lower-case letters.",
      "Check the password for capital letters.",
      "(Optional) Check the password for symbols."
    ],
    "pre": [
      "if(strlen($password) < 8){ //password is too short}if(strlen($password) > 20){ //password is too long}",
      "if(!preg_match(\"#[0-9]+#\", $password)){ //password does not contain numbers}",
      "if(!preg_match(\"#[a-z]+#\", $password)){ //password does not contain lower-case letters}",
      "if(!preg_match(\"#[A-Z]+#\", $password)) { //password does not contain capital letters}",
      "if(!preg_match(\"#\\W+#\", $password)){ //password does not contain symbols}"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>PHP</li>\n  </ul>\n  <h1>What to Do</h1>\n  <p>Enforce strong password requirements.</p>\n  <h1>Why</h1>\n  <p>Requiring strong passwords prevents weak passwords from being used. Using strong passwords makes the application more resilient to password guessing attacks.</p>\n  <h1>How</h1>\n  <p>To enforce strong password requirements:</p>\n  <ol>\n    <li>\n      <p>\n        <strong>Identify application requirements.</strong> Determine whether your application needs to have a customizable password complexity policy or if it's okay to hard-code password complexity requirements. Define secure defaults for password complexity options.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Identify password changing code.</strong> Review your application to find code that is responsible for changing user passwords.</p>\n    </li>\n    <li>\n      <p>\n        <strong>(Optional) Let the user enter the password twice.</strong> It is a common practice to allow the user to enter the password twice to make sure that the user enters the new password correctly. This is important because the password fields are typically masked, so the user cannot see his input, and changing the password to an unintended one may leave the user locked out of his account. If this is implemented in your application, the password changing code should validate the two entered passwords to make sure they match.</p>\n    </li>\n    <li>\n      <p>\n        <strong>Check password length.</strong> Add code to the password changing function to check the password length for minimum and maximum limits defined by policy. For example:</p>\n      <pre>if(strlen($password) &lt; 8)<br />{<br />&nbsp;//password is too short<br />}<p /><p>if(strlen($password) &gt; 20)<br />{<br />&nbsp;//password is too long<br />}</p></pre>\n    </li>\n    <li>\n      <p>\n        <strong>Check the password for numbers.</strong> Add code to the password changing function to check the password for numbers. For example:</p>\n      <pre>if(!preg_match(\"#[0-9]+#\", $password))<br />{<br />&nbsp;//password does not contain numbers<br />}</pre>\n    </li>\n    <li>\n      <p />\n      <strong>Check the password for lower-case letters.</strong> Add code to the password changing function to check the password for lower-case letters. For example: <p /><pre>if(!preg_match(\"#[a-z]+#\", $password))<br />{<br />&nbsp;//password does not contain lower-case letters<br />}</pre></li>\n    <li>\n      <p />\n      <strong>Check the password for capital letters.</strong> Add code to the password changing function to check the password for capital letters. For example: <p /><pre>if(!preg_match(\"#[A-Z]+#\", $password)) <br />{<br />&nbsp;//password does not contain capital letters<br />}</pre></li>\n    <li>\n      <p />\n      <strong>(Optional) Check the password for symbols.</strong> If your application requires it, add code to the password changing function to check the password for symbols. For example: <p /><pre>if(!preg_match(\"#\\W+#\", $password))<br />{<br />&nbsp;//password does not contain symbols<br />}</pre></li>\n  </ol>\n  <br />"
}