{
  "id": "d50b8d11-8906-40b2-a56e-eb5ef3c7824f",
  "checksum": "ce6711d3a3b1b58b911cac44918e0a270ef91bcb",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "p",
      "ol",
      "li",
      "p"
    ],
    "not": [
      "p"
    ],
    "accept": [
      "p",
      "p",
      "p"
    ],
    "file": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "title"
    ],
    "names": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "title"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "paths": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "title"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "users": [
      "p",
      "p",
      "title"
    ],
    "if": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "you": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "must": [
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "name": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "path": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "user": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "sanitize": [
      "p",
      "title"
    ],
    "it": [
      "p",
      "p",
      "p"
    ],
    "very": [
      "p",
      "p"
    ],
    "carefully": [
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "accepting": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "result": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "attackers": [
      "p"
    ],
    "coercing": [
      "p"
    ],
    "your": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "application": [
      "p"
    ],
    "into": [
      "p"
    ],
    "accessing": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "files": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "and": [
      "p",
      "p"
    ],
    "resources": [
      "p"
    ],
    "when": [
      "h1",
      "ol",
      "li",
      "p"
    ],
    "is": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "unavoidable": [
      "p"
    ],
    "then": [
      "p"
    ],
    "use": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "acccess": [
      "p"
    ],
    "store": [
      "p"
    ],
    "data": [
      "p"
    ],
    "the": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "system": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p"
    ],
    "sanitized": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "ensure": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "li",
      "p"
    ],
    "refer": [
      "ol",
      "li",
      "p"
    ],
    "within": [
      "ol",
      "li",
      "p"
    ],
    "application's": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "virtual": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "directory": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "hierarchy": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "appropriate": [
      "ol",
      "li",
      "p"
    ],
    "checking": [
      "ol",
      "li",
      "p"
    ],
    "obtain": [
      "ol",
      "li",
      "p"
    ],
    "full": [
      "ol",
      "li",
      "p"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "by": [
      "ol",
      "li",
      "p"
    ],
    "using": [
      "ol",
      "li",
      "p"
    ],
    "systemio.path.getfullpath": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "method": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "mappath": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "map": [
      "ol",
      "li",
      "p"
    ],
    "supplied": [
      "ol",
      "li",
      "p"
    ],
    "physical": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p"
    ],
    "server": [
      "ol",
      "li",
      "p"
    ],
    "overloaded": [
      "ol",
      "li",
      "p"
    ],
    "requestmappath": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "accepts": [
      "ol",
      "li",
      "p"
    ],
    "bool": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "parameter": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "so": [
      "ol",
      "li",
      "p"
    ],
    "prevent": [
      "ol",
      "li",
      "p"
    ],
    "cross-application": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p"
    ],
    "mapping": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p"
    ],
    "following": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "p"
    ],
    "shows": [
      "ol",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "technique": [
      "ol",
      "li",
      "p"
    ],
    "try{": [
      "ol",
      "li",
      "pre"
    ],
    "string": [
      "ol",
      "li",
      "pre"
    ],
    "mappedpath": [
      "ol",
      "li",
      "pre"
    ],
    "=": [
      "ol",
      "li",
      "pre"
    ],
    "requestmappath(": [
      "ol",
      "li",
      "pre"
    ],
    "inputpathtext,": [
      "ol",
      "li",
      "pre"
    ],
    "requestapplicationpath,": [
      "ol",
      "li",
      "pre"
    ],
    "false;}catch": [
      "ol",
      "li",
      "pre"
    ],
    "httpexception){": [
      "ol",
      "li",
      "pre"
    ],
    "//": [
      "ol",
      "li",
      "pre"
    ],
    "attempted": [
      "ol",
      "li",
      "pre"
    ],
    "}": [
      "ol",
      "li",
      "pre"
    ],
    "final": [
      "ol",
      "li",
      "p"
    ],
    "false": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "prevents": [
      "ol",
      "li",
      "p"
    ],
    "means": [
      "ol",
      "li",
      "p"
    ],
    "cannot": [
      "ol",
      "li",
      "p"
    ],
    "successfully": [
      "ol",
      "li",
      "p"
    ],
    "supply": [
      "ol",
      "li",
      "p"
    ],
    "contains": [
      "ol",
      "li",
      "p"
    ],
    "\".\"": [
      "ol",
      "li",
      "p"
    ],
    "traverse": [
      "ol",
      "li",
      "p"
    ],
    "outside": [
      "ol",
      "li",
      "p"
    ],
    "any": [
      "ol",
      "li",
      "p",
      "title"
    ],
    "attempt": [
      "ol",
      "li",
      "p"
    ],
    "results": [
      "ol",
      "li",
      "p"
    ],
    "an": [
      "ol",
      "li",
      "p"
    ],
    "exception": [
      "ol",
      "li",
      "p"
    ],
    "type": [
      "ol",
      "li",
      "p"
    ],
    "httpexception": [
      "ol",
      "li",
      "p",
      "b"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How"
    ],
    "p": [
      "Do not accept file names or paths from users.  If you must accept a file name or a path from a user, sanitize it very carefully.",
      "Accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources.",
      "If it is unavoidable to accept a file name from a user and to then use it to acccess or store data in the file system, that file name or path must be very carefully sanitized.",
      "File Names. Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.  When checking file names, obtain the full name of the file by using the System.IO.Path.GetFullPath method.",
      "File Paths. If you use MapPath to map a supplied virtual path to a physical path on the server, use the overloaded Request.MapPath method that accepts a bool parameter so that you can prevent cross-application mapping. The following code example shows this technique.",
      "The final false parameter prevents cross-application mapping.  This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type HttpException.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "ol": [
      "File Names. Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.  When checking file names, obtain the full name of the file by using the System.IO.Path.GetFullPath method. \r\n      \r\n        \r\n          File Paths. If you use MapPath to map a supplied virtual path to a physical path on the server, use the overloaded Request.MapPath method that accepts a bool parameter so that you can prevent cross-application mapping. The following code example shows this technique. \r\n        try{ string mappedPath = Request.MapPath( inputPath.Text,                                       Request.ApplicationPath, false);}catch (HttpException){ // Cross-application mapping attempted }\r\n        The final false parameter prevents cross-application mapping.  This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type HttpException."
    ],
    "li": [
      "File Names. Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.  When checking file names, obtain the full name of the file by using the System.IO.Path.GetFullPath method.",
      "File Paths. If you use MapPath to map a supplied virtual path to a physical path on the server, use the overloaded Request.MapPath method that accepts a bool parameter so that you can prevent cross-application mapping. The following code example shows this technique. \r\n        try{ string mappedPath = Request.MapPath( inputPath.Text,                                       Request.ApplicationPath, false);}catch (HttpException){ // Cross-application mapping attempted }\r\n        The final false parameter prevents cross-application mapping.  This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type HttpException."
    ],
    "strong": [
      "File Names.",
      "File Paths."
    ],
    "b": [
      "System.IO.Path.GetFullPath",
      "MapPath",
      "Request.MapPath",
      "bool",
      "false",
      "HttpException"
    ],
    "pre": [
      "try{ string mappedPath = Request.MapPath( inputPath.Text,                                       Request.ApplicationPath, false);}catch (HttpException){ // Cross-application mapping attempted }"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Do</h1>\r\n  <p>Do not accept file names or paths from users.&nbsp; If you must accept a file name or a path from a user, sanitize it very carefully. </p>\r\n  <h1>Why</h1>\r\n  <p>Accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources. </p>\r\n  <h1>When</h1>\r\n  <p>If it is unavoidable to accept a file name from a user and to then use it to acccess or store data in the file system, that file name or path must be very carefully sanitized. </p>\r\n  <h1>How</h1>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>File Names.</strong> Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.&nbsp; When checking file names, obtain the full name of the file by using the <b>System.IO.Path.GetFullPath</b> method. </p>\r\n      <li>\r\n        <p>\r\n          <strong>File Paths. </strong>If you use <b>MapPath</b> to map a supplied virtual path to a physical path on the server, use the overloaded <b>Request.MapPath</b> method that accepts a <b>bool</b> parameter so that you can prevent cross-application mapping. The following code example shows this technique. </p>\r\n        <pre>try<br />&#123;<br /> string mappedPath = Request.MapPath( inputPath.Text,<br />                                       Request.ApplicationPath, false);<br />&#125;<br />catch (HttpException)<br />&#123;<br /> // Cross-application mapping attempted <br />&#125;</pre>\r\n        <p>The final <b>false</b> parameter prevents cross-application mapping.&nbsp; This means that a user cannot successfully supply a path that contains \"..\" to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <b>HttpException</b>. </p>\r\n      </li>\r\n    </li>\r\n  </ol>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>"
}