{
  "id": "c9b14bf5-5988-4b25-8654-5843c5ec965c",
  "checksum": "83bc7810e5a2f7db78b0545762d7062f7d370dab",
  "words": {
    "1": [
      "ul",
      "li",
      "h1",
      "span",
      "ul",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "2": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "h1",
      "span",
      "ol",
      "li"
    ],
    "3": [
      "ul",
      "li",
      "h1",
      "span"
    ],
    "summary": [
      "h1",
      "span"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "span",
      "span",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "dictionary": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "attack": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "p",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "cryptographic": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "h2",
      "em",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "where": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "attempts": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "defeat": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "ciphers": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "trying": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "numerous": [
      "p",
      "p"
    ],
    "decryption": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li"
    ],
    "keys": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "passphrases": [
      "p",
      "p"
    ],
    "from": [
      "p",
      "ul",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "dictionarydictionaries": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "list": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "possible": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "h1",
      "span",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "words": [
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "tried": [
      "p"
    ],
    "while": [
      "p",
      "ol",
      "li"
    ],
    "attempting": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "cipherdictionary": [
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "p",
      "p",
      "title"
    ],
    "also": [
      "p",
      "p"
    ],
    "applicable": [
      "p",
      "p"
    ],
    "applications": [
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "use": [
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "credentials": [
      "p",
      "ul",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "p"
    ],
    "log": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "their": [
      "p",
      "p"
    ],
    "clients": [
      "p"
    ],
    "similar": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "cryptanalytic": [
      "p",
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "difference": [
      "p",
      "p"
    ],
    "credential": [
      "p",
      "p",
      "p",
      "i",
      "h2",
      "em"
    ],
    "focus": [
      "p",
      "p"
    ],
    "at": [
      "p",
      "p",
      "p",
      "p"
    ],
    "finding": [
      "p",
      "p"
    ],
    "valid": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "password": [
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "span",
      "em",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "bypass": [
      "p"
    ],
    "authentication": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "b",
      "p",
      "p"
    ],
    "so": [
      "p"
    ],
    "dictionaries": [
      "p",
      "p",
      "p"
    ],
    "consist": [
      "p"
    ],
    "values": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "instead": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "key": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "passphrase": [
      "p"
    ],
    "follow": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "these": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "learn": [
      "p"
    ],
    "how": [
      "p",
      "p",
      "title"
    ],
    "test": [
      "p",
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "h2",
      "em",
      "p",
      "title"
    ],
    "for": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h1",
      "span",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "h1",
      "span",
      "h1",
      "span",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "span",
      "p"
    ],
    "analyze": [
      "ul",
      "li",
      "h1",
      "span"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "span",
      "p",
      "h2",
      "span",
      "em"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1",
      "span",
      "h2",
      "span",
      "em",
      "p"
    ],
    "execute": [
      "ul",
      "li",
      "h1",
      "span",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "cases": [
      "ul",
      "li",
      "p",
      "h1",
      "span",
      "p"
    ],
    "first": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "necessary": [
      "p",
      "p"
    ],
    "different": [
      "p",
      "p"
    ],
    "involved": [
      "p"
    ],
    "encrypted": [
      "ul",
      "li",
      "h2",
      "span",
      "em",
      "ol",
      "li"
    ],
    "cracking": [
      "ul",
      "li",
      "h2",
      "span",
      "em",
      "ol",
      "li",
      "h2",
      "em",
      "p"
    ],
    "contrast": [
      "p"
    ],
    "brute-force": [
      "p"
    ],
    "which": [
      "p",
      "p",
      "p"
    ],
    "created": [
      "p",
      "ol",
      "li"
    ],
    "systematically": [
      "p"
    ],
    "performing": [
      "p"
    ],
    "exhaustive": [
      "p"
    ],
    "search": [
      "p"
    ],
    "over": [
      "p"
    ],
    "space": [
      "p"
    ],
    "only": [
      "p",
      "p",
      "p",
      "p"
    ],
    "try": [
      "p"
    ],
    "possibilities": [
      "p"
    ],
    "supplied": [
      "p"
    ],
    "dictionarythus,": [
      "p"
    ],
    "always": [
      "p"
    ],
    "starts": [
      "p",
      "p"
    ],
    "building": [
      "p"
    ],
    "file": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "will": [
      "p",
      "p"
    ],
    "used": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "systemthe": [
      "p"
    ],
    "then": [
      "p"
    ],
    "finds": [
      "p",
      "ol",
      "li"
    ],
    "ciphertext": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "decrypt": [
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "i",
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "into": [
      "p"
    ],
    "known": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "case": [
      "p",
      "p"
    ],
    "known-plaintext": [
      "p"
    ],
    "unknown": [
      "p",
      "ol",
      "li"
    ],
    "plaintext": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "ciphertext-only": [
      "p",
      "p"
    ],
    "attacks.the": [
      "p"
    ],
    "continues": [
      "p",
      "p"
    ],
    "passing": [
      "p",
      "p"
    ],
    "each": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "function": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "order": [
      "p",
      "p"
    ],
    "find": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "detail": [
      "p",
      "p",
      "p"
    ],
    "builds": [
      "ol",
      "li",
      "p"
    ],
    "consisting": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "keys/passphrases": [
      "ol",
      "li"
    ],
    "system": [
      "ol",
      "li",
      "p"
    ],
    "decipher": [
      "ol",
      "li"
    ],
    "iterates": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "through": [
      "ol",
      "li",
      "ol",
      "li",
      "p",
      "p"
    ],
    "entries": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "scenario": [
      "p",
      "p",
      "p"
    ],
    "previous": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "one": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "circumvent": [
      "p"
    ],
    "break": [
      "p"
    ],
    "cryptographythus,": [
      "p"
    ],
    "attacker’s": [
      "p",
      "p"
    ],
    "goal": [
      "p",
      "p"
    ],
    "like": [
      "p",
      "p"
    ],
    "keythe": [
      "p"
    ],
    "selecting": [
      "p"
    ],
    "username": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "target": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "uservalid": [
      "p"
    ],
    "usernames": [
      "p"
    ],
    "can": [
      "p",
      "ol",
      "li"
    ],
    "leveraged": [
      "p"
    ],
    "using": [
      "p",
      "ul",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "registration": [
      "p"
    ],
    "pages": [
      "p"
    ],
    "social": [
      "p"
    ],
    "engineeringthen": [
      "p"
    ],
    "follows": [
      "p"
    ],
    "flow": [
      "p"
    ],
    "scenariothe": [
      "p"
    ],
    "containing": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "passwordsa": [
      "p"
    ],
    "resourceful": [
      "p"
    ],
    "would": [
      "p"
    ],
    "mutate": [
      "p"
    ],
    "substituting": [
      "p"
    ],
    "lettersby": [
      "p"
    ],
    "numbers": [
      "p"
    ],
    "applying": [
      "p"
    ],
    "mutationsthen": [
      "p"
    ],
    "locates": [
      "p"
    ],
    "request": [
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "made": [
      "p"
    ],
    "web": [
      "p"
    ],
    "pagethe": [
      "p"
    ],
    "passwords": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "procedure": [
      "p",
      "p"
    ],
    "works": [
      "p"
    ],
    "enables": [
      "p"
    ],
    "application": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "selects": [
      "ol",
      "li"
    ],
    "client": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "discovers": [
      "ol",
      "li"
    ],
    "target’s": [
      "ol",
      "li"
    ],
    "constructs": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "sometimes": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p"
    ],
    "recover": [
      "p"
    ],
    "but": [
      "p",
      "p"
    ],
    "encrypted/hashed": [
      "p"
    ],
    "version": [
      "p",
      "ol",
      "li"
    ],
    "passwordthis": [
      "p"
    ],
    "common": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "attackers": [
      "p",
      "p"
    ],
    "have": [
      "p",
      "p",
      "p"
    ],
    "access": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "set": [
      "p",
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "hashes": [
      "p",
      "p",
      "ul",
      "ul",
      "li"
    ],
    "unix": [
      "p"
    ],
    "appear": [
      "p"
    ],
    "des": [
      "p"
    ],
    "sniffing": [
      "p"
    ],
    "network": [
      "p",
      "ol",
      "li"
    ],
    "connection": [
      "p"
    ],
    "shows": [
      "p"
    ],
    "being": [
      "p",
      "p"
    ],
    "transferred": [
      "p"
    ],
    "after": [
      "p",
      "p"
    ],
    "they": [
      "p"
    ],
    "been": [
      "p"
    ],
    "hashed/encrypted": [
      "p",
      "ul",
      "ul",
      "li",
      "h2",
      "em",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li"
    ],
    "gains": [
      "ol",
      "li"
    ],
    "capture": [
      "ol",
      "li"
    ],
    "showing": [
      "ol",
      "li"
    ],
    "hashed": [
      "ol",
      "li"
    ],
    "algorithm": [
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "hash/encrypt": [
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "value": [
      "ol",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "li"
    ],
    "entry": [
      "ol",
      "li",
      "ul",
      "ul",
      "li"
    ],
    "encrypts": [
      "ul",
      "ul",
      "li"
    ],
    "discovered": [
      "ul",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "compares": [
      "ul",
      "ul",
      "li"
    ],
    "next": [
      "p"
    ],
    "what": [
      "p"
    ],
    "countermeasure": [
      "p",
      "p",
      "p"
    ],
    "them": [
      "p"
    ],
    "exist": [
      "p"
    ],
    "designthis": [
      "p"
    ],
    "issue": [
      "p"
    ],
    "cannot": [
      "p"
    ],
    "identified": [
      "p"
    ],
    "code": [
      "p"
    ],
    "since": [
      "p",
      "p"
    ],
    "it’s": [
      "p"
    ],
    "method": [
      "p"
    ],
    "rather": [
      "p",
      "p"
    ],
    "than": [
      "p",
      "p"
    ],
    "implementation": [
      "p"
    ],
    "flaw": [
      "p"
    ],
    "most": [
      "p"
    ],
    "well": [
      "p",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "ciphertextthese": [
      "p"
    ],
    "two": [
      "p"
    ],
    "requirements": [
      "p",
      "p"
    ],
    "start": [
      "p",
      "ol",
      "li",
      "b"
    ],
    "developers": [
      "p"
    ],
    "encouraged": [
      "p"
    ],
    "public": [
      "p"
    ],
    "implementing": [
      "p"
    ],
    "own": [
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "innate": [
      "p",
      "p"
    ],
    "security": [
      "p"
    ],
    "best": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "recovering": [
      "p"
    ],
    "choosing": [
      "p"
    ],
    "large": [
      "p",
      "p"
    ],
    "enough": [
      "p",
      "p"
    ],
    "reduces": [
      "p"
    ],
    "likelihood": [
      "p"
    ],
    "found": [
      "p"
    ],
    "attackapplications": [
      "p"
    ],
    "implement": [
      "p"
    ],
    "cryptography": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "length": [
      "p"
    ],
    "measured": [
      "p"
    ],
    "bits": [
      "p"
    ],
    "determines": [
      "p"
    ],
    "combinations": [
      "p"
    ],
    "-or": [
      "p"
    ],
    "spacefor": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "64-bit": [
      "p"
    ],
    "has": [
      "p"
    ],
    "2^64possible": [
      "p"
    ],
    "combinationsthe": [
      "p"
    ],
    "larger": [
      "p"
    ],
    "more": [
      "p"
    ],
    "difficult": [
      "p"
    ],
    "construct": [
      "p",
      "ol",
      "li"
    ],
    "includes": [
      "p"
    ],
    "protect": [
      "p"
    ],
    "against": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "p"
    ],
    "variations": [
      "p"
    ],
    "os": [
      "p"
    ],
    "files": [
      "p"
    ],
    "recommended": [
      "p"
    ],
    "avoid": [
      "p"
    ],
    "available": [
      "p"
    ],
    "variation": [
      "p"
    ],
    "names": [
      "p"
    ],
    "“h0us3”": [
      "p"
    ],
    "“house”": [
      "p"
    ],
    "“3ric”": [
      "p"
    ],
    "“eric”": [
      "p"
    ],
    "must": [
      "p"
    ],
    "enforce": [
      "p"
    ],
    "strong-password": [
      "p"
    ],
    "policy": [
      "p"
    ],
    "complexity": [
      "p"
    ],
    "limit": [
      "p"
    ],
    "chances": [
      "p"
    ],
    "existing": [
      "p"
    ],
    "additional": [
      "p"
    ],
    "ways": [
      "p"
    ],
    "locking": [
      "p"
    ],
    "down": [
      "p"
    ],
    "accounts": [
      "p"
    ],
    "introducing": [
      "p"
    ],
    "time": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "delays": [
      "p",
      "p"
    ],
    "process": [
      "p"
    ],
    "asking": [
      "p"
    ],
    "human": [
      "p",
      "p"
    ],
    "interaction": [
      "p",
      "p"
    ],
    "proofs": [
      "p"
    ],
    "captchas": [
      "p"
    ],
    "secret": [
      "p"
    ],
    "questions": [
      "p"
    ],
    "executing": [
      "p",
      "p"
    ],
    "behaviors": [
      "p"
    ],
    "number": [
      "p"
    ],
    "failed": [
      "p"
    ],
    "attemptsnote": [
      "p"
    ],
    "now": [
      "p"
    ],
    "you’ve": [
      "p"
    ],
    "reviewed": [
      "p"
    ],
    "theoretical": [
      "p"
    ],
    "aspects": [
      "p"
    ],
    "focuses": [
      "p"
    ],
    "practical": [
      "p"
    ],
    "check": [
      "p",
      "li",
      "ol",
      "li",
      "ul",
      "li",
      "li"
    ],
    "if": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "your": [
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p",
      "p"
    ],
    "known-plaintext)": [
      "h2",
      "em"
    ],
    "known-plain": [
      "p"
    ],
    "text": [
      "p"
    ],
    "build": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "decryptions": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "discover": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "c": [
      "ol",
      "li",
      "i",
      "ol",
      "li",
      "i"
    ],
    "its": [
      "ol",
      "li"
    ],
    "corresponding": [
      "ol",
      "li"
    ],
    "p": [
      "ol",
      "ol",
      "li",
      "li",
      "i",
      "ul",
      "li",
      "i"
    ],
    "was": [
      "ol",
      "li"
    ],
    "k": [
      "ol",
      "li",
      "i"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "i",
      "li",
      "ul",
      "li",
      "i",
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "decryptc,": [
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "k).": [
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "iterate": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "though": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "all": [
      "ol",
      "li",
      "ol",
      "li",
      "ol",
      "li"
    ],
    "k’": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "i",
      "li",
      "i",
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "p’": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "i",
      "li",
      "i",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "i",
      "li",
      "i"
    ],
    "c,": [
      "ol",
      "li",
      "ul",
      "li",
      "i",
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "k’.check": [
      "ol",
      "li",
      "ul"
    ],
    "produced": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "current": [
      "ol",
      "li",
      "ul",
      "li",
      "ol",
      "li",
      "ul",
      "li"
    ],
    "recovers": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "p’=": [
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "p?": [
      "ol",
      "li",
      "ul",
      "li",
      "i"
    ],
    "k’.": [
      "li",
      "i",
      "li",
      "i"
    ],
    "expected": [
      "p",
      "p",
      "p",
      "p"
    ],
    "results": [
      "p",
      "p",
      "p",
      "b",
      "p"
    ],
    "reasonable": [
      "p",
      "p",
      "p"
    ],
    "amount": [
      "p",
      "p",
      "p"
    ],
    "ciphertext-only)": [
      "h2",
      "em"
    ],
    "k’.b.": [
      "ol",
      "li",
      "ul"
    ],
    "readable": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "b": [
      "li",
      "span",
      "span"
    ],
    "leverage": [
      "ol",
      "li"
    ],
    "download": [
      "ol",
      "li"
    ],
    "install": [
      "ol",
      "li"
    ],
    "brutus": [
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "http://www.hoobie.net/brutus/).": [
      "ol",
      "li"
    ],
    "other": [
      "ol",
      "li",
      "ol",
      "li"
    ],
    "tools": [
      "ol",
      "li"
    ],
    "run": [
      "ol",
      "li"
    ],
    "type": [
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "url": [
      "ol",
      "li"
    ],
    "pass": [
      "ol",
      "li",
      "b"
    ],
    "mode": [
      "ol",
      "li",
      "b"
    ],
    "dropdown": [
      "ol",
      "li"
    ],
    "select": [
      "ol",
      "li"
    ],
    "word": [
      "ol",
      "li"
    ],
    "browse": [
      "ol",
      "li"
    ],
    "click": [
      "ol",
      "li"
    ],
    "http//www.hoobie.net/brutus/": [
      "a"
    ],
    "result": [
      "p"
    ],
    "displays": [
      "p"
    ],
    "any": [
      "p"
    ],
    "matches": [
      "p"
    ],
    "positive": [
      "p",
      "b"
    ],
    "box": [
      "p"
    ],
    "hashed/encryption": [
      "ol",
      "li"
    ],
    "produce": [
      "ol",
      "li",
      "p"
    ],
    "des,": [
      "ol",
      "li"
    ],
    "aes": [
      "ol",
      "li",
      "p"
    ],
    "industry": [
      "ol",
      "li",
      "p"
    ],
    "standard.": [
      "ol",
      "li"
    ],
    "hashing/encryption": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "valuecheck": [
      "ol",
      "li",
      "ul"
    ],
    "equals": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "conclusions": [
      "h1",
      "span"
    ],
    "discovering": [
      "p"
    ],
    "predetermined": [
      "p"
    ],
    "keysthe": [
      "p"
    ],
    "trivial": [
      "p"
    ],
    "requires": [
      "p"
    ],
    "encryption": [
      "p"
    ],
    "place": [
      "p"
    ],
    "keysin": [
      "p"
    ],
    "aims": [
      "p"
    ],
    "circumventing": [
      "p"
    ],
    "valueseven": [
      "p"
    ],
    "systems": [
      "p"
    ],
    "procedures": [
      "p"
    ],
    "methods": [
      "p"
    ],
    "include": [
      "p"
    ],
    "standard": [
      "p"
    ],
    "strong": [
      "p"
    ],
    "account": [
      "p"
    ],
    "lockout": [
      "p"
    ],
    "policies": [
      "p"
    ],
    "proofstesting": [
      "p"
    ],
    "varies": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "whether": [
      "p"
    ],
    "vs": [
      "p"
    ],
    "credentials.": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Execute Test Cases",
      "Conclusions"
    ],
    "span": [
      "Summary",
      "",
      "",
      "",
      "",
      "Step 1: Understand Attack Scenarios",
      "",
      "Cryptographic Dictionary Attack",
      "",
      "",
      "",
      "",
      "Credentials Dictionary Attack",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "Encrypted Password Cracking",
      "",
      "",
      "Step 2: Analyze Causes and Countermeasures",
      "",
      "Attack causes",
      "",
      "",
      "",
      "",
      "Attack countermeasures",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "Step 3: Execute Test Cases",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "a.",
      "a.",
      "",
      "",
      "b.",
      "b.",
      "",
      "",
      "",
      "",
      "",
      "Conclusions",
      "",
      "",
      "",
      ""
    ],
    "p": [
      "A dictionary attack is a cryptographic attack where an attacker attempts to defeat cryptographic ciphers by trying numerous decryption keys or passphrases from a dictionary.Dictionaries are a list of possible keys and words to be tried while attempting to defeat the cryptographic cipher.Dictionary attacks are also applicable to applications that use credentials to log in their clients. The attack is similar to the cryptanalytic attack with the difference that credential dictionary attacks focus at finding a valid password to bypass authentication, so dictionaries consist of possible password values instead of key or passphrase values.",
      "Follow these steps to learn how to test for dictionary attacks:",
      "First, it is necessary to understand the different attack scenarios involved:",
      "",
      "In contrast to brute-force attacks, in which numerous keys and passphrases are created systematically by performing an exhaustive search over the possible key space, dictionary attacks only try the possibilities supplied by the dictionary.Thus, the attack always starts with the attacker building the dictionary list or file that will be used to defeat the cryptographic system.The attacker then finds a ciphertext to decrypt into a known (in case of known-plaintext attacks) or an unknown plaintext (in case of ciphertext-only attacks).The attack continues with the attacker passing each of the keys in the attack dictionary to the decryption function in order to find a valid decryption key.",
      "In detail:",
      "The credentials dictionary attack scenario is similar to the previous one with the difference that the attacker is trying to circumvent authentication instead of trying to break cryptography.Thus, the attacker’s goal is to find valid credentials like a valid password instead of finding a decryption key.The attack starts with the attacker selecting a valid username for the target user.Valid usernames can be leveraged using registration pages or by social engineering.Then the attack follows a similar flow of the previous scenario.The attacker builds of a dictionary containing a list of possible passwords.A resourceful attacker would also mutate the dictionary by substituting lettersby numbers or applying similar mutations.Then the attacker locates the authentication request such as one made by a log in web page.The attack continues with the attacker passing each of the passwords in the dictionary to the log in procedure in order to find a password that works and enables the attacker to log in to the target application.",
      "In detail:",
      "Sometimes the attacker’s goal is not to recover a valid key or password but an encrypted/hashed version of the target password.This scenario is common when attackers have access to a password file containing a set of password hashes like the UNIX password file in which passwords appear as DES hashes or when sniffing a network connection shows passwords being transferred after they have been hashed/encrypted.",
      "",
      "In detail:",
      "",
      "Next, it is necessary to understand what causes dictionary attacks and how to countermeasure them.",
      "Cryptographic dictionary attacks exist by design.This issue cannot be identified in code since it’s an attack method rather than an implementation flaw.  In most cases attackers will have access to the decryption function as well as the ciphertext.These are the only two requirements to start a dictionary attack and, since developers are encouraged to use a public cryptographic algorithm instead of implementing their own, this attack is innate in cryptographic applications which follow security best practices.",
      "",
      "For cryptanalytic dictionary attacks that target recovering a key rather than a password, choosing a large enough key reduces the likelihood of the decryption key being found by a dictionary attack.Applications that implement cryptography use keys of a certain length (measured in bits) that determines the possible keys combinations -or key space.For instance, a 64-bit key has 2^64possible key combinations.The larger the decryption key the more difficult to construct a dictionary that includes it.",
      "To protect against dictionary attacks on passwords, or similar variations such as attacks through OS password files, it is recommended to avoid using words available in dictionaries or common variation of dictionary words or names such as “h0us3” for “house” or “3ric” for “Eric”.   Applications must enforce a strong-password policy with complexity requirements that limit the chances of passwords existing in attack dictionaries. Additional ways to countermeasure credential dictionary attacks such as using locking down accounts, introducing time delays to the log in process, asking for human interaction proofs such as CAPTCHAs or secret questions, or executing different behaviors after a number of failed attempts.Note that these countermeasures are only applicable to credential dictionary attacks and not for cryptographic attacks.",
      "Now that you’ve reviewed the theoretical aspects of dictionary attacks this step focuses at executing practical test cases to check if your application is vulnerable to this attack.",
      "Follow these steps to test for dictionary attacks using a known-plain text attack:",
      "Expected results: the application is vulnerable if it is possible to find a valid key in a reasonable amount of time.",
      "Follow these steps to test for dictionary attacks using a ciphertext-only attack:",
      "Expected results: the application is vulnerable if it is possible to find a valid key in a reasonable amount of time.",
      "",
      "Follow these steps to test for dictionary attacks:",
      "Expected result: Brutus displays any matches in the Positive Authentication Results list box.",
      "",
      "Follow these steps to test for hashed/encrypted password cracking attacks:",
      "Expected results: the application is vulnerable if it is possible to find a valid password in a reasonable amount of time.",
      "",
      "Dictionary attacks focus at discovering a valid key from a predetermined list of possible keys.The attack is trivial is it only requires the attacker to discover the encryption algorithm in place and a ciphertext and iterate through the key dictionary trying to produce a readable plaintext from each of the possible keys.In the credentials scenario, the attack is similar but instead of trying to defeat a cryptographic procedure it aims at circumventing authentication by trying a dictionary of possible password values.Even though this attack is innate to cryptographic systems and authentication procedures, methods to countermeasure this attack include using a large enough key and an industry standard algorithm such as AES, a strong password, account lockout policies, time delays, or human interaction proofs.Testing varies depending on whether a plaintext is known or not and on the type of target system (cryptographic vs. credentials).",
      "",
      "",
      ""
    ],
    "ul": [
      "Step 1: Understand attack scenarios\n    Step 2: Analyze causes and countermeasures\n    Step 3: Execute test cases",
      "Cryptographic dictionary attack\n    Credentials dictionary attack\n    Encrypted password cracking attack",
      "hashes or encrypts the entry using the algorithm discovered in step 2.\n      compares the hashed/encrypted password with the target password from step 1.",
      "hashes or encrypts the entry using the algorithm discovered in step 2.\n      compares the hashed/encrypted password with the target password from step 1.",
      "P =   decrypt(C, K)).",
      "For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).Check if the plaintext P’ produced with the current key K’ recovers the plaintext discovered in the previous step:  P’= P?",
      "a.       For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).b.      Check if the plaintext P’ is readable.",
      "For each password in the dictionary, execute the hashing/encryption algorithm to hash/encrypt the current value.Check if the hashed/encrypted value equals the one from step 1."
    ],
    "li": [
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Execute test cases",
      "Cryptographic dictionary attack",
      "Credentials dictionary attack",
      "Encrypted password cracking attack",
      "The attacker builds an attack dictionary consisting of a list of possible keys/passphrases to use while trying to defeat the cryptographic system.",
      "The attacker finds a ciphertext to decipher.",
      "The attacker iterates through the attack dictionary trying to decrypt the ciphertext with each of the dictionary entries.",
      "The attacker selects the target client to attack and discovers the target’s username.",
      "The attacker constructs the attack dictionary consisting of possible password values.",
      "The attacker iterates through the attack dictionary trying to log in to the application with each of the dictionary entries.",
      "The attacker gains access to a password file or a network capture showing a hashed or encrypted version of the target password and the cryptographic algorithm used to hash/encrypt the value.",
      "The attacker constructs the attack dictionary consisting of possible password values.",
      "For each entry in the attack dictionary the attacker:",
      "hashes or encrypts the entry using the algorithm discovered in step 2.",
      "compares the hashed/encrypted password with the target password from step 1.",
      "Build a dictionary list containing a set of possible decryptions keys.",
      "Discover a ciphertext C and its corresponding plaintext P, as well as the decryption function that was used to decrypt the plaintext using the unknown decryption key K:   P =   decrypt(C, K)).",
      "P =   decrypt(C, K)).",
      "Iterate though all keys in the dictionary.  For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).Check if the plaintext P’ produced with the current key K’ recovers the plaintext discovered in the previous step:  P’= P?",
      "For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).",
      "Check if the plaintext P’ produced with the current key K’ recovers the plaintext discovered in the previous step:  P’= P?",
      "Build a dictionary list containing a set of possible decryptions keys.",
      "Discover a ciphertext C as well as the target decryption function.",
      "Iterate though all keys in the dictionary.  a.       For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).b.      Check if the plaintext P’ is readable.",
      "a.       For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).",
      "b.      Check if the plaintext P’ is readable.",
      "Leverage a valid username for the target client.",
      "Construct a dictionary file containing a list of possible passwords.",
      "Download and install Brutus (http://www.hoobie.net/brutus/).  Other password cracking tools can be used.",
      "Run Brutus.",
      "Type a target URL and authentication type.",
      "In the Pass Mode dropdown list, select Word List.",
      "Browse for the dictionary file created in step 2.",
      "Click Start.",
      "Discover a hashed/encryption password of a known username.",
      "Build a dictionary list containing a set of possible passwords",
      "Discover the cryptographic algorithm used to produce the hashed/encrypted password (DES, AES, or other industry standard).",
      "Iterate though all values in the dictionary.  For each password in the dictionary, execute the hashing/encryption algorithm to hash/encrypt the current value.Check if the hashed/encrypted value equals the one from step 1.",
      "For each password in the dictionary, execute the hashing/encryption algorithm to hash/encrypt the current value.",
      "Check if the hashed/encrypted value equals the one from step 1."
    ],
    "b": [
      "",
      "Pass Mode",
      "Start",
      "Positive Authentication Results",
      "",
      "",
      ""
    ],
    "i": [
      "",
      "credential",
      "C",
      "P",
      "K",
      "P =   decrypt(C, K)).",
      "K’",
      "P’ = decrypt (C, K’).",
      "P’",
      "K’",
      "P’= P?",
      "C",
      "K’",
      "P’ = decrypt (C, K’).",
      "P’",
      "",
      "",
      ""
    ],
    "h2": [
      "Cryptographic Dictionary Attack",
      "Credentials Dictionary Attack",
      "Encrypted Password Cracking",
      "Attack causes",
      "Attack countermeasures",
      "Test for Cryptographic Dictionary Attack (Known-Plaintext)",
      "Test for Cryptographic Dictionary Attack (Ciphertext-Only)",
      "Test for Credential Dictionary Attacks",
      "Test for Hashed/Encrypted Password Cracking"
    ],
    "em": [
      "Cryptographic Dictionary Attack",
      "Credentials Dictionary Attack",
      "Encrypted Password Cracking",
      "Attack causes",
      "Attack countermeasures",
      "Test for Cryptographic Dictionary Attack (Known-Plaintext)",
      "",
      "Test for Cryptographic Dictionary Attack (Ciphertext-Only)",
      "Test for Credential Dictionary Attacks",
      "Test for Hashed/Encrypted Password Cracking"
    ],
    "ol": [
      "The attacker builds an attack dictionary consisting of a list of possible keys/passphrases to use while trying to defeat the cryptographic system.\n    The attacker finds a ciphertext to decipher.  \n    The attacker iterates through the attack dictionary trying to decrypt the ciphertext with each of the dictionary entries.",
      "The attacker selects the target client to attack and discovers the target’s username.\n    The attacker constructs the attack dictionary consisting of possible password values.\n    The attacker iterates through the attack dictionary trying to log in to the application with each of the dictionary entries.",
      "The attacker gains access to a password file or a network capture showing a hashed or encrypted version of the target password and the cryptographic algorithm used to hash/encrypt the value.\n    The attacker constructs the attack dictionary consisting of possible password values.\n    For each entry in the attack dictionary the attacker:",
      "Build a dictionary list containing a set of possible decryptions keys.\n    Discover a ciphertext C and its corresponding plaintext P, as well as the decryption function that was used to decrypt the plaintext using the unknown decryption key K:   P =   decrypt(C, K)).\n    Iterate though all keys in the dictionary.  For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).Check if the plaintext P’ produced with the current key K’ recovers the plaintext discovered in the previous step:  P’= P?",
      "Build a dictionary list containing a set of possible decryptions keys.\n    Discover a ciphertext C as well as the target decryption function.\n    Iterate though all keys in the dictionary.  a.       For each key in the dictionary K’, execute the decryption algorithm using the ciphertext discovered in the previous step:  P’ = decrypt (C, K’).b.      Check if the plaintext P’ is readable.",
      "Leverage a valid username for the target client.\n    Construct a dictionary file containing a list of possible passwords.\n    Download and install Brutus (http://www.hoobie.net/brutus/).  Other password cracking tools can be used.\n    Run Brutus.\n    Type a target URL and authentication type.\n    In the Pass Mode dropdown list, select Word List.\n    Browse for the dictionary file created in step 2.\n    Click Start.",
      "Discover a hashed/encryption password of a known username.\n    Build a dictionary list containing a set of possible passwords\n    Discover the cryptographic algorithm used to produce the hashed/encrypted password (DES, AES, or other industry standard).\n    Iterate though all values in the dictionary.  For each password in the dictionary, execute the hashing/encryption algorithm to hash/encrypt the current value.Check if the hashed/encrypted value equals the one from step 1."
    ],
    "br": [
      ""
    ],
    "a": [
      "http://www.hoobie.net/brutus/"
    ]
  },
  "links": [
    {
      "href": "http://www.hoobie.net/brutus/",
      "text": "http://www.hoobie.net/brutus/"
    }
  ],
  "html": "<h1>\n    <span>Summary</span>\n  </h1>\n  <p>A dictionary attack is a cryptographic attack where an attacker attempts to defeat cryptographic ciphers by trying numerous decryption keys or passphrases from a dictionary.<span></span>Dictionaries are a list of possible keys and words to be tried while attempting to defeat the cryptographic cipher.<span></span><span></span>Dictionary attacks are also applicable to applications that use credentials to log in their clients. <span></span>The attack is similar to the cryptanalytic attack with the difference that credential dictionary attacks focus at finding a valid password to bypass authentication, so dictionaries consist of possible password values instead of key or passphrase values.</p>\n  <p>Follow these steps to learn how to test for dictionary attacks:</p>\n  <ul>\n    <li>Step 1: Understand attack scenarios</li>\n    <li>Step 2: Analyze causes and countermeasures</li>\n    <li>Step 3: Execute test cases</li>\n  </ul>\n  <h1>\n    <span>Step 1: Understand Attack Scenarios </span>\n  </h1>\n  <p>First, it is necessary to understand the different attack scenarios involved:</p>\n  <ul>\n    <li>Cryptographic dictionary attack</li>\n    <li>Credentials dictionary attack</li>\n    <li>Encrypted password cracking attack</li>\n  </ul>\n  <p>\n    <b>\n      <i>\n        <span>\n        </span>\n      </i>\n    </b>\n  </p>\n  <h2>\n    <span>\n      <em>Cryptographic Dictionary Attack</em>\n    </span>\n  </h2>\n  <p>In contrast to brute-force attacks, in which numerous keys and passphrases are created systematically by performing an exhaustive search over the possible key space, dictionary attacks only try the possibilities supplied by the dictionary.<span></span>Thus, the attack always starts with the attacker building the dictionary list or file that will be used to defeat the cryptographic system.<span></span>The attacker then finds a ciphertext to decrypt into a known (in case of known-plaintext attacks) or an unknown plaintext (in case of ciphertext-only attacks).<span></span>The attack continues with the attacker passing each of the keys in the attack dictionary to the decryption function in order to find a valid decryption key.</p>\n  <p>In detail:</p>\n  <ol>\n    <li>The attacker builds an attack dictionary consisting of a list of possible keys/passphrases to use while trying to defeat the cryptographic system.</li>\n    <li>The attacker finds a ciphertext to decipher.<span>&nbsp; </span></li>\n    <li>The attacker iterates through the attack dictionary trying to decrypt the ciphertext with each of the dictionary entries.</li>\n  </ol>\n  <h2>\n    <span>\n      <em>Credentials Dictionary Attack</em>\n    </span>\n  </h2>\n  <p>The credentials dictionary attack scenario is similar to the previous one with the difference that the attacker is trying to circumvent authentication instead of trying to break cryptography.<span></span>Thus, the attacker’s goal is to find valid credentials like a valid password instead of finding a decryption key.<span></span>The attack starts with the attacker selecting a valid username for the target user.<span></span>Valid usernames can be leveraged using registration pages or by social engineering.<span></span>Then the attack follows a similar flow of the previous scenario.<span></span>The attacker builds of a dictionary containing a list of possible passwords.<span></span>A resourceful attacker would also mutate the dictionary by substituting letters<span></span>by numbers or applying similar mutations.<span></span>Then the attacker locates the authentication request such as one made by a log in web page.<span></span>The attack continues with the attacker passing each of the passwords in the dictionary to the log in procedure in order to find a password that works and enables the attacker to log in to the target application.<span>&nbsp; </span></p>\n  <p>In detail:</p>\n  <ol>\n    <li>The attacker selects the target client to attack and discovers the target’s username.</li>\n    <li>The attacker constructs the attack dictionary consisting of possible password values.</li>\n    <li>The attacker iterates through the attack dictionary trying to log in to the application with each of the dictionary entries.</li>\n  </ol>\n  <h2>\n    <span>\n      <em>Encrypted Password Cracking</em>\n    </span>\n  </h2>\n  <p>Sometimes the attacker’s goal is not to recover a valid key or password but an encrypted/hashed version of the target password.<span></span>This scenario is common when attackers have access to a password file containing a set of password hashes like the UNIX password file in which passwords appear as DES hashes or when sniffing a network connection shows passwords being transferred after they have been hashed/encrypted.<span>&nbsp;&nbsp; </span></p>\n  <p>&nbsp;</p>\n  <p>In detail:</p>\n  <ol>\n    <li>The attacker gains access to a password file or a network capture showing a hashed or encrypted version of the target password and the cryptographic algorithm used to hash/encrypt the value.</li>\n    <li>The attacker constructs the attack dictionary consisting of possible password values.</li>\n    <li>For each entry in the attack dictionary the attacker:</li>\n  </ol>\n  <ul>\n    <ul>\n      <li>hashes or encrypts the entry using the algorithm discovered in step 2.</li>\n      <li>compares the hashed/encrypted password with the target password from step 1.</li>\n    </ul>\n  </ul>\n  <p>&nbsp;</p>\n  <h1>\n    <span>Step 2: Analyze Causes and Countermeasures</span>\n  </h1>\n  <p>Next, it is necessary to understand what causes dictionary attacks and how to countermeasure them.<span>&nbsp; </span></p>\n  <h2>\n    <span>\n      <em>Attack causes</em>\n    </span>\n  </h2>\n  <p>Cryptographic dictionary attacks exist by design.<span></span>This issue cannot be identified in code since it’s an attack method rather than an implementation flaw.<span>&nbsp; </span>In most cases attackers will have access to the decryption function as well as the ciphertext.<span></span>These are the only two requirements to start a dictionary attack and, since developers are encouraged to use a public cryptographic algorithm instead of implementing their own, this attack is innate in cryptographic applications which follow security best practices.<span>&nbsp; </span></p>\n  <p>&nbsp;</p>\n  <h2>\n    <span>\n      <em>Attack countermeasures</em>\n    </span>\n  </h2>\n  <p>For cryptanalytic dictionary attacks that target recovering a key rather than a password, choosing a large enough key reduces the likelihood of the decryption key being found by a dictionary attack.<span></span>Applications that implement cryptography use keys of a certain length (measured in bits) that determines the possible keys combinations -or key space.<span></span>For instance, a 64-bit key has 2^64possible key combinations.<span></span>The larger the decryption key the more difficult to construct a dictionary that includes it.<span>&nbsp; </span></p>\n  <p>To protect against dictionary attacks on passwords, or similar variations such as attacks through OS password files, it is recommended to avoid using words available in dictionaries or common variation of dictionary words or names such as “h0us3” for “house” or “3ric” for “Eric”.<span>&nbsp;&nbsp; </span>Applications must enforce a strong-password policy with complexity requirements that limit the chances of passwords existing in attack dictionaries. Additional ways to countermeasure <i>credential</i> dictionary attacks such as using locking down accounts, introducing time delays to the log in process, asking for human interaction proofs such as CAPTCHAs or secret questions, or executing different behaviors after a number of failed attempts.<span></span>Note that these countermeasures are only applicable to credential dictionary attacks and not for cryptographic attacks.<span></span><br /></p>\n  <h1>\n    <span>Step 3: Execute Test Cases</span>\n  </h1>\n  <p>Now that you’ve reviewed the theoretical aspects of dictionary attacks this step focuses at executing practical test cases to check if your application is vulnerable to this attack.</p>\n  <h2>\n    <em>Test for Cryptographic Dictionary Attack (Known-Plaintext)</em>\n  </h2>\n  <p>Follow these steps to test for dictionary attacks using a known-plain text attack:</p>\n  <ol>\n    <li>Build a dictionary list containing a set of possible decryptions keys.</li>\n    <li>Discover a ciphertext <i>C </i>and its corresponding plaintext <i>P</i>, as well as the decryption function that was used to decrypt the plaintext using the unknown decryption key <i>K</i>:<span>&nbsp; </span><ul><li><i><span>&nbsp;</span>P =<span>&nbsp; </span><span>&nbsp;</span>decrypt(C, K)).</i></li></ul></li>\n    <li>Iterate though all keys in the dictionary.<span>&nbsp; </span><ul><li>For each key in the dictionary <i>K’</i>, execute the decryption algorithm using the ciphertext discovered in the previous step:<span>&nbsp; </span><i>P’ = decrypt (C, K’).</i></li><li>Check if the plaintext <i>P’</i> produced with the current key <i>K’</i> recovers the plaintext discovered in the previous step:<span>&nbsp; </span><i>P’= P?</i><span>&nbsp;&nbsp; </span></li></ul></li>\n  </ol>\n  <p>Expected results: the application is vulnerable if it is possible to find a valid key in a reasonable amount of time.<em>&nbsp;</em></p>\n  <h2>\n    <em>Test for Cryptographic Dictionary Attack (Ciphertext-Only)</em>\n  </h2>\n  <p>Follow these steps to test for dictionary attacks using a ciphertext-only attack:</p>\n  <ol>\n    <li>Build a dictionary list containing a set of possible decryptions keys.</li>\n    <li>Discover a ciphertext <i>C </i>as well as the target decryption function.</li>\n    <li>Iterate though all keys in the dictionary.<span>&nbsp; </span><ul><li><span><span>a.<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span>For each key in the dictionary <i>K’</i>, execute the decryption algorithm using the ciphertext discovered in the previous step:<span>&nbsp; </span><i>P’ = decrypt (C, K’).</i></li><li><span><span>b.<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span>Check if the plaintext <i>P’</i> is readable.<span>&nbsp;&nbsp; </span></li></ul></li>\n  </ol>\n  <p>Expected results: the application is vulnerable if it is possible to find a valid key in a reasonable amount of time.</p>\n  <p>&nbsp;</p>\n  <h2>\n    <em>Test for Credential Dictionary Attacks</em>\n  </h2>\n  <p>Follow these steps to test for dictionary attacks:</p>\n  <ol>\n    <li>Leverage a valid username for the target client.</li>\n    <li>Construct a dictionary file containing a list of possible passwords.</li>\n    <li>Download and install Brutus (<a href=\"http://www.hoobie.net/brutus/\">http://www.hoobie.net/brutus/</a>).<span>&nbsp; </span>Other password cracking tools can be used.</li>\n    <li>Run Brutus.</li>\n    <li>Type a target URL and authentication type.</li>\n    <li>In the <b>Pass Mode</b> dropdown list, select Word List.</li>\n    <li>Browse for the dictionary file created in step 2.</li>\n    <li>Click <b>Start</b>.</li>\n  </ol>\n  <p>Expected result: Brutus displays any matches in the<b> Positive Authentication Results</b> list box.&nbsp;<b><i></i></b></p>\n  <p>\n    <b>\n      <i>&nbsp;</i>\n    </b>\n  </p>\n  <h2>\n    <em>Test for Hashed/Encrypted Password Cracking</em>\n  </h2>\n  <p>Follow these steps to test for hashed/encrypted password cracking attacks:</p>\n  <ol>\n    <li>Discover a hashed/encryption password of a known username.</li>\n    <li>Build a dictionary list containing a set of possible passwords</li>\n    <li>Discover the cryptographic algorithm used to produce the hashed/encrypted password (DES, AES, or other industry standard).</li>\n    <li>Iterate though all values in the dictionary.<span>&nbsp; </span><ul><li>For each password in the dictionary, execute the hashing/encryption algorithm to hash/encrypt the current value.</li><li>Check if the hashed/encrypted value equals the one from step 1.<span>&nbsp;&nbsp; </span></li></ul></li>\n  </ol>\n  <p>Expected results: the application is vulnerable if it is possible to find a valid password in a reasonable amount of time.</p>\n  <p>\n    <b>\n      <i>&nbsp;</i>\n    </b>\n  </p>\n  <h1>\n    <span>Conclusions</span>\n  </h1>\n  <p>Dictionary attacks focus at discovering a valid key from a predetermined list of possible keys.<span></span>The attack is trivial is it only requires the attacker to discover the encryption algorithm in place and a ciphertext and iterate through the key dictionary trying to produce a readable plaintext from each of the possible keys.<span></span>In the credentials scenario, the attack is similar but instead of trying to defeat a cryptographic procedure it aims at circumventing authentication by trying a dictionary of possible password values.<span></span>Even though this attack is innate to cryptographic systems and authentication procedures, methods to countermeasure this attack include using a large enough key and an industry standard algorithm such as AES, a strong password, account lockout policies, time delays, or human interaction proofs.<span></span>Testing varies depending on whether a plaintext is known or not and on the type of target system (cryptographic vs. credentials).</p>\n  <p />\n  <p>&nbsp;</p>\n  <p />"
}