{
  "id": "00000000-0000-0000-0000-000000736a21",
  "checksum": "48fb83cf263ba9b1e3d9be170bd345f9ca2e39bf",
  "words": {
    "1035": [
      "ol",
      "li"
    ],
    "6455": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "html5": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "javascript": [
      "ul",
      "li",
      "ol",
      "li"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a"
    ],
    "when": [
      "p",
      "h2"
    ],
    "processing": [
      "p"
    ],
    "events": [
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "onmessage": [
      "p",
      "tt",
      "ol",
      "li",
      "strong",
      "tt"
    ],
    "using": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "websocket": [
      "p",
      "h2",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "h2",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "always": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "check": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "a",
      "a",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "origin": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "attribute": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p",
      "ol",
      "li"
    ],
    "message": [
      "p",
      "p",
      "ol",
      "li",
      "strong",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a",
      "li",
      "a"
    ],
    "coming": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "from": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "source": [
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "expect": [
      "p"
    ],
    "why": [
      "h2"
    ],
    "if": [
      "p",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "not": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "messageevent": [
      "p"
    ],
    "confirm": [
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "p"
    ],
    "safe": [
      "p"
    ],
    "domain": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "p"
    ],
    "your": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong"
    ],
    "application": [
      "p",
      "p"
    ],
    "may": [
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "p"
    ],
    "open": [
      "p"
    ],
    "attacks": [
      "p",
      "p"
    ],
    "these": [
      "p"
    ],
    "in": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "form": [
      "p"
    ],
    "messages": [
      "p",
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a",
      "title"
    ],
    "sent": [
      "p",
      "p",
      "p"
    ],
    "other": [
      "p"
    ],
    "servers": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "harmful": [
      "p"
    ],
    "verify": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "incoming": [
      "p"
    ],
    "how": [
      "h2"
    ],
    "technique": [
      "p"
    ],
    "for": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong"
    ],
    "checking": [
      "p",
      "p"
    ],
    "depends": [
      "p"
    ],
    "on": [
      "p"
    ],
    "whether": [
      "p"
    ],
    "would": [
      "p"
    ],
    "like": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "specific": [
      "p",
      "p",
      "ol",
      "li",
      "strong"
    ],
    "server": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "strong"
    ],
    "or": [
      "p",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "p"
    ],
    "expected": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "p",
      "p"
    ],
    "against": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "name": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "use": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "===": [
      "ol",
      "li",
      "tt"
    ],
    "operator": [
      "ol",
      "li"
    ],
    "equality": [
      "ol",
      "li"
    ],
    "between": [
      "ol",
      "li"
    ],
    "value": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "one": [
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li"
    ],
    "more": [
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li"
    ],
    "domains": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "names).": [
      "ol",
      "li",
      "strong"
    ],
    "regular": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "expression": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "strong",
      "strong",
      "p"
    ],
    "provide": [
      "ol",
      "li"
    ],
    "wildcard-type": [
      "ol",
      "li"
    ],
    "functionality": [
      "ol",
      "li"
    ],
    "so": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "continue": [
      "ol",
      "li"
    ],
    "with": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "p",
      "p"
    ],
    "steps": [
      "ol",
      "li"
    ],
    "3-9": [
      "ol",
      "li"
    ],
    "below": [
      "ol",
      "li"
    ],
    "identify": [
      "ol",
      "li",
      "strong"
    ],
    "allowed": [
      "ol",
      "ol",
      "li",
      "strong",
      "li"
    ],
    "which": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li"
    ],
    "accepted": [
      "ol",
      "li",
      "strong"
    ],
    "white": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "list": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "approach": [
      "ol",
      "li"
    ],
    "gather": [
      "ol",
      "li"
    ],
    "valid": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "strict": [
      "ol",
      "li"
    ],
    "possible": [
      "ol",
      "li"
    ],
    "include": [
      "ol",
      "li"
    ],
    "only": [
      "ol",
      "li"
    ],
    "want": [
      "ol",
      "li"
    ],
    "process": [
      "ol",
      "li"
    ],
    "create": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "function": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "li",
      "strong",
      "p",
      "pre"
    ],
    "validating": [
      "ol",
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "centralize": [
      "ol",
      "li",
      "strong"
    ],
    "logic": [
      "ol",
      "li",
      "strong"
    ],
    "creating": [
      "ol",
      "li"
    ],
    "also": [
      "ol",
      "li"
    ],
    "allows": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "test": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "easily": [
      "ol",
      "li"
    ],
    "length": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "before": [
      "ol",
      "li",
      "strong"
    ],
    "property": [
      "ol",
      "li"
    ],
    "ensure": [
      "ol",
      "li"
    ],
    "size": [
      "ol",
      "li"
    ],
    "large": [
      "ol",
      "li"
    ],
    "cause": [
      "ol",
      "li"
    ],
    "regex": [
      "ol",
      "li"
    ],
    "dos": [
      "ol",
      "li"
    ],
    "build": [
      "ol",
      "li",
      "strong"
    ],
    "look": [
      "ol",
      "li"
    ],
    "this": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "tests": [
      "ol",
      "li"
    ],
    "host": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "names": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "internet": [
      "ol",
      "li"
    ],
    "engineering": [
      "ol",
      "li"
    ],
    "task": [
      "ol",
      "li"
    ],
    "force": [
      "ol",
      "li"
    ],
    "request": [
      "ol",
      "li"
    ],
    "comments": [
      "ol",
      "li"
    ],
    "^https?\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$": [
      "ol",
      "li",
      "tt"
    ],
    "both": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "http": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "over": [
      "ol",
      "li"
    ],
    "secure": [
      "ol",
      "li"
    ],
    "sockets": [
      "ol",
      "li"
    ],
    "layer": [
      "ol",
      "li"
    ],
    "https).": [
      "ol",
      "li"
    ],
    "lists": [
      "ol",
      "li"
    ],
    "characters": [
      "ol",
      "li"
    ],
    "url": [
      "ol",
      "li"
    ],
    "question": [
      "ol",
      "li"
    ],
    "mark": [
      "ol",
      "li"
    ],
    "?]": [
      "ol",
      "li"
    ],
    "qualifier": [
      "ol",
      "li"
    ],
    "matches": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li"
    ],
    "previous": [
      "ol",
      "li"
    ],
    "characters)": [
      "ol",
      "li"
    ],
    "once": [
      "ol",
      "li"
    ],
    "at": [
      "ol",
      "li"
    ],
    "most": [
      "ol",
      "li"
    ],
    "[a-z][-a-z0-9]+[a-z0-9]\\.)*": [
      "ol",
      "li",
      "tt"
    ],
    "match": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "http//myserver.example.com": [
      "ol",
      "li",
      "tt"
    ],
    "well": [
      "ol",
      "li"
    ],
    "http//www.mysubdomain.example.com": [
      "ol",
      "li",
      "tt"
    ],
    "inside": [
      "ol",
      "li",
      "strong"
    ],
    "new": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "tt",
      "pre",
      "pre",
      "pre"
    ],
    "object": [
      "ol",
      "ol",
      "li",
      "strong",
      "li",
      "strong"
    ],
    "pass": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "regexp": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "constructor": [
      "ol",
      "li"
    ],
    "shown": [
      "ol",
      "li"
    ],
    "here": [
      "ol",
      "li"
    ],
    "var": [
      "ol",
      "li",
      "tt",
      "pre"
    ],
    "re": [
      "ol",
      "li",
      "tt"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "tt",
      "li",
      "tt",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "regexp/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);": [
      "ol",
      "li",
      "tt"
    ],
    "test)": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "method": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "p"
    ],
    "can": [
      "ol",
      "li"
    ],
    "used": [
      "ol",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "return": [
      "ol",
      "li",
      "tt"
    ],
    "patterntest(origin);": [
      "ol",
      "li",
      "tt"
    ],
    "call": [
      "ol",
      "li",
      "strong"
    ],
    "event": [
      "ol",
      "li",
      "strong",
      "p"
    ],
    "handler": [
      "ol",
      "li",
      "strong"
    ],
    "websocketonmessage": [
      "ol",
      "li",
      "tt"
    ],
    "functionevent)": [
      "ol",
      "li",
      "tt",
      "pre",
      "pre"
    ],
    "..": [
      "ol",
      "li",
      "tt"
    ],
    "thoroughly": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "positive": [
      "ol",
      "li"
    ],
    "negative": [
      "ol",
      "li"
    ],
    "properly": [
      "ol",
      "li",
      "p"
    ],
    "handles": [
      "ol",
      "li",
      "p"
    ],
    "validation": [
      "ol",
      "li"
    ],
    "problem": [
      "h2"
    ],
    "example": [
      "h2",
      "p",
      "h2"
    ],
    "following": [
      "p",
      "p"
    ],
    "without": [
      "p"
    ],
    "could": [
      "p"
    ],
    "almost": [
      "p"
    ],
    "anywhere": [
      "p"
    ],
    "including": [
      "p"
    ],
    "an": [
      "p",
      "p"
    ],
    "attacker": [
      "p"
    ],
    "sending": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "content": [
      "p"
    ],
    "socket": [
      "pre",
      "pre"
    ],
    "websocket\"ws://echo.websocket.org\");\n\nsocket.onmessage": [
      "pre",
      "pre"
    ],
    "{var": [
      "pre",
      "pre"
    ],
    "mydiv": [
      "pre",
      "pre"
    ],
    "documentgetelementbyid(\"div1\");\nmydiv.innerhtml": [
      "pre"
    ],
    "eventdata;\n}": [
      "pre",
      "pre"
    ],
    "solution": [
      "h2"
    ],
    "checks": [
      "p"
    ],
    "custom": [
      "p"
    ],
    "verifies": [
      "p"
    ],
    "has": [
      "p"
    ],
    "been": [
      "p"
    ],
    "isoriginvalidorigin)": [
      "pre"
    ],
    "pattern": [
      "pre"
    ],
    "regexp/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);\n\treturn": [
      "pre"
    ],
    "patterntest(origin);\n}\nvar": [
      "pre"
    ],
    "{\tif": [
      "pre"
    ],
    "isoriginvalid(event.origin))": [
      "pre"
    ],
    "{\tvar": [
      "pre"
    ],
    "documentgetelementbyid(\"div1\");\n\tmydiv.innerhtml": [
      "pre"
    ],
    "isoriginvalid)": [
      "p",
      "tt"
    ],
    "ensures": [
      "p"
    ],
    "string": [
      "p"
    ],
    "starts": [
      "p"
    ],
    "http//": [
      "p",
      "tt"
    ],
    "https//": [
      "p",
      "tt"
    ],
    "ends": [
      "p"
    ],
    "examplecom,": [
      "p"
    ],
    "case": [
      "p"
    ],
    "represents": [
      "p"
    ],
    "guidelines": [
      "h2"
    ],
    "validate": [
      "ul",
      "li",
      "a"
    ],
    "data": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "websockets": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "header": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "handshake": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "tls/ssl": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "encrypt": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "connections": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "latest": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "rfc": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "standard": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "tunnel": [
      "ul",
      "li",
      "a"
    ],
    "tcp": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "via": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "checklist": [
      "h2"
    ],
    "items": [
      "h2"
    ],
    "validated": [
      "ul",
      "li",
      "a"
    ],
    "checked": [
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "tunneled": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "WebSocket Guidelines",
      "WebSocket Checklist Items"
    ],
    "ul": [
      "HTML5 and JavaScript",
      "Validate Data Coming from WebSockets\n Check the Origin Header in the WebSocket Handshake\n Use TLS/SSL to Encrypt WebSocket Connections\n Check the Origin Attribute of WebSocket Messages\n Use the Latest WebSocket RFC 6455 Standard\n Do Not Tunnel TCP via WebSockets",
      "Data Coming from WebSockets Is Validated\n The Origin Header in WebSocket Handshake is Checked\n TLS/SSL is Used to Encrypt WebSocket Connections\n The Origin Attribute of WebSocket Messages Is Checked\n Latest RFC 6455 Standard is Used\n TCP Is Not Tunneled via WebSockets"
    ],
    "li": [
      "HTML5 and JavaScript",
      "If the origin is expected to be a specific server, check it against the server name. Use the JavaScript === operator to verify equality between the expected server name and the value of the origin attribute.",
      "If the origin is expected to be from one or more domains, check it against the domain name(s). Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.",
      "Identify the allowed domains from which a message will be accepted. Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.",
      "Create a function for validating the domains to centralize the logic. Creating a function also allows you to test the code more easily.",
      "Check the length of the domain before validating it. Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS.",
      "Build the regular expression for validating your domains. The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035:  ^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$ . This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression ([a-z][-a-z0-9]+[a-z0-9]\\.)* will match one or more host names, so  http://myserver.example.com  as well as  http://www.mysubdomain.example.com  will match.",
      "Inside the new function, create a regular expression object with your expression. Pass the expression to the RegExp constructor, as shown here:  var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);",
      "Use the test() method of the RegExp object to verify that the origin attribute matches. The test() method can be used like this:  return pattern.test(origin);",
      "Call the function from your onmessage event handler. Pass the value of the origin attribute to your function:  webSocket.onmessage = function(event) ...",
      "Test thoroughly. Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation.",
      "Validate Data Coming from WebSockets",
      "Check the Origin Header in the WebSocket Handshake",
      "Use TLS/SSL to Encrypt WebSocket Connections",
      "Check the Origin Attribute of WebSocket Messages",
      "Use the Latest WebSocket RFC 6455 Standard",
      "Do Not Tunnel TCP via WebSockets",
      "Data Coming from WebSockets Is Validated",
      "The Origin Header in WebSocket Handshake is Checked",
      "TLS/SSL is Used to Encrypt WebSocket Connections",
      "The Origin Attribute of WebSocket Messages Is Checked",
      "Latest RFC 6455 Standard is Used",
      "TCP Is Not Tunneled via WebSockets"
    ],
    "p": [
      "When processing events such as onmessage using WebSocket, always check the origin attribute to make sure the message is coming from the source you expect.",
      "If you do not check the origin of the MessageEvent to confirm that it is coming from a safe domain, your application may be open to attacks. These attacks may be in the form of messages sent from other servers and may contain messages harmful to your application.",
      "Always verify the origin attribute of the incoming message.",
      "The technique for checking the origin attribute depends on whether you would like to verify a specific server or a specific domain.",
      "The following code handles the event message without checking the origin attribute. In this example, the message could be sent from almost anywhere, including an attacker sending malicious content:",
      "",
      "The following code properly checks the origin attribute using a custom function that verifies that the message has been sent from an expected source:",
      "The expression in the isOriginValid() method ensures that the origin string starts with  http://  or  https://  and ends with example.com, which in this case represents the expected domain."
    ],
    "tt": [
      "onmessage",
      "===",
      "^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$",
      "([a-z][-a-z0-9]+[a-z0-9]\\.)*",
      "http://myserver.example.com",
      "http://www.mysubdomain.example.com",
      "var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);",
      "return pattern.test(origin);",
      "onmessage",
      "webSocket.onmessage = function(event) ...",
      "isOriginValid()",
      "http://",
      "https://"
    ],
    "ol": [
      "If the origin is expected to be a specific server, check it against the server name. Use the JavaScript === operator to verify equality between the expected server name and the value of the origin attribute. \n If the origin is expected to be from one or more domains, check it against the domain name(s). Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.\n Identify the allowed domains from which a message will be accepted. Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.\n Create a function for validating the domains to centralize the logic. Creating a function also allows you to test the code more easily.\n Check the length of the domain before validating it. Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS. \n Build the regular expression for validating your domains. The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035:  ^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$ . This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression ([a-z][-a-z0-9]+[a-z0-9]\\.)* will match one or more host names, so  http://myserver.example.com  as well as  http://www.mysubdomain.example.com  will match.\n Inside the new function, create a regular expression object with your expression. Pass the expression to the RegExp constructor, as shown here:  var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/); \n Use the test() method of the RegExp object to verify that the origin attribute matches. The test() method can be used like this:  return pattern.test(origin); \n Call the function from your onmessage event handler. Pass the value of the origin attribute to your function:  webSocket.onmessage = function(event) ... \n Test thoroughly. Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation."
    ],
    "strong": [
      "If the origin is expected to be a specific server, check it against the server name.",
      "If the origin is expected to be from one or more domains, check it against the domain name(s).",
      "Identify the allowed domains from which a message will be accepted.",
      "Create a function for validating the domains to centralize the logic.",
      "Check the length of the domain before validating it.",
      "Build the regular expression for validating your domains.",
      "Inside the new function, create a regular expression object with your expression.",
      "Use the test() method of the RegExp object to verify that the origin attribute matches.",
      "Call the function from your onmessage event handler.",
      "Test thoroughly."
    ],
    "pre": [
      "var socket = new WebSocket(\"ws://echo.websocket.org\");\n\nsocket.onmessage = function(event) {\nvar mydiv = document.getElementById(\"div1\");\nmydiv.innerHTML = event.data;\n}",
      "function isOriginValid(origin) {\nvar pattern = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);\n\treturn pattern.test(origin);\n}\nvar socket = new WebSocket(\"ws://echo.websocket.org\");\n\nsocket.onmessage = function(event) {\n\tif (isOriginValid(event.origin)) {\n\tvar mydiv = document.getElementById(\"div1\");\n\tmydiv.innerHTML = event.data;\n}"
    ],
    "br": [
      ""
    ],
    "a": [
      "Validate Data Coming from WebSockets",
      "Check the Origin Header in the WebSocket Handshake",
      "Use TLS/SSL to Encrypt WebSocket Connections",
      "Check the Origin Attribute of WebSocket Messages",
      "Use the Latest WebSocket RFC 6455 Standard",
      "Do Not Tunnel TCP via WebSockets",
      "Data Coming from WebSockets Is Validated",
      "The Origin Header in WebSocket Handshake is Checked",
      "TLS/SSL is Used to Encrypt WebSocket Connections",
      "The Origin Attribute of WebSocket Messages Is Checked",
      "Latest RFC 6455 Standard is Used",
      "TCP Is Not Tunneled via WebSockets"
    ]
  },
  "links": [
    {
      "href": "00000000-0000-0000-0000-000000869806",
      "text": "Validate Data Coming from WebSockets"
    },
    {
      "href": "00000000-0000-0000-0000-00000093dea4",
      "text": "Check the Origin Header in the WebSocket Handshake"
    },
    {
      "href": "00000000-0000-0000-0000-0000005f2e4a",
      "text": "Use TLS/SSL to Encrypt WebSocket Connections"
    },
    {
      "href": "00000000-0000-0000-0000-000000736a21",
      "text": "Check the Origin Attribute of WebSocket Messages"
    },
    {
      "href": "00000000-0000-0000-0000-0000005326a8",
      "text": "Use the Latest WebSocket RFC 6455 Standard"
    },
    {
      "href": "00000000-0000-0000-0000-00000085bc2f",
      "text": "Do Not Tunnel TCP via WebSockets"
    },
    {
      "href": "00000000-0000-0000-0000-00000086537e",
      "text": "Data Coming from WebSockets Is Validated"
    },
    {
      "href": "00000000-0000-0000-0000-00000077e316",
      "text": "The Origin Header in WebSocket Handshake is Checked"
    },
    {
      "href": "bd870268-f104-4f6f-ba0d-6628dc34eb2a",
      "text": "TLS/SSL is Used to Encrypt WebSocket Connections"
    },
    {
      "href": "00000000-0000-0000-0000-0000002f39d7",
      "text": "The Origin Attribute of WebSocket Messages Is Checked"
    },
    {
      "href": "18d5564d-00a4-4afe-a853-707269df2566",
      "text": "Latest RFC 6455 Standard is Used"
    },
    {
      "href": "00000000-0000-0000-0000-00000091ce5a",
      "text": "TCP Is Not Tunneled via WebSockets"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> HTML5 and JavaScript</li>\n</ul><h2>What to Do</h2><p>When processing events such as <tt>onmessage</tt> using WebSocket, always check the origin attribute to make sure the message is coming from the source you expect.\n</p><h2>Why</h2><p>If you do not check the origin of the MessageEvent to confirm that it is coming from a safe domain, your application may be open to attacks. These attacks may be in the form of messages sent from other servers and may contain messages harmful to your application.\n</p><h2>When</h2><p>Always verify the origin attribute of the incoming message.\n</p><h2>How</h2><p>The technique for checking the origin attribute depends on whether you would like to verify a specific server or a specific domain. \n</p><ol>\n<li> <strong>If the origin is expected to be a specific server, check it against the server name.</strong> Use the JavaScript <tt>===</tt> operator to verify equality between the expected server name and the value of the origin attribute. </li>\n<li> <strong>If the origin is expected to be from one or more domains, check it against the domain name(s).</strong> Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.</li>\n<li> <strong>Identify the allowed domains from which a message will be accepted.</strong> Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.</li>\n<li> <strong>Create a function for validating the domains to centralize the logic.</strong> Creating a function also allows you to test the code more easily.</li>\n<li> <strong>Check the length of the domain before validating it.</strong> Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS. </li>\n<li> <strong>Build the regular expression for validating your domains.</strong> The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035: <tt> ^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$ </tt>. This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression <tt>([a-z][-a-z0-9]+[a-z0-9]\\.)*</tt> will match one or more host names, so <tt> http://myserver.example.com </tt> as well as <tt> http://www.mysubdomain.example.com </tt> will match.</li>\n<li> <strong>Inside the new function, create a regular expression object with your expression.</strong> Pass the expression to the RegExp constructor, as shown here: <tt> var re = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/); </tt></li>\n<li> <strong>Use the test() method of the RegExp object to verify that the origin attribute matches.</strong> The test() method can be used like this: <tt> return pattern.test(origin); </tt></li>\n<li> <strong>Call the function from your <tt>onmessage</tt> event handler.</strong> Pass the value of the origin attribute to your function: <tt> webSocket.onmessage = function(event) ... </tt></li>\n<li> <strong>Test thoroughly.</strong> Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation.</li>\n</ol><h2>Problem Example</h2><p>The following code handles the event message without checking the origin attribute. In this example, the message could be sent from almost anywhere, including an attacker sending malicious content:\n</p><pre>\n\nvar socket = new WebSocket(\"ws://echo.websocket.org\");\n\nsocket.onmessage = function(event) {\nvar mydiv = document.getElementById(\"div1\");\nmydiv.innerHTML = event.data;\n}\n\n</pre><p>\n<br></p><h2>Solution Example</h2><p>The following code properly checks the origin attribute using a custom function that verifies that the message has been sent from an expected source:\n</p><pre>\n\nfunction isOriginValid(origin) {\nvar pattern = new RegExp(/^https?:\\/\\/([a-z][-a-z0-9]+[a-z0-9]\\.)*mydomain\\.com$/);\n\treturn pattern.test(origin);\n}\nvar socket = new WebSocket(\"ws://echo.websocket.org\");\n\nsocket.onmessage = function(event) {\n\tif (isOriginValid(event.origin)) {\n\tvar mydiv = document.getElementById(\"div1\");\n\tmydiv.innerHTML = event.data;\n}\n\n</pre><p>\nThe expression in the <tt>isOriginValid()</tt> method ensures that the origin string starts with <tt> http:// </tt> or <tt> https:// </tt> and ends with example.com, which in this case represents the expected domain.\n</p>\n<h2>WebSocket Guidelines</h2><ul><li> <a href=\"00000000-0000-0000-0000-000000869806\">Validate Data Coming from WebSockets</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000093dea4\">Check the Origin Header in the WebSocket Handshake</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000005f2e4a\">Use TLS/SSL to Encrypt WebSocket Connections</a></li>\n<li> <a href=\"00000000-0000-0000-0000-000000736a21\">Check the Origin Attribute of WebSocket Messages</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000005326a8\">Use the Latest WebSocket RFC 6455 Standard</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000085bc2f\">Do Not Tunnel TCP via WebSockets</a></li>\n</ul><h2>WebSocket Checklist Items</h2><ul><li> <a href=\"00000000-0000-0000-0000-00000086537e\">Data Coming from WebSockets Is Validated</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000077e316\">The Origin Header in WebSocket Handshake is Checked</a></li>\n<li> <a href=\"bd870268-f104-4f6f-ba0d-6628dc34eb2a\">TLS/SSL is Used to Encrypt WebSocket Connections</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000002f39d7\">The Origin Attribute of WebSocket Messages Is Checked</a></li>\n<li> <a href=\"18d5564d-00a4-4afe-a853-707269df2566\">Latest RFC 6455 Standard is Used</a></li>\n<li> <a href=\"00000000-0000-0000-0000-00000091ce5a\">TCP Is Not Tunneled via WebSockets</a></li>\n</ul>"
}