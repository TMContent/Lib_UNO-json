{
  "id": "b698d208-b554-4b6e-8233-4a11d838f57b",
  "checksum": "a70fb8d4a134691dedfdea8735b423a397e5e909",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "check": [
      "h1",
      "p"
    ],
    "for": [
      "h1",
      "p",
      "p"
    ],
    "ensure": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p"
    ],
    "untrusted": [
      "p",
      "p",
      "p",
      "title"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "does": [
      "p",
      "title"
    ],
    "not": [
      "p",
      "p",
      "title"
    ],
    "use": [
      "p",
      "p",
      "title"
    ],
    "reflectionemit": [
      "p",
      "b",
      "b",
      "title"
    ],
    "create": [
      "p",
      "title"
    ],
    "dynamic": [
      "p",
      "title"
    ],
    "assemblies": [
      "p",
      "title"
    ],
    "how": [
      "h1"
    ],
    "fix": [
      "h1"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application": [
      "p",
      "p"
    ],
    "dynamically": [
      "p",
      "p",
      "p"
    ],
    "generates": [
      "p",
      "p"
    ],
    "through": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "of": [
      "p",
      "p"
    ],
    "reflectionemit,": [
      "p"
    ],
    "do": [
      "p"
    ],
    "allow": [
      "p",
      "p"
    ],
    "or": [
      "p"
    ],
    "data": [
      "p"
    ],
    "influence": [
      "p",
      "p",
      "p"
    ],
    "generation": [
      "p",
      "p",
      "p"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p",
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "could": [
      "p"
    ],
    "coerce": [
      "p"
    ],
    "into": [
      "p"
    ],
    "generating": [
      "p"
    ],
    "malicious": [
      "p"
    ],
    "this": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p"
    ],
    "particularly": [
      "p"
    ],
    "significant": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "user-supplied": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p"
    ],
    "generate": [
      "p"
    ],
    "there": [
      "p",
      "p"
    ],
    "are": [
      "p"
    ],
    "some": [
      "p"
    ],
    "scenarios": [
      "p"
    ],
    "such": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "script": [
      "p"
    ],
    "engine": [
      "p"
    ],
    "implementation": [
      "p"
    ],
    "in": [
      "p",
      "p"
    ],
    "which": [
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "necessary": [
      "p"
    ],
    "drive": [
      "p"
    ],
    "reflectionemit.": [
      "p"
    ],
    "assembly": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "caller": [
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p"
    ],
    "operates": [
      "p"
    ],
    "at": [
      "p"
    ],
    "lower": [
      "p"
    ],
    "trust": [
      "p"
    ],
    "level": [
      "p"
    ],
    "be": [
      "p"
    ],
    "especially": [
      "p"
    ],
    "vigilant": [
      "p"
    ],
    "security": [
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p"
    ],
    "validate": [
      "p"
    ],
    "any": [
      "p"
    ],
    "string": [
      "p",
      "p"
    ],
    "used": [
      "p"
    ],
    "literal": [
      "p",
      "p"
    ],
    "generated": [
      "p"
    ],
    "escape": [
      "p"
    ],
    "quotation": [
      "p"
    ],
    "mark": [
      "p"
    ],
    "characters": [
      "p"
    ],
    "make": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "cannot": [
      "p"
    ],
    "break": [
      "p"
    ],
    "out": [
      "p"
    ],
    "inject": [
      "p"
    ],
    "way": [
      "p"
    ],
    "so": [
      "p"
    ],
    "fails": [
      "p"
    ],
    "compile": [
      "p"
    ],
    "treat": [
      "p"
    ],
    "problem": [
      "p"
    ],
    "potential": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "from": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "How to Fix"
    ],
    "p": [
      "Check to ensure that untrusted code does not use Reflection.Emit to create dynamic assemblies.",
      "",
      "If your application dynamically generates code through the use of Reflection.Emit, do not allow untrusted code or data to influence the code generation. If an attacker can influence the code generation, the attacker could coerce your application into generating malicious code. This is particularly significant if your code uses user-supplied input to generate code dynamically.",
      "There are some scenarios, such as script engine implementation, in which it is necessary to allow untrusted input to drive Reflection.Emit. If your assembly dynamically generates code to perform operations for a caller and the caller operates at a lower trust level, be especially vigilant for security vulnerabilities. Validate any input string used as a string literal in your generated code and escape quotation mark characters to make sure that the caller cannot break out of the literal and inject code. If there is a way that the caller can influence the code generation so that it fails to compile, treat the problem as a potential security vulnerability.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "b": [
      "Reflection.Emit",
      "Reflection.Emit"
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>What to Check For</h1>\n  <p>Check to ensure that untrusted code does not use Reflection.Emit to create dynamic assemblies.</p>\n  <p />\n  <h1>How to Fix</h1>\n  <p>If your application dynamically generates code through the use of <b>Reflection.Emit</b>, do not allow untrusted code or data to influence the code generation. If an attacker can influence the code generation, the attacker could coerce your application into generating malicious code. This is particularly significant if your code uses user-supplied input to generate code dynamically.</p>\n  <p>There are some scenarios, such as script engine implementation, in which it is necessary to allow untrusted input to drive <b>Reflection.Emit</b>. If your assembly dynamically generates code to perform operations for a caller and the caller operates at a lower trust level, be especially vigilant for security vulnerabilities. Validate any input string used as a string literal in your generated code and escape quotation mark characters to make sure that the caller cannot break out of the literal and inject code. If there is a way that the caller can influence the code generation so that it fails to compile, treat the problem as a potential security vulnerability.</p>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}