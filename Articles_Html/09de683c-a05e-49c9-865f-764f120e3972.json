{
  "id": "09de683c-a05e-49c9-865f-764f120e3972",
  "checksum": "f696386ece6769cf7348fde5af65116ae2d17b0d",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "c#": [
      "ul",
      "li"
    ],
    "server-side": [
      "ul",
      "li"
    ],
    "sql": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "server": [
      "ul",
      "li",
      "pre",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "this": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "code": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "snippet": [
      "p"
    ],
    "is": [
      "p",
      "ul",
      "li"
    ],
    "illustrate": [
      "p"
    ],
    "construction": [
      "p"
    ],
    "database": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "p",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "ul",
      "li",
      "title"
    ],
    "queries": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "using": [
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "stored": [
      "p",
      "pre",
      "ul",
      "li",
      "ol",
      "li",
      "p",
      "title"
    ],
    "procedures": [
      "p",
      "ul",
      "li",
      "title"
    ],
    "add": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "additional": [
      "p",
      "h1"
    ],
    "security": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "li"
    ],
    "operations": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "for": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "title"
    ],
    "net": [
      "p"
    ],
    "applications": [
      "p"
    ],
    "objectives": [
      "h1"
    ],
    "define": [
      "ul",
      "li"
    ],
    "and": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "fix": [
      "ul",
      "li"
    ],
    "query": [
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "logic": [
      "ul",
      "li"
    ],
    "during": [
      "ul",
      "li"
    ],
    "implementation": [
      "ul",
      "li"
    ],
    "protect": [
      "ul",
      "li"
    ],
    "against": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "potential": [
      "ul",
      "li"
    ],
    "injection": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "attacks": [
      "ul",
      "li"
    ],
    "scenarios": [
      "h1"
    ],
    "application": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "can": [
      "ul",
      "li"
    ],
    "be": [
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "defined": [
      "ul",
      "li"
    ],
    "implemented": [
      "ul",
      "li"
    ],
    "at": [
      "ul",
      "li"
    ],
    "compile/deployment": [
      "ul",
      "li"
    ],
    "time": [
      "ul",
      "li"
    ],
    "needs": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "make": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "use": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p"
    ],
    "user": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "input": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "any": [
      "ul",
      "li",
      "p",
      "ul",
      "li"
    ],
    "form": [
      "ul",
      "li"
    ],
    "in": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li"
    ],
    "output": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li",
      "pre",
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre",
      "p"
    ],
    "other": [
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "solution": [
      "h1"
    ],
    "example": [
      "h1",
      "h1",
      "p",
      "ul",
      "li",
      "ol",
      "li",
      "p"
    ],
    "static": [
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "void": [
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "storedproceduredbquery)&#123;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "create": [
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre",
      "li",
      "li",
      "p",
      "pre"
    ],
    "a": [
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "connection": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "integrated": [
      "pre",
      "pre"
    ],
    "security&nbsp&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "string": [
      "pre",
      "p",
      "pre",
      "ul",
      "li"
    ],
    "connectionstring": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"initial": [
      "pre",
      "pre"
    ],
    "catalog=snippetsdata": [
      "pre",
      "pre"
    ],
    "source=vm-win2003&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "\\\\sqlexpressintegrated": [
      "pre",
      "a",
      "pre",
      "a"
    ],
    "security=sspi\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "sqlconnection": [
      "pre"
    ],
    "cn": [
      "pre",
      "pre"
    ],
    "sqlconnectionconnectionstring);": [
      "pre"
    ],
    "&nbsp&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "command": [
      "pre",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "object": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "with": [
      "pre",
      "pre"
    ],
    "execute": [
      "pre",
      "pre",
      "pre",
      "ol",
      "li",
      "p"
    ],
    "procedure&nbsp&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "sqlcommand": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "sqlcommand\"exec": [
      "pre"
    ],
    "spfullnames\"": [
      "pre"
    ],
    "cn;": [
      "pre"
    ],
    "open": [
      "pre",
      "pre"
    ],
    "returning": [
      "pre",
      "pre"
    ],
    "data": [
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "reader&nbsp&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "cnopen();": [
      "pre"
    ],
    "sqldatareader": [
      "pre"
    ],
    "reader": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sqlcommandexecutereader();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "while": [
      "pre"
    ],
    "reader.read())&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "consolewriteline(\"result:": [
      "pre",
      "pre"
    ],
    "\"": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "&#43": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "readergetstring(0));": [
      "pre"
    ],
    "close": [
      "pre",
      "pre"
    ],
    "connection&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "readerclose();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "cnclose();": [
      "pre"
    ],
    "&#125": [
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "following": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "demonstrates": [
      "p"
    ],
    "concatenation": [
      "p"
    ],
    "dynamically": [
      "p",
      "pre",
      "ul",
      "li"
    ],
    "sparam": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "request&#91\"first_name\"&#93;;//": [
      "pre"
    ],
    "securitystring": [
      "pre"
    ],
    "source=vm-win2003&#9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "security=sspi\";sqlconnection": [
      "pre"
    ],
    "sqlconnectionconnectionstring);//": [
      "pre"
    ],
    "our": [
      "pre"
    ],
    "query//": [
      "pre"
    ],
    "generate": [
      "pre"
    ],
    "passed": [
      "pre"
    ],
    "parametersqlcommand": [
      "pre"
    ],
    "sqlcommand\"select": [
      "pre"
    ],
    "first": [
      "pre",
      "pre",
      "ul",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "last": [
      "pre",
      "ol",
      "li",
      "pre"
    ],
    "people": [
      "pre",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre"
    ],
    "where": [
      "pre"
    ],
    "'\"": [
      "pre"
    ],
    "\"'\"": [
      "pre"
    ],
    "cn;//": [
      "pre"
    ],
    "readercnopen();sqldatareader": [
      "pre"
    ],
    "sqlcommandexecutereader();while": [
      "pre"
    ],
    "reader.read())&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "pre"
    ],
    "readergetstring(0)": [
      "pre"
    ],
    "readergetstring(1));//": [
      "pre"
    ],
    "connectionreader.close();cn.close();": [
      "pre"
    ],
    "does": [
      "ul",
      "li"
    ],
    "not": [
      "ul",
      "li"
    ],
    "validate": [
      "ul",
      "li"
    ],
    "\"first_name\"": [
      "ul",
      "li"
    ],
    "cgi": [
      "ul",
      "li"
    ],
    "before": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "incorporation": [
      "ul",
      "li"
    ],
    "into": [
      "ul",
      "li"
    ],
    "makes": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "dynamically-generated": [
      "ul",
      "li"
    ],
    "containing": [
      "ul",
      "li"
    ],
    "which": [
      "ul",
      "li"
    ],
    "vulnerable": [
      "ul",
      "li"
    ],
    "instance": [
      "ul",
      "li"
    ],
    "value": [
      "ul",
      "li"
    ],
    "could": [
      "ul",
      "li"
    ],
    "result": [
      "ul",
      "li",
      "h1",
      "pre"
    ],
    "deletion": [
      "ul",
      "li"
    ],
    "entire": [
      "ul",
      "li"
    ],
    "environment": [
      "ul",
      "li"
    ],
    "abcxyz'": [
      "pre"
    ],
    "drop": [
      "pre"
    ],
    "snippets": [
      "pre"
    ],
    "--": [
      "pre"
    ],
    "illustrates": [
      "ul",
      "li"
    ],
    "an": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "inline": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "select": [
      "ul",
      "li",
      "ol",
      "li",
      "pre"
    ],
    "statement": [
      "ul",
      "li"
    ],
    "may": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "also": [
      "ul",
      "li"
    ],
    "possible": [
      "ul",
      "li"
    ],
    "when": [
      "ul",
      "li"
    ],
    "are": [
      "ul",
      "li"
    ],
    "used": [
      "ul",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "if": [
      "ul",
      "li"
    ],
    "incorporated": [
      "ul",
      "li"
    ],
    "as": [
      "ul",
      "li"
    ],
    "above": [
      "ul",
      "li",
      "p"
    ],
    "violate": [
      "ul",
      "li"
    ],
    "certain": [
      "ul",
      "li"
    ],
    "corporate": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li",
      "h1"
    ],
    "policies": [
      "ul",
      "li"
    ],
    "test": [
      "h1",
      "p",
      "ol",
      "li",
      "p"
    ],
    "case": [
      "h1",
      "p",
      "ol",
      "li",
      "p"
    ],
    "classes": [
      "p"
    ],
    "must": [
      "p"
    ],
    "included": [
      "p"
    ],
    "project": [
      "p"
    ],
    "making": [
      "p"
    ],
    "sample": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "systemdata;using": [
      "pre"
    ],
    "systemdata.sqlclient;": [
      "pre"
    ],
    "requires": [
      "p"
    ],
    "performance": [
      "p"
    ],
    "three": [
      "p"
    ],
    "steps": [
      "p"
    ],
    "run": [
      "ol",
      "li",
      "p"
    ],
    "table": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "li",
      "p"
    ],
    "\"people\"": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "li",
      "p"
    ],
    "&#91dbo&#93;.&#91;people&#93;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "ol",
      "li",
      "pre"
    ],
    "&#91first&#93;": [
      "ol",
      "li",
      "pre"
    ],
    "&#91varchar&#93;(50)": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "collate": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "sql_latin1_general_cp1_ci_as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "&#91last&#93;": [
      "ol",
      "li",
      "pre"
    ],
    "&#91email&#93;": [
      "ol",
      "li",
      "pre"
    ],
    "&#91varchar&#93;(max)": [
      "ol",
      "li",
      "pre"
    ],
    "&#91phone&#93;": [
      "ol",
      "li",
      "pre"
    ],
    "&#91nchar&#93;(15)": [
      "ol",
      "li",
      "pre"
    ],
    "null": [
      "ol",
      "li",
      "pre"
    ],
    "procedure": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "pre"
    ],
    "names": [
      "ol",
      "li",
      "p"
    ],
    "spfullnames": [
      "ol",
      "li",
      "pre"
    ],
    "asbegin": [
      "ol",
      "li",
      "pre"
    ],
    "'": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre"
    ],
    "order": [
      "ol",
      "li",
      "pre"
    ],
    "by": [
      "ol",
      "li",
      "pre",
      "ul",
      "li"
    ],
    "lastendgo": [
      "ol",
      "li",
      "pre"
    ],
    "mainstring&#91;&#93;": [
      "ol",
      "li",
      "pre"
    ],
    "args&#123;": [
      "ol",
      "li",
      "pre"
    ],
    "storedproceduredbquery);&#125;": [
      "ol",
      "li",
      "pre"
    ],
    "expected": [
      "h1",
      "ul",
      "li"
    ],
    "elvin": [
      "pre"
    ],
    "jonesresult": [
      "pre"
    ],
    "gene": [
      "pre"
    ],
    "kruparesult": [
      "pre"
    ],
    "tony": [
      "pre"
    ],
    "williams": [
      "pre"
    ],
    "more": [
      "h1"
    ],
    "should": [
      "ul",
      "li"
    ],
    "always": [
      "ul",
      "li"
    ],
    "considered": [
      "ul",
      "li"
    ],
    "\"tainted\"": [
      "ul",
      "li"
    ],
    "validated": [
      "ul",
      "li"
    ],
    "set": [
      "ul",
      "li"
    ],
    "known": [
      "ul",
      "li"
    ],
    "values": [
      "ul",
      "li"
    ],
    "characters": [
      "ul",
      "li"
    ],
    "acceptance": [
      "ul",
      "li"
    ],
    "processing": [
      "ul",
      "li"
    ],
    "type": [
      "ul",
      "li"
    ],
    "operation": [
      "ul",
      "li"
    ],
    "including": [
      "ul",
      "li"
    ],
    "resources": [
      "h1"
    ],
    "guidelines": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "asp.net": [
      "ul",
      "li"
    ],
    "access:": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "http//msdn.microsoft.com/library/en-us/dnpag2/html/pagguidelines0001.asp?frame=true#pagguidelines0001_dataaccesssecurity": [
      "ul"
    ],
    "ado.net": [
      "ul",
      "li"
    ],
    "injection:": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/library/en-us/dnpag2/html/pagguidelines0002.asp?frame=true#pagguidelines0002_sqlinjectionsecurity": [
      "ul"
    ],
    ".net": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/library/en-us/dnpag2/html/pagguidelines0003.asp?frame=true#pagguidelines0003_dataaccess": [
      "ul",
      "li",
      "a"
    ],
    "http//msdn.microsoft.com/library/en-us/dnpag2/html/pagguidelines0001.asp?frame=true#pagguidelines0001_dataaccess": [
      "li",
      "a"
    ],
    "http//msdn.microsoft.com/library/en-us/dnpag2/html/pagguidelines0002.asp?frame=true#pagguidelines0002_sqlinjection": [
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "sink]": [
      "title"
    ],
    "secure": [
      "title"
    ],
    "access": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Objectives",
      "Scenarios",
      "Solution Example",
      "Problem Example",
      "Test Case",
      "Expected Result",
      "More Information",
      "Additional Resources"
    ],
    "ul": [
      "C# Server-side SQL Server",
      "Define and fix query logic during implementation of database operations Protect against potential SQL injection attacks",
      "Application database operations can be defined and implemented at compile/deployment time Application needs to make use of user input of any form in database queries Application needs to make use of output from other database or code operations in database queries",
      "Code does not first validate the \"first_name\" CGI data before incorporation into the database query SqlCommand object makes use of a dynamically-generated string containing user input, which makes this operations vulnerable to SQL injection. For instance, the following sParam value could result in the deletion of the entire application database from the environment:",
      "This example illustrates an inline SELECT statement. SQL injection may also be possible when stored procedures are used, if user input is incorporated dynamically, as above Inline SQL code may violate certain corporate information security policies",
      "User input should always be considered \"tainted\" and validated against a set of known and expected values or characters before acceptance by an application for processing in any type of operation, including database queries.",
      "Security Guidelines (ASP.NET Data Access): http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0001.asp?frame=true#pagguidelines0001_dataaccessSecurity Guidelines (ADO.NET SQL Injection): http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0002.asp?frame=true#pagguidelines0002_sqlinjectionSecurity Guidelines (.NET Data Access): http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0003.asp?frame=true#pagguidelines0003_dataaccess"
    ],
    "li": [
      "C#",
      "Server-side",
      "SQL Server",
      "Define and fix query logic during implementation of database operations",
      "Protect against potential SQL injection attacks",
      "Application database operations can be defined and implemented at compile/deployment time",
      "Application needs to make use of user input of any form in database queries",
      "Application needs to make use of output from other database or code operations in database queries",
      "Code does not first validate the \"first_name\" CGI data before incorporation into the database query",
      "SqlCommand object makes use of a dynamically-generated string containing user input, which makes this operations vulnerable to SQL injection. For instance, the following sParam value could result in the deletion of the entire application database from the environment:",
      "This example illustrates an inline SELECT statement. SQL injection may also be possible when stored procedures are used, if user input is incorporated dynamically, as above",
      "Inline SQL code may violate certain corporate information security policies",
      "Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.\n      CREATE TABLE &#91;dbo&#93;.&#91;People&#93;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;first&#93; &#91;varchar&#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;last&#93; &#91;varchar&#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;email&#93; &#91;varchar&#93;(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;phone&#93; &#91;nchar&#93;(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL",
      "Create the stored procedure used in this example to query names from the people table.\n        CREATE PROCEDURE spFullNames ASBEGIN        SELECT first &#43; ' ' &#43; last FROM people ORDER BY lastENDGO",
      "Execute the following test case code. \n          static void Main(string&#91;&#93; args)&#123;        StoredProcedureDBQuery();&#125;",
      "User input should always be considered \"tainted\" and validated against a set of known and expected values or characters before acceptance by an application for processing in any type of operation, including database queries.",
      "Security Guidelines (ASP.NET Data Access): http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0001.asp?frame=true#pagguidelines0001_dataaccess",
      "Security Guidelines (ADO.NET SQL Injection): http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0002.asp?frame=true#pagguidelines0002_sqlinjection",
      "Security Guidelines (.NET Data Access): http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0003.asp?frame=true#pagguidelines0003_dataaccess"
    ],
    "p": [
      "The purpose of this code snippet is to illustrate the construction of database queries using stored procedures to add additional security to database operations for .NET applications.",
      "The following example demonstrates the use of string concatenation to dynamically create a database query.",
      "The following classes must be included in any project making use of the sample code provided above:",
      "The test case requires performance of the following three steps:",
      "Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.",
      "Create the stored procedure used in this example to query names from the people table.",
      "Execute the following test case code.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "static void StoredProcedureDBQuery()&#123;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a new database connection using Integrated Security&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\\\sqlexpress;Integrated Security=SSPI;\";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlConnection cn = new SqlConnection(connectionString);",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a new SQL Command object with a query to execute the stored procedure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlCommand sqlCommand = new SqlCommand(\"exec spFullNames\", cn);",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Open connection to the server and execute query, returning a data reader&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Open();",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SqlDataReader reader = sqlCommand.ExecuteReader();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (reader.Read())&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(\"Result: \" &#43; reader.GetString(0));",
      "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Close Reader and Connection.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader.Close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Close();",
      "&#125;",
      "string sParam = Request&#91;\"first_name\"&#93;;// Create a new database connection using Integrated Securitystring connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003&#9;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\\\sqlexpress;Integrated Security=SSPI;\";SqlConnection cn = new SqlConnection(connectionString);// Create a new SQL Command object with our query// Dynamically generate SQL query using passed parameterSqlCommand sqlCommand = new SqlCommand(\"SELECT first, last FROM people WHERE first = '\" &#43; sParam &#43; \"'\", cn);// Open connection to the server and execute query, returning a data readercn.Open();SqlDataReader reader = sqlCommand.ExecuteReader();while (reader.Read())&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(\"Result: \" &#43; reader.GetString(0) &#43; \" \" &#43; reader.GetString(1));// Close Reader and Connection.reader.Close();cn.Close();",
      "abcxyz'; drop database snippets; --",
      "using System.Data;using System.Data.SqlClient;",
      "CREATE TABLE &#91;dbo&#93;.&#91;People&#93;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;first&#93; &#91;varchar&#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;last&#93; &#91;varchar&#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;email&#93; &#91;varchar&#93;(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;phone&#93; &#91;nchar&#93;(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL",
      "CREATE PROCEDURE spFullNames ASBEGIN        SELECT first &#43; ' ' &#43; last FROM people ORDER BY lastENDGO",
      "static void Main(string&#91;&#93; args)&#123;        StoredProcedureDBQuery();&#125;",
      "Result: Elvin JonesResult: Gene KrupaResult: Tony Williams"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "\\\\sqlexpress;Integrated",
      "\\\\sqlexpress;Integrated",
      "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0001.asp?frame=true#pagguidelines0001_dataaccess",
      "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0002.asp?frame=true#pagguidelines0002_sqlinjection",
      "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0003.asp?frame=true#pagguidelines0003_dataaccess"
    ],
    "ol": [
      "Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.\n      CREATE TABLE &#91;dbo&#93;.&#91;People&#93;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;first&#93; &#91;varchar&#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;last&#93; &#91;varchar&#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;email&#93; &#91;varchar&#93;(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#91;phone&#93; &#91;nchar&#93;(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\n      \n        Create the stored procedure used in this example to query names from the people table.\n        CREATE PROCEDURE spFullNames ASBEGIN        SELECT first &#43; ' ' &#43; last FROM people ORDER BY lastENDGO\n        \n          Execute the following test case code. \n          static void Main(string&#91;&#93; args)&#123;        StoredProcedureDBQuery();&#125;"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "file://sqlexpress;Integrated/",
      "text": "\\\\sqlexpress;Integrated"
    },
    {
      "href": "file://sqlexpress;Integrated/",
      "text": "\\\\sqlexpress;Integrated"
    },
    {
      "href": "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0001.asp?frame=true#pagguidelines0001_dataaccess",
      "text": "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0001.asp?frame=true#pagguidelines0001_dataaccess"
    },
    {
      "href": "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0002.asp?frame=true#pagguidelines0002_sqlinjection",
      "text": "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0002.asp?frame=true#pagguidelines0002_sqlinjection"
    },
    {
      "href": "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0003.asp?frame=true#pagguidelines0003_dataaccess",
      "text": "http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0003.asp?frame=true#pagguidelines0003_dataaccess"
    }
  ],
  "html": "<h1>Applies To</h1>\n  <ul>\n    <li>C# <li>Server-side <li>SQL Server</li></li></li>\n  </ul>\n  <h1>Summary</h1>\n  <p>The purpose of this code snippet is to illustrate the construction of database queries using stored procedures to add additional security to database operations for .NET applications.</p>\n  <h1>Objectives</h1>\n  <ul>\n    <li>Define and fix query logic during implementation of database operations <li>Protect against potential SQL injection attacks</li></li>\n  </ul>\n  <h1>Scenarios</h1>\n  <ul>\n    <li>Application database operations can be defined and implemented at compile/deployment time <li>Application needs to make use of user input of any form in database queries <li>Application needs to make use of output from other database or code operations in database queries</li></li></li>\n  </ul>\n  <h1>Solution Example</h1>\n  <pre>static void StoredProcedureDBQuery()<br />&amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a new database connection using Integrated Security<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <a href=\"file://sqlexpress;Integrated/\">\\\\sqlexpress;Integrated</a> Security=SSPI;\";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlConnection cn = new SqlConnection(connectionString);</pre>\n  <pre>\n    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a new SQL Command object with a query to execute the stored procedure<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlCommand sqlCommand = new SqlCommand(\"exec spFullNames\", cn);</pre>\n  <pre>\n    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Open connection to the server and execute query, returning a data reader<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Open();</pre>\n  <pre>\n    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlDataReader reader = sqlCommand.ExecuteReader();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while (reader.Read())<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Console.WriteLine(\"Result: \" &amp;#43; reader.GetString(0));</pre>\n  <pre>\n    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Close Reader and Connection.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reader.Close();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Close();</pre>\n  <pre>\n    <br />&amp;#125;</pre>\n  <h1>Problem Example</h1>\n  <p>The following example demonstrates the use of string concatenation to dynamically create a database query. </p>\n  <pre>string sParam = Request&amp;#91;\"first_name\"&amp;#93;;<br /><br />// Create a new database connection using Integrated Security<br />string connectionString = \"Initial Catalog=snippets;Data Source=vm-win2003<br />&amp;#9;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <a href=\"file://sqlexpress;Integrated/\">\\\\sqlexpress;Integrated</a> Security=SSPI;\";<br />SqlConnection cn = new SqlConnection(connectionString);<br /><br />// Create a new SQL Command object with our query<br />// Dynamically generate SQL query using passed parameter<br />SqlCommand sqlCommand = new SqlCommand(\"SELECT first, last FROM people WHERE first = '\" &amp;#43; sParam &amp;#43; \"'\", cn);<br /><br />// Open connection to the server and execute query, returning a data reader<br />cn.Open();<br />SqlDataReader reader = sqlCommand.ExecuteReader();<br /><br />while (reader.Read())<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Console.WriteLine(\"Result: \" &amp;#43; reader.GetString(0) &amp;#43; \" \" &amp;#43; reader.GetString(1));<br /><br />// Close Reader and Connection.<br />reader.Close();<br />cn.Close();</pre>\n  <ul>\n    <li>Code does not first validate the \"first_name\" CGI data before incorporation into the database query <li>SqlCommand object makes use of a dynamically-generated string containing user input, which makes this operations vulnerable to SQL injection. For instance, the following sParam value could result in the deletion of the entire application database from the environment:</li></li>\n  </ul>\n  <pre>abcxyz'; drop database snippets; -- </pre>\n  <ul>\n    <li>This example illustrates an inline SELECT statement. SQL injection may also be possible when stored procedures are used, if user input is incorporated dynamically, as above <li>Inline SQL code may violate certain corporate information security policies</li></li>\n  </ul>\n  <h1>Test Case</h1>\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\n  <pre>using System.Data;<br />using System.Data.SqlClient;</pre>\n  <p>The test case requires performance of the following three steps:</p>\n  <ol>\n    <li>\n      <p>Run the following CREATE table command to add the \"people\" table used in this query to your SQL server.</p>\n      <pre>CREATE TABLE &amp;#91;dbo&amp;#93;.&amp;#91;People&amp;#93;(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;first&amp;#93; &amp;#91;varchar&amp;#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;last&amp;#93; &amp;#91;varchar&amp;#93;(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;email&amp;#93; &amp;#91;varchar&amp;#93;(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;phone&amp;#93; &amp;#91;nchar&amp;#93;(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL<br /></pre>\n      <li>\n        <p>Create the stored procedure used in this example to query names from the people table.</p>\n        <pre>CREATE PROCEDURE spFullNames AS<br />BEGIN<br />        SELECT first &amp;#43; ' ' &amp;#43; last FROM people ORDER BY last<br />END<br />GO</pre>\n        <li>\n          <p>Execute the following test case code. </p>\n          <pre>static void Main(string&amp;#91;&amp;#93; args)&amp;#123;<br />        StoredProcedureDBQuery();<br />&amp;#125;</pre>\n        </li>\n      </li>\n    </li>\n  </ol>\n  <h1>Expected Result</h1>\n  <pre>Result: Elvin Jones<br />Result: Gene Krupa<br />Result: Tony Williams</pre>\n  <h1>More Information</h1>\n  <ul>\n    <li>User input should always be considered \"tainted\" and validated against a set of known and expected values or characters before acceptance by an application for processing in any type of operation, including database queries. </li>\n  </ul>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>Security Guidelines (ASP.NET Data Access): <a href=\"http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0001.asp?frame=true#pagguidelines0001_dataaccess\">http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0001.asp?frame=true#pagguidelines0001_dataaccess</a><li>Security Guidelines (ADO.NET SQL Injection): <a href=\"http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0002.asp?frame=true#pagguidelines0002_sqlinjection\">http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0002.asp?frame=true#pagguidelines0002_sqlinjection</a><li>Security Guidelines (.NET Data Access): <a href=\"http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0003.asp?frame=true#pagguidelines0003_dataaccess\">http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGGuidelines0003.asp?frame=true#pagguidelines0003_dataaccess</a></li></li></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>"
}