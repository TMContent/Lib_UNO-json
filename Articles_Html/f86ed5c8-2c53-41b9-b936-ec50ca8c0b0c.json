{
  "id": "f86ed5c8-2c53-41b9-b936-ec50ca8c0b0c",
  "checksum": "11d2c39e3361275abcdb26438ad76c13d717b053",
  "words": {
    "0": [
      "pre",
      "pre",
      "pre"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "c#": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "purpose": [
      "p",
      "ul",
      "li"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "snippet": [
      "p"
    ],
    "is": [
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "illustrate": [
      "p"
    ],
    "how": [
      "p"
    ],
    "securely": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "distribute": [
      "p",
      "ul",
      "li"
    ],
    "session": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "li"
    ],
    "data": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "title"
    ],
    "external": [
      "p",
      "ul",
      "li",
      "title"
    ],
    "trusted": [
      "p"
    ],
    "web": [
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "pre",
      "ul",
      "li",
      "p",
      "title"
    ],
    "application": [
      "p",
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "title"
    ],
    "when": [
      "p",
      "pre"
    ],
    "there": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "exists": [
      "p"
    ],
    "no": [
      "p",
      "ul",
      "li"
    ],
    "common": [
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "server-side": [
      "p",
      "ul",
      "li"
    ],
    "state": [
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "it": [
      "p",
      "ul",
      "li",
      "pre"
    ],
    "includes": [
      "p"
    ],
    "topics": [
      "p",
      "p"
    ],
    "such": [
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "as": [
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "generating": [
      "p"
    ],
    "hmac": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li"
    ],
    "inclusion": [
      "p"
    ],
    "timestamp": [
      "p",
      "li",
      "ul",
      "li"
    ],
    "and": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "p",
      "pre",
      "p",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "encryption": [
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "objectives": [
      "h1"
    ],
    "provide": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "confidentiality": [
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "cookies": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "while": [
      "ul",
      "li"
    ],
    "in": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "transit": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "even": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "over": [
      "ul",
      "li"
    ],
    "insecure": [
      "ul",
      "li"
    ],
    "communication": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "channels": [
      "ul",
      "li"
    ],
    "ensuring": [
      "ul",
      "li"
    ],
    "that": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "they": [
      "ul",
      "li"
    ],
    "are": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "not": [
      "ul",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "exposed": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "unauthorized": [
      "ul",
      "li"
    ],
    "users": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "controls": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li"
    ],
    "mitigate": [
      "ul",
      "li",
      "ul",
      "li",
      "pre"
    ],
    "replay": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "protect": [
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "p"
    ],
    "against": [
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "p",
      "p"
    ],
    "information": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "h1"
    ],
    "disclosure": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "which": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "p",
      "p"
    ],
    "validate": [
      "ul",
      "li",
      "pre"
    ],
    "message": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "integrity": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "p"
    ],
    "users'": [
      "ul",
      "li"
    ],
    "ability": [
      "ul",
      "li"
    ],
    "tamper": [
      "ul",
      "li"
    ],
    "with": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "cookie": [
      "ul",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "title"
    ],
    "parameters": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "may": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "impact": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "business": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "logic": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "authentication": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "or": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "authorization": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "context": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "overall": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "through": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "signing": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "ensure": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "secure": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "p"
    ],
    "storage": [
      "ul",
      "li",
      "p",
      "strong"
    ],
    "a": [
      "ul",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "title"
    ],
    "shared": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "secret": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "key": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "protection": [
      "ul",
      "li",
      "p"
    ],
    "api": [
      "ul",
      "li"
    ],
    "dpapi)": [
      "ul",
      "li"
    ],
    "scenarios": [
      "h1"
    ],
    "needs": [
      "ul",
      "li"
    ],
    "some": [
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "details": [
      "ul",
      "li",
      "pre",
      "p"
    ],
    "within": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "another": [
      "ul",
      "li"
    ],
    "e.g.": [
      "ul",
      "li",
      "pre",
      "ul",
      "li"
    ],
    "single": [
      "ul",
      "li"
    ],
    "sign-on": [
      "ul",
      "li"
    ],
    "distributed": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "server": [
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p"
    ],
    "architecture": [
      "ul",
      "li"
    ],
    "applications": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "deployed": [
      "ul",
      "li"
    ],
    "infrastructure": [
      "ul",
      "li"
    ],
    "where": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "isn't": [
      "ul",
      "li"
    ],
    "feasible": [
      "ul",
      "li"
    ],
    "share": [
      "ul",
      "li"
    ],
    "store": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "symmetric": [
      "ul",
      "li",
      "pre",
      "pre",
      "p"
    ],
    "pre-established": [
      "ul",
      "li"
    ],
    "either": [
      "ul",
      "li"
    ],
    "out": [
      "ul",
      "li"
    ],
    "band": [
      "ul",
      "li"
    ],
    "via": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "other": [
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "channel": [
      "ul",
      "li"
    ],
    "developers": [
      "ul",
      "li"
    ],
    "wish": [
      "ul",
      "li",
      "pre"
    ],
    "avoid": [
      "ul",
      "li"
    ],
    "from": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "tampering": [
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "p"
    ],
    "distributing": [
      "ul",
      "li"
    ],
    "providing": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "embedded": [
      "ul",
      "li"
    ],
    "crypto": [
      "ul",
      "li",
      "pre"
    ],
    "blob": [
      "ul",
      "li"
    ],
    "timeout": [
      "ul",
      "li"
    ],
    "mechanism": [
      "ul",
      "li",
      "pre",
      "p",
      "pre"
    ],
    "user": [
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "must": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "retrieve": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "across": [
      "ul",
      "li"
    ],
    "multiple": [
      "ul",
      "li"
    ],
    "servers": [
      "ul",
      "li"
    ],
    "each": [
      "ul",
      "li",
      "pre",
      "ul",
      "li"
    ],
    "serve": [
      "ul",
      "li"
    ],
    "different": [
      "ul",
      "li",
      "p",
      "p"
    ],
    "eg.": [
      "ul",
      "li"
    ],
    "customer": [
      "ul",
      "li"
    ],
    "portal": [
      "ul",
      "li"
    ],
    "reporting": [
      "ul",
      "li"
    ],
    "etc": [
      "ul",
      "li"
    ],
    "solution": [
      "h1",
      "p"
    ],
    "example": [
      "h1",
      "h1",
      "p",
      "p",
      "p"
    ],
    "dpapi": [
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "utility": [
      "p",
      "strong"
    ],
    "class": [
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "for": [
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "title"
    ],
    "retrieval": [
      "p",
      "strong"
    ],
    "keys": [
      "p",
      "strong",
      "ul",
      "li",
      "li",
      "li",
      "p"
    ],
    "public": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "dpapiutil{": [
      "pre"
    ],
    "private": [
      "pre",
      "pre",
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "ul",
      "li"
    ],
    "registrykeyname": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "\"acmewebapplication\"": [
      "pre"
    ],
    "registryencvaluename": [
      "pre",
      "pre",
      "pre"
    ],
    "\"symmetrickey\"": [
      "pre"
    ],
    "registryhmacvaluename": [
      "pre",
      "pre",
      "pre"
    ],
    "\"hmackey\"": [
      "pre"
    ],
    "fullregistrykeypath": [
      "pre",
      "pre"
    ],
    "\"\"": [
      "pre"
    ],
    "dpapiutil)": [
      "pre"
    ],
    "{": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "@\"hkey_current_user\\\"": [
      "pre"
    ],
    "+": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "}": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "void": [
      "pre",
      "pre"
    ],
    "storehmackeybyte[]": [
      "pre"
    ],
    "val": [
      "pre",
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encrypt": [
      "pre",
      "pre",
      "p",
      "ul",
      "li"
    ],
    "using": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "pre",
      "p",
      "p",
      "ul",
      "li"
    ],
    "protecteddata": [
      "pre",
      "pre"
    ],
    "we're": [
      "pre",
      "pre"
    ],
    "currentuser": [
      "pre",
      "pre"
    ],
    "scope": [
      "pre",
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "instead": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "machinekey": [
      "pre",
      "pre"
    ],
    "so": [
      "pre",
      "pre",
      "pre"
    ],
    "potentially": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "malicious": [
      "pre",
      "pre"
    ],
    "cannot": [
      "pre",
      "pre"
    ],
    "access": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "p"
    ],
    "registry": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "decrypt": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "byte]": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encryptedvalbytes": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "protecteddataprotect(val,": [
      "pre",
      "pre"
    ],
    "null": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "dataprotectionscopecurrentuser);": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "create": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "security": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "we": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p"
    ],
    "will": [
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p"
    ],
    "our": [
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encrypted": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "strong",
      "pre",
      "pre",
      "pre",
      "pre",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p"
    ],
    "connection": [
      "pre",
      "p"
    ],
    "restrict": [
      "pre",
      "pre",
      "pre"
    ],
    "only": [
      "pre",
      "pre",
      "p"
    ],
    "environmentuserdomainname": [
      "pre",
      "pre"
    ],
    "\"\\\\\"": [
      "pre",
      "pre"
    ],
    "environmentusername;": [
      "pre",
      "pre"
    ],
    "registrysecurity": [
      "pre",
      "pre"
    ],
    "registrysecurity);": [
      "pre",
      "pre"
    ],
    "registryaccessrule": [
      "pre",
      "pre"
    ],
    "rule": [
      "pre",
      "pre"
    ],
    "registryaccessruleuser,": [
      "pre",
      "pre"
    ],
    "registryrightsfullcontrol,": [
      "pre",
      "pre"
    ],
    "inheritanceflagscontainerinherit,": [
      "pre",
      "pre"
    ],
    "propagationflagsnone,": [
      "pre",
      "pre"
    ],
    "accesscontroltypeallow);": [
      "pre",
      "pre"
    ],
    "securityaddaccessrule(rule);": [
      "pre",
      "pre"
    ],
    "actually": [
      "pre",
      "pre"
    ],
    "apply": [
      "pre",
      "pre"
    ],
    "just": [
      "pre",
      "pre",
      "pre"
    ],
    "came": [
      "pre",
      "pre"
    ],
    "up": [
      "pre",
      "pre"
    ],
    "registrycurrentuser.createsubkey(registrykeyname,": [
      "pre",
      "pre"
    ],
    "registrykeypermissioncheckreadwritesubtree,": [
      "pre",
      "pre"
    ],
    "security;": [
      "pre",
      "pre"
    ],
    "write": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "into": [
      "pre",
      "pre"
    ],
    "registrysetvalue(fullregistrykeypath,": [
      "pre",
      "pre"
    ],
    "encryptedvalbytes;": [
      "pre",
      "pre"
    ],
    "storesymmkeybyte[]": [
      "pre"
    ],
    "retrievehmackey)": [
      "pre"
    ],
    "read": [
      "pre",
      "pre"
    ],
    "value": [
      "pre",
      "pre",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "registrygetvalue(fullregistrykeypath,": [
      "pre",
      "pre"
    ],
    "byte];": [
      "pre",
      "pre"
    ],
    "bytes": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "return": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "decryptedvalbytes": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "protecteddataunprotect(encryptedvalbytes,": [
      "pre"
    ],
    "retrievesymmkey)": [
      "pre"
    ],
    "protecteddataunprotect(encryptedvalbytes,null,": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "setting": [
      "p",
      "strong"
    ],
    "signed": [
      "p",
      "strong",
      "p"
    ],
    "establish": [
      "p",
      "p"
    ],
    "fetch": [
      "pre"
    ],
    "be": [
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "p",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "passed": [
      "pre"
    ],
    "remote": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "application//": [
      "pre",
      "pre"
    ],
    "eg.:": [
      "pre"
    ],
    "////": [
      "pre"
    ],
    "uid": [
      "pre",
      "pre",
      "pre"
    ],
    "userinfogetuid(user);string": [
      "pre"
    ],
    "httpcontextcurrent.user.identity.name;bool": [
      "pre"
    ],
    "adminrole": [
      "pre"
    ],
    "httpcontextcurrent.user.isinrole(\"admin\");//": [
      "pre"
    ],
    "concatenated": [
      "pre"
    ],
    "containing": [
      "pre",
      "ul",
      "li",
      "p"
    ],
    "all": [
      "pre"
    ],
    "details//": [
      "pre"
    ],
    "would": [
      "pre"
    ],
    "like": [
      "pre"
    ],
    "pass": [
      "pre"
    ],
    "also": [
      "pre"
    ],
    "include": [
      "pre",
      "li",
      "li"
    ],
    "datetime": [
      "pre"
    ],
    "help": [
      "pre",
      "pre"
    ],
    "risk": [
      "pre"
    ],
    "replay//cookieval": [
      "pre"
    ],
    "\"|\"": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "adminroletostring()": [
      "pre"
    ],
    "datetimenow.tobinary().tostring();//": [
      "pre"
    ],
    "considerations": [
      "pre"
    ],
    "replay//": [
      "pre"
    ],
    "-": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "minimize": [
      "pre"
    ],
    "interval": [
      "pre"
    ],
    "during": [
      "pre"
    ],
    "accepted": [
      "pre"
    ],
    "site//": [
      "pre"
    ],
    "consider": [
      "pre",
      "pre"
    ],
    "implementing": [
      "pre",
      "pre"
    ],
    "sequence": [
      "pre",
      "p"
    ],
    "id": [
      "pre",
      "li"
    ],
    "used": [
      "pre",
      "pre",
      "p"
    ],
    "sessions": [
      "pre"
    ],
    "marked": [
      "pre"
    ],
    "accordingly//": [
      "pre"
    ],
    "database//": [
      "pre"
    ],
    "leverage": [
      "pre"
    ],
    "transport": [
      "pre",
      "pre",
      "pre"
    ],
    "ssl)//": [
      "pre"
    ],
    "restrictive": [
      "pre",
      "pre",
      "pre"
    ],
    "settings": [
      "pre"
    ],
    "path,": [
      "pre"
    ],
    "httponly": [
      "pre",
      "pre",
      "p"
    ],
    "mode": [
      "pre"
    ],
    "domain//": [
      "pre"
    ],
    "sub": [
      "pre"
    ],
    "domain": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "by": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "which//": [
      "pre"
    ],
    "sharing": [
      "pre",
      "p",
      "p"
    ],
    "necessary": [
      "pre"
    ],
    "ourapps.microsoft.com)": [
      "pre"
    ],
    "sign": [
      "p"
    ],
    "set": [
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "p"
    ],
    "instantiate": [
      "pre"
    ],
    "helper": [
      "pre"
    ],
    "functionsdpapiutil": [
      "pre"
    ],
    "dputil": [
      "pre"
    ],
    "dpapiutil);//": [
      "pre"
    ],
    "usebyte]": [
      "pre"
    ],
    "enckey": [
      "pre"
    ],
    "dputilretrievesymmkey();//": [
      "pre"
    ],
    "providerrijndael": [
      "pre"
    ],
    "rij": [
      "pre"
    ],
    "rijndaelcreate();//": [
      "pre"
    ],
    "load": [
      "pre"
    ],
    "protected": [
      "pre"
    ],
    "keyrijkey": [
      "pre"
    ],
    "enckey//": [
      "pre"
    ],
    "default": [
      "pre"
    ],
    "have": [
      "pre"
    ],
    "random": [
      "pre",
      "pre",
      "pre",
      "li",
      "ul",
      "li"
    ],
    "iv": [
      "pre",
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "made": [
      "pre"
    ],
    "call": [
      "pre"
    ],
    "rijndaelcreate()//": [
      "pre"
    ],
    "we'll": [
      "pre"
    ],
    "prepend": [
      "pre",
      "pre"
    ],
    "app": [
      "pre"
    ],
    "can": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "our//": [
      "pre"
    ],
    "alternatively": [
      "pre"
    ],
    "possible": [
      "pre"
    ],
    "generate": [
      "pre",
      "p",
      "ul",
      "li"
    ],
    "initialization//": [
      "pre"
    ],
    "vector": [
      "pre",
      "pre",
      "li"
    ],
    "manually": [
      "pre"
    ],
    "calling//": [
      "pre"
    ],
    "rijgenerateiv();memorystream": [
      "pre"
    ],
    "ms": [
      "pre"
    ],
    "memorystream);cryptostream": [
      "pre"
    ],
    "ecs": [
      "pre"
    ],
    "cryptostreamms,": [
      "pre"
    ],
    "rijcreateencryptor(),": [
      "pre"
    ],
    "cryptostreammodewrite);//": [
      "pre"
    ],
    "plaintext": [
      "pre",
      "pre"
    ],
    "value//": [
      "pre"
    ],
    "now": [
      "pre"
    ],
    "need": [
      "pre",
      "pre",
      "p"
    ],
    "wasn't": [
      "pre"
    ],
    "altered//": [
      "pre"
    ],
    "distinctly": [
      "pre"
    ],
    "seperate": [
      "pre",
      "p"
    ],
    "if": [
      "pre",
      "ul",
      "li"
    ],
    "key//": [
      "pre"
    ],
    "compromised": [
      "pre"
    ],
    "still": [
      "pre",
      "li",
      "ul",
      "li"
    ],
    "guaranteed": [
      "pre"
    ],
    "protects": [
      "pre"
    ],
    "us": [
      "pre"
    ],
    "against//": [
      "pre"
    ],
    "parameter": [
      "pre"
    ],
    "tamperinghmacsha256": [
      "pre"
    ],
    "hmacsha256);//": [
      "pre"
    ],
    "helperhmackey": [
      "pre"
    ],
    "dputilretrievehmackey();//": [
      "pre"
    ],
    "compute": [
      "pre"
    ],
    "on": [
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "p",
      "p"
    ],
    "stringbyte]": [
      "pre"
    ],
    "hmacvalue": [
      "pre"
    ],
    "hmaccomputehash(unicodeencoding.ascii.getbytes(cookieval));//": [
      "pre"
    ],
    "contents": [
      "pre"
    ],
    "cryptostreamecswrite(unicodeencoding.ascii.getbytes(cookieval),": [
      "pre"
    ],
    "cookievallength);//": [
      "pre"
    ],
    "cryptostreamecswrite(hmacvalue,": [
      "pre"
    ],
    "hmacvaluelength);ecs.close();//": [
      "pre"
    ],
    "byte": [
      "pre"
    ],
    "array": [
      "pre",
      "ul",
      "li"
    ],
    "plus": [
      "pre"
    ],
    "ivbyte]": [
      "pre"
    ],
    "encryptedvaluewithiv": [
      "pre",
      "pre",
      "pre"
    ],
    "byterij.iv.length": [
      "pre"
    ],
    "mstoarray().length];//": [
      "pre"
    ],
    "initialization": [
      "pre",
      "li"
    ],
    "kept//": [
      "pre"
    ],
    "fact": [
      "pre"
    ],
    "randomizing": [
      "pre"
    ],
    "encryptionarraycopy(rij.iv,": [
      "pre"
    ],
    "rijiv.length);array.copy(ms.toarray(),": [
      "pre"
    ],
    "rijiv.length,": [
      "pre"
    ],
    "mstoarray().length);string": [
      "pre"
    ],
    "encryptedcookie": [
      "pre"
    ],
    "converttobase64string(encryptedvaluewithiv);httpcookie": [
      "pre"
    ],
    "chocolatechip": [
      "pre",
      "pre"
    ],
    "httpcookie\"cookiejar\",": [
      "pre",
      "pre"
    ],
    "encryptedcookie;//": [
      "pre"
    ],
    "proper": [
      "pre",
      "pre"
    ],
    "modes": [
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "set////": [
      "pre",
      "pre"
    ],
    "make": [
      "pre",
      "pre",
      "p"
    ],
    "unavailable": [
      "pre",
      "pre"
    ],
    "client": [
      "pre",
      "pre"
    ],
    "side": [
      "pre",
      "pre"
    ],
    "scriptschocolatechiphttponly": [
      "pre",
      "pre"
    ],
    "true//": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "ssl": [
      "pre",
      "pre"
    ],
    "onlychocolatechipsecure": [
      "pre",
      "pre"
    ],
    "ideally": [
      "pre",
      "pre"
    ],
    "choose": [
      "pre",
      "pre",
      "li"
    ],
    "more": [
      "pre",
      "pre",
      "h1"
    ],
    "under": [
      "pre",
      "pre",
      "p",
      "p"
    ],
    "setchocolatechipdomain": [
      "pre",
      "pre"
    ],
    "\"ourapp.microsoft.com\";//": [
      "pre",
      "pre"
    ],
    "place": [
      "pre",
      "pre"
    ],
    "restrictions": [
      "pre",
      "pre"
    ],
    "paths": [
      "pre",
      "pre"
    ],
    "cookieschocolatechippath": [
      "pre",
      "pre"
    ],
    "\"/cookieexample/\"//": [
      "pre",
      "pre"
    ],
    "finally": [
      "pre",
      "pre"
    ],
    "cookieresponsecookies.add(chocolatechip);": [
      "pre",
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "following": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "demonstrates": [
      "p"
    ],
    "poorly": [
      "p"
    ],
    "designed": [
      "p"
    ],
    "between": [
      "p",
      "p"
    ],
    "two": [
      "p"
    ],
    "cookieval": [
      "pre"
    ],
    "adminroletostring();httpcookie": [
      "pre"
    ],
    "cookieval;//": [
      "pre"
    ],
    "issues": [
      "p"
    ],
    "found": [
      "p"
    ],
    "sensitive": [
      "ul",
      "li"
    ],
    "should": [
      "ul",
      "li",
      "p"
    ],
    "never": [
      "ul",
      "li"
    ],
    "vulnerable": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "intermediaries": [
      "ul",
      "li"
    ],
    "event": [
      "ul",
      "li"
    ],
    "man-in-the-middle": [
      "ul",
      "li"
    ],
    "scenario": [
      "ul",
      "li"
    ],
    "altered": [
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "way": [
      "ul",
      "li"
    ],
    "detect": [
      "ul",
      "li"
    ],
    "situation": [
      "ul",
      "li"
    ],
    "any": [
      "ul",
      "li",
      "p"
    ],
    "ourapp.microsoft.com": [
      "ul",
      "li"
    ],
    "careful": [
      "p"
    ],
    "consideration": [
      "p"
    ],
    "given": [
      "p",
      "p"
    ],
    "coding": [
      "p"
    ],
    "mistakes": [
      "p"
    ],
    "shown": [
      "p"
    ],
    "above": [
      "p",
      "p"
    ],
    "weak": [
      "ul",
      "li"
    ],
    "typically": [
      "ul",
      "li"
    ],
    "128,": [
      "ul",
      "li"
    ],
    "but": [
      "ul",
      "li",
      "p"
    ],
    "dependent": [
      "ul",
      "li"
    ],
    "algorithms": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "unproven": [
      "ul",
      "li"
    ],
    "homegrown": [
      "ul",
      "li"
    ],
    "improper": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "types": [
      "ul",
      "li"
    ],
    "stream": [
      "ul",
      "li"
    ],
    "cipher": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "block": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "lack": [
      "ul",
      "li"
    ],
    "chaining": [
      "ul",
      "li"
    ],
    "blocks": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "leads": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "easier": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "replace": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "reorder": [
      "ul",
      "li",
      "ul",
      "li"
    ],
    "values": [
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "transmitted": [
      "ul",
      "li",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "failure": [
      "li",
      "li",
      "li"
    ],
    "iv)": [
      "li"
    ],
    "go": [
      "li",
      "ul",
      "li"
    ],
    "undetected": [
      "li",
      "ul",
      "li"
    ],
    "equal": [
      "li"
    ],
    "compromise": [
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "one": [
      "li",
      "ul",
      "li"
    ],
    "total": [
      "li",
      "ul",
      "li"
    ],
    "system": [
      "li",
      "ul",
      "li"
    ],
    "replayed": [
      "li",
      "ul",
      "li"
    ],
    "test": [
      "h1"
    ],
    "case": [
      "h1"
    ],
    "classes": [
      "p"
    ],
    "included": [
      "p",
      "p"
    ],
    "project": [
      "p"
    ],
    "making": [
      "p"
    ],
    "sample": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "systemusing": [
      "pre"
    ],
    "systemcollections.generic;using": [
      "pre"
    ],
    "systemsecurity.cryptography;using": [
      "pre"
    ],
    "systemsecurity.accesscontrol;using": [
      "pre"
    ],
    "systemtext;using": [
      "pre"
    ],
    "microsoftwin32;": [
      "pre"
    ],
    "browsing": [
      "p"
    ],
    "options": [
      "p"
    ],
    "set-cookie": [
      "pre",
      "p"
    ],
    "cookiejar=g2rzx1qz94laoyuxlgscubqg1/yyg8gy4ntcjak5aupwwsxoadyunber0sfzqik9dx4kzny0h8hd9xqee6d8hmvgojighloh88cx35jt9sqiqmjagcmecj6vhhwkfbrz": [
      "pre",
      "p"
    ],
    "domain=ourapp.microsoft.com;": [
      "pre",
      "p"
    ],
    "path=/cookieexample/": [
      "pre",
      "p"
    ],
    "observe": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "properties": [
      "p"
    ],
    "change": [
      "ul",
      "li"
    ],
    "operation": [
      "ul",
      "li"
    ],
    "due": [
      "ul",
      "li"
    ],
    "appended": [
      "ul",
      "li"
    ],
    "base64": [
      "ul",
      "li"
    ],
    "decoding": [
      "ul",
      "li"
    ],
    "\"cookiejar\"": [
      "ul",
      "li"
    ],
    "yields": [
      "ul",
      "li"
    ],
    "expected": [
      "h1"
    ],
    "result": [
      "h1"
    ],
    "http": [
      "p",
      "ul",
      "li",
      "li"
    ],
    "response": [
      "p"
    ],
    "header": [
      "p"
    ],
    "implementation": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "opposed": [
      "p"
    ],
    "machine": [
      "p"
    ],
    "means": [
      "p"
    ],
    "aes": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "accessible": [
      "p",
      "p"
    ],
    "programs": [
      "p",
      "p"
    ],
    "run": [
      "p"
    ],
    "same": [
      "p",
      "p"
    ],
    "running": [
      "p",
      "p"
    ],
    "service": [
      "p"
    ],
    "accounts": [
      "p",
      "p"
    ],
    "adds": [
      "p"
    ],
    "additional": [
      "p",
      "p",
      "h1"
    ],
    "rogue": [
      "p"
    ],
    "virus": [
      "p"
    ],
    "trojan": [
      "p"
    ],
    "compromising": [
      "p"
    ],
    "could": [
      "p"
    ],
    "pose": [
      "p"
    ],
    "problems": [
      "p"
    ],
    "mutliple": [
      "p"
    ],
    "required": [
      "p"
    ],
    "recommend": [
      "p"
    ],
    "approach": [
      "p"
    ],
    "whenever": [
      "p"
    ],
    "material": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "alone": [
      "p"
    ],
    "sufficient": [
      "p"
    ],
    "we've": [
      "p"
    ],
    "check": [
      "p"
    ],
    "relies": [
      "p",
      "p"
    ],
    "key.": [
      "p"
    ],
    "generated": [
      "p"
    ],
    "strong": [
      "p"
    ],
    "one-way": [
      "p"
    ],
    "hashing": [
      "p"
    ],
    "algorithm": [
      "p"
    ],
    "unique": [
      "p"
    ],
    "hash": [
      "p"
    ],
    "who": [
      "p"
    ],
    "intercepts": [
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "them": [
      "p"
    ],
    "unless": [
      "p"
    ],
    "contained": [
      "p"
    ],
    "designating": [
      "p"
    ],
    "number": [
      "p"
    ],
    "stored": [
      "p",
      "p"
    ],
    "order": [
      "p",
      "p"
    ],
    "maintain": [
      "p"
    ],
    "transparently": [
      "p"
    ],
    "pair": [
      "p"
    ],
    "beyond": [
      "p"
    ],
    "article": [
      "p"
    ],
    "however": [
      "p"
    ],
    "discussed": [
      "p"
    ],
    "articles": [
      "p"
    ],
    "resources": [
      "p",
      "h1"
    ],
    "hmac)": [
      "ul",
      "li"
    ],
    "request": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asphttp": [
      "ul"
    ],
    "http//msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.aspcookie": [
      "ul"
    ],
    "members": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asphmac": [
      "ul"
    ],
    "definition": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/hmachmac": [
      "ul"
    ],
    "http//msdn2.microsoft.com/en-us/library/system.security.cryptography.hmac.aspx": [
      "ul",
      "li",
      "a"
    ],
    "http//msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp": [
      "li",
      "a"
    ],
    "http//msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp": [
      "li",
      "a"
    ],
    "http//msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp": [
      "li",
      "a"
    ],
    "http//en.wikipedia.org/wiki/hmac": [
      "li",
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ],
    "encrypting": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "Summary",
      "Objectives",
      "Scenarios",
      "Solution Example",
      "Problem Example",
      "Test Case",
      "Expected Result",
      "More Information",
      "Additional Resources"
    ],
    "ul": [
      "C#",
      "Provide confidentiality of application cookies while in transit even over insecure communication channels, ensuring that they are not exposed to unauthorized users. Provide controls to mitigate session replay Provide controls to protect against information disclosure Provide controls which validate message integrity Protect against users' ability to tamper with cookie parameters which may impact the business logic, authentication or authorization context or overall data integrity through HMAC message signing Ensure the secure storage of a shared secret encryption key and HMAC signing key through use of the Data Protection API (DPAPI)",
      "Web application needs to distribute some details within the session state to another application (e.g. Single sign-on, distributed web server architecture) Web applications are deployed within an infrastructure where it isn't feasible to share session state through a common server-side data store. A shared symmetric key and HMAC signing key are pre-established either out of band or via some other secure communication channel. Developers wish to avoid users from tampering with cookie parameters which may impact the business logic, authentication or authorization context or overall data integrity Securely distributing session state to an external application Providing confidentiality through cookie encryption Providing message integrity through HMAC code embedded in crypto blob Mitigate session replay through use of a session timeout mechanism A user must retrieve data distributed across multiple web servers, each which serve a different purpose, e.g. customer portal, reporting server, etc.",
      "Sensitive information is exposed within the cookie, potentially containing data which should never be exposed to a user Cookies are vulnerable to tampering by the user (and intermediaries in the event of a man-in-the-middle scenario) Cookies are vulnerable to replay If cookies are altered in transit there is no way to detect such a situation Any web application in the .ourapp.microsoft.com domain can access the cookie.",
      "Encryption using weak encryption keys (typically <128, but dependent on encryption algorithms) Use of unproven or homegrown encryption algorithms Use of improper encryption types (e.g. stream cipher instead of block cipher) Use of improper encryption modes (lack of chaining blocks) Leads to easier cookie tampering even with encryption (replace or reorder blocks) Leads to information disclosure of common values transmitted",
      "Leads to easier cookie tampering even with encryption (replace or reorder blocks) Leads to information disclosure of common values transmitted",
      "Leads to information disclosure of common values transmitted",
      "Encrypted values may still be altered and go undetected",
      "Compromise of one key leads to total system compromise",
      "Encrypted value may be replayed",
      "Change with each encryption operation (due to random IV, and appended timestamp value) Base64 decoding the \"CookieJar\" value yields and encrypted array of bytes",
      "Encrypt a string via a block cipher (using AES) Generate a Message Authentication Code (HMAC)",
      "HTTP Request Cookies Class: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.aspHTTP Cookies: http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.aspCookie Members: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.aspHMAC definition: http://en.wikipedia.org/wiki/HMACHMAC class: http://msdn2.microsoft.com/en-US/library/system.security.cryptography.hmac.aspx"
    ],
    "li": [
      "C#",
      "Provide confidentiality of application cookies while in transit even over insecure communication channels, ensuring that they are not exposed to unauthorized users.",
      "Provide controls to mitigate session replay",
      "Provide controls to protect against information disclosure",
      "Provide controls which validate message integrity",
      "Protect against users' ability to tamper with cookie parameters which may impact the business logic, authentication or authorization context or overall data integrity through HMAC message signing",
      "Ensure the secure storage of a shared secret encryption key and HMAC signing key through use of the Data Protection API (DPAPI)",
      "Web application needs to distribute some details within the session state to another application (e.g. Single sign-on, distributed web server architecture)",
      "Web applications are deployed within an infrastructure where it isn't feasible to share session state through a common server-side data store.",
      "A shared symmetric key and HMAC signing key are pre-established either out of band or via some other secure communication channel.",
      "Developers wish to avoid users from tampering with cookie parameters which may impact the business logic, authentication or authorization context or overall data integrity",
      "Securely distributing session state to an external application",
      "Providing confidentiality through cookie encryption",
      "Providing message integrity through HMAC code embedded in crypto blob",
      "Mitigate session replay through use of a session timeout mechanism",
      "A user must retrieve data distributed across multiple web servers, each which serve a different purpose, e.g. customer portal, reporting server, etc.",
      "Sensitive information is exposed within the cookie, potentially containing data which should never be exposed to a user",
      "Cookies are vulnerable to tampering by the user (and intermediaries in the event of a man-in-the-middle scenario)",
      "Cookies are vulnerable to replay",
      "If cookies are altered in transit there is no way to detect such a situation",
      "Any web application in the .ourapp.microsoft.com domain can access the cookie.",
      "Encryption using weak encryption keys (typically <128, but dependent on encryption algorithms)",
      "Use of unproven or homegrown encryption algorithms",
      "Use of improper encryption types (e.g. stream cipher instead of block cipher)",
      "Use of improper encryption modes (lack of chaining blocks) Leads to easier cookie tampering even with encryption (replace or reorder blocks) Leads to information disclosure of common values transmitted",
      "Leads to easier cookie tampering even with encryption (replace or reorder blocks)",
      "Leads to information disclosure of common values transmitted",
      "Failure to choose random initialization vector (IV) Leads to information disclosure of common values transmitted",
      "Leads to information disclosure of common values transmitted",
      "Failure to include HMAC Encrypted values may still be altered and go undetected",
      "Encrypted values may still be altered and go undetected",
      "HMAC keys and encryption keys are equal Compromise of one key leads to total system compromise",
      "Compromise of one key leads to total system compromise",
      "Failure to include timestamp or session id Encrypted value may be replayed",
      "Encrypted value may be replayed",
      "Change with each encryption operation (due to random IV, and appended timestamp value)",
      "Base64 decoding the \"CookieJar\" value yields and encrypted array of bytes",
      "Encrypt a string via a block cipher (using AES)",
      "Generate a Message Authentication Code (HMAC)",
      "HTTP Request Cookies Class: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp",
      "HTTP Cookies: http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp",
      "Cookie Members: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp",
      "HMAC definition: http://en.wikipedia.org/wiki/HMAC",
      "HMAC class: http://msdn2.microsoft.com/en-US/library/system.security.cryptography.hmac.aspx"
    ],
    "p": [
      "The purpose of this code snippet is to illustrate how to securely distribute session data to an external trusted web application when there exists no common server-side session state. It includes topics such as generating an HMAC, inclusion of timestamp and the encryption of session data.",
      "DPAPI Utility Class for retrieval and storage of keys",
      "Setting the encrypted and signed key in our cookie",
      "Establish the cookie value:",
      "Encrypt, sign and set cookie value:",
      "The following example demonstrates a poorly designed cookie sharing mechanism between two web applications where encryption and key signing are not used:",
      "Set the cookie value:",
      "Issues found in this example:",
      "Careful consideration should be given to other common coding mistakes not shown in the code above:",
      "The following classes must be included in any project making use of the sample code provided above:",
      "Browsing to the web application containing the solution code will establish an encrypted and signed cookie value.",
      "The following cookie value is set by the server with secure cookie options:",
      "Observe cookie values which contain the following properties:",
      "HTTP Response header:",
      "Set-Cookie: CookieJar=g2rzx1QZ94lAOyUxLGscUbQg1/yyG8Gy4NTCjaK5aupWwSXoAdyuNBer0sFZQiK9dx4kZnY0h8hd9xqEe6d8hMvGoJiGhlOh88cx35Jt9sQIQmjAgCmecj6VhHwKfbrZ; domain=.ourapp.microsoft.com; path=/CookieExample/; secure; HttpOnly",
      "This implementation makes use of the DPAPI user key as opposed to the machine key. This means that the AES shared secret and HMAC signing key will only be accessible from programs that run within the same user context and will not be accessible by other applications running under different service accounts. This adds additional protection against a rogue application (such as a virus or trojan) compromising connection string data but could pose problems where sharing between mutliple applications running under different accounts is required. We recommend this approach whenever other programs will not need to access the same key material for encryption operations. Encryption of the message alone is not sufficient to protect against message tampering, as such we've included the use of an HMAC (or message integrity check, which relies on a shared secret key). The HMAC is generated by using a seperate shared secret and relies on a strong one-way hashing algorithm to generate a unique hash for the given message. Even with cookie encryption and signing, a user who intercepts these cookies may replay them to the server unless there is a value contained within the message designating the sequence number of the message. The symmetric shared key and HMAC signing key must be securely stored in order to maintain the confidentiality of data encrypted using these keys. In this example, we make use of the DPAPI in order to transparently stored the shared key pair encrypted with in the registry. The details of AES and HMAC message signing are beyond the scope of this article. However the following topics are discussed in the articles in Additional Resources:",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "strong": [
      "DPAPI Utility Class for retrieval and storage of keys",
      "Setting the encrypted and signed key in our cookie"
    ],
    "pre": [
      "public class DPAPIUtil{          private string registryKeyName = \"ACMEWebApplication\";    private string registryEncValueName = \"symmetrickey\";    private string registryHMACValueName = \"hmackey\";    string fullRegistryKeyPath = \"\";    public DPAPIUtil()    {           fullRegistryKeyPath = @\"HKEY_CURRENT_USER\\\" + registryKeyName;    }    public void StoreHMACKey(byte[] val)    {        // Encrypt the HMAC signing key using the DPAPI ProtectedData class.        //         // We're using the CurrentUser scope instead of the MachineKey scope        // so that other, potentially malicious applications cannot access        // this key in the registry and decrypt.        byte[] encryptedValBytes = ProtectedData.Protect(val, null,            DataProtectionScope.CurrentUser);        // Create a security context for a new key that we will use to store our encrypted connection string.        // The security context will restrict access to only our user.        string user = Environment.UserDomainName + \"\\\\\" + Environment.UserName;        RegistrySecurity security = new RegistrySecurity();        RegistryAccessRule rule = new RegistryAccessRule(user,                        RegistryRights.FullControl,                        InheritanceFlags.ContainerInherit,                        PropagationFlags.None,                        AccessControlType.Allow);        security.AddAccessRule(rule);        // Actually create the new registry key and apply the security context we just came up with.        Registry.CurrentUser.CreateSubKey(registryKeyName,                        RegistryKeyPermissionCheck.ReadWriteSubTree,                        security);        // Write the encrypted string into the registry        Registry.SetValue(fullRegistryKeyPath, registryHMACValueName, encryptedValBytes);    }        public void StoreSymmKey(byte[] val)        {                 // Encrypt the shared secret key using the DPAPI ProtectedData class.                 //                 // We're using the CurrentUser scope instead of the MachineKey scope                     // so that other, potentially malicious applications cannot access                       // this key in the registry and decrypt.\t        byte[] encryptedValBytes = ProtectedData.Protect(val, null,\t        DataProtectionScope.CurrentUser);\t        // Create a security context for a new key that we will use to store our shared secret key.\t        // The security context will restrict access to only our user.\t        string user = Environment.UserDomainName + \"\\\\\" + Environment.UserName;\t        RegistrySecurity security = new RegistrySecurity();\t        RegistryAccessRule rule = new RegistryAccessRule(user,\t                        RegistryRights.FullControl,\t                        InheritanceFlags.ContainerInherit,\t                        PropagationFlags.None,\t                        AccessControlType.Allow);\t        security.AddAccessRule(rule);\t        // Actually create the new registry key and apply the security context we just came up with.\t        Registry.CurrentUser.CreateSubKey(registryKeyName,                        RegistryKeyPermissionCheck.ReadWriteSubTree,                        security);        \t\t// Write the encrypted string into the registry       \t\tRegistry.SetValue(fullRegistryKeyPath, registryEncValueName, encryptedValBytes);   \t}    \tpublic byte[] RetrieveHMACKey()    \t{        \t\t// Read the encrypted hmac signing key value from the registry\t         byte[] encryptedValBytes = Registry.GetValue(fullRegistryKeyPath, registryHMACValueName, null) as byte[];\t        // Decrypt the encrypted bytes using DPAPI and return       \t\t byte[] decryptedValBytes = ProtectedData.Unprotect(encryptedValBytes, null,\t            DataProtectionScope.CurrentUser);        return decryptedValBytes;    }    public byte[] RetrieveSymmKey()    {        // Read the encrypted symmetric key value from the registry         byte[] encryptedValBytes = Registry.GetValue(fullRegistryKeyPath, registryEncValueName, null) as byte[];        // Decrypt the encrypted bytes using DPAPI and return        byte[] decryptedValBytes = ProtectedData.Unprotect(encryptedValBytes,null,                DataProtectionScope.CurrentUser);        return decryptedValBytes;     }}",
      "// Fetch some details to be passed to the remote web application// e.g.: //// string uid = UserInfo.GetUID(user);string user = HttpContext.Current.User.Identity.Name;bool adminRole = HttpContext.Current.User.IsInRole(\"admin\");// We create a concatenated cookie value containing all of the details// that we would like to pass to the remote application.// We also include a DateTime string, to help mitigate the risk of session replay//cookieval = user + \"|\" + uid + \"|\" + adminRole.ToString() + \"|\" +         DateTime.Now.ToBinary().ToString();// Considerations to help protect against replay://   //  - Minimize the interval during which cookies are accepted from the remote site//  - Consider implementing a sequence ID, in which used sessions are marked accordingly//    in the database//  - Leverage a secure session transport (SSL)//  - Use restrictive cookie settings (Path, HttpOnly, Secure mode, restrict the domain//          + Consider implementing a sub domain to be used by applications in which//            cookie sharing is necessary (e.g. .ourapps.microsoft.com)",
      "// Instantiate our DPAPI helper functionsDPAPIUtil dputil = new DPAPIUtil();// Retrieve the symmetric encryption key we wish to usebyte[] enckey = dputil.RetrieveSymmKey();// Create the Crypto providerRijndael rij = Rijndael.Create();// Load the DPAPI protected keyrij.Key = enckey;// By default we have a random IV from when we made the call to Rijndael.Create()// We'll just prepend the IV to the encrypted value so the remote app can use our// random IV. Alternatively it is possible to generate a new Random Initialization// Vector manually by calling://   rij.GenerateIV();MemoryStream ms = new MemoryStream();CryptoStream ecs = new CryptoStream(ms, rij.CreateEncryptor(), CryptoStreamMode.Write);// Create the HMAC for our plaintext value// Now we need to validate the HMAC to ensure the message wasn't altered// We use a distinctly seperate HMAC key to ensure that if the encryption key// is compromised message integrity may still be guaranteed and protects us against// parameter tampering.HMACSHA256 hmac = new HMACSHA256();// Retrieve the HMAC key from the encrypted registry value using our DPAPI helperhmac.Key = dputil.RetrieveHMACKey();// Compute the HMAC on our plaintext cookie stringbyte[] hmacValue = hmac.ComputeHash(UnicodeEncoding.ASCII.GetBytes(cookieval));// Write the cookie contents to our cryptostreamecs.Write(UnicodeEncoding.ASCII.GetBytes(cookieval), 0, cookieval.Length);// Write the HMAC to our cryptostreamecs.Write(hmacValue, 0, hmacValue.Length);ecs.Close();// Create a byte array to store our encrypted value plus IVbyte[] encryptedValueWithIV = new byte[rij.IV.Length + ms.ToArray().Length];// Prepend the IV to our encrypted value. The initialization vector need not be kept// secret, in fact randomizing this value for each encryptionArray.Copy(rij.IV, encryptedValueWithIV, rij.IV.Length);Array.Copy(ms.ToArray(), 0, encryptedValueWithIV, rij.IV.Length, ms.ToArray().Length);string encryptedCookie = Convert.ToBase64String(encryptedValueWithIV);HttpCookie chocolateChip = new HttpCookie(\"CookieJar\", encryptedCookie);// Ensure that proper secure cookie modes are set://// Make cookies unavailable to client side scriptschocolateChip.HttpOnly = true;// Set the cookie transport mechanism to SSL onlychocolateChip.Secure = true;// Ideally choose a more restrictive domain under which cookies are setchocolateChip.Domain = \".ourapp.microsoft.com\";// Place some restrictions on which web paths can access our cookieschocolateChip.Path = \"/CookieExample/\";// Finally set the cookieResponse.Cookies.Add(chocolateChip);",
      "cookieval = user + \"|\" + uid + \"|\" + adminRole.ToString();HttpCookie chocolateChip = new HttpCookie(\"CookieJar\", cookieval);// Ensure that proper secure cookie modes are set://// Make cookies unavailable to client side scriptschocolateChip.HttpOnly = true;// Set the cookie transport mechanism to SSL onlychocolateChip.Secure = true;// Ideally choose a more restrictive domain under which cookies are setchocolateChip.Domain = \".ourapp.microsoft.com\";// Place some restrictions on which web paths can access our cookieschocolateChip.Path = \"/CookieExample/\";// Finally set the cookieResponse.Cookies.Add(chocolateChip);",
      "using System;using System.Collections.Generic;using System.Security.Cryptography;using System.Security.AccessControl;using System.Text;using Microsoft.Win32;",
      "Set-Cookie: CookieJar=g2rzx1QZ94lAOyUxLGscUbQg1/yyG8Gy4NTCjaK5aupWwSXoAdyuNBer0sFZQiK9dx4kZnY0h8hd9xqEe6d8hMvGoJiGhlOh88cx35Jt9sQIQmjAgCmecj6VhHwKfbrZ; domain=.ourapp.microsoft.com; path=/CookieExample/; secure; HttpOnly"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "a": [
      "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp",
      "http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp",
      "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp",
      "http://en.wikipedia.org/wiki/HMAC",
      "http://msdn2.microsoft.com/en-US/library/system.security.cryptography.hmac.aspx"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp",
      "text": "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp"
    },
    {
      "href": "http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp",
      "text": "http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp"
    },
    {
      "href": "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp",
      "text": "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp"
    },
    {
      "href": "http://en.wikipedia.org/wiki/HMAC",
      "text": "http://en.wikipedia.org/wiki/HMAC"
    },
    {
      "href": "http://msdn2.microsoft.com/en-US/library/system.security.cryptography.hmac.aspx",
      "text": "http://msdn2.microsoft.com/en-US/library/system.security.cryptography.hmac.aspx"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C#</li>\n  </ul>\n  <h1>Summary</h1>\n  <p>The purpose of this code snippet is to illustrate how to securely distribute session data to an external trusted web application when there exists no common server-side session state. It includes topics such as generating an HMAC, inclusion of timestamp and the encryption of session data.</p>\n  <h1>Objectives</h1>\n  <ul>\n    <li>Provide confidentiality of application cookies while in transit even over insecure communication channels, ensuring that they are not exposed to unauthorized users. <li>Provide controls to mitigate session replay <li>Provide controls to protect against information disclosure <li>Provide controls which validate message integrity <li>Protect against users' ability to tamper with cookie parameters which may impact the business logic, authentication or authorization context or overall data integrity through HMAC message signing <li>Ensure the secure storage of a shared secret encryption key and HMAC signing key through use of the Data Protection API (DPAPI)</li></li></li></li></li></li>\n  </ul>\n  <h1>Scenarios</h1>\n  <ul>\n    <li>Web application needs to distribute some details within the session state to another application (e.g. Single sign-on, distributed web server architecture) <li>Web applications are deployed within an infrastructure where it isn't feasible to share session state through a common server-side data store. <li>A shared symmetric key and HMAC signing key are pre-established either out of band or via some other secure communication channel. <li>Developers wish to avoid users from tampering with cookie parameters which may impact the business logic, authentication or authorization context or overall data integrity <li>Securely distributing session state to an external application <li>Providing confidentiality through cookie encryption <li>Providing message integrity through HMAC code embedded in crypto blob <li>Mitigate session replay through use of a session timeout mechanism <li>A user must retrieve data distributed across multiple web servers, each which serve a different purpose, e.g. customer portal, reporting server, etc.</li></li></li></li></li></li></li></li></li>\n  </ul>\n  <h1>Solution Example </h1>\n  <p>\n    <strong>DPAPI Utility Class for retrieval and storage of keys</strong>\n  </p>\n  <pre>public class DPAPIUtil&#123;<br />          private string registryKeyName = \"ACMEWebApplication\";<br />    private string registryEncValueName = \"symmetrickey\";<br />    private string registryHMACValueName = \"hmackey\";<br />    string fullRegistryKeyPath = \"\";<br />    public DPAPIUtil()<br />    &#123;<br />           fullRegistryKeyPath = &#64;\"HKEY_CURRENT_USER\\\" &#43; registryKeyName;<br />    &#125;<br />    public void StoreHMACKey(byte&#91;&#93; val)<br />    &#123;<br />        // Encrypt the HMAC signing key using the DPAPI ProtectedData class.<br />        // <br />        // We're using the CurrentUser scope instead of the MachineKey scope<br />        // so that other, potentially malicious applications cannot access<br />        // this key in the registry and decrypt.<br />        byte&#91;&#93; encryptedValBytes = ProtectedData.Protect(val, null,<br />            DataProtectionScope.CurrentUser);<br />        // Create a security context for a new key that we will use to store our encrypted connection string.<br />        // The security context will restrict access to only our user.<br />        string user = Environment.UserDomainName &#43; \"\\\\\" &#43; Environment.UserName;<br />        RegistrySecurity security = new RegistrySecurity();<br />        RegistryAccessRule rule = new RegistryAccessRule(user,<br />                        RegistryRights.FullControl,<br />                        InheritanceFlags.ContainerInherit,<br />                        PropagationFlags.None,<br />                        AccessControlType.Allow);<br />        security.AddAccessRule(rule);<br />        // Actually create the new registry key and apply the security context we just came up with.<br />        Registry.CurrentUser.CreateSubKey(registryKeyName,<br />                        RegistryKeyPermissionCheck.ReadWriteSubTree,<br />                        security);<br />        // Write the encrypted string into the registry<br />        Registry.SetValue(fullRegistryKeyPath, registryHMACValueName, encryptedValBytes);<br />    &#125;<br />        public void StoreSymmKey(byte&#91;&#93; val)<br />        &#123;<br />                 // Encrypt the shared secret key using the DPAPI ProtectedData class.<br />                 //<br />                 // We're using the CurrentUser scope instead of the MachineKey scope    <br />                 // so that other, potentially malicious applications cannot access      <br />                 // this key in the registry and decrypt.<br />&#9;        byte&#91;&#93; encryptedValBytes = ProtectedData.Protect(val, null,<br />&#9;        DataProtectionScope.CurrentUser);<br />&#9;        // Create a security context for a new key that we will use to store our shared secret key.<br />&#9;        // The security context will restrict access to only our user.<br />&#9;        string user = Environment.UserDomainName &#43; \"\\\\\" &#43; Environment.UserName;<br />&#9;        RegistrySecurity security = new RegistrySecurity();<br />&#9;        RegistryAccessRule rule = new RegistryAccessRule(user,<br />&#9;                        RegistryRights.FullControl,<br />&#9;                        InheritanceFlags.ContainerInherit,<br />&#9;                        PropagationFlags.None,<br />&#9;                        AccessControlType.Allow);<br />&#9;        security.AddAccessRule(rule);<br />&#9;        // Actually create the new registry key and apply the security context we just came up with.<br />&#9;        Registry.CurrentUser.CreateSubKey(registryKeyName,<br />                        RegistryKeyPermissionCheck.ReadWriteSubTree,<br />                        security);<br />        &#9;&#9;// Write the encrypted string into the registry<br />       &#9;&#9;Registry.SetValue(fullRegistryKeyPath, registryEncValueName, encryptedValBytes);<br />   &#9;&#125;<br />    &#9;public byte&#91;&#93; RetrieveHMACKey()<br />    &#9;&#123;<br />        &#9;&#9;// Read the encrypted hmac signing key value from the registry<br />&#9;         byte&#91;&#93; encryptedValBytes = Registry.GetValue(fullRegistryKeyPath, registryHMACValueName, null) as byte&#91;&#93;;<br />&#9;        // Decrypt the encrypted bytes using DPAPI and return<br />       &#9;&#9; byte&#91;&#93; decryptedValBytes = ProtectedData.Unprotect(encryptedValBytes, null,<br />&#9;            DataProtectionScope.CurrentUser);<br />        return decryptedValBytes;<br />    &#125;<br />    public byte&#91;&#93; RetrieveSymmKey()<br />    &#123;<br />        // Read the encrypted symmetric key value from the registry<br />         byte&#91;&#93; encryptedValBytes = Registry.GetValue(fullRegistryKeyPath, registryEncValueName, null) as byte&#91;&#93;;<br />        // Decrypt the encrypted bytes using DPAPI and return<br />        byte&#91;&#93; decryptedValBytes = ProtectedData.Unprotect(encryptedValBytes,null,<br />                DataProtectionScope.CurrentUser);<br />        return decryptedValBytes;<br />     &#125;<br />&#125;</pre>\n  <p>\n    <strong>Setting the encrypted and signed key in our cookie</strong>\n  </p>\n  <p>Establish the cookie value:</p>\n  <pre>// Fetch some details to be passed to the remote web application<br />// e.g.:<br /> //<br />// string uid = UserInfo.GetUID(user);<br />string user = HttpContext.Current.User.Identity.Name;<br />bool adminRole = HttpContext.Current.User.IsInRole(\"admin\");<br />// We create a concatenated cookie value containing all of the details/<br />/ that we would like to pass to the remote application.<br />// We also include a DateTime string, to help mitigate the risk of session replay<br />//cookieval = user &#43; \"&#124;\" &#43; uid &#43; \"&#124;\" &#43; adminRole.ToString() &#43; \"&#124;\" &#43;<br />         DateTime.Now.ToBinary().ToString();<br />// Considerations to help protect against replay:<br />//<br />   //  - Minimize the interval during which cookies are accepted from the remote site<br />//  - Consider implementing a sequence ID, in which used sessions are marked accordingly<br />//    in the database<br />//  - Leverage a secure session transport (SSL)<br />//  - Use restrictive cookie settings (Path, HttpOnly, Secure mode, restrict the domain<br />//          &#43; Consider implementing a sub domain to be used by applications in which<br />//            cookie sharing is necessary (e.g. .ourapps.microsoft.com)</pre>\n  <p>Encrypt, sign and set cookie value:</p>\n  <pre>// Instantiate our DPAPI helper functions<br />DPAPIUtil dputil = new DPAPIUtil();<br />// Retrieve the symmetric encryption key we wish to use<br />byte&#91;&#93; enckey = dputil.RetrieveSymmKey();<br />// Create the Crypto provider<br />Rijndael rij = Rijndael.Create();<br />// Load the DPAPI protected keyrij.Key = enckey;<br />// By default we have a random IV from when we made the call to Rijndael.<br />Create()<br />// We'll just prepend the IV to the encrypted value so the remote app can use our<br />// random IV. Alternatively it is possible to generate a new Random Initialization<br />// Vector manually by calling:<br />//   rij.GenerateIV();<br />MemoryStream ms = new MemoryStream();<br />CryptoStream ecs = new CryptoStream(ms, rij.CreateEncryptor(), CryptoStreamMode.Write);<br />// Create the HMAC for our plaintext value<br />// Now we need to validate the HMAC to ensure the message wasn't altered<br />// We use a distinctly seperate HMAC key to ensure that if the encryption key<br />// is compromised message integrity may still be guaranteed and protects us against<br />// parameter tampering.HMACSHA256 hmac = new HMACSHA256();<br />// Retrieve the HMAC key from the encrypted registry value using our DPAPI helperhmac.<br />Key = dputil.RetrieveHMACKey();<br />// Compute the HMAC on our plaintext cookie string<br />byte&#91;&#93; hmacValue = hmac.ComputeHash(UnicodeEncoding.ASCII.GetBytes(cookieval));<br />// Write the cookie contents to our cryptostreamecs.Write(UnicodeEncoding.ASCII.<br />GetBytes(cookieval), 0, cookieval.Length);<br />// Write the HMAC to our cryptostreamecs.Write(hmacValue, 0, hmacValue.Length);<br />ecs.Close();<br />// Create a byte array to store our encrypted value plus IV<br />byte&#91;&#93; encryptedValueWithIV = new byte&#91;rij.IV.Length &#43; ms.ToArray().Length&#93;;<br />// Prepend the IV to our encrypted value. The initialization vector need not be kept<br />// secret, in fact randomizing this value for each encryption<br />Array.Copy(rij.IV, encryptedValueWithIV, rij.IV.Length);<br />Array.Copy(ms.ToArray(), 0, encryptedValueWithIV, rij.IV.Length, ms.ToArray().Length);<br />string encryptedCookie = Convert.ToBase64String(encryptedValueWithIV);<br />HttpCookie chocolateChip = new HttpCookie(\"CookieJar\", encryptedCookie);<br />// Ensure that proper secure cookie modes are set:<br />//<br />// Make cookies unavailable to client side scriptschocolateChip.<br />HttpOnly = true;<br />// Set the cookie transport mechanism to SSL only<br />chocolateChip.Secure = true;<br />// Ideally choose a more restrictive domain under which cookies are set<br />chocolateChip.Domain = \".ourapp.microsoft.com\";<br />// Place some restrictions on which web paths can access our cookies<br />chocolateChip.Path = \"/CookieExample/\";<br />// Finally set the cookieResponse.Cookies.Add(chocolateChip);</pre>\n  <h1>Problem Example</h1>\n  <p>The following example demonstrates a poorly designed cookie sharing mechanism between two web applications where encryption and key signing are not used:</p>\n  <p>Set the cookie value:</p>\n  <pre>cookieval = user &#43; \"&#124;\" &#43; uid &#43; \"&#124;\" &#43; adminRole.ToString();<br />HttpCookie chocolateChip = new HttpCookie(\"CookieJar\", cookieval);<br />// Ensure that proper secure cookie modes are set:<br />//<br />// Make cookies unavailable to client side scripts<br />chocolateChip.HttpOnly = true;<br />// Set the cookie transport mechanism to SSL only<br />chocolateChip.Secure = true;<br />// Ideally choose a more restrictive domain under which cookies are set<br />chocolateChip.Domain = \".ourapp.microsoft.com\";<br />// Place some restrictions on which web paths can access our cookies<br />chocolateChip.Path = \"/CookieExample/\";<br />// Finally set the cookieResponse.Cookies.Add(chocolateChip);</pre>\n  <p>Issues found in this example:</p>\n  <ul>\n    <li>Sensitive information is exposed within the cookie, potentially containing data which should never be exposed to a user <li>Cookies are vulnerable to tampering by the user (and intermediaries in the event of a man-in-the-middle scenario) <li>Cookies are vulnerable to replay <li>If cookies are altered in transit there is no way to detect such a situation <li>Any web application in the .ourapp.microsoft.com domain can access the cookie.</li></li></li></li></li>\n  </ul>\n  <p>Careful consideration should be given to other common coding mistakes not shown in the code above:</p>\n  <ul>\n    <li>Encryption using weak encryption keys (typically &lt;128, but dependent on encryption algorithms) <li>Use of unproven or homegrown encryption algorithms <li>Use of improper encryption types (e.g. stream cipher instead of block cipher) <li>Use of improper encryption modes (lack of chaining blocks) <ul><li>Leads to easier cookie tampering even with encryption (replace or reorder blocks) <li>Leads to information disclosure of common values transmitted</li></li></ul><li>Failure to choose random initialization vector (IV) <ul><li>Leads to information disclosure of common values transmitted</li></ul><li>Failure to include HMAC <ul><li>Encrypted values may still be altered and go undetected</li></ul><li>HMAC keys and encryption keys are equal <ul><li>Compromise of one key leads to total system compromise</li></ul><li>Failure to include timestamp or session id <ul><li>Encrypted value may be replayed</li></ul></li></li></li></li></li></li></li></li>\n  </ul>\n  <h1>Test Case</h1>\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\n  <pre>using System;<br />using System.Collections.Generic;<br />using System.Security.Cryptography;<br />using System.Security.AccessControl;<br />using System.Text;<br />using Microsoft.Win32;</pre>\n  <p>Browsing to the web application containing the solution code will establish an encrypted and signed cookie value.</p>\n  <p>The following cookie value is set by the server with secure cookie options:</p>\n  <pre>Set-Cookie: CookieJar=g2rzx1QZ94lAOyUxLGscUbQg1/yyG8Gy4NTCjaK5a<br />upWwSXoAdyuNBer0sFZQiK9dx4kZnY0h8hd9xqEe6d8hMvGoJiGhlOh88cx35Jt<br />9sQIQmjAgCmecj6VhHwKfbrZ; domain=.ourapp.microsoft.com; path=/CookieExample/; secure; HttpOnly</pre>\n  <p>Observe cookie values which contain the following properties:</p>\n  <ul>\n    <li>Change with each encryption operation (due to random IV, and appended timestamp value) <li>Base64 decoding the \"CookieJar\" value yields and encrypted array of bytes</li></li>\n  </ul>\n  <h1>Expected Result</h1>\n  <p>HTTP Response header:</p>\n  <p>Set-Cookie: CookieJar=g2rzx1QZ94lAOyUxLGscUbQg1/yyG8Gy4NTCjaK5aupWwSXoAdyuNBer0sFZQiK9dx4kZnY0h8hd9xqEe6d8hMvGoJiGhlOh88cx35Jt9sQIQmjAgCmecj6VhHwKfbrZ; domain=.ourapp.microsoft.com; path=/CookieExample/; secure; HttpOnly</p>\n  <h1>More Information</h1>\n  <p>This implementation makes use of the DPAPI user key as opposed to the machine key. This means that the AES shared secret and HMAC signing key will only be accessible from programs that run within the same user context and will not be accessible by other applications running under different service accounts. This adds additional protection against a rogue application (such as a virus or trojan) compromising connection string data but could pose problems where sharing between mutliple applications running under different accounts is required. We recommend this approach whenever other programs will not need to access the same key material for encryption operations. Encryption of the message alone is not sufficient to protect against message tampering, as such we've included the use of an HMAC (or message integrity check, which relies on a shared secret key). The HMAC is generated by using a seperate shared secret and relies on a strong one-way hashing algorithm to generate a unique hash for the given message. Even with cookie encryption and signing, a user who intercepts these cookies may replay them to the server unless there is a value contained within the message designating the sequence number of the message. The symmetric shared key and HMAC signing key must be securely stored in order to maintain the confidentiality of data encrypted using these keys. In this example, we make use of the DPAPI in order to transparently stored the shared key pair encrypted with in the registry. The details of AES and HMAC message signing are beyond the scope of this article. However the following topics are discussed in the articles in Additional Resources:</p>\n  <ul>\n    <li>Encrypt a string via a block cipher (using AES) <li>Generate a Message Authentication Code (HMAC)</li></li>\n  </ul>\n  <h1>Additional Resources</h1>\n  <ul>\n    <li>HTTP Request Cookies Class: <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp\">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwebhttprequestclasscookiestopic.asp</a><li>HTTP Cookies: <a href=\"http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp\">http://msdn.microsoft.com/library/en-us/wininet/wininet/http_cookies.asp</a><li>Cookie Members: <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp\">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemnetcookiememberstopic.asp</a><li>HMAC definition: <a href=\"http://en.wikipedia.org/wiki/HMAC\">http://en.wikipedia.org/wiki/HMAC</a><li>HMAC class: <a href=\"http://msdn2.microsoft.com/en-US/library/system.security.cryptography.hmac.aspx\">http://msdn2.microsoft.com/en-US/library/system.security.cryptography.hmac.aspx</a></li></li></li></li></li>\n  </ul>\n  <hr />\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}