{
  "id": "00000000-0000-0000-0000-00000060ef71",
  "checksum": "51ce465886a0b582f1e36b6d2f91c6e863b0f367",
  "words": {
    "applies": [
      "h2"
    ],
    "to": [
      "h2",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "aspnet": [
      "ul",
      "li",
      "ol",
      "li"
    ],
    "what": [
      "h2"
    ],
    "do": [
      "h2"
    ],
    "store": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "encryption": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "pre",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "keys": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "in": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "registry": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "and": [
      "p",
      "p",
      "ol",
      "li",
      "pre",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "protect": [
      "p",
      "ol",
      "li",
      "strong",
      "ul",
      "li",
      "a"
    ],
    "them": [
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "with": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li"
    ],
    "dpapi": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "ul",
      "li",
      "a"
    ],
    "why": [
      "h2"
    ],
    "should": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "stored": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "using": [
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "prevent": [
      "p"
    ],
    "from": [
      "p"
    ],
    "being": [
      "p"
    ],
    "recovered": [
      "p"
    ],
    "by": [
      "p"
    ],
    "an": [
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "ul",
      "li"
    ],
    "gains": [
      "p"
    ],
    "ability": [
      "p"
    ],
    "read": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "files": [
      "p"
    ],
    "on": [
      "p"
    ],
    "server": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "a": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "defense": [
      "p"
    ],
    "depth": [
      "p"
    ],
    "measure": [
      "p"
    ],
    "really": [
      "p"
    ],
    "comes": [
      "p"
    ],
    "into": [
      "p"
    ],
    "play": [
      "p"
    ],
    "once": [
      "p"
    ],
    "has": [
      "p"
    ],
    "gained": [
      "p"
    ],
    "access": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "encrypted": [
      "p",
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p"
    ],
    "similar": [
      "p"
    ],
    "manner": [
      "p"
    ],
    "as": [
      "p"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "defeated": [
      "p"
    ],
    "was": [
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "recover": [
      "p",
      "p"
    ],
    "he": [
      "p"
    ],
    "would": [
      "p"
    ],
    "then": [
      "p"
    ],
    "too": [
      "p"
    ],
    "decrypt": [
      "p"
    ],
    "how": [
      "h2"
    ],
    "protected": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "storage": [
      "p",
      "title"
    ],
    "apis": [
      "p",
      "title"
    ],
    "identify": [
      "ol",
      "li",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "li",
      "li",
      "strong"
    ],
    "code": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li"
    ],
    "that": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li"
    ],
    "uses": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "find": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "handles": [
      "ol",
      "li"
    ],
    "search": [
      "ol",
      "li"
    ],
    "for": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li"
    ],
    "systemsecurity.cryptography": [
      "ol",
      "li",
      "em"
    ],
    "namespace": [
      "ol",
      "li"
    ],
    "cryptographic": [
      "ol",
      "li"
    ],
    "functions": [
      "ol",
      "li"
    ],
    "key": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "each": [
      "ol",
      "li"
    ],
    "piece": [
      "ol",
      "li"
    ],
    "stores": [
      "ol",
      "li"
    ],
    "make": [
      "ol",
      "li"
    ],
    "sure": [
      "ol",
      "li"
    ],
    "following": [
      "ol",
      "li"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "rijkey": [
      "ol",
      "li",
      "em"
    ],
    "protectedkey": [
      "ol",
      "li",
      "em",
      "pre"
    ],
    "create": [
      "ol",
      "ol",
      "li",
      "li",
      "strong",
      "pre",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "security": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong",
      "pre",
      "pre",
      "pre"
    ],
    "context": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "strong"
    ],
    "it": [
      "ol",
      "li"
    ],
    "recommended": [
      "ol",
      "li"
    ],
    "take": [
      "ol",
      "li"
    ],
    "full": [
      "ol",
      "li"
    ],
    "advantage": [
      "ol",
      "li"
    ],
    "registry's": [
      "ol",
      "li"
    ],
    "control": [
      "ol",
      "li"
    ],
    "features": [
      "ol",
      "li"
    ],
    "new": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "grants": [
      "ol",
      "li"
    ],
    "only": [
      "ol",
      "li"
    ],
    "application": [
      "ol",
      "li"
    ],
    "user": [
      "ol",
      "li",
      "pre"
    ],
    "apply": [
      "ol",
      "li",
      "pre"
    ],
    "this": [
      "ol",
      "li"
    ],
    "will": [
      "ol",
      "li"
    ],
    "used": [
      "ol",
      "li"
    ],
    "storing": [
      "ol",
      "li"
    ],
    "byte]": [
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "protecteddataprotect(rij.key,": [
      "pre"
    ],
    "null": [
      "pre"
    ],
    "dataprotectionscopecurrentuser);\n//": [
      "pre"
    ],
    "context\nstring": [
      "pre"
    ],
    "environmentuserdomainname": [
      "pre"
    ],
    "+": [
      "pre",
      "pre"
    ],
    "\"\\\\\"": [
      "pre"
    ],
    "environmentusername;\nregistrysecurity": [
      "pre"
    ],
    "registrysecurity);\nregistryaccessrule": [
      "pre"
    ],
    "rule": [
      "pre"
    ],
    "registryaccessruleuser,\n\tregistryrights.fullcontrol,\n\tinheritanceflags.containerinherit,\n\tpropagationflags.none,\n\taccesscontroltype.allow);\nsecurity.addaccessrule(rule);\n//": [
      "pre"
    ],
    "context\nregistry.currentuser.createsubkey(\"aessymmetrickey\",\n\tregistrykeypermissioncheck.readwritesubtree,\n\tsecurity);\n//store": [
      "pre"
    ],
    "registry\nregistry.setvalue(@\"hkey_current_user\\aessymmetrickey\",\n\t\"keydata\",\n\tprotectedkey);": [
      "pre"
    ],
    "additional": [
      "h2"
    ],
    "resources": [
      "h2"
    ],
    "more": [
      "ul",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "protecteddataprotect": [
      "ul",
      "li",
      "em"
    ],
    "method": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx": [
      "ul",
      "li",
      "a"
    ],
    "related": [
      "h2"
    ],
    "items": [
      "h2"
    ],
    "symmetric": [
      "ul",
      "li",
      "a"
    ],
    "generate": [
      "ul",
      "li",
      "a"
    ],
    "rsa": [
      "ul",
      "li",
      "a"
    ],
    "your": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h2": [
      "Applies To",
      "What to Do",
      "Why",
      "How",
      "Additional Resources",
      "Related Items"
    ],
    "ul": [
      "ASP.NET",
      "For more information about the ProtectedData.Protect method, see http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx",
      "Create And Store a Symmetric Encryption Key\n Generate RSA Keys And Store Them in Registry Using DPAPI\n Protect Your Encryption Keys"
    ],
    "li": [
      "ASP.NET",
      "Identify all code that uses stored encryption keys. Find all code that handles stored encryption keys. Search for the uses of the System.Security.Cryptography namespace to find code that uses ASP.NET cryptographic functions.",
      "Protect the encryption key with DPAPI. For each piece of code that stores encryption keys, make sure that the encryption key is protected with DPAPI. In the following example, rij.Key is the encryption key and protectedKey is the key protected with DPAPI.",
      "Create a security context. It is recommended to store the protected encryption keys in the registry. To take the full advantage of the registry's access control features, create a new security context that grants access only to the application user. Apply this security context to the registry key that will be used for storing the encryption key. Store the encryption key protected with DPAPI in the registry key. For example:",
      "For more information about the ProtectedData.Protect method, see http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx",
      "Create And Store a Symmetric Encryption Key",
      "Generate RSA Keys And Store Them in Registry Using DPAPI",
      "Protect Your Encryption Keys"
    ],
    "p": [
      "Store encryption keys in registry and protect them with DPAPI.",
      "Encryption keys should be stored using DPAPI to prevent them from being recovered by an attacker if the attacker gains the ability to read arbitrary files on the server. Encryption is a defense in depth measure. Encryption really comes into play once the attacker has gained access to the stored encrypted data. If the encryption keys are stored in a similar manner as the encrypted data, the purpose of encryption is defeated. If the attacker was able to recover the encrypted data, he would then be able to recover the keys too and decrypt the data.",
      "To store encryption keys using protected storage APIs:"
    ],
    "ol": [
      "Identify all code that uses stored encryption keys. Find all code that handles stored encryption keys. Search for the uses of the System.Security.Cryptography namespace to find code that uses ASP.NET cryptographic functions.\n Protect the encryption key with DPAPI. For each piece of code that stores encryption keys, make sure that the encryption key is protected with DPAPI. In the following example, rij.Key is the encryption key and protectedKey is the key protected with DPAPI.\n Create a security context. It is recommended to store the protected encryption keys in the registry. To take the full advantage of the registry's access control features, create a new security context that grants access only to the application user. Apply this security context to the registry key that will be used for storing the encryption key. Store the encryption key protected with DPAPI in the registry key. For example:"
    ],
    "strong": [
      "Identify all code that uses stored encryption keys.",
      "Protect the encryption key with DPAPI.",
      "Create a security context."
    ],
    "em": [
      "System.Security.Cryptography",
      "rij.Key",
      "protectedKey",
      "ProtectedData.Protect"
    ],
    "pre": [
      "byte[] protectedKey = ProtectedData.Protect(rij.Key, null, DataProtectionScope.CurrentUser);\n// Create a security context.\nstring user = Environment.UserDomainName + \"\\\\\" + Environment.UserName;\nRegistrySecurity security = new RegistrySecurity();\nRegistryAccessRule rule = new RegistryAccessRule(user,\n\tRegistryRights.FullControl,\n\tInheritanceFlags.ContainerInherit,\n\tPropagationFlags.None,\n\tAccessControlType.Allow);\nsecurity.AddAccessRule(rule);\n// Create a new registry key and apply the security context.\nRegistry.CurrentUser.CreateSubKey(\"AESSymmetricKey\",\n\tRegistryKeyPermissionCheck.ReadWriteSubTree,\n\tsecurity);\n//Store the encryption key in the registry.\nRegistry.SetValue(@\"HKEY_CURRENT_USER\\AESSymmetricKey\",\n\t\"KeyData\",\n\tprotectedKey);"
    ],
    "a": [
      "http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx",
      "Create And Store a Symmetric Encryption Key",
      "Generate RSA Keys And Store Them in Registry Using DPAPI",
      "Protect Your Encryption Keys"
    ]
  },
  "links": [
    {
      "href": "http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx",
      "text": "http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx"
    },
    {
      "href": "Create And Store a Symmetric Encryption Key",
      "text": "Create And Store a Symmetric Encryption Key"
    },
    {
      "href": "Generate RSA Keys And Store Them in Registry Using DPAPI",
      "text": "Generate RSA Keys And Store Them in Registry Using DPAPI"
    },
    {
      "href": "Protect Your Encryption Keys",
      "text": "Protect Your Encryption Keys"
    }
  ],
  "html": "<h2>Applies To</h2><ul><li> ASP.NET</li>\n</ul><h2>What to Do</h2><p>Store encryption keys in registry and protect them with DPAPI.\n</p><h2>Why</h2><p>Encryption keys should be stored using DPAPI to prevent them from being recovered by an attacker if the attacker gains the ability to read arbitrary files on the server. Encryption is a defense in depth measure. Encryption really comes into play once the attacker has gained access to the stored encrypted data. If the encryption keys are stored in a similar manner as the encrypted data, the purpose of encryption is defeated. If the attacker was able to recover the encrypted data, he would then be able to recover the keys too and decrypt the data.\n</p><h2>How</h2><p>To store encryption keys using protected storage APIs:\n</p><ol>\n<li> <strong>Identify all code that uses stored encryption keys.</strong> Find all code that handles stored encryption keys. Search for the uses of the <em>System.Security.Cryptography</em> namespace to find code that uses ASP.NET cryptographic functions.</li>\n<li> <strong>Protect the encryption key with DPAPI.</strong> For each piece of code that stores encryption keys, make sure that the encryption key is protected with DPAPI. In the following example, <em>rij.Key</em> is the encryption key and <em>protectedKey</em> is the key protected with DPAPI.</li>\n<li> <strong>Create a security context.</strong> It is recommended to store the protected encryption keys in the registry. To take the full advantage of the registry's access control features, create a new security context that grants access only to the application user. Apply this security context to the registry key that will be used for storing the encryption key. Store the encryption key protected with DPAPI in the registry key. For example:</li>\n</ol><pre>byte[] protectedKey = ProtectedData.Protect(rij.Key, null, DataProtectionScope.CurrentUser);\n// Create a security context.\nstring user = Environment.UserDomainName + \"\\\\\" + Environment.UserName;\nRegistrySecurity security = new RegistrySecurity();\nRegistryAccessRule rule = new RegistryAccessRule(user,\n\tRegistryRights.FullControl,\n\tInheritanceFlags.ContainerInherit,\n\tPropagationFlags.None,\n\tAccessControlType.Allow);\nsecurity.AddAccessRule(rule);\n// Create a new registry key and apply the security context.\nRegistry.CurrentUser.CreateSubKey(\"AESSymmetricKey\",\n\tRegistryKeyPermissionCheck.ReadWriteSubTree,\n\tsecurity);\n//Store the encryption key in the registry.\nRegistry.SetValue(@\"HKEY_CURRENT_USER\\AESSymmetricKey\",\n\t\"KeyData\",\n\tprotectedKey);\n</pre><h2>Additional Resources</h2><ul><li> For more information about the <em>ProtectedData.Protect</em> method, see <a href=\"http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx\">http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx</a></li>\n</ul><h2>Related Items</h2><ul><li> <a href=\"Create And Store a Symmetric Encryption Key\">Create And Store a Symmetric Encryption Key</a></li>\n<li> <a href=\"Generate RSA Keys And Store Them in Registry Using DPAPI\">Generate RSA Keys And Store Them in Registry Using DPAPI</a></li>\n<li> <a href=\"Protect Your Encryption Keys\">Protect Your Encryption Keys</a></li></ul>"
}