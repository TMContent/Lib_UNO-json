{
  "id": "55488f2e-ed85-4f0f-9f83-1d90a5d10bd0",
  "checksum": "e2a2be7ebee37a510f3986be10d876fc21818441",
  "words": {
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "pre",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "ensure": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "passwords": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "p",
      "title"
    ],
    "are": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "title"
    ],
    "cleared": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "p"
    ],
    "from": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "ol",
      "li",
      "p"
    ],
    "memory": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "title"
    ],
    "after": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "sensitive": [
      "p"
    ],
    "data": [
      "p",
      "ol",
      "li",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "a"
    ],
    "used": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "establish": [
      "p"
    ],
    "a": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "trust": [
      "p"
    ],
    "relationship": [
      "p"
    ],
    "leaving": [
      "p"
    ],
    "them": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "title"
    ],
    "their": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "expose": [
      "p"
    ],
    "an": [
      "p",
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "attacker": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "identify": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "all": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "password": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "p",
      "p",
      "p"
    ],
    "examine": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "li",
      "p"
    ],
    "application": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "and": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "places": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "inside": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li"
    ],
    "its": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "base": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "user": [
      "ol",
      "li",
      "p"
    ],
    "common": [
      "ol",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "creating": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "new": [
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "users": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li"
    ],
    "modifying": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "existing": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "changing": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "credentials": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "authenticating": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "verify": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "li",
      "p",
      "strong"
    ],
    "stored": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "mutable": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "objects": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "strong",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "p"
    ],
    "each": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "identified": [
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "be": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "object": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li"
    ],
    "such": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "as": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "character": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "em",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "em",
      "p"
    ],
    "array": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "ol",
      "li",
      "p"
    ],
    "this": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "allows": [
      "ol",
      "li",
      "p"
    ],
    "the": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "overwritten": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "not": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "p",
      "title"
    ],
    "rely": [
      "ol",
      "li",
      "p"
    ],
    "on": [
      "ol",
      "li",
      "p"
    ],
    "garbage": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "collector": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "immutable": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "do": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "allow": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "space": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "modified": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "allocated": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "java": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "strings": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "containing": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "is": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "quickly": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "possible": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "passed": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "between": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "function": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "class": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "or": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "boundaries": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "except": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "when": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "absolutely": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "necessarynote": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "examples": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "below": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "difference": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "byte": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "em",
      "em",
      "ul",
      "ul",
      "li",
      "em",
      "li",
      "em",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "em",
      "em"
    ],
    "cannot": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "guarantee": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "will": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "overwrite": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "same": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "location": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "heap": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "already": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "occupied": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "by": [
      "ol",
      "li",
      "ul",
      "li",
      "p"
    ],
    "however": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "if": [
      "ol",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "you": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "variable": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "element": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "byte],": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "then": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "have": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "contains": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "actual": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "dataexamples": [
      "ol",
      "li",
      "ul",
      "li"
    ],
    "of": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "which": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li"
    ],
    "storing": [
      "ol",
      "ol",
      "li",
      "li",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "char": [
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "em",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "em"
    ],
    "char]": [
      "ol",
      "ol",
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li",
      "em",
      "li",
      "li",
      "pre",
      "pre",
      "em",
      "pre"
    ],
    "byte]examples": [
      "ol",
      "li",
      "ul",
      "li",
      "ul",
      "li"
    ],
    "passwordsstring": [
      "ol",
      "li",
      "ul",
      "li",
      "ul"
    ],
    "byte]": [
      "ol",
      "li",
      "ul",
      "li",
      "em",
      "ul",
      "em",
      "li",
      "em"
    ],
    "instances": [
      "ol",
      "li",
      "p",
      "strong",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "that every": [
      "ol",
      "li",
      "p"
    ],
    "where": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "been": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "stored is": [
      "ol",
      "li",
      "p"
    ],
    "setting": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "pointer": [
      "ol",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "null": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "pre",
      "pre"
    ],
    "does": [
      "ol",
      "li",
      "p",
      "p"
    ],
    "clear": [
      "ol",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "strong"
    ],
    "memory-": [
      "ol",
      "li",
      "p"
    ],
    "value": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "assigned": [
      "ol",
      "li",
      "p"
    ],
    "zero": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "h1",
      "h1"
    ],
    "improper": [
      "ol",
      "li",
      "p"
    ],
    "removal": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "pass": [
      "ol",
      "ol",
      "li",
      "li",
      "pre",
      "pre",
      "p",
      "pre",
      "pre"
    ],
    "=": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "getpassword);...//insufficient": [
      "ol",
      "li",
      "pre"
    ],
    "removing": [
      "ol",
      "li",
      "pre"
    ],
    "memorypass": [
      "ol",
      "li",
      "pre"
    ],
    "proper": [
      "ol",
      "li",
      "p"
    ],
    "getpassword);...//proper": [
      "ol",
      "li",
      "pre"
    ],
    "clearing": [
      "ol",
      "li",
      "pre",
      "p"
    ],
    "remove": [
      "ol",
      "li",
      "pre"
    ],
    "memoryforint": [
      "ol",
      "li",
      "pre"
    ],
    "i=0": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "ipass.length;": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "i++{": [
      "ol",
      "li",
      "pre"
    ],
    "passi]": [
      "ol",
      "li",
      "pre",
      "pre"
    ],
    "'": [
      "ol",
      "li",
      "pre",
      "pre",
      "pre"
    ],
    "'}pass": [
      "ol",
      "li",
      "pre"
    ],
    "b": [
      "strong",
      "strong"
    ],
    "string": [
      "li",
      "em",
      "p",
      "pre"
    ],
    "fix": [
      "h1"
    ],
    "overwriting": [
      "p"
    ],
    "were": [
      "p"
    ],
    "deallocating": [
      "p"
    ],
    "sufficient": [
      "p"
    ],
    "since": [
      "p",
      "p"
    ],
    "gives": [
      "p"
    ],
    "no": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "deallocated": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "collected": [
      "p"
    ],
    "reused": [
      "p"
    ],
    "aware": [
      "p"
    ],
    "any": [
      "p"
    ],
    "time": [
      "p"
    ],
    "assign": [
      "p"
    ],
    "buffer": [
      "p"
    ],
    "parameter": [
      "p"
    ],
    "copied": [
      "p"
    ],
    "now": [
      "p"
    ],
    "every": [
      "p"
    ],
    "instance": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "keep": [
      "p"
    ],
    "mind": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "considerations": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "locate": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "segments": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "both": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "functions": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "members": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "these": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "structures": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "scattered": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "throughout": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "managed": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "easy": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "centralize": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "handles": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "store": [
      "p",
      "ol",
      "li",
      "p",
      "strong",
      "p"
    ],
    "especially": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "useful": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "required": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "through": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "therefore": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "there": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "certainty": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "current": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "process": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "arrays": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "i.e.": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "char]).": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "once": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "into": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "make": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "sure": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "primitive": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "types": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "a"
    ],
    "int": [
      "p",
      "ol",
      "li",
      "p",
      "em"
    ],
    "but": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "wrapper": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "classes": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "provides": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "integer": [
      "p",
      "ol",
      "li",
      "p",
      "em"
    ],
    "locations": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "cleared/overwritten": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "losing": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "result": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "cleaning": [
      "p",
      "ol",
      "li",
      "p",
      "ul",
      "li"
    ],
    "particular": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "allowing": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "leak": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "problem": [
      "h1"
    ],
    "makes": [
      "p",
      "p",
      "p"
    ],
    "although": [
      "p"
    ],
    "removed": [
      "p"
    ],
    "collection": [
      "p"
    ],
    "called": [
      "p"
    ],
    "erased": [
      "p"
    ],
    "getpassword);...pass": [
      "pre"
    ],
    "nullsystem.gc();": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "explicitly": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "getpassword);...clearpassword(pass);pass": [
      "pre"
    ],
    "null...void": [
      "pre"
    ],
    "clearpasswordchar[]": [
      "pre"
    ],
    "pass{": [
      "pre"
    ],
    "forint": [
      "pre"
    ],
    "i++": [
      "pre"
    ],
    "{": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "more": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "information": [
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "up": [
      "ul",
      "li"
    ],
    "see": [
      "ul",
      "li"
    ],
    "using": [
      "ul",
      "li",
      "a"
    ],
    "finalize": [
      "ul",
      "li",
      "a"
    ],
    "vs": [
      "ul",
      "li",
      "a"
    ],
    "explicit": [
      "ul",
      "li",
      "a"
    ],
    "clean-up": [
      "ul",
      "li",
      "a"
    ],
    "learn": [
      "ul",
      "li"
    ],
    "visit": [
      "ul",
      "li"
    ],
    "left": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Problem Example",
      "Solution Example",
      "Additional Resources"
    ],
    "p": [
      "Ensure that passwords are cleared from memory after use.",
      "Passwords are sensitive data that are used to establish a trust relationship. Leaving them in memory after their use can expose them to an attacker.",
      "Identify all password use. Examine your application and identify all places inside its code base that handle user passwords. Common places include:",
      "Verify that passwords are stored in mutable objects. Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector.",
      "Verify that all password instances are cleared. Ensure that every memory location where passwords have been stored is cleared or overwritten after use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory.",
      "Example of improper password removal:",
      "Example of proper password removal:",
      "Passwords can be cleared by overwriting the memory where the passwords were stored. Deallocating the memory is not sufficient since the Java garbage collector gives no guarantee as to when the deallocated memory will be collected or reused.",
      "Be aware that any time you assign a password to a new buffer, or pass it as a parameter, the password is being copied and is now in memory in a new location. When clearing memory, ensure you clear every instance.",
      "Keep in mind the following considerations when handling passwords: Identify all password use. Locate all code segments, both functions and data members, that handle passwords. These can be functions and data structures scattered throughout the application. If the application cannot be managed as easy, centralize all code that handles passwords. Store passwords in mutable objects. Mutable objects allow the data in them to be overwritten. This is especially useful in Java as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the password instance will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). Java strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing a password into an array, make sure you use arrays of primitive data types such as byte, char, and int but not arrays of the wrapper classes that Java provides for primitive types such as Byte, Character, and Integer. Clear all password instances. Make sure that all memory locations, where passwords have been stored, are cleared/overwritten after their use. Losing a pointer to a password instance can result in not cleaning that particular memory and allowing the password to leak.",
      "Identify all password use. Locate all code segments, both functions and data members, that handle passwords. These can be functions and data structures scattered throughout the application. If the application cannot be managed as easy, centralize all code that handles passwords.",
      "Store passwords in mutable objects. Mutable objects allow the data in them to be overwritten. This is especially useful in Java as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the password instance will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). Java strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing a password into an array, make sure you use arrays of primitive data types such as byte, char, and int but not arrays of the wrapper classes that Java provides for primitive types such as Byte, Character, and Integer.",
      "Clear all password instances. Make sure that all memory locations, where passwords have been stored, are cleared/overwritten after their use. Losing a pointer to a password instance can result in not cleaning that particular memory and allowing the password to leak.",
      "The following code makes a use of a password. Although the pointer to the string is removed after garbage collection is called, Java does not guarantee the data will be erased.",
      "The following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use."
    ],
    "ol": [
      "Identify all password use. Examine your application and identify all places inside its code base that handle user passwords. Common places include:\r\n      \r\n        Creating new users \r\n        Modifying existing users \r\n        Changing credentials for existing users \r\n        Authenticating users\r\n      \r\n    \r\n    \r\n      \r\n        Verify that passwords are stored in mutable objects. Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector. \r\n      \r\n        Verify that passwords are not stored in immutable objects that do not allow their memory space to be modified after being allocated, such as Java strings. \r\n        Ensure that the memory containing the password is overwritten as quickly after use as possible. \r\n        Ensure that passwords are not passed between function, class or object boundaries except when absolutely necessary.Note in the examples below the difference between Byte and byte. Java cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a Byte. However, if you overwrite a byte variable or an element inside a byte[], then you have overwritten the same memory location that contains the actual data.Examples of mutable objects, which should be used for storing passwords: char char[] byte byte[]Examples of immutable objects, which should not be used for storing passwords:String Byte Byte[] Character\r\n      \r\n    \r\n    \r\n      \r\n        Verify that all password instances are cleared. Ensure that every memory location where passwords have been stored is cleared or overwritten after use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory. \r\n      Example of improper password removal:\r\n      char[] pass = getPassword();...//insufficient for removing a password from memorypass = null;\r\n      Example of proper password removal:\r\n      char[] pass = getPassword();...//proper clearing of character array to remove data from memoryfor(int i=0; i<pass.length; i++){       pass[i] = ' ';}pass = null;",
      "Identify all password use. Locate all code segments, both functions and data members, that handle passwords. These can be functions and data structures scattered throughout the application. If the application cannot be managed as easy, centralize all code that handles passwords. Store passwords in mutable objects. Mutable objects allow the data in them to be overwritten. This is especially useful in Java as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the password instance will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). Java strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing a password into an array, make sure you use arrays of primitive data types such as byte, char, and int but not arrays of the wrapper classes that Java provides for primitive types such as Byte, Character, and Integer. Clear all password instances. Make sure that all memory locations, where passwords have been stored, are cleared/overwritten after their use. Losing a pointer to a password instance can result in not cleaning that particular memory and allowing the password to leak."
    ],
    "li": [
      "Identify all password use. Examine your application and identify all places inside its code base that handle user passwords. Common places include:\r\n      \r\n        Creating new users \r\n        Modifying existing users \r\n        Changing credentials for existing users \r\n        Authenticating users",
      "Creating new users",
      "Modifying existing users",
      "Changing credentials for existing users",
      "Authenticating users",
      "Verify that passwords are stored in mutable objects. Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector. \r\n      \r\n        Verify that passwords are not stored in immutable objects that do not allow their memory space to be modified after being allocated, such as Java strings. \r\n        Ensure that the memory containing the password is overwritten as quickly after use as possible. \r\n        Ensure that passwords are not passed between function, class or object boundaries except when absolutely necessary.Note in the examples below the difference between Byte and byte. Java cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a Byte. However, if you overwrite a byte variable or an element inside a byte[], then you have overwritten the same memory location that contains the actual data.Examples of mutable objects, which should be used for storing passwords: char char[] byte byte[]Examples of immutable objects, which should not be used for storing passwords:String Byte Byte[] Character",
      "Verify that passwords are not stored in immutable objects that do not allow their memory space to be modified after being allocated, such as Java strings.",
      "Ensure that the memory containing the password is overwritten as quickly after use as possible.",
      "Ensure that passwords are not passed between function, class or object boundaries except when absolutely necessary.Note in the examples below the difference between Byte and byte. Java cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a Byte. However, if you overwrite a byte variable or an element inside a byte[], then you have overwritten the same memory location that contains the actual data.Examples of mutable objects, which should be used for storing passwords: char char[] byte byte[]Examples of immutable objects, which should not be used for storing passwords:String Byte Byte[] Character",
      "char",
      "char[]",
      "byte",
      "byte[]Examples of immutable objects, which should not be used for storing passwords:",
      "String",
      "Byte",
      "Byte[]",
      "Character",
      "Verify that all password instances are cleared. Ensure that every memory location where passwords have been stored is cleared or overwritten after use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory. \r\n      Example of improper password removal:\r\n      char[] pass = getPassword();...//insufficient for removing a password from memorypass = null;\r\n      Example of proper password removal:\r\n      char[] pass = getPassword();...//proper clearing of character array to remove data from memoryfor(int i=0; i<pass.length; i++){       pass[i] = ' ';}pass = null;",
      "Identify all password use. Locate all code segments, both functions and data members, that handle passwords. These can be functions and data structures scattered throughout the application. If the application cannot be managed as easy, centralize all code that handles passwords.",
      "Store passwords in mutable objects. Mutable objects allow the data in them to be overwritten. This is especially useful in Java as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the password instance will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. char[]). Java strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing a password into an array, make sure you use arrays of primitive data types such as byte, char, and int but not arrays of the wrapper classes that Java provides for primitive types such as Byte, Character, and Integer.",
      "Clear all password instances. Make sure that all memory locations, where passwords have been stored, are cleared/overwritten after their use. Losing a pointer to a password instance can result in not cleaning that particular memory and allowing the password to leak.",
      "For more information about cleaning up data in Java, see: Using Finalize vs Explicit clean-up.",
      "To learn more about primitive data types in Java, visit: Primitive Data Types."
    ],
    "strong": [
      "Identify all password use.",
      "Verify that passwords are stored in mutable objects.",
      "B",
      "b",
      "Verify that all password instances are cleared.",
      "Identify all password use.",
      "Store passwords in mutable objects.",
      "Clear all password instances."
    ],
    "ul": [
      "Creating new users \r\n        Modifying existing users \r\n        Changing credentials for existing users \r\n        Authenticating users",
      "Verify that passwords are not stored in immutable objects that do not allow their memory space to be modified after being allocated, such as Java strings. \r\n        Ensure that the memory containing the password is overwritten as quickly after use as possible. \r\n        Ensure that passwords are not passed between function, class or object boundaries except when absolutely necessary.Note in the examples below the difference between Byte and byte. Java cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a Byte. However, if you overwrite a byte variable or an element inside a byte[], then you have overwritten the same memory location that contains the actual data.Examples of mutable objects, which should be used for storing passwords: char char[] byte byte[]Examples of immutable objects, which should not be used for storing passwords:String Byte Byte[] Character",
      "char char[] byte byte[]Examples of immutable objects, which should not be used for storing passwords:String Byte Byte[] Character",
      "For more information about cleaning up data in Java, see: Using Finalize vs Explicit clean-up. To learn more about primitive data types in Java, visit: Primitive Data Types."
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "em": [
      "Byte",
      "byte",
      "byte[]",
      "char",
      "char[]",
      "byte",
      "byte[]",
      "String",
      "Byte",
      "Byte[]",
      "Character",
      "char[]",
      "byte",
      "char",
      "int",
      "Byte",
      "Character",
      "Integer"
    ],
    "pre": [
      "char[] pass = getPassword();...//insufficient for removing a password from memorypass = null;",
      "char[] pass = getPassword();...//proper clearing of character array to remove data from memoryfor(int i=0; i<pass.length; i++){       pass[i] = ' ';}pass = null;",
      "String pass = getPassword();...pass = null;System.gc();",
      "char[] pass = getPassword();...clearPassword(pass);pass = null;...void clearPassword(char[] pass){      for(int i=0; i<pass.length; i++)      {            pass[i] = ' ';      }}"
    ],
    "a": [
      "Using Finalize vs Explicit clean-up",
      "Primitive Data Types"
    ]
  },
  "links": [
    {
      "href": "http://java.sun.com/developer/TechTips/2000/tt0124.html",
      "text": "Using Finalize vs Explicit clean-up"
    },
    {
      "href": "http://java.sun.com/docs/books/tutorial/java/nutsandbolts/datatypes.html",
      "text": "Primitive Data Types"
    }
  ],
  "html": "<h1>What to Check For</h1>\r\n  <p>Ensure that passwords are cleared from memory after use.</p>\r\n  <h1>Why</h1>\r\n  <p>Passwords are sensitive data that are used to establish a trust relationship. Leaving them in memory after their use can expose them to an attacker.</p>\r\n  <h1>How to Check</h1>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify all password use. </strong>Examine your application and identify all places inside its code base that handle user passwords. Common places include:</p>\r\n      <ul>\r\n        <li>Creating new users </li>\r\n        <li>Modifying existing users </li>\r\n        <li>Changing credentials for existing users </li>\r\n        <li>Authenticating users</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that passwords are stored in mutable objects. </strong>Each identified password should be stored in a mutable object, such as a character array. This allows the password to be overwritten in memory and not rely on the garbage collector. </p>\r\n      <ul>\r\n        <li>Verify that passwords are not stored in immutable objects that do not allow their memory space to be modified after being allocated, such as Java strings. </li>\r\n        <li>Ensure that the memory containing the password is overwritten as quickly after use as possible. </li>\r\n        <li>Ensure that passwords are not passed between function, class or object boundaries except when absolutely necessary.<br /><br />Note in the examples below the difference between <strong>B</strong>yte and <strong>b</strong>yte. Java cannot guarantee that it will overwrite the same memory location in the heap that is already occupied by a <em>Byte</em>. However, if you overwrite a <em>byte</em> variable or an element inside a <em>byte[]</em>, then you have overwritten the same memory location that contains the actual data.<br /><br />Examples of mutable objects, which should be used for storing passwords: <ul><li><em>char </em></li><li><em>char[] </em></li><li><em>byte </em></li><li><em>byte[]<br /></em><br />Examples of immutable objects, which should not be used for storing passwords:<br /></li><li><em>String </em></li><li><em>Byte </em></li><li><em>Byte[] </em></li><li><em>Character</em></li></ul></li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that all password instances are cleared. </strong>Ensure that&nbsp;every memory location where passwords have been stored&nbsp;is cleared or overwritten after use. Setting a pointer to NULL does not clear or overwrite the memory- a new value must be assigned to it. For a character array, setting each char to a new value, such as a space or a zero, will overwrite the value stored in memory. </p>\r\n      <p>Example of improper password removal:</p>\r\n      <pre>char[] pass = getPassword();<br />...<br />//insufficient for removing a password from memory<br />pass = null;</pre>\r\n      <p>Example of proper password removal:</p>\r\n      <pre>char[] pass = getPassword();<br />...<br />//proper clearing of character array to remove data from memory<br />for(int i=0; i&lt;pass.length; i++)<br />{<br />       pass[i] = ' ';<br />}<br />pass = null;</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>How to Fix</h1>\r\n  <p>Passwords can be cleared by overwriting the memory where the passwords were stored. Deallocating the memory is not sufficient since the Java garbage collector gives no guarantee as to when the deallocated memory will be collected or reused.</p>\r\n  <p>Be aware that any time you assign a password to a new buffer, or pass it as a parameter, the password is being copied and is now in memory in a new location. When clearing memory, ensure you clear every instance.</p>\r\n  <p />Keep in mind the following considerations when handling passwords: <ol><li><p><strong>Identify all password use. </strong>Locate all code segments, both functions and data members, that handle passwords. These can be functions and data structures scattered throughout the application. If the application cannot be managed as easy, centralize all code that handles passwords. </p></li><li><p><strong>Store passwords in mutable objects. </strong>Mutable objects allow the data in them to be overwritten. This is especially useful in Java as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the password instance will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. <em>char[]</em>). Java strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing a password into an array, make sure you use arrays of primitive data types such as <em>byte</em>, <em>char</em>, and <em>int</em> but not arrays of the wrapper classes that Java provides for primitive types such as <em>Byte</em>, <em>Character</em>, and <em>Integer</em>. </p></li><li><p><strong>Clear all password instances. </strong>Make sure that all memory locations, where passwords have been stored, are cleared/overwritten after their use. Losing a pointer to a password instance can result in not cleaning that particular memory and allowing the password to leak. </p></li></ol><h1>Problem Example</h1><p>The following code makes a use of a password. Although the pointer to the string is removed after garbage collection is called, Java does not guarantee the data will be erased.</p><pre>String pass = getPassword();<br />...<br />pass = null;<br />System.gc();</pre><h1>Solution Example</h1><p>The following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use. </p><pre>char[] pass = getPassword();<br />...<br />clearPassword(pass);<br />pass = null;<br />...<br />void clearPassword(char[] pass)<br />{<br />      for(int i=0; i&lt;pass.length; i++)<br />      {<br />            pass[i] = ' ';<br />      }<br />}</pre><h1>Additional Resources</h1><ul><li>For more information about cleaning up data in Java, see: <a href=\"http://java.sun.com/developer/TechTips/2000/tt0124.html\">Using Finalize vs Explicit clean-up</a>. </li><li>To learn more about primitive data types in Java, visit: <a href=\"http://java.sun.com/docs/books/tutorial/java/nutsandbolts/datatypes.html\">Primitive Data Types</a>.</li></ul><br />"
}