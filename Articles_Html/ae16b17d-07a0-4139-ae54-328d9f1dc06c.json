{
  "id": "ae16b17d-07a0-4139-ae54-328d9f1dc06c",
  "checksum": "d7e435049731705394bae67ca6821e7170feb0a6",
  "words": {
    "5": [
      "ol",
      "li",
      "p"
    ],
    "description": [
      "h2"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "software": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "does": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "not": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "correctly": [
      "p"
    ],
    "calculate": [
      "p",
      "p"
    ],
    "size": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "ul",
      "li",
      "title"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "when": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "allocating": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong"
    ],
    "buffer": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "strong",
      "ul",
      "li",
      "title"
    ],
    "which": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "could": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "lead": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "overflow": [
      "p",
      "p",
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "discussion": [
      "h2"
    ],
    "in": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "languages": [
      "p"
    ],
    "such": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "as": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "c": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "where": [
      "p"
    ],
    "memory": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "management": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "programmer's": [
      "p"
    ],
    "responsibility": [
      "p"
    ],
    "there": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "many": [
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "opportunities": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "ul",
      "li"
    ],
    "error": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "programmer": [
      "p",
      "p"
    ],
    "properly": [
      "p",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "then": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "may": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "too": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "small": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "contain": [
      "p"
    ],
    "data": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "that": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "plans": [
      "p"
    ],
    "write": [
      "p"
    ],
    "-": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "even": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "input": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "strong"
    ],
    "was": [
      "p"
    ],
    "validated": [
      "p"
    ],
    "any": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p"
    ],
    "number": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "problems": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "produce": [
      "p"
    ],
    "incorrect": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "calculation": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "ul",
      "li",
      "title"
    ],
    "but": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "all": [
      "p"
    ],
    "said": [
      "p"
    ],
    "and": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "done": [
      "p"
    ],
    "you're": [
      "p"
    ],
    "going": [
      "p"
    ],
    "run": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "head-first": [
      "p"
    ],
    "into": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "dreaded": [
      "p"
    ],
    "detection": [
      "h2",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "following": [
      "p",
      "p"
    ],
    "methods": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "available": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "detecting": [
      "p",
      "ol",
      "li"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "automated": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li"
    ],
    "static": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li"
    ],
    "analysis": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "strong"
    ],
    "this": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "weakness": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "can": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "often": [
      "ol",
      "li",
      "p"
    ],
    "detected": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li"
    ],
    "using": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "tools": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li"
    ],
    "modern": [
      "ol",
      "li",
      "p"
    ],
    "use": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "flow": [
      "ol",
      "li",
      "p"
    ],
    "or": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "constraint-based": [
      "ol",
      "li",
      "p"
    ],
    "techniques": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "li"
    ],
    "minimize": [
      "ol",
      "li",
      "p"
    ],
    "false": [
      "ol",
      "li",
      "p"
    ],
    "positives": [
      "ol",
      "li",
      "p"
    ],
    "generally": [
      "ol",
      "li",
      "p"
    ],
    "account": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "environmental": [
      "ol",
      "li",
      "p"
    ],
    "considerations": [
      "ol",
      "li",
      "p"
    ],
    "reporting": [
      "ol",
      "li",
      "p"
    ],
    "potential": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "errors": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "calculations": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "make": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "it": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "difficult": [
      "ol",
      "li",
      "p"
    ],
    "users": [
      "ol",
      "li",
      "p"
    ],
    "determine": [
      "ol",
      "li",
      "p"
    ],
    "warnings": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "should": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "investigated": [
      "ol",
      "li",
      "p"
    ],
    "first": [
      "ol",
      "li",
      "p"
    ],
    "example": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "an": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "tool": [
      "ol",
      "li",
      "p"
    ],
    "might": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ol",
      "li",
      "p"
    ],
    "report": [
      "ol",
      "li",
      "p"
    ],
    "overflows": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "originate": [
      "ol",
      "li",
      "p"
    ],
    "from": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "command": [
      "ol",
      "li",
      "p"
    ],
    "line": [
      "ol",
      "li",
      "p"
    ],
    "arguments": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "program": [
      "ol",
      "ol",
      "li",
      "p",
      "li"
    ],
    "expected": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "with": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "setuid": [
      "ol",
      "li",
      "p"
    ],
    "other": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "special": [
      "ol",
      "li",
      "p"
    ],
    "privileges": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "buffer-related": [
      "ol",
      "li",
      "p"
    ],
    "more": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "ul",
      "li"
    ],
    "mature": [
      "ol",
      "li",
      "p"
    ],
    "than": [
      "ol",
      "ol",
      "li",
      "p",
      "li"
    ],
    "most": [
      "ol",
      "li",
      "p"
    ],
    "types": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "dynamic": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "interact": [
      "ol",
      "li",
      "p"
    ],
    "large": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "test": [
      "ol",
      "li",
      "p"
    ],
    "suites": [
      "ol",
      "li",
      "p"
    ],
    "diverse": [
      "ol",
      "li",
      "p"
    ],
    "inputs": [
      "ol",
      "li",
      "p"
    ],
    "fuzz": [
      "ol",
      "li",
      "p"
    ],
    "testing": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li"
    ],
    "fuzzing),": [
      "ol",
      "li",
      "p"
    ],
    "robustness": [
      "ol",
      "li",
      "p"
    ],
    "fault": [
      "ol",
      "li",
      "p"
    ],
    "injection": [
      "ol",
      "li",
      "p"
    ],
    "software's": [
      "ol",
      "li",
      "p"
    ],
    "operation": [
      "ol",
      "li",
      "p"
    ],
    "slow": [
      "ol",
      "li",
      "p"
    ],
    "down": [
      "ol",
      "li",
      "p"
    ],
    "become": [
      "ol",
      "li",
      "p"
    ],
    "unstable": [
      "ol",
      "li",
      "p"
    ],
    "crash": [
      "ol",
      "li",
      "p"
    ],
    "generate": [
      "ol",
      "li",
      "p"
    ],
    "results": [
      "ol",
      "li",
      "p"
    ],
    "without": [
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "visibility": [
      "ol",
      "li",
      "p"
    ],
    "code": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "black": [
      "ol",
      "li",
      "p"
    ],
    "box": [
      "ol",
      "li",
      "p"
    ],
    "able": [
      "ol",
      "li",
      "p"
    ],
    "sufficiently": [
      "ol",
      "li",
      "p"
    ],
    "distinguish": [
      "ol",
      "li",
      "p"
    ],
    "others": [
      "ol",
      "li",
      "p"
    ],
    "requiring": [
      "ol",
      "li",
      "p"
    ],
    "follow-up": [
      "ol",
      "li",
      "p"
    ],
    "manual": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "li",
      "strong"
    ],
    "diagnose": [
      "ol",
      "li",
      "p"
    ],
    "underlying": [
      "ol",
      "li",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "problem": [
      "ol",
      "li",
      "p"
    ],
    "require": [
      "ol",
      "li"
    ],
    "human)": [
      "ol",
      "li"
    ],
    "penetration": [
      "ol",
      "li"
    ],
    "threat": [
      "ol",
      "li"
    ],
    "modeling": [
      "ol",
      "li"
    ],
    "interactive": [
      "ol",
      "li"
    ],
    "allow": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "tester": [
      "ol",
      "li"
    ],
    "record": [
      "ol",
      "li"
    ],
    "modify": [
      "ol",
      "li"
    ],
    "active": [
      "ol",
      "li"
    ],
    "session": [
      "ol",
      "li"
    ],
    "specifically": [
      "ol",
      "li"
    ],
    "useful": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "evaluating": [
      "ol",
      "li"
    ],
    "correctness": [
      "ol",
      "li"
    ],
    "allocation": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "conditions": [
      "ol",
      "li"
    ],
    "cwe-190)": [
      "ol",
      "li"
    ],
    "similar": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "weaknesses": [
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li",
      "p"
    ],
    "have": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "serious": [
      "ol",
      "li"
    ],
    "security": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "impacts": [
      "ol",
      "li"
    ],
    "on": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "these": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "effective": [
      "ol",
      "li"
    ],
    "strictly": [
      "ol",
      "li"
    ],
    "especially": [
      "ol",
      "li",
      "ol",
      "li",
      "p"
    ],
    "case": [
      "ol",
      "li"
    ],
    "related": [
      "ol",
      "li",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "design": [
      "ol",
      "li"
    ],
    "business": [
      "ol",
      "li"
    ],
    "rules": [
      "ol",
      "li"
    ],
    "mitigation": [
      "h2",
      "p",
      "ol",
      "li",
      "p"
    ],
    "allocate": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "sufficient": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "you": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "purpose": [
      "ol",
      "li",
      "p"
    ],
    "transforming": [
      "ol",
      "li",
      "p"
    ],
    "converting": [
      "ol",
      "li",
      "p"
    ],
    "encoding": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "sure": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "enough": [
      "ol",
      "li",
      "p"
    ],
    "handle": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "largest": [
      "ol",
      "li",
      "p"
    ],
    "possible": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "routine": [
      "ol",
      "li",
      "p"
    ],
    "converts": [
      "ol",
      "li",
      "p"
    ],
    "\"&\"": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "characters": [
      "ol",
      "li",
      "p"
    ],
    "html": [
      "ol",
      "li",
      "p"
    ],
    "entity": [
      "ol",
      "li",
      "p"
    ],
    "will": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "need": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "output": [
      "ol",
      "li",
      "p"
    ],
    "at": [
      "ol",
      "li",
      "p"
    ],
    "least": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong"
    ],
    "times": [
      "ol",
      "li",
      "p"
    ],
    "processing": [
      "ol",
      "li",
      "p"
    ],
    "structured": [
      "ol",
      "li",
      "p"
    ],
    "incoming": [
      "ol",
      "li",
      "p"
    ],
    "containing": [
      "ol",
      "li",
      "p"
    ],
    "field": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "followed": [
      "ol",
      "li",
      "p"
    ],
    "by": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "raw": [
      "ol",
      "li",
      "p"
    ],
    "ensure": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "identify": [
      "ol",
      "li",
      "p"
    ],
    "resolve": [
      "ol",
      "li",
      "p"
    ],
    "inconsistencies": [
      "ol",
      "li",
      "p"
    ],
    "between": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "actual": [
      "ol",
      "li",
      "p"
    ],
    "cwe-130).": [
      "ol",
      "li",
      "p"
    ],
    "uses": [
      "ol",
      "li",
      "p"
    ],
    "sentinels": [
      "ol",
      "li",
      "p"
    ],
    "mark": [
      "ol",
      "li",
      "p"
    ],
    "end": [
      "ol",
      "li",
      "p"
    ],
    "structure": [
      "ol",
      "li",
      "p"
    ],
    "nul": [
      "ol",
      "li",
      "p"
    ],
    "bytes": [
      "ol",
      "li",
      "p"
    ],
    "strings": [
      "ol",
      "li",
      "p"
    ],
    "also": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "include": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "sentinel": [
      "ol",
      "li",
      "p"
    ],
    "your": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "total": [
      "ol",
      "li",
      "p"
    ],
    "amount": [
      "ol",
      "li",
      "p"
    ],
    "must": [
      "ol",
      "li",
      "p"
    ],
    "allocated": [
      "ol",
      "li",
      "p"
    ],
    "sizeof)": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "appropriate": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "type": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "avoid": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "strong",
      "li",
      "p",
      "li",
      "p"
    ],
    "cwe-467": [
      "ol",
      "li",
      "p"
    ],
    "understand": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "programming": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "language's": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "representation": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "how": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "interacts": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "numeric": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p",
      "strong"
    ],
    "cwe-681).": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "pay": [
      "ol",
      "li",
      "p"
    ],
    "close": [
      "ol",
      "li",
      "p"
    ],
    "attention": [
      "ol",
      "li",
      "p"
    ],
    "byte": [
      "ol",
      "li",
      "p"
    ],
    "discrepancies": [
      "ol",
      "li",
      "p"
    ],
    "precision": [
      "ol",
      "li",
      "p"
    ],
    "signed/unsigned": [
      "ol",
      "li",
      "p"
    ],
    "distinctions": [
      "ol",
      "li",
      "p"
    ],
    "truncation": [
      "ol",
      "li",
      "p"
    ],
    "conversion": [
      "ol",
      "li",
      "p"
    ],
    "casting": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "\"not-a-number\"": [
      "ol",
      "li",
      "p"
    ],
    "language": [
      "ol",
      "li",
      "p"
    ],
    "handles": [
      "ol",
      "li",
      "p"
    ],
    "numbers": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "its": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "careful": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "32-bit": [
      "ol",
      "li",
      "p"
    ],
    "64-bit": [
      "ol",
      "li",
      "p"
    ],
    "differences": [
      "ol",
      "li",
      "p"
    ],
    "affect": [
      "ol",
      "li",
      "p"
    ],
    "perform": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "validation": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "ensuring": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "within": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "range": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "enforce": [
      "ol",
      "li",
      "p"
    ],
    "meets": [
      "ol",
      "li",
      "p"
    ],
    "both": [
      "ol",
      "li",
      "p"
    ],
    "minimum": [
      "ol",
      "li",
      "p"
    ],
    "maximum": [
      "ol",
      "li",
      "p"
    ],
    "requirements": [
      "ol",
      "li",
      "p"
    ],
    "server-side": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "controls": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "checks": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "li",
      "p"
    ],
    "performed": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "client": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "side": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "duplicated": [
      "ol",
      "li",
      "p"
    ],
    "server": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "order": [
      "ol",
      "li",
      "p"
    ],
    "cwe-602": [
      "ol",
      "li",
      "p"
    ],
    "attackers": [
      "ol",
      "li",
      "p"
    ],
    "bypass": [
      "ol",
      "li",
      "p"
    ],
    "client-side": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "modifying": [
      "ol",
      "li",
      "p"
    ],
    "values": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "after": [
      "ol",
      "li",
      "p"
    ],
    "been": [
      "ol",
      "li",
      "p"
    ],
    "changing": [
      "ol",
      "li",
      "p"
    ],
    "remove": [
      "ol",
      "li",
      "p"
    ],
    "entirely": [
      "ol",
      "li",
      "p"
    ],
    "modified": [
      "ol",
      "li",
      "p"
    ],
    "would": [
      "ol",
      "li",
      "p"
    ],
    "submitted": [
      "ol",
      "li",
      "p"
    ],
    "dangerous": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "apis": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "replace": [
      "ol",
      "li",
      "p"
    ],
    "unbounded": [
      "ol",
      "li",
      "p"
    ],
    "copy": [
      "ol",
      "li",
      "p"
    ],
    "functions": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "analogous": [
      "ol",
      "li",
      "p"
    ],
    "support": [
      "ol",
      "li",
      "p"
    ],
    "length": [
      "ol",
      "li",
      "p"
    ],
    "strcpy": [
      "ol",
      "li",
      "p"
    ],
    "strncpy": [
      "ol",
      "li",
      "p"
    ],
    "create": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "they": [
      "ol",
      "li",
      "p"
    ],
    "notes": [
      "ol",
      "li",
      "p"
    ],
    "approach": [
      "ol",
      "li",
      "p"
    ],
    "still": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "susceptible": [
      "ol",
      "li",
      "p"
    ],
    "including": [
      "ol",
      "li",
      "p"
    ],
    "issues": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "off-by-one": [
      "ol",
      "li",
      "p"
    ],
    "cwe-193)": [
      "ol",
      "li",
      "p"
    ],
    "incorrectly": [
      "ol",
      "li",
      "p"
    ],
    "calculating": [
      "ol",
      "li",
      "p"
    ],
    "lengths": [
      "ol",
      "li",
      "p"
    ],
    "cwe-131).": [
      "ol",
      "li",
      "p"
    ],
    "additionally": [
      "ol",
      "li",
      "p"
    ],
    "only": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "addresses": [
      "ol",
      "li",
      "p"
    ],
    "resource": [
      "ol",
      "li",
      "p"
    ],
    "consumption": [
      "ol",
      "li",
      "p"
    ],
    "/": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "exhaustion": [
      "ol",
      "li",
      "p"
    ],
    "correct": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "variable": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "desired": [
      "ol",
      "li",
      "p"
    ],
    "action": [
      "ol",
      "li",
      "p"
    ],
    "c/c&#43&#43;,": [
      "ol",
      "li",
      "p"
    ],
    "unsigned": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "never": [
      "ol",
      "li",
      "p"
    ],
    "negative": [
      "ol",
      "li",
      "p"
    ],
    "height": [
      "ol",
      "li",
      "p"
    ],
    "width": [
      "ol",
      "li",
      "p"
    ],
    "quantity": [
      "ol",
      "li",
      "p"
    ],
    "simplify": [
      "ol",
      "li",
      "p"
    ],
    "sanity": [
      "ol",
      "li",
      "p"
    ],
    "reduce": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "surprises": [
      "ol",
      "li",
      "p"
    ],
    "unexpected": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "secure": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "framework": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "vetted": [
      "ol",
      "li",
      "p"
    ],
    "library": [
      "ol",
      "li",
      "p"
    ],
    "occur": [
      "ol",
      "li",
      "p"
    ],
    "provides": [
      "ol",
      "li",
      "p"
    ],
    "constructs": [
      "ol",
      "li",
      "p"
    ],
    "easier": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "libraries": [
      "ol",
      "li",
      "p"
    ],
    "frameworks": [
      "ol",
      "li",
      "p"
    ],
    "consequences": [
      "ol",
      "li",
      "p"
    ],
    "routines": [
      "ol",
      "li",
      "p"
    ],
    "automatically": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "track": [
      "ol",
      "li",
      "p"
    ],
    "examples": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "safe": [
      "ol",
      "li",
      "p"
    ],
    "integer": [
      "ol",
      "li",
      "p"
    ],
    "handling": [
      "ol",
      "li",
      "p"
    ],
    "packages": [
      "ol",
      "li",
      "p"
    ],
    "as\rsafeint": [
      "ol",
      "li",
      "p"
    ],
    "c&#43;&#43;)": [
      "ol",
      "li",
      "p"
    ],
    "integerlib": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "c&#43&#43;).": [
      "ol",
      "li",
      "p"
    ],
    "compiler": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "features": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "strong"
    ],
    "compile": [
      "ol",
      "li",
      "p"
    ],
    "extensions": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "provide": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "protection": [
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p",
      "strong",
      "li",
      "p"
    ],
    "mechanism": [
      "ol",
      "li",
      "p"
    ],
    "mitigates": [
      "ol",
      "li",
      "p"
    ],
    "eliminates": [
      "ol",
      "li",
      "p"
    ],
    "certain": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "li",
      "p"
    ],
    "compilers": [
      "ol",
      "li",
      "p"
    ],
    "automatic": [
      "ol",
      "li",
      "p"
    ],
    "mechanisms": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "built": [
      "ol",
      "li",
      "p"
    ],
    "compiled": [
      "ol",
      "li",
      "p"
    ],
    "microsoft": [
      "ol",
      "li",
      "p"
    ],
    "visual": [
      "ol",
      "li",
      "p"
    ],
    "studio\r/gs": [
      "ol",
      "li",
      "p"
    ],
    "flag": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "fedora/red": [
      "ol",
      "li",
      "p"
    ],
    "hat": [
      "ol",
      "li",
      "p"
    ],
    "fortify_source": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "gcc": [
      "ol",
      "li",
      "p"
    ],
    "stackguard": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "and\rpropolice.": [
      "ol",
      "li",
      "p"
    ],
    "note": [
      "ol",
      "li",
      "p",
      "strong",
      "strong"
    ],
    "necessarily": [
      "ol",
      "li",
      "p"
    ],
    "complete": [
      "ol",
      "li",
      "p"
    ],
    "solution": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "since": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "detect": [
      "ol",
      "li",
      "p"
    ],
    "addition": [
      "ol",
      "li",
      "p"
    ],
    "attack": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "cause": [
      "ol",
      "li",
      "p"
    ],
    "denial": [
      "ol",
      "li",
      "p"
    ],
    "service": [
      "ol",
      "li",
      "p"
    ],
    "typical": [
      "ol",
      "li",
      "p"
    ],
    "response": [
      "ol",
      "li",
      "p"
    ],
    "exit": [
      "ol",
      "li",
      "p"
    ],
    "application": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "examine": [
      "ol",
      "li",
      "p"
    ],
    "closely": [
      "ol",
      "li",
      "p"
    ],
    "eliminate": [
      "ol",
      "li",
      "p"
    ],
    "implications": [
      "ol",
      "li",
      "p"
    ],
    "signed": [
      "ol",
      "li",
      "p"
    ],
    "mismatch": [
      "ol",
      "li",
      "p"
    ],
    "operations": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "p"
    ],
    "uninitialized": [
      "ol",
      "li",
      "p"
    ],
    "variables": [
      "ol",
      "li",
      "p"
    ],
    "rarely": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "exploitable": [
      "ol",
      "li",
      "p"
    ],
    "single": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "failure": [
      "ol",
      "li",
      "p"
    ],
    "compromise": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "entire": [
      "ol",
      "li",
      "p"
    ],
    "system": [
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "os": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "feature": [
      "ol",
      "li",
      "p"
    ],
    "like": [
      "ol",
      "li",
      "p"
    ],
    "address": [
      "ol",
      "li",
      "p"
    ],
    "space": [
      "ol",
      "li",
      "p"
    ],
    "layout": [
      "ol",
      "li",
      "p"
    ],
    "randomization": [
      "ol",
      "li",
      "p"
    ],
    "aslr).": [
      "ol",
      "li",
      "p"
    ],
    "cpu": [
      "ol",
      "li",
      "p"
    ],
    "operating": [
      "ol",
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "li",
      "p",
      "p"
    ],
    "offers": [
      "ol",
      "li",
      "p"
    ],
    "execution": [
      "ol",
      "li",
      "p"
    ],
    "nx)": [
      "ol",
      "li",
      "p"
    ],
    "equivalent": [
      "ol",
      "li",
      "p"
    ],
    "privilege": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "principle": [
      "ol",
      "li",
      "p",
      "strong"
    ],
    "lowest": [
      "ol",
      "li",
      "p"
    ],
    "required": [
      "ol",
      "li",
      "p"
    ],
    "accomplish": [
      "ol",
      "li",
      "p"
    ],
    "necessary": [
      "ol",
      "li",
      "p"
    ],
    "tasks": [
      "ol",
      "li",
      "p"
    ],
    "isolated": [
      "ol",
      "li",
      "p"
    ],
    "accounts": [
      "ol",
      "li",
      "p"
    ],
    "limited": [
      "ol",
      "li",
      "p"
    ],
    "task": [
      "ol",
      "li",
      "p"
    ],
    "way": [
      "ol",
      "li",
      "p"
    ],
    "successful": [
      "ol",
      "li",
      "p"
    ],
    "immediately": [
      "ol",
      "li",
      "p"
    ],
    "give": [
      "ol",
      "li",
      "p"
    ],
    "attacker": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "access": [
      "ol",
      "li",
      "p"
    ],
    "rest": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "environment": [
      "ol",
      "ol",
      "li",
      "p",
      "li",
      "p"
    ],
    "database": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "applications": [
      "ol",
      "li",
      "p"
    ],
    "administrator": [
      "ol",
      "li",
      "p"
    ],
    "day-to-day": [
      "ol",
      "li",
      "p"
    ],
    "sandbox": [
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "strong"
    ],
    "\"jail\"": [
      "ol",
      "li",
      "p"
    ],
    "enforces": [
      "ol",
      "li",
      "p"
    ],
    "strict": [
      "ol",
      "li",
      "p"
    ],
    "boundaries": [
      "ol",
      "li",
      "p"
    ],
    "process": [
      "ol",
      "li",
      "p"
    ],
    "effectively": [
      "ol",
      "li",
      "p"
    ],
    "restrict": [
      "ol",
      "li",
      "p"
    ],
    "files": [
      "ol",
      "li",
      "p"
    ],
    "accessed": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "particular": [
      "ol",
      "li",
      "p"
    ],
    "directory": [
      "ol",
      "li",
      "p"
    ],
    "commands": [
      "ol",
      "li",
      "p"
    ],
    "executed": [
      "ol",
      "li",
      "p"
    ],
    "os-level": [
      "ol",
      "li",
      "p"
    ],
    "unix\rchroot": [
      "ol",
      "li",
      "p"
    ],
    "jail": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "apparmor": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "selinux": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "general": [
      "ol",
      "li",
      "p"
    ],
    "managed": [
      "ol",
      "li",
      "p"
    ],
    "some": [
      "ol",
      "li",
      "p"
    ],
    "example\r\njava.io.filepermission": [
      "ol",
      "li",
      "p"
    ],
    "java": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "securitymanager": [
      "ol",
      "li",
      "p",
      "em"
    ],
    "allows": [
      "ol",
      "li",
      "p"
    ],
    "specify": [
      "ol",
      "li",
      "p"
    ],
    "restrictions": [
      "ol",
      "li",
      "p"
    ],
    "file": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p"
    ],
    "feasible": [
      "ol",
      "li",
      "p"
    ],
    "limits": [
      "ol",
      "li",
      "p"
    ],
    "impact": [
      "ol",
      "li",
      "p"
    ],
    "subject": [
      "ol",
      "li",
      "p"
    ],
    "cwe-243": [
      "ol",
      "li",
      "p"
    ],
    "jails\r\nnote:": [
      "ol",
      "li",
      "p"
    ],
    "effectiveness": [
      "ol",
      "li",
      "p"
    ],
    "depends": [
      "ol",
      "li",
      "p"
    ],
    "prevention": [
      "ol",
      "li",
      "p"
    ],
    "capabilities": [
      "ol",
      "li",
      "p"
    ],
    "specific": [
      "ol",
      "li",
      "p"
    ],
    "being": [
      "ol",
      "li",
      "p"
    ],
    "help": [
      "ol",
      "li",
      "p"
    ],
    "scope": [
      "ol",
      "li",
      "p"
    ],
    "restricting": [
      "ol",
      "li",
      "p"
    ],
    "calls": [
      "ol",
      "li",
      "p"
    ],
    "limiting": [
      "ol",
      "li",
      "p"
    ],
    "portion": [
      "ol",
      "li",
      "p"
    ],
    "&": [
      "em",
      "em"
    ],
    "safeint": [
      "em"
    ],
    "/gs": [
      "em"
    ],
    "propolice": [
      "em"
    ],
    "chroot": [
      "em"
    ],
    "javaio.filepermission": [
      "em"
    ],
    "additional": [
      "h2"
    ],
    "information": [
      "h2",
      "ul",
      "li"
    ],
    "about": [
      "ul",
      "li"
    ],
    "please": [
      "ul",
      "li"
    ],
    "see\rhttp://cwe.mitre.org/top25/index.html#cwe-131": [
      "ul",
      "li"
    ],
    "http//cwe.mitre.org/top25/index.html#cwe-131": [
      "a"
    ],
    "cwe-131": [
      "title"
    ]
  },
  "tags": {
    "h2": [
      "Description",
      "Discussion",
      "Detection",
      "Mitigation",
      "Additional Information"
    ],
    "p": [
      "The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
      "In languages such as C, where memory management is the programmer's responsibility, there are many opportunities for error. If the programmer does not properly calculate the size of a buffer, then the buffer may be too small to contain the data that the\r\n programmer plans to write - even if the input was properly validated. Any number of problems could produce the incorrect calculation, but when all is said and done, you're going to run head-first into the dreaded buffer overflow.",
      "The following methods are available for detecting incorrect calculation of buffer size vulnerabilities.",
      "Automated Static Analysis. This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis\r\n generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer\r\n overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges. Detection techniques for buffer-related errors are more mature than for most other weakness types.",
      "Automated Dynamic Analysis. This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault\r\n injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\r\n follow-up manual methods to diagnose the underlying problem.",
      "The following mitigation methods for incorrect calculation of buffer size vulnerabilities are available:",
      "Allocate sufficient memory. If you allocate a buffer for the purpose of transforming, converting, or encoding an input, make sure that you allocate enough memory to handle the largest possible encoding. For example, in a routine that converts\r\n \"&\" characters to \"&\" for HTML entity encoding, you will need an output buffer that is at least 5 times as large as the input buffer. When processing structured incoming data containing a size field followed by raw data, ensure that you\r\n identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130). When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel\r\n in your calculation of the total amount of memory that must be allocated. Use \r\nsizeof() on the appropriate data type to avoid CWE-467.",
      "Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\r\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\r\n numeric representation.",
      "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
      "Use server-side security controls. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\r\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "Avoid dangerous APIs. Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available. Notes: This approach is still susceptible to calculation\r\n errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.",
      "Use the correct variable type. Use the appropriate type for the desired action. For example, in C/C&#43;&#43;, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will\r\n simplify your sanity checks and will reduce surprises related to unexpected casting.",
      "Use a secure framework. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\r\n unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as\r\nSafeInt (C&#43;&#43;) or IntegerLib (C or C&#43;&#43;).",
      "Use compiler features. Run or compile your software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic\r\n buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio\r\n/GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and\r\nProPolice. Note: This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application. Examine\r\n compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the\r\n compromise of the entire system.",
      "Use OS buffer overflow protection. Use a feature like Address Space Layout Randomization (ASLR). Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent.",
      "Use the least privilege principle. Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way,\r\n a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "Use a sandbox. Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or\r\n which commands can be executed by your software. OS-level examples include the Unix\r\nchroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example,\r\njava.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be\r\n subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting\r\n the portion of the file system that can be accessed."
    ],
    "ol": [
      "Automated Static Analysis. This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis\r\n generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer\r\n overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges. Detection techniques for buffer-related errors are more mature than for most other weakness types.\r\n    \r\n    \r\n      \r\n        Automated Dynamic Analysis. This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault\r\n injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\r\n follow-up manual methods to diagnose the underlying problem.\r\n    \r\n    \r\n      Manual Analysis. This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\r\n Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program. These may\r\n be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
      "Allocate sufficient memory. If you allocate a buffer for the purpose of transforming, converting, or encoding an input, make sure that you allocate enough memory to handle the largest possible encoding. For example, in a routine that converts\r\n \"&\" characters to \"&\" for HTML entity encoding, you will need an output buffer that is at least 5 times as large as the input buffer. When processing structured incoming data containing a size field followed by raw data, ensure that you\r\n identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130). When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel\r\n in your calculation of the total amount of memory that must be allocated. Use \r\nsizeof() on the appropriate data type to avoid CWE-467.\r\n    \r\n    \r\n      \r\n        Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\r\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\r\n numeric representation.\r\n    \r\n    \r\n      \r\n        Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\r\n    \r\n    \r\n      \r\n        Use server-side security controls. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\r\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\r\n    \r\n    \r\n      \r\n        Avoid dangerous APIs. Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available. Notes: This approach is still susceptible to calculation\r\n errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.\r\n    \r\n    \r\n      \r\n        Use the correct variable type. Use the appropriate type for the desired action. For example, in C/C&#43;&#43;, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will\r\n simplify your sanity checks and will reduce surprises related to unexpected casting.\r\n    \r\n    \r\n      \r\n        Use a secure framework. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\r\n unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as\r\nSafeInt (C&#43;&#43;) or IntegerLib (C or C&#43;&#43;).\r\n    \r\n    \r\n      \r\n        Use compiler features. Run or compile your software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic\r\n buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio\r\n/GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and\r\nProPolice. Note: This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application. Examine\r\n compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the\r\n compromise of the entire system.\r\n    \r\n    \r\n      \r\n        Use OS buffer overflow protection. Use a feature like Address Space Layout Randomization (ASLR). Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent.\r\n    \r\n    \r\n      \r\n        Use the least privilege principle. Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way,\r\n a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\r\n    \r\n    \r\n      \r\n        Use a sandbox. Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or\r\n which commands can be executed by your software. OS-level examples include the Unix\r\nchroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example,\r\njava.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be\r\n subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting\r\n the portion of the file system that can be accessed."
    ],
    "li": [
      "Automated Static Analysis. This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis\r\n generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer\r\n overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges. Detection techniques for buffer-related errors are more mature than for most other weakness types.",
      "Automated Dynamic Analysis. This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault\r\n injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\r\n follow-up manual methods to diagnose the underlying problem.",
      "Manual Analysis. This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\r\n Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program. These may\r\n be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
      "Allocate sufficient memory. If you allocate a buffer for the purpose of transforming, converting, or encoding an input, make sure that you allocate enough memory to handle the largest possible encoding. For example, in a routine that converts\r\n \"&\" characters to \"&\" for HTML entity encoding, you will need an output buffer that is at least 5 times as large as the input buffer. When processing structured incoming data containing a size field followed by raw data, ensure that you\r\n identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130). When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel\r\n in your calculation of the total amount of memory that must be allocated. Use \r\nsizeof() on the appropriate data type to avoid CWE-467.",
      "Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\r\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\r\n numeric representation.",
      "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
      "Use server-side security controls. For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\r\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "Avoid dangerous APIs. Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available. Notes: This approach is still susceptible to calculation\r\n errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.",
      "Use the correct variable type. Use the appropriate type for the desired action. For example, in C/C&#43;&#43;, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will\r\n simplify your sanity checks and will reduce surprises related to unexpected casting.",
      "Use a secure framework. Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\r\n unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as\r\nSafeInt (C&#43;&#43;) or IntegerLib (C or C&#43;&#43;).",
      "Use compiler features. Run or compile your software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic\r\n buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio\r\n/GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and\r\nProPolice. Note: This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application. Examine\r\n compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the\r\n compromise of the entire system.",
      "Use OS buffer overflow protection. Use a feature like Address Space Layout Randomization (ASLR). Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent.",
      "Use the least privilege principle. Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way,\r\n a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "Use a sandbox. Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or\r\n which commands can be executed by your software. OS-level examples include the Unix\r\nchroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example,\r\njava.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be\r\n subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting\r\n the portion of the file system that can be accessed.",
      "For more information about incorrect calculation of buffer size vulnerabilities, please see\r\nhttp://cwe.mitre.org/top25/index.html#CWE-131"
    ],
    "strong": [
      "Automated Static Analysis.",
      "Automated Dynamic Analysis.",
      "Manual Analysis.",
      "Allocate sufficient memory.",
      "Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681).",
      "Perform input validation on any numeric input by ensuring that it is within the expected range.",
      "Use server-side security controls.",
      "Avoid dangerous APIs.",
      "Use the correct variable type.",
      "Use a secure framework.",
      "Use compiler features.",
      "Note:",
      "Use OS buffer overflow protection.",
      "Use the least privilege principle.",
      "Use a sandbox.",
      "Note:"
    ],
    "em": [
      "&",
      "&",
      "sizeof()",
      "SafeInt",
      "IntegerLib",
      "/GS",
      "FORTIFY_SOURCE",
      "StackGuard",
      "ProPolice",
      "chroot",
      "AppArmor",
      "SELinux",
      "java.io.FilePermission",
      "Java SecurityManager"
    ],
    "br": [
      "",
      ""
    ],
    "ul": [
      "For more information about incorrect calculation of buffer size vulnerabilities, please see\r\nhttp://cwe.mitre.org/top25/index.html#CWE-131"
    ],
    "a": [
      "http://cwe.mitre.org/top25/index.html#CWE-131"
    ]
  },
  "links": [
    {
      "href": "http://cwe.mitre.org/top25/index.html#CWE-131",
      "text": "http://cwe.mitre.org/top25/index.html#CWE-131"
    }
  ],
  "html": "<h2>Description</h2>\r\n  <p>The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.</p>\r\n  <h2>Discussion</h2>\r\n  <p>In languages such as C, where memory management is the programmer's responsibility, there are many opportunities for error. If the programmer does not properly calculate the size of a buffer, then the buffer may be too small to contain the data that the\r\n programmer plans to write - even if the input was properly validated. Any number of problems could produce the incorrect calculation, but when all is said and done, you're going to run head-first into the dreaded buffer overflow.</p>\r\n  <h2>Detection</h2>\r\n  <p>The following methods are available for detecting incorrect calculation of buffer size vulnerabilities.</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Automated Static Analysis.</strong> This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis\r\n generally does not account for environmental considerations when reporting potential errors in buffer calculations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer\r\n overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges. Detection techniques for buffer-related errors are more mature than for most other weakness types.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Automated Dynamic Analysis.</strong> This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault\r\n injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring\r\n follow-up manual methods to diagnose the underlying problem.</p>\r\n    </li>\r\n    <li>\r\n      <strong>Manual Analysis.</strong> This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\r\n Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program. These may\r\n be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</li>\r\n  </ol>\r\n  <h2>Mitigation</h2>\r\n  <p>The following mitigation methods for incorrect calculation of buffer size vulnerabilities are available:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Allocate sufficient memory.</strong> If you allocate a buffer for the purpose of transforming, converting, or encoding an input, make sure that you allocate enough memory to handle the largest possible encoding. For example, in a routine that converts\r\n \"<em>&amp;</em>\" characters to \"<em>&amp;</em>\" for HTML entity encoding, you will need an output buffer that is at least 5 times as large as the input buffer. When processing structured incoming data containing a size field followed by raw data, ensure that you\r\n identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130). When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel\r\n in your calculation of the total amount of memory that must be allocated. Use <em>\r\nsizeof()</em> on the appropriate data type to avoid CWE-467.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Understand your programming language's underlying representation and how it interacts with numeric calculation (CWE-681).</strong> Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and\r\n casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation. Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the\r\n numeric representation.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Perform input validation on any numeric input by ensuring that it is within the expected range.</strong> Enforce that the input meets both the minimum and maximum requirements for the expected range.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use server-side security controls.</strong> For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying\r\n values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Avoid dangerous APIs.</strong> Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available. Notes: This approach is still susceptible to calculation\r\n errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use the correct variable type. </strong>Use the appropriate type for the desired action. For example, in C/C&amp;#43;&amp;#43;, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will\r\n simplify your sanity checks and will reduce surprises related to unexpected casting.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use a secure framework.</strong> Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without\r\n unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as\r\n<em>SafeInt</em> (C&amp;#43;&amp;#43;) or <em>IntegerLib</em> (C or C&amp;#43;&amp;#43;).</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use compiler features.</strong> Run or compile your software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. For example, certain compilers and extensions provide automatic\r\n buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio\r\n<em>/GS</em> flag, Fedora/Red Hat <em>FORTIFY_SOURCE</em> GCC flag, <em>StackGuard</em>, and\r\n<em>ProPolice</em>. <br /><strong>Note:</strong> This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application. Examine\r\n compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the\r\n compromise of the entire system.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use OS buffer overflow protection.</strong> Use a feature like Address Space Layout Randomization (ASLR). Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use the least privilege principle.</strong> Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way,\r\n a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Use a sandbox.</strong> Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or\r\n which commands can be executed by your software. OS-level examples include the Unix\r\n<em>chroot</em> jail, <em>AppArmor</em>, and <em>SELinux</em>. In general, managed code may provide some protection. For example,\r\n<em>java.io.FilePermission</em> in the <em>Java SecurityManager</em> allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be\r\n subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\r\n<br /><strong>Note: </strong>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting\r\n the portion of the file system that can be accessed.</p>\r\n    </li>\r\n  </ol>\r\n  <h2>Additional Information</h2>\r\n  <ul>\r\n    <li>For more information about incorrect calculation of buffer size vulnerabilities, please see\r\n<a href=\"http://cwe.mitre.org/top25/index.html#CWE-131\">http://cwe.mitre.org/top25/index.html#CWE-131</a></li>\r\n  </ul>"
}