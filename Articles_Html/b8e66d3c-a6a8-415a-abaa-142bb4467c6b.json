{
  "id": "b8e66d3c-a6a8-415a-abaa-142bb4467c6b",
  "checksum": "7375259961930946a700ec679f8dd1a0748f1d20",
  "words": {
    "0": [
      "pre"
    ],
    "what": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "do": [
      "h1"
    ],
    "if": [
      "p",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "the": [
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre"
    ],
    "api": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p"
    ],
    "calling": [
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p"
    ],
    "return": [
      "p",
      "p",
      "p",
      "p",
      "pre",
      "p",
      "pre",
      "pre",
      "title"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "error": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "the return": [
      "p"
    ],
    "value": [
      "p",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "code when": [
      "p"
    ],
    "using": [
      "p"
    ],
    "win32": [
      "p"
    ],
    "apis": [
      "p",
      "p"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p"
    ],
    "also": [
      "p"
    ],
    "need": [
      "p",
      "pre"
    ],
    "call": [
      "p",
      "p",
      "p",
      "pre"
    ],
    "getlasterror": [
      "p"
    ],
    "details": [
      "p",
      "pre"
    ],
    "why": [
      "h1"
    ],
    "many": [
      "p"
    ],
    "important": [
      "p",
      "p",
      "p"
    ],
    "functions": [
      "p"
    ],
    "will": [
      "p",
      "p"
    ],
    "work": [
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p"
    ],
    "most": [
      "p"
    ],
    "cases": [
      "p"
    ],
    "but": [
      "p"
    ],
    "occasionally": [
      "p"
    ],
    "cause": [
      "p",
      "p"
    ],
    "under": [
      "p"
    ],
    "exceptional": [
      "p"
    ],
    "circumstances": [
      "p"
    ],
    "such": [
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "low": [
      "p"
    ],
    "system": [
      "p",
      "p",
      "p",
      "p"
    ],
    "resources": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "corrupt": [
      "p"
    ],
    "file": [
      "p"
    ],
    "order": [
      "p"
    ],
    "build": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p"
    ],
    "both": [
      "p"
    ],
    "more": [
      "p",
      "p"
    ],
    "reliable": [
      "p"
    ],
    "and": [
      "p",
      "ul",
      "li",
      "p"
    ],
    "secure": [
      "p",
      "p"
    ],
    "codes": [
      "p",
      "p"
    ],
    "any": [
      "p",
      "p"
    ],
    "code": [
      "p"
    ],
    "when": [
      "h1"
    ],
    "whenever": [
      "p"
    ],
    "this": [
      "p"
    ],
    "especially": [
      "p",
      "p"
    ],
    "your": [
      "p",
      "p",
      "p"
    ],
    "serious": [
      "p"
    ],
    "problems": [
      "p"
    ],
    "crash": [
      "p",
      "p"
    ],
    "hang": [
      "p"
    ],
    "does": [
      "p"
    ],
    "not": [
      "p"
    ],
    "expected": [
      "p"
    ],
    "how": [
      "h1"
    ],
    "values": [
      "p",
      "title"
    ],
    "with": [
      "p"
    ],
    "statement": [
      "p"
    ],
    "handle": [
      "p"
    ],
    "errors": [
      "p",
      "p",
      "p",
      "title"
    ],
    "appropriate": [
      "p"
    ],
    "by": [
      "p",
      "p"
    ],
    "failing": [
      "p"
    ],
    "known": [
      "p"
    ],
    "state": [
      "p"
    ],
    "returning": [
      "p"
    ],
    "caller": [
      "p"
    ],
    "some": [
      "p"
    ],
    "examples": [
      "p"
    ],
    "of": [
      "p",
      "p"
    ],
    "should": [
      "p"
    ],
    "always": [
      "p"
    ],
    "be": [
      "p",
      "p"
    ],
    "checked": [
      "p",
      "p"
    ],
    "operations": [
      "ul",
      "li"
    ],
    "on": [
      "ul",
      "li"
    ],
    "mutexes": [
      "ul",
      "li"
    ],
    "semaphoresnetwork": [
      "ul"
    ],
    "communicationmemory": [
      "ul"
    ],
    "allocation": [
      "ul",
      "li"
    ],
    "semaphores": [
      "li"
    ],
    "network": [
      "li"
    ],
    "communication": [
      "li"
    ],
    "memory": [
      "li",
      "p",
      "p"
    ],
    "careful": [
      "p"
    ],
    "results": [
      "p"
    ],
    "allocations": [
      "p"
    ],
    "before": [
      "p"
    ],
    "copying": [
      "p",
      "p"
    ],
    "into": [
      "p",
      "p"
    ],
    "buffer": [
      "p",
      "p",
      "pre",
      "pre"
    ],
    "otherwise": [
      "p"
    ],
    "manipulating": [
      "p"
    ],
    "it": [
      "p"
    ],
    "appending": [
      "p"
    ],
    "unallocated": [
      "p"
    ],
    "location": [
      "p"
    ],
    "application": [
      "p"
    ],
    "potentially": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "overflow": [
      "p"
    ],
    "vulnerability": [
      "p"
    ],
    "problem": [
      "h1"
    ],
    "example": [
      "h1",
      "h1",
      "p"
    ],
    "bool": [
      "pre",
      "pre"
    ],
    "readfromsocketsocket": [
      "pre",
      "pre"
    ],
    "socket": [
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "char": [
      "pre",
      "pre"
    ],
    "*recvbuffer": [
      "pre",
      "pre"
    ],
    "int": [
      "pre",
      "pre",
      "pre"
    ],
    "len{": [
      "pre",
      "pre"
    ],
    "//first": [
      "pre",
      "pre"
    ],
    "read": [
      "pre",
      "p",
      "pre"
    ],
    "from": [
      "pre",
      "pre"
    ],
    "readsocket,": [
      "pre",
      "pre"
    ],
    "recvbuffer": [
      "pre",
      "pre"
    ],
    "len": [
      "pre",
      "pre"
    ],
    "0;": [
      "pre",
      "pre"
    ],
    "//now": [
      "pre",
      "pre"
    ],
    "parse": [
      "pre",
      "pre"
    ],
    "parsebufferrecvbuffer,": [
      "pre",
      "pre"
    ],
    "len;}": [
      "pre"
    ],
    "solution": [
      "h1"
    ],
    "following": [
      "p"
    ],
    "called": [
      "p"
    ],
    "then": [
      "p"
    ],
    "ret": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre"
    ],
    "{": [
      "pre",
      "pre"
    ],
    "len;": [
      "pre"
    ],
    "}": [
      "pre"
    ],
    "else": [
      "pre"
    ],
    "//can": [
      "pre"
    ],
    "wsagetlasterror": [
      "pre"
    ],
    "we": [
      "pre"
    ],
    "false": [
      "pre"
    ],
    "}}": [
      "pre"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "centralize": [
      "ul",
      "li",
      "a"
    ],
    "handling": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "Related Items"
    ],
    "p": [
      "If the API you are calling can return an error, check the return value for an error code. When using Win32 APIs you may also need to call GetLastError for error details.",
      "Many important functions will work in most cases but will occasionally cause an error under exceptional circumstances such as low system resources or a corrupt file system. In order to build a system that is both more reliable and more secure, check error codes for any API call that may return an error code.",
      "Check error codes whenever calling an API that may return an error. This is especially important for an API call that may cause your system serious problems, such as a crash or hang, if the API you are calling does not work as expected.",
      "Check API return values with an if statement, handle any errors appropriate by failing to a known secure state or by returning an error to your caller. Some examples of important APIs that should always be checked for errors:",
      "Be especially careful to check the results of memory allocations before copying into a buffer or otherwise manipulating it. Copying or appending into an unallocated memory location can crash your application or potentially lead to a buffer overflow vulnerability.",
      "In the following example, the read API is called and then the return value is checked for errors."
    ],
    "ul": [
      "Operations on mutexes and semaphoresNetwork communicationMemory allocation",
      "Centralize Error Handling"
    ],
    "li": [
      "Operations on mutexes and semaphores",
      "Network communication",
      "Memory allocation",
      "Centralize Error Handling"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "pre": [
      "bool ReadFromSocket(SOCKET socket, char *recvBuffer, int len){  //first read from the socket  read(socket, recvBuffer, len, 0);  //now parse the buffer  return parseBuffer(recvBuffer, len);}",
      "bool ReadFromSocket(SOCKET socket, char *recvBuffer, int len){  //first read from the socket  int ret = read(socket, recvBuffer, len, 0);  if (ret >= 0)  {      //now parse the buffer      return parseBuffer(recvBuffer, len);  }  else  {      //can call WSAGetLastError if we need error details      return false;  }}"
    ],
    "a": [
      "Centralize Error Handling"
    ]
  },
  "links": [
    {
      "href": "/article/e4a3052e-13f2-4062-9a83-49185ff14b0a",
      "text": "Centralize Error Handling"
    }
  ],
  "html": "<h1>What to Do</h1>\r\n  <p>If the API you are calling can return an error, check the&nbsp;return value for an error code.&nbsp;When using Win32 APIs you may also need to call GetLastError for error details.</p>\r\n  <h1>Why</h1>\r\n  <p>Many important functions will work in most cases but will occasionally cause an error under exceptional circumstances such as low system resources or a corrupt file system. In order to build a system that is both more reliable and more secure, check error codes for any API call that may return an error code.</p>\r\n  <h1>When</h1>\r\n  <p>Check error codes whenever calling an API that may return an error. This is especially important for an API call that may cause your system serious problems, such as a crash or hang, if the API you are calling does not work as expected.</p>\r\n  <h1>How</h1>\r\n  <p>Check API return values with an if statement, handle any errors appropriate by failing to a known secure state or by returning an error to your caller. Some examples of important APIs that should always be checked for errors:</p>\r\n  <ul>\r\n    <li>Operations on mutexes and semaphores<li>Network communication<li>Memory allocation</li></li></li>\r\n  </ul>\r\n  <p>Be especially careful to check the results of memory allocations before copying into a buffer or otherwise manipulating it. Copying or appending into an unallocated memory location can crash your application or potentially lead to a buffer overflow vulnerability.</p>\r\n  <h1>Problem Example </h1>\r\n  <br />In the following example, the read API is called without checking the return value for errors.<pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />  //first read from the socket<br />&nbsp; read(socket, recvBuffer, len, 0);<br /><br /><br />  //now parse the buffer<br />  return parseBuffer(recvBuffer, len);<br />&#125;</pre><h1>Solution Example</h1><p>In the following example, the read API is called and then the return value is checked for errors. </p><pre>bool ReadFromSocket(SOCKET socket, char &#42;recvBuffer, int len)<br />&#123;<br />  //first read from the socket<br />&nbsp; int ret = read(socket, recvBuffer, len, 0);<br /><br /><br />  if (ret &gt;= 0)<br />  &#123;<br />      //now parse the buffer<br />      return parseBuffer(recvBuffer, len);<br />  &#125;<br />  else<br />  &#123;<br />      //can call WSAGetLastError if we need error details<br />      return false;<br />  &#125;<br />&#125;</pre><h1>Related Items</h1><ul><li><a href=\"/article/e4a3052e-13f2-4062-9a83-49185ff14b0a\">Centralize Error Handling</a></li></ul>"
}