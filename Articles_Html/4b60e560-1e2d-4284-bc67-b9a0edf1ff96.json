{
  "id": "4b60e560-1e2d-4284-bc67-b9a0edf1ff96",
  "checksum": "19b67b2ccbe5ec94fc3aeca8cab97b7c9ee4e98c",
  "words": {
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "c++": [
      "ul",
      "li"
    ],
    "what": [
      "h1"
    ],
    "check": [
      "h1",
      "h1"
    ],
    "for": [
      "h1",
      "p",
      "p",
      "p"
    ],
    "verify": [
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "range": [
      "p",
      "p",
      "p",
      "p"
    ],
    "checks": [
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "performed": [
      "p",
      "p"
    ],
    "before": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "values": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "title"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "mathematical": [
      "p"
    ],
    "operations": [
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p"
    ],
    "conversions": [
      "p",
      "p"
    ],
    "assigned": [
      "p",
      "p"
    ],
    "integer-type": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "variables": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "have": [
      "p"
    ],
    "minimum": [
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "maximum": [
      "p"
    ],
    "limits": [
      "p"
    ],
    "on": [
      "p",
      "p"
    ],
    "data": [
      "p",
      "p",
      "p"
    ],
    "they": [
      "p"
    ],
    "can": [
      "p"
    ],
    "store": [
      "p"
    ],
    "placing": [
      "p"
    ],
    "too": [
      "p",
      "p",
      "p",
      "p"
    ],
    "much": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p"
    ],
    "variable": [
      "p"
    ],
    "results": [
      "p",
      "p"
    ],
    "integer": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a",
      "title"
    ],
    "overflow": [
      "p",
      "p"
    ],
    "different": [
      "p"
    ],
    "platforms": [
      "p"
    ],
    "fail": [
      "p"
    ],
    "differently": [
      "p"
    ],
    "as": [
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "result": [
      "p",
      "p",
      "p"
    ],
    "overflows": [
      "p",
      "ul",
      "li",
      "a"
    ],
    "but": [
      "p",
      "p"
    ],
    "there": [
      "p"
    ],
    "is": [
      "p",
      "p"
    ],
    "possibility": [
      "p"
    ],
    "arbitrary": [
      "p"
    ],
    "code": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "execution": [
      "p"
    ],
    "resulting": [
      "p"
    ],
    "from": [
      "p"
    ],
    "bug": [
      "p"
    ],
    "when": [
      "p"
    ],
    "high": [
      "p"
    ],
    "low": [
      "p"
    ],
    "unsigned": [
      "p",
      "p"
    ],
    "integers": [
      "p",
      "p",
      "p"
    ],
    "integer-wrapping": [
      "p"
    ],
    "which": [
      "p"
    ],
    "usually": [
      "p"
    ],
    "means": [
      "p"
    ],
    "unexpected": [
      "p"
    ],
    "produced": [
      "p"
    ],
    "between": [
      "p"
    ],
    "signed": [
      "p"
    ],
    "other": [
      "p"
    ],
    "types": [
      "p",
      "p"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "truncation": [
      "p"
    ],
    "losing": [
      "p"
    ],
    "sign": [
      "p"
    ],
    "information": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "these": [
      "p",
      "p",
      "p"
    ],
    "bugs": [
      "p",
      "p"
    ],
    "very": [
      "p"
    ],
    "dangerous": [
      "p"
    ],
    "vulnerabilities": [
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "prevented": [
      "p"
    ],
    "by": [
      "p"
    ],
    "validating": [
      "p"
    ],
    "assigning": [
      "p",
      "p",
      "p",
      "p"
    ],
    "them": [
      "p"
    ],
    "how": [
      "h1",
      "h1"
    ],
    "identify": [
      "p",
      "p"
    ],
    "assigns": [
      "p",
      "p"
    ],
    "existing": [
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "good": [
      "p"
    ],
    "idea": [
      "p"
    ],
    "prioritize": [
      "p"
    ],
    "components": [
      "p",
      "p"
    ],
    "so": [
      "p"
    ],
    "the": [
      "p"
    ],
    "most": [
      "p"
    ],
    "critical": [
      "p",
      "p"
    ],
    "elements": [
      "p"
    ],
    "checked": [
      "p"
    ],
    "first": [
      "p"
    ],
    "some": [
      "p"
    ],
    "development": [
      "p"
    ],
    "environments": [
      "p"
    ],
    "compilers": [
      "p"
    ],
    "able": [
      "p"
    ],
    "detect": [
      "p"
    ],
    "errors": [
      "p"
    ],
    "automatic": [
      "p"
    ],
    "detection": [
      "p"
    ],
    "should": [
      "p"
    ],
    "not": [
      "p"
    ],
    "relied": [
      "p"
    ],
    "software": [
      "p"
    ],
    "fix": [
      "h1"
    ],
    "write": [
      "p"
    ],
    "performs": [
      "p"
    ],
    "this": [
      "p"
    ],
    "task": [
      "p"
    ],
    "time-consuming": [
      "p"
    ],
    "large": [
      "p"
    ],
    "project": [
      "p"
    ],
    "important": [
      "p"
    ],
    "make": [
      "p"
    ],
    "standard": [
      "p"
    ],
    "practice": [
      "p"
    ],
    "writing": [
      "p"
    ],
    "secure": [
      "p"
    ],
    "performing": [
      "p"
    ],
    "related": [
      "h1"
    ],
    "items": [
      "h1"
    ],
    "validate": [
      "ul",
      "li",
      "a"
    ],
    "ranges": [
      "ul",
      "li",
      "a"
    ],
    "protect": [
      "ul",
      "li",
      "a"
    ],
    "against": [
      "ul",
      "li",
      "a"
    ],
    "validated": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Check For",
      "Why",
      "How to Check",
      "How to Fix",
      "Related Items"
    ],
    "ul": [
      "C++",
      "Validate Ranges of All Integer Values\n      \n        Protect Against Integer Overflows"
    ],
    "li": [
      "C++",
      "Validate Ranges of All Integer Values",
      "Protect Against Integer Overflows"
    ],
    "p": [
      "Verify that range checks are performed before values of mathematical operations or conversions are assigned to integer-type variables.",
      "Integer-type variables have minimum and maximum limits on data that they can store. Placing too much data in an integer-type variable results in an integer overflow. Different platforms fail differently as a result of integer overflows, but there is a possibility of an arbitrary code execution resulting from an integer overflow bug. When values that are too high or too low are assigned to unsigned integers, integer-wrapping results, which usually means that unexpected values are produced. Conversions between signed and unsigned integers, and other data types, may result in truncation or losing sign information. All of these bugs may result in very dangerous vulnerabilities. All of these bugs may be prevented by validating values of integer operations before assigning them to variables.",
      "Identify all code that assigns values to integer-type variables. Verify that range checks are performed before assigning values to integers. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first. Some development environments and compilers may be able to detect these types of errors, but automatic detection should not be relied on for critical software components.",
      "Identify all code that assigns values to integer-type variables. Write code that performs range checks before assigning values to integer-type variables. This task may be too time-consuming for a large project. It is important to make a standard practice of writing secure code and performing range checks before assigning values to integer-type variables."
    ],
    "a": [
      "Validate Ranges of All Integer Values",
      "Protect Against Integer Overflows"
    ]
  },
  "links": [
    {
      "href": "/article/eeb8a6d5-2181-48fa-8b2a-3e44a532a50a",
      "text": "Validate Ranges of All Integer Values"
    },
    {
      "href": "/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345",
      "text": "Protect Against Integer Overflows"
    }
  ],
  "html": "<h1>Applies to</h1>\n  <ul>\n    <li>C&#43;&#43;</li>\n  </ul>\n  <h1>What to Check For</h1>\n  <p>Verify that range checks are performed before values of mathematical operations or conversions are assigned to integer-type variables.</p>\n  <h1>Why</h1>\n  <p>Integer-type variables have minimum and maximum limits on data that they can store. Placing too much data in an integer-type variable results in an integer overflow. Different platforms fail differently as a result of integer overflows, but there is a possibility of an arbitrary code execution resulting from an integer overflow bug. When values that are too high or too low are assigned to unsigned integers, integer-wrapping results, which usually means that unexpected values are produced. Conversions between signed and unsigned integers, and other data types, may result in truncation or losing sign information. All of these bugs may result in very dangerous vulnerabilities. All of these bugs may be prevented by validating values of integer operations before assigning them to variables.</p>\n  <h1>How to Check</h1>\n  <p>Identify all code that assigns values to integer-type variables. Verify that range checks are performed before assigning values to integers. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first. Some development environments and compilers may be able to detect these types of errors, but automatic detection should not be relied on for critical software components.</p>\n  <h1>How to Fix</h1>\n  <p>Identify all code that assigns values to integer-type variables. Write code that performs range checks before assigning values to integer-type variables. This task may be too time-consuming for a large project. It is important to make a standard practice of writing secure code and performing range checks before assigning values to integer-type variables.</p>\n  <h1>Related Items</h1>\n  <ul>\n    <li>\n      <a href=\"/article/eeb8a6d5-2181-48fa-8b2a-3e44a532a50a\">Validate Ranges of All Integer Values</a>\n      <li>\n        <a href=\"/article/6c6f0d93-0d5b-4aa4-97b0-9e69535b3345\">Protect Against Integer Overflows</a>\n      </li>\n    </li>\n  </ul>"
}