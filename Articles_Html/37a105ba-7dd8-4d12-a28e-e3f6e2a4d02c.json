{
  "id": "37a105ba-7dd8-4d12-a28e-e3f6e2a4d02c",
  "checksum": "d7f26e679f222225c342d1ef663ad42c573352a8",
  "words": {
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "aspnet": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "purpose": [
      "p"
    ],
    "of": [
      "p",
      "ul",
      "li",
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p"
    ],
    "snippet": [
      "p"
    ],
    "is": [
      "p",
      "pre",
      "pre",
      "ul",
      "li",
      "p"
    ],
    "illustrate": [
      "p",
      "ul",
      "li"
    ],
    "how": [
      "p",
      "ul",
      "li"
    ],
    "retrieve": [
      "p",
      "pre",
      "pre",
      "title"
    ],
    "a": [
      "p",
      "p",
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "title"
    ],
    "public": [
      "p",
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "keypair": [
      "p",
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "stored": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "in": [
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "p",
      "p",
      "p"
    ],
    "registry": [
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "title"
    ],
    "using": [
      "p",
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "p"
    ],
    "data": [
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "pre",
      "p",
      "p",
      "p"
    ],
    "protection": [
      "p"
    ],
    "api": [
      "p"
    ],
    "dpapi)": [
      "p"
    ],
    "and": [
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "title"
    ],
    "decrypt": [
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "pre",
      "p",
      "title"
    ],
    "message": [
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "title"
    ],
    "that": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "key": [
      "p",
      "ul",
      "li",
      "pre",
      "pre",
      "p",
      "p",
      "pre",
      "pre",
      "pre",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "pair": [
      "p",
      "p",
      "p",
      "title"
    ],
    "objectives": [
      "h1"
    ],
    "make": [
      "ul",
      "li"
    ],
    "use": [
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "securely": [
      "ul",
      "ul",
      "li",
      "li",
      "ul",
      "li",
      "p"
    ],
    "rsa": [
      "ul",
      "li",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p",
      "title"
    ],
    "for": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "ul",
      "li",
      "p"
    ],
    "an": [
      "ul",
      "li",
      "pre",
      "p",
      "pre",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "encrypted": [
      "ul",
      "li",
      "ul",
      "li",
      "pre",
      "pre",
      "pre",
      "p",
      "p",
      "p"
    ],
    "keys": [
      "ul",
      "li",
      "p"
    ],
    "dpapi": [
      "ul",
      "li",
      "pre"
    ],
    "can": [
      "ul",
      "li",
      "p"
    ],
    "be": [
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "easy": [
      "ul",
      "li"
    ],
    "implement": [
      "ul",
      "li"
    ],
    "scenarios": [
      "h1"
    ],
    "distributed": [
      "ul",
      "li",
      "p"
    ],
    "client-server": [
      "ul",
      "li"
    ],
    "architecture": [
      "ul",
      "li"
    ],
    "where": [
      "ul",
      "li"
    ],
    "clients": [
      "ul",
      "li"
    ],
    "need": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "send": [
      "ul",
      "li",
      "p"
    ],
    "confidential": [
      "ul",
      "li"
    ],
    "messages": [
      "ul",
      "ul",
      "li",
      "li",
      "p"
    ],
    "server": [
      "ul",
      "li"
    ],
    "but": [
      "ul",
      "li"
    ],
    "don't": [
      "ul",
      "li"
    ],
    "ever": [
      "ul",
      "li"
    ],
    "read": [
      "ul",
      "li",
      "pre",
      "pre"
    ],
    "those": [
      "ul",
      "li"
    ],
    "application": [
      "ul",
      "li"
    ],
    "does": [
      "ul",
      "li",
      "p"
    ],
    "not": [
      "ul",
      "li",
      "p"
    ],
    "want": [
      "ul",
      "li"
    ],
    "maintain": [
      "ul",
      "li",
      "p"
    ],
    "dedicated": [
      "ul",
      "li"
    ],
    "store": [
      "ul",
      "li",
      "pre"
    ],
    "encryption": [
      "ul",
      "li",
      "ul",
      "li",
      "p",
      "p"
    ],
    "purposes": [
      "ul",
      "li"
    ],
    "solution": [
      "h1",
      "p",
      "p"
    ],
    "example": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "static": [
      "pre",
      "pre",
      "pre"
    ],
    "byte]": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "retrieversakeypairanddecryptmessagebyte[]": [
      "pre"
    ],
    "encrypted{": [
      "pre"
    ],
    "//": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "from": [
      "pre",
      "pre",
      "p",
      "pre",
      "pre",
      "pre",
      "p",
      "title"
    ],
    "serialized": [
      "pre",
      "pre"
    ],
    "as": [
      "pre",
      "pre",
      "p"
    ],
    "xml": [
      "pre"
    ],
    "string": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "encryptedkeypair": [
      "pre",
      "pre"
    ],
    "=": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "registrygetvalue(@\"hkey_current_user\\rsakeypair\",": [
      "pre"
    ],
    "\"keydata\"": [
      "pre"
    ],
    "null": [
      "pre",
      "pre"
    ],
    "byte];": [
      "pre"
    ],
    "keypairbytes": [
      "pre"
    ],
    "protecteddataunprotect(": [
      "pre"
    ],
    "dataprotectionscopecurrentuser);": [
      "pre"
    ],
    "keypairxml": [
      "pre",
      "pre"
    ],
    "unicodeencodingascii.getstring(keypairbytes);": [
      "pre"
    ],
    "create": [
      "pre",
      "pre",
      "pre"
    ],
    "new": [
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre",
      "pre"
    ],
    "csp": [
      "pre",
      "pre",
      "pre"
    ],
    "which": [
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "load": [
      "pre",
      "pre",
      "pre"
    ],
    "public/private": [
      "pre",
      "pre"
    ],
    "retrieved": [
      "pre",
      "pre"
    ],
    "rsacryptoserviceprovider": [
      "pre",
      "pre"
    ],
    "retrievedrsa": [
      "pre",
      "pre"
    ],
    "rsacryptoserviceprovider);": [
      "pre",
      "pre"
    ],
    "retrievedrsafromxmlstring(keypairxml);": [
      "pre"
    ],
    "return": [
      "pre",
      "pre",
      "pre"
    ],
    "retrievedrsa.decrypt(encrypted,": [
      "pre"
    ],
    "false);}": [
      "pre",
      "pre"
    ],
    "problem": [
      "h1"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "demonstrates": [
      "p"
    ],
    "retrieval": [
      "p"
    ],
    "containing": [
      "p",
      "pre",
      "pre"
    ],
    "private": [
      "p",
      "ul",
      "li",
      "p",
      "p",
      "p"
    ],
    "material": [
      "p",
      "ul",
      "li"
    ],
    "file": [
      "p",
      "pre",
      "pre"
    ],
    "system": [
      "p"
    ],
    "filename": [
      "pre"
    ],
    "path": [
      "pre"
    ],
    "location": [
      "pre"
    ],
    "with": [
      "pre"
    ],
    "pair//": [
      "pre"
    ],
    "byte": [
      "pre"
    ],
    "array": [
      "pre"
    ],
    "decryption//": [
      "pre"
    ],
    "open": [
      "pre"
    ],
    "up": [
      "pre"
    ],
    "into": [
      "pre",
      "pre"
    ],
    "stringstreamreader": [
      "pre"
    ],
    "keyreader": [
      "pre"
    ],
    "streamreaderfilename);string": [
      "pre"
    ],
    "keyreaderreadtoend();keyreader.close();//": [
      "pre"
    ],
    "registryrsacryptoserviceprovider": [
      "pre"
    ],
    "rsacryptoserviceprovider);retrievedrsa.fromxmlstring(keypairxml);//": [
      "pre"
    ],
    "retrievedrsadecrypt(encrypted,": [
      "pre"
    ],
    "false;": [
      "pre"
    ],
    "if": [
      "ul",
      "li"
    ],
    "filesystem": [
      "ul",
      "li"
    ],
    "compromised": [
      "ul",
      "li"
    ],
    "may": [
      "ul",
      "li"
    ],
    "exposed": [
      "ul",
      "li"
    ],
    "extra": [
      "ul",
      "li"
    ],
    "management": [
      "ul",
      "li"
    ],
    "required": [
      "ul",
      "li"
    ],
    "ensure": [
      "ul",
      "li"
    ],
    "acl's": [
      "ul",
      "li"
    ],
    "are": [
      "ul",
      "li",
      "p"
    ],
    "set": [
      "ul",
      "li"
    ],
    "files": [
      "ul",
      "li"
    ],
    "contain": [
      "ul",
      "li"
    ],
    "alternate": [
      "ul",
      "li"
    ],
    "settings": [
      "ul",
      "li"
    ],
    "lack": [
      "ul",
      "li"
    ],
    "when": [
      "ul",
      "li"
    ],
    "sending": [
      "ul",
      "li"
    ],
    "exposes": [
      "ul",
      "li"
    ],
    "sensitive": [
      "ul",
      "li"
    ],
    "eavesdropping": [
      "ul",
      "li"
    ],
    "while": [
      "ul",
      "li",
      "p"
    ],
    "transit": [
      "ul",
      "li"
    ],
    "test": [
      "h1"
    ],
    "case": [
      "h1"
    ],
    "classes": [
      "p"
    ],
    "must": [
      "p",
      "p"
    ],
    "included": [
      "p"
    ],
    "any": [
      "p"
    ],
    "project": [
      "p"
    ],
    "making": [
      "p"
    ],
    "sample": [
      "p"
    ],
    "provided": [
      "p"
    ],
    "above": [
      "p",
      "p"
    ],
    "systemio;using": [
      "pre"
    ],
    "systemsecurity;using": [
      "pre"
    ],
    "systemsecurity.accesscontrol;using": [
      "pre"
    ],
    "systemsecurity.cryptography;using": [
      "pre"
    ],
    "microsoftwin32;": [
      "pre"
    ],
    "encrypt": [
      "p",
      "pre",
      "pre"
    ],
    "registry-stored": [
      "p"
    ],
    "then": [
      "p"
    ],
    "void": [
      "pre"
    ],
    "mainstring[]": [
      "pre"
    ],
    "args{": [
      "pre"
    ],
    "publickeyxml": [
      "pre"
    ],
    "\"rsakeyvalue>\"": [
      "pre"
    ],
    "+": [
      "pre",
      "pre",
      "pre"
    ],
    "\"modulus>tnlagajwxxxyj+2qpx6q/mhzzf23xsvvovoblz1y7rbtlky4n2nlcgxfr6mqcttwkfwshq7yeax6rvfhhrhdah": [
      "pre"
    ],
    "lcsg7g3amw2bsobxwuijd81zenkywrw8t0gjnignr46+pqo1xi7r9aa+pgaluhuzbbgjk2wialrjspltr5ojdr4vjlziag/v": [
      "pre"
    ],
    "qmjvxiopfv1qi2hflm86jgicrd47l0k44tkwyhaj4pn1nsomjpeb0p9m9t3od/c+yzgkk+ij1nwqwg02h/exroao6yfkb3xi": [
      "pre"
    ],
    "jnv69gv+zlgc+qssxs7bs7cdzqmqvsylxuxkyz5bqg++raywm4l056whtirg8mqq==/modulus>\"": [
      "pre"
    ],
    "\"exponent>aqab</exponent>\"": [
      "pre"
    ],
    "\"/rsakeyvalue>\";": [
      "pre"
    ],
    "our": [
      "pre"
    ],
    "write": [
      "pre"
    ],
    "out": [
      "pre"
    ],
    "results": [
      "pre"
    ],
    "msg": [
      "pre"
    ],
    "\"the": [
      "pre"
    ],
    "quick": [
      "pre",
      "pre",
      "pre"
    ],
    "brown": [
      "pre",
      "pre",
      "pre"
    ],
    "fox": [
      "pre",
      "pre",
      "pre"
    ],
    "jumped": [
      "pre",
      "pre",
      "pre"
    ],
    "over": [
      "pre",
      "pre",
      "pre",
      "p"
    ],
    "lazy": [
      "pre",
      "pre",
      "pre"
    ],
    "dog\"": [
      "pre"
    ],
    "readrsapublickeyandencryptmessagepublickeyxml,": [
      "pre"
    ],
    "msg;": [
      "pre"
    ],
    "consolewriteline(\"encrypted": [
      "pre"
    ],
    "data\");": [
      "pre",
      "pre"
    ],
    "consolewriteline(convert.tobase64string(encrypted));": [
      "pre"
    ],
    "decrypted": [
      "pre",
      "p"
    ],
    "retrieversakeypairanddecryptmessageencrypted);": [
      "pre"
    ],
    "consolewriteline(\"\\ndecrypted": [
      "pre"
    ],
    "consolewriteline(encoding.ascii.getstring(decrypted));}public": [
      "pre"
    ],
    "readrsapublickeyandencryptmessagestring": [
      "pre"
    ],
    "xmlkeydata": [
      "pre"
    ],
    "filename{": [
      "pre"
    ],
    "yourrsa": [
      "pre"
    ],
    "yourrsafromxmlstring(xmlkeydata);": [
      "pre"
    ],
    "original": [
      "pre"
    ],
    "encodingascii.getbytes(\"the": [
      "pre"
    ],
    "dog\";": [
      "pre"
    ],
    "returnyourrsa.encrypt(original,": [
      "pre"
    ],
    "expected": [
      "h1"
    ],
    "result": [
      "h1"
    ],
    "yqdgxh+fyxevjaotoot4kvr00nmnv4xbwlrp5hyk7qz2zs9a64i0ug9s99shdwvmbit/nsktkmpu8gzgxx3r7znxn44kkkilxkcixvfxhhnkumux3txdplzkphpkcg09nfvtxdkehonvvqer5wyp54xnkqu3b6vpbui6wabn/dqrhe0ziqpakm2nbhu5h18mfo6brq0ug9tns9xj4mad5awdvqklkumr9qs94czpzt5ecfv8rx4/hbvl/phqz+zsyt3xhwkqrdt+t+a5zf1g5ey9poakpzptli+/2lshajvujo/fqifolu1vca1bomoncpk0a1b4zim5a+tpy+zp6w==": [
      "pre"
    ],
    "dog": [
      "pre"
    ],
    "more": [
      "h1"
    ],
    "information": [
      "h1"
    ],
    "algorithm": [
      "p"
    ],
    "also": [
      "p"
    ],
    "knows": [
      "p"
    ],
    "asymmetric": [
      "p"
    ],
    "cryptography": [
      "p",
      "p"
    ],
    "distinct": [
      "p"
    ],
    "created": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "makes": [
      "p"
    ],
    "decryption": [
      "p"
    ],
    "requires": [
      "p"
    ],
    "offers": [
      "p"
    ],
    "advantage": [
      "p"
    ],
    "symmetric": [
      "p"
    ],
    "because": [
      "p"
    ],
    "secret": [
      "p"
    ],
    "used": [
      "p"
    ],
    "shared": [
      "p"
    ],
    "order": [
      "p",
      "p"
    ],
    "support": [
      "p"
    ],
    "recipient": [
      "p"
    ],
    "confidentiality": [
      "p"
    ],
    "individual's": [
      "p"
    ],
    "however": [
      "p"
    ],
    "freely": [
      "p"
    ],
    "by": [
      "p"
    ],
    "owner": [
      "p",
      "p"
    ],
    "anyone": [
      "p"
    ],
    "who": [
      "p"
    ],
    "wishes": [
      "p"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Objectives",
      "Scenarios",
      "Solution Example",
      "Problem Example",
      "Test Case",
      "Expected Result",
      "More Information"
    ],
    "ul": [
      "ASP.NET 4.0",
      "Make use of a securely stored RSA keypair for to decrypt an encrypted message.\r\n    Illustrate how securely stored keys in the registry and using the DPAPI can be easy to implement.",
      "Distributed client-server architecture where clients need to send confidential encrypted messages to the server but don't need to ever read those messages.\r\n    Application does not want to maintain a dedicated key store for encryption purposes.",
      "If the filesystem is compromised, the private key material may be exposed.\r\n    Extra management required to ensure that ACL's are securely set for files that contain key data.\r\n    In alternate settings, lack of encryption when sending message exposes sensitive data to eavesdropping while in transit."
    ],
    "li": [
      "ASP.NET 4.0",
      "Make use of a securely stored RSA keypair for to decrypt an encrypted message.",
      "Illustrate how securely stored keys in the registry and using the DPAPI can be easy to implement.",
      "Distributed client-server architecture where clients need to send confidential encrypted messages to the server but don't need to ever read those messages.",
      "Application does not want to maintain a dedicated key store for encryption purposes.",
      "If the filesystem is compromised, the private key material may be exposed.",
      "Extra management required to ensure that ACL's are securely set for files that contain key data.",
      "In alternate settings, lack of encryption when sending message exposes sensitive data to eavesdropping while in transit."
    ],
    "p": [
      "The purpose of this code snippet is to illustrate how to retrieve a public keypair stored in the registry using the Data Protection API (DPAPI) and decrypt a message using that key pair.",
      "The following example demonstrates the retrieval of an RSA key pair containing private key material from the file system.",
      "The following classes must be included in any project making use of the sample code provided above:",
      "Use the solution example above and the following code to encrypt an example using the registry-stored public key and then decrypt using the solution example:",
      "Encrypted data:",
      "Decrypted data:",
      "RSA is an algorithm for public key (also knows as asymmetric) cryptography in which distinct public and private keys are created. Encryption operations makes use of the public key while decryption requires the private key. This offers an advantage over symmetric cryptography because the secret key used to decrypt a message does not need to be shared in order to support encryption of messages to a recipient.",
      "The RSA private key must be securely stored in order to maintain the confidentiality of data encrypted using an individual's public RSA key. However, the public key can be freely distributed by the owner of the key pair to anyone who wishes to send an encrypted message to that owner.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "pre": [
      "public static byte[] RetrieveRSAKeyPairAndDecryptMessage(byte[] encrypted){      // Retrieve the keypair from the registry, decrypt using the DPAPI      // and store the serialized key data as an XML string      byte[] encryptedKeyPair = Registry.GetValue(@\"HKEY_CURRENT_USER\\RSAKeyPair\",\t  \"KeyData\", null) as byte[];      byte[] keyPairBytes = ProtectedData.Unprotect(           encryptedKeyPair,           null,           DataProtectionScope.CurrentUser);      string keyPairXml = UnicodeEncoding.ASCII.GetString(keyPairBytes);      // Create a new RSA CSP in which to load the public/private key      // data retrieved from the registry      RSACryptoServiceProvider retrievedRSA = new RSACryptoServiceProvider();      retrievedRSA.FromXmlString(keyPairXml);      // Decrypt message and return      return (retrievedRSA.Decrypt(encrypted, false));}",
      "// fileName is a string containing a path location with a serialized RSA key pair// encrypted is a byte array containing an encrypted message for decryption// Open up the public key file and read into a stringStreamReader keyReader = new StreamReader(fileName);string keyPairXml = keyReader.ReadToEnd();keyReader.Close();// Create a new RSA CSP in which to load the public/private key // data retrieved from the registryRSACryptoServiceProvider retrievedRSA = new RSACryptoServiceProvider();retrievedRSA.FromXmlString(keyPairXml);// Decrypt message retrievedRSA.Decrypt(encrypted, false);",
      "using System.IO;using System.Security;using System.Security.AccessControl;using System.Security.Cryptography;using Microsoft.Win32;",
      "static void Main(string[] args){   // Read public key into a string   string publicKeyXml = \"<RSAKeyValue>\" +    \"<Modulus>tnLAgAJwXXxYj+2QPX6q/mHZZf23xSvvovoBlZ1Y7RbTlkY4N2nlcGxfR6mQcTTWKfWShQ7yEaX6rVfhhRhdaH    LCsg7g3AmW2BsoBxWUijD81ZeNKyWrw8t0gjnigNR46+PqO1Xi7R9aA+PgaluhuZBBgJK2wIAlRJSPlTr5OjDr4vJlZiAG/V    qmJVXioPfv1QI2hfLM86JgIcrD47L0K44tKwyhAj4PN1nsomjPeb0P9m9t3od/c+yZGKk+iJ1nwQwG02H/EXROaO6YFKb3xi    jNv69gv+ZLGc+qssXs7Bs7CdzqmQvSylxuXkYz5bQG++raYWm4l056WhtIRG8mqQ==</Modulus>\" +    \"<Exponent>AQAB</Exponent>\" + \"</RSAKeyValue>\";    // Encrypt a message using our key and write out the results    string msg = \"The quick brown fox jumped over the lazy dog\";    byte[] encrypted = ReadRSAPublicKeyAndEncryptMessage(publicKeyXml, msg);    Console.WriteLine(\"Encrypted data:\");    Console.WriteLine(Convert.ToBase64String(encrypted));    // Retrieve RSA KeyPair from registry and decrypt a message    byte[] decrypted = RetrieveRSAKeyPairAndDecryptMessage(encrypted);    Console.WriteLine(\"\\nDecrypted data:\");    Console.WriteLine(Encoding.ASCII.GetString(decrypted));}public static byte[] ReadRSAPublicKeyAndEncryptMessage(string xmlKeyData, string fileName){    // Create a new RSA CSP in which to load the public key data from file    RSACryptoServiceProvider yourRSA = new RSACryptoServiceProvider();    yourRSA.FromXmlString(xmlKeyData);    // Encrypt a message and return    byte[] original = Encoding.ASCII.GetBytes(\"The quick brown fox jumped over the lazy dog\");    return(yourRSA.Encrypt(original, false));}",
      "YQdGxH+fyXEVjaoToOT4kVR00nmNv4xBWLRP5hyk7qz2zS9a64I0Ug9S99shDWvmbIT/nsKTkmPu8gZGXx3R7zNXn44KKKIlXKcIxvfXHHnkuMuX3tXdpLZKPhPKcG09nFVtxdKehOnvVQEr5Wyp54XnkqU3B6VpBui6wabN/dqrhE0ziqpAkM2NbhU5H18mfo6brq0Ug9Tns9xj4mAD5AwDvqKlkumr9qS94czPzt5ECFv8rX4/HBvl/PhQZ+zsYt3xHwkQRDt+T+A5zf1G5ey9pOAKpzPtLI+/2LShaJVujo/fQifoLU1vCa1BoMONCpk0A1B4zIm5a+TpY+zp6w==",
      "The quick brown fox jumped over the lazy dog"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "hr": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>The purpose of this code snippet is to illustrate how to retrieve a public keypair stored in the registry using the Data Protection API (DPAPI) and decrypt a message using that key pair.</p>\r\n  <h1>Objectives</h1>\r\n  <ul>\r\n    <li>Make use of a securely stored RSA keypair for to decrypt an encrypted message.</li>\r\n    <li>Illustrate how securely stored keys in the registry and using the DPAPI can be easy to implement.</li>\r\n  </ul>\r\n  <h1>Scenarios</h1>\r\n  <ul>\r\n    <li>Distributed client-server architecture where clients need to send confidential encrypted messages to the server but don't need to ever read those messages.</li>\r\n    <li>Application does not want to maintain a dedicated key store for encryption purposes.</li>\r\n  </ul>\r\n  <h1>Solution Example</h1>\r\n  <pre>public static byte[] RetrieveRSAKeyPairAndDecryptMessage(byte[] encrypted){<br />      // Retrieve the keypair from the registry, decrypt using the DPAPI<br />      // and store the serialized key data as an XML string<br />      byte[] encryptedKeyPair = Registry.GetValue(@\"HKEY_CURRENT_USER\\RSAKeyPair\",<br />\t  \"KeyData\", null) as byte[];<br />      byte[] keyPairBytes = ProtectedData.Unprotect(<br />           encryptedKeyPair,<br />           null,<br />           DataProtectionScope.CurrentUser);<br />      string keyPairXml = UnicodeEncoding.ASCII.GetString(keyPairBytes);<br /><br />      // Create a new RSA CSP in which to load the public/private key<br />      // data retrieved from the registry<br />      RSACryptoServiceProvider retrievedRSA = new RSACryptoServiceProvider();<br />      retrievedRSA.FromXmlString(keyPairXml);<br /><br />      // Decrypt message and return<br />      return (retrievedRSA.Decrypt(encrypted, false));<br />}</pre>\r\n  <h1>Problem Example</h1>\r\n  <p>The following example demonstrates the retrieval of an RSA key pair containing private key material from the file system.</p>\r\n  <pre>// fileName is a string containing a path location with a serialized RSA key pair<br />// encrypted is a byte array containing an encrypted message for decryption<br />// Open up the public key file and read into a string<br />StreamReader keyReader = new StreamReader(fileName);<br />string keyPairXml = keyReader.ReadToEnd();<br />keyReader.Close();<br /><br />// Create a new RSA CSP in which to load the public/private key <br />// data retrieved from the registry<br />RSACryptoServiceProvider retrievedRSA = new RSACryptoServiceProvider();<br />retrievedRSA.FromXmlString(keyPairXml);<br /><br />// Decrypt message retrieved<br />RSA.Decrypt(encrypted, false);</pre>\r\n  <ul>\r\n    <li>If the filesystem is compromised, the private key material may be exposed.</li>\r\n    <li>Extra management required to ensure that ACL's are securely set for files that contain key data.</li>\r\n    <li>In alternate settings, lack of encryption when sending message exposes sensitive data to eavesdropping while in transit.</li>\r\n  </ul>\r\n  <h1>Test Case</h1>\r\n  <p>The following classes must be included in any project making use of the sample code provided above:</p>\r\n  <pre>using System.IO;<br />using System.Security;<br />using System.Security.AccessControl;<br />using System.Security.Cryptography;<br />using Microsoft.Win32;</pre>\r\n  <p>Use the solution example above and the following code to encrypt an example using the registry-stored public key and then decrypt using the solution example:</p>\r\n  <pre>static void Main(string[] args){<br />   // Read public key into a string<br />   string publicKeyXml = \"&lt;RSAKeyValue&gt;\" +<br />    \"&lt;Modulus&gt;tnLAgAJwXXxYj+2QPX6q/mHZZf23xSvvovoBlZ1Y7RbTlkY4N2nlcGxfR6mQcTTWKfWShQ7yEaX6rVfhhRhdaH<br />    LCsg7g3AmW2BsoBxWUijD81ZeNKyWrw8t0gjnigNR46+PqO1Xi7R9aA+PgaluhuZBBgJK2wIAlRJSPlTr5OjDr4vJlZiAG/V<br />    qmJVXioPfv1QI2hfLM86JgIcrD47L0K44tKwyhAj4PN1nsomjPeb0P9m9t3od/c+yZGKk+iJ1nwQwG02H/EXROaO6YFKb3xi<br />    jNv69gv+ZLGc+qssXs7Bs7CdzqmQvSylxuXkYz5bQG++raYWm4l056WhtIRG8mqQ==&lt;/Modulus&gt;\" +<br />    \"&lt;Exponent&gt;AQAB&lt;/Exponent&gt;\" + \"&lt;/RSAKeyValue&gt;\";<br /><br />    // Encrypt a message using our key and write out the results<br />    string msg = \"The quick brown fox jumped over the lazy dog\";<br />    byte[] encrypted = ReadRSAPublicKeyAndEncryptMessage(publicKeyXml, msg);<br />    Console.WriteLine(\"Encrypted data:\");<br />    Console.WriteLine(Convert.ToBase64String(encrypted));<br /><br />    // Retrieve RSA KeyPair from registry and decrypt a message<br />    byte[] decrypted = RetrieveRSAKeyPairAndDecryptMessage(encrypted);<br />    Console.WriteLine(\"\\nDecrypted data:\");<br />    Console.WriteLine(Encoding.ASCII.GetString(decrypted));<br />}<br /><br />public static byte[] ReadRSAPublicKeyAndEncryptMessage(string xmlKeyData, string fileName){<br />    // Create a new RSA CSP in which to load the public key data from file<br />    RSACryptoServiceProvider yourRSA = new RSACryptoServiceProvider();<br />    yourRSA.FromXmlString(xmlKeyData);<br /><br />    // Encrypt a message and return<br />    byte[] original = Encoding.ASCII.GetBytes(\"The quick brown fox jumped over the lazy dog\");<br />    return(yourRSA.Encrypt(original, false));<br />}</pre>\r\n  <h1>Expected Result</h1>\r\n  <p>Encrypted data:</p>\r\n  <pre>YQdGxH+fyXEVjaoToOT4kVR00nmNv4xBWLRP5hyk7qz2zS9a64I0Ug9S99shDWvmbIT/nsKTkmPu8gZGXx3R7zNXn44KKKIlXKcIxv<br />fXHHnkuMuX3tXdpLZKPhPKcG09nFVtxdKehOnvVQEr5Wyp54XnkqU3B6VpBui6wabN/dqrhE0ziqpAkM2NbhU5H18mfo6brq0Ug9Tn<br />s9xj4mAD5AwDvqKlkumr9qS94czPzt5ECFv8rX4/HBvl/PhQZ+zsYt3xHwkQRDt+T+A5zf1G5ey9pOAKpzPtLI+/2LShaJVujo/fQi<br />foLU1vCa1BoMONCpk0A1B4zIm5a+TpY+zp6w==</pre>\r\n  <p>Decrypted data:</p>\r\n  <pre>The quick brown fox jumped over the lazy dog</pre>\r\n  <h1>More Information</h1>\r\n  <p>RSA is an algorithm for public key (also knows as asymmetric) cryptography in which distinct public and private keys are created. Encryption operations makes use of the public key while decryption requires the private key. This offers an advantage over symmetric cryptography because the secret key used to decrypt a message does not need to be shared in order to support encryption of messages to a recipient. </p>\r\n  <p>The RSA private key must be securely stored in order to maintain the confidentiality of data encrypted using an individual's public RSA key. However, the public key can be freely distributed by the owner of the key pair to anyone who wishes to send an encrypted message to that owner. </p>\r\n  <br />\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}