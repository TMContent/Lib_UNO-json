{
  "id": "61d1685d-2cda-4566-9da5-9f57d239c395",
  "checksum": "b7a3aab6d2574f3786cc1e721a68164604b7155a",
  "words": {
    "1": [
      "ul",
      "li",
      "h1",
      "h2"
    ],
    "2": [
      "ul",
      "li",
      "h2",
      "h1"
    ],
    "3": [
      "ul",
      "li",
      "h2",
      "h1"
    ],
    "4": [
      "ul",
      "li",
      "h1"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "software": [
      "ul",
      "li",
      "p"
    ],
    "applications": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "ul",
      "li",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "services": [
      "ul",
      "li"
    ],
    "summary": [
      "h1"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "application": [
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "must": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "protect": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "confidentiality": [
      "p"
    ],
    "integrity": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "its": [
      "p",
      "p",
      "p",
      "p"
    ],
    "assets": [
      "p"
    ],
    "continuity": [
      "p"
    ],
    "service": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "denial-of-service": [
      "p",
      "title"
    ],
    "dos)": [
      "p",
      "title"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "forces": [
      "p"
    ],
    "an": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "i",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "applicationâ€™s": [
      "p",
      "p",
      "p"
    ],
    "environment": [
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "h2",
      "h2",
      "h2",
      "h2",
      "p"
    ],
    "into": [
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "state": [
      "p",
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "h2",
      "h2",
      "h2",
      "h2",
      "p"
    ],
    "which": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "stops": [
      "p"
    ],
    "serving": [
      "p",
      "p"
    ],
    "legitimate": [
      "p",
      "p",
      "p",
      "p"
    ],
    "users": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "although": [
      "p"
    ],
    "dos": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "were": [
      "p"
    ],
    "first": [
      "p",
      "p"
    ],
    "launched": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "networks": [
      "p"
    ],
    "they": [
      "p",
      "p",
      "p",
      "p"
    ],
    "have": [
      "p",
      "p",
      "p"
    ],
    "since": [
      "p",
      "p",
      "p"
    ],
    "expanded": [
      "p"
    ],
    "application-level": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "article": [
      "p",
      "p"
    ],
    "focuses": [
      "p"
    ],
    "testing": [
      "p",
      "ul",
      "ul",
      "li",
      "li",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "font",
      "font",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "title"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "follow": [
      "p"
    ],
    "these": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p"
    ],
    "test": [
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "li",
      "h1",
      "p",
      "h1",
      "p",
      "h1",
      "h1",
      "p"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attack": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "h2"
    ],
    "analyze": [
      "ul",
      "li",
      "h1"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "start": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "exploring": [
      "ul",
      "li",
      "h1"
    ],
    "execute": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p"
    ],
    "additional": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "h1",
      "h2",
      "h1"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "common": [
      "p",
      "p",
      "p",
      "p"
    ],
    "crashing": [
      "ul",
      "li",
      "h2",
      "p"
    ],
    "forcing": [
      "ul",
      "li",
      "h2",
      "p"
    ],
    "incorrect": [
      "ul",
      "li",
      "h2",
      "h2",
      "h2",
      "h2",
      "h2",
      "p"
    ],
    "creating": [
      "ul",
      "li",
      "h2",
      "p",
      "p"
    ],
    "unstable": [
      "ul",
      "li",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "h2",
      "h2",
      "h2",
      "p"
    ],
    "scenario": [
      "h2",
      "h2",
      "h2",
      "p"
    ],
    "crashes": [
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "h2",
      "p"
    ],
    "result": [
      "p",
      "p",
      "p",
      "p"
    ],
    "situations": [
      "p"
    ],
    "becomes": [
      "p",
      "p",
      "p"
    ],
    "unusable": [
      "p",
      "p"
    ],
    "period": [
      "p"
    ],
    "time": [
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "force": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "buffer": [
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "overflow": [
      "p",
      "p",
      "p"
    ],
    "integer": [
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "division": [
      "p",
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "zero": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "other": [
      "p",
      "p",
      "p",
      "p"
    ],
    "exception": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "see": [
      "p",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "properly": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "handles": [
      "p",
      "h2",
      "p"
    ],
    "error": [
      "p",
      "p"
    ],
    "when": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "doesnâ€™t": [
      "p",
      "p",
      "p"
    ],
    "handle": [
      "p",
      "p",
      "p",
      "p"
    ],
    "errors": [
      "p",
      "p",
      "p"
    ],
    "process": [
      "p",
      "p",
      "p",
      "p",
      "font",
      "font"
    ],
    "generates": [
      "p"
    ],
    "second-chance": [
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "triggered": [
      "p"
    ],
    "right": [
      "p"
    ],
    "before": [
      "p",
      "p",
      "p"
    ],
    "program": [
      "p"
    ],
    "terminates.": [
      "p"
    ],
    "handled": [
      "p"
    ],
    "structured/default": [
      "p"
    ],
    "handler": [
      "p"
    ],
    "seh),": [
      "p"
    ],
    "turn": [
      "p"
    ],
    "usually": [
      "p",
      "p",
      "p",
      "p"
    ],
    "kills": [
      "p"
    ],
    "resulting": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "being": [
      "p",
      "p"
    ],
    "temporarily": [
      "p"
    ],
    "unable": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "neednâ€™t": [
      "p"
    ],
    "crash": [
      "p",
      "p",
      "p"
    ],
    "stop": [
      "p",
      "p",
      "p",
      "p"
    ],
    "providing": [
      "p"
    ],
    "goes": [
      "p"
    ],
    "unexpected": [
      "p",
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "become": [
      "p",
      "p",
      "p"
    ],
    "useless": [
      "p",
      "p"
    ],
    "instance": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attackers": [
      "p",
      "p"
    ],
    "who": [
      "p",
      "p",
      "p",
      "p"
    ],
    "generate": [
      "p"
    ],
    "infinite": [
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "loop": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "target": [
      "p"
    ],
    "deny": [
      "p"
    ],
    "situation": [
      "p",
      "p"
    ],
    "happens": [
      "p"
    ],
    "customer": [
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "index": [
      "p",
      "p",
      "p"
    ],
    "maliciously": [
      "p"
    ],
    "modify": [
      "p",
      "p"
    ],
    "so": [
      "p",
      "p",
      "p"
    ],
    "takes": [
      "p"
    ],
    "too": [
      "p"
    ],
    "long": [
      "p",
      "p"
    ],
    "exit": [
      "p",
      "p"
    ],
    "never": [
      "p"
    ],
    "exits": [
      "p"
    ],
    "at": [
      "p"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "able": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "requests": [
      "p",
      "p"
    ],
    "account": [
      "p"
    ],
    "lockouts": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "also": [
      "p",
      "p"
    ],
    "put": [
      "p",
      "p"
    ],
    "allows": [
      "p"
    ],
    "prevent": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "logging": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "repeatedly": [
      "p",
      "p",
      "p",
      "p"
    ],
    "makes": [
      "p"
    ],
    "failed": [
      "p"
    ],
    "login": [
      "p"
    ],
    "attempts": [
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "victimâ€™s": [
      "p"
    ],
    "username": [
      "p"
    ],
    "employ": [
      "p"
    ],
    "lockout": [
      "p"
    ],
    "policies": [
      "p"
    ],
    "human": [
      "p"
    ],
    "interaction": [
      "p"
    ],
    "proofs": [
      "p"
    ],
    "such": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "captchas": [
      "p"
    ],
    "deal": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "kind": [
      "p",
      "p"
    ],
    "attempt": [
      "p",
      "p"
    ],
    "include": [
      "p"
    ],
    "those": [
      "p"
    ],
    "uses": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "another": [
      "p",
      "p"
    ],
    "vulnerability": [
      "p",
      "p",
      "p"
    ],
    "might": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "find": [
      "p",
      "p"
    ],
    "stored": [
      "p",
      "p"
    ],
    "cross-site": [
      "p",
      "p",
      "p",
      "h2"
    ],
    "scripting": [
      "p",
      "p",
      "p",
      "h2"
    ],
    "main": [
      "p",
      "p"
    ],
    "page": [
      "p",
      "p",
      "p"
    ],
    "site": [
      "p",
      "p"
    ],
    "stores": [
      "p"
    ],
    "script": [
      "p",
      "p",
      "p"
    ],
    "prompts": [
      "p",
      "p"
    ],
    "alert": [
      "p",
      "p"
    ],
    "box": [
      "p",
      "p"
    ],
    "any": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "visits": [
      "p"
    ],
    "prompted": [
      "p"
    ],
    "consecutive": [
      "p"
    ],
    "boxes": [
      "p"
    ],
    "similarly": [
      "p",
      "p"
    ],
    "active": [
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p"
    ],
    "injection": [
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "drop": [
      "p",
      "p",
      "p"
    ],
    "database": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "table": [
      "p",
      "p",
      "p",
      "font",
      "p",
      "p",
      "p"
    ],
    "required": [
      "p",
      "p"
    ],
    "fail": [
      "p",
      "p"
    ],
    "provide": [
      "p"
    ],
    "proper": [
      "p"
    ],
    "operates": [
      "p"
    ],
    "memory": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "scarce": [
      "p"
    ],
    "quite": [
      "p"
    ],
    "likely": [
      "p",
      "p"
    ],
    "availability": [
      "p"
    ],
    "quality": [
      "p"
    ],
    "end": [
      "p"
    ],
    "affected": [
      "p"
    ],
    "programming": [
      "p",
      "p"
    ],
    "unsafe": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p"
    ],
    "allocations": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p"
    ],
    "leaks": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p"
    ],
    "executes": [
      "p"
    ],
    "transaction": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "flood": [
      "p",
      "p",
      "p"
    ],
    "order": [
      "p",
      "p",
      "p"
    ],
    "create": [
      "p",
      "p",
      "p"
    ],
    "system": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "happen": [
      "p",
      "p"
    ],
    "allocates": [
      "p",
      "p"
    ],
    "based": [
      "p",
      "p"
    ],
    "craft": [
      "p"
    ],
    "specific": [
      "p",
      "p",
      "p"
    ],
    "trick": [
      "p"
    ],
    "allocating": [
      "p",
      "p",
      "p"
    ],
    "excessive": [
      "p"
    ],
    "quantity": [
      "p"
    ],
    "thus": [
      "p",
      "p"
    ],
    "causing": [
      "p"
    ],
    "operating": [
      "p",
      "p"
    ],
    "while": [
      "p",
      "p",
      "p",
      "i",
      "p"
    ],
    "lacks": [
      "p"
    ],
    "cannot": [
      "p"
    ],
    "fails": [
      "p"
    ],
    "release": [
      "p",
      "p",
      "p",
      "p"
    ],
    "unused": [
      "p"
    ],
    "knowledge": [
      "p"
    ],
    "possible": [
      "p",
      "p",
      "p",
      "p"
    ],
    "leak": [
      "p",
      "p"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p"
    ],
    "released": [
      "p"
    ],
    "executing": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "actions": [
      "p"
    ],
    "consume": [
      "p",
      "p",
      "p",
      "p"
    ],
    "available": [
      "p"
    ],
    "servicing": [
      "p"
    ],
    "floods": [
      "p",
      "p",
      "p",
      "h2",
      "p"
    ],
    "consist": [
      "p"
    ],
    "submitting": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "transactions": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "processor": [
      "p"
    ],
    "often": [
      "p"
    ],
    "take": [
      "p"
    ],
    "advantage": [
      "p"
    ],
    "stress-testing": [
      "p"
    ],
    "tools": [
      "p",
      "p",
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p",
      "p"
    ],
    "respond": [
      "p"
    ],
    "next": [
      "p"
    ],
    "why": [
      "p"
    ],
    "occur": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "against": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "them": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "due": [
      "p"
    ],
    "unhandled": [
      "p"
    ],
    "exceptions": [
      "p",
      "p"
    ],
    "caused": [
      "p",
      "p"
    ],
    "conditions": [
      "p",
      "p",
      "p",
      "p"
    ],
    "overflows": [
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p"
    ],
    "divisions": [
      "p",
      "h2",
      "p"
    ],
    "referencing": [
      "p",
      "p"
    ],
    "invalid": [
      "p",
      "p"
    ],
    "their": [
      "p",
      "p"
    ],
    "exploitation": [
      "p"
    ],
    "developers": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "described": [
      "p"
    ],
    "above": [
      "p"
    ],
    "validate": [
      "p"
    ],
    "values": [
      "p",
      "p",
      "font",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "allocate": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "carefully": [
      "p"
    ],
    "structured": [
      "p"
    ],
    "handling": [
      "p"
    ],
    "cause": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "go": [
      "p"
    ],
    "condition": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "variation": [
      "p",
      "p"
    ],
    "occurs": [
      "p",
      "p"
    ],
    "controls": [
      "p"
    ],
    "execution": [
      "p"
    ],
    "control": [
      "p",
      "p"
    ],
    "consider": [
      "p"
    ],
    "following": [
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p"
    ],
    "posted": [
      "p"
    ],
    "owasp": [
      "p"
    ],
    "public": [
      "p",
      "p",
      "font",
      "font"
    ],
    "class": [
      "p",
      "font"
    ],
    "myservlet": [
      "p",
      "font"
    ],
    "extends": [
      "p",
      "font"
    ],
    "actionservlet": [
      "p",
      "font"
    ],
    "{": [
      "p",
      "p",
      "p",
      "font",
      "font",
      "font"
    ],
    "void": [
      "p",
      "font"
    ],
    "doposthttpservletrequest": [
      "p",
      "font"
    ],
    "request": [
      "p",
      "p",
      "font",
      "font"
    ],
    "httpservletresponse": [
      "p",
      "font"
    ],
    "response": [
      "p",
      "font",
      "p"
    ],
    "throws": [
      "p",
      "font"
    ],
    "servletexception": [
      "p",
      "font"
    ],
    "ioexception": [
      "p",
      "font"
    ],
    "string": [
      "p",
      "font",
      "p",
      "p",
      "p",
      "p"
    ],
    "]": [
      "p",
      "font"
    ],
    "=": [
      "p",
      "font",
      "p",
      "p",
      "font",
      "font"
    ],
    "requestgetparametervalues(\"checkboxfield\");": [
      "p",
      "font"
    ],
    "//": [
      "p",
      "p",
      "p",
      "font",
      "font",
      "font",
      "p",
      "font"
    ],
    "data": [
      "p",
      "font",
      "p",
      "p",
      "p",
      "p"
    ],
    "without": [
      "p",
      "font"
    ],
    "length": [
      "p",
      "font"
    ],
    "check": [
      "p",
      "font",
      "p",
      "p",
      "p",
      "p"
    ],
    "reasonable": [
      "p",
      "font",
      "p"
    ],
    "range": [
      "p",
      "font",
      "p"
    ],
    "int": [
      "p",
      "font",
      "p",
      "font"
    ],
    "i=0": [
      "p",
      "font"
    ],
    "i": [
      "p",
      "font"
    ],
    "valueslength;": [
      "p",
      "font"
    ],
    "i++": [
      "p",
      "font"
    ],
    "wrong": [
      "p",
      "font"
    ],
    "lots": [
      "p",
      "font"
    ],
    "logic": [
      "p",
      "font"
    ],
    "}": [
      "p",
      "p",
      "font",
      "font"
    ],
    "Â }": [
      "p",
      "font"
    ],
    "pass": [
      "p"
    ],
    "large": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "number": [
      "p",
      "p",
      "p",
      "p"
    ],
    "checkboxfield": [
      "p",
      "i"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p"
    ],
    "functionality": [
      "p"
    ],
    "higher": [
      "p"
    ],
    "cpu": [
      "p",
      "p",
      "p"
    ],
    "demands": [
      "p"
    ],
    "easily": [
      "p"
    ],
    "client-supplied": [
      "p",
      "p",
      "p"
    ],
    "counter": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "through": [
      "p",
      "p"
    ],
    "bugs": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "defended": [
      "p"
    ],
    "white": [
      "p"
    ],
    "lists": [
      "p",
      "p"
    ],
    "procedures": [
      "p"
    ],
    "parameterized": [
      "p"
    ],
    "queries": [
      "p"
    ],
    "encoding": [
      "p"
    ],
    "user-supplied": [
      "p"
    ],
    "tags": [
      "p",
      "p"
    ],
    "sending": [
      "p"
    ],
    "internet": [
      "p"
    ],
    "client": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "value": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "size": [
      "p",
      "p",
      "p",
      "p"
    ],
    "during": [
      "p",
      "p"
    ],
    "allocation": [
      "p",
      "p"
    ],
    "example": [
      "p",
      "p"
    ],
    "shown": [
      "p"
    ],
    "array": [
      "p",
      "p",
      "p"
    ],
    "arraysize": [
      "p",
      "font"
    ],
    "converttoint32(request.querystring[\"sz\"]);int": [
      "p",
      "font"
    ],
    "serverobject]": [
      "p",
      "font"
    ],
    "objarray": [
      "p",
      "font"
    ],
    "new": [
      "p",
      "font",
      "p",
      "i"
    ],
    "serverobjectarraysize];": [
      "p",
      "font"
    ],
    "wrong!!": [
      "p",
      "font"
    ],
    "second": [
      "p",
      "p"
    ],
    "instruction": [
      "p"
    ],
    "client-controlled": [
      "p"
    ],
    "variable": [
      "p",
      "p"
    ],
    "passes": [
      "p"
    ],
    "sz": [
      "p",
      "i"
    ],
    "parameter": [
      "p",
      "p",
      "p",
      "p"
    ],
    "url": [
      "p",
      "p",
      "p"
    ],
    "extremely": [
      "p",
      "p"
    ],
    "block": [
      "p"
    ],
    "putting": [
      "p",
      "p",
      "p"
    ],
    "defend": [
      "p",
      "p"
    ],
    "necessary": [
      "p"
    ],
    "arrays": [
      "p",
      "p"
    ],
    "internally": [
      "p",
      "p"
    ],
    "where": [
      "p",
      "p",
      "p"
    ],
    "need": [
      "p"
    ],
    "dynamically": [
      "p"
    ],
    "allocated": [
      "p"
    ],
    "within": [
      "p"
    ],
    "boundaries": [
      "p"
    ],
    "safe": [
      "p"
    ],
    "because": [
      "p",
      "p"
    ],
    "resource": [
      "p"
    ],
    "done": [
      "p",
      "p"
    ],
    "de-allocating": [
      "p"
    ],
    "objects": [
      "p",
      "p"
    ],
    "c/c++": [
      "p"
    ],
    "functions": [
      "p"
    ],
    "malloc": [
      "p",
      "i"
    ],
    "heapalloc": [
      "p",
      "i"
    ],
    "object": [
      "p",
      "p"
    ],
    "but": [
      "p"
    ],
    "invoke": [
      "p"
    ],
    "delete": [
      "p",
      "i"
    ],
    "free": [
      "p",
      "i"
    ],
    "heapfree": [
      "p",
      "i"
    ],
    "finds": [
      "p"
    ],
    "multiple": [
      "p",
      "p"
    ],
    "web": [
      "p"
    ],
    "connections": [
      "p",
      "p"
    ],
    "each": [
      "p"
    ],
    "connection": [
      "p"
    ],
    "needs": [
      "p"
    ],
    "closed": [
      "p"
    ],
    "lead": [
      "p"
    ],
    "make": [
      "p",
      "p",
      "p",
      "p"
    ],
    "sure": [
      "p",
      "p"
    ],
    "close": [
      "p"
    ],
    "soon": [
      "p"
    ],
    "thresholds": [
      "p",
      "p"
    ],
    "limit": [
      "p"
    ],
    "originating": [
      "p"
    ],
    "achieve": [
      "p"
    ],
    "some": [
      "p"
    ],
    "sort": [
      "p"
    ],
    "authentication": [
      "p",
      "p"
    ],
    "clientâ€™s": [
      "p"
    ],
    "ip": [
      "p",
      "p"
    ],
    "address": [
      "p"
    ],
    "identify": [
      "p",
      "p"
    ],
    "unique": [
      "p"
    ],
    "however": [
      "p"
    ],
    "spoofing": [
      "p"
    ],
    "seem": [
      "p"
    ],
    "though": [
      "p"
    ],
    "coming": [
      "p"
    ],
    "different": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "clients": [
      "p"
    ],
    "should": [
      "p"
    ],
    "implement": [
      "p"
    ],
    "more": [
      "p",
      "p"
    ],
    "secure": [
      "p"
    ],
    "scheme": [
      "p"
    ],
    "ssl/tls": [
      "p"
    ],
    "ipsec": [
      "p"
    ],
    "now": [
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "familiar": [
      "p"
    ],
    "well": [
      "p",
      "p",
      "p"
    ],
    "what": [
      "p"
    ],
    "continue": [
      "p"
    ],
    "your": [
      "p"
    ],
    "attaching": [
      "p"
    ],
    "debugger": [
      "p",
      "p",
      "p"
    ],
    "malformed": [
      "p"
    ],
    "exceedingly": [
      "p",
      "p"
    ],
    "strings": [
      "p"
    ],
    "escape": [
      "p",
      "p"
    ],
    "special": [
      "p",
      "p"
    ],
    "characters": [
      "p",
      "p",
      "p"
    ],
    "places": [
      "p",
      "p"
    ],
    "interfaces": [
      "p"
    ],
    "written": [
      "p"
    ],
    "unmanaged": [
      "p"
    ],
    "c/c++).": [
      "p"
    ],
    "try": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "ranges": [
      "p",
      "p",
      "p"
    ],
    "lengths": [
      "p",
      "p"
    ],
    "combinations": [
      "p",
      "p"
    ],
    "consists": [
      "p"
    ],
    "trying": [
      "p"
    ],
    "feed": [
      "p"
    ],
    "addition": [
      "p"
    ],
    "wraps": [
      "p"
    ],
    "up": [
      "p"
    ],
    "smaller": [
      "p"
    ],
    "intercepting": [
      "p"
    ],
    "modifying": [
      "p",
      "p",
      "p"
    ],
    "numeric": [
      "p"
    ],
    "attached": [
      "p"
    ],
    "tests": [
      "p",
      "p"
    ],
    "zero/invalid": [
      "h2"
    ],
    "receives": [
      "p"
    ],
    "incorrectly": [
      "p"
    ],
    "formatted": [
      "p"
    ],
    "important": [
      "p",
      "p"
    ],
    "underlying": [
      "p"
    ],
    "format": [
      "p"
    ],
    "variables": [
      "p"
    ],
    "deleting": [
      "p"
    ],
    "elements": [
      "p"
    ],
    "list": [
      "p",
      "p",
      "p"
    ],
    "files": [
      "p"
    ],
    "network": [
      "p"
    ],
    "packets": [
      "p"
    ],
    "offsets": [
      "p",
      "p"
    ],
    "divide": [
      "p"
    ],
    "then": [
      "p",
      "p",
      "p"
    ],
    "overwrite": [
      "p"
    ],
    "illegal": [
      "p"
    ],
    "access": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "always": [
      "p"
    ],
    "attach": [
      "p"
    ],
    "catch": [
      "p"
    ],
    "loops": [
      "h2",
      "p"
    ],
    "look": [
      "p"
    ],
    "place": [
      "p"
    ],
    "inserting": [
      "p"
    ],
    "items": [
      "p"
    ],
    "parameters": [
      "p",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "looking": [
      "p",
      "p"
    ],
    "name/value": [
      "p",
      "p"
    ],
    "pairs": [
      "p",
      "p"
    ],
    "indicate": [
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "named": [
      "p"
    ],
    "parse": [
      "p"
    ],
    "inside": [
      "p"
    ],
    "http//example.com/processdata.php?input1=a&input2=bc&input3=xz": [
      "p",
      "font"
    ],
    "injecting": [
      "p",
      "p"
    ],
    "http//example.com/processdata.php?input1=a&input2=bc&input3=xz&input4=abc&input5=abc&input6=abc&input7=abc&input8=abc&input9=abc&input10=abc&input11=abc&input12=abc&input15=abc&input16=abc": [
      "p",
      "font"
    ],
    "..&input9999998=abc&input9999999=abc": [
      "p",
      "font"
    ],
    "succeeded": [
      "p"
    ],
    "host": [
      "p"
    ],
    "than": [
      "p",
      "p"
    ],
    "measure": [
      "p"
    ],
    "xss": [
      "p",
      "p",
      "p"
    ],
    "insert": [
      "p"
    ],
    "script>while(true)alert('xss');</script>": [
      "p",
      "font"
    ],
    "message": [
      "p"
    ],
    "persistent": [
      "p"
    ],
    "bug": [
      "p"
    ],
    "exists": [
      "p"
    ],
    "profile": [
      "p"
    ],
    "dependant": [
      "p"
    ],
    "making": [
      "p",
      "p"
    ],
    "x';drop": [
      "p",
      "font"
    ],
    "'accounts'--": [
      "p",
      "font"
    ],
    "accounts": [
      "p",
      "i"
    ],
    "relies": [
      "p",
      "p"
    ],
    "function": [
      "p"
    ],
    "dropping": [
      "p"
    ],
    "serve": [
      "p"
    ],
    "taken": [
      "p"
    ],
    "once": [
      "p"
    ],
    "calculate": [
      "p"
    ],
    "perform": [
      "p"
    ],
    "separate": [
      "p"
    ],
    "operation": [
      "p"
    ],
    "responds": [
      "p"
    ],
    "same": [
      "p"
    ],
    "submitted": [
      "p",
      "p"
    ],
    "modified": [
      "p"
    ],
    "slows": [
      "p"
    ],
    "down": [
      "p"
    ],
    "clear": [
      "p"
    ],
    "indication": [
      "p"
    ],
    "was": [
      "p"
    ],
    "tested": [
      "p"
    ],
    "part": [
      "p"
    ],
    "functional": [
      "p"
    ],
    "detect": [
      "p"
    ],
    "ibm": [
      "p"
    ],
    "rational": [
      "p",
      "i"
    ],
    "purify": [
      "p",
      "i"
    ],
    "compuware": [
      "p"
    ],
    "boundschecker": [
      "p",
      "i"
    ],
    "under": [
      "p",
      "p"
    ],
    "stress": [
      "p"
    ],
    "windows": [
      "p",
      "p"
    ],
    "task": [
      "p",
      "p",
      "i"
    ],
    "manager": [
      "p",
      "i",
      "p",
      "i"
    ],
    "unix": [
      "p",
      "p"
    ],
    "top": [
      "p",
      "i",
      "p",
      "i"
    ],
    "amount": [
      "p"
    ],
    "consumed": [
      "p",
      "p"
    ],
    "ask": [
      "i"
    ],
    "cpu/memory": [
      "p"
    ],
    "monitoring": [
      "p"
    ],
    "tool": [
      "p"
    ],
    "single": [
      "p",
      "p"
    ],
    "submit": [
      "p"
    ],
    "checking": [
      "p"
    ],
    "much": [
      "p"
    ],
    "usage": [
      "p"
    ],
    "high": [
      "p"
    ],
    "youâ€™ve": [
      "p"
    ],
    "learned": [
      "p"
    ],
    "basic": [
      "p"
    ],
    "cases": [
      "p",
      "p",
      "p"
    ],
    "final": [
      "p"
    ],
    "learning": [
      "p"
    ],
    "discover": [
      "p"
    ],
    "extend": [
      "p",
      "h2",
      "p",
      "p"
    ],
    "existing": [
      "p",
      "p",
      "p"
    ],
    "automation": [
      "p",
      "h2",
      "p",
      "p"
    ],
    "cover": [
      "p",
      "p",
      "p"
    ],
    "launch": [
      "p"
    ],
    "application-specific": [
      "p"
    ],
    "commands": [
      "p"
    ],
    "wildcards": [
      "p",
      "p"
    ],
    "query": [
      "p"
    ],
    "run": [
      "p"
    ],
    "slower": [
      "p"
    ],
    "resources": [
      "p",
      "h1"
    ],
    "finally": [
      "p"
    ],
    "add": [
      "p"
    ],
    "presented": [
      "p"
    ],
    "suite": [
      "p"
    ],
    "current": [
      "p"
    ],
    "checks": [
      "p"
    ],
    "automating": [
      "p"
    ],
    "beneficial": [
      "p"
    ],
    "enables": [
      "p"
    ],
    "running": [
      "p"
    ],
    "larger": [
      "p"
    ],
    "character": [
      "p"
    ],
    "would": [
      "p"
    ],
    "hand": [
      "p"
    ],
    "conclusions": [
      "h1"
    ],
    "accomplished": [
      "p"
    ],
    "variations": [
      "p"
    ],
    "security": [
      "p"
    ],
    "non-security": [
      "p"
    ],
    "overruns": [
      "p"
    ],
    "information": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "about": [
      "ul",
      "ul",
      "li",
      "li"
    ],
    "seeÂ http//www.owasp.org/index.php/dos_testing:_user_input_as_a_loop_counter": [
      "ul",
      "li"
    ],
    "denial": [
      "ul",
      "li"
    ],
    "seeÂ http//www.owasp.org/index.php/testing_for_denial_of_service": [
      "ul",
      "li"
    ],
    "http//www.owasp.org/index.php/dos_testing:_user_input_as_a_loop_counter": [
      "a"
    ],
    "http//www.owasp.org/index.php/testing_for_denial_of_service": [
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start Testing and Exploring",
      "Step 4: Execute additional testing",
      "Conclusions",
      "Additional Resources"
    ],
    "ul": [
      "Software applications and services",
      "Step 1: Understand attack scenarios \r\n    Step 2: Analyze causes and countermeasures \r\n    Step 3: Start testing and exploring \r\n    Step 4: Execute additional testing",
      "Crashing the application \r\n    Forcing the application into an incorrect state \r\n    Creating an unstable environment",
      "For information about testing for user input as a loop counter, seeÂ http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter\r\n    For information about testing for denial of service, seeÂ http://www.owasp.org/index.php/Testing_for_Denial_of_Service"
    ],
    "li": [
      "Software applications and services",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Start testing and exploring",
      "Step 4: Execute additional testing",
      "Crashing the application",
      "Forcing the application into an incorrect state",
      "Creating an unstable environment",
      "For information about testing for user input as a loop counter, seeÂ http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter",
      "For information about testing for denial of service, seeÂ http://www.owasp.org/index.php/Testing_for_Denial_of_Service"
    ],
    "p": [
      "A software application must protect the confidentiality and integrity of its assets and the continuity of its service. In Denial-of-service (DoS) attacks, the attacker forces an application or the applicationâ€™s environment into a state in which the application stops serving legitimate users.Â  Although DoS attacks were first launched on networks, they have since expanded to application-level attacks. This article focuses on testing for application-level DoS vulnerabilities.",
      "Follow these steps to test for DoS vulnerabilities:",
      "The first step in testing for DoS vulnerabilities is to understand the common attack scenarios:",
      "Application crashes result in DoS situations, since the application becomes unusable for a period of time. An attacker can force a buffer overflow, integer overflow, division by zero, or other exception to see if the application properly handles the error. When an application doesnâ€™t handle these errors, its process generates a second-chance exception (an exception that is triggered right before the program terminates). The second-chance exception is handled by the structured/default exception handler (SEH), which in turn usually kills the process, resulting in all application users being temporarily unable to use the application.",
      "An application neednâ€™t crash to stop providing service; if the application goes into an unexpected state, it can become useless and stop serving users. For instance, attackers who generate an infinite loop in the target application can deny service to the applicationâ€™s users. This situation usually happens when applications use customer input as a loop index. An attacker can maliciously modify the loop index so that the loop takes too long to exit, or never exits at all. As a result, the application will not be able to handle additional user requests.",
      "Account lockouts are also a common DoS situation, since they put the application into a state that allows an attacker to prevent users from logging in to the application. The attack is simple: The attacker repeatedly makes failed login attempts using the victimâ€™s username. Applications usually employ lockout policies and human interaction proofs (such as CAPTCHAs) to deal with this kind of attack.",
      "Additional application-level DoS attacks that attempt to put the application into a useless state include those in which the attacker uses another vulnerability to execute the attack. For instance, an attacker might find a stored cross-site scripting vulnerability in a main page of an application site. If the attacker stores a script with an infinite loop that prompts an alert box, any user who visits the site will be prompted with consecutive alert boxes and will be unable to use the application. Similarly, an attacker might execute an active SQL injection attack to drop a database table that is required by the application.",
      "An application might also fail to provide proper service if the environment in which the application operates becomes unstable. For instance, when memory becomes scarce, it is quite likely that the availability and quality of service to end users will be affected. In this scenario, the attacker uses programming errors in the application, such as unsafe memory allocations or memory leaks, or executes transaction flood attacks, in order to create an unstable system.",
      "Unsafe memory allocations happen when an application allocates memory based on user input. An attacker can craft specific input to trick the application into allocating an excessive quantity of memory, thus causing the operating system to become unstable. While the system lacks memory, the application cannot properly service user requests.",
      "Memory leaks happen when an application fails to properly release unused memory. An attacker with knowledge of a possible leak may force the application into allocating memory that will not be released. By repeatedly executing certain actions, the attacker can force the application to consume all available system memory, and thus to stop servicing legitimate users.",
      "Transaction floods consist of repeatedly submitting transactions in order to consume memory and processor time. Attackers often take advantage of stress-testing tools to execute transaction flood attacks. If the application is vulnerable, while the attacker is submitting transactions the application will become unstable and unable to respond to legitimate user transactions.",
      "The next step in testing for DoS vulnerabilities is to understand why they occur and how to protect against them.",
      "Application crashes occur due to unhandled second-chance exceptions caused by conditions such as buffer overflows, integer overflows, divisions by zero, referencing an invalid handle, and so on. To protect against application crashes and their exploitation by DoS attacks, developers must understand the conditions described above, properly handle user input, validate integer values, allocate memory carefully, and use structured exception handling.",
      "An infinite loop may cause an application to go into a DoS condition. This variation occurs when the attacker controls the index of a loop, creating a condition in which the execution control of the application doesnâ€™t exit from the loop. Consider the following code posted by OWASP:",
      "public class MyServlet extends ActionServlet {Â  public void doPost(HttpServletRequest request,Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â HttpServletResponse response)Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â throws ServletException, IOException {Â  Â  . . .Â Â  Â  String [] values = request.getParameterValues(\"CheckboxField\");Â  Â  Â  Â Â  Â  // Process the data without length check for reasonable rangeÂ Â  Â  for ( int i=0; i< values.length; i++) {Â Â  // wrongÂ  Â  Â  // lots of logic to process the requestÂ  Â  }Â  Â  . . .Â Â  }Â  . . .Â }",
      "An attacker can pass a large number of values of the CheckboxField control to force the server to execute functionality with higher CPU and memory demands. This can easily result in a DoS condition on the application server. To protect against this DoS variation, developers must check any client-supplied loop counter against a reasonable range.",
      "Additional DoS conditions that occur through other bugs, such as SQL injection or cross-site scripting, must be defended against based on the specific vulnerability. For instance, developers can protect against SQL injection by using white lists, stored procedures, and parameterized queries; developers can protect against cross-site scripting by encoding all user-supplied script tags before sending them to an Internet client.",
      "Unsafe memory allocations occur when the application uses a client-supplied value as a size during memory allocation. In the example shown, an application uses client input as an array size:",
      "int arraySize = Convert.ToInt32(Request.QueryString[\"sz\"]);int ServerObject[] objArray = new ServerObject[arraySize]; // wrong!!",
      "The second instruction uses a client-controlled variable to allocate an array. An attacker who passes a large value in the sz parameter of the URL can force the application to allocate an extremely large memory block, putting the application in a DoS condition. To defend against unsafe memory allocations, it is necessary to allocate all arrays internally or, where arrays need to be dynamically allocated, to check if the client input is within the boundaries of a safe memory allocation.",
      "Memory leaks occur because an application allocates a resource and doesnâ€™t release it properly when it is done using it. Leaks are common when allocating and de-allocating objects in C/C++. Developers might use functions such as new, malloc, or HeapAlloc to allocate a memory object, but fail to invoke delete, free, or HeapFree to release the object from memory. An attacker who finds this error can force the application into multiple allocations in order to consume memory and create an unstable system. Another example occurs in web applications using database connections. Each database connection needs memory, and if not closed properly can lead to a memory leak. Developers must make sure to close all database connections and release any other objects from memory as soon as they are done with them.",
      "To protect against transaction floods, developers must use thresholds to limit the number of transactions originating from a specific client. To achieve this, some sort of client authentication is required. For instance, an application might use the clientâ€™s IP address to identify a unique client. However, a client can execute an IP spoofing attack to make it seem as though the transactions are coming from different clients. Applications vulnerable to transaction floods should implement thresholds with a more secure authentication scheme such as SSL/TLS or IPSec.",
      "Now that you are familiar with the different DoS attack scenarios as well with what causes them and how to defend against them, you must continue testing for them in your application.",
      "To test for DoS bugs through application crashes, start by attaching the application to a debugger. Application crashes such as buffer overflows occur when submitting malformed data, such as exceedingly long input strings or escape and special characters. Identify all places in the application that may be vulnerable, such as interfaces written in unmanaged code (C/C++). Try different ranges of lengths and combinations of characters.",
      "Integer overflow testing consists of trying to feed the application a large integer that will cause an integer addition that wraps up the integer to a smaller value. Test for integer overflows by intercepting input data and modifying any integer or numeric values with large values. Unexpected integer values might cause the application to crash, so make sure to have a debugger attached to the application during these tests.",
      "Application crashes caused by division by zero or by referencing invalid handles occur when the application receives incorrectly formatted input. To test against this kind of crash, it is important to understand the underlying format of input data. For instance, to attempt forcing division by zero, try modifying integer variables to zero or deleting elements from an array or parameter list. If the application uses files or network packets as input, understand any tags and offsets that divide the input data. Then, overwrite offsets with zero values as well as escape and special characters to try to force the application into divisions by zero and into illegal access operations. Always attach a debugger to the application to catch any second-chance exceptions.",
      "To test for infinite loops, you must look for any place where the application uses a client-supplied value as a loop counter. Try inserting items into lists of parameters used by the application by looking for name/value pairs, which may indicate a parameter list. For instance, the following URL has a list of similarly named parameters that the application might parse inside a while loop:",
      "http://example.com/processData.php?input1=a&input2=bc&input3=xz",
      "Try modifying the URL by injecting an exceedingly large number of name/value pairs:",
      "http://example.com/processData.php?input1=a&input2=bc&input3=xz&input4=abc&input5=abc&input6=abc&input7=abc&input8=abc&input9=abc&input10=abc&input11=abc&input12=abc&input15=abc&input16=abc ...&input9999998=abc&input9999999=abc",
      "To check if the attack has succeeded, try to use the application from a second host (different than the attacker) and measure its response time.",
      "To test for DoS bugs using XSS, you must insert an XSS script that will create an unstable condition in an application. For instance, injecting the string",
      "<script>while(true)alert('XSS');</script>",
      "prompts the user repeatedly with a message box. If a persistent XSS bug exists in a main page or a profile page of an application, the user or users might be unable to use the application.",
      "To test for DoS bugs using SQL injection, you must execute a SQL injection string that will cause the application to drop a dependant table from the database, making the application unstable or unusable. For instance, submitting the following attack string",
      "x');DROP Table 'Accounts';--",
      "might cause the application to drop the Accounts table. If the application relies on this table to function properly, dropping the table will result in the application being unable to serve users.",
      "To test for unsafe memory allocations, start by looking for places in the application where a size value is taken. Once you find a variable or parameter used by the application to calculate a size, modify it to an extremely large value. Then perform a separate operation to see if the application responds the same as before you submitted the modified value. If the application slows down, it is a clear indication that the large value that you submitted was used internally by the application and that a DoS attack is possible.",
      "Memory leaks are common programming errors that must be tested as part of the applicationâ€™s functional testing. Different tools are used to detect memory leaks, such as IBM Rational Purify and Compuware BoundsChecker. Test for memory leaks by submitting different ranges of string lengths and by putting the application under different stress conditions. Operating system tools such as Windows Task Manager or UNIX top can be used to check the amount of memory consumed by the application under test.",
      "To test for transaction floods, use a CPU/memory monitoring tool such as Windows Task Manager or UNIX top. Then have a single client submit transactions in an infinite loop while checking how much CPU and memory are consumed by the server. If CPU and memory usage are high with a single client making transactions, the application is likely to be vulnerable to transaction flood DoS attacks.",
      "Now that youâ€™ve learned how to execute basic DoS test cases, the final step in learning to discover DoS bugs is test different application-level scenarios and to extend any existing test automation to cover DoS attacks.",
      "It is possible to launch DoS attacks using application-specific commands such as SQL wildcards. SQL wildcards will make a query run slower and will consume more server resources.",
      "Finally, extend any existing automation to cover application-level DoS tests. Add the test cases presented in this article to the test suite and to the current checks. Automating DoS testing is beneficial because it enables running a larger number of cases with multiple ranges and character combinations than would be possible to execute by hand.",
      "DoS bugs stop legitimate users from using an application. DoS attacks are usually accomplished by crashing the application, putting the application into an incorrect state, or creating an unstable environment. It is important that you understand the different variations of DoS bugs, as well as their causes and countermeasures. Testing for DoS bugs relies on testing for other security and non-security bugs, such as buffer and integer overruns, and for memory leaks. Extend existing test automation to cover DoS bugs.",
      "",
      "",
      "",
      ""
    ],
    "b": [
      "",
      ""
    ],
    "h2": [
      "Scenario 1: Crashing the Application",
      "Scenario 2: Forcing the Application into an Incorrect State",
      "Scenario 3: Creating an Unstable Environment",
      "Application Crashes",
      "Incorrect State",
      "Unstable Environment",
      "Test for Application Crashes: Buffer Overflows",
      "Test for Application Crashes: Integer Overflows",
      "Test for Application Crashes: Divisions by Zero/Invalid Handles",
      "Test for Incorrect State: Infinite Loops",
      "Test for Incorrect State: Cross-site Scripting",
      "Test for Incorrect State: SQL Injection",
      "Test for Unstable Environment: Unsafe Memory Allocations",
      "Test for Unstable Environment: Memory Leaks",
      "Test for Unstable Environment: Transaction Floods",
      "Additional Application-Level Scenarios",
      "Extend Automation"
    ],
    "font": [
      "public class MyServlet extends ActionServlet {Â  public void doPost(HttpServletRequest request,Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â HttpServletResponse response)Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â throws ServletException, IOException {Â  Â  . . .Â Â  Â  String [] values = request.getParameterValues(\"CheckboxField\");Â  Â  Â  Â Â  Â  // Process the data without length check for reasonable rangeÂ Â  Â  for ( int i=0; i< values.length; i++) {Â Â  // wrongÂ  Â  Â  // lots of logic to process the requestÂ  Â  }Â  Â  . . .Â Â  }Â  . . .Â }",
      "int arraySize = Convert.ToInt32(Request.QueryString[\"sz\"]);int ServerObject[] objArray = new ServerObject[arraySize]; // wrong!!",
      "http://example.com/processData.php?input1=a&input2=bc&input3=xz",
      "http://example.com/processData.php?input1=a&input2=bc&input3=xz&input4=abc&input5=abc&input6=abc&input7=abc&input8=abc&input9=abc&input10=abc&input11=abc&input12=abc&input15=abc&input16=abc ...&input9999998=abc&input9999999=abc",
      "<script>while(true)alert('XSS');</script>",
      "x');DROP Table 'Accounts';--"
    ],
    "br": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "i": [
      "CheckboxField",
      "sz",
      "new, malloc, or HeapAlloc",
      "delete, free,",
      "HeapFree",
      "while",
      "Accounts",
      "Rational Purify",
      "BoundsChecker",
      "ask Manager",
      "top",
      "Task Manager",
      "top"
    ],
    "a": [
      "http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter",
      "http://www.owasp.org/index.php/Testing_for_Denial_of_Service"
    ],
    "div": [
      "",
      ""
    ]
  },
  "links": [
    {
      "href": "http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter",
      "text": "http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter"
    },
    {
      "href": "http://www.owasp.org/index.php/Testing_for_Denial_of_Service",
      "text": "http://www.owasp.org/index.php/Testing_for_Denial_of_Service"
    }
  ],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>Software applications and services&nbsp;</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>A software application must protect the confidentiality and integrity of its assets and the continuity of its service. In Denial-of-service (DoS) attacks, the attacker forces an application or the applicationâ€™s environment into a state in which the application stops serving legitimate users.&nbsp; Although DoS attacks were first launched on networks, they have since expanded to application-level attacks. This article focuses on testing for application-level DoS vulnerabilities.</p>\r\n  <p>Follow these steps to test for DoS vulnerabilities:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Start testing and exploring </li>\r\n    <li>Step 4: Execute additional testing<b>&nbsp;</b></li>\r\n  </ul>\r\n  <h1>Step 1: Understand Attack Scenarios</h1>\r\n  <p>The first step in testing for DoS vulnerabilities is to understand the common attack scenarios:</p>\r\n  <ul>\r\n    <li>Crashing the application </li>\r\n    <li>Forcing the application into an incorrect state </li>\r\n    <li>Creating an unstable environment</li>\r\n  </ul>\r\n  <h2>\r\n    Scenario 1: Crashing the Application\r\n  </h2>\r\n  <p>Application crashes result in DoS situations, since the application becomes unusable for a period of time. An attacker can force a buffer overflow, integer overflow, division by zero, or other exception to see if the application properly handles the error. When an application doesnâ€™t handle these errors, its process generates a second-chance exception (an exception that is triggered right before the program terminates). The second-chance exception is handled by the structured/default exception handler (SEH), which in turn usually kills the process, resulting in all application users being temporarily unable to use the application.&nbsp;</p>\r\n  <h2>\r\n    Scenario 2: Forcing the Application into an Incorrect State\r\n  </h2>\r\n  <p>An application neednâ€™t crash to stop providing service; if the application goes into an unexpected state, it can become useless and stop serving users. For instance, attackers who generate an infinite loop in the target application can deny service to the applicationâ€™s users. This situation usually happens when applications use customer input as a loop index. An attacker can maliciously modify the loop index so that the loop takes too long to exit, or never exits at all. As a result, the application will not be able to handle additional user requests.<b></b></p>\r\n  <p>Account lockouts are also a common DoS situation, since they put the application into a state that allows an attacker to prevent users from logging in to the application. The attack is simple: The attacker repeatedly makes failed login attempts using the victimâ€™s username. Applications usually employ lockout policies and human interaction proofs (such as CAPTCHAs) to deal with this kind of attack.</p>\r\n  <p>Additional application-level DoS attacks that attempt to put the application into a useless state include those in which the attacker uses another vulnerability to execute the attack. For instance, an attacker might find a stored cross-site scripting vulnerability in a main page of an application site. If the attacker stores a script with an infinite loop that prompts an alert box, any user who visits the site will be prompted with consecutive alert boxes and will be unable to use the application. Similarly, an attacker might execute an active SQL injection attack to drop a database table that is required by the application.</p>\r\n  <h2>\r\n    Scenario 3: Creating an Unstable Environment\r\n  </h2>\r\n  <p>An application might also fail to provide proper service if the environment in which the application operates becomes unstable. For instance, when memory becomes scarce, it is quite likely that the availability and quality of service to end users will be affected. In this scenario, the attacker uses programming errors in the application, such as unsafe memory allocations or memory leaks, or executes transaction flood attacks, in order to create an unstable system.</p>\r\n  <p>Unsafe memory allocations happen when an application allocates memory based on user input. An attacker can craft specific input to trick the application into allocating an excessive quantity of memory, thus causing the operating system to become unstable. While the system lacks memory, the application cannot properly service user requests.</p>\r\n  <p>Memory leaks happen when an application fails to properly release unused memory. An attacker with knowledge of a possible leak may force the application into allocating memory that will not be released. By repeatedly executing certain actions, the attacker can force the application to consume all available system memory, and thus to stop servicing legitimate users.</p>\r\n  <p>Transaction floods consist of repeatedly submitting transactions in order to consume memory and processor time. Attackers often take advantage of stress-testing tools to execute transaction flood attacks. If the application is vulnerable, while the attacker is submitting transactions the application will become unstable and unable to respond to legitimate user transactions.</p>\r\n  <h1>Step 2: Analyze causes and countermeasures</h1>\r\n  <p>The next step in testing for DoS vulnerabilities is to understand why they occur and how to protect against them.</p>\r\n  <h2>\r\n    Application Crashes\r\n  </h2>\r\n  <p>Application crashes occur due to unhandled second-chance exceptions caused by conditions such as buffer overflows, integer overflows, divisions by zero, referencing an invalid handle, and so on. To protect against application crashes and their exploitation by DoS attacks, developers must understand the conditions described above, properly handle user input, validate integer values, allocate memory carefully, and use structured exception handling.&nbsp;</p>\r\n  <h2>\r\n    Incorrect State\r\n  </h2>\r\n  <p>An infinite loop may cause an application to go into a DoS condition. This variation occurs when the attacker controls the index of a loop, creating a condition in which the execution control of the application doesnâ€™t exit from the loop. Consider the following code posted by OWASP:</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">public class MyServlet extends ActionServlet {<br />&nbsp; public void doPost(HttpServletRequest request,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;HttpServletResponse response)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throws ServletException, IOException {<br />&nbsp; &nbsp; . . .&nbsp;<br />&nbsp; &nbsp; String [] values = request.getParameterValues(\"CheckboxField\");<br />&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; // Process the data without length check for reasonable range&nbsp;<br />&nbsp; &nbsp; for ( int i=0; i&lt; values.length; i++) {&nbsp;&nbsp; // wrong<br />&nbsp; &nbsp; &nbsp; // lots of logic to process the request<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; . . .&nbsp;<br />&nbsp; }<br />&nbsp; . . .&nbsp;<br />}&nbsp;</font>\r\n  </p>\r\n  <p>An attacker can pass a large number of values of the <i>CheckboxField</i> control to force the server to execute functionality with higher CPU and memory demands. This can easily result in a DoS condition on the application server. To protect against this DoS variation, developers must check any client-supplied loop counter against a reasonable range. &nbsp;</p>\r\n  <p>Additional DoS conditions that occur through other bugs, such as SQL injection or cross-site scripting, must be defended against based on the specific vulnerability. For instance, developers can protect against SQL injection by using white lists, stored procedures, and parameterized queries; developers can protect against cross-site scripting by encoding all user-supplied script tags before sending them to an Internet client.</p>\r\n  <h2>\r\n    Unstable Environment\r\n  </h2>\r\n  <p>Unsafe memory allocations occur when the application uses a client-supplied value as a size during memory allocation. In the example shown, an application uses client input as an array size:</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">int arraySize = Convert.ToInt32(Request.QueryString[\"sz\"]);<br />int ServerObject[] objArray = new ServerObject[arraySize]; // wrong!!</font>\r\n  </p>\r\n  <p>The second instruction uses a client-controlled variable to allocate an array. An attacker who passes a large value in the <i>sz </i>parameter of the URL can force the application to allocate an extremely large memory block, putting the application in a DoS condition. To defend against unsafe memory allocations, it is necessary to allocate all arrays internally or, where arrays need to be dynamically allocated, to check if the client input is within the boundaries of a safe memory allocation. </p>\r\n  <p>Memory leaks occur because an application allocates a resource and doesnâ€™t release it properly when it is done using it. Leaks are common when allocating and de-allocating objects in C/C++. Developers might use functions such as <i>new, malloc, or HeapAlloc </i>to allocate a memory object, but fail to invoke <i>delete, free,</i> or <i>HeapFree</i> to release the object from memory. An attacker who finds this error can force the application into multiple allocations in order to consume memory and create an unstable system. Another example occurs in web applications using database connections. Each database connection needs memory, and if not closed properly can lead to a memory leak. Developers must make sure to close all database connections and release any other objects from memory as soon as they are done with them.</p>\r\n  <p>To protect against transaction floods, developers must use thresholds to limit the number of transactions originating from a specific client. To achieve this, some sort of client authentication is required. For instance, an application might use the clientâ€™s IP address to identify a unique client. However, a client can execute an IP spoofing attack to make it seem as though the transactions are coming from different clients. Applications vulnerable to transaction floods should implement thresholds with a more secure authentication scheme such as SSL/TLS or IPSec.&nbsp;</p>\r\n  <h1>Step 3: Start Testing and Exploring</h1>\r\n  <p>Now that you are familiar with the different DoS attack scenarios as well with what causes them and how to defend against them, you must continue testing for them in your application.</p>\r\n  <h2>\r\n    Test for Application Crashes: Buffer Overflows\r\n  </h2>\r\n  <p>To test for DoS bugs through application crashes, start by attaching the application to a debugger. Application crashes such as buffer overflows occur when submitting malformed data, such as exceedingly long input strings or escape and special characters. Identify all places in the application that may be vulnerable, such as interfaces written in unmanaged code (C/C++). Try different ranges of lengths and combinations of characters.</p>\r\n  <h2>\r\n    Test for Application Crashes: Integer Overflows\r\n  </h2>\r\n  <p>Integer overflow testing consists of trying to feed the application a large integer that will cause an integer addition that wraps up the integer to a smaller value. Test for integer overflows by intercepting input data and modifying any integer or numeric values with large values. Unexpected integer values might cause the application to crash, so make sure to have a debugger attached to the application during these tests.</p>\r\n  <h2>\r\n    Test for Application Crashes: Divisions by Zero/Invalid Handles\r\n  </h2>\r\n  <p>Application crashes caused by division by zero or by referencing invalid handles occur when the application receives incorrectly formatted input. To test against this kind of crash, it is important to understand the underlying format of input data. For instance, to attempt forcing division by zero, try modifying integer variables to zero or deleting elements from an array or parameter list. If the application uses files or network packets as input, understand any tags and offsets that divide the input data. Then, overwrite offsets with zero values as well as escape and special characters to try to force the application into divisions by zero and into illegal access operations. Always attach a debugger to the application to catch any second-chance exceptions.&nbsp;</p>\r\n  <h2>\r\n    Test for Incorrect State: Infinite Loops\r\n  </h2>\r\n  <p>To test for infinite loops, you must look for any place where the application uses a client-supplied value as a loop counter. Try inserting items into lists of parameters used by the application by looking for name/value pairs, which may indicate a parameter list. For instance, the following URL has a list of similarly named parameters that the application might parse inside a <i>while </i>loop:</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">http://example.com/processData.php?input1=a&input2=bc&input3=xz</font>\r\n  </p>\r\n  <p>Try modifying the URL by injecting an exceedingly large number of name/value pairs:</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">http://example.com/processData.php?input1=a&input2=bc&input3=xz&input4=abc&input5=abc&input6=abc&input7=abc&input8=abc&input9=abc&input10=abc&input11=abc&input12=abc&input15=abc&input16=abc ...&input9999998=abc&input9999999=abc</font>\r\n  </p>\r\n  <p>To check if the attack has succeeded, try to use the application from a second host (different than the attacker) and measure its response time.</p>\r\n  <h2>\r\n    Test for Incorrect State: Cross-site Scripting\r\n  </h2>\r\n  <p>To test for DoS bugs using XSS, you must insert an XSS script that will create an unstable condition in an application. For instance, injecting the string</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">&lt;script&gt;while(true)alert('XSS');&lt;/script&gt;</font>\r\n  </p>\r\n  <p>prompts the user repeatedly with a message box. If a persistent XSS bug exists in a main page or a profile page of an application, the user or users might be unable to use the application.</p>\r\n  <h2>\r\n    Test for Incorrect State: SQL Injection\r\n  </h2>\r\n  <p>To test for DoS bugs using SQL injection, you must execute a SQL injection string that will cause the application to drop a dependant table from the database, making the application unstable or unusable. For instance, submitting the following attack string</p>\r\n  <p>\r\n    <font face=\"'Courier New'\">x');DROP Table 'Accounts';--</font>\r\n  </p>\r\n  <p>might cause the application to drop the <i>Accounts</i> table. If the application relies on this table to function properly, dropping the table will result in the application being unable to serve users.</p>\r\n  <h2>\r\n    Test for Unstable Environment: Unsafe Memory Allocations\r\n  </h2>\r\n  <p>To test for unsafe memory allocations, start by looking for places in the application where a size value is taken. Once you find a variable or parameter used by the application to calculate a size, modify it to an extremely large value. Then perform a separate operation to see if the application responds the same as before you submitted the modified value. If the application slows down, it is a clear indication that the large value that you submitted was used internally by the application and that a DoS attack is possible.</p>\r\n  <h2>\r\n    Test for Unstable Environment: Memory Leaks\r\n  </h2>\r\n  <p>Memory leaks are common programming errors that must be tested as part of the applicationâ€™s functional testing. Different tools are used to detect memory leaks, such as IBM<i> Rational Purify</i> and Compuware <i>BoundsChecker</i>. Test for memory leaks by submitting different ranges of string lengths and by putting the application under different stress conditions. Operating system tools such as Windows T<i>ask Manager</i> or UNIX <i>top</i> can be used to check the amount of memory consumed by the application under test.</p>\r\n  <h2>\r\n    Test for Unstable Environment: Transaction Floods\r\n  </h2>\r\n  <p>To test for transaction floods, use a CPU/memory monitoring tool such as Windows <i>Task Manager</i> or UNIX <i>top</i>. Then have a single client submit transactions in an infinite loop while checking how much CPU and memory are consumed by the server. If CPU and memory usage are high with a single client making transactions, the application is likely to be vulnerable to transaction flood DoS attacks.</p>\r\n  <h1>Step 4: Execute additional testing</h1>\r\n  <p>Now that youâ€™ve learned how to execute basic DoS test cases, the final step in learning to discover DoS bugs is test different application-level scenarios and to extend any existing test automation to cover DoS attacks.</p>\r\n  <h2>\r\n    Additional Application-Level Scenarios\r\n  </h2>\r\n  <p>It is possible to launch DoS attacks using application-specific commands such as SQL wildcards. SQL wildcards will make a query run slower and will consume more server resources.</p>\r\n  <h2>\r\n    Extend Automation\r\n  </h2>\r\n  <p>Finally, extend any existing automation to cover application-level DoS tests. Add the test cases presented in this article to the test suite and to the current checks. Automating DoS testing is beneficial because it enables running a larger number of cases with multiple ranges and character combinations than would be possible to execute by hand.</p>\r\n  <h1>Conclusions</h1>\r\n  <p>DoS bugs stop legitimate users from using an application. DoS attacks are usually accomplished by crashing the application, putting the application into an incorrect state, or creating an unstable environment. It is important that you understand the different variations of DoS bugs, as well as their causes and countermeasures. Testing for DoS bugs relies on testing for other security and non-security bugs, such as buffer and integer overruns, and for memory leaks. Extend existing test automation to cover DoS bugs.</p>\r\n  <h1>Additional Resources</h1>\r\n  <p>\r\n  </p>\r\n  <ul>\r\n    <li>For information about testing for user input as a loop counter, see&nbsp;<a href=\"http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter\">http://www.owasp.org/index.php/DoS_Testing:_User_Input_as_a_Loop_Counter</a></li>\r\n    <li>For information about testing for denial of service, see&nbsp;<a href=\"http://www.owasp.org/index.php/Testing_for_Denial_of_Service\">http://www.owasp.org/index.php/Testing_for_Denial_of_Service</a></li>\r\n  </ul>\r\n  <p />\r\n  <div>\r\n    <p />\r\n    <p />\r\n  </div>\r\n  <div>\r\n  </div>"
}