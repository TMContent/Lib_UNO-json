{
  "id": "add8a099-08da-40cc-a202-5e083267cef7",
  "checksum": "630f0f5aeb2ffb3da4c66d755d88f8eebd3293ca",
  "words": {
    "315": [
      "p",
      "a"
    ],
    "description": [
      "h1"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "application's": [
      "p"
    ],
    "output": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "ul",
      "li",
      "a",
      "li",
      "a"
    ],
    "rendered": [
      "p",
      "p"
    ],
    "as": [
      "p",
      "p",
      "p"
    ],
    "page": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "ul",
      "li",
      "a"
    ],
    "included": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "em"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "h1"
    ],
    "then": [
      "p",
      "p",
      "p"
    ],
    "it": [
      "p",
      "p"
    ],
    "also": [
      "p",
      "p",
      "p"
    ],
    "part": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "without": [
      "p"
    ],
    "being": [
      "p"
    ],
    "validated": [
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "encoded": [
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "cross-site": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "scripting": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "title"
    ],
    "xss)": [
      "p"
    ],
    "vulnerability": [
      "p",
      "p",
      "p"
    ],
    "results": [
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "case": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "modify": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "include": [
      "p"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "p"
    ],
    "script": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "which": [
      "p",
      "p"
    ],
    "executed": [
      "p"
    ],
    "by": [
      "p"
    ],
    "browser": [
      "p",
      "p"
    ],
    "views": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "xss": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "applies": [
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "applications": [
      "p",
      "p"
    ],
    "prevent": [
      "p",
      "p"
    ],
    "validate": [
      "p",
      "p",
      "p"
    ],
    "encode": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "p",
      "h1",
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em",
      "ul",
      "li"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "flaw": [
      "p"
    ],
    "find": [
      "p"
    ],
    "code": [
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "a"
    ],
    "includes": [
      "p"
    ],
    "verify": [
      "p"
    ],
    "sufficiently": [
      "p"
    ],
    "properly": [
      "p"
    ],
    "there": [
      "p"
    ],
    "are": [
      "p",
      "p",
      "em"
    ],
    "two": [
      "p"
    ],
    "primary": [
      "p"
    ],
    "types": [
      "p"
    ],
    "persistent": [
      "p",
      "p"
    ],
    "non-persistent": [
      "p",
      "p"
    ],
    "able": [
      "p",
      "p"
    ],
    "inject": [
      "p",
      "p"
    ],
    "his": [
      "p"
    ],
    "into": [
      "p"
    ],
    "data": [
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "store": [
      "p"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p"
    ],
    "anyone": [
      "p"
    ],
    "who": [
      "p"
    ],
    "loads": [
      "p"
    ],
    "with": [
      "p",
      "p"
    ],
    "content": [
      "p",
      "p",
      "em"
    ],
    "run": [
      "p"
    ],
    "become": [
      "p"
    ],
    "victim": [
      "p"
    ],
    "attack": [
      "p"
    ],
    "uses": [
      "p"
    ],
    "some": [
      "p",
      "p",
      "p"
    ],
    "reflective": [
      "p"
    ],
    "aspect": [
      "p"
    ],
    "deliver": [
      "p"
    ],
    "payload": [
      "p"
    ],
    "impact": [
      "h1"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "allow": [
      "p"
    ],
    "execute": [
      "p"
    ],
    "on": [
      "p",
      "p",
      "p"
    ],
    "user's": [
      "p",
      "p",
      "p",
      "p"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p"
    ],
    "perform": [
      "p",
      "p"
    ],
    "actions": [
      "p",
      "p"
    ],
    "behalf": [
      "p"
    ],
    "within": [
      "p"
    ],
    "such": [
      "p"
    ],
    "change": [
      "p"
    ],
    "password": [
      "p"
    ],
    "submit": [
      "p"
    ],
    "messages": [
      "p"
    ],
    "or": [
      "p",
      "p"
    ],
    "other": [
      "p",
      "p"
    ],
    "available": [
      "p"
    ],
    "authenticated": [
      "p"
    ],
    "spread": [
      "p"
    ],
    "itself": [
      "p",
      "p",
      "em"
    ],
    "becoming": [
      "p"
    ],
    "worm": [
      "p",
      "p"
    ],
    "up": [
      "p",
      "p"
    ],
    "lot": [
      "p"
    ],
    "resources": [
      "p",
      "h1"
    ],
    "very": [
      "p"
    ],
    "costly": [
      "p"
    ],
    "clean": [
      "p"
    ],
    "write": [
      "p",
      "p",
      "p"
    ],
    "steals": [
      "p"
    ],
    "session": [
      "p",
      "p"
    ],
    "cookies": [
      "p",
      "p"
    ],
    "identifiers": [
      "p"
    ],
    "allows": [
      "p",
      "p"
    ],
    "impersonating": [
      "p",
      "p"
    ],
    "through": [
      "p",
      "p"
    ],
    "stolen": [
      "p"
    ],
    "simpler": [
      "p"
    ],
    "more": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "powerful": [
      "p"
    ],
    "than": [
      "p"
    ],
    "because": [
      "p"
    ],
    "interact": [
      "p"
    ],
    "visually": [
      "p"
    ],
    "javascript": [
      "p"
    ],
    "captures": [
      "p"
    ],
    "keystrokes": [
      "p"
    ],
    "site": [
      "p"
    ],
    "steal": [
      "p"
    ],
    "passwords": [
      "p"
    ],
    "information": [
      "p",
      "p",
      "ul",
      "li"
    ],
    "usually": [
      "p",
      "p"
    ],
    "leads": [
      "p"
    ],
    "privilege": [
      "p"
    ],
    "escalation": [
      "p"
    ],
    "leverages": [
      "p"
    ],
    "take": [
      "p",
      "p"
    ],
    "over": [
      "p"
    ],
    "account": [
      "p",
      "p"
    ],
    "target": [
      "p"
    ],
    "administrative": [
      "p"
    ],
    "full": [
      "p"
    ],
    "control": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "positive": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "validation": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "sanitize": [
      "ul",
      "li",
      "a"
    ],
    "displayed": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "untrusted": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "adequate": [
      "p"
    ],
    "protection": [
      "p"
    ],
    "against": [
      "p"
    ],
    "ensure": [
      "p"
    ],
    "used": [
      "ul",
      "li",
      "a"
    ],
    "sanitized": [
      "ul",
      "li",
      "a"
    ],
    "computer": [
      "h1",
      "p"
    ],
    "based": [
      "h1",
      "p"
    ],
    "training": [
      "h1",
      "p"
    ],
    "links": [
      "h1"
    ],
    "following": [
      "p"
    ],
    "courses": [
      "p"
    ],
    "learn": [
      "p",
      "p"
    ],
    "about": [
      "p",
      "ul",
      "li"
    ],
    "including": [
      "p"
    ],
    "techniques": [
      "p",
      "p",
      "p"
    ],
    "remediation": [
      "p"
    ],
    "prevention": [
      "p"
    ],
    "creating": [
      "h2",
      "p",
      "a"
    ],
    "secure": [
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "a"
    ],
    "php": [
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "a"
    ],
    "course": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "introduces": [
      "p"
    ],
    "best": [
      "p",
      "p"
    ],
    "practices": [
      "p",
      "p"
    ],
    "developing": [
      "p",
      "p"
    ],
    "identifies": [
      "p"
    ],
    "common": [
      "p",
      "p",
      "p",
      "p"
    ],
    "attackers": [
      "p"
    ],
    "exploit": [
      "p"
    ],
    "gain": [
      "p"
    ],
    "access": [
      "p",
      "p",
      "em"
    ],
    "critical": [
      "p"
    ],
    "addition": [
      "p"
    ],
    "explains": [
      "p"
    ],
    "mitigation": [
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "em"
    ],
    "avoid": [
      "p",
      "p"
    ],
    "after": [
      "p"
    ],
    "completing": [
      "p"
    ],
    "describe": [
      "p"
    ],
    "explain": [
      "p"
    ],
    "cod": [
      "p",
      "a"
    ],
    "valid": [
      "p",
      "em"
    ],
    "login": [
      "p",
      "p",
      "em",
      "em"
    ],
    "credentials": [
      "p",
      "p",
      "em",
      "em"
    ],
    "enrollment": [
      "p",
      "em"
    ],
    "required": [
      "p",
      "em"
    ],
    "team": [
      "p",
      "em"
    ],
    "professor": [
      "p",
      "em"
    ],
    "need": [
      "p",
      "em"
    ],
    "please": [
      "p",
      "em"
    ],
    "contact": [
      "p",
      "em"
    ],
    "support@securityinnovationcom": [
      "p",
      "em"
    ],
    "help": [
      "p",
      "em"
    ],
    "additional": [
      "h1"
    ],
    "see": [
      "ul",
      "li"
    ],
    "http//en.wikipedia.org/wiki/cross-site_scripting": [
      "ul",
      "li",
      "a"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Computer Based Training Links",
      "Additional Resources"
    ],
    "p": [
      "A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.",
      "There are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload.",
      "Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.",
      "To prevent this vulnerability, validate all input, and encode all input that is included in output.",
      "Validate all input:",
      "Encode input included in output:",
      "To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.",
      "All input is validated:",
      "Input included in output is encoded:",
      "Use the following Computer Based Training courses to learn more about Cross-Site Scripting including techniques for remediation and prevention.",
      "This course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. After completing this course, you will be able to describe the best practices for developing secure PHP code, explain common PHP vulnerabilities and learn mitigation techniques to avoid common PHP vulnerabilities and write secure code.",
      "COD 315 Creating Secure PHP Code.",
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ],
    "ul": [
      "Use Positive Input Validation",
      "Sanitize All Displayed Untrusted Data\n Encode Input Included in Output",
      "Positive Input Validation Is Used",
      "All Displayed Untrusted Data Is Sanitized\n Input Included in Output Is Encoded",
      "For more information about Cross-Site Scripting, see http://en.wikipedia.org/wiki/Cross-site_scripting"
    ],
    "li": [
      "Use Positive Input Validation",
      "Sanitize All Displayed Untrusted Data",
      "Encode Input Included in Output",
      "Positive Input Validation Is Used",
      "All Displayed Untrusted Data Is Sanitized",
      "Input Included in Output Is Encoded",
      "For more information about Cross-Site Scripting, see http://en.wikipedia.org/wiki/Cross-site_scripting"
    ],
    "a": [
      "Use Positive Input Validation",
      "Sanitize All Displayed Untrusted Data",
      "Encode Input Included in Output",
      "Positive Input Validation Is Used",
      "All Displayed Untrusted Data Is Sanitized",
      "Input Included in Output Is Encoded",
      "COD 315 Creating Secure PHP Code",
      "http://en.wikipedia.org/wiki/Cross-site_scripting"
    ],
    "h2": [
      "Creating Secure PHP Code"
    ],
    "em": [
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ]
  },
  "links": [
    {
      "href": "c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52",
      "text": "Use Positive Input Validation"
    },
    {
      "href": "a0ff8de9-7a67-43f2-a64e-9efde8115b6d",
      "text": "Sanitize All Displayed Untrusted Data"
    },
    {
      "href": "00000000-0000-0000-0000-0000000960a4",
      "text": "Encode Input Included in Output"
    },
    {
      "href": "d4129497-3a66-44d1-881e-e6f004af2e0d",
      "text": "Positive Input Validation Is Used"
    },
    {
      "href": "18bb5583-773d-450c-a072-55f0c026ba99",
      "text": "All Displayed Untrusted Data Is Sanitized"
    },
    {
      "href": "00000000-0000-0000-0000-0000008a4b8e",
      "text": "Input Included in Output Is Encoded"
    },
    {
      "href": "https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127620",
      "text": "COD 315 Creating Secure PHP Code"
    },
    {
      "href": "http://en.wikipedia.org/wiki/Cross-site_scripting",
      "text": "http://en.wikipedia.org/wiki/Cross-site_scripting"
    }
  ],
  "html": "<h1>Description</h1><p>A web application's output is rendered as a web page. If user input is included in the web application output, then it is also rendered as a part of the web page. If user input is included in output without being validated and encoded, a cross-site scripting (XSS) vulnerability results. In that case, an attacker can modify the output web page to include malicious script, which is then executed by the browser that views the vulnerable page. XSS applies to all web applications. To prevent XSS, validate all input and encode input included in output. To check for this flaw, find all code that includes user input in output, and verify that user input is sufficiently validated and properly encoded.\n</p><p>\nThere are two primary types of XSS: persistent and non-persistent. If the attacker is able to inject his malicious script into the web applications data store, then the script will be persistent and anyone who loads a page with that content will run the script and become a victim of the attack. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. \n</p><h1>Impact</h1><p>Cross-site scripting vulnerabilities allow an attacker to execute malicious script on the user's web browser. The attacker may use this to perform actions on the user's behalf within the application, such as change the password, submit messages, or perform some other actions available to the authenticated user. The malicious script may spread itself, becoming an XSS worm. An XSS worm may use up a lot of resources and be very costly to clean up. The attacker may write a script that steals session cookies or session identifiers and allows impersonating the user. Impersonating the user through stolen cookies is simpler and more powerful than through a script because it allows the attacker to interact with the application visually. The attacker may also use XSS to inject a JavaScript that captures the user's keystrokes on that web site to steal passwords and other information. XSS usually leads to privilege escalation, which the attacker leverages to take over some user's account. Usually, the attacker will target an administrative account to take full control of the application.\n</p>\n<h1>Countermeasures</h1><p>To prevent this vulnerability, validate all input, and encode all input that is included in output.\n</p><p>\nValidate all input:</p><ul>\n<li> <a href=\"c0a4f56c-1e8c-4d3a-97e2-fc9e969d5d52\">Use Positive Input Validation</a></li>\n</ul><p>\nEncode input included in output:</p><ul>\n<li> <a href=\"a0ff8de9-7a67-43f2-a64e-9efde8115b6d\">Sanitize All Displayed Untrusted Data</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000000960a4\">Encode Input Included in Output</a></li>\n</ul><h1>Application Check</h1><p>To check for adequate protection against this vulnerability, ensure that all input is validated, and that all input included in output is encoded.\n</p><p>\nAll input is validated:</p><ul>\n<li> <a href=\"d4129497-3a66-44d1-881e-e6f004af2e0d\">Positive Input Validation Is Used</a></li>\n</ul><p>\nInput included in output is encoded:</p><ul>\n<li> <a href=\"18bb5583-773d-450c-a072-55f0c026ba99\">All Displayed Untrusted Data Is Sanitized</a></li>\n<li> <a href=\"00000000-0000-0000-0000-0000008a4b8e\">Input Included in Output Is Encoded</a></li>\n</ul><h1>Computer Based Training Links</h1><p>Use the following Computer Based Training courses to learn more about Cross-Site Scripting including techniques for remediation and prevention.\n</p><h2>Creating Secure PHP Code</h2><p>This course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. After completing this course, you will be able to describe the best practices for developing secure PHP code, explain common PHP vulnerabilities and learn mitigation techniques to avoid common PHP vulnerabilities and write secure code. \n</p><p>\n<a href=\"https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127620\">COD 315 Creating Secure PHP Code</a>.\n</p><p>\n<em>Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.</em>\n</p><h1>Additional Resources</h1><ul><li> For more information about Cross-Site Scripting, see <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a></li></ul>"
}