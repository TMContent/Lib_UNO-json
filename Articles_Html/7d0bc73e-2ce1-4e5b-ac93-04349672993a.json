{
  "id": "7d0bc73e-2ce1-4e5b-ac93-04349672993a",
  "checksum": "23a90c33590bfdae1dd26e753b914d4307cfc42f",
  "words": {
    "1": [
      "h2"
    ],
    "2": [
      "h2"
    ],
    "3": [
      "h2"
    ],
    "4": [
      "h2",
      "ul",
      "li"
    ],
    "5": [
      "h2",
      "p"
    ],
    "6": [
      "h2"
    ],
    "7": [
      "h2"
    ],
    "9": [
      "p"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "web": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "application": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "what": [
      "h1",
      "p",
      "p"
    ],
    "do": [
      "h1",
      "p",
      "p"
    ],
    "applications": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "should": [
      "p",
      "p",
      "p"
    ],
    "assume": [
      "p",
      "p",
      "p",
      "title"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "all": [
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "h2",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "title"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "their": [
      "p",
      "p"
    ],
    "input": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "malicious": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "take": [
      "p",
      "p"
    ],
    "action": [
      "p"
    ],
    "accordingly": [
      "p"
    ],
    "shouldÂ be": [
      "p"
    ],
    "validated": [
      "p",
      "p",
      "p",
      "p"
    ],
    "either": [
      "p",
      "p",
      "p"
    ],
    "rejected": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "sanitized": [
      "p"
    ],
    "immediately": [
      "p"
    ],
    "carefully": [
      "p"
    ],
    "quarantined": [
      "p"
    ],
    "during": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "encoded": [
      "p",
      "p",
      "p"
    ],
    "appropriately": [
      "p",
      "p"
    ],
    "on": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "output": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "why": [
      "h1"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "single": [
      "p",
      "p",
      "p"
    ],
    "largest": [
      "p",
      "p",
      "p"
    ],
    "cause": [
      "p",
      "p"
    ],
    "vulnerabilities": [
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "most": [
      "p"
    ],
    "general": [
      "p"
    ],
    "sense": [
      "p"
    ],
    "root": [
      "p"
    ],
    "almost": [
      "p"
    ],
    "every": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "issue": [
      "p"
    ],
    "only": [
      "p",
      "p",
      "p"
    ],
    "way": [
      "p",
      "p",
      "p"
    ],
    "ensure": [
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "safety": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "defense": [
      "p"
    ],
    "depth": [
      "p"
    ],
    "default": [
      "p"
    ],
    "deny": [
      "p"
    ],
    "policy": [
      "p"
    ],
    "starts": [
      "p"
    ],
    "with": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "fundamental": [
      "p"
    ],
    "supposition": [
      "p"
    ],
    "until": [
      "p"
    ],
    "proven": [
      "p"
    ],
    "otherwise": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "ul",
      "li",
      "li"
    ],
    "example": [
      "p",
      "p",
      "p",
      "p",
      "h1",
      "h1"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "you": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "call": [
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "external": [
      "p"
    ],
    "service": [
      "p"
    ],
    "returns": [
      "p"
    ],
    "strings": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "h1"
    ],
    "know": [
      "p",
      "p",
      "p",
      "p"
    ],
    "commands": [
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "not": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "i",
      "p",
      "p"
    ],
    "present?": [
      "p"
    ],
    "also": [
      "p",
      "p",
      "p"
    ],
    "several": [
      "p"
    ],
    "write": [
      "p"
    ],
    "shared": [
      "p"
    ],
    "database": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "when": [
      "p",
      "h1",
      "p",
      "p",
      "p",
      "p"
    ],
    "read": [
      "p"
    ],
    "data": [
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "whether": [
      "p"
    ],
    "it": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "safe?": [
      "p"
    ],
    "getting": [
      "p"
    ],
    "validation": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "correct": [
      "p"
    ],
    "tricky": [
      "p"
    ],
    "there's": [
      "p",
      "p"
    ],
    "reason": [
      "p"
    ],
    "it's": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "number": [
      "p"
    ],
    "one": [
      "p",
      "p",
      "p",
      "p"
    ],
    "security": [
      "p",
      "p"
    ],
    "problem": [
      "p",
      "p",
      "h1",
      "p"
    ],
    "however": [
      "p",
      "p"
    ],
    "approached": [
      "p"
    ],
    "systematically": [
      "p"
    ],
    "too": [
      "p"
    ],
    "hard": [
      "p"
    ],
    "aÂ problem": [
      "p"
    ],
    "solve": [
      "p",
      "p"
    ],
    "follow": [
      "p"
    ],
    "these": [
      "p",
      "p",
      "p"
    ],
    "steps": [
      "p"
    ],
    "determine": [
      "h2",
      "p",
      "h2",
      "h2",
      "p",
      "h2",
      "p"
    ],
    "inputs": [
      "h2",
      "p"
    ],
    "first": [
      "p",
      "p",
      "p"
    ],
    "step": [
      "p"
    ],
    "things": [
      "p"
    ],
    "which": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "can": [
      "p",
      "p",
      "p"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "controlled": [
      "p"
    ],
    "user": [
      "p",
      "p",
      "p",
      "p"
    ],
    "there": [
      "p",
      "p"
    ],
    "some": [
      "p",
      "p"
    ],
    "surprises": [
      "p"
    ],
    "here": [
      "p",
      "p",
      "p",
      "p"
    ],
    "--": [
      "p",
      "p"
    ],
    "lot": [
      "p"
    ],
    "variables": [
      "p"
    ],
    "normal": [
      "p"
    ],
    "http": [
      "p"
    ],
    "server": [
      "p",
      "p"
    ],
    "environment": [
      "p"
    ],
    "actually": [
      "p"
    ],
    "taken": [
      "p"
    ],
    "from": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "user's": [
      "p",
      "p"
    ],
    "request": [
      "p"
    ],
    "so": [
      "p"
    ],
    "make": [
      "p",
      "p",
      "p"
    ],
    "sure": [
      "p",
      "p"
    ],
    "exactly": [
      "p",
      "p"
    ],
    "where": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "everything": [
      "p"
    ],
    "coming": [
      "p"
    ],
    "good": [
      "p",
      "p"
    ],
    "idea": [
      "p"
    ],
    "leave": [
      "p"
    ],
    "brief": [
      "p"
    ],
    "comment": [
      "p",
      "p",
      "p"
    ],
    "code": [
      "p",
      "p",
      "p"
    ],
    "comes": [
      "p",
      "p"
    ],
    "mentioning": [
      "p"
    ],
    "isn't": [
      "p",
      "p"
    ],
    "obvious": [
      "p"
    ],
    "context,": [
      "p"
    ],
    "expected": [
      "p",
      "p"
    ],
    "format": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "again,": [
      "p"
    ],
    "obvious.": [
      "p"
    ],
    "trusted": [
      "h2",
      "p",
      "p",
      "p",
      "p"
    ],
    "stores": [
      "h2",
      "p"
    ],
    "has": [
      "p",
      "p"
    ],
    "at": [
      "p",
      "p",
      "p"
    ],
    "least": [
      "p"
    ],
    "usually": [
      "p"
    ],
    "multiple": [
      "p"
    ],
    "important": [
      "p"
    ],
    "store": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "guideline": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "system": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "question": [
      "p"
    ],
    "into": [
      "p",
      "p",
      "p",
      "p"
    ],
    "then": [
      "p",
      "p",
      "p",
      "p"
    ],
    "rely": [
      "p"
    ],
    "semantics": [
      "p",
      "p"
    ],
    "enforced": [
      "p"
    ],
    "your": [
      "p"
    ],
    "routines": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "apply": [
      "p"
    ],
    "found": [
      "p",
      "p"
    ],
    "other": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "access": [
      "p"
    ],
    "can't": [
      "p"
    ],
    "while": [
      "p",
      "p"
    ],
    "possible": [
      "p",
      "p",
      "p",
      "p"
    ],
    "check": [
      "p",
      "p",
      "p",
      "p"
    ],
    "routine": [
      "p"
    ],
    "accesses": [
      "p"
    ],
    "simpler": [
      "p"
    ],
    "safer": [
      "p"
    ],
    "untrusted": [
      "p",
      "p"
    ],
    "treat": [
      "p"
    ],
    "as": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "potential": [
      "p"
    ],
    "source": [
      "p",
      "p",
      "p"
    ],
    "validating": [
      "p"
    ],
    "would": [
      "p",
      "p"
    ],
    "any": [
      "p"
    ],
    "crossover": [
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "points": [
      "h2",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "point": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "anywhere": [
      "p"
    ],
    "included": [
      "p"
    ],
    "textually": [
      "p"
    ],
    "larger": [
      "p"
    ],
    "body": [
      "p"
    ],
    "command": [
      "p",
      "p",
      "p"
    ],
    "text": [
      "p",
      "p"
    ],
    "security-relevant": [
      "p"
    ],
    "decision": [
      "p"
    ],
    "made": [
      "p"
    ],
    "based": [
      "p"
    ],
    "dynamic": [
      "p",
      "p"
    ],
    "sql": [
      "p",
      "p",
      "p",
      "p"
    ],
    "query": [
      "p"
    ],
    "note": [
      "p"
    ],
    "may": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "occur": [
      "p",
      "p"
    ],
    "often": [
      "p"
    ],
    "many": [
      "p",
      "p"
    ],
    "layers": [
      "p"
    ],
    "deep": [
      "p"
    ],
    "within": [
      "p"
    ],
    "large": [
      "p",
      "p"
    ],
    "risk": [
      "p",
      "p"
    ],
    "crossing": [
      "p"
    ],
    "over": [
      "p",
      "p"
    ],
    "associated": [
      "p",
      "p"
    ],
    "allowing": [
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p"
    ],
    "execute": [
      "p"
    ],
    "addition": [
      "p"
    ],
    "above": [
      "p"
    ],
    "injection": [
      "p",
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p"
    ],
    "xpath": [
      "p"
    ],
    "xml": [
      "p"
    ],
    "injections": [
      "p"
    ],
    "another": [
      "p",
      "p",
      "p"
    ],
    "examples": [
      "p"
    ],
    "worst": [
      "p"
    ],
    "case": [
      "p"
    ],
    "evaluated": [
      "p"
    ],
    "language's": [
      "p"
    ],
    "built-in": [
      "p"
    ],
    "\"eval\"": [
      "p"
    ],
    "something": [
      "p"
    ],
    "similar": [
      "p",
      "p"
    ],
    "commandsÂ should": [
      "p"
    ],
    "never": [
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "even": [
      "p",
      "p"
    ],
    "values": [
      "p"
    ],
    "look": [
      "p",
      "p"
    ],
    "safe": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "because": [
      "p",
      "p",
      "p"
    ],
    "risks": [
      "p"
    ],
    "compromise": [
      "p"
    ],
    "sensitive": [
      "p"
    ],
    "information": [
      "p",
      "ul",
      "li"
    ],
    "disclosure": [
      "p"
    ],
    "trace": [
      "p"
    ],
    "back": [
      "p"
    ],
    "they've": [
      "p"
    ],
    "been": [
      "p",
      "p"
    ],
    "insert": [
      "p",
      "p"
    ],
    "stating": [
      "p"
    ],
    "depending": [
      "p"
    ],
    "technology": [
      "p"
    ],
    "involved": [
      "p"
    ],
    "have": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "different": [
      "p",
      "p",
      "p",
      "p"
    ],
    "sets": [
      "p",
      "p"
    ],
    "characters": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "using": [
      "p"
    ],
    "whitelist": [
      "p",
      "p"
    ],
    "approach": [
      "p",
      "p"
    ],
    "compare": [
      "p"
    ],
    "set": [
      "p",
      "p"
    ],
    "against": [
      "p"
    ],
    "validator": [
      "p",
      "p"
    ],
    "will": [
      "p",
      "p",
      "p",
      "p"
    ],
    "allow": [
      "p",
      "p",
      "p",
      "p"
    ],
    "through": [
      "p",
      "h2",
      "p",
      "p",
      "p"
    ],
    "allowed": [
      "p"
    ],
    "must": [
      "p",
      "p",
      "p"
    ],
    "subset": [
      "p"
    ],
    "ones": [
      "p"
    ],
    "whenever": [
      "p"
    ],
    "remove": [
      "p"
    ],
    "entirely": [
      "p"
    ],
    "switching": [
      "p"
    ],
    "stored": [
      "p"
    ],
    "procedures": [
      "p"
    ],
    "bound": [
      "p"
    ],
    "parameters": [
      "p"
    ],
    "removes": [
      "p"
    ],
    "entire": [
      "p",
      "p"
    ],
    "category": [
      "p"
    ],
    "greatly": [
      "p"
    ],
    "reduces": [
      "p"
    ],
    "class": [
      "p"
    ],
    "seek": [
      "p"
    ],
    "out": [
      "p"
    ],
    "ways": [
      "p"
    ],
    "eliminate": [
      "p"
    ],
    "types": [
      "p"
    ],
    "crossovers": [
      "p"
    ],
    "outputs": [
      "h2",
      "p"
    ],
    "last": [
      "p",
      "p"
    ],
    "concern": [
      "p"
    ],
    "list": [
      "p",
      "p",
      "p"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "likely": [
      "p"
    ],
    "certain": [
      "p"
    ],
    "amount": [
      "p"
    ],
    "overlap": [
      "p"
    ],
    "fine": [
      "p"
    ],
    "allowable": [
      "p"
    ],
    "each": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "being": [
      "p",
      "p"
    ],
    "possibility": [
      "p"
    ],
    "contain": [
      "p"
    ],
    "dangerous": [
      "p"
    ],
    "encode": [
      "p"
    ],
    "manner": [
      "p"
    ],
    "appropriate": [
      "p",
      "p",
      "p"
    ],
    "specific": [
      "p"
    ],
    "more": [
      "p",
      "p",
      "p",
      "ul",
      "li"
    ],
    "contexts": [
      "p"
    ],
    "than": [
      "p"
    ],
    "might": [
      "p",
      "p",
      "p"
    ],
    "think": [
      "p"
    ],
    "contents": [
      "p"
    ],
    "html": [
      "p",
      "p"
    ],
    "attributes": [
      "p"
    ],
    "tags": [
      "p",
      "p"
    ],
    "themselves": [
      "p"
    ],
    "free": [
      "p"
    ],
    "between": [
      "p"
    ],
    "javascript": [
      "p",
      "p",
      "p"
    ],
    "encoding": [
      "p",
      "p",
      "h2",
      "p",
      "p"
    ],
    "case.": [
      "p"
    ],
    "build": [
      "h2",
      "p",
      "h2",
      "p",
      "p"
    ],
    "centralized": [
      "h2",
      "h2"
    ],
    "module": [
      "h2",
      "p",
      "h2"
    ],
    "biggest": [
      "p"
    ],
    "dangers": [
      "p"
    ],
    "implementing": [
      "p"
    ],
    "inconsistent": [
      "p"
    ],
    "attack": [
      "p",
      "p"
    ],
    "caught": [
      "p"
    ],
    "path": [
      "p",
      "p"
    ],
    "but": [
      "p",
      "p"
    ],
    "try": [
      "p",
      "p"
    ],
    "them": [
      "p",
      "p",
      "p",
      "p"
    ],
    "responsibility": [
      "p"
    ],
    "its": [
      "p"
    ],
    "location": [
      "p"
    ],
    "depends": [
      "p"
    ],
    "design": [
      "p",
      "ul",
      "li"
    ],
    "piece": [
      "p"
    ],
    "object": [
      "p",
      "p",
      "p"
    ],
    "constructs": [
      "p"
    ],
    "setters": [
      "p"
    ],
    "perform": [
      "p",
      "p"
    ],
    "object's": [
      "p"
    ],
    "less": [
      "p"
    ],
    "strictly": [
      "p"
    ],
    "oriented": [
      "p"
    ],
    "methods": [
      "p"
    ],
    "whichever": [
      "p"
    ],
    "method": [
      "p"
    ],
    "choose": [
      "p"
    ],
    "very": [
      "p"
    ],
    "strict": [
      "p"
    ],
    "type": [
      "p"
    ],
    "us": [
      "p"
    ],
    "zip": [
      "p"
    ],
    "numbers": [
      "p"
    ],
    "nothing": [
      "p"
    ],
    "else": [
      "p"
    ],
    "international": [
      "p"
    ],
    "postal": [
      "p",
      "p"
    ],
    "codes": [
      "p",
      "p"
    ],
    "validate": [
      "p"
    ],
    "separately": [
      "p"
    ],
    "looser": [
      "p"
    ],
    "allows": [
      "p"
    ],
    "letters": [
      "p"
    ],
    "higher": [
      "p"
    ],
    "level": [
      "p"
    ],
    "integrity": [
      "p"
    ],
    "complex": [
      "p"
    ],
    "recognizes": [
      "p"
    ],
    "nation": [
      "p"
    ],
    "ideal": [
      "p"
    ],
    "world": [
      "p"
    ],
    "done": [
      "p"
    ],
    "via": [
      "p",
      "p"
    ],
    "same": [
      "p"
    ],
    "libraries": [
      "p",
      "p"
    ],
    "create": [
      "p"
    ],
    "control": [
      "p"
    ],
    "attempt": [
      "p"
    ],
    "none": [
      "p"
    ],
    "instead": [
      "p"
    ],
    "they": [
      "p",
      "p",
      "p",
      "p"
    ],
    "guess": [
      "p"
    ],
    "harmful": [
      "p"
    ],
    "categorically": [
      "p"
    ],
    "incomplete": [
      "p"
    ],
    "unless": [
      "p",
      "p"
    ],
    "want": [
      "p"
    ],
    "new": [
      "p",
      "p",
      "p",
      "p"
    ],
    "library": [
      "p"
    ],
    "option": [
      "p"
    ],
    "enough": [
      "p"
    ],
    "application,": [
      "p"
    ],
    "encoders": [
      "p",
      "p"
    ],
    "context": [
      "p",
      "p",
      "p"
    ],
    "close": [
      "p"
    ],
    "actual": [
      "p"
    ],
    "minimizes": [
      "p"
    ],
    "chance": [
      "p"
    ],
    "alternate": [
      "p"
    ],
    "skip": [
      "p"
    ],
    "ensures": [
      "p"
    ],
    "developer": [
      "p"
    ],
    "knows": [
      "p"
    ],
    "avoid": [
      "p"
    ],
    "temptation": [
      "p"
    ],
    "initially": [
      "p"
    ],
    "change": [
      "p"
    ],
    "time": [
      "p"
    ],
    "paths": [
      "h2",
      "p"
    ],
    "preserve": [
      "h2",
      "p"
    ],
    "once": [
      "p"
    ],
    "complete": [
      "p"
    ],
    "takes": [
      "p"
    ],
    "properties": [
      "p"
    ],
    "sent": [
      "p"
    ],
    "round-trip": [
      "p"
    ],
    "client": [
      "p"
    ],
    "re-validated": [
      "p"
    ],
    "cryptographic": [
      "p"
    ],
    "signature": [
      "p"
    ],
    "tampered": [
      "p"
    ],
    "occurs": [
      "p"
    ],
    "repeated": [
      "p"
    ],
    "client-side": [
      "p"
    ],
    "nice": [
      "p"
    ],
    "ui": [
      "p"
    ],
    "touch": [
      "p"
    ],
    "measure": [
      "p"
    ],
    "trivial": [
      "p"
    ],
    "circumvent": [
      "p"
    ],
    "suite": [
      "p",
      "p"
    ],
    "e-commerce": [
      "p",
      "p"
    ],
    "site": [
      "p",
      "p"
    ],
    "share": [
      "p",
      "p"
    ],
    "common": [
      "p",
      "p"
    ],
    "back-end": [
      "p",
      "p",
      "p"
    ],
    "isÂ theÂ order-entry": [
      "p",
      "p"
    ],
    "shopping": [
      "p",
      "p",
      "p"
    ],
    "cart": [
      "p",
      "p",
      "p"
    ],
    "was": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "built": [
      "p",
      "p",
      "p",
      "p"
    ],
    "designed": [
      "p",
      "p"
    ],
    "assumption": [
      "p",
      "p"
    ],
    "later": [
      "p",
      "p"
    ],
    "lightweight": [
      "p",
      "p"
    ],
    "app": [
      "p",
      "p"
    ],
    "users": [
      "p",
      "p"
    ],
    "quickly": [
      "p",
      "p"
    ],
    "stock": [
      "p",
      "p"
    ],
    "levels": [
      "p",
      "p"
    ],
    "small": [
      "p",
      "p"
    ],
    "\"read-only\"": [
      "p",
      "p"
    ],
    "contained": [
      "p"
    ],
    "alter": [
      "p"
    ],
    "such": [
      "p"
    ],
    "couldÂ inject": [
      "p"
    ],
    "pages": [
      "p"
    ],
    "displayed": [
      "p"
    ],
    "steal": [
      "p"
    ],
    "passwords": [
      "p"
    ],
    "solution": [
      "h1"
    ],
    "builtÂ Â when": [
      "p"
    ],
    "added": [
      "p",
      "p"
    ],
    "developers": [
      "p"
    ],
    "realized": [
      "p"
    ],
    "could": [
      "p"
    ],
    "no": [
      "p"
    ],
    "longer": [
      "p"
    ],
    "treated": [
      "p"
    ],
    "main": [
      "p",
      "p",
      "p"
    ],
    "databaseÂ Â Â because": [
      "p"
    ],
    "written": [
      "p"
    ],
    "were": [
      "p",
      "p"
    ],
    "properly": [
      "p"
    ],
    "checked": [
      "p"
    ],
    "altered": [
      "p"
    ],
    "unable": [
      "p"
    ],
    "chain": [
      "p"
    ],
    "go": [
      "p"
    ],
    "furthermore": [
      "p"
    ],
    "logging": [
      "p"
    ],
    "performed": [
      "p"
    ],
    "application's": [
      "p"
    ],
    "alerted": [
      "p"
    ],
    "operations": [
      "p"
    ],
    "group": [
      "p"
    ],
    "fix": [
      "p"
    ],
    "smaller": [
      "p"
    ],
    "additional": [
      "h1"
    ],
    "resources": [
      "h1"
    ],
    "see": [
      "ul",
      "li"
    ],
    "\"chapter": [
      "ul",
      "li"
    ],
    "-": [
      "ul",
      "li"
    ],
    "guidelines": [
      "ul",
      "li"
    ],
    "secure": [
      "ul",
      "li"
    ],
    "applications\"": [
      "ul",
      "li"
    ],
    "atÂ http//msdn2.microsoft.com/en-us/library/aa302420.aspx": [
      "ul",
      "li"
    ],
    "http//msdn2.microsoft.com/en-us/library/aa302420.aspx": [
      "a"
    ],
    "adapted": [
      "p"
    ],
    "microsoft": [
      "p"
    ],
    "patterns": [
      "p"
    ],
    "&": [
      "p"
    ],
    "practices": [
      "p"
    ],
    "guidance": [
      "p"
    ]
  },
  "tags": {
    "h1": [
      "Applies to",
      "What to Do",
      "Why",
      "When",
      "How",
      "Problem Example",
      "Solution Example",
      "Additional Resources"
    ],
    "ul": [
      "Web Application",
      "For more information see, \"Chapter 4 - Design Guidelines for Secure Web Applications\" atÂ http://msdn2.microsoft.com/en-us/library/aa302420.aspx"
    ],
    "li": [
      "Web Application",
      "For more information see, \"Chapter 4 - Design Guidelines for Secure Web Applications\" atÂ http://msdn2.microsoft.com/en-us/library/aa302420.aspx"
    ],
    "p": [
      "Applications should assume that all of their input is malicious, and take action accordingly.Â  Input shouldÂ be validated and either rejected or sanitized immediately, carefully quarantined during use, and encoded appropriately on output.",
      "Malicious input is the single largest cause of vulnerabilities in web applications, and, in the most general sense, is the root cause of almost every issue.Â  The only way to ensure safety is by a defense in depth, default deny policy that starts with the fundamental supposition that all input is malicious until proven otherwise. For example, if you call an external Web service that returns strings, how do you know that malicious commands are not present? Also, if several applications write to a shared database, when you read data, how do you know whether it is safe?",
      "All applications should assume that all their input is malicious.",
      "Getting input validation correct is tricky; there's a reason that it's the number one security problem for web applications.Â  However, when approached systematically, it's not too hard of aÂ problem to solve.Â  Follow these steps:",
      "The first step is to determine all the things in the application which can be controlled by the user. There are some surprises here -- a lot of the variables in a normal HTTP server environment are actually taken from the user's request, so make sure you know exactly where everything is coming from. It's a good idea to leave a brief comment in the code where the input comes in mentioning where it comes from (if it isn't obvious from context), the expected format, and where it's validated (again, if it isn't obvious).",
      "Every application has at least one, usually multiple data stores.Â  It's important to know when a data store can be trusted.Â  The guideline here is simple: if the system in question is the only input into the data store, then you can rely on the semantics enforced by your input validation routines to apply to all data found in the store.Â  If other applications access the data store, then you can't.Â  While it is possible to check the semantics of every validation routine in every other system that accesses the data store, it's simpler and safer to assume that the data store is untrusted, and treat it as a potential source of malicious data, validating all input from it as you would any other input.",
      "A crossover point is anywhere where user input is included textually in \r\nsome larger body of command text, or where a security-relevant decision \r\nis made based on it. A good example of a crossover point is a dynamic \r\nSQL query. Note that output may or may not occur at a crossover point; often, crossover points occur many layers deep within a large application.",
      "The risk here is of the user input crossing over into the \r\nassociated command data, allowing an attacker to execute commands.",
      "In addition to the above injection attacks, Xpath and other XML injections are another examples. The worst case here is when user input is evaluated by a language's built-in \"eval\" command or something similar -- these commandsÂ should never be used, even with values that look safe, because of the possible risks of server compromise or sensitive information disclosure.",
      "Determine all crossover points. Then, trace all inputs back to make sure that they've been validated appropriately, and insert a comment stating the format, source, and validation point of the input.Â  Depending on the technology involved, all crossover points have different sets of safe characters.Â  Using the whitelist approach, compare the safe set of characters for that crossover point against what the validator will allow through. The allowed characters must be a subset of the safe ones.",
      "Whenever possible, remove crossover points entirely.Â  For example, switching from dynamic SQL to stored procedures with bound parameters removes an entire category of crossover points from the system, and greatly reduces risk to an entire class of attacks.Â  Seek out similar ways to eliminate other types of crossovers.",
      "The last point of concern is the list of outputs from the system.Â  This will likely have a certain amount of overlap with the list of crossover points, which is fine.Â  Determine the allowable format for each output, and look at where the associated input is being validated.Â  If there's a possibility that the input may contain dangerous characters, encode it in a manner appropriate to the specific output.Â  There are more output contexts than you might think: the contents of HTML attributes, the tags themselves, free text between the tags, and JavaScript strings all have different sets of safe characters (and a different encoding, in the last case).Â  Insert a comment on the input source, format, validation point, and encoding point of each output.",
      "One of the biggest dangers of implementing input validation is inconsistent validation. An attack may be caught on one data path, but not on another; an attacker, however, will try all of them.Â  The way to solve this problem is to have a single point of responsibility for input validation.Â  Its location depends on the design.Â  If every piece of input is an object, then it may be appropriate to have the object constructs and setters perform the validation for that object's input.Â  In a less strictly object oriented system, a single module with methods for each different input format may be more appropriate.",
      "Whichever method you choose, use very strict input validation routines for each data type.Â  For example, for a US zip code, allow either 5 or 9 numbers, and nothing else.Â  For international postal codes, either validate them separately with a looser format that also allows letters, or, to ensure a higher level of integrity, build a more complex validator that recognizes the postal codes of each nation.",
      "In an ideal world, all encoding routines would be done via the same libraries that are used to create output.Â  While many HTML control libraries attempt this, none of them take the whitelist approach.Â  Instead, they try to guess which characters might be harmful, a list that is categorically incomplete.Â  Unless you want to build a new output library (which might be an option on a large enough application), you should build a set of data encoders for each output context that you have.Â  Use these encoders as close as possible to the actual point of output; this minimizes the chance that an alternate data path will skip the encoding, and ensures that the developer knows exactly in what context the output is being used.Â  Avoid the temptation to store encoded data, because even if it is initially only used in the context for which you encoded it, this may change over time.",
      "Once the validation system is complete, check all the paths that data takes through the system to ensure that they preserve the expected validation properties.Â  Input that is sent round-trip through a client or another system must be re-validated, unless a cryptographic signature is used to ensure that it has not been tampered with.Â  Validation that occurs on an untrusted system must also be repeated.Â  Client-side validation in JavaScript is a nice UI touch, but it is not a security measure, as it is trivial to circumvent.",
      "A suite of web applications on an e-commerce site share a common back-end database.Â  The largest application isÂ theÂ order-entry system and shopping cart.Â  This was the first application built, and was designed with the assumption that the database was trusted.Â  Later, a lightweight app to allow users to quickly check stock levels was built.Â  Because it was a small \"read-only\" use of the database, input validation was not built into the application.Â  The application contained a SQL injection, allowing an attacker to alter the database in such a way that they couldÂ inject JavaScript into pages which displayed the shopping cart application and steal user's passwords.",
      "A suite of web applications on an e-commerce site share a common back-end database.Â  The largest application isÂ theÂ order-entry system and shopping cart.Â  This was the first application built, and was designed with the assumption that the database was trusted.Â  Later, a lightweight app to allow users to quickly check stock levels was built.Â Â When the new application was added, the developers realized that the database could no longer be treated as a trusted data store, and added code to the main application to perform data validation on input from the database.Â Â Â Because the new application was a small \"read-only\" use of the database, the input validation routines written were not properly checked.Â  When an attacker found a SQL injection via the new application and altered the back-end database, they were unable to make that attack chain go through to the main application.Â  Furthermore, the logging performed by the main application's data validation routines alerted the operations group to the problem, allowing them to fix the smaller application.",
      "Adapted from Microsoft patterns & practices guidance."
    ],
    "h2": [
      "1. Determine all inputs",
      "2. Determine all trusted data stores",
      "3. Determine all crossover points",
      "4. Determine all outputs",
      "5. Build a centralized validation module",
      "6. Build a centralized encoding module",
      "7. Ensure that all paths through the system preserve validation"
    ],
    "br": [
      "",
      "",
      ""
    ],
    "font": [
      ""
    ],
    "i": [
      "not"
    ],
    "a": [
      "http://msdn2.microsoft.com/en-us/library/aa302420.aspx"
    ],
    "hr": [
      ""
    ]
  },
  "links": [
    {
      "href": "http://msdn2.microsoft.com/en-us/library/aa302420.aspx",
      "text": "http://msdn2.microsoft.com/en-us/library/aa302420.aspx"
    }
  ],
  "html": "<h1>Applies to</h1>\r\n  <ul>\r\n    <li>Web Application</li>\r\n  </ul>\r\n  <h1>What to Do</h1>\r\n  <p>Applications should assume that all of their input is malicious, and take action accordingly.&nbsp; Input should&nbsp;be validated and either rejected or sanitized immediately, carefully quarantined during use, and encoded appropriately on output.</p>\r\n  <h1>Why</h1>\r\n  <p>Malicious input is the single largest cause of vulnerabilities in web applications, and, in the most general sense, is the root cause of almost every issue.&nbsp; The only way to ensure safety is by a defense in depth, default deny policy that starts with the fundamental supposition that all input is malicious until proven otherwise. For example, if you call an external Web service that returns strings, how do you know that malicious commands are not present? Also, if several applications write to a shared database, when you read data, how do you know whether it is safe?</p>\r\n  <h1>When</h1>\r\n  <p>All applications should assume that all their input is malicious.</p>\r\n  <h1>How</h1>\r\n  <p>Getting input validation correct is tricky; there's a reason that it's the number one security problem for web applications.&nbsp; However, when approached systematically, it's not too hard of a&nbsp;problem to solve.&nbsp; Follow these steps:</p>\r\n  <h2>1. Determine all inputs</h2>\r\n  <p>The first step is to determine all the things in the application which can be controlled by the user. There are some surprises here -- a lot of the variables in a normal HTTP server environment are actually taken from the user's request, so make sure you know exactly where everything is coming from. It's a good idea to leave a brief comment in the code where the input comes in mentioning where it comes from (if it isn't obvious from context), the expected format, and where it's validated (again, if it isn't obvious).</p>\r\n  <h2>2. Determine all trusted data stores</h2>\r\n  <p>Every application has at least one, usually multiple data stores.&nbsp; It's important to know when a data store can be trusted.&nbsp; The guideline here is simple: if the system in question is the only input into the data store, then you can rely on the semantics enforced by your input validation routines to apply to all data found in the store.&nbsp; If other applications access the data store, then you can't.&nbsp; While it is possible to check the semantics of every validation routine in every other system that accesses the data store, it's simpler and safer to assume that the data store is untrusted, and treat it as a potential source of malicious data, validating all input from it as you would any other input.</p>\r\n  <h2>3. Determine all crossover points</h2>\r\n  <p>A crossover point is anywhere where user input is included textually in \r\nsome larger body of command text, or where a security-relevant decision \r\nis made based on it. A good example of a crossover point is a dynamic \r\nSQL query. Note that output may or may not occur at a crossover point; often, crossover points occur many layers deep within a large application.&nbsp;&nbsp; <br /></p>\r\n  <p>The risk here is of the user input crossing over into the \r\nassociated command data, allowing an attacker to execute commands.&nbsp; <br /></p>\r\n  <p>In addition to the above injection attacks, Xpath and other XML injections are another examples. The worst case here is when user input is evaluated by a language's built-in \"eval\" command or something similar -- these commands<font color=\"#ff0000\">&nbsp;</font>should never be used, even with values that look safe, because of the possible risks of server compromise or sensitive information disclosure.</p>\r\n  <p>Determine all crossover points. Then, trace all inputs back to make sure that they've been validated appropriately, and insert a comment stating the format, source, and validation point of the input.&nbsp; Depending on the technology involved, all crossover points have different sets of safe characters.&nbsp; Using the whitelist approach, compare the safe set of characters for that crossover point against what the validator will allow through. The allowed characters must be a subset of the safe ones. <br /></p>\r\n  <p>Whenever possible, remove crossover points entirely.&nbsp; For example, switching from dynamic SQL to stored procedures with bound parameters removes an entire category of crossover points from the system, and greatly reduces risk to an entire class of attacks.&nbsp; Seek out similar ways to eliminate other types of crossovers.</p>\r\n  <h2>4. Determine all outputs</h2>\r\n  <p>The last point of concern is the list of outputs from the system.&nbsp; This will likely have a certain amount of overlap with the list of crossover points, which is fine.&nbsp; Determine the allowable format for each output, and look at where the associated input is being validated.&nbsp; If there's a possibility that the input may contain dangerous characters, encode it in a manner appropriate to the specific output.&nbsp; There are more output contexts than you might think: the contents of HTML attributes, the tags themselves, free text between the tags, and JavaScript strings all have different sets of safe characters (and a different encoding, in the last case).&nbsp; Insert a comment on the input source, format, validation point, and encoding point of each output.</p>\r\n  <h2>5. Build a centralized validation module</h2>\r\n  <p>One of the biggest dangers of implementing input validation is inconsistent validation. An attack may be caught on one data path, but not on another; an attacker, however, will try all of them.&nbsp; The way to solve this problem is to have a single point of responsibility for input validation.&nbsp; Its location depends on the design.&nbsp; If every piece of input is an object, then it may be appropriate to have the object constructs and setters perform the validation for that object's input.&nbsp; In a less strictly object oriented system, a single module with methods for each different input format may be more appropriate.</p>\r\n  <p>Whichever method you choose, use very strict input validation routines for each data type.&nbsp; For example, for a US zip code, allow either 5 or 9 numbers, and nothing else.&nbsp; For international postal codes, either validate them separately with a looser format that also allows letters, or, to ensure a higher level of integrity, build a more complex validator that recognizes the postal codes of each nation.</p>\r\n  <h2>6. Build a centralized encoding module</h2>\r\n  <p>In an ideal world, all encoding routines would be done via the same libraries that are used to create output.&nbsp; While many HTML control libraries attempt this, none of them take the whitelist approach.&nbsp; Instead, they try to guess which characters might be harmful, a list that is categorically incomplete.&nbsp; Unless you want to build a new output library (which might be an option on a large enough application), you should build a set of data encoders for each output context that you have.&nbsp; Use these encoders as close as possible to the actual point of output; this minimizes the chance that an alternate data path will skip the encoding, and ensures that the developer knows exactly in what context the output is being used.&nbsp; Avoid the temptation to store encoded data, because even if it is initially only used in the context for which you encoded it, this may change over time.</p>\r\n  <h2>7. Ensure that all paths through the system preserve validation</h2>\r\n  <p>Once the validation system is complete, check all the paths that data takes through the system to ensure that they preserve the expected validation properties.&nbsp; Input that is sent round-trip through a client or another system must be re-validated, unless a cryptographic signature is used to ensure that it has not been tampered with.&nbsp; Validation that occurs on an untrusted system must also be repeated.&nbsp; Client-side validation in JavaScript is a nice UI touch, but it is <i>not</i> a security measure, as it is trivial to circumvent.</p>\r\n  <h1>Problem Example</h1>\r\n  <p>A suite of web applications on an e-commerce site share a common back-end database.&nbsp; The largest application is&nbsp;the&nbsp;order-entry system and shopping cart.&nbsp; This was the first application built, and was designed with the assumption that the database was trusted.&nbsp; Later, a lightweight app to allow users to quickly check stock levels was built.&nbsp; Because it was a small \"read-only\" use of the database, input validation was not built into the application.&nbsp; The application contained a SQL injection, allowing an attacker to alter the database in such a way that they could&nbsp;inject JavaScript into pages which displayed the shopping cart application and steal user's passwords.&nbsp;</p>\r\n  <h1>Solution Example</h1>\r\n  <p>A suite of web applications on an e-commerce site share a common back-end database.&nbsp; The largest application is&nbsp;the&nbsp;order-entry system and shopping cart.&nbsp; This was the first application built, and was designed with the assumption that the database was trusted.&nbsp; Later, a lightweight app to allow users to quickly check stock levels was built.&nbsp;&nbsp;When the new application was added, the developers realized that the database could no longer be treated as a trusted data store, and added code to the main application to perform data validation on input from the database.&nbsp;&nbsp;&nbsp;Because the new application was a small \"read-only\" use of the database, the input validation routines written were not properly checked.&nbsp; When an attacker found a SQL injection via the new application and altered the back-end database, they were unable to make that attack chain go through to the main application.&nbsp; Furthermore, the logging performed by the main application's data validation routines alerted the operations group to the problem, allowing them to fix the smaller application.</p>\r\n  <h1>Additional Resources</h1>\r\n  <ul>\r\n    <li>For more information see, \"Chapter 4 - Design Guidelines for Secure Web Applications\" at&nbsp;<a href=\"http://msdn2.microsoft.com/en-us/library/aa302420.aspx\">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance.</p>"
}