{
  "id": "fb110891-3b63-4f04-b943-213e7847d08d",
  "checksum": "b21645c88fcecf6bf1a5e9e136b57084817f143c",
  "words": {
    "1": [
      "ul",
      "li",
      "h1"
    ],
    "2": [
      "ul",
      "li",
      "h1"
    ],
    "3": [
      "ul",
      "li",
      "h1",
      "p"
    ],
    "40": [
      "ul",
      "li"
    ],
    "applies": [
      "h1"
    ],
    "to": [
      "h1",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "aspnet": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "summary": [
      "h1"
    ],
    "applications": [
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p"
    ],
    "authenticate": [
      "p",
      "p"
    ],
    "their": [
      "p",
      "p"
    ],
    "clients": [
      "p",
      "p"
    ],
    "using": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p"
    ],
    "challenge-response": [
      "p",
      "p",
      "p"
    ],
    "diffie-hellman-like": [
      "p"
    ],
    "algorithm": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "title"
    ],
    "mutual": [
      "p",
      "p",
      "p",
      "p"
    ],
    "authentication": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li"
    ],
    "may": [
      "p"
    ],
    "be": [
      "p"
    ],
    "vulnerable": [
      "p",
      "p",
      "p",
      "p"
    ],
    "reflection": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "title"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "where": [
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li"
    ],
    "attacker’s": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "main": [
      "p"
    ],
    "goal": [
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "trick": [
      "p"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "into": [
      "p"
    ],
    "its": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p"
    ],
    "own": [
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p"
    ],
    "response": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "as": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "answer": [
      "p",
      "p"
    ],
    "an": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "challenge": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p"
    ],
    "follow": [
      "p",
      "p"
    ],
    "these": [
      "p",
      "p"
    ],
    "steps": [
      "p",
      "p"
    ],
    "test": [
      "p",
      "ul",
      "li",
      "h1",
      "p",
      "h2",
      "p",
      "p",
      "p",
      "title"
    ],
    "bugs": [
      "p",
      "p",
      "h2",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "aspnet:": [
      "p"
    ],
    "step": [
      "ul",
      "ul",
      "ul",
      "li",
      "li",
      "li",
      "h1",
      "h1",
      "h1",
      "ol",
      "ol",
      "li",
      "li",
      "p"
    ],
    "understand": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "attack": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "scenarios": [
      "ul",
      "li",
      "h1"
    ],
    "analyze": [
      "ul",
      "li",
      "h1"
    ],
    "causes": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "and": [
      "ul",
      "li",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "h1",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "countermeasures": [
      "ul",
      "li",
      "h1"
    ],
    "execute": [
      "ul",
      "li",
      "h1",
      "p",
      "p"
    ],
    "cases": [
      "ul",
      "li",
      "p",
      "h1",
      "p"
    ],
    "first": [
      "p",
      "p"
    ],
    "it": [
      "p",
      "ol",
      "li",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "necessary": [
      "p",
      "p",
      "p"
    ],
    "anatomy": [
      "p"
    ],
    "of": [
      "p",
      "p",
      "p"
    ],
    "scenario": [
      "p",
      "p",
      "p"
    ],
    "by": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "reviewing": [
      "p"
    ],
    "common": [
      "p"
    ],
    "process during": [
      "p"
    ],
    "sequence": [
      "p"
    ],
    "client": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "p",
      "p"
    ],
    "connects": [
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p"
    ],
    "server": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "sends": [
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "sc": [
      "p",
      "i",
      "ol",
      "li",
      "i",
      "p",
      "i"
    ],
    "client the": [
      "p",
      "p"
    ],
    "must": [
      "p",
      "p"
    ],
    "then": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "respond": [
      "p",
      "p"
    ],
    "successfully": [
      "p",
      "p"
    ],
    "sending": [
      "p",
      "p",
      "p"
    ],
    "cr": [
      "p",
      "p",
      "i",
      "i",
      "ol",
      "li",
      "i",
      "i"
    ],
    "along": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "with": [
      "p",
      "p",
      "ol",
      "li",
      "p",
      "ol",
      "li",
      "p",
      "p"
    ],
    "cc": [
      "p",
      "p",
      "i",
      "i",
      "ol",
      "li",
      "i"
    ],
    "application the": [
      "p",
      "p"
    ],
    "authenticates": [
      "p",
      "ol",
      "li"
    ],
    "verifying": [
      "p"
    ],
    "client’s": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "responds": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "sr the": [
      "p"
    ],
    "validates": [
      "p",
      "ol",
      "ol",
      "li",
      "li",
      "ol",
      "li"
    ],
    "sr": [
      "p",
      "i",
      "i",
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "i"
    ],
    "completes": [
      "p"
    ],
    "detail": [
      "p",
      "p"
    ],
    "creates": [
      "ol",
      "li"
    ],
    "server’s": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "cr the": [
      "ol",
      "li"
    ],
    "exploit": [
      "p"
    ],
    "bug": [
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p"
    ],
    "target": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "which": [
      "p",
      "p"
    ],
    "turns": [
      "p"
    ],
    "tc": [
      "p",
      "p",
      "i",
      "i",
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "i"
    ],
    "attacker as": [
      "p"
    ],
    "doesn’t": [
      "p",
      "p",
      "p"
    ],
    "know": [
      "p",
      "p"
    ],
    "how": [
      "p",
      "p",
      "p",
      "title"
    ],
    "target’s": [
      "p"
    ],
    "complete": [
      "p",
      "p"
    ],
    "shared": [
      "p",
      "p"
    ],
    "secret": [
      "p"
    ],
    "opens": [
      "p",
      "ol",
      "li"
    ],
    "second": [
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "ol",
      "li"
    ],
    "connection": [
      "p",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "li",
      "p",
      "p",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li"
    ],
    "waits": [
      "p"
    ],
    "till": [
      "p"
    ],
    "tr": [
      "p",
      "i",
      "ol",
      "li",
      "i",
      "i"
    ],
    "through": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "uses": [
      "p",
      "ol",
      "li"
    ],
    "this": [
      "p",
      "p",
      "ol",
      "li",
      "p"
    ],
    "though": [
      "p"
    ],
    "ac": [
      "ol",
      "li",
      "i"
    ],
    "=": [
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "i"
    ],
    "original": [
      "ol",
      "ol",
      "li",
      "li",
      "p",
      "ol",
      "li"
    ],
    "ar": [
      "ol",
      "ol",
      "li",
      "i",
      "li",
      "i"
    ],
    "tr.": [
      "ol",
      "li"
    ],
    "now": [
      "p",
      "p"
    ],
    "what": [
      "p",
      "p"
    ],
    "protect": [
      "p",
      "p",
      "p"
    ],
    "against": [
      "p",
      "p",
      "p"
    ],
    "insecure": [
      "h2",
      "p"
    ],
    "protocol": [
      "h2",
      "p",
      "p"
    ],
    "design": [
      "h2",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p"
    ],
    "possible": [
      "p"
    ],
    "because": [
      "p"
    ],
    "poor": [
      "p"
    ],
    "implementation": [
      "p"
    ],
    "protocols for": [
      "p"
    ],
    "instance": [
      "p"
    ],
    "previous": [
      "p",
      "ol",
      "ol",
      "li",
      "li"
    ],
    "able": [
      "p",
      "p"
    ],
    "initiate": [
      "p"
    ],
    "accepts": [
      "p"
    ],
    "challenge applications": [
      "p"
    ],
    "can": [
      "p"
    ],
    "nonce": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "i"
    ],
    "number": [
      "p"
    ],
    "used": [
      "p",
      "p",
      "p"
    ],
    "once. when": [
      "p"
    ],
    "will": [
      "p"
    ],
    "start": [
      "p",
      "ol",
      "li",
      "p"
    ],
    "specific": [
      "p"
    ],
    "send": [
      "p",
      "ol",
      "ol",
      "ol",
      "ol",
      "li",
      "li",
      "li",
      "li"
    ],
    "his": [
      "p"
    ],
    "identifier": [
      "p"
    ],
    "encrypted": [
      "p"
    ],
    "key": [
      "p"
    ],
    "k the": [
      "p"
    ],
    "decrypts": [
      "p"
    ],
    "message": [
      "p"
    ],
    "sent": [
      "p",
      "p",
      "ol",
      "li"
    ],
    "makes": [
      "p"
    ],
    "sure": [
      "p"
    ],
    "correspond": [
      "p"
    ],
    "different": [
      "p"
    ],
    "checking": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p"
    ],
    "back": [
      "p"
    ],
    "connection to": [
      "p"
    ],
    "avoid": [
      "p"
    ],
    "detects": [
      "p"
    ],
    "disallows": [
      "p"
    ],
    "being": [
      "p"
    ],
    "past": [
      "p"
    ],
    "or": [
      "p"
    ],
    "across": [
      "p"
    ],
    "more": [
      "p"
    ],
    "than": [
      "p"
    ],
    "one": [
      "p"
    ],
    "k": [
      "i"
    ],
    "occurs": [
      "p"
    ],
    "poorly": [
      "p"
    ],
    "implement": [
      "p"
    ],
    "scheme in": [
      "p"
    ],
    "most": [
      "p"
    ],
    "use": [
      "p",
      "p"
    ],
    "login": [
      "p",
      "p"
    ],
    "application if": [
      "p"
    ],
    "case": [
      "p",
      "p"
    ],
    "developers": [
      "p",
      "p"
    ],
    "encouraged": [
      "p"
    ],
    "aspnet’s": [
      "p"
    ],
    "forms": [
      "p",
      "p"
    ],
    "authenticationwhich": [
      "p"
    ],
    "provides": [
      "p"
    ],
    "simple": [
      "p"
    ],
    "environment": [
      "p"
    ],
    "sessions": [
      "p"
    ],
    "abstracted": [
      "p"
    ],
    "from": [
      "p",
      "ol",
      "li"
    ],
    "you’ve": [
      "p"
    ],
    "reviewed": [
      "p"
    ],
    "background": [
      "p"
    ],
    "practical": [
      "p"
    ],
    "check": [
      "p",
      "p"
    ],
    "your": [
      "p",
      "p"
    ],
    "connect": [
      "ol",
      "li"
    ],
    "applicationto": [
      "ol",
      "li"
    ],
    "wait": [
      "ol",
      "ol",
      "li",
      "li"
    ],
    "open": [
      "ol",
      "li"
    ],
    "expected": [
      "p"
    ],
    "results the": [
      "p"
    ],
    "you": [
      "p",
      "p"
    ],
    "conclusions": [
      "h1"
    ],
    "focus": [
      "p"
    ],
    "on": [
      "p",
      "p"
    ],
    "exploiting": [
      "p"
    ],
    "logical": [
      "p"
    ],
    "flaws": [
      "p"
    ],
    "mutual-authentication": [
      "p"
    ],
    "responding": [
      "p"
    ],
    "application’s": [
      "p"
    ],
    "response to": [
      "p"
    ],
    "suggested": [
      "p"
    ],
    "understanding": [
      "p"
    ],
    "well": [
      "p"
    ],
    "it then": [
      "p"
    ],
    "trivial": [
      "p"
    ],
    "vulnerabilities": [
      "title"
    ]
  },
  "tags": {
    "h1": [
      "Applies To",
      "Summary",
      "Step 1: Understand Attack Scenarios",
      "Step 2: Analyze Causes and Countermeasures",
      "Step 3: Execute Test Cases",
      "Conclusions"
    ],
    "ul": [
      "ASP.NET 4.0",
      "Step 1: Understand attack scenarios \r\n    Step 2: Analyze causes and countermeasures \r\n    Step 3: Execute test cases"
    ],
    "li": [
      "ASP.NET 4.0",
      "Step 1: Understand attack scenarios",
      "Step 2: Analyze causes and countermeasures",
      "Step 3: Execute test cases",
      "The client connects to the server.",
      "The server sends a server challenge sc.",
      "The client creates its own challenge cc sends it along with the client’s response cr to the server’s challenge.",
      "The server validates the client’s response cr. The server sends its own response sr to the client’s challenge.",
      "The client validates the server’s response sr.",
      "The attacker connects to the target application.",
      "The target sends the attacker a challenge tc.",
      "The attacker opens a second connection to the target and sends the target challenge as the attacker’s own challenge (ac = tc) through the second connection.",
      "Through the second connection, the target responds to the attacker’s challenge with a target response tr.",
      "Through the original connection, the attacker uses the target response as its own response (ar = tr).",
      "Through the original connection, the target validates the attacker response ar and authenticates the attacker.",
      "Connect to the target applicationto start authentication. Wait for the application to send a challenge.",
      "Open a second connection to the target and send the target challenge from the previous step through this connection. Wait for the target application to send a response for the challenge.",
      "Send the response sent by the application in the previous step through the original connection."
    ],
    "p": [
      "ASP.NET applications that authenticate their clients using a challenge-response, Diffie-Hellman-like algorithm, for mutual authentication may be vulnerable to reflection attacks where the attacker’s main goal is to trick the application into using its own response as the answer to an authentication challenge.",
      "Follow these steps to test for reflection bugs in ASP.NET:",
      "First, it is necessary to understand the anatomy of a reflection attack scenario by reviewing a common challenge-response mutual authentication process. During a challenge-response authentication sequence the client connects to the server. The server sends a server challenge sc to the client. The client must then respond to the challenge successfully by sending a client response cr along with its own client challenge cc to the application. The application authenticates the client by verifying the client’s response cr and responds to the client’s challenge cc with a server response sr. The client then validates the server response sr and completes mutual authentication.",
      "In detail:",
      "To exploit a reflection bug an attacker connects to the target application, which in turns sends a target challenge tc to the attacker. As the attacker doesn’t know how to respond to the target’s challenge to complete authentication (the attacker doesn’t know the shared secret) it opens a second connection with the target application and sends the target challenge tc as its own challenge to the application. The attacker waits till the target application responds to the challenge sending a target response tr through the second connection and then uses this response as its own response to complete authentication though the first connection.",
      "In detail:",
      "Now it is necessary to understand what causes and how to protect against reflection bugs.",
      "Reflection attacks are possible because of poor implementation of mutual authentication protocols. For instance, in the previous scenario the attacker is able to initiate authentication and the application accepts its own response as an answer to its own challenge. Applications can protect against reflection attacks by using a nonce (number used once). When a client connects to it, the application will start by sending the client a nonce for that specific connection as the server challenge sc. The client must then send his identifier along with the nonce encrypted with the shared key K. The application then decrypts the message sent the client. The application makes sure the response doesn’t correspond to a different challenge by checking if the nonce sent back by the original nonce for the connection. To avoid reflection attacks, the application detects and disallows a nonce being used in the past or used across more than one connection.",
      "Insecure protocol design occurs in ASP.NET applications that poorly implement an authentication scheme. In most cases, ASP.NET application use authentication for login in their clients to the application. If this is the case, developers are encouraged to use ASP.NET’s Forms Authenticationwhich provides a simple environment for client sessions and login forms which is abstracted from the developers.",
      "Now that you’ve reviewed the background in reflection attacks it is necessary to execute practical test cases to check if your application is vulnerable.",
      "Follow these steps to test for reflection bugs:",
      "Expected results: The application is vulnerable to reflection attacks if you are able to successfully authenticate in step 3.",
      "Reflection attacks focus on exploiting logical flaws on applications using a mutual-authentication protocol and responding to an application challenge using an application’s own response. To test for this bug it is suggested you start by understanding its attack scenario as well as what causes it and how to protect against it. Then execute a trivial test case to check if your ASP.NET application is vulnerable."
    ],
    "i": [
      "sc",
      "cr",
      "cc",
      "cr",
      "cc",
      "sr.",
      "sr",
      "sc.",
      "cc",
      "cr",
      "cr.",
      "sr",
      "sr.",
      "tc",
      "tc",
      "tr",
      "tc.",
      "ac = tc)",
      "tr.",
      "ar = tr",
      "ar",
      "nonce",
      "sc.",
      "K.",
      "",
      ""
    ],
    "ol": [
      "The client connects to the server. \r\n    The server sends a server challenge sc.\r\n    The client creates its own challenge cc sends it along with the client’s response cr to the server’s challenge. \r\n    The server validates the client’s response cr. The server sends its own response sr to the client’s challenge. \r\n    The client validates the server’s response sr.",
      "The attacker connects to the target application. \r\n    The target sends the attacker a challenge tc.\r\n    The attacker opens a second connection to the target and sends the target challenge as the attacker’s own challenge (ac = tc) through the second connection. \r\n    Through the second connection, the target responds to the attacker’s challenge with a target response tr.\r\n    Through the original connection, the attacker uses the target response as its own response (ar = tr). \r\n    Through the original connection, the target validates the attacker response ar and authenticates the attacker.",
      "Connect to the target applicationto start authentication. Wait for the application to send a challenge. \r\n    Open a second connection to the target and send the target challenge from the previous step through this connection. Wait for the target application to send a response for the challenge. \r\n    Send the response sent by the application in the previous step through the original connection."
    ],
    "h2": [
      "Insecure protocol design",
      "Test for Reflection Bugs"
    ],
    "b": [
      ""
    ]
  },
  "links": [],
  "html": "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>Summary</h1>\r\n  <p>ASP.NET applications that authenticate their clients using a challenge-response, Diffie-Hellman-like algorithm, for mutual authentication may be vulnerable to reflection attacks where the attacker’s main goal is to trick the application into using its own response as the answer to an authentication challenge.</p>\r\n  <p>Follow these steps to test for reflection bugs in ASP.NET:</p>\r\n  <ul>\r\n    <li>Step 1: Understand attack scenarios </li>\r\n    <li>Step 2: Analyze causes and countermeasures </li>\r\n    <li>Step 3: Execute test cases&nbsp;</li>\r\n  </ul>\r\n  <h1>Step 1: Understand Attack Scenarios</h1>\r\n  <p>First, it is necessary to understand the anatomy of a reflection attack scenario by reviewing a common challenge-response mutual authentication process.&nbsp;During a challenge-response authentication sequence the client connects to the server. The server sends a server challenge <i>sc</i> to the client.&nbsp;The client must then respond to the challenge successfully by sending a client response <i>cr </i>along with its own client challenge <i>cc</i> to the application.&nbsp;The application authenticates the client by verifying the client’s response <i>cr</i> and responds to the client’s challenge <i>cc </i>with a server response <i>sr.</i>&nbsp;The client then validates the server response<i> sr</i> and completes mutual authentication.</p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The client connects to the server. </li>\r\n    <li>The server sends a server challenge <i>sc.</i></li>\r\n    <li>The client creates its own challenge <i>cc </i>sends it along with the client’s response <i>cr </i>to the server’s challenge. </li>\r\n    <li>The server validates the client’s response <i>cr.&nbsp;</i>The server sends its own response <i>sr</i> to the client’s challenge. </li>\r\n    <li>The client validates the server’s response <i>sr.</i></li>\r\n  </ol>\r\n  <p>To exploit a reflection bug an attacker connects to the target application, which in turns sends a target challenge <i>tc</i> to the attacker.&nbsp;As the attacker doesn’t know how to respond to the target’s challenge to complete authentication (the attacker doesn’t know the shared secret) it opens a second connection with the target application and sends the target challenge <i>tc </i>as its own challenge to the application.&nbsp;The attacker waits till the target application responds to the challenge sending a target response <i>tr </i>through the second connection and then uses this response as its own response to complete authentication though the first connection.</p>\r\n  <p>In detail:</p>\r\n  <ol>\r\n    <li>The attacker connects to the target application. </li>\r\n    <li>The target sends the attacker a challenge<i> tc.</i></li>\r\n    <li>The attacker opens a second connection to the target and sends the target challenge as the attacker’s own challenge (<i>ac = tc)</i> through the second connection. </li>\r\n    <li>Through the second connection, the target responds to the attacker’s challenge with a target response <i>tr.</i></li>\r\n    <li>Through the original connection, the attacker uses the target response as its own response (<i>ar = tr</i>). </li>\r\n    <li>Through the original connection, the target validates the attacker response <i>ar </i>and authenticates the attacker.&nbsp;</li>\r\n  </ol>\r\n  <h1>Step 2: Analyze Causes and Countermeasures</h1>\r\n  <p>Now it is necessary to understand what causes and how to protect against reflection bugs.&nbsp;&nbsp; </p>\r\n  <h2>\r\n    Insecure protocol design\r\n  </h2>\r\n  <p>Reflection attacks are possible because of poor implementation of mutual authentication protocols.&nbsp;For instance, in the previous scenario the attacker is able to initiate authentication and the application accepts its own response as an answer to its own challenge.&nbsp;Applications can protect against reflection attacks by using a <i>nonce</i> (number used once).&nbsp;When a client connects to it, the application will start by sending the client a nonce for that specific connection as the server challenge <i>sc. </i>The client must then send his identifier along with the nonce encrypted with the shared key <i>K.&nbsp;</i>The application then decrypts the message sent the client.&nbsp;The application makes sure the response doesn’t correspond to a different challenge by checking if the nonce sent back by the original nonce for the connection.&nbsp;To avoid reflection attacks, the application detects and disallows a nonce being used in the past or used across more than one connection.</p>\r\n  <p>Insecure protocol design occurs in ASP.NET applications that poorly implement an authentication scheme.&nbsp;In most cases, ASP.NET application use authentication for login in their clients to the application.&nbsp;If this is the case, developers are encouraged to use ASP.NET’s Forms Authentication<i></i>which provides a simple environment for client sessions and login forms which is abstracted from the developers. &nbsp;<b>&nbsp;</b></p>\r\n  <h1>Step 3: Execute Test Cases</h1>\r\n  <p>Now that you’ve reviewed the background in reflection attacks it is necessary to execute practical test cases to check if your application is vulnerable.</p>\r\n  <h2>\r\n    Test for Reflection Bugs\r\n  </h2>\r\n  <p>Follow these steps to test for reflection bugs:</p>\r\n  <ol>\r\n    <li>Connect to the target application<i></i>to start authentication. Wait for the application to send a challenge. </li>\r\n    <li>Open a second connection to the target and send the target challenge from the previous step through this connection. Wait for the target application to send a response for the challenge. </li>\r\n    <li>Send the response sent by the application in the previous step through the original connection.</li>\r\n  </ol>\r\n  <p>Expected results:&nbsp;The application is vulnerable to reflection attacks if you are able to successfully authenticate in step 3.&nbsp;</p>\r\n  <h1>Conclusions</h1>\r\n  <p>Reflection attacks focus on exploiting logical flaws on applications using a mutual-authentication protocol and responding to an application challenge using an application’s own response.&nbsp;To test for this bug it is suggested you start by understanding its attack scenario as well as what causes it and how to protect against it.&nbsp;Then execute a trivial test case to check if your ASP.NET application is vulnerable.</p>"
}