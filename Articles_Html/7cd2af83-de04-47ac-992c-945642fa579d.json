{
  "id": "7cd2af83-de04-47ac-992c-945642fa579d",
  "checksum": "7425b0c34b0f20f3005e554f905684e11b57db72",
  "words": {
    "311": [
      "p",
      "a"
    ],
    "314": [
      "p",
      "a"
    ],
    "description": [
      "h1"
    ],
    "a": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "weak": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "cryptographic": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "title"
    ],
    "hash": [
      "p",
      "title"
    ],
    "vulnerability": [
      "p",
      "p"
    ],
    "occurs": [
      "p"
    ],
    "when": [
      "p",
      "p"
    ],
    "the": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "application": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "h1",
      "p",
      "p"
    ],
    "uses": [
      "p"
    ],
    "hashing": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "algorithm": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "that": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "is": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "considered": [
      "p"
    ],
    "to": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "be": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "less": [
      "p"
    ],
    "resistant": [
      "p"
    ],
    "attack": [
      "p",
      "p",
      "p",
      "p"
    ],
    "than": [
      "p"
    ],
    "currently": [
      "p"
    ],
    "recommended": [
      "p"
    ],
    "algorithms": [
      "p",
      "p",
      "p"
    ],
    "and/or": [
      "p"
    ],
    "chosen": [
      "p"
    ],
    "not": [
      "p",
      "p",
      "p"
    ],
    "used": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "appropriately": [
      "p"
    ],
    "use": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "properly": [
      "p",
      "p"
    ],
    "strong": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "has": [
      "p",
      "p",
      "p"
    ],
    "iteratively": [
      "p",
      "p",
      "p",
      "p"
    ],
    "and": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "with": [
      "p",
      "p",
      "p"
    ],
    "salt": [
      "p",
      "p",
      "p"
    ],
    "note": [
      "p"
    ],
    "hashes": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "are": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "p",
      "p",
      "em"
    ],
    "commonly": [
      "p"
    ],
    "protect": [
      "p",
      "p",
      "p"
    ],
    "stored": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a"
    ],
    "passwords": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "this": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "type": [
      "p",
      "p"
    ],
    "affects": [
      "p"
    ],
    "all": [
      "p",
      "p"
    ],
    "applications": [
      "p",
      "p",
      "p"
    ],
    "impact": [
      "h1",
      "p"
    ],
    "of": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "using": [
      "p",
      "p",
      "p"
    ],
    "attacker": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "might": [
      "p",
      "p",
      "p"
    ],
    "able": [
      "p",
      "p",
      "p",
      "p"
    ],
    "recover": [
      "p",
      "p"
    ],
    "hashed": [
      "p",
      "p",
      "p",
      "p"
    ],
    "data": [
      "p"
    ],
    "usually": [
      "p",
      "p",
      "p"
    ],
    "as": [
      "p"
    ],
    "last": [
      "p"
    ],
    "line": [
      "p"
    ],
    "defense": [
      "p"
    ],
    "if": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "compromised": [
      "p",
      "p",
      "p"
    ],
    "downloaded": [
      "p"
    ],
    "password": [
      "p",
      "p",
      "p",
      "p"
    ],
    "he": [
      "p",
      "p"
    ],
    "still": [
      "p"
    ],
    "won't": [
      "p"
    ],
    "them": [
      "p",
      "p",
      "p",
      "p"
    ],
    "then": [
      "p",
      "p",
      "p"
    ],
    "will": [
      "p",
      "p",
      "p"
    ],
    "easily": [
      "p",
      "p"
    ],
    "crack": [
      "p",
      "p"
    ],
    "brute-force": [
      "p",
      "p",
      "p"
    ],
    "attacks": [
      "p",
      "p",
      "p",
      "p"
    ],
    "in": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "tries": [
      "p"
    ],
    "possible": [
      "p",
      "p",
      "p",
      "p"
    ],
    "values": [
      "p"
    ],
    "compares": [
      "p",
      "p"
    ],
    "even": [
      "p",
      "p"
    ],
    "can": [
      "p"
    ],
    "by": [
      "p",
      "p",
      "p"
    ],
    "practice": [
      "p"
    ],
    "vulnerable": [
      "p"
    ],
    "dictionary": [
      "p",
      "p",
      "p"
    ],
    "list": [
      "p"
    ],
    "dictionary)": [
      "p"
    ],
    "against": [
      "p"
    ],
    "must": [
      "p",
      "p"
    ],
    "addition": [
      "p"
    ],
    "being": [
      "p"
    ],
    "after": [
      "p",
      "p"
    ],
    "downloading": [
      "p"
    ],
    "try": [
      "p"
    ],
    "administrative": [
      "p",
      "p"
    ],
    "users": [
      "p",
      "p",
      "p"
    ],
    "have": [
      "p",
      "p",
      "p",
      "p",
      "p"
    ],
    "already": [
      "p"
    ],
    "get": [
      "p"
    ],
    "first": [
      "p"
    ],
    "place": [
      "p"
    ],
    "but": [
      "p"
    ],
    "may": [
      "p"
    ],
    "full": [
      "p"
    ],
    "access": [
      "p",
      "p",
      "p",
      "em"
    ],
    "yet": [
      "p"
    ],
    "compromising": [
      "p"
    ],
    "gain": [
      "p",
      "p"
    ],
    "other": [
      "p"
    ],
    "resources": [
      "p"
    ],
    "where": [
      "p"
    ],
    "same": [
      "p"
    ],
    "or": [
      "p",
      "p",
      "p"
    ],
    "additional": [
      "p"
    ],
    "control": [
      "p",
      "p",
      "p"
    ],
    "one": [
      "p"
    ],
    "scenario": [
      "p",
      "p"
    ],
    "recovered": [
      "p"
    ],
    "sql": [
      "p"
    ],
    "injection": [
      "p"
    ],
    "cracked": [
      "p"
    ],
    "take": [
      "p",
      "p"
    ],
    "over": [
      "p"
    ],
    "completely": [
      "p"
    ],
    "another": [
      "p"
    ],
    "for": [
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "compromise": [
      "p"
    ],
    "download": [
      "p"
    ],
    "hold": [
      "p"
    ],
    "on": [
      "p",
      "p"
    ],
    "administrator": [
      "p"
    ],
    "come": [
      "p"
    ],
    "back": [
      "p"
    ],
    "at": [
      "p"
    ],
    "later": [
      "p"
    ],
    "time": [
      "p"
    ],
    "administrators": [
      "p"
    ],
    "thought": [
      "p"
    ],
    "they": [
      "p",
      "p"
    ],
    "had": [
      "p"
    ],
    "regained": [
      "p"
    ],
    "lastly": [
      "p"
    ],
    "common": [
      "p",
      "p"
    ],
    "occurrence": [
      "p"
    ],
    "been": [
      "p",
      "p",
      "p"
    ],
    "web": [
      "p",
      "p",
      "p",
      "p"
    ],
    "sites": [
      "p"
    ],
    "hacked": [
      "p"
    ],
    "account": [
      "p"
    ],
    "details": [
      "p"
    ],
    "their": [
      "p"
    ],
    "published": [
      "p"
    ],
    "internet": [
      "p"
    ],
    "bad": [
      "p"
    ],
    "reputation": [
      "p"
    ],
    "affected": [
      "p"
    ],
    "site": [
      "p"
    ],
    "especially": [
      "p"
    ],
    "adequately": [
      "p"
    ],
    "protected": [
      "p"
    ],
    "countermeasures": [
      "h1"
    ],
    "prevent": [
      "p"
    ],
    "vulnerabilities": [
      "p",
      "p",
      "p"
    ],
    "key": [
      "p",
      "p"
    ],
    "derivation": [
      "p",
      "p"
    ],
    "unique": [
      "p",
      "p"
    ],
    "each": [
      "p",
      "p"
    ],
    "value": [
      "p",
      "p"
    ],
    "store": [
      "ul",
      "li",
      "a"
    ],
    "securely": [
      "ul",
      "li",
      "a",
      "ul",
      "li",
      "a"
    ],
    "check": [
      "h1"
    ],
    "verify": [
      "p",
      "p"
    ],
    "computer": [
      "h1",
      "p"
    ],
    "based": [
      "h1",
      "p"
    ],
    "training": [
      "h1",
      "p"
    ],
    "links": [
      "h1"
    ],
    "following": [
      "p"
    ],
    "courses": [
      "p"
    ],
    "more": [
      "p"
    ],
    "background": [
      "p"
    ],
    "information": [
      "p"
    ],
    "about": [
      "p"
    ],
    "creating": [
      "h2",
      "p",
      "a",
      "h2",
      "p",
      "a"
    ],
    "secure": [
      "h2",
      "p",
      "p",
      "p",
      "a",
      "h2",
      "p",
      "p",
      "a"
    ],
    "aspnet": [
      "h2",
      "p",
      "a"
    ],
    "code": [
      "h2",
      "p",
      "a",
      "h2",
      "p",
      "a"
    ],
    "in-depth": [
      "p"
    ],
    "course": [
      "p",
      "p",
      "p",
      "p",
      "em"
    ],
    "examines": [
      "p"
    ],
    "development": [
      "p"
    ],
    "aspnet.": [
      "p"
    ],
    "it": [
      "p"
    ],
    "provides": [
      "p"
    ],
    "developers": [
      "p"
    ],
    "testers": [
      "p"
    ],
    "an": [
      "p"
    ],
    "overview": [
      "p"
    ],
    "set": [
      "p"
    ],
    "nine": [
      "p"
    ],
    "best": [
      "p",
      "p"
    ],
    "practices": [
      "p",
      "p"
    ],
    "techniques": [
      "p",
      "p"
    ],
    "follow": [
      "p"
    ],
    "order": [
      "p"
    ],
    "avoid": [
      "p"
    ],
    "throughout": [
      "p"
    ],
    "students": [
      "p",
      "p",
      "p"
    ],
    "provided": [
      "p"
    ],
    "interactive": [
      "p"
    ],
    "games": [
      "p"
    ],
    "simulations": [
      "p"
    ],
    "designed": [
      "p"
    ],
    "reinforce": [
      "p"
    ],
    "design": [
      "p"
    ],
    "coding": [
      "p",
      "p",
      "p"
    ],
    "concepts": [
      "p",
      "p"
    ],
    "were": [
      "p"
    ],
    "introduced": [
      "p"
    ],
    "cod": [
      "p",
      "a",
      "p",
      "a"
    ],
    "c#": [
      "h2",
      "p",
      "p",
      "a"
    ],
    "provide": [
      "p"
    ],
    "deep": [
      "p"
    ],
    "understanding": [
      "p"
    ],
    "security": [
      "p"
    ],
    "risks": [
      "p"
    ],
    "standards": [
      "p"
    ],
    "main": [
      "p"
    ],
    "lesson": [
      "p"
    ],
    "guides": [
      "p"
    ],
    "through": [
      "p"
    ],
    "underlying": [
      "p"
    ],
    "principles": [
      "p"
    ],
    "illustrates": [
      "p"
    ],
    "real-world": [
      "p"
    ],
    "labs": [
      "p"
    ],
    "allow": [
      "p"
    ],
    "test": [
      "p"
    ],
    "what": [
      "p"
    ],
    "learned": [
      "p"
    ],
    "valid": [
      "p",
      "em"
    ],
    "login": [
      "p",
      "p",
      "em",
      "em"
    ],
    "credentials": [
      "p",
      "p",
      "em",
      "em"
    ],
    "enrollment": [
      "p",
      "em"
    ],
    "itself": [
      "p",
      "em"
    ],
    "required": [
      "p",
      "em"
    ],
    "team": [
      "p",
      "em"
    ],
    "professor": [
      "p",
      "em"
    ],
    "content": [
      "p",
      "em"
    ],
    "you": [
      "p",
      "em"
    ],
    "need": [
      "p",
      "em"
    ],
    "please": [
      "p",
      "em"
    ],
    "contact": [
      "p",
      "em"
    ],
    "support@securityinnovationcom": [
      "p",
      "em"
    ],
    "help": [
      "p",
      "em"
    ]
  },
  "tags": {
    "h1": [
      "Description",
      "Impact",
      "Countermeasures",
      "Application Check",
      "Computer Based Training Links"
    ],
    "p": [
      "A weak cryptographic hash vulnerability occurs when the application uses a hashing algorithm that is considered to be less resistant to attack than the currently recommended algorithms, and/or the chosen hashing algorithm is not used appropriately. To use cryptographic hashing properly, a strong algorithm has to be used iteratively and with a salt.",
      "Note that cryptographic hashes are commonly used to protect stored passwords.",
      "This vulnerability type affects all applications that use cryptographic hashes.",
      "The impact of using weak cryptographic hashing is that the attacker might be able to recover the hashed data. Cryptographic hashes are usually used to protect stored passwords as the last line of defense. If the attacker has compromised the application and downloaded the password hashes, he still won't be able to use them if the hashes are strong. If weak hashes are used, then the attacker will be able to easily crack them using brute-force attacks. In a brute-force attack, the attacker iteratively tries hashing all possible values and compares the hashes to the stored hashes. If weak hashing is used, even strong passwords can be easily compromised by brute-force attacks.",
      "In practice, even when strong hashing is used, hashed passwords might be vulnerable to dictionary attacks. In a dictionary attack, the attacker hashes a list (dictionary) of possible passwords and compares them to the stored hashes. To protect against dictionary attacks, passwords must be strong in addition to strong hashing being used.",
      "After downloading the password hashes, the attacker will usually try to recover the passwords of the administrative users. The attacker must have already compromised the application to be able to get the hashes in the first place, but he may not have full access yet. By compromising the passwords of the administrative users, the attacker might gain access to other resources where the same password is used, or gain additional control of the application.",
      "One possible scenario is that the hashes are recovered using a SQL injection attack, then cracked, and then used by the attacker to take over the application completely. Another possible scenario is for the attacker to compromise the application, download and crack the hashes, hold on to the administrator password, and come back at a later time to take control of the application after the administrators thought they had regained control of the application. Lastly, a common occurrence has been that web sites have been hacked and the stored account details of their users have been published on the Internet. This is usually bad for the reputation of the affected web site, especially if the stored passwords are not adequately protected.",
      "To prevent weak cryptographic hashing vulnerabilities, use a strong hashing algorithm iteratively or use a key derivation algorithm, and use a unique salt for each hashed value.",
      "To verify that cryptographic hashing is used properly, verify that strong hashing algorithms are used iteratively or key derivation algorithms are used, and that a unique salt is used for each hashed value.",
      "Use the following Computer Based Training courses for more background information about this type of vulnerabilities.",
      "This in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.",
      "COD 311 Creating Secure ASP.NET Code",
      "This course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned",
      "COD 314 Creating Secure C# Code",
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ],
    "ul": [
      "Store Passwords Securely",
      "Passwords Are Stored Securely"
    ],
    "li": [
      "Store Passwords Securely",
      "Passwords Are Stored Securely"
    ],
    "a": [
      "Store Passwords Securely",
      "Passwords Are Stored Securely",
      "COD 311 Creating Secure ASP.NET Code",
      "COD 314 Creating Secure C# Code"
    ],
    "h2": [
      "Creating Secure ASP.NET Code",
      "Creating Secure C# Code"
    ],
    "em": [
      "Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help."
    ]
  },
  "links": [
    {
      "href": "00000000-0000-0000-0000-0000006adfa3",
      "text": "Store Passwords Securely"
    },
    {
      "href": "00000000-0000-0000-0000-00000077a50c",
      "text": "Passwords Are Stored Securely"
    },
    {
      "href": "https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607",
      "text": "COD 311 Creating Secure ASP.NET Code"
    },
    {
      "href": "https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127608",
      "text": "COD 314 Creating Secure C# Code"
    }
  ],
  "html": "<h1>Description</h1><p>A weak cryptographic hash vulnerability occurs when the application uses a hashing algorithm that is considered to be less resistant to attack than the currently recommended algorithms, and/or the chosen hashing algorithm is not used appropriately. To use cryptographic hashing properly, a strong algorithm has to be used iteratively and with a salt. \n</p><p>\nNote that cryptographic hashes are commonly used to protect stored passwords. \n</p><p>\nThis vulnerability type affects all applications that use cryptographic hashes. \n</p><h1>Impact</h1><p>The impact of using weak cryptographic hashing is that the attacker might be able to recover the hashed data. Cryptographic hashes are usually used to protect stored passwords as the last line of defense. If the attacker has compromised the application and downloaded the password hashes, he still won't be able to use them if the hashes are strong. If weak hashes are used, then the attacker will be able to easily crack them using brute-force attacks. In a brute-force attack, the attacker iteratively tries hashing all possible values and compares the hashes to the stored hashes. If weak hashing is used, even strong passwords can be easily compromised by brute-force attacks.\n</p><p>\nIn practice, even when strong hashing is used, hashed passwords might be vulnerable to dictionary attacks. In a dictionary attack, the attacker hashes a list (dictionary) of possible passwords and compares them to the stored hashes. To protect against dictionary attacks, passwords must be strong in addition to strong hashing being used. \n</p><p>\nAfter downloading the password hashes, the attacker will usually try to recover the passwords of the administrative users. The attacker must have already compromised the application to be able to get the hashes in the first place, but he may not have full access yet. By compromising the passwords of the administrative users, the attacker might gain access to other resources where the same password is used, or gain additional control of the application. \n</p><p>\nOne possible scenario is that the hashes are recovered using a SQL injection attack, then cracked, and then used by the attacker to take over the application completely. Another possible scenario is for the attacker to compromise the application, download and crack the hashes, hold on to the administrator password, and come back at a later time to take control of the application after the administrators thought they had regained control of the application. Lastly, a common occurrence has been that web sites have been hacked and the stored account details of their users have been published on the Internet. This is usually bad for the reputation of the affected web site, especially if the stored passwords are not adequately protected.\n</p><h1>Countermeasures</h1><p>To prevent weak cryptographic hashing vulnerabilities, use a strong hashing algorithm iteratively or use a key derivation algorithm, and use a unique salt for each hashed value.\n</p><ul>\n<li> <a href=\"00000000-0000-0000-0000-0000006adfa3\">Store Passwords Securely</a></li>\n</ul><h1>Application Check</h1><p>To verify that cryptographic hashing is used properly, verify that strong hashing algorithms are used iteratively or key derivation algorithms are used, and that a unique salt is used for each hashed value.\n</p><ul>\n<li> <a href=\"00000000-0000-0000-0000-00000077a50c\">Passwords Are Stored Securely</a></li>\n</ul><h1>Computer Based Training Links</h1><p>Use the following Computer Based Training courses for more background information about this type of vulnerabilities.\n</p><h2>Creating Secure ASP.NET Code</h2><p>This in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.\n</p><p>\n<a href=\"https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607\">COD 311 Creating Secure ASP.NET Code</a>\n</p><h2>Creating Secure C# Code</h2><p>This course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned\n</p><p>\n<a href=\"https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127608\">COD 314 Creating Secure C# Code</a>\n</p><p>\n<em>Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.</em>\n</p>\n"
}