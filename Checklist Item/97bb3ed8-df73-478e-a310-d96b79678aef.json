{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "549442057",
      "Content_Hash": "1696084276"
    },
    "Metadata": [
      {
        "Id": [
          "97bb3ed8-df73-478e-a310-d96b79678aef"
        ],
        "Id_History": [
          "97bb3ed8-df73-478e-a310-d96b79678aef,d8d5dd89-a2db-4e46-80ab-83e7b873452a,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Sensitive Data Is Encrypted"
        ],
        "Category": [
          "Cryptography"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Sensitive Data Is Encrypted"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          "2"
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>What to Check For</h1>\r\n  <p>Ensure that encryption is used to avoid sensitive data from being stored as&nbsp;plaintext in application configuration files or elsewhere.</p>\r\n  <h1>Why</h1>\r\n  <p>Sensitive application data can be compromised if stored in plaintext. Unauthorized access by users or attackers can lead to information disclosure.</p>\r\n  <h1>How to Check</h1>\r\n  <p>In applications that accept or process user-sensitive or private data, it is essential to ensure that such important data is not stored in plaintext form, so that no one except the owning user has access to the data. In order to prevent disclosure of such sensitive data, verify the following:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to:</p>\r\n      <ul>\r\n        <li>names of customers </li>\r\n        <li>government issued ID numbers </li>\r\n        <li>credit card and other financial information </li>\r\n        <li>passwords </li>\r\n        <li>private keys</li>\r\n      </ul>\r\n      <p>Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements as they apply to your application to identify sensitive data. Sensitive data can be defined as follows:<br /></p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>\r\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\r\n        <li>Information that comes from an external trusted source that is not designed to be shared with users</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that sensitive data is stored securely. </strong>Ensure that your application stores sensitive data using either hashing or encryption:</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Hashing: </strong>Hashing is a one-way mechanism for storing sensitive data in a non-retrievable way. If your application uses hashing as means for storing sensitive data, verify that the following pieces are in place:</p>\r\n          <ul>\r\n            <li>\r\n              <strong>Salt</strong>: Your application generates its salt using the SecureRandom class. </li>\r\n            <li>\r\n              <strong>Function</strong>: Your application uses SHA-256, SHA-384, or SHA-512 as its hash function. </li>\r\n            <li>\r\n              <strong>Invocation</strong>: Your application invokes the <em>MessageDigest.digest</em> method to perform the hashing procedure. </li>\r\n            <li>\r\n              <strong>Clean-up</strong>: Your application securely cleans-up all instances of the sensitive data after the hashing procedure has been completed. </li>\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Encryption:</strong> Encryption is a mechanism for storing sensitive data in a retrievable way. If your application uses encryption as means for storing sensitive data, verify that the following pieces are in place:</p>\r\n          <ul>\r\n            <li>\r\n              <strong>Encryption Key</strong>: Verify that your application's encryption keys are securely stored inside your application's key store.&nbsp; </li>\r\n            <li>\r\n              <strong>Function</strong>: Check if your application uses AES, 3DES, or any other strong symmetric encryption function. </li>\r\n            <li>\r\n              <strong>Invocation</strong>: Check if your application invokes the <em>Cipher.init</em> and <em>Cipher.doFinal</em> methods to perform the encryption procedure. </li>\r\n            <li>\r\n              <strong>Clean-up</strong>: Check if your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed. <ul></ul><strong>Note:</strong> PCI DSS certification requires that all passwords are encrypted when stored or sent, and that encrytion keys should be encrypted, with the key used to encrypt the other keys being stored separately from the keys used to encrypt the data.</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ol>\r\n  <p />\r\n  <h1>How to Fix</h1>\r\n  <p>Use the following steps when storing sensitive data:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>\r\n      <ul>\r\n        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>\r\n        <li>Information that a user provides that they would not want shared with other users of the application. </li>\r\n        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Choose an appropriate protection mechanism. </strong>Choosing the appropriate protection mechanism depends on the purpose and use of the sensitive data.</p>\r\n      <ul>\r\n        <li>\r\n          <p>\r\n            <strong>Hashing the application data:</strong> Use hashing if the application data will be used only for comparison purposes. If hashing is used, choose a longer salt: 16 or more bits.&nbsp;In the event&nbsp;that the produced hash is compromised, longer salts make it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Always use <em>SecureRandom</em> and not <em>Random</em> to generate the salt. Example of using <em>SecureRandom</em> to generate a random salt:</p>\r\n          <pre>public static byte[] generateSalt()<br /> throws NoSuchAlgorithmException<br />{<br />      // Note that salt is declared as private static byte[] and is<br />      // initialized to null.<br /><br />      if (salt == null)<br />      {<br />            SecureRandom srand = SecureRandom.getInstance(\"SHA1PRNG\");<br /><br />            salt = new byte[4];<br />            srand.nextBytes(salt);<br />      }<br /><br />      return salt;<br />}</pre>\r\n          <p>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-512 or stronger. </p>\r\n          <pre>public String hashCredentials(char[] pass, byte[] salt)<br />      throws GeneralSecurityException, IOException<br />{<br />      MessageDigest md;<br />      byte[] tempPass;<br />      byte[] digest;<br /><br />      md = MessageDigest.getInstance(\"SHA-512\");<br /><br />      //Convert char[] to byte[]<br />      tempPass = new byte[pass.length];<br />      for (int i = 0; i &lt; pass.length; i++)<br />      {<br />            tempPass[i] = (byte)pass[i];<br />      }<br />      md.update(tempPass);<br />      md.update(salt);<br />      digest = md.digest();<br />      md.reset();<br />      //Clean tempPass<br />      for (int i = 0; i &lt; tempPass.length; i++)<br />      {<br />            tempPass[i] = 0;<br />      }<br /><br />      return new String(digest);<br />}</pre>\r\n        </li>\r\n        <li>\r\n          <p>\r\n            <strong>Encrypting the application data. </strong>Use encryption if the application data will be retrieved at a later stage.<br /><br />Use symmetric encryption if and only if your application is the only entity that will access the encrypted data. Use a key size of 265-bit or higher and AES for symmetric encryption.<br /><br />Use public/private key encryption if the data will be accessed by two or more parties. Use a key size of 2048-bit or higher and RSA for public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key.</p>\r\n          <pre>// Because the following code generates a new encryption key,<br />// make sure to store it into the application's keystore.<br />// Follow the <a href=\"/article/cd4ccbbb-be9c-4ff4-8b20-d116819b634b\">Use a Secure Key Storage Location</a> guideline.<br />KeyGenerator kgen = KeyGenerator.getInstance(\"AES\");<br />kgen.init(256);<br />SecretKey skey = kgen.generateKey();<br /><br />// Set up cipherCipher cipher = Cipher.getInstance(\"AES\");<br />cipher.init(Cipher.ENCRYPT_MODE, skey);<br />// Note that sensitiveData is of type byte[] and contains<br />// data that is sensitive in nature<br />byte[] encrypted = cipher.doFinal(sensitiveData);</pre>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Apply the appropriate protection mechanism. </strong>Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location.</p>\r\n      <pre>try<br />{<br />      // The application produces a hash based on the sensitive data<br />      userEmail = MyApp.getEmailForUser(user);<br />      passDigest = encryptCredentials(userEmail, pass, salt);<br />}<br />catch (GeneralSecurityException gse)<br />{<br />      // Add the appropriate logging and exception handling mechanisms<br />      return false;}catch (IOException ioe)<br />{<br />      // Add the appropriate logging and exception handling mechanisms<br />      return false;<br />}<br />// The application stores the hashed sensitive data into the database<br />Connection cn = MyApp.getDBConnection();<br />PreparedStatement st = cn.prepareStatement(\"select login_attempts from myappUsers\"<br />                                           + \" where user = ? and pass = ?;\");<br />st.setString(1, user);<br />st.setBytes(2, passDigest);<br />ResultSet rs = st.executeQuery();</pre>\r\n    </li>\r\n  </ol>\r\n  <h1>Problem Example</h1>\r\n  <p>The following code retrieves database credentials from a configuration file. Unfortunately, the credentials are not encrypted; therefore, anyone with access to the configuration file can retrieve the credentials and access the database on behalf of the application.</p>\r\n  <pre>public Properties loadDatabaseCredentials()<br />      throws IOException<br />{<br />      Properties prop = new Properties();<br />      InputStream propStream = new FileInputStream(\"../../config/testProp.config\");<br />      prop.load(propStream);<br />      propStream.close();<br /><br />      return prop;<br />}</pre>\r\n  <h1>Solution Example</h1>\r\n  <p>The following code retrieves database credentials from a configuration file. Because the credentials are encrypted, the application decrypts them in real time which&nbsp;protects the credentials' confidentiality in case the local access to the configuration file is not properly secured.</p>\r\n  <pre>public Properties loadDatabaseCredentials()<br />      throws GeneralSecurityException, IOException<br />{<br />      // Set the decryption mechanism<br />      byte[] rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, \"AES\");<br />      Cipher cipher = Cipher.getInstance(\"AES\");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File(\"../../config/testProp.config\");<br />      byte[] tempBuff = new byte[(int)configFile.length()];<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop;<br />}</pre>\r\n  <h1>Java Cryptographic Storage Guidelines</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/6e0918c1-90db-46d5-9f0e-8a98ddbcd7d5\">Store Passwords Securely</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/b38a70c0-a014-4262-b3d6-69d6d4f0fe46\">Do Not Store Plaintext Sensitive Data</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/66df6465-5476-4b55-90c8-ffbd7d556205\">Use Strong Symmetric Encryption</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/f5cdd292-6f61-4584-b014-fc5134a3f9bc\">Use Strong Asymmetric Encryption</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/1057099e-dd79-4f41-8b7e-36f00f1343e4\">Use a Secure Key Storage Location</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Cryptographic Storage Checklists</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/d74fe6bf-387f-4ff1-9edb-d0275eedffc0\">Passwords Are Stored Securely</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/97bb3ed8-df73-478e-a310-d96b79678aef\">Sensitive Data Is Encrypted</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/23019ede-9f30-4709-997d-586475a2e626\">Strong Symmetric Encryption Is Used</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/14a46517-6c86-498e-8429-1cb5ca3ce7c1\">Strong Asymmetric Encryption Is Used</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"/article/08e76219-384d-4c5f-954e-09617f717558\">A Secure Key Storage Location Is Used</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Cryptographic Storage Code Example</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/11e7466f-001b-4c8d-b282-a3c12aa0588c\">Use ESAPI Randomizer</a>\r\n    </li>\r\n  </ul>\r\n  <h1>Java Cryptographic Storage Testing</h1>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/6d36aa09-5b7f-4967-b3c7-661b860846e2\">How to Test for Local Machine Credential Theft Bugs in Java</a>\r\n    </li>\r\n  </ul>"
        ]
      }
    ]
  }
}