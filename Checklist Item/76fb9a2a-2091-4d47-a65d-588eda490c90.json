{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "381073419",
      "Content_Hash": "-1189766238"
    },
    "Metadata": [
      {
        "Id": [
          "76fb9a2a-2091-4d47-a65d-588eda490c90"
        ],
        "Id_History": [
          "76fb9a2a-2091-4d47-a65d-588eda490c90,8865872c-be1a-461f-adc1-e324f34b4c48,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6234f2d47eb7"
        ],
        "Title": [
          "Valuable Information Is Not Disclosed in Error Messages"
        ],
        "Category": [
          "Error and Exception Management"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          ".NET"
        ],
        "Type": [
          "Checklist Item"
        ],
        "DirectLink": [
          "Valuable Information Is Not Disclosed in Error Messages"
        ],
        "Tag": [
          ""
        ],
        "Security_Demand": [
          ""
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ],
        "Source": [
          "SI"
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "true",
          "DataType": "Html"
        },
        "Data": [
          "<h1>Applies To</h1>\r\n  <ul>\r\n    <li>ASP.NET 4.0</li>\r\n  </ul>\r\n  <h1>What to Check For</h1>\r\n  <p>Ensure that internal application details are not allowed to be sent to the client.</p>\r\n  <h1>Why</h1>\r\n  <p>Exceptions contain sensitive information about the application (e.g. call stack, fragments of code, etc.). Disclosing such information to an attacker could aid them with attacking the system.</p>\r\n  <h1>How To Check</h1>\r\n  <p>Use the following steps to verify exception details are not disclosed to the client:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that all expected exceptions are caught. </strong>Verifying that all expected exceptions are handled minimizes the risk of such an exception surfacing to the root of the execution stack.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify that a global exception handler is used. </strong>Global exception handling prevents unhandled exceptions from surfacing to the client.&nbsp;The following code gives an example of how this might be done:</p>\r\n      <pre> &lt;%@ Application Language=\"C#\" %&gt;<br /> &lt;%@ Import Namespace=\"System.Diagnostics\" %&gt;<br /> &lt;script language=\"C#\" runat=\"server\"&gt;<br /> void Application_Error(object sender, EventArgs e)<br /> {<br />     // Add the appropriate logging code<br />     Response.Write(\"We are sorry, but we cannot complete your request. Please try again later!\");<br />     Server.ClearError();<br /> }<br /> &lt;/script&gt;</pre>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify dynamically generated error messages are sufficiently generic</strong>:Dynamically generated error messages should not disclose detailed information about the inner-workings of the application and should not display user-supplied data without first properly encoding the data.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Verify error pages are sufficiently generic</strong>: The application error pages should be designed to not reveal detailed information about the inner-workings of the application and should not display user-supplied data without first properly encoding the data. Ensure that the <strong>customErrors</strong> element in your application's web.config sets the <strong>mode</strong> attribute to <strong>On</strong> or <strong>RemoteOnly</strong>. For example:</p>\r\n      <pre>&lt;customErrors mode=\"On\" defaultRedirect=\"ErrDefault.aspx\"&gt;<br /><br />    &lt;error statusCode=\"401\" redirect=\"ErrUnauthorized.aspx\" /&gt;<br />    &lt;error statusCode=\"404\" redirect=\"ErrPageNotFound.aspx\" /&gt;<br />    &lt;error statusCode=\"500\" redirect=\"ErrServer.htm\" /&gt;<br />&lt;/customErrors&gt; </pre>\r\n    </li>\r\n  </ol>\r\n  <h1>How To Fix</h1>\r\n  <p>Use the following steps to make sure that valuable information is not disclosed via error messages:</p>\r\n  <ol>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure all error messages are generic.</strong> Make sure no error message displays too much information about the quality of the data being processed or what mechanisms are being used to process the data. For example, an error message such as “the input contains invalid characters” is much more secure than \"the input cannot contain '&lt;' or '&gt;' characters\".</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Be careful with dynamically generated error messages.</strong> Dynamic error messages are difficult to get right and should not be used unless absolutely necessary. If they must be used, be sure the error message cannot aid an attacker in any way. Dynamically generated error messages may open the application up for other vulnerabilities, such as SQL injection, Buffer Overflows or Cross Site Scripting.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Make sure debug information is not echoed to the user.</strong> Debug information can be generated but should be logged to a database with write only permissions that is accessible only by an administrator.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Display only basic authentication failure messages.</strong> For authentication error messages be sure to choose a single error message to be displayed on all authentication failures. Ensure that the same generic error message is displayed any time a user fails to authenticate for any of the following reasons:</p>\r\n      <ul>\r\n        <li>Invalid username </li>\r\n        <li>Valid username, but invalid password </li>\r\n        <li>Account locked</li>\r\n      </ul>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Set customErrors to \"RemoteOnly\" or \"On\" in the web.config file.</strong> ASP.NET allows you to specify a custom error message instead of an error message that describes the error in detail. Leaving customErrors=\"Off\" means that an attacker will see a complete stack trace as well as a highly detailed error message generated by the .NET runtime or other backend systems.</p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <strong>Ensure error messages reporting the same message are exactly the same.</strong> Multiple error messages may be compared to discover more information about the system. Individually the error message may not display sensitive information, but when compared side by side they may aid an attacker. Error messages may differ in language or punctuation, but these differences will tell an attacker different code paths are being taken. Using a common error resource file can make reporting the same error message from multiple locations much easier. Create a common error resource file that links error text with an error number, this way when a certain error happens it can simply look up the error text in the error message resource file, which ensures the same message will be used in all places.</p>\r\n    </li>\r\n  </ol>\r\n  <h1>Related Items</h1>\r\n  <em>You may find these additional articles useful</em>\r\n  <ul>\r\n    <li>\r\n      <a href=\"/article/a880d974-3543-4190-ae63-ea7e8ac11d0a\">Do Not Disclose Valuable Information in Error Messages</a>\r\n    </li>\r\n  </ul>\r\n  <hr />\r\n  <p>Adapted from Microsoft patterns & practices guidance. </p>\r\n  <h1>\r\n  </h1>\r\n  <h1>\r\n  </h1>"
        ]
      }
    ]
  }
}