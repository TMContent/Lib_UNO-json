{
  "TeamMentor_Article": {
    "$": {
      "Metadata_Hash": "0",
      "Content_Hash": "0"
    },
    "Metadata": [
      {
        "Id": [
          "fa554526-0e27-470f-ba6c-464c2250cfbd"
        ],
        "Id_History": [
          "00000000-0000-0000-0000-000000839b9c,fa554526-0e27-470f-ba6c-464c2250cfbd,3d971933-803c-431a-b456-efe26bbd9942,"
        ],
        "Library_Id": [
          "be5273b1-d682-4361-99d9-6204f2d47eb7"
        ],
        "Title": [
          "Missing XML Validation"
        ],
        "Category": [
          "Input and Data Validation"
        ],
        "Phase": [
          "Implementation"
        ],
        "Technology": [
          "Java"
        ],
        "Type": [
          "Vulnerability"
        ],
        "DirectLink": [
          "Missing XML Validation"
        ],
        "Author": [
          ""
        ],
        "Priority": [
          ""
        ],
        "Status": [
          ""
        ]
      }
    ],
    "Content": [
      {
        "$": {
          "Sanitized": "false",
          "DataType": "wikitext"
        },
        "Data": [
          "=Description\n\nMissing XML validation means that an attacker may cause the application to parse invalid XML data. This vulnerability type refers specifically to not validating XML against a schema. In itself, this might not cause any harm, but it may enable other vulnerabilities, such as XML Entity Injection. This vulnerability type affects all applications that parse XML data. \n\n=Impact\n\nMissing XML validation may enable other attacks that exploit other vulnerabilities. The exact impact depends on the kind of other vulnerabilities that are enabled. The most likely and dangerous scenario is some form of XML injection attack, where the attack manipulates application data by sending malformed XML data. For example, if the application uses XML to store authentication credentials, the attacker may be able to send XML data that authenticates him as an administrative user, and he may then take over the application. For that to be possible, a number of other vulnerabilities in addition to missing XML validation would need to be present. \n\n=Countermeasures\n\nTo prevent this vulnerability type, validate untrusted XML data.  XML validation helps prevent attacks that exploit other vulnerabilities, and should always be used when untrusted XML data is processed.\n\nValidate XML data using XML schema:\n\n* [[00000000-0000-0000-0000-0000005604f1|Validate XML Data]]\n\n=Application Check\n\nTo check for adequate protection against this vulnerability type, verify that untrusted XML data is validated.\n\nXML data is validated using XML schema:\n\n* [[00000000-0000-0000-0000-0000000b3752|XML Data Is Validated]]\n\n=Computer Based Training Links=\n\nUse the following Computer Based Training course(s) for more background information about this type of vulnerabilities.\n\n==Creating Secure Code – JRE Foundations==\n\nIn this course, you will learn to recognize and remediate common Java Web software security vulnerabilities.  This course has three modules, which introduce you to these vulnerabilities and help you to identify and remediate them.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127615|COD 211 Creating Secure Code – JRE Foundations]]\n\n==Creating Secure J2EE Code==\n\nThis course introduces and explains the precautionary measures you can use to avoid Web software security vulnerabilities, such as data leakage attacks, client/server protocol manipulation, injection attacks, and exploiting authentication.  At the end of this course, you will have learned about time-tested defensive coding principles and how to use them to increase the security of your application, and prevent common security vulnerabilities.\n\n[[https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127619|COD 313 Creating Secure J2EE Code]]\n\n//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//\n\n=Additional Resources\n\n* For more information about this vulnerability type, see http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Missing_XML_Validation\n* For more information about this vulnerability type, see https://www.owasp.org/index.php/Missing_XML_Validation"
        ]
      }
    ]
  }
}